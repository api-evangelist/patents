---
title: Strategies for processing image information using a color information data structure
abstract: Strategies are described for processing image information using a data structure which conveys color information. The color information describes color-related formatting applied to the image information. The data structure can be passed down a video processing pipeline, where each functional component in the pipeline can draw color information from the data structure to improve the accuracy of its processing. Further, each component can supply previously unknown color information to the data structure for use by other (downstream) components in the pipeline. Exemplary fields of the data structure can include one or more of: a video transfer function field; a color primaries field; an image light field; a transfer matrix field; a nominal range field; and a video chroma sampling field. The transfer matrix field can be used to convert image information from one color space to another, such as a luma-related color space to an RGB-related color space. Processing operations can be performed on progressive and linear RGB image information.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07643675&OS=07643675&RS=07643675
owner: Microsoft Corporation
number: 07643675
owner_city: Redmond
owner_country: US
publication_date: 20040729
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"p":["This application claims priority to U.S. Provisional Application Ser. No. 60\/492,029, filed on Aug. 1, 2003, entitled \u201cBandwidth-Efficient Processing of Video Images,\u201d naming Stephen J. Estrop as sole inventor. The 60\/492,029 Provisional Application is incorporated by reference herein in its entirety.","This application is also a continuation-in-part of U.S. Non-Provisional application Ser. No. 10\/694,144, filed on Oct. 27, 2003, now U.S. Pat. No. 7,139,002, also entitled \u201cBandwidth-Efficient Processing of Video Images,\u201d naming Stephen J. Estrop as sole inventor. The Ser. No. 10\/694,144 Non-Provisional application is incorporated by reference herein in its entirety.","Finally, this application is related to U.S. Non-Provisional application Ser. No. 10\/273,505, filed on Oct. 18, 2002, now U.S. Pat. No. 7,219,352, entitled \u201cMethods and Apparatuses for Facilitating Processing of Interlaced Images for Progressive Video Displays,\u201d naming Stephen J. Estrop as the sole inventor. The Ser. No. 10\/273,505 Non-Provisional application is incorporated by reference herein in its entirety.","This subject matter pertains to strategies for processing image information, and, in a more particular implementation, to strategies for processing image information using improved techniques for ensuring that the color content of the image information is reproduced correctly.","Human vision relies on rod photoreceptor cells that respond to very low levels of light and cone photoreceptor cells that respond to color. The cone cells generally respond to three portions of the visible electromagnetic spectrum, namely long wavelength (e.g., generally corresponding to red), medium wavelength (e.g., generally corresponding to green), and short wavelength (e.g., generally corresponding to blue). As such, all colors can be expressed as different combinations of at least three different color components. Generally, color itself is a complex phenomenon that ensues from both the physical aspects of electromagnetic radiation in the visible portion of the spectrum as well as the vision-related and cerebral \u201cmechanisms\u201d used to process such information. For instance, human vision is more responsive to the intensity of light than to the color (chroma) components of light.","Electronic apparatuses that reproduce color images complement the trichromatic nature of human vision by providing three types of light sources. The three types of light sources produce different spectral responses that are perceived as different colors to a human observer. For instance, a cathode ray tube (CRT) provides red, green and blue phosphors to create different colors. Other technologies do not use phosphors, but otherwise reproduce color using light sources that emit at least three kinds of light.","The Commission Internationale de L'\u00c9clairage (CIE) has set forth a comprehensive system that maps the spectral features of light to different perceived colors. In connection therewith, the term \u201cmatching function\u201d refers to statistically tabulated response curves (usually to short, medium and long wavelengths) of an \u201caverage\u201d viewer to a set of reference lamps at each wavelength. For red, green, and blue, these functions are represented as r(w), g(w) and b(w), respectively, where \u201cw\u201d denotes wavelength. Such reference lamps\u2014or color primaries\u2014define the light sources (typically monitor phosphors) used by an apparatus to reproduce image information having color content. The term \u201ccolor space\u201d refers to a specification defined by a set of color primaries and matching functions.","An abstract color specification can mathematically map tuples of chromaticities into different colors in the manner described above. However, a number of specific coding systems have been developed to ensure a more efficient coding scheme that can be applied to real-world applications, such as the transmission and presentation of color image information. The real-world application that first confronted the industry was the broadcast and presentation of analog television signals. More recent applications involve the transmission and presentation of digital video information over networks, such as TCP\/IP networks (e.g., the Internet). Further, the industry now accommodates the transmission and presentation of high definition (HD) video information in addition to standard definition (SD) video information. The features of a coding system can thus often be traced back to certain problems confronted by the industry at certain times.","Whatever their approach, coding systems address a common set of issues that arise in the reproduction of image information having color content. The following discussion provides an overview of common issues that coding systems are likely to address in one form or another. (As to terminology, the term \u201cimage information\u201d is used in this disclosure to represent any information that can be displayed to a user; this term is used broadly to encompass both still image information and moving video information.)","Color Space and Related Considerations","Colors can be specified using three components. An image stream that relies on the transmission of color content using discrete color components is referred to as component video. One common coding approach specifies color using red, green and blue (RGB) components. More formally, the RGB components describe the proportional intensities of the reference lamps that create a perceptually equivalent color to a given spectrum. For example, the R component can be defined by:",{"@attributes":{"id":"p-0013","num":"0012"},"maths":{"@attributes":{"id":"MATH-US-00001","num":"00001"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":{"mi":"R","mo":"=","mrow":{"msubsup":{"mo":"\u222b","mrow":[{"mn":"300","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mi":"nm"},{"mn":"700","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mi":"nm"}]},"mo":"\u2062","mrow":{"mrow":[{"mi":"L","mo":"\u2061","mrow":{"mo":["(",")"],"mi":"w"}},{"mi":"r","mo":"\u2061","mrow":{"mo":["(",")"],"mi":"w"}},{"mo":"\u2146","mi":"w"}],"mo":["\u2062","\u2062"]}}},"mo":","}}},"br":{}},"Computer monitors generally use the RGB model to present color content to users. However, the RGB coding model may be an inefficient choice for the transmission of image information. Accordingly, image information is commonly transmitted to a target apparatus using some coding model other than RGB. Upon receipt, the image information can be transformed into the RGB color space for display, e.g., using a 3\u00d73 affine transformation. As will be described below under the heading \u201cGamma Considerations,\u201d each R, G, or B component data can also be expressed in terms of its pre-gamma corrected form, referred to as R\u2032, G\u2032 and B\u2032 values. (Generally, as per convention, the prime denotes nonlinear information in this disclosure.)","A common tactic in this regard is to define color by reference to a luminance-related component (Y) and chroma-related components. Luminance general refers to the perceived intensity (brightness) of light. Luminance can be expressed in a pre-gamma-corrected form (in the manner described below under \u201cGamma Considerations\u201d) to yield its nonlinear counterpart, referred to as \u201cluma\u201d (Y\u2032). The chroma components define the color content of the image information relative to the luma. For example, in the digital domain, the symbol \u201cCb\u201d corresponds to an n bit integer scaled representation of the difference B\u2032\u2212Y\u2032 (typically from the range of \u2212127 . . . 128 in 8 bit values), and the symbol \u201cCr\u201d corresponds to an n bit integer scaled representation of the difference R\u2032\u2212Y\u2032. The symbol \u201cPb\u201d refers to the analog counterpart of Cb, and the symbol \u201cPr\u201d refers to the analog counterpart of Cr. The symbols \u2018Pb\u2019 and \u2018Pr\u2019 can also refer to the digital normalized form of Cb or Cr with a nominal range of [\u22120.5 . . . 0.5]. The component image information defined by CbCr and PbPr may be formally primed (e.g., Cb\u2032Cr\u2032 and Pb\u2032Pr\u2032) when they represent nonlinear information.","Color content can also be communicated as composite video (rather than the above-described component video). Composite signals combine luma and chroma information in one signal. For instance, in the coding system Y\u2032UV, U represents a scaled version of B\u2212Y and V represents a scaled version of R\u2212Y. These luma and chroma components are then processed to provide a single signal (e.g., in the manner set forth in the National Television System Committee (NTSC) format or Phase Alternate Line (PAL) format). The coding system Y\u2032IQ defines another composite coding system formed by transforming the U and V components in a prescribed manner. Generally, the industry has historically promoted the use of Y-related color spaces (Y\u2032CbCr, Y\u2032PbPr, YUV, YIQ, etc.) because reducing color image information in these color spaces can be performed more easily compared to image information expressed in the RGB color space.","It is generally possible to transform color content from one color space to another color space using one or more matrix affine transformations. More formally, the property of metamerism makes it possible to express one set of color space coefficients in terms of another set of matching functions (where \u201cmetamers\u201d refer to two spectra which map to the same set of color space coefficients, and hence appear to be perceptually identical\u2014that is, that look like the same color).","Gamma Considerations","Cathode ray tubes (CRTs) do not have a linear response transfer function. In other words, the relationship of voltage applied to a CRT and the resultant luminance produced by the CRT does not define a linear function. More specifically, the predicted theoretical response of a CRT has a response proportional to the 5\/2 power law; that is, for a given input voltage \u201cV,\u201d the CRT's resultant luminance \u201cL\u201d can be computed as L=V.","In application, the source of image information (such as a video camera) commonly pre-compensates the image information by applying a transfer function to the image information. The \u201ctransfer function\u201d is approximately the inverse function of the CRT luminance response. This transfer function applied at the source\u2014commonly referred to as the encoding transfer function\u2014produces \u201cgamma corrected\u201d nonlinear image information. When the nonlinear signal is passed through the display device, a linear luminance is produced. According to the notation described above, the nonlinear (or precompensated) image information is denoted by priming its components, e.g., Y\u2032Cb\u2032Cr\u2032.","It is common to transmit image information in nonlinear (compensated) form. The presentation device (e.g., CRT) of the receiving apparatus can, due to its inherent nonlinearity, complement the encoding transfer function to provide appropriately transformed color content for consumption.","It is common to adjust the exponent of the encoding transfer function to account for the condition in which the image information is likely to be viewed. For instance, video information displayed on conventional televisions is typically presented in a dim viewing environment common in a home setting, while image information displayed on conventional computer monitors is typically presented in a bright viewing environment common to an office setting. Different transfer function adjustments are appropriate to these different viewing environments. For this reason, television video sources typically use a transfer function that is based on the built-in assumption that the image information will be presented in a dim viewing condition. This means that the transfer function applied by the source will commonly under-compensate for the inherent nonlinearity of the CRT.","As another special consideration, encoding of image information using a transfer function commonly applies a special approximation function for the low voltage portion of the function. Namely, encoding techniques commonly provide a linear segment in this portion to reduce the effects of noise in the imaging sensor. This segment is referred to as a \u201clinear tail,\u201d having a defined \u201ctoe slope.\u201d","Sampling and Alignment of Chroma Information Relative to Luma Information","As noted above, human vision is more responsive to light intensity than the chromatic components of light. Coding systems take advantage of this fact to reduce the amount of chroma (Cb\u2032Cr\u2032) information that is coded relative to the amount of luma information (Y\u2032). This technique is referred to as chroma sub-sampling. A numeric notion represented generically as L:M:N can be used to express this sampling strategy, where \u201cL\u201d represents the sampling reference factor of the luma component (Y\u2032), and \u201cM\u201d and \u201cN\u201d refer to the chroma sampling (e.g., Cb and Cr, respectively) relative to the luma sampling (Y\u2032). For instance the notation 4:4:4 can denote Y\u2032CbCr data in which there is one chroma sample for every luma sample. The notation 4:2:2 can denote Y\u2032CbCr data in which there is one chroma sample for every two luma samples (horizontally). The notation 4:2:0 can denote Y\u2032CbCr data in which there is one chroma sample for every two-by-two cluster of luma samples. The notation 4:1:1 can denote Y\u2032CbCr data in which there is one chroma sample for every four luma samples (horizontally).","In those circumstances where the coding strategy provides more luma information than chroma information, a decoder can reconstruct the \u201cmissing\u201d chroma information by performing interpolation based on the chroma information that is supplied. More generally, downsampling refers to any technique that produces fewer image samples in comparison with an initial set of image samples. Upsampling refers to any technique that produces more image samples in comparison with the initial set of image samples. Thus, the above-described interpolation defines a type of upsampling.","Coding strategies also specify the manner in which chroma samples are spatially \u201caligned\u201d to the corresponding luma samples. Coding strategies differ in this regard. Some align the chroma samples with the luma samples, such that the chroma samples are directly positioned \u201cover\u201d the luma samples. This is referred to as cositing. Other strategies position chroma samples in interstitial spaces within the two-dimensional array of luma samples.  (to be discussed below in turn) show different sampling and alignment strategies for presenting luma and chroma information.","Quantization Considerations","Quantization refers to the methodology whereby discrete numeric values are assigned to the signal amplitudes of color components. In the digital domain, the numeric values span a prescribed range (gamut) of color space values in a prescribed number of steps. It is common, for instance, to use 255 steps for describing each component value, such that each component can assume a value from 0 to 255. It is common to express each color value using 8 bits, although color can also be expressed with higher precision (e.g., 10 bits, etc.), as well as with lower precision.","Coding strategies often allocate portions on both ends of the range of quantization levels for representing back levels and white levels, respectively. That is, a coding strategy will often define a reference black level and a reference white level, but also allocate coding levels beyond these reference levels for expressing values that swing beyond reference black and white levels. For example, an 8-bit coding strategy may assign the level  to black and the level  to white. The remaining levels that are lower than 16 define so-called \u201ctoe room,\u201d while the remaining levels over 235 define so-called \u201chead room.\u201d","Interlaced vs. Progressive Representation Considerations","Conventional television signals are scanned in interlaced fashion. In interlacing, a first field of a video frame is captured, followed, shortly thereafter, by a second field of the video frame (e.g., 1\/50 or 1\/60 seconds thereafter). The second field is vertically offset relative to the first field by a slight amount, such that the second field captures information in the interstitial spaces between scanning lines of the first field. So-called bob interlacing is one known type of interleaving strategy. The complete video frame is composed by presenting the first and second fields in quick succession so that they are perceived by a human viewer as a single frame of information.","However, computer monitors and other presentation equipment display image information in progressive, not interleaved, fashion. Thus, in order for an apparatus to present interlaced information on a computer monitor, it must display progressive frames at the interlaced field rate by interpolating the data for the opposite field (a process referred to as \u201cdeinterlacing\u201d). For example, to display an interlaced field, it must interpolate the \u201cmissing\u201d data for the spatial location between the lines by examining the fields on either side. The non-interlaced image format is referred to as the \u201cprogressive\u201d format.","Additional information regarding each of the above topics may be found in a number of introductory texts, such as Charles Poyton's well-regarded ","Compounding the above-described complexity, the industry accommodates a large number of different formal standards for representing image information. Standards have been promulgated by a number of organizations and committees, including the International Telecommunications Union (ITU), the European Broadcasting Union (EBU) (which also promotes Digital Video Broadcasting, or DVB), the Audio Engineering Society (AES), the Advanced Television Systems Committee, Inc. (ATSC), the Society of Motion Picture and Television Engineers (SMPTE), Sequential couleur avec m\u00c8moire (SECAM), National Television System Committee (NTSC), and so forth.","Each of these organizations has carved out particular combinations of coding features from the above-described universe of possible coding options. As such, as appreciated by the present inventors, standards generally differ as to their definition and application of: color primaries; transfer functions; intended viewing conditions; transfer matrices; toe room and head room specifications; chroma subsampling and alignment strategies, and so forth. The color primaries (together with the white point reference) define the basic color space of a standard. The transfer function determines how the standard converts between linear image information and nonlinear information. The intended viewing conditions define the assumptions that the standard makes about the viewing environment in which the image information is likely to be consumed (such as the assumption that television will be viewed in a dimly lit home setting). The viewing conditions change the effective gamma and brightness (the black level) and contrast (the white level) of the image information. The transfer matrices determine how the standard converts between different color spaces (e.g., from Y\u2032YbYr to RGB color spaces). The head room and toe room specifications determine the quantization levels that the standard allocates to represent ranges of black and white colors. The chroma sub-sampling and alignment strategies specify the manner in which the chroma information is sub-sampled and positioned relative to the luma information.","Existing standards-related documentation sets forth the requirements of each standard in exacting detail. Representative standards include:\n\n","The great variety of coding standards in use today contributes to a number of difficulties in the coding, transmission and processing of image information. By way of overview, video processing pipelines associated with specific apparatuses are often designed to process a particular type of signal having defined formatting; in this limited role, these apparatuses may correctly process such image information in a reliable manner. However, in the context of the wider universe of image information in use today, these apparatuses may lack mechanisms for interpreting the color formatting of other kinds of image information, and for reliably propagating this formatting information through the pipeline. More precisely, the video pipeline may receive information defining certain aspects of the color formatting applied to the received image information, but, as appreciated by the present inventors, the video pipeline may lack suitable mechanisms for reliably propagating this color information down the pipeline to downstream components in the pipeline. As a result, such formatting information is \u201clost\u201d or \u201cdropped.\u201d Downstream components can address the paucity of information pertaining to the color formatting by \u201cguessing\u201d at the formatting information. When the components guess incorrectly, the pipeline produces image information in a suboptimal or even incorrect manner.",{"@attributes":{"id":"p-0039","num":"0047"},"figref":["FIG. 1","FIG. 1"],"b":["100","100","102","104","106","102","108","108","102","110","108","112","104","114","116","118","118","116"]},"The bottom row of blocks in  summarizes the above-described deficiencies in known systems. Block  indicates that the pipeline functionality (, , , ) fails to accurately interpret the color formatting applied to input signals and\/or fails to reliably propagate color information down the pipeline to downstream components. For instance, the pipeline  may receive image information that has been coded using a prescribed format. The received information may include certain fields that identify features of the formatting that was used, or these features can be deduced based on other telltale properties of the received information. However, because of the plethora of standards in use, the initial stages of the pipeline  lack functionality for properly interpreting this information and passing it to downstream components in the video pipeline . As a result, this coding information becomes immediately lost. This can result in the situation in which image information is passed to downstream pipeline components with no guidelines on how the components should interpret this image information; it is essentially just 1's and 0's.","Block  represents the manner in which the video pipeline  deals with the above difficulty. Namely, the functional components that lack guidelines on how to interpret the color content in the image information often make \u201cguesses\u201d as to how to interpret it. Some guesses are accurate but others are not. To name but a few examples, the video pipeline may make inaccurate assumptions regarding the transfer function that has been applied to the image information (perhaps based on image size), the lighting conditions assumptions inherent in the image information, the chroma sub-sampling scheme used by the image information (based on the data format), and so forth.","Block  represents the potential consequences of incorrect guesses. Namely, incorrect guesses can result in sub-optimal or incorrect display quality. An image presentation may appear as having \u201cunnatural\u201d colors or having motion artifacts. Or it may appear as unduly \u201ccontrasty,\u201d distorted, inappropriately cropped, and so forth","There is accordingly a need for a more satisfactory technique for processing image information having color content.","According to one exemplary implementation, a method is described for processing image information having color content expressed in a prescribed format. The method includes: (a) providing a color information data structure that contains color information that defines at least one aspect of the prescribed format; (b) passing the color information data structure to at least one functional component used to process the image information, along with the image information; and (c) processing the image information at the above-mentioned at least one functional component based on the color information in the color information data structure.","According to another exemplary feature, the color information data structure comprises: (a) a video transfer function field which conveys information regarding the transfer function used to convert linear image information into nonlinear image information, and\/or vice versa; (b) a color primaries field which conveys color primaries associated with the image information; (c) an image light field which conveys an intended viewing condition associated with the image information; (d) a transfer matrix field that can be used to modify the color space of the image information; (e) a nominal range field which conveys information regarding potential toe room and head room associated with the image information; and (f) a video chroma sampling field which indicates the manner in which chroma samples in the image information are sampled and aligned relative to associated luma samples.","According to another exemplary feature, the above-mentioned at least one functional component belongs to a group of functional components defining a video processing pipeline, wherein the color information data structure is passed down the video processing pipeline for use by downstream functional components.","According to another exemplary feature, the above-mentioned at least one functional component further determines at least one other aspect of the prescribed format and adds the at least one other aspect to at least one unknown field in the color information data structure.","According to another exemplary feature, the above-mentioned passing of the color information data structure comprises passing the color information data structure using an unused field of an existing data structure.","According to another exemplary feature, the method further comprises setting a flag which indicates that the above-mentioned at least one functional component has the capacity to process the color information data structure.","Another exemplary method is described for processing image information, comprising: (a) providing a principal video stream of image information; (b) providing a video sub-stream of image information; and (c) performing, based on color information specified in a color information data structure, at least two tasks involving the principal video stream and the video sub-stream to produce output video information expressed in a specified color space.","Another exemplary method is described for processing image information, comprising: (a) converting input image information in a luma-related color space into linear image information within an RGB-related color space; (b) performing processing on the linear image information in the RGB-related color space to produce processed information; and (c) converting the processed information into nonlinear image information within a luma-related color space.","According to another exemplary feature of the above-mentioned method, the converting also involves transforming the input image information from an interlaced format into a progressive format prior to the processing operation, and, after processing, transforming the processed information from the progressive format into an interlaced format.","Additional exemplary implementations are described in the following.","The same numbers are used throughout the disclosure and figures to reference like components and features. Series  numbers refer to features originally found in , series  numbers refer to features originally found in , series  numbers refer to features originally found in , and so on.","The following describes exemplary mechanisms and procedures for improving the handling of image information having color content. By way of broad overview, the mechanisms and procedures provide a data structure that captures information regarding the color formatting that has been applied to the image information. This information is referred to as \u201ccolor information,\u201d while the data structure itself is referred to as the \u201ccolor information (CI) data structure.\u201d In one exemplary case, the color information may specifically include fields which convey the following information associated with the image information: transfer function information; color primary information; video lighting information; transfer matrix information; nominal range information; and chroma sub-sampling information. This grouping of fields is intended to be illustrative rather than limiting. Other implementations can include additional fields, can omit certain fields identified above, and so forth.","The video processing pipeline uses the color information as an aid to facilitate the processing of image information. For instance, the color information can specify the manner in which a functional component within the pipeline should transform the image information. Moreover, in marked contrast to known systems, the video pipeline includes functionality for passing the CI data structure down the pipeline so that downstream components in the pipeline can draw information from the CI data structure. This provision thereby reduces the chances that a video pipeline will make inaccurate guesses regarding the nature of the image information; consequently, this provision has the potential of improving the quality of displayed images.","According to another exemplary feature, components within the pipeline can include functionality for independently interpreting the image information. In those instances where a component can reliably determine a previously unspecified color-related aspect of the color formatting, the component can add this information to the CI data structure. This supplemental color information then becomes available to downstream components in the video pipeline, which, in turn, can also supplement the CI data structure by adding new information. Thus, the color information data structure can become more \u201cinformative\u201d as it passes through the pipeline and collects information from components within the pipeline that are able to deduce different properties of the formatting applied to the image information.","According to another exemplary feature, the color information is intended to provide a \u201creceptacle\u201d to convey information regarding a great number of possible formats that can be used to code image information. Accordingly, the CI data structure can be viewed as a kind of universal interface, allowing the video pipeline to accept any kind of image information and process it correctly by interpreting the color information conveyed by the CI data structure.","According to another exemplary feature, the CI data structure uses a particularly efficient scheme to pack a great variety of information regarding different format standards in a few bits of information. In one exemplary case, the data structure packs a great variety of color information in a few words (e.g., in a 16-bit structure, 24-bit structure, etc.).","According to another exemplary feature, a system can convey the CI data structure by employing unused fields provided in one or more existing data structures used in the video pipeline. This allows systems that use such existing data structures to exploit the color information without expensive and complex re-tooling of the systems. Further, if these systems have not been configured to process the CI data structure, but it is nonetheless present in input information fed to such systems, these systems can safely ignore the CI data structure without \u201cbreaking\u201d the systems.","According to another exemplary feature, interlaced image information in a luma-related color space (e.g., Y\u2032Cb\u2032Cr\u2032) can be converted into a linear and progressive RGB color space. Various processing (such as rescaling, etc.) can then be performed on the image information within the linear\/progressive RGB color space. The image information can then be converted back to a luma-related color space (e.g., Y\u2032Pb\u2032Pr\u2032) for output (e.g., for display on a television). The processing of luma-related information  in the linear\/progressive RGB space departs from other approaches, which do not convert image information  into an interim linear RGB color space for processing in the above-summarized manner.","Still other features and attendant benefits are described in detail in the following detailed specification.","As to terminology, the term \u201cimage information\u201d is intended to encompass any kind of information that can be consumed by a user in any visual form. The image information can represent information expressed in any format, such as analog format, digital format, or a combination of digital and analog formats. The image information can represent still image information (e.g., digital photographs) and\/or moving information (e.g., video information). Still further variations are contemplated by the use of the term image information.","The term \u201ccolor information\u201d represents any information which describes the color content of the image information. For instance, where the image information expresses color content in a prescribed format, the color information can convey information pertaining to that format. The term \u201ccolor information data structure (CI data structure)\u201d refers to the manner in which the color information can be coded and conveyed within the video pipeline.","The term \u201cvideo pipeline\u201d refers to any functionality for processing image information. A pipeline includes at least two functional components that operate on image information in series fashion, that is, one after the other.","This disclosure includes the following sections. Section A describes an overview of an exemplary color information data structure and its manner of use within a video pipeline. Section B describes exemplary conversion operations that can be performed within the video pipeline of Section A. Section C describes an exemplary composition of the color information data structure defined in Section A. Section D describes one specific exemplary implementation of a video pipeline that embodies the principles set forth in Sections A-C. And Section E describes an exemplary computer environment for implementing aspects of the features described in Sections A-D.","Generally, as to the structural aspects of this subject matter, any of the functions described herein can be implemented using software, firmware (e.g., fixed logic circuitry), manual processing, or a combination of these implementations. The terms \u201cmodule.\u201d \u201cfunctionality,\u201d and \u201clogic\u201d as used herein generally represents software, firmware, or a combination of software and firmware. In the case of a software implementation, the term module, functionality, or logic represents program code that performs specified tasks when executed on a processing device or devices (e.g., CPU or CPUs). The program code can be stored in one or more fixed and\/or removable computer readable memory devices.","As to the procedural aspects of this subject matter, certain operations are described as constituting distinct steps performed in a certain order. Such implementations are exemplary and non-limiting. Certain steps described herein can be grouped together and performed in a single operation, and certain steps can be performed in an order that differs from the order employed in the examples set forth in this disclosure.","A. Overview of an Exemplary Color Information (CI) Data Structure and Its Application",{"@attributes":{"id":"p-0080","num":"0088"},"figref":"FIG. 2","b":["200","202","202","204","204","200","202","202","200","202","204"]},"The video pipeline  itself includes a series of processing stages, including an input stage , a processing stage , and an output stage . As to the input stage , input source  represents any source of image information . The source  can generally comprise newly captured image information (e.g., created by a camera or scanner), or previously captured image information that is presented to the input stage  via some route, e.g., received via broadcast transmission (e.g., satellite or cable transmission, etc.), received via any kind of network (such as a TCP\/IP digital network, e.g., the Internet), received via a local storage of image information (such as a video disc, local database, etc.), and so forth. Input processing functionality  is configured to perform any kind of preliminary processing on the image information , which can differ depending on the nature of the input source  (e.g., depending on whether the image information  is newly captured or input from some source of pre-captured information. In the case of inputting previously captured\/stored information, processing can include separating image information from audio information in a received signal, uncompressing the image information, and so forth. As to the processing stage , processing functionality  is configured to perform any kind of processing on the captured image information , such as mixing multiple streams of video information together into a composite signal, performing color space conversions on the captured image information , and so forth. As to the output stage , output processing functionality  is configured to perform any processing of the image information  in preparation for its output to an output device . Output device may represent a television, a computer monitor, a storage device (both remote and local), any network-accessible target location, and so forth. Each of the functional components (, , ) can be physically implemented as a single apparatus for performing ascribed tasks, or multiple apparatuses coupled together in series or parallel fashion. In one case, the components in the pipeline  can correspond to dynamically configured logic modules (e.g., software modules).","Each of the functional components (, , ) includes respective functionality (,  ) configured to process the CI data structure . This functionality (, , ) can include logic for reading the information in the CI data structure , for interpreting information in the CI data structure , and for applying the interpreted information in the CI data structure  to the processing of the image information . The functionality (, , ) can also include logic for deducing additional features pertaining to the color formatting used in the image information , and for supplying this deduced information to the CI data structure  to fill in a previously unknown field in the CI data structure . For instance, the functionality (, , ) may determine that a certain format is being used. Based on this, it can deduce (for example, by accessing a predetermined lookup table) that the standard has certain coding characteristics. The functionality (, , ) can then supply information regarding these deduced characteristics to fill in previously unknown fields of the CI data structure . More specifically, in one implementation, components in the pipeline  can automatically set unknown values in the CI data structure  to a prescribed value, such as 0. This act constitutes initializing the CI data structure. Subsequent component are alerted to the unknown nature of certain values in the CI data structure by virtue of these values having been set to 0. These components then remain free to supply the missing values if they are able to do so. Arrow  generally denotes that the functionality (, , ) can pull information from the CI data structure . Arrow  generally denotes that the functionality (, , ) can add to the CI data structure .  specifically shows that functional component  is interacting with the CI data structure . But as mentioned above, this same CI data structure  is passed down through the video pipeline , so that any of the other functional components (, , ) can interact with the CI data structure  in the manner indicated.","Different functional component (, , ) can handle the CI data structure  differently depending on a number of factors, such as the processing stage (, , ) involved, the specifics of a particular application, the color format being processed, and so forth.","For instance, the functionality , associated with the sources  and input processing functionality , can perform an instrumental role in determining information pertaining to the formatting standards used in the received image information , and for supplying such information to the CI data structure  for use by downstream components of the pipeline . As a general rule, in the case of new capture, the capture device will typically implicitly \u201cknow\u201d the formatting applied to image information it is producing. On the other hand, a device receiving image information created by some other source may be able to determine the color formatting applied to the image information by investigating any format-related information associated with the received image information, or by making logical and reliable guesses. Specific examples follow. For instance, analog capture devices commonly know the video standard and color space that they are capturing data relative to. As another example, a DVD navigator knows the color spaces of the image information  that it is handling by virtue of the fact that it is parsing a DVD with NTSC content. As another example, any capture device receiving an MPEG-2 elementary video stream can deduce certain properties of the formatting being used, as MPEG-2 explicitly lists the color information in its sequence display extension header; for instance, the header indicates the primaries, transfer function, and transfer matrix associated with the image information . As another example, a high definition (HD) digital tuner should know that it is streaming HD data within a 709 color space, and so forth. In all of these cases, the functionality  can supply information that it \u201calready knows\u201d about the color formatting being employed to the CI data structure  for use by downstream functional components in the pipeline . In known systems, this information was immediately dropped, and therefore lost.","Color space converters in the pipeline  can use the CI data structure  to ensure that accurate conversion operations are performed on the received image information . In other words, for instance, the color space converters can use information gleaned from the CI data structure  to determine the conversion algorithms that they apply, or to determine the settings\/parameters used in the algorithms, and so forth.","Mixers in the pipeline  serve the purpose of mixing together different types of image information, where such information is potentially expressed using different color formats. For example, one application might seek to combine digital photographs with superimposed graphical information, etc. The pipeline  can use the enhanced formatting information provided in the CI data structure  to ensure that all of the information being combined has a common format (e.g., a common color space). This operation can be performed prior to the information being receiving by the mixers, e.g., by upstream components (relative to the mixers in the pipeline).","Or this operation can be allocated to the graphical processing hardware. The graphical processing hardware may comprise one or more graphic processing units (GPUs), e.g., as provided by a video processing card (as will be discussed below with reference to ). In this case, the CI data structures  associated with the information to be combined can be passed down the pipeline to the graphical processing hardware, which can then use the CI data structures  to convert the image information to a common format, whereupon the information can then be combined. In this implementation, by virtue of the supplemental color information provided by the CI data structures , drivers in the video pipeline no longer need to guess at which color space or chroma scheme was intended, thus reducing the potential that the drivers (or graphics processing hardware) will guess incorrectly and produce poor output results.","In summary, the bottom row of blocks in  summarizes exemplary merits of the use of the CI data structure  as applied to the video pipeline . Block  indicates that the CI data structure  has a uniform structure that is passed down through the pipeline . Block  indicates that each functional component (, , ) in the pipeline  can draw information from the CI data structure , as well as supply values for unknown fields in the CI data structure . This means that, compared to known systems, the functional components (, , ) can reduce or eliminate the amount of unjustified guessing that they need to perform to process the image information . Block  indicates that the end result of this strategy may result in improved quality of color reproduction. That is, by reducing some of the inaccurate guesses, it is less likely that the video pipeline  will provide output information having various anomalies, such as images have poor contrast, images having unnatural looking colors, images having various distortions (e.g., motion artifacts, clipping, etc.), and so forth.","According to another benefit, as will be explained in further detail in Section D (below), the video pipeline  can use an existing data structure to convey the CI data structure . For instance, the CI data structure  can \u201creside\u201d in an unused field (or fields) of an existing data structure used to transmit information through the pipeline . A flag can be provided to signal whether or not the unused field contains the CI data structure  (or whether it contains meaningless, unspecified, information, or perhaps default information, such as a series of 0's). This provision has at least two advantages. First, the use of a pre-existing field of pre-existing size means that existing functional components (, , ) need not be completely re-engineered to accommodate the use of the new CI data structure . Further, those functional components (, , ) that may not have the ability to understand or interpret the CI data structure  need not handle this information. In other words, components that do not understand the CI data structure  are simply not affected by it. At the same time, the unobtrusive nature in which the color information is provided enables these components to automatically pass the color information along the pipeline . In other words, the color information is typically not lost, because it is present in existing data fields. This enables downstream components, which may be configured to utilize the color information, to receive such color information intact from such CI-unaware upstream components.","The above discussion has assumed that the image information  will be immediately displayed on a display device, based on the color information in the CI data structure . However, the CI data structure  also provides an efficient technique for packing color information associated with the image information , and thus can be used as an archival technique to store the image information  and associated CI data structures  in a space-efficient manner (while still retaining a large amount of information regarding the formatting applied to the image information ).","More specifically, components can be configured to automatically store the CI information  with the image information . When the image information  is later retrieved, the reserved fields containing the CI information  can be unpacked and passed to the pipeline , thus preserving a great deal of information regarding the color structure of the image information  for the benefit of the downstream components.","Further, the above discussion has assumed that components in the pipeline  can supply missing color information for the benefit of only downstream components in the pipeline. However, a component in the pipeline can supply color information for use by an upstream component in its processing of subsequent image information. For example, consider the case where a video pipeline is applied to the task of processing and presenting a movie from an unknown video source. One of the initial components in the pipeline may not be able to determine certain features of the formatting applied to this video information, and thus may potentially initially fail to process this information in an optimal manner. However, later components in the pipeline may subsequently deduce the formatting that has been applied to the video information by the unknown video source. These downstream components can communicate with the upstream component to inform it that the subsequent signals that it receives from the same source have a prescribed formatting. The upstream component can then process the video information in a more error-free manner.","Further, the term \u201cdownstream\u201d does not necessarily denote a fixed order of operations within a system. In general, a pipeline can be built in a dynamic manner to provide desired operations on the image information  by stringing together different functional components. In this context, the color information can be provided in media type data structures used for negotiations between components. If a pipeline is built from the \u201coutput end\u201d first, the color information will flow \u201cbackwards\u201d as the components are connected.",{"@attributes":{"id":"p-0094","num":"0102"},"figref":["FIG. 3","FIG. 2","FIG. 3"],"b":["200","302","204","212","304","204","214","216","218","200","202","306","214","216","218","200","202","200","304","306","206","308","304","306","214","216","218","200","204","202"]},"B. Exemplary Conversion Operations",{"@attributes":{"id":"p-0096","num":"0104"},"figref":["FIG. 4","FIG. 2","FIG. 4","FIG. 4","FIG. 4"],"b":["400","204","200","202","202","204","204","204"]},"The conversion operation  of  includes an exemplary series of blocks which describe the conversion steps discussed above. More specifically, the top row of blocks in this figure shows the transformation of Y\u2032Cb\u2032Cr\u2032 image information into a prescribed color space for processing. The bottom row of blocks shows the transformation of the processed data back into Y\u2032Pb\u2032Pr data (where Y\u2032Pb\u2032Pr can define the analog counterpart of Y\u2032Cb\u2032Cr\u2032).","As to the top row, block  indicates that Y\u2032Cb\u2032Cr\u2032 4:2:0 image information is received and upsampled to Y\u2032Cb\u2032Cr\u2032 4:4:4 image information. The 4:2:0 notation denotes that the chroma information (Cb\u2032Cr\u2032) is sub-sampled relative to the luma information (Y\u2032). The representative samples shown in  above block  indicate that different coding strategies can position the chroma samples relative to the luma samples in different respective ways. The upsampling operation interpolates the chroma information so as to produce the same amount of chroma information as luma information (e.g., to provide a 4:4:4 representation of the input image information).","Block  applies a matrix transformation to the Y\u2032Cb\u2032Cr\u2032 4:4:4 image information to transform it into another color space, namely the R\u2032G\u2032B\u2032 color space.","Block  transforms the nonlinear R\u2032G\u2032B\u2032 image information into a linear form by applying a transfer function to it. As noted above, the prime symbols (\u2032) associated with the R\u2032G\u2032B\u2032 image information indicate that it is in nonlinear form; the absence of the primes (e.g., RGB) usually denotes linear data (except that it is also commonplace to remove the primes where it is conventionally understood that the signals being referred to represent nonlinear information). The model transfer function shown above block  in  illustrates the general shape of the function employed, which is also the general shape of the inherent transfer function of the CRT (not shown). This model transfer function also indicates that it can employ a linear tail near the V=0 portion of its curve.","Block  optionally performs a deinterlacing of the content to convert it from an interlaced form to a progressive format in order to correctly perform image resealing operations.","Block  optionally transforms the color primaries of the linear RGB information to express the information in another color space. This conversion may comprise applying a matrix transformation to the RGB information to change its color primaries to correspond to whatever primaries are desired for processing performed in downstream components in the video processing pipeline. In one example, block  can comprise transforming image information from one RGB-related color space to another RGB-related color space (e.g., to scRGB).","Block  generally represents any kind of processing of the image information having the transformed color space. This can constitute, for instance, performing processing on image information in a linear, progressive, RGB-related color space.","The bottom row of blocks in  generally reverses the above-described operations in the top row. Namely, after processing in block , block  optionally converts the image information into another color space, such as back to the RGB color space. Block  applies an operational re-interlacing of the content if it needs to be stored or displayed in an interlaced form. Block  applies a transfer function to again transform the RGB image information into a nonlinear form (R\u2032G\u2032B\u2032). Block  changes the color space of the R\u2032G\u2032B\u2032 image information back into a format which separates its luma component (Y\u2032) from its chroma components (Pb\u2032Pr\u2032). Finally, block  optionally sub-samples the Y\u2032Pb\u2032Pr\u2032 image information to reduce the amount of chroma samples (Pb\u2032Pr\u2032) relative to the amount of the luma samples (Y\u2032). That is, this block  can transform Y\u2032Pb\u2032Pr\u2032 4:4:4 image information (where there is a chroma sample for every luma sample) into Y\u2032Pb\u2032Pr\u2032 4:2:0 image information (where there are fewer chroma samples relative to luma samples).","The CI data structure  can come into play in the context of  by providing instructions regarding the manner in which each of the processing blocks is to process the image information . For instance, color information can be supplied which specifies the manner in which the pipeline is to convert from the luma-related color space to the RGB-related color space, and so forth.","C. Exemplary Composition of the Color Information Data Structure",{"@attributes":{"id":"p-0107","num":"0115"},"figref":["FIG. 5","FIG. 2","FIG. 5","FIG. 5","FIG. 5"],"b":["202","202","204","202"]},"This section provides a general overview of the fields shown in , followed by a detailed description of one exemplary implementation of the CI data structure .","To begin with, the first field  defines transfer function information. This information is used to define how to convert (nonlinear) R\u2032G\u2032B\u2032 image information  to (linear) RGB information (and\/or vice versa).","The second field  defines color primaries used to encode the image information . For instance, this field  can specify the RGB response functions associated with RGB image information .","The third field  defines what video lighting assumptions apply to the image information . For instance, this field  can specify whether the image information  was coded for presentation in a bright office environment (which is typically the case for information that is intended for presentation on a computer monitor), as opposed to a dimly lit home environment (which is typically the case for information intended for presentation on a television within a home).","The fourth field  defines transfer matrices that are applicable to the image information . For instance, these matrices may define how to convert between the Y\u2032Cb\u2032Cr\u2032 color space and the R\u2032G\u2032B\u2032 color space, and so forth.","The fifth field  defines nominal range information associated with the image information . More specifically, this field defines whether the image information  provides prescribed toe room below a reference black level and\/or prescribed head room above a reference white level.","Finally, a sixth field  defines chroma sub-sampling information that defines how the chroma information is sampled and positioned relative to the luma information.","Different coding schemes can be used to express the six fields shown in . According to one exemplary and non-limiting approach, a collection of bits are allocated for expressing CI data structure . The collection of bits are arranged in a prescribed data structure having predefined fields (or slots for receiving color information). In one exemplary case, 16 bits can be allocated to expressing the CI data structure . In another exemplary case, 24 bits can be allocated to expressing the CI data structure . Other implementations provide still other CI data structure sizes, including sizes having fewer than 16 bits, sizes having more than 24 bits, and so forth.","In the exemplary and non-limiting case where 24 bits are used, the fields (-) can be organized as follows. A first \u201cenum\u201d (an integer enumeration of values) VideoTransferFunction can be used to express the first field ; it can be allocated 5 bits, thus occupying bits - of the 24-bit CI data structure . A second enum VideoPrimaries can be used to express the second field ; it can be allocated 5 bits, thus occupying bits - of the CI data structure . A third enum VideoLighting can  be used to express the third field ; it can be allocated 4 bits, thus occupying bits - of the CI data structure . A fourth enum TransferMatrix can be used to express the fourth field ; it can be allocated 3 bits, thus occupying bits - of the CI data structure . A fifth enum NominalRange can be used to express the fifth field ; it can be allocated 3 bits, thus occupying bits - of the CI data structure . Finally, a sixth enum VideoChromaSubsampling can be used to express the sixth field ; it can be allocated 4 bits, thus occupying bits - of the CI data structure .","The remaining portion of this section provides additional details regarding one exemplary implementation of the above-described six enums. The details provided are illustrative rather than limiting; other data structures having different syntaxes can be used.","DXVA_VideoTransferFunction","The DXVA_VideoTransferFunction enum indicates the conversion function from (nonlinear) R\u2032G\u2032B\u2032 to (linear) RGB. It roughly corresponds to the gamma function of the image data. Some transfer functions have corrections to account for 8 bit integer quantization effects. In one exemplary implementation, 5 bits can be used to express this enum (e.g., bits - of the 24 bit CI data structure ). An exemplary syntax of the DXVA_VideoTransferFunction enum is specified as follows:",{"@attributes":{"id":"p-0120","num":"0128"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"typedef enum _DXVA_VideoTransferFunction"]},{"entry":[{},"{"]},{"entry":[{},"\u2003DXVA_VideoTransFuncMask ="]},{"entry":[{},"\u2003BIT(23)|BIT(22)|BIT(21)|BIT(20)|BIT(19),"]},{"entry":[{},"\u2003DXVA_VideoTransFunc_Unknown = 0,"]},{"entry":[{},"\u2003DXVA_VideoTransFunc_10 = 1,"]},{"entry":[{},"\u2003DXVA_VideoTransFunc_18 = 2,"]},{"entry":[{},"\u2003DXVA_VideoTransFunc_20 = 3,"]},{"entry":[{},"\u2003DXVA_VideoTransFunc_22 = 4,"]},{"entry":[{},"\u2003DXVA_VideoTransFunc_22_709 = 5,"]},{"entry":[{},"\u2003DXVA_VideoTransFunc_22_240M = 6,"]},{"entry":[{},"\u2003DXVA_VideoTransFunc_24_8bit_sRGB = 7,"]},{"entry":[{},"\u2003DXVA_VideoTransFunc_28 = 8,"]},{"entry":[{},"} DXVA_VideoTransferFunction;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The first member of this enum indicates that this field is unknown. This field may be set to a predefined value if required for a computation to proceed.","The member denoted by the suffix of \u201c10\u201d identifies linear RGB, having a gamma =1.0.","The members denoted by the suffixes of \u201c18,\u201d \u201c20,\u201d \u201c22\u201d and \u201c28\u201d denote true 1.8, 2.0, 2.2 and 2.8 gamma, e.g., for L\u2032=pow(L, 1\/gamma) for L=0 . . . 1. The standard BT470-2 SysM uses gamma 2.2.","The member denoted by the suffix of \u201c22709\u201d pertains to a gamma 2.2 curve with a linear range in the low range appropriate for formats defined by standards BT1361, BT709, SMPTE296M, SMPTE170M, BT470, SMPTE274M, and so forth.","The member denoted by the suffix \u201c22240M\u201d pertains to a gamma 2.2 curve with a linear range in the low range appropriate to SMPTE240M, interim 274M, and so forth.","The member denoted by suffix \u201c228bit_sRGB\u201d pertains to a gamma 2.4 curve with a linear range in the low range which allows it to match an accurate 2.2 gamma 8-bit curve.",{"@attributes":{"id":"p-0127","num":"0135"},"figref":"FIG. 6"},"DXVA_VideoPrimaries","The DXVA_VideoPrimaries enum lists the color primaries which, in turn, identify which RGB basis functions are used in the image information . In one exemplary implementation, 5 bits can be used to express this enum (e.g., bits - of the 24-bit CI data structure ).","An exemplary syntax of the DXVA_VideoPrimaries enum is specified as follows:",{"@attributes":{"id":"p-0131","num":"0139"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"typedef enum _DXVA_VideoPrimaries"]},{"entry":[{},"{"]},{"entry":[{},"\u2003DXVA_VideoTransFuncMask = BIT(18)|"]},{"entry":[{},"\u2003BIT(17)|BIT(16)|BIT(15)|BIT(14),"]},{"entry":[{},"\u2003DXVA_VideoPrimaries_Unknown = 0,"]},{"entry":[{},"\u2003DXVA_VideoPrimaries_BT601 = 1,"]},{"entry":[{},"\u2003DXVA_VideoPrimaries_BT709 = 2,"]},{"entry":[{},"\u2003DXVA_VideoPrimaries_BT470_2_SysM = 3,"]},{"entry":[{},"\u2003DXVA_VideoPrimaries_BT470_2_SysBG = 4,"]},{"entry":[{},"\u2003DXVA_VideoPrimaries_SMPTE170M = 5,"]},{"entry":[{},"\u2003DXVA_VideoPrimaries_SMPTE240M = 6,"]},{"entry":[{},"\u2003DXVA_VideoPrimaries_EBU3213 = 7,"]},{"entry":[{},"\u2003DXVA_VideoPrimaries_SMPTE_C = 8,"]},{"entry":[{},"} DXVA_VideoPrimaries;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The first member of this enum indicates that this field is unknown. This field may be set to a predefined value if required for a computation to proceed (e.g., the default values may be set to the primaries specified in the standard BT 709).","The member having the suffix \u201cBT709\u201d defines color primaries associated with the BT709 standard (which is also applicable to the standards sRGB, scRGB, etc.).","The member having the suffix \u201cBT4702_SysM\u201d defines original NTSC primaries.","The members having the \u201cBT601,\u201d \u201cBT4702_SysBG,\u201d \u201cSMPTE240M,\u201d and \u201cEBU3213\u201d suffixes define various respective primaries associated with these standards.","The member having the suffix \u201cSMPTE170M\u201d defines analog NTSC primaries (which are presently infrequently used).","The member having the suffix \u201cSMPTE_C\u201d defines analog '79 NTSC primaries.",{"@attributes":{"id":"p-0138","num":"0146"},"figref":"FIG. 7"},"DXVA_VideoLighting","The DXVA_VideoLighting enum describes the intended viewing lighting conditions. This information can also be used to alter the gamma to generate a comparable experience in a different lighting condition. In one exemplary implementation, 4 bits can be used to express this enum (e.g., bits - of the 24-bit CI data structure ).","An exemplary syntax of the DXVA_VideoLighting enum is specified as follows:",{"@attributes":{"id":"p-0142","num":"0150"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"typedef enum _DXVA_VideoLighting"},{"entry":"{"},{"entry":"\u2003DXVA_VideoTransFuncMask = BIT(13)|BIT(12)|BIT(11)|BIT(10),"},{"entry":"\u2003DXVA_VideoLighting_Unknown = 0,"},{"entry":"\u2003DXVA_VideoLighting_bright=1,"},{"entry":"\u2003DXVA_VideoLighting_office=2,"},{"entry":"\u2003DXVA_VideoLighting_dim=3,"},{"entry":"\u2003DXVA_VideoLighting_dark=4,"},{"entry":"} DXVA_VideoLighting;"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The first member of this enum indicates that this field is unknown. This field may be set to a predefined value if required for a computation to proceed (e.g., the default values may be set to assume that dim viewing conditions were intended.","The member with the suffix \u201cbright\u201d may correspond outside lighting conditions.","The member with the suffix \u201coffice\u201d may correspond to medium brightness levels associated with home office conditions.","The member with the suffix \u201cdim\u201d may correspond to dim brightness levels associated with dimly lit viewing conditions","The member with the suffix \u201cdark\u201d may correspond to dark brightness levels associated with movie theatre viewing conditions.","DXVA_VideoTransferMatrix","The DXVA_VideoTransferMatrix enum describes the conversion matrix used to transform image information  from the Y\u2032Cb\u2032Cr\u2032 color space to (studio) R\u2032G\u2032B\u2032 color space. In one exemplary implementation, 3 bits can be used to express this enum (e.g., bits - of the 24-bit CI data structure ).","An exemplary syntax of the DXVA_VideoTransferMatrix enum is specified as follows:",{"@attributes":{"id":"p-0151","num":"0159"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"typedef enum _DXVA_VideoTransferMatrix"]},{"entry":[{},"{"]},{"entry":[{},"\u2003DXVA_VideoTransferMatrixMask = BIT(9)|BIT(8)|BIT(7),"]},{"entry":[{},"\u2003DXVA_VideoTransferMatrix_Unknown = 0,"]},{"entry":[{},"\u2003DXVA_VideoTransferMatrix_BT709 = 1,"]},{"entry":[{},"\u2003DXVA_VideoTransferMatrix_BT601 = 2,"]},{"entry":[{},"\u2003DXVA_VideoTransferMatrix_SMPTE240M = 3,"]},{"entry":[{},"} DXVA_VideoTransferMatrix;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The first member of this enum indicates that this field is unknown. This field may be set to a predefined value if required for a computation to proceed (e.g., the default values may be set to the transfer matrix specifications used in standard BT601 for standard definition image information , and standard BT709 for high definition image information ).","The member with the suffix \u201cBT709\u201d defines a transfer matrix specified in the BT709 standard.","The member with the suffix \u201cBT601\u201d defines a transfer matrix specified in the BT601 standard.","The member with the suffix \u201cSMPTE240M\u201d defines a transfer matrix specified in the SMPTE240M standard (which is a high definition standard that is not commonly used today).",{"@attributes":{"id":"p-0156","num":"0164"},"figref":"FIGS. 8 and 9"},"DXVA_NominalRange","The DXVA_NominalRange enum describes whether the data includes head room (values beyond-reference 1.0 white) and toe room (\u201csuperblacks\u201d below the reference 0.0 black). For instance, to ensure proper interpretation of the image information , it is useful to differentiate wide gamut R\u2032G\u2032B\u2032 (blackpoint at , , , whitepoint at , , ) versus normal sRGB. In one exemplary implementation, 3 bits can be used to express this enum (e.g., bits - of the 24 bit CI data structure ).","An exemplary syntax of the DXVA_NominalRange enum is specified as follows:",{"@attributes":{"id":"p-0160","num":"0168"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"typedef enum _DXVA_NominalRange"},{"entry":"{"},{"entry":"\u2003DXVA_VideoChromaSubsamplingMask = BIT(6)|BIT(5)|BIT(4),"},{"entry":"\u2003DXVA_NominalRange_Unknown = 0,"},{"entry":"\u2003DXVA_NominalRange_Normal = 1,"},{"entry":"\u2003DXVA_NominalRange_Wide = 2"},{"entry":"} DXVA_NominalRange;"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The first member of this enum indicates that this field is unknown. This field may be set to a predefined value if required for a computation to proceed.","The member with the suffix of \u201cNormal\u201d defines normalized chroma [0 . . . 1] that maps to 0 . . . 255 (8 bit) or 0 . . . 1023 (10 bit) image information .","The member having the suffix \u201cWide\u201d defines normalized chroma [0 . . . 1] that maps to 16 . . . 235 (8 bit) or 64 . . . 940 (10 bit).","DXVA_VideoChromaSubsampling","The DXVA_VideoChromaSubsampling enum describes the chroma encoding scheme applied to the Y\u2032Cb\u2032Cr\u2032 data. The \u201ccosite\u201d variations indicate that the chroma samples are aligned with the luma samples. 4:2:0 data typically has chroma aligned in one or more directions with the luma data. 4:4:4, 4:2:2 and 4:1:1 data are cosited in both directions. In one exemplary implementation, 3 bits can be used to express this enum (e.g., bits - of the 24-bit CI data structure ).","An exemplary syntax of the DXVA_VideoChromaSubsampling enum is specified as follows:",{"@attributes":{"id":"p-0167","num":"0175"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"typedef enum _DXVA_VideoChromaSubsampling"},{"entry":"{"},{"entry":"\u2003DXVA_VideoChromaSubsamplingMask ="},{"entry":"\u2003BIT(3)|BIT(2)|BIT(1)|BIT(0),"},{"entry":"\u2003DXVA_VideoChromaSubsampling_Unknown = 0,"},{"entry":"\u2003DXVA_VideoChromaSubsampling_ProgressiveChroma = 0x8,"},{"entry":"\u2003DXVA_VideoChromaSubsampling_Horizontally_Cosited = 0x4,"},{"entry":"\u2003DXVA_VideoChromaSubsampling_Vertically_Cosited = 0x2,"},{"entry":"\u2003DXVA_VideoChromaSubsampling_AlignedChromaPlanes=0x1"},{"entry":"\u2003\u2003(can only be 0 if vertically cosited)"},{"entry":"} DXVA_VideoChromaSubsampling;"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The first member of this enum indicates that this field is unknown. This field may be set to a predefined value if required for a computation to proceed.","The member having the suffix \u201cProgressiveChroma\u201d defines chroma samples that are temporally interpreted as progressive content (e.g., from the same frame, rather than from two temporally offset fields).","The member having the suffix \u201cHorizontally_Cosited\u201d defines chroma samples that are horizontally aligned on multiples of the luma samples.","The member having the suffix \u201cVertically_Cosited\u201d defines chroma samples that are vertically aligned on multiples of the luma samples.","The member having the suffix \u201cAlignedChromaPlanes\u201d defines the Pb and Pr (or Cb and Cr) planes as having the same phase alignment. This flag is 0 if the data is vertically cosited.",{"@attributes":{"id":"p-0173","num":"0181"},"figref":"FIGS. 10-12","b":"204"},"D. One Exemplary Application of the Color Information Data Structure","There are many applications of the coding strategy described in the previous sections.  illustrate one exemplary application using an application programming interface (API) referred to as DeinterlaceBltEx.","By way of overview, the DeinterlaceBltEx functionality provides logic which allows plural operations to be performed together as a single operation, such as a compositing operation to be performed together with a deinterlacing operation. A compositing operation refers to the combination of principal image stream information with image sub-stream information. Image stream information refers to a primary (or principal) sequence of image frames. Image sub-stream information refers to auxiliary image information that can be presented along with the image frames of the principal image stream information. In one example, the image sub-stream information may correspond to close-captioning data. The close-captioning information is combined with the principal image stream information to form composite image information for display. A deinterlacing operation refers to a technique for combining successive image fields that have been created in an interlacing operation to provide a progressive (non-interlaced) representation of an image frame. The DeinterlaceBltEx functionality also allows other kinds of operations to be performed at the same time. (Alternatively, so-called DeinterlaceBlt functionality can be used, which is configured to perform the above-identified operations in series.)","In one exemplary implementation, the DeinterlaceBltEx functionality provides a data structure having an unused portion (or a partially unused portion) that can be used to convey the CI data structure . That is, in one exemplary and non-limiting implementation, the portion can define a 32 bit word. A 24 bit portion of this word can be used to convey the six fields of information shown in . Another portion of the existing structure (e.g., the remaining 8 bits) can be used to convey other aspects of the image information , such as whether the image information  is coded in interlaced or progressive format, and so forth.","More specifically, the color information can serve numerous roles in the context of the DeinterlaceBltEx operation. As to the issue of color space processing, the color information specified in the CI data structure  can specify: (a) what color space conversion(s) (if any) are to be performed on input image information supplied to the DeinterlaceBltEx functionality; (b) what color space is to be used to perform various processing tasks on the image information; and (c) what color space is to be used to provide output image information, and so forth. Possible color spaces that can be selected for these tasks can include any kind of RGB-related color space, any kind of luma-related color space (e.g., YUV), and so forth. Further, possible color spaces can be either in linear form or nonlinear (e.g., gamma-compensated) form.","For example, in one scenario, one or more streams of image information are converted from a luma-related color space into a linear RGB-related color space. Certain operations can then be performed on the image information in the linear RGB-related color space, to provide an output also within the linear RGB-related color space. Thus, this series of operations can implement the technique shown in  (as previously described). In another scenario, one or more streams of image information can be received and processed in a luma-related color space, to provide an output also within a luma-related color space. In another scenario, one or more streams of image information can be converted from one kind of RGB-related color space to another kind of RGB color space, or from one kind of luma-related color space to another kind of luma-related color space. These are merely illustrative examples of a wide variety of processing options made available by the DeinterlaceBltEx functionality. In any of these cases, the color information in the CI data structure  can provide instructions which govern the color space selections applied by the DeinterlaceBltEx functionality.","Moreover, the unique capabilities of the DeinterlaceBltEx functionality allow color space conversion to be performed in a same operation as other operations performed on the image information (such as deinterlacing and compositing). For example, image information can be converted from a luma-related color space to an RGB-related color space in a same operation as this image information is deinterlaced and composited with a video sub-stream. Alternatively, certain operations performed on image information can also be performed in series. For instance, in one example described fully below, deinterlacing and compositing can be performed in a single operation within the YUV color space, followed by a conversion of the output result to an RGB-related color space.","As a final introductory comment, the DeinterlaceBltEx functionality can act on separate image information streams (such as one or more principal video streams and\/or one or more video sub-streams) expressed in different color spaces. The image information streams can have their own CI data structures  associated therewith. The CI data structures  can include information which defines how the separate streams can be converted into a common color space in order for operations to be performed on the separate streams (such as deinterlacing, compositing, and so forth).","With the above introduction,  shows an overview of an exemplary system  that can be used to implement aspects of the video pipeline  shown in . The system  can rely on the DirectX\u00ae family of technologies produced by Microsoft\u00ae Corporation of Redmond, Wash. The DirectX family includes, DirectX Video Acceleration (DirectX-VA), Direct3D, DirectDraw, etc. However, the principles described above can be performed using other kinds of rendering technologies that run on other kinds of technical platforms. The system  can represent a personal computer, a game console (such as Microsoft\u00ae Corporation's Xbox\u2122 gaming console), or any other kind of device.","To begin with, the system  accepts image information from any one of a number of sources. For example, the apparatus  can accept image information from a network  (such as a remote source coupled to the Internet), any kind of database , any kind of computer readable disc media  (such as an optical disk, DVD, etc.), or some other source  (such as any one of the sources associated with sources  shown in ). In any case, the received information may contain a combination of image information and audio information. A demux unit  separates the audio information from the image information. Audio processing functionality  processes  the audio information.","An image decoder  processes the image information. The image decoder  can convert the compressed image information from its received format to some other format, as well as perform initial resizing or other operations on this information. The output of the image decoder  can include so-called pure image information as well as image sub-stream information. The pure image information constitutes the principal image stream to be rendered on the display device. The image sub-stream information can constitute any supplemental information associated with the pure image information, such as close-captioning information, any kind of graphical overlay information (such as various graphical editing controls), various kinds of sub-images presented by DVD players, and so on).","In one exemplary implementation, a video mixing renderer (VMR) module  performs a central role in the processing of the thus-received image information. By way of overview, the VMR module  interacts with a graphics interface  and a display driver , which, in turn, controls a graphics module . As will be described in greater detail below, this interaction involves probing the capabilities of the graphics module . This interaction also involves coordinating the processing of the image information by the graphics interface , display driver , and graphics module . In one implementation, the graphics interface  can be implemented using the DirectDraw functionality provided by Microsoft\u00ae Corporation's DirectX. DirectDraw serves in this context as a messaging conduit for communicatively coupling the VMR module  to the graphics module . The graphics module  itself can constitute a fixed module within a computer or like device, or it can constitute a detachable unit, such as a graphics card. The vertical chain of functionality represented by the VMR module , graphics interfaces , display driver , and graphics module  can be divided into a user mode and a kernel mode. The user mode refers to aspects of the programming functionality that can be manipulated by the user via various interfaces. The kernel mode represents aspects of the programming functionality that cannot be directly manipulated by the user.","The graphics module  itself includes one or more graphics processing units (GPUS) . A GPU  is generally a processing device like the CPU. The GPU  is commonly allocated to information-intensive rendering tasks that are repetitively performed by the implementing apparatus . Allocating these repetitive or information-intensive tasks to the GPU  frees the CPU (not shown) to perform other tasks, and thus improves the performance of the apparatus . Two exemplary tasks that this implementation allocates to the GPU  are deinterlacing and rate conversion. These functions are represented by deinterlacing logic  and rate converter logic . The deinterlacing logic  combines two or more fields of image information together to form a frame of image information. The rate converter logic  modifies the frame rate of a sequence of image frames. The GPU  can perform many additional processing tasks.","The GPU  can interact with a local memory  associated with the graphics module . This local memory  can serve any number of storage-related purposes. For instance, this memory  can store a final image surface which is then forwarded to a display device .",{"@attributes":{"id":"p-0188","num":"0196"},"figref":["FIG. 13","FIG. 13","FIG. 2","FIG. 13"],"b":["202","202","1300","1300","202","202","202","1300","1300","202","202"]},"Further details regarding the exemplary manner in which the CI data structure  can be integrated into the DeinterlaceBltEx framework will be set forth below.","To begin with,  shows an overview  of the operation of the apparatus  shown in . In step , the VMR module  queries the display driver  and graphics module  regarding what processing modes it supports. After it receives a reply, in step , the VMR module  sends another inquiry to find out more specific information regarding the capabilities of the display driver  and associated graphics module . Steps  and  are discussed in greater detail below under the general heading of \u201cpreliminary information processing.\u201d","After investigating the capabilities of the attached hardware and associated interfaces, the VMR module  opens an image stream object (in step ) so that image information and control information can be forwarded to the hardware. Then, in step , the VMR module  coordinates the execution of one or more image processing functions by the hardware (e.g., by the graphics module ). One such function is deinterlacing. Another such function is sub-stream compositing. Deinterlacing can be combined with compositing as described above, or either function can be performed separately depending on the received information. For instance, if progressive image information has been received, there is no need to perform deinterlacing; in this case, the VMR module  may simply resize the object, add image sub-stream information to it, or perform some other function or combination of functions. Many other functions are be implemented besides deinterlacing and compositing.","Finally, in step , the VMR module closes the image stream that it opened in step . This step  may be in response to a command given by the user, or simply in response to running out of streaming image information, etc.","The following discussion presents more detailed information regarding selected steps referenced above.","Initialization Steps","In step  described above, the VMR module  asks the display driver  what processing functionality that it supports with respect to an input image format. When the display driver  responds, the VMR module  sends a request for more specific information regarding the requirements of the display driver  for a particular mode. The display driver  responds by specifying various information within an information structure. Such information identifies a number of forward reference samples required, a number of backward reference samples requested, a format of the output frame, etc. A flag is also included in this information structure that indicates whether support for combined deinterlacing and compositing is supported by the graphics module  and associated interfaces. This flag is referred to as the DXVA_ImageProcess_Sub-streams flag in one exemplary implementation.","Further, in order to correctly support the combined deinterlacing and compositing, the graphics module  and associated interfaces and drivers should be capable of independently stretching (horizontally and\/or vertically) both the image frame that is being deinterlaced as well as the supplied image sub-streams. This is required in one implementation because the pixel aspect ratio of the principal image and the video sub-streams may be different and non-square in nature. The display driver  can communicate its ability to handle this functionality by returning DXVA_VideoProcess_StretchX and DXVA_VideoProcess_StretchY flags that convey its ability to stretch the images, in addition to the DXVA_VideoProcess_Sub-streams flag.","Further still, the DeinterlaceBltEx DDI supports enhanced color information for each source and destination surface (where a \u201csource surface\u201d defines input image information, and a \u201cdestination surface\u201d or \u201ctarget surface\u201d defines output image information produced by the DeinterlaceBltEx operation). The display driver  can indicate the level of support it has for this new color information via various color-related flags, such as the following flags:","DXVA_VideoProcess_SubStreamsExtended,","DXVA_VideoProcess_YUV2RGBExtended, and","DXVA_VideoProcess_AlphaBlendExtended.","Support for the DXVA_VideoProcess_SubStreamsExtended flag indicates that the system  can perform color adjustments to the source video information and the sub-stream information, as the video information is deinterlaced, composited with the sub-stream information, and written to the destination surface.","Support for the DXVA_VideoProcess YUV2RGBExtended flag indicates that the system  is capable of performing a color space conversion operation (e.g., YUV-to-RGB) as the deinterlaced and composited pixels of the image information are written to the destination surface using the color information that is specified for the source and destination surfaces.","Support for the DXVA_VideoProcess_AlphaBlendExtended flag indicates that the system  is capable of performing an alpha blend operation with the destination surface when the deinterlaced and composited pixels of the image information are written to the destination surface.","Deinterlacing Step","The VMR module  uses the above-described DeinterlaceBltEx functionality to coordinate the execution of deinterlacing and compositing by the graphics module . More specifically, this DeinterlaceBltEx functionality can be implemented as a single call to the display driver , even though it technically involves more than one fundamental operation (color space conversion, deinterlacing, compositing, etc.). The DeinterlaceBltEx functionality writes the output of its operation to a specified destination surface.","More specifically, the VMR module  forwards the following data structure to the display driver  to implement the DeinterlaceBltEx functionality.",{"@attributes":{"id":"p-0207","num":"0215"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"HRESULT"]},{"entry":[{},"DeinterlaceBltEx("]},{"entry":[{},"[in] HDXVA_DeinterlaceStream hDiStrm"]},{"entry":[{},"[in] REFERENCE_TIME rtTargetFrame,"]},{"entry":[{},"[in] RECT* prcTargetRect,"]},{"entry":[{},"[in] DXVA_AYUVsample2 BackgroundColor,"]},{"entry":[{},"[in] DWORD DestinationFormat,"]},{"entry":[{},"[in] DWORD DestinationFlags,"]},{"entry":[{},"[in] LPDDSURFACE lpDDSDstSurface,"]},{"entry":[{},"[in] LPDXVA_VideoSample2 lpDDSrcSurfaces,"]},{"entry":[{},"[in] DWORD dwNumSurfaces,"]},{"entry":[{},"[in] FLOAT Alpha \/*0.0F transparent, 1.0F opaque *\/"]},{"entry":[{},");"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"In this structure, the rtTargetFrame parameter identifies the temporal location of an output frame within a sequence of input frames. If only deinterlacing is being performed, the target time should coincide with one of the rtStart times or midpoint times, (rtStart+rtEnd)\/2, of a reference sample. If a frame rate conversion is being requested, the rtTargetFrame time may be different from any of the rtStart or midpoint times of the reference samples.","The prcTargetRect parameter identifies the location within the destination surface that the DeinterlaceBltEx operation should write to. In one implementation, the output should be restricted to the pixels within this rectangle; that is, every pixel within the prcTargetRect should be written to, and pixels outside the prcTargetRect should not be modified in any way.","The BackgroundColor parameter identifies a color of the background upon which all the video stream and sub-streams are composed.","The DestinationFormat parameter contains extended color information relating to the destination surface.","The DestinationFlags parameter contains a collection of flags that indicate changes in the destination-related parameters from the previous call to DeinterlaceBltEx. These flags reflect changes to the background color, extended color information, target rectangle or the planar alpha parameter and are provided to aid optimizing the driver code.","The destination surface can be an off-screen plain surface located in video memory (e.g., local memory ). The pixel format of the destination surface can be the one indicated in a d3dOutputFormat field of the data structure returned to the VMR module  in the initialization steps. In one exemplary implementation, the destination surface specified in the structure can be in a Y-related color space (e.g., YUV).","The 1pDDSrcSurfaces parameter points to an array of DXVA_VideoSample2 structures. The SampleFormat field in this structure indicates whether the sample is a reference for a deinterlace operation or a video sub-stream sample that needs to be combined with the deinterlaced video frame. Video sub-stream samples should have the DXVA_SampleSub-stream value for their sample format.","More specifically, an exemplary VideoSample2 structure is identified below.",{"@attributes":{"id":"p-0216","num":"0224"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"typedef struct _DXVA_VideoSample2 {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"REFERENCE_TIME ","rtStart;"]},{"entry":[{},"REFERENCE_TIME ","rtEnd;"]},{"entry":[{},"DWORD","SampleFormat;"]},{"entry":[{},"DWORD","SampleFlags"]},{"entry":[{},"VOID*","lpDDSSrcSurface;"]},{"entry":[{},"RECT","rcSrc;"]},{"entry":[{},"RECT","rcDst;"]},{"entry":[{},"DXVA_AYUVsample2","Pal[16];"]},{"entry":[{},"} DXVA_VideoSample2,","*LPDXVA_VideoSample2."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"In addition to indicating whether the sample is interlaced or progressive, the SampleFormat field in the above-identified data structure defines where the CI data structure  can be expressed. Adding the CI data structure  to the SampleFormat field does not increase the size of the VideoSample2 data structure or otherwise require re-engineering of the DeinterlaceBltEx functionality. As such, \u201cshoehorning\u201d the CI data structure  into this data structure represents a particularly efficient manner of conveying color information through the video pipeline, including to the graphics module .","For reference video samples, the rtStart and rtEnd fields indicate the temporal location of the sample. For video sub-stream samples, these fields are cleared to zero.","The source and destination rectangles are used for subrectangle deinterlacing or stretching Note that stretching of video sub-streams is independent of the video stream and that support for stretching is mandatory in one implementation. For the palettized video sub-stream pixel formats, a PAL field of the DXVA_VideoSample2 structure contains 16 palette entries that can be used when compositing the sub-stream sample. For non-palettized pixel formats the palette will be cleared to zero and can be ignored.","Each input sample contains a collection of flags that indicate changes in the current sample from the previous sample. These flags reflect changes to the palette, color information, source, and destination rectangles of each sample and are provided to aid optimizing the driver code.","Continuing with the description of the DeinterlaceBltEx structure, the dwNumSurfaces parameter indicates the number of elements in the 1pDDSrcSurface array. The video reference samples will be first in the array followed by the video sub-streams in Z-order. In one exemplary implementation, the number of video sub-streams passed to the driver can range from 0 to 15. Most often when DeinterlaceBltEx is called, the driver will be passed 0 or 1 video sub-streams.","Finally, the Alpha parameter indicates a planar transparency value that can be applied to the composite background color, video stream, and sub-stream image as it is written to the destination surface.","It should be noted that the DeinterlaceBltEx functionality can be called by the VMR module  when progressive video and multiple image sub-streams are received. This can occur, for instance, when the VMR module  is used for DVD playback that contains a mixture of progressive and interlaced video. In this case, the display driver  will not attempt to deinterlace the video stream (because it is already in the progressive format); rather, the VMR module  can be configured to combine the video stream with any given sub-streams, resizing each stream as desired or required. (If a deinterlace mode that needs multiple reference samples is being used with progressive video, the multiple reference samples will still be sent to the display driver ; however, each reference sample will refer to the same progressive video frame.)","To round out the discussion of the DeinterlaceBltEx functionality,  describe how this functionality can combine a compositing operation and a deinterlacing operation together in one operation.",{"@attributes":{"id":"p-0225","num":"0233"},"figref":["FIG. 15","FIG. 13","FIG. 15","FIG. 15"],"b":["1300","1502","1504","1506","1508","1510","1512","1508","1514","1516","1508","1508","1500"]},"The above-described bandwidth efficiency can be achieved by assigning image information (e.g., image information , , , etc.) and the image sub-stream information (e.g., , , etc.) to different respective texturing units employed by the GPU module . In their most common application, texturing units are assigned to image surfaces to be manipulated in the course of a three-dimensional rendering application. For instance, a \u201ctexture\u201d generally refers to an image that is \u201cpasted\u201d onto the surface of a geometric primitive (e.g., a triangle) that then forms a part of a three dimensional scene to be rendered. These different texture surfaces are assigned to different so-called texturing units. The system shown in  assigns image information (e.g., , , , etc.) and image sub-stream information (, , etc.) to respective texturing units and thus achieves similar efficient performance of the deinterlacing and compositing operations. More specifically, the GPU logic essentially reads and processes information from each of a collection of texturing units at the same time, instead of in a staggered serial fashion. This reduces the bus congestion in the implementing device, and better enables the implementing device to present the image information and associated image sub-stream information at an optimal frame rate.","In other implementations, the logic  can perform other operations, such as color space conversion. For instance, logic  can convert one or more streams of image information from a luma-related color space (e.g., YUV) to an RGB-related color space (e.g., linear or nonlinear RGB). Alternatively, the logic  can convert from one kind of luma-related color space to another kind luma-related color space, or from one kind of RGB-related color space to another kind of RGB-related color space, and so forth. In one exemplary scenario, the logic  can be used to implement aspects of the features shown in  (above), where image information is converted from a luma-related color space to linear RGB, and then processing is subsequently performed on the image information within the linear RGB color space (such as deinterlacing, followed by, or coupled with, any other processing in the linear RGB color space). Stated in other words, the output surface of logic  can be expressed within an RGB-related color space (such as linear RGB).","In another scenario, the output of logic  can process image information within a luma-related color space (e.g., YUV) to produce composite deinterlaced image information , still in the luma-related color space, as opposed to RGB color space. The logic , or some other module (not shown) can then convert the luma-related color information into RGB-related information, which can then be rendered to the display to yield rendered image information . Delaying the conversion of the luma-related color space into the RGB-related color space has potential bandwidth savings. For instance, in one implementation, luma-related color information can be presented using 12 bits. In contrast, in one implementation, RGB information requires 32 bits to represent. Hence, performing such tasks as compositing using luma-related information instead of RGB information cuts down on the bus traffic association with this transaction.","The logic  can perform still other kinds of processing functions, such as image resizing. Yet the logic  need not perform each of the processing operations described above. For instance, if the image information is already in progressive format, the logic  can be dedicated to simply resizing the image information, or performing some other desired operation on the image information (such as color space conversion, etc.).","Further, in other implementations, one or more of the operations can be performed in series, e.g., as separate operations, instead of a single operation. Alternative logic \u2032 in  represents such an implementation. For instance, DeinterlaceBlt functionality is adapted to process image information in this manner.","In any event, the color information contained in the CI data structure  provides the instructions necessary to convert the image information in a desired manner for a particular application. More specifically, where the logic  processes plural streams of image information, it can consult CI data structures  associated each of the streams of image information. Such per-stream CI information  can be used to convert the different streams of image information (which may be expressed in different respective color spaces) to a common color space, such as linear RGB color space. This feature is beneficial because it eliminates or reduces the need for storing temporary image information expressed in one or more intermediary color spaces. In the techniques described above, the logic  can receive the input image information, convert it, and write it to memory; for instance, this avoids the need for providing additional composited YUV image information prior to the information being displayed by an output device (e.g., the desktop providing by a personal computer).","The emphasis on the use of the CI information  to supply colorspace-related instructions is only illustrative. The CI information  provides a wealth of other information that can be used to govern the operations shown in . For instance, the CI information  can also be used in the deinterlacing operation to correctly interpolate the corresponding progressive image.",{"@attributes":{"id":"p-0233","num":"0241"},"figref":["FIG. 16","FIG. 16"],"b":"1508"},{"@attributes":{"id":"p-0234","num":"0242"},"figref":["FIG. 16","FIG. 13"],"b":["1600","19","1330","1322","1334"]},"As noted above, the joint operation of interleaving and compositing can take place while the image information is still in a Y-related color space, such as YUV form. Hence, in this exemplary and non-limiting scenario, the VMR module  allocates portions of memory for storing this Y-related information. A first block  can be allocated to storing Y information, a second block  can be allocated to storing a first chroma component (e.g., U information), and a third block  is allocated to storing a second chroma component (e.g., V information). More bits are allocated to the Y information than the two chroma components. For instance, for an image that contains 720\u00d7480 pixels, a block of 720\u00d7480 bytes can be allocated to storing the Y information, a block of 360\u00d7240 bytes can be allocated to storing the first chroma component, and a block of 360\u00d7240 bytes can be allocated to storing the second chroma component. Finally, a block  of memory can be allocated to storing sub-stream information (such as close-captioning information, DVD sub-image display information, graphical icons of various sorts, and so on).","In the exemplary organization  shown in , only four texturing units are shown (, , , and ). However, other implementations will include more than four units. Texturing unit  is allocated to handling an image input surface associated with memory block  (e.g., the Y information), texturing unit  is allocated to handling an image input surface associated with memory block  (e.g., the first chroma component, e.g., U), and texturing unit  is allocated to handling an image input surface associated with memory block  (e.g., the second chroma component, e.g., V). Texturing unit  is allocated to handling an image input surface associated with memory block  (i.e., the sub-stream information). The memory blocks (Y, chroma1, chroma2, and the sub-stream information) are separate, but need not be contiguous in memory. Additional memory blocks and texturing units can be provided to handle additional image reference samples and\/or additional image sub-streams. For instance, an application that includes two previous reference streams would require at least nine texturing units (e.g., three units for the current sample, and six units for the two reference samples).","Finally,  generically shows GPU processing logic  associated with the GPU  of . The GPU processing logic  interacts with the texturing units. The GPU processing logic  can perform deinterlacing, frame rate conversion, and\/or other task(s).","The use of YUV-related information to explain the operation of  is merely exemplary. Similar benefits can be gained by performing processing operations within an RGB-related space, such as linear RGB (e.g., in the manner shown in ).","E. Exemplary Computer Environment","In one exemplary implementation, aspects of the processing show in the preceding figures can be performed by computing equipment. In this case,  provides information regarding an exemplary computer environment  that can be used to implement aspects of the processing shown in preceding figures.","The computing environment  includes a general purpose type computer  and a display device . However, the computing environment  can include other kinds of computing equipment. For example, although not shown, the computer environment  can include hand-held or laptop devices, set top boxes, game consoles, processing functionality integrated into video processing\/presentation devices (e.g., televisions, DVRs, etc.), mainframe computers, and so forth. Further,  shows elements of the computer environment  grouped together to facilitate discussion. However, the computing environment  can employ a distributed processing configuration. In a distributed computing environment, computing resources can be physically dispersed throughout the environment.","Exemplary computer  includes one or more processors or processing units , a system memory , and a bus . The bus  connects various system components together. For instance, the bus  connects the processor  to the system memory . The bus  can be implemented using any kind of bus structure or combination of bus structures, including a memory bus or memory controller, a peripheral bus, an accelerated graphics port, and a processor or local bus using any of a variety of bus architectures.","Computer  can also include a variety of computer readable media, including a variety of types of volatile and non-volatile media, each of which can be removable or non-removable. For example, system memory  includes computer readable media in the form of volatile memory, such as random access memory (RAM) , and non-volatile memory, such as read only memory (ROM) . ROM  includes an input\/output system (BIOS)  that contains the basic routines that help to transfer information between elements within computer , such as during start-up. RAM  typically contains data and\/or program modules in a form that can be quickly accessed by processing unit .","Other kinds of computer storage media include a hard disk drive  for reading from and writing to a non-removable, non-volatile magnetic media, a magnetic disk drive  for reading from and writing to a removable, non-volatile magnetic disk  (e.g., a \u201cfloppy disk\u201d), and an optical disk drive  for reading from and\/or writing to a removable, non-volatile optical disk  such as a CD-ROM, DVD-ROM, or other optical media. The hard disk drive , magnetic disk drive , and optical disk drive  are each connected to the system bus  by one or more data media interfaces . Alternatively, the hard disk drive , magnetic disk drive , and optical disk drive  can be connected to the system bus  by a SCSI interface (not shown), or other coupling mechanism. Although not shown, the computer  can include other types of computer readable media, such as magnetic cassettes or other magnetic storage devices, flash memory cards, CD-ROM, digital versatile disks (DVD) or other optical storage, electrically erasable programmable read-only memory (EEPROM), etc.","Generally, the above-identified computer readable media provide non-volatile storage of computer readable instructions, data structures, program modules, and other data for use by computer . For instance, the readable media can store the operating system , application modules , other program modules , and program data .","The computer environment  can include a variety of input devices. For instance, the computer environment  includes the keyboard  and a pointing device  (e.g., a \u201cmouse\u201d) for entering commands and information into computer . The computer environment  can include other input devices (not illustrated), such as a microphone, joystick, game pad, satellite dish, serial port, scanner, card reading devices, digital or video camera, etc. Input\/output interfaces  couple the input devices to the processing unit . More generally, input devices can be coupled to the computer  through any kind of interface and bus structures, such as a parallel port, serial port, game port, universal serial bus (USB) port, etc.","The computer environment  also includes the display device . A video adapter  couples the display device  to the bus . In addition to the display device , the computer environment  can include other output peripheral devices, such as speakers (not shown), a printer (not shown), etc.","Computer  operates in a networked environment using logical connections to one or more remote computers, such as a remote computing device . The remote computing device  can comprise any kind of computer equipment, including a general purpose personal computer, portable computer, a server, a game console, a network extension device, and so forth. Remote computing device  can include all of the features discussed above with respect to computer , or some subset thereof.","Any type of network  can be used to couple the computer  with remote computing device , such as a WAN, a LAN, etc. The computer  couples to the network  via network interface , which can utilize broadband connectivity, modem connectivity, DSL connectivity, or other connection strategy. Although not illustrated, the computing environment  can provide wireless communication functionality for connecting computer  with remote computing device  (e.g., via modulated radio signals, modulated infrared signals, etc.).","In closing, a number of examples were presented in this disclosure in the alternative (e.g., case A or case B). In addition, this disclosure encompasses those cases which combine alternatives in a single implementation (e.g., case A and case B), even though this disclosure may not have expressly mention these conjunctive cases in every instance.","Moreover, a number of features were described herein by first identifying exemplary problems that these features can address. This manner of explication does not constitute an admission that others have appreciated and\/or articulated the problems in the manner specified herein. Appreciation and articulation of the problems present in the video coding art is to be understood as part of the present invention.","More generally, although the invention has been described in language specific to structural features and\/or methodological acts, it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features or acts described. Rather, the specific features and acts are disclosed as exemplary forms of implementing the claimed invention."],"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0054","num":"0062"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0055","num":"0063"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0056","num":"0064"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0057","num":"0065"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0058","num":"0066"},"figref":["FIG. 5","FIG. 2"]},{"@attributes":{"id":"p-0059","num":"0067"},"figref":["FIGS. 6-12","FIG. 5"]},{"@attributes":{"id":"p-0060","num":"0068"},"figref":["FIG. 13","FIG. 2"]},{"@attributes":{"id":"p-0061","num":"0069"},"figref":["FIG. 14","FIG. 13"]},{"@attributes":{"id":"p-0062","num":"0070"},"figref":["FIGS. 15 and 16","FIG. 13"]},"Finally,  shows an exemplary computing environment for implementing aspects of the system shown in  et seq."]},"DETDESC":[{},{}]}
