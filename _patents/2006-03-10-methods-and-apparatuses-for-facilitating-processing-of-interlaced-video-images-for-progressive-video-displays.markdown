---
title: Methods and apparatuses for facilitating processing of interlaced video images for progressive video displays
abstract: Methods and apparatuses are provided for facilitating processing of interlaced video images for progressive video displays. In accordance with certain exemplary implementations, a method includes receiving from a renderer a query for a graphics device driver as to at least one graphics processing capability that can be performed by an associated graphics device in de-interlacing video data, communicating the query to the graphics device driver, receiving from the graphics device driver a response to the query that identifies the graphics processing capability/capabilities to the renderer, and communicating the response to the renderer. The method further includes receiving from the renderer a further query for the graphics device driver as to at least one input requirement associated with the identified graphics processing capability, communicating the further query to the graphics device driver, receiving from the graphics device driver a further response to the further query that identifies the input requirement(s) associated with the graphics processing capability, and communicating the further response to the renderer.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07876379&OS=07876379&RS=07876379
owner: Microsoft Corporation
number: 07876379
owner_city: Redmond
owner_country: US
publication_date: 20060310
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED PATENT APPLICATIONS","TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION","EXAMPLE","De-Interlacing 720\u00d7480i Content","EXAMPLE","Frame-Rate-Converting 480p Content","EXAMPLE","A \u201cDeinterlaceStream\u201d Object","EXAMPLE OF DE-INTERLACING","\u201cDeinterlaceBlt\u201d","EXAMPLE","Mapping CreateMoComp to DeinterlaceOpenStream","EXAMPLE","Implementing \u201cGetMoCompGuids\u201d","EXAMPLE","Mapping RenderMoComp to DeinterlaceBlt","EXAMPLE","Mapping DestroyMoComp to DeinterlaceCloseStream","CONCLUSION"],"p":["This Non-Provisional Application is a divisional of Non-Provisional application Ser. No. 10\/273,505 (the '505 Application), filed on Aug. 30, 2002.The '505 Application is incorporated by reference herein in its entirety. The '505 Application, in turn, claims benefit of priority from U.S. Provisional Application Ser. No. 60\/372,880 (the '880 Application), filed Apr. 15, 2002. The '880 Application is likewise incorporated by reference herein in its entirety.","This invention relates generally to video processing and display, and more particularly to methods and apparatuses for facilitating processing of interlaced video images for progressive video displays.","Video image sequences can usually be categorized into two different types: progressive and interlaced. With progressive video all the picture elements comprising a frame of video data are sampled at the same moment in time. With interlaced video, alternative lines of the video image are sampled at alternate moments in time; the resulting interlaced video frame is therefore made up of two \u201cfields\u201d each field being half the height of the video frame.","Examples of interlaced video sequences are TV signals and the output of DV camcorders. Examples of progressive video sequences are certain DVD's and computer generated video such as the output of the Windows\u00ae Media Video encoder. Additionally, some professional-level video cameras also generate progressive video.","Computer monitors and other like display devices are examples of a \u201cprogressive display system\u201d and are therefore able to display progressive video without any additional processing. Interlaced video cannot be displayed on a computers monitor unless it has first been \u201cde-interlaced\u201d.","The current technique for de-interlacing video in a conventional personal computer (PC) requires the use of a \u201cgraphics overlay device\u201d by a graphics processor. There are several restrictions and limitations to the use of the graphics overlay devices and as a consequence of this their usage will likely be depreciated in the future. For example, for most PCs there can only be one graphics overlay device. Additionally, most graphics overlay devices only provide a crude de-interlacing algorithm, such as, e.g., the BOB algorithm.","Consequently, for these reasons and others there is a need for improved methods and apparatuses for facilitating the de-interlacing of video.","In accordance with certain exemplary aspects of the present invention, methods and apparatuses are provided for facilitating the de-interlacing of video. By way of example, interfacing methods and apparatuses are provided in certain implementations for instructing graphics processor logic (i.e., hardware, firmware and\/or software) to de-interlace a video field to produce a single video frame that can be displayed on a computer monitor and\/or other like display devices. This can be accomplished without the need for a graphics overlay device.","In accordance with certain implementations of the present invention, a method is provided, which includes causing a graphics device driver to identify to a renderer at least one graphics processing capability associated with a corresponding graphics device, and causing the graphics device driver to identify to the renderer at least one input requirement associated with the identified graphics processing capability.","In other implementations of the present invention, a graphics device driver is operatively configured to identify to a renderer at least one graphics processing capability associated with a corresponding graphics device and at least one input requirement associated with the identified graphics processing capability.","In accordance with still other implementations of the present invention, a computer-readable medium is provided, which includes computer-executable instructions for causing at least one processing unit to cause a graphics device driver to identify to a renderer at least one graphics processing capability associated with a corresponding graphics device, and also cause the graphics device driver to identify to the renderer at least one input requirement associated with the identified graphics processing capability.","The above stated needs and others are also met by a method that includes causing a renderer to identify to a graphics device driver a description of interlaced video data to be processed by a graphics device associated with the graphics device driver. The method farther includes causing the graphics device driver to identify to the renderer at least one graphics processing capability associated with the graphics device that may be used to provide de-interlacing and\/or other applicable processes, and causing the renderer to select at least one of the identified graphics processing capabilities and request input requirements from the graphics device driver for the selected graphics processing capability\/capabilities. The method also includes causing the graphics device driver to identify to the renderer the input requirements associated with the identified graphics processing capability\/capabilities.","In certain implementations, an apparatus is provided, which includes rendering logic, graphics device logic, and interface logic. The interface logic operatively couples the rendering logic and the graphics device logic such that the rendering logic can provide a description of interlaced video data to be processed by a graphics device associated with the graphics device logic, the graphics device logic can identify at least one graphics processing capability associated with the graphics device, the rendering logic can request input requirements from the graphics device logic for at least one selected graphics processing capability, and the graphics device logic can identify at least one input requirement associated with the at least one selected graphics processing capability.","In accordance with yet another exemplary implementation, a method is provided that includes receiving from a renderer a query for a graphics device driver as to at least one graphics processing capability that can be performed by an associated graphics device in de-interlacing video data, communicating the query to the graphics device driver, receiving from the graphics device driver a response to the query that identifies the graphics processing capability\/capabilities to the renderer, and communicating the response to the renderer In other implementations the method also includes receiving from the renderer a further query for the graphics device driver as to at least one input requirement associated with the identified graphics processing capability, communicating the further query to the graphics device driver, receiving from the graphics device driver a further response to the farther query that identifies the input requirement(s) associated with the graphics processing capability, and communicating the further response to the renderer.","In still other implementations of the present invention a method of communicating between a rendering process and a graphics device driver process that is associated with a graphics device is provided. Here, for example, the method includes issuing, by a rendering process, a query call having at least one call parameter comprising a description of video data to be processed by the rendering process and a graphics device, receiving, by the graphics device driver process, the query call and parsing the query call to retrieve the call parameter(s), and issuing, by the graphics device driver process, a query acknowledgment call having at least one acknowledgment parameter comprising an identifier for at least one supportive processing capability that the graphics device can provide based on the description of video data.","Another exemplary method includes issuing, by a rendering process, a query call having at least one call parameter comprising an identifier for a selected supportive processing capability that a graphics device can provide to process selected video data, receiving, by a graphics device driver process associated with the graphics device, the query call and parsing the query call to retrieve the call parameter(s), and issuing, by the graphics device driver process, a query acknowledgment having at least one acknowledgment parameter comprising at least one input requirement associated with the selected supportive processing capability.","In accordance with still other aspects of the present invention, a method for establishing a video stream object between a rendering process and a graphics device having an associated graphics device driver is provided. Here, for example, the method includes issuing, by a rendering process, an open stream call having at least two call parameters including an identifier for a selected supportive processing capability that a graphics device is to perform while processing streamed video data and a description of video data to be processed by the rendering process and the graphics device while processing the streamed video data. The method further includes receiving, by a supporting process, the open stream call and parsing the open stream call to retrieve the call parameters, and issuing, by the supporting process, a stream identifier corresponding to a video stream object provided by the supporting process.","In still other implementations, a method for closing a video stream object is provided. Here, for example, the method includes issuing, by a rendering process, a close stream call having at least one call parameter comprising a stream identifier corresponding to a previously established video stream object, and receiving, by a supporting process, the close stream call and parsing the close stream call to retrieve the call parameter, and causing the supporting process to close the previously established video stream object.","Some of the above stated needs and others are also addressed by a method for use in manipulating interlaced video data. The method includes accessing interlaced video data including top field data and bottom field data associated with a video surface having a width, a height and a stride. The method further includes producing a reinterpreted video surface by isolating the top and bottom field data, and configuring the isolated top and bottom field data in the reinterpreted video surface such that the reinterpreted video surface has a reinterpreted height that is less than the height and a reinterpreted stride that is greater than the stride.","Turning to the drawings, wherein like reference numerals refer to like elements, the invention is illustrated as being implemented in a suitable computing environment. Although not required, the invention will be described in the general context of computer-executable instructions, such as program modules, being executed by a personal computer. Generally, program modules include routines, programs, objects, components, data structures, etc. that perform particular tasks or implement particular abstract data types. Moreover, those skilled in the art will appreciate that the invention may be practiced with other computer system configurations, including hand-held devices, multi-processor systems, microprocessor based or programmable consumer electronics, network PCs, minicomputers, mainframe computers, and the like.","An Exemplary Video Display Environment:",{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 1","b":["120","120","120","120"]},"The improved methods and apparatuses herein are operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems, environments, and\/or configurations that may be suitable include, but are not limited to, personal computers, server computers, thin clients, thick clients, hand-held or laptop devices, multiprocessor systems, microprocessor-based systems, set top boxes, programmable consumer electronics, network PCs, minicomputers, mainframe computers, distributed computing environments that include any of the above systems or devices, and the like.","As shown in , computing environment  includes a general-purpose computing device in the form of a computer . The components of computer  may include one or more processors or processing units , a system memory , and a bus  that couples various system components including system memory  to processor .","Bus  represents one or more of any of several types of bus structures, including a memory bus or memory controller, a peripheral bus, an accelerated graphics port, and a processor or local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnects (PCI) bus also known as Mezzanine bus.","Computer  typically includes a variety of computer readable media. Such media may be any available media that is accessible by computer , and it includes both volatile and non-volatile media, removable and non-removable media.","In , system memory  includes computer readable media in the form of volatile memory, such as random access memory (RAM) , and\/or non-volatile memory, such as read only memory (ROM) . A basic input\/output system (BIOS) , containing the basic routines that help to transfer information between elements within computer , such as during start-up, is stored in ROM . RAM  typically contains data and\/or program modules that are immediately accessible to and\/or presently being operated on by processor .","Computer  may further include other removable\/non-removable, volatile\/non-volatile computer storage media. For example,  illustrates a hard disk drive  for reading from and writing to a non-removable, non-volatile magnetic media (not shown and typically called a \u201chard drive\u201d), a magnetic disk drive  for reading from and writing to a removable, non-volatile magnetic disk  (e.g., a \u201cfloppy disk\u201d), and an optical disk drive  for reading from or writing to a removable, non-volatile optical disk  such as a CD-ROM\/R\/RW, DVD-ROM\/R\/RW\/+R\/RAM or other optical media. Hard disk drive , magnetic disk drive  and optical disk drive  are each connected to bus  by one or more interfaces .","The drives and associated computer-readable media provide nonvolatile storage of computer readable instructions, data structures, program modules, and other data for computer . Although the exemplary environment described herein employs a hard disk, a removable magnetic disk  and a removable optical disk , it should be appreciated by those skilled in the art that other types of computer readable media which can store data that is accessible by a computer, such as magnetic cassettes, flash memory cards, digital video disks, random access memories (RAMs), read only memories (ROM), and the like, may also be used in the exemplary operating environment.","A number of program modules may be stored on the hard disk, magnetic disk , optical disk , ROM , or RAM , including, e.g., an operating system , one or more application programs , other program modules , and program data .","The improved methods and systems described herein may be implemented within operating system , one or more application programs , other program modules , and\/or program data .","A user may provide commands and information into computer  through input devices such as keyboard  and pointing device  (such as a \u201cmouse\u201d). Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, serial port, scanner, camera, etc. These and other input devices are connected to the processing unit  through a user input interface  that is coupled to bus , but may be connected by other interface and bus structures, such as a parallel port, game port, or a universal serial bus (USB).","A monitor  or other type of display device is also connected to bus  via an interface, such as a video adapter . In addition to monitor , personal computers typically include other peripheral output devices (not shown), such as speakers and printers, which may be connected through output peripheral interface . Video adapter  typically includes a video graphics device.","Computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . Remote computer  may include many or all of the elements and features described herein relative to computer .","Logical connections shown in  are a local area network (LAN)  and a general wide area network (WAN) . Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets, and the Internet.","When used in a LAN networking environment, computer  is connected to LAN  via network interface or adapter . When used in a WAN networking environment, the computer typically includes a modem  or other means for establishing communications over WAN . Modem , which may be internal or external, may be connected to system bus  via the user input interface  or other appropriate mechanism.","Depicted in , is a specific implementation of a WAN via the Internet. Here, computer  employs modem  to establish communications with at least one remote computer  via the Internet .","In a networked environment, program modules depicted relative to computer , or portions thereof, may be stored in a remote memory storage device. Thus, e.g., as depicted in , remote application programs  may reside on a memory device of remote computer . It will be appreciated that the network connections shown and described are exemplary and other means of establishing a communications link between the computers may be used.","De-Interlacing Video","As mentioned, there is a need to de-interlace certain types of video image data so that it can be correctly displayed on a computer's monitor or other like display device. Previous releases of Microsoft\u00ae Windows\u00ae operating systems, for example, have relied on a \u201cgraphics overlay device\u201d to de-interlace the video as it is displayed on the computer's monitor. There are several drawbacks to this and other similar techniques including, for example: (1) There is only one \u201cgraphics overlay device\u201d in the computer, therefore only a single video stream can be displayed correctly; (2) The graphics overlay device has to be \u201ckeyed\u201d to computers desktop display, this means that if an end-user presses the print screen key he only captures the key color not the video image currently being displayed; (3) When the user drags a window to a new location there are occasional flashes of key color displayed where there should be video displayed: (4) If a user drags a semi transparent window over the top of the video play back window, key color is blended with the user's window not the video image.","Furthermore, the typical method of de-interlacing employed by contemporary graphics overlay device is of a very low quality\u2014it is at a level much lower than that of consumer device such as a television.","Those skilled in the art will recognize still other drawbacks to the current technology.","The novel methods and apparatuses presented herein enable graphics processors to de-interlace the video image without the need of a graphics overlay device. The techniques presented also allow graphics processors to use more advanced de-interlacing algorithms, an in particular ones that offer a significant improvement in the visual quality of the video image displayed when compared to traditional arrangements.","Exemplary Reinterpretation of Interlaced Fields","At the top of , an interleaved video surface  is shown as having is two interleaved fields, namely a top field  and a bottom field . Video surface  has a width , a height  and a stride . At the bottom of , a reinterpreted video surface \u2032 is shown as having an isolated top field \u2032 and bottom field \u2032. Here, video surface \u2032 has a height \u2032 that is \u00bd the height of the corresponding interlaced video surface  and also a stride  that is twice the stride of the corresponding interlaced video surface .","Interface Between Renderer and Graphics Device",{"@attributes":{"id":"p-0053","num":"0052"},"figref":["FIG. 3","FIG. 1","FIG. 3","FIG. 4"],"b":"300"},"Apparatus  includes transform logic , which, for example, may include instructions performed by a central processing unit, a graphics processing unit, and\/or a combination thereof. Transform logic  is configured to receive coded video data from at least one source . The coded video data from source  is coded in some manner (e.g., MPEG-2, etc.) and transform logic  is configured to decode the coded video data. By way of example, source  may include a magnetic disk and related disk drive, an optical disc and related disc drive, a magnetic tape and related tape drive, memory, a transmitted signal, or other like source configured to deliver or otherwise provide the coded video data to transform logic . In certain implementations, the source may include a network and remote source, such as represented by Internet  and a remote source .","The decoded video data output by transform logic  is provided to at least one renderer . Renderer  is configured to aid the transform logic  in decoding the video stream, aspect ratio correct the video image so that it matches the display device's  aspect ratio, blend any other auxiliary image data such as closed captions or DVD sub-picture images with the video image, and then at the appropriate time submit the video image data to the graphics interface logic  for display on the display device . The resulting rendered video data is then provided to graphic interface logic . Graphic interface logic  may include, for example, DirectDraw\u00ae, Direct3D\u00ae, and\/or other like logic. Graphic interface logic  is configured to provide an interface between renderer  and a graphics device .","The data output by graphic interface logic  is provided to a graphics device driver  using a device driver interface . Here, device driver interface  is depicted as having at least one application programming interface (API)  associated with it. Device driver interface  is configured to support the interface between renderer  and graphics device driver .","As illustrated in , in certain implementations device driver interface  and graphics device driver  may further be categorized as being either part of user mode logic  or kernel mode logic  with respect to the operating environment of graphics device .","In this example, the video data output by renderer  is eventually provided to a graphics processor unit (GPU) , which is configurable to perform de-interlacing logic , frame rate converter logic  (optional), and\/or other processing of the video data. In this example, as their names suggest, de-interlacing logic  is configured to de-interlace the video data and frame rate converter logic  is configured to modify the frame rate as needed\/desired.","The output from GPU  is provided to video memory . When video memory  is read, the resulting data is then provided to a digital to analog converter (DAC) , which outputs a corresponding analog video signal suitable for display by display device . In other configurations, the display device  may be configured to process the digital data from video memory  without the need for DAC . As illustrated, a graphics device  may include GPU , video memory  and DAC . In certain implementations, graphics device  takes the form of a video graphic card that can be configured within a PC or like device.","The configuration shown in  is but one example of a video data processing apparatus. Those skilled in the art will recognize that other possible configurations may also benefit from the methods and apparatuses of the present invention.","Exemplary Interface Operation","Attention is now drawn to the flow diagram in , which depicts a method  for interfacing renderer  and graphics device . One or more APIs  may be configured to perform or otherwise support method .","In act , renderer  provides a description of the video data to graphics device driver . Here, the video data has been selected to be processed and eventually presented through display device . In response, graphics device driver , in act , identifies applicable or otherwise available graphics processing capabilities of graphics device . The identified graphics capabilities are associated with GPU  or other like logic. In certain implementations, for example, one or more de-interlacing functions, rate converter functions and\/or other applicable functions may be identified in some manner.","In act , renderer  or other associated logic selects at least one of the identified graphics processing capabilities. In act , renderer  requests any applicable input requirements for the selected graphics processing capability\/capabilities. In response to the request, in act , graphics device driver  provides any applicable input requirements to renderer .","In act , renderer  opens a stream for the video data. In act , renderer  and graphics device  process, stream and eventually display the video. In act , renderer  closes the stream that was opened in act .","Exemplary Interface Implementation","Apparatus  is one example of a video processing system that can be arranged to provide de-interlacing, frame rate conversion and\/or other processing of video data. By way of further example, in accordance with certain exemplary implementations of the present invention, Microsoft\u00ae DirectX\u00ae VA can be extended or otherwise enhanced to support de-interlacing and also frame rate conversion associated with the processing of image data that is to be rendered and displayed. Additional related information can be found in a Microsoft\u00ae Windows\u00ae Platform Design Note entitled DirectX\u00ae VA: Video Acceleration API\/DDI, dated Jan. 23, 2001, and which is incorporated herein by reference.","This following describes APIs that advantageously extend Microsoft\u00ae DirectX\u00ae VA to support de-interlacing, frame rate conversion and\/or other processing capabilities for video content in graphics device drivers. This description provides driver developers and others skilled in the art with a clear understanding of the exemplary APIs and methods and apparatuses provided herein.","While the methods and apparatuses are described herein in terms of APIs that are applicable to the current evolution of Microsoft\u00ae Window\u00ae operating systems for PCs, it should be understood that the methods and apparatuses are also applicable to other operating systems and\/or other devices.","Video that is interlaced can, for example, be de-interlaced using the DirectX\u00ae Video Acceleration and Direct3D\u00ae 9 APIs for video. The graphics engine (e.g., CPU) and a hardware overlay, if present, should support a minimum of BOB and weave de-interlacing functionality.","The output of the de-interlacing or frame rate conversion process is a progressive frame. The de-interlaced and frame rate conversion interface described in this document is independent of all video presentation mechanisms. In the following examples, the de-interlaced output is provided in the target DirectDraw\u00ae surface. Doing so precludes the need for conventional hardware overlay solutions.","De-interlacing as used herein means to generate a progressive video frame at a given time t by reconstructing the missing lines from a field at time t. Frame rate conversion as used herein means generating a new progressive video frame at any arbitrary time t from a sequence of fields or frames.","A video sample can be, for example, a DirectDraw\u00ae surface that contains one or two video fields. Flags are associated with the sample to indicate the number of fields contained in the surface and the temporal order of the fields. The video can arrive in this surface through many possible routes, such as the output of a DX-VA video decoder process, the output of a video port, or the output of a host-based video decoder, etc.","Single-Field De-interlacing Example","Most graphics adapters that can perform a StretchBlt can also perform a simple BOB-style de-interlacing. This is essentially simply a matter of reinterpreting the memory layout of the video within a DirectDraw\u00ae surface. After the surface has been reinterpreted to isolate the two fields, for example, each line within a field is doubled (e.g., by interpolation to generate in-between lines). A single frame line offset may be required to prevent the de-interlaced video from displaying vertical jitter.","When a video surface contains two interlaced fields, as shown, e.g., in , the memory layout of the surface can be reinterpreted in order to isolate each field. This can be achieved, for example, by doubling the stride of the original surface and dividing the height of the surface in half, as illustrated. After the two fields are isolated in this way, they can easily be de-interlaced by stretching the individual fields to the correct frame height. Additional horizontal stretching or shrinking can also be applied to correct the aspect ratio for the pixels of the video image.","Graphics device driver  () can be configured to identify the graphics device's ability to do this to renderer  (e.g., a DirectX\u00ae Video Mixing Renderer (VMR), or the like) through a \u201cQuery Capabilities\u201d API (e.g., DeinterlaceQueryModeCaps) described in greater detail below.","The height of the individual field can be stretched vertically by line replication or through the preferred method of a filtered stretch, for example. If the line replication method is used, the resulting image may have a \u201cblocky\u201d appearance. If a filtered stretch is used, the resulting image may have a slight \u201cfuzzy\u201d appearance.","De-Interlace and Frame Rate Conversion API Descriptions","The exemplary APIs  described herein can be divided into two functional groups of methods. The first group includes a set of methods and apparatuses that can be used to determine the de-interlacing capabilities of the graphics device. The second group includes a set of methods and apparatuses that are used for creating and using a de-interlace stream object.","The APIs  are designed to be part of a device driver interface  supporting a graphic interface  and interfacing with a graphics device driver . In accordance with certain implementations of the present invention, the APIs  are not necessarily user-mode APIs that are accessible by applications. However, in other implementations they may be.","Determining Available De-interlace Modes:","\u201cDeinterlaceQueryAvailableModes\u201d","A DeinterlaceQueryAvailableModes method can be used to query the de-interlacing, frame rate conversion modes and\/or other functions\/modes (capabilities) that are available for a particular input video format. Here, for example, a globally unique identifier (GUID) or other suitable identifier is provided for each mode returned by the graphics device. The GUIDs can, for example, be returned in some particular order, such as, e.g., in order of descending (or ascending) quality. Thus, for example, the highest quality mode may occupy the first element of the GUID array that is returned. Thus, by way of example consider:",{"@attributes":{"id":"p-0085","num":"0084"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"HRESULT"]},{"entry":[{},"DeinterlaceQueryAvailableModes("]},{"entry":[{},"\u2003\u2003[in] LPDXVA_VideoDesc lpVideoDescription,"]},{"entry":[{},"\u2003\u2003[in out] LPDWORD lpdwNumModesSupported,"]},{"entry":[{},"\u2003\u2003[in out] LPGUID pGuidsDeinterlaceModes"]},{"entry":[{},"\u2003\u2003);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"In this example, the lpVideoDescription parameter is a \u201cdescription\u201d of the type of video to be de-interlaced, rate-converted and\/or otherwise processed. The lpVideoDescription parameter is passed to the graphics device driver so that it may tailor the graphics device to support the resolution and format of the source video. For example, the graphics device might be able to perform a three-field adaptive de-interlace of 480i content, but it might only be able to BOB 1080i content.","In accordance with certain implementations, the graphics device should be able to at least support BOB, for example, using the existing Blt'ter hardware.","Thus, consider the following example:",{"@attributes":{"id":"p-0088","num":"0087"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"typedef enum _DXVA_SampleFormat {"]},{"entry":[{},"\u2003\u2003DXVA_SamplePreviousOutputFrame = 1,"]},{"entry":[{},"\u2003\u2003DXVA_SampleProgressiveFrame = 2,"]},{"entry":[{},"\u2003\u2003DXVA_SampleFieldInterleavedEvenFirst = 3,"]},{"entry":[{},"\u2003\u2003DXVA_SampleFieldInterleavedOddFirst = 4,"]},{"entry":[{},"\u2003\u2003DXVA_SampleFieldSingleEven = 5,"]},{"entry":[{},"\u2003\u2003DXVA_SampleFieldSingleOdd = 6,"]},{"entry":[{},"} DXVA_SampleFormat;"]},{"entry":[{},"typedef struct _DXVA_Frequency {"]},{"entry":[{},"\u2003\u2003DWORD Numerator;"]},{"entry":[{},"\u2003\u2003DWORD Denominator;"]},{"entry":[{},"} DXVA_Frequency;"]},{"entry":[{},"typedef struct _DXVA_VideoDesc {"]},{"entry":[{},"\u2003\u2003DWORD Size;"]},{"entry":[{},"\u2003\u2003DWORD SampleWidth;"]},{"entry":[{},"\u2003\u2003DWORD SampleHeight;"]},{"entry":[{},"\u2003\u2003DXVA_SampleFormat;"]},{"entry":[{},"\u2003\u2003D3DFORMAT d3dFormat;"]},{"entry":[{},"\u2003\u2003DXVA_Frequency InputSampleFreq;"]},{"entry":[{},"\u2003\u2003DXVA_Frequency OutputFrameFreq;"]},{"entry":[{},"} DXVA_VideoDesc, * LPDXVA_VideoDesc;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The DXVA_VideoDesc data structure passes to the driver the intention of the de-interlacing or frame rate conversion to be performed, as further shown in the following examples.","To de-interlace 720\u00d7480i content that is sourced as two fields per sample at a frequency of 29.97 Hz, the DXVA_VideoDesc data structure may contain the following:",{"@attributes":{"id":"p-0091","num":"0090"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"SampleWidth = 720;"]},{"entry":[{},"SampleHeight = 480;"]},{"entry":[{},"SampleFormat = DXVA_SampleFieldInterleavedOddFirst;"]},{"entry":[{},"d3dFormat = D3DFMT_YUY2;"]},{"entry":[{},"InputSampleFreq.Numerator = 30000; \/\/ 29.97"]},{"entry":[{},"InputSampleFreq.Denominator = 1001;"]},{"entry":[{},"OutputFrameFreq.Numerator = 60000; \/\/ 59.94;"]},{"entry":[{},"OutputFrameFreq.Denominator = 1001;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"If the intention is to de-interlace and perform frame rate conversion, the OutputFrameFreq field can be as follows:",{"@attributes":{"id":"p-0093","num":"0092"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"OutputFrameFreq.Numerator = 85; \/\/ 85 Hz monitor Frequency"]},{"entry":[{},"OutputFrameFreq.Denominator = 1;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"If the intention is to just de-interlace a single field to a progressive frame for later MPEG encoding, the OutputFrameFreq field can be as follows:",{"@attributes":{"id":"p-0095","num":"0094"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"OutputFrameFreq.Numerator = 30000; \/\/ 29.97"]},{"entry":[{},"OutputFrameFreq.Denominator = 1001;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"To perform frame rate conversion on 480p content, for example, to match the monitor display frequency, the DXVA_VideoDesc structure may contain the following:",{"@attributes":{"id":"p-0097","num":"0096"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"SampleWidth = 720;"]},{"entry":[{},"SampleHeight = 480;"]},{"entry":[{},"SampleFormat = DXVA_SampleProgressiveFrame;"]},{"entry":[{},"d3dFormat = D3DFMT_YUY2;"]},{"entry":[{},"InputSampleFreq.Numerator = 60; \/\/ 60 Hz"]},{"entry":[{},"InputSampleFreq.Denominator = 1;"]},{"entry":[{},"OutputFrameFreq.Numerator = 85; \/\/ 85 Hz monitor Frequency"]},{"entry":[{},"OutputFrameFreq.Denominator = 1;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Note that de-interlacing and frame-rate-conversion may also be performed together using the above exemplary structures.","Exemplary De-Interlace Modes","A graphics device may, for example, report the following possible de-interlace modes:","BOB (line doubling) using the Blt'ter, for example. In certain implementations, this mode should always be available.","Simple Switching Adaptive. Here, for example, either a blend of two adjacent fields if low motion is detected for that field, or BOB if high motion is detected.","Advanced 3D Adaptive. Here, for example, the missing lines are generated through some adaptive process that is likely proprietary to the graphics device. The process may, for example, use several reference samples to aid in the generation of missing lines. The reference samples may be temporally in the past or future. For example, three-dimensional linear filtering would fall into this category.","Motion Vector Steered. Here, motion vectors of the different objects in the scene are used to align individual movements to the time axis before interpolation takes place.","Those skilled in the art will recognize other possible de-interlacing capabilities that can also be supported by the methods and apparatuses of the present invention.","Exemplary Frame Rate Conversion Modes","Certain exemplary graphics devices may report the following possible frame rate conversion modes:","Frame repeat\/drop. This may not be a recommended mode because it tends to consume extra memory bandwidth by copying the selected source sample into the destination surface.","Linear temporal interpolation. Here, a future and a previous reference field are Alpha blended together to produce a new frame.","Motion-vector steered. Motion vectors of the different objects in the scene are used to align individual movements to the time axis before interpolation takes place.","Those skilled in the art will recognize other possible frame rate conversion and\/or other processing capabilities that can also be supported by the methods and apparatuses of the present invention.","Determining Input Requirements:","\u201cDeinterlaceQueryModeCaps\u201d","After renderer  has determined the de-interlace modes available for a particular video format, it queries the graphics device driver  again to determine more detailed information related to the input requirements of a particular de-interlace mode and\/or any other applicable video processing that has been selected. Thus, consider the following example:",{"@attributes":{"id":"p-0115","num":"0114"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"HRESULT"]},{"entry":[{},"DeinterlaceQueryModeCaps("]},{"entry":[{},"\u2003\u2003[in] LPGUID pGuidDeinterlaceMode,"]},{"entry":[{},"\u2003\u2003[in] LPDXVA_VideoDesc lpVideoDescription,"]},{"entry":[{},"\u2003\u2003[out] DXVA_DeinterlaceCaps* lpDeinterlaceCaps"]},{"entry":[{},"\u2003\u2003);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"By way of further example, graphics device driver  can be configured to report the capabilities of GPU  for a selected mode in an output DXVA_DeinterlaceCaps structure for lpDeinterlaceCaps. For example, consider the following:",{"@attributes":{"id":"p-0117","num":"0116"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"typedef struct_DXVA_DeinterlaceCaps {"]},{"entry":[{},"\u2003\u2003DWORD Size;"]},{"entry":[{},"\u2003\u2003DWORD NumPreviousOutputFrames;"]},{"entry":[{},"\u2003\u2003DWORD InputPool;"]},{"entry":[{},"\u2003\u2003DWORD NumForwardRefSamples;"]},{"entry":[{},"\u2003\u2003DWORD NumBackwardRefSamples;"]},{"entry":[{},"\u2003\u2003D3DFORMAT OutputFrameFormat;"]},{"entry":[{},"\u2003\u2003DWORD VideoProcessingCaps;"]},{"entry":[{},"\u2003\u2003DWORD DeinterlaceTechnology;"]},{"entry":[{},"} DXVA_DeinterlaceCaps;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Here, the NurPreviousOutputFrames field indicates the required number of frames that have previously been output by the de-interlace algorithm. This parameter can be used by recursive de-interlace algorithms.","The InputPool field indicates the memory pool from which the interlaced source surfaces should be allocated. See, for example, the Direct3D\u00ae and DirectDraw\u00ae documentation in the above referenced text for a description of valid memory pool locations.","The NumForwardRefSamples field indicates the required number of additional reference samples that are temporally in the future for this de-interlace mode\u2014none for BOB and line blending, and possibly several for adaptive de-interlacing and frame rate conversion.","The NumBackwardRefSamples field indicates the required number of additional reference samples that are temporally in the past for this de-interlace mode\u2014none for BOB, one for line blending, and possibly several for adaptive de-interlacing and frame rate conversion.","The OutputFrameFormat field indicates the Direct3D surface format of the output frames. Usually a de-interlace algorithm would likely output frames in a surface format that matches the input sample format. This field ensures that renderer  will be able to supply the correct output frame surfaces to the de-interlacing hardware\/logic. Note that if the DXVA_Deinterlace_YUV2RGB flag is returned in the VideoProcessingCaps field, renderer  may assume that the valid output formats are specified by this field as well as an RGB32 format.","The VideoProcessingCaps field identifies other operations that can be performed concurrently with the requested de-interlace. The following flags identify some exemplary operations:","DXVA_VideoProcess_SubRects. The de-interlace hardware\/logic can operate on a sub-rectangle region of the video image. This is useful, for example, if the video image needs to be cropped before being processed further as the size of the output frames is reduced.","DXVA_VideoProcess_YUV2RGB. The de-interlace hardware\/logic can convert the video from the YUV color space to the RGB color space. In certain implementations, the RGB format used will have at least 8 bits of precision for each color component. If this is possible, a buffer copy within renderer  can be avoided.","Note that, in certain implementations, the graphics device driver  should be able to support this operation for the BOB de-interlace mode. Color space conversion is particularly useful within renderer  if it can be combined with any (and ideally, all) of the following flags:",{"@attributes":{"id":"p-0127","num":"0126"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"DXVA_VideoProcess_StretchX"]},{"entry":[{},"DXVA_VideoProcess_StretchY"]},{"entry":[{},"DXVA_VideoProcess_AlphaBlend"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Note that in this exemplary implementation there is not a requirement to convert from the RGB color space to the YUV color space.","DXVA_VideoProcess_StretchX. If the de-interlacer is able to stretch or shrink horizontally, aspect ratio correction can be performed at the same time as the video is being de-interlaced. This flag can be supported for the BOB de-interlace mode.","DXVA_VideoProcess_StretchY. Sometimes aspect ratio adjustment is combined with a general picture re-sizing operation to scale the video image within an application defined composition space. This is probably quite rare and will not be an essential feature n certain implementations. This flag can be supported for the BOB de-interlace mode. Typically, it is better if the scaling needed for resizing the video to fit into the application window can be done at the same time as the scaling needed for de-interlacing. For example, doing so avoids cumulative artifacts.","DXVA_VideoProcess_AlphaBlend. Again, this can avoid a buffer copy with renderer . Typically, it is very rare that applications alter the constant alpha value associated with the video stream, so in certain implementations this may be considered a \u201clow\u201d priority feature for system.","In certain implementations, other capabilities may also be identified. For example, other color\/gamma modifying information may be identified. Rotation, sheering, and\/or other similar processes may also be identified using the above techniques.","The DeinterlaceTechnology field identifies the underlying technology used to implement this particular de-interlacing algorithm. The following flags identify some exemplary operations; the flags may be combined as necessary to most closely match the algorithm's implementation:","DXVA_DeinterlaceTech_Unknown, indicates that the algorithm is unknown or proprietary to the hardware manufacturer.","DXVA_DeinterlaceTech_BOBLineReplicate, indicates that the algorithm creates the missing lines by repeating the line either above or below it\u2014this method will look very jaggy and therefore may not be adequate for some uses.","DXVA_DeinterlaceTech_BOBVerticalStretch, wherein the algorithm creates the missing lines by vertically stretching each video field by a factor of two, for example, by averaging two lines or using a [\u22121, 9, 9, \u22121]\/16 filter across four lines. Slight vertical adjustments may be made to ensure that the resulting image does not \u201cbob\u201d up and down.","DXVA_DeinterlaceTech_MedianFiltering, wherein the pixels in the missing line are recreated by a median filtering operation.","DXVA_DeinterlaceTech_EdgeFiltering, the pixels in the missing line are recreated by, an edge filter or the like. In this process, for example, spatial directional filters may be applied to determine the orientation of edges in the picture content, and missing pixels created by filtering along (rather than across) the detected edges.","DXVA_DeinterlaceTech_FieldAdaptive, the pixels in the missing line may be recreated, for example, by switching on a field by field basis between using either spatial or temporal interpolation depending on the amount of motion.","DXVA_DeinterlaceTech_PixelAdaptive, the pixels in the missing line may be recreated, for example, by switching on a pixel by pixel basis between using either spatial or temporal interpolation depending on the amount of motion.","DXVA_DeinterlaceTech_MotionVectorSteered, Motion Vector Steering identifies objects within a sequence of video fields. The missing pixels are recreated after first aligning the movement axes of the individual objects in the scene to make them parallel with the time axis.","Creating a Stream:","After a suitable de-interlace mode GUID has been found, a DeinterlaceStream object can be created. Creation of a DeinterlaceStream object allows graphics device driver  to reserve any hardware resources (e.g., associated with GPU  or the like) that are required to perform the requested de-interlace or other selected operations.","Creating an Open Stream: \u201cDeinterlaceOpenStream\u201d","The DeinterlaceOpenStream method creates a DeinterlaceStream object.","For example consider the following:",{"@attributes":{"id":"p-0146","num":"0145"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"HRESULT"]},{"entry":[{},"DeinterlaceOpenStream("]},{"entry":[{},"\u2003\u2003[in] LPGUID pGuidDeinterlaceMode,"]},{"entry":[{},"\u2003\u2003[in] LPDXVA_VideoDesc lpVideoDescription,"]},{"entry":[{},"\u2003\u2003[out] HDXVA_DeinterlaceStream* lphDiStrm"]},{"entry":[{},"\u2003\u2003);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Here, the HDXVA_DeinterlaceStream output parameter is a handle to the DeinterlaceStream object and can be used to identify the stream in all future calls.","Thus, consider the following example:",{"@attributes":{"id":"p-0148","num":"0147"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"typedef struct _DXVA_VideoSample {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"REFERENCE_TIME rtStart;"]},{"entry":[{},"REFERENCE_TIME rtEnd;"]},{"entry":[{},"DXVA_SampleFormat SampleFormat;"]},{"entry":[{},"LPVOID lpDDSSrcSurface;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"} DXVA_VideoSample, *LPDXVA_VideoSample;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Here, if the video sample contains two interleaved fields:",{"@attributes":{"id":"p-0150","num":"0149"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"DXVA_SampleFieldInterleavedEvenFirst, or"]},{"entry":[{},"DXVA_SampleFieldInterleavedOddFirst,"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"then the start time of the second field may be calculated as follows:\n\nStartSecondField=(Start+End)\/2;\n","Note in the exemplary case above that the end time of the first field is the start time of the second field.","The DeinterlaceBlt method performs the de-interlace or frame rate conversion operation by writing the output to the destination surface. Hence, consider this:",{"@attributes":{"id":"p-0154","num":"0153"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"HRESULT"]},{"entry":[{},"DeinterlaceBlt("]},{"entry":[{},"[in] HDXVA_DeinterlaceStream hDiStrm"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"[in] REFERENCE_TIME rtTargetFrame,"]},{"entry":[{},"[in] LPRECT lprcDstRect,"]},{"entry":[{},"[in] LPDDSURFACE lpDDSDstSurface,"]},{"entry":[{},"[in] LPRECT lprcSrcRect,"]},{"entry":[{},"[in] LPDXVA_VideoSample lpDDSrcSurfaces,"]},{"entry":[{},"[in] DWORD dwNumSurfaces,"]},{"entry":[{},"[in] FLOAT fAlpha \/*0.0F transparent, 1.0F opaque *\/"]},{"entry":[{},");"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"In the DeinterlaceBlt method, the rtTargetFrame parameter identifies the location of the output frame within the sequence of input frames. If only de-interlacing is being performed, then the target time will coincide with one of the rtStart times of a reference sample. If a frame rate conversion is being requested, the rtTargetFrame time may be different from any of the rtStart times of the reference samples.","Here, the source and destination rectangles are required for either sub-rectangle de-interlacing or stretching. Support for stretching is optional (and can be reported by Caps flags, for example). Support for sub-rectangles may not be needed in certain implementations.","The destination surface can be a Direct3D\u00ae off screen plain, Direct3D\u00ae render target, a Direct3D\u00ae texture, or the like, that is also a render target. In accordance with certain exemplary implementations, the destination surface will be allocated in local video memory.","The pixel format of the destination surface will be the one indicated in the DXVA_DeinterlaceCaps structure unless a YUV-to-RGB color space conversion is being performed as part of the de-interlace procedure. In this exemplary case, the destination surface format can be an RGB format with at least 8 bits of precision for each color component.","Closing a Stream: \u201cDeinterlaceCloseStream\u201d","The DeinterlaceCloseStream method closes the DeinterlaceStream object and instructs the device driver to release any hardware resource associated with this stream. For example, consider the following:",{"@attributes":{"id":"p-0161","num":"0160"},"tables":{"@attributes":{"id":"TABLE-US-00014","num":"00014"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"HRESULT"]},{"entry":[{},"DeinterlaceCloseStream("]},{"entry":[{},"\u2003\u2003HDXVA_DeinterlaceStream hDiStrm"]},{"entry":[{},"\u2003\u2003);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Device Driver Interface (DDI) Mapping for the De-Interlace Interface","For compatibility with the DDT infrastructure for Windows\u00ae operating systems, the proposed APIs described earlier in this description and others like them can be \u201cmapped\u201d to the existing DDI for DirectDraw\u00ae and DirectX\u00ae VA. This section describes an exemplary de-interlace interface mapping to the existing DirectDraw\u00ae and DX-VA DDI.","The DX-VA DDI is itself split into two functional groups: the \u201cDX-VA container\u201d and the \u201cDX-VA device.\u201d","The purpose of the DX-VA container DDI group is to determine the number and capabilities of the various DX-VA devices contained by the display hardware. Therefore, a DX-VA driver need only have a single container, while still supporting multiple DX-VA devices.","It is not possible to map the de-interlace device \u201cquery\u201d calls on to any of the DDI entry points in the DX-VA container group because, unlike the rest of DX-VA, the container methods use typed parameters. However, the DX-VA device DDI group does not use typed parameters, so it is possible to map the proposed de-interlace interface to the methods in that group. The rest of this section describes how the new interfaces described herein can be mapped to the DX-VA device DDI.","The De-Interlace Container Device","The DX-VA device methods do not use typed parameters, so the methods can be reused for many different purposes. However, the DX-VA device methods can only be used in the context of a DX-VA device, so it is necessary to first define and create a special \u201cde-interlace container device\u201d. As used herein, the DX-VA de-interlace container device is a software construct only, and it does not represent any functional hardware contained on a device. The de-interlacing sample device driver code later in this specification shows how the container device could be implemented by a driver.","Calling the DDI from a User-Mode Component","The sequence of steps to use the DDI  from a user-mode component such as renderer  is as follows:\n\n",{"@attributes":{"id":"p-0171","num":"0172"},"tables":{"@attributes":{"id":"TABLE-US-00015","num":"00015"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003\u2003DEFINE_GUID(DXVA_DeinterlaceContainerDevice,"]},{"entry":[{},"0x0e85cb93,0x3046,0x4ff0,0xae,0xcc,0xd5,0x8c,0xb5,0xf0,"]},{"entry":[{},"0x35,0xfc);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"ul":{"@attributes":{"id":"ul0003","list-style":"none"},"li":{"@attributes":{"id":"ul0003-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0004","list-style":"none"},"li":["Call RenderMocomp with a dwFunction parameter that identifies a DeinterlaceQueryAvailableModes operation. The lpInputData parameter can be used to pass the input parameters to graphics device driver , which returns its output through the lpOutputData parameter.","Call RenderMocomp with a dwFunction parameter that identifies a DeinterlaceQueryModeCaps operation. Again, the lpInputData parameter can be used to pass the input parameters to graphics device driver , which returns its output through the lpOutputData parameter.","After renderer  has chosen the desired de-interlace device, it calls CreateMocomp to create an instance of this de-interlacing device.","Renderer  then calls the de-interlacing device's RenderMocomp with a function parameter of DXVA_DeinterlaceBltFnCode for each de-interlacing operation.","When renderer  no longer needs to perform any more de-interlace operations, it calls DestroyMocomp.","Graphics device driver  releases any resources used by the de-interlacing device."]}}}},"DeinterlaceQueryAvailableModes","This exemplary method maps directly to a call to the RenderMoComp method of the de-interlace container device. The DD_RENDERMOCOMPDATA structure can be completed as follows:",{"@attributes":{"id":"p-0174","num":"0181"},"tables":{"@attributes":{"id":"TABLE-US-00016","num":"00016"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"dwNumBuffers is zero."},{"entry":"lpBufferInfo is NULL."},{"entry":"dwFunction is defined as"},{"entry":"DXVA_DeinterlaceQueryAvailableModesFnCode."},{"entry":"lpInputData will point to a completed DXVA_VideoDesc structure."},{"entry":"lpOutputData will point to the following structure:"},{"entry":"#define MAX_DEINTERLACE_DEVICE_GUIDS 32"},{"entry":"typedef struct _DXVA_DeinterlaceQueryAvailableModes {"},{"entry":"\u2003\u2003DWORD Size;"},{"entry":"\u2003\u2003DWORD NumGuids;"},{"entry":"\u2003\u2003GUID Guids[MAX_DEINTERLACE_DEVICE_GUIDS];"},{"entry":"} DXVA_DeinterlaceQueryAvailableModes;"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Note that the DX-VA container device's RenderMoComp method can be called without BeginMoCompFrame or EndMoCompFrame being called first.","DeinterlaceQueryModeCaps","This exemplary method maps directly to a call to the RenderMoComp method of the de-interlace container device. The DD_RENDERMOCOMPDATA structure can be completed as follows:",{"@attributes":{"id":"p-0178","num":"0185"},"tables":{"@attributes":{"id":"TABLE-US-00017","num":"00017"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"dwNumBuffers is zero."},{"entry":"lpBufferInfo is NULL."},{"entry":"dwFunction is defined as DXVA_DeinterlaceQueryModeCapsFnCode."},{"entry":"lpInputData will point to the following"},{"entry":"DXVA_DeinterlaceQueryModeCaps structure."},{"entry":"typedef struct _DXVA_DeinterlaceQueryModeCaps {"},{"entry":"\u2003\u2003DWORD Size;"},{"entry":"\u2003\u2003GUID Guid;"},{"entry":"\u2003\u2003DXVA_VideoDesc VideoDesc;"},{"entry":"} DXVA_DeinterlaceQueryModeCaps;"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Here, lpOutputData will point to a DXVA_DeintertaceCaps structure. Note that the DX-VA container device's RenderMoComp method can be called without BeginMoCompFrame or EndMoCompFrame being called first.","DeinterlaceOpenStream","This exemplary method maps directly to a CreateMoComp method of the DD_MOTIONCOMPCALLBACKS structure, where the GUID is the de-interlace type requested, pUncompData points to a structure that contains no data (all zeros), and pData points to a DXVA_VideoDesc structure.","If a driver supports accelerated decoding of compressed video, renderer  may call the driver to create two DX-VA devices, one to perform the actual video decoding work as defined by the DirectX\u00ae VA Video Decoding specification, and the other to be used for de-interlacing.","The exemplary sample code below illustrates how the driver may map the CreateMoComp DDI call into calls to DeinterlaceOpenStream. The sample code shows only how the CreateMocComp function is used for de-interlacing. If the driver supports other DX-VA functions such as decoding MPEG-2 video streams, the sample code below can be extended to include processing of additional DX-VA GUIDs.",{"@attributes":{"id":"p-0184","num":"0191"},"tables":{"@attributes":{"id":"TABLE-US-00018","num":"00018"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"DWORD APIENTRY CreateMoComp( PDD_CREATEMOCOMPDATA"},{"entry":"lpData )"},{"entry":"{"},{"entry":"\/\/ DXVA_DeinterlaceStream is data structure defined by the driver"},{"entry":"\/\/ to store any data required for the driver"},{"entry":"\/\/ to de-interlace this particular video data"},{"entry":"\/\/"},{"entry":"\u2003LPDXVA_DeinterlaceStream pDXVA_State = NULL;"},{"entry":"\u2003\/\/ Make sure it's a guid we like."},{"entry":"\u2003if (FAILED(ValidDXVAGuid(lpData->lpGuid))) {"},{"entry":"\u2003\u2003lpData->ddRVal = E_INVALIDARG;"},{"entry":"\u2003\u2003return DDHAL_DRIVER_HANDLED;"},{"entry":"\u2003}"},{"entry":"\u2003\/\/ Look for the deinterlace container device GUID"},{"entry":"\u2003if (*lpData->lpGuid == DXVA_DeinterlaceContainerDevice) {"},{"entry":"\u2003\u2003DXVA_DeinterlaceContainerDeviceClass* lpDev ="},{"entry":"\u2003\u2003\u2003new DXVA_DeinterlaceContainerDeviceClass(*lpData->lpGuid,"},{"entry":"\u2003DXVA_DeviceContainer);"},{"entry":"\u2003\u2003if (lpDev) {"},{"entry":"\u2003\u2003\u2003lpData->ddRVal = DD_OK;"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003else {"},{"entry":"\u2003\u2003\u2003lpData->ddRVal = E_OUTOFMEMORY;"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003lpData->lpMoComp->lpDriverReserved1 ="},{"entry":"\u2003(LPVOID)(DXVA_DeviceBaseClass*)lpDev;"},{"entry":"\u2003\u2003return DDHAL_DRIVER_HANDLED;"},{"entry":"\u2003}"},{"entry":"\u2003\/\/ Look for the deinterlace BOB device GUID"},{"entry":"\u2003if (*lpData->lpGuid == DXVA_DeinterlaceBobDevice) {"},{"entry":"\u2003\u2003DXVA_DeinterlaceBobDeviceClass* lpDev ="},{"entry":"\u2003\u2003\u2003new DXVA_DeinterlaceBobDeviceClass(*lpData->lpGuid,"},{"entry":"\u2003DXVA_DeviceDeinterlacer);"},{"entry":"\u2003\u2003if (lpDev) {"},{"entry":"\u2003\u2003\u2003LPDXVA_VideoDesc lpVideoDescription ="},{"entry":"\u2003\u2003\u2003\u2003(LPDXVA_VideoDesc)lpData->lpData;"},{"entry":"\u2003\u2003\u2003lpData->ddRVal = lpDev->DeinterlaceOpenStream("},{"entry":"\u2003lpVideoDescription);"},{"entry":"\u2003\u2003\u2003if (lpData->ddRVal != DD_OK) {"},{"entry":"\u2003\u2003\u2003\u2003delete lpDev;"},{"entry":"\u2003\u2003\u2003\u2003lpDev = NULL;"},{"entry":"\u2003\u2003\u2003}"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003else lpData->ddRVal = E_OUTOFMEMORY;"},{"entry":"\u2003\u2003lpData->lpMoComp->lpDriverReserved1 ="},{"entry":"\u2003(LPVOID)(DXVA_DeviceBaseClass*)lpDev;"},{"entry":"\u2003\u2003return DDHAL_DRIVER_HANDLED;"},{"entry":"\u2003}"},{"entry":"\u2003lpData->ddRVal = DDERR_CURRENTLYNOTAVAIL;"},{"entry":"\u2003return DDHAL_DRIVER_HANDLED;"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"In addition to the CreateMoComp DDI function the driver can also implement the GetMoCompGuids method of the DD_MOTIONCOMPCALLBACKS structure. The following exemplary sample code shows one possible way of implementing this function in the driver.",{"@attributes":{"id":"p-0186","num":"0193"},"tables":{"@attributes":{"id":"TABLE-US-00019","num":"00019"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ This is the list of all DV-VA device GUIDs supported by"]},{"entry":[{},"\/\/ the driver - this list will include decoder, de-interlacing and"]},{"entry":[{},"\/\/ the de-interlacing container device. There is no significance to"]},{"entry":[{},"\/\/ the order of the GUIDs on the list."]},{"entry":[{},"\/\/"]},{"entry":[{},"DWORD g_dwDXVANumSupportedGUIDs = 4;"]},{"entry":[{},"const GUID* g_DXVASupportedGUIDs[4] = {"]},{"entry":[{},"\u2003&DXVA_DeinterlaceContainerDevice,"]},{"entry":[{},"\u2003&DXVA_Deinterlace3Samples,"]},{"entry":[{},"\u2003&DXVA_Deinterlace2Samples,"]},{"entry":[{},"\u2003&DXVA_DeinterlaceBobDevice"]},{"entry":[{},"};"]},{"entry":[{},"\/\/"]},{"entry":[{},"\/\/ This is the list of de-interlacing devices, in order of"]},{"entry":[{},"\/\/ visual quality."]},{"entry":[{},"\/\/"]},{"entry":[{},"DWORD g_dwDXVADeinterlaceNumSupportedGUIDs = 3;"]},{"entry":[{},"const GUID* g_DXVADe-interlacedSupportedGUIDs[3] = {"]},{"entry":[{},"\/\/ replace this GUID with the own implementation"]},{"entry":[{},"\u2003&DXVA_Deinterlace3Samples,"]},{"entry":[{},"\/\/ replace this GUID with the own implementation"]},{"entry":[{},"\u2003&DXVA_Deinterlace2Samples,"]},{"entry":[{},"\/\/ everyone has to support BOB"]},{"entry":[{},"\u2003&DXVA_DeinterlaceBobDevice"]},{"entry":[{},"};"]},{"entry":[{},"DWORD APIENTRY"]},{"entry":[{},"GetMoCompGuids("]},{"entry":[{},"\u2003PDD_GETMOCOMPGUIDSDATA lpData"]},{"entry":[{},"\u2003)"]},{"entry":[{},"{"]},{"entry":[{},"\u2003DWORD dwNumToCopy;"]},{"entry":[{},"\u2003\/\/ Check to see if this is a GUID request or a count request"]},{"entry":[{},"\u2003if (lpData->lpGuids) {"]},{"entry":[{},"\u2003\u2003dwNumToCopy = min(g_dwDXVANumSupportedGUIDs,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003lpData->dwNumGuids);"]},{"entry":[{},"\u2003\u2003for (DWORD i = 0; i < dwNumToCopy; i++) {"]},{"entry":[{},"\u2003\u2003\u2003lpData->lpGuids[i] = *g_DXVASupportedGUIDs[i];"]},{"entry":[{},"\u2003\u2003}"]},{"entry":[{},"\u2003}"]},{"entry":[{},"\u2003else {"]},{"entry":[{},"\u2003\u2003dwNumToCopy = g_dwDXVANumSupportedGUIDs;"]},{"entry":[{},"\u2003}"]},{"entry":[{},"\u2003lpData->dwNumGuids = dwNumToCopy;"]},{"entry":[{},"\u2003lpData->ddRVal = DD_OK;"]},{"entry":[{},"\u2003return DDHAL_DRIVER_HANDLED;"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"DeinterlaceBlt","This exemplary method maps directly to a RenderMoComp method of the DD_MOTIONCOMPCALLBACKS structure, where:",{"@attributes":{"id":"p-0189","num":"0196"},"tables":{"@attributes":{"id":"TABLE-US-00020","num":"00020"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"dwNumBuffers is 1 + the number of source surfaces"},{"entry":"lpBufferInfo points to an array of surfaces. The first surface is the"},{"entry":"destination surface, and the remaining surfaces are the source surfaces."},{"entry":"dwFunction is defined as DXVA_DeinterlaceBltFnCode."},{"entry":"lpInputData will point to the following structure:"},{"entry":"#define MAX_DEINTERLACE_INPUT_SURFACES 32"},{"entry":"typedef struct _DXVA_DeinterlaceBlt"},{"entry":"{"},{"entry":"\u2003\u2003DWORD Size;"},{"entry":"\u2003\u2003REFERENCE_TIME rtTargetFrame;"},{"entry":"\u2003\u2003RECT DstRect;"},{"entry":"\u2003\u2003RECT SrcRect;"},{"entry":"\u2003\u2003DWORD NumSourceSurfaces;"},{"entry":"\u2003\u2003FLOAT fAlpha;"},{"entry":"\u2003\u2003DXVA_VideoSample"},{"entry":"Source[MAX_DEINTERLACE_INPUT_SURFACES];"},{"entry":"} DXVA_DeinterlaceBlt;"},{"entry":"lpOutputData is NULL."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Note that for the DX-VA device used for de-interlace, RenderMoComp will be called without calling BeginMoCompFrame or EndMoCompFrame.","The exemplary sample code below shows how the driver may map the RenderMoComp DDI call into calls to DeinterlaceBlt. The sample code only shows how the RenderMoComp function is used for de-interlacing. If the driver supports other DX-VA functions such as decoding MPEG-2 video streams, the sample code can be extended to include processing of additional DX-VA GUIDs.",{"@attributes":{"id":"p-0192","num":"0199"},"tables":{"@attributes":{"id":"TABLE-US-00021","num":"00021"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"DWORD APIENTRY"]},{"entry":[{},"RenderMoComp("]},{"entry":[{},"\u2003PDD_RENDERMOCOMPDATA lpData"]},{"entry":[{},"\u2003)"]},{"entry":[{},"{"]},{"entry":[{},"\u2003LPDXVA_DeinterlaceStream pDXVAState ="]},{"entry":[{},"\u2003\u2003(LPDXVA_DeinterlaceStream)lpData->lpMoComp-"]},{"entry":[{},">lpDriverReserved1;"]},{"entry":[{},"\u2003DXVA_DeinterlaceBlt* lpBlt ="]},{"entry":[{},"\u2003\u2003\u2003\u2003(DXVA_DeinterlaceBlt*)lpData->lpInputData;"]},{"entry":[{},"\u2003LPDDMOCOMPBUFFERINFO lpBuffInfo = lpData->BufferInfo;"]},{"entry":[{},"\u2003for (DWORD i = 0; i < lpBlt->NumSourceSurfaces; i++) {"]},{"entry":[{},"\u2003\u2003lpBlt->Source[i].lpDDSSrcSurface ="]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003lpBuffInfo[l + i].lpCompSurface;"]},{"entry":[{},"\u2003}"]},{"entry":[{},"\u2003lpData->ddRVal = DeinterlaceBlt(pDXVAState,"]},{"entry":[{},"\u2003\u2003\u2003lpBlt->rtTarget,"]},{"entry":[{},"\u2003\u2003\u2003&lpBlt->DstRect,"]},{"entry":[{},"\u2003\u2003\u2003lpBuffInfo[0].lpCompSurface,"]},{"entry":[{},"\u2003\u2003\u2003&lpBlt->SrcRect,"]},{"entry":[{},"\u2003\u2003\u2003&lpBlt->Source,"]},{"entry":[{},"\u2003\u2003\u2003lpBlt->NumSourceSurfaces,"]},{"entry":[{},"\u2003\u2003\u2003lpBlt->Alpha);"]},{"entry":[{},"\u2003return DDHAL_DRIVER_HANDLED;"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"DeinterlaceCloseStream","This exemplary method maps directly to a DestroyMoComp method of the DD_MOTIONCOMPCALLBACKS structure.","The following exemplary sample code shows how the driver may map the DestroyMoComp DDI call into calls to DeinterlaceCloseStream. The sample code shows only how the DestroyMoComp function is used for de-interlacing. If the driver supports other DX-VA functions such as decoding MPEG-2 video streams, the sample code below can be extended to include processing of additional DX-VA GUIDs.",{"@attributes":{"id":"p-0196","num":"0203"},"tables":{"@attributes":{"id":"TABLE-US-00022","num":"00022"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"DWORD APIENTRY"]},{"entry":[{},"DestroyMoComp("]},{"entry":[{},"\u2003PDD_DESTROYMOCOMPDATA lpData"]},{"entry":[{},"\u2003)"]},{"entry":[{},"{"]},{"entry":[{},"\u2003LPDXVA_DeinterlaceStream pDXVAState ="]},{"entry":[{},"\u2003\u2003(LPDXVA_DeinterlaceStream)lpData->lpMoComp-"]},{"entry":[{},">lpDriverReserved1;"]},{"entry":[{},"\u2003lpData->ddRVal = DeinterlaceCloseStream(pDXVAState);"]},{"entry":[{},"\u2003lpData->lpMoComp->lpDriverReserved1 = NULL;"]},{"entry":[{},"\u2003return DDHAL_DRIVER_HANDLED;"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"In accordance with the various exemplary implementations presented herein, the present invention addresses the problem of de-interlacing of video image data so that it displays correctly on a computer monitor or other like display device. As noted, conventional de-interlacing techniques typically require the use of a \u201cgraphics overlay device\u201d by the graphics processor which has several restrictions and limitations. With the various methods and apparatuses described herein, for example, a graphics processor can be instructed as to how to de-interlace a video field to produce a single video frame that can be displayed on a computer monitor so that interlaced video is displayed correctly in real time. By way of further example, various APIs have also been shown, some of which specifically extend Microsoft\u00ae DirectX\u00ae VA to support de-interlacing and\/or frame rate conversion for video content in graphic device drivers.","Although the description above uses language that is specific to structural features and\/or methodological acts, it is to be understood that the invention defined in the appended claims is not limited to the specific features or acts described. Rather, the specific features and acts are disclosed as exemplary forms of implementing the invention."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["A more complete understanding of the various methods and apparatuses of the present invention may be had by reference to the following detailed description when taken in conjunction with the accompanying drawings wherein:",{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
