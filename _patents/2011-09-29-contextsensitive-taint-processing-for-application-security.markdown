---
title: Context-sensitive taint processing for application security
abstract: In one implementation, a tag is associated with a tainted value of an application and an output context of the application that is associated with output from the application that includes the tainted value is determined. A taint processing is a applied to the tainted value in response to the output of the tainted value, the taint processing is compatible with the output context.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09053319&OS=09053319&RS=09053319
owner: Hewlett-Packard Development Company, L.P.
number: 09053319
owner_city: Houston
owner_country: US
publication_date: 20110929
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","DETAILED DESCRIPTION"],"p":["Tainted values (e.g., data values received from untrusted sources) within applications can result in corrupted data values within and\/or output from the application. Such corrupted data value can cause undesired operations within the application. As an example, a tainted value received as input to an application from an untrusted source can include an attack against a potential security vulnerability (e.g., code or values) that causes the application to malfunction. As another example, tainted values within an application can be provided as output to clients of the application and cause those clients to malfunction or operate in an undesirable manner.","To address such security vulnerabilities, some applications apply various statically-specified taint processings to tainted values to remove or mitigate security vulnerabilities in those tainted values. A taint processing is a routine or method that is applied to a tainted value to prevent that tainted value from posing a security vulnerability in the application. For example, an application can include code or instructions to apply a particular taint processing to a tainted value at a portion of the application. Accordingly, that particular taint processing is applied to the tainted value each time that portion of the application is executed or processed.","Although statically-specified taint processings can address some security vulnerabilities in tainted values, such application security methodologies can fail to sufficiently mitigate security vulnerabilities in many applications. For example, such methodologies often rely on developers to specify an effective taint processing (e.g., a taint processing that effectively mitigates a security vulnerability in a tainted value) during development of the application. Developers can make mistakes such as specifying an ineffective taint processing for a particular tainted value or portion of the application which result in security vulnerabilities that persist through such statically-specified taint processings.","Additionally, such methodologies are often ineffective due to dynamic execution paths within applications. For example, because the execution path of an application can be dynamic (e.g., respond differently to different input), a developer may be unable to select an effective taint processing for a tainted value (or portion of the application including the tainted value) during development. For example, the runtime context (or state) of the application associated with that tainted value can be unknowable during development. As another example, the number of potential runtime contexts of the application associated with that tainted value can be prohibitively large to include code or instructions in the application to handle each context.","Implementations discussed herein apply context-sensitive taint processing to tainted values to implement application security. For example, implementations discussed herein determine the context of an application during runtime and select a taint processing to apply to a tainted value within the application based on that context. Accordingly, developers need not determine an effective taint processing during development. Rather, a taint processing that is compatible with the context of the application can be selected and applied to a tainted value when that tainted value is used by the application. Said differently, implementations discussed herein perform context-sensitive application security.","As a specific example, an application security system (or context-sensitive application security system) determines an output context of an application associated with output (e.g., storing the tainted value at a data store or providing the tainted value to a user or client of the application) of a tainted value from the application. The application security system then selects a taint processing that is compatible with the output context (e.g., effectively mitigates or removes a security vulnerability of a tainted value in that output context), and applies the taint processing to mitigate a security vulnerability from the tainted value for that output context. The tainted value is then provided (or delivered) to a client of the application.","As used herein, the term \u201cmodule\u201d refers to a combination of hardware (e.g., a processor such as an integrated circuit or other circuitry) and software (e.g., machine- or processor-executable instructions, commands, or code such as firmware, programming, or object code). A combination of hardware and software includes hardware only (i.e., a hardware element with no software elements), software hosted at hardware (e.g., software that is stored at a memory and executed or interpreted at a processor), or at hardware and software hosted at hardware.","Additionally, as used herein, the term \u201capplication\u201d refers to a module that receives input, performs one or more operations with respect to that input, and provides an output. For example, an application can be a web application hosted at a web server that receives input values from a client via a communications link such as the Internet, processes the input values to generate output values, and provides the output values to the client via the communications link. Furthermore, as used herein, the singular forms \u201ca,\u201d \u201can,\u201d and \u201cthe\u201d include plural referents unless the context clearly dictates otherwise. Thus, for example, the term \u201cvalue\u201d is intended to mean one or more values or a combination of values. For example, a value can include a single value such as a floating point number, integer number, text character, or a sequence of values such as a character or text string.",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1"},"A client of the application is a module from which input is received at the application and\/or to which output is provided by the application. In other words, as used herein, the term \u201cclient\u201d refers to any module that provides input to and\/or receives output from an application. Thus, as used herein, the term \u201cclient\u201d includes, for example, peers, clients and servers of a traditional client-server relationship, and masters and slaves of a traditional master-slave relationship associated with the application.","A tag is associated with a tainted value at block  to, for example, label or identify the tainted value as or including an attack against a potential security vulnerability of an application or client. A tag is data that identifies or flags properties, traits, characteristics, attributes, conditions, or other information related to a value. Here, the tag associated with the tainted value identifies the tainted value as such.","As an example, an application can include code or instructions to associate a tag with tainted values. As a specific example, an application can invoke a routine, function, method, or other code or instructions to associate a tag with a tainted value. Such routines, functions, methods, or other code or instructions can be defined at, for example, a library. A library is a group of codes or instructions that are executed at a processor to realize or implement one or more routines, subroutines, functions, or methods.","A tag can be, for example, a value or sequence of values that is associated with the tainted value by adding the tag to the tainted value. For example, a tag can be a character or sequence of characters (or other values) and a numeric value that are added to the tainted value to identify the tainted value and a length of size of the tainted value. Moreover, such a character or sequence of characters is distinguishable from regular (e.g., other than a tag) output from an application. As an example, such a character can be a character that does not typically occur in regular output from an application such as, for example, a NULL value. Alternatively, for example, such a sequence of characters can have, as a group, a low probability of occurrence in regular output from an application.","As another example, a tag can include a begin (or open) tag that is prepended to the tainted value, and an end (or close) tag that is appended to the tainted value. Said differently, the tag can be added to a tainted value to enclose the tainted value. In other implementations, a tag can be metadata associated with a tainted value. For example, a portion or portions of a data store can include metadata related to a tainted value. More specifically, for example, a database or table at a memory can include metadata related to a tainted value, and that metadata can include a tag.","Process  then waits at block  for output (or some other use) of the tainted value. For example, an application security system implementing process  can analyze data values output from an application to determine whether any of the data values are tainted values. That is, for example, the application security system can determine whether any of the data values output from the application are tagged as tainted values. Referring to the example tags discussed above in relation to block , the application security system can access metadata associated with data values or parse the data values themselves to determine whether each data value is a tainted value. If output of a tainted value is detected at block , process  proceeds to block  to determine an output context of the application associated with output of the tainted value.","An output context is a context in which data values are output from an application. Data values are output from applications when those data values (or copies thereof) are provided (e.g., via a communications link, shared memory, electronic mailboxes, intra-processor communications, inter-processor communications, or other data transfer methodologies) to another application, to a data stores, to a client.","For example, if the application is a web application, data values can be output via a communications link. Furthermore, the output context can be the interpretation context of the web application. In other words, the output context can be the context in which a client of the application (e.g., a web browser for a web application) receiving the data values output from the application interprets those data values. As specific example, the output context of a web application can be a Hypertext Markup Language (HTML) output context, a JavaScript output context, a Cascading Style Sheets (CSS) output context, or other output context in which the web application outputs data values to clients.","In some implementations, the output context of the application changes during execution of the application. Referring again to an example implementation in which the application is a web application, the application can output data values during execution that should be interpreted by a client as CSS data at a first time, as HTML at a second time, as JavaScript at a third time, and as HTML again at a fourth time. That is, output from the application can include data values in a CSS output context at a first time, data values in an HTML output context at a second time, data values in a JavaScript output context at a third time, and data values in an HTML output context at a fourth time. In such implementations, the current output context (e.g., the output context in which the tainted value is output) of the application is determined at block . In other words, the output context that is associated with output of the tainted value detected at block  is determined at block .","The output context can be determined, for example, by monitoring the output of the application at the application security system. That is, the application security system can monitor the output of the application to determine the output context of the application. More specifically, for example, the application security system can include an output context monitor module that receives output from the application (e.g., via a runtime environment of the application) and interprets that output, for example, as a client of the application such as a web browser. The output context monitor module can, thus, track or monitor the current output context of the application. The application security module can then access an identifier or descriptor of the output context at the output context monitor module at block .","At block , a taint processing to be applied to the tainted value is selected based on the output context. Said differently, the taint processing that will be applied to the tainted value is selected from a group of taint processings based on the output context of the application. For example, a security policy for an application or application security system can specify taint processings which are compatible with output contexts. A taint processing is compatible with an output context if that taint processing effectively mitigates a security vulnerability of a tainted value output in that output context.","As an example, a security policy can specify that an output-context-specific encoding is compatible with an associated output context, and that all other taint processing is incompatible with that output context. As a specific example, a security policy can specify that an HTML encoding is compatible with an HTML output context, a JavaScript encoding is compatible with a JavaScript output context, and a CSS encoding is compatible with a CSS output context.","The taint processing selected at block  is then applied to the tainted value at block . A taint processing is any analysis, manipulation, modification, or other processing applied to a data value (such as a tainted value) to remove, mitigate, identify, or otherwise affect a security vulnerability or potential security vulnerability of that data value. For example, a taint processing can include input sanitization for an input string that will be used by an application as part of an SQL query (e.g., to prevent SQL injection). As a specific example of sanitization, taint processing can include encoding data values output from an application using an escaped character set such as an HTML escape character set, a JavaScript escape character set, an Extensible Markup Language (XML) escape character set, a CSS escape character set, or other encoding. Such encodings can mitigate or prevent security vulnerabilities such as code or instruction injection via XSS attacks.","A taint processing can be implemented as a module such as, for example, an application specific integrated circuit (ASIC) or a subroutine, a function, a method, a library routine, or other group of instructions (or code representing instructions) hosted at a processor. For example, a taint processing can be an encoding library routine that receives a tainted value as an input and encodes the tainted value to mitigate a security vulnerability in the tainted value. As a more specific example, an identifier of a variable, container, or memory location at which the tainted value is stored is provided as input to the encoding library routine, and the encoding library routine encodes the tainted value within that variable, container, or memory location. In other words, the taint processing processes the tainted value. That tainted value can then be provided to a client of the application.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 2","FIGS. 2 and 3","FIGS. 2 and 3"],"b":["220","221","222","221","222","220"]},"Runtime environment  is an environment hosted at a processor and memory accessible to the processor that provides various services to application  and\/or application security system . For example, runtime environment  provides, for example, libraries, input and output routines, code interpretation, execution isolation, and\/or services during execution or runtime of application  at the processor. In other words, application  executes within runtime environment . As specific examples, runtime environment  can be a virtual machine, a Java\u2122 Runtime Environment, or a Microsoft .NET\u2122 runtime environment.","Application security system  can attach to or instrument runtime environment  (or to application  via runtime environment ) to interact with application . For example, runtime environment  can implement an application programming interface (API), hooks (e.g., to manipulate handling of library routine or function calls, method invocations, messages, or events), or other mechanisms via which application security system  can interact with application  during execution (or runtime) of application .","In other implementations, application security system  can instrument runtime environment  with modified libraries or other resources via which application security system  can interact with application  during execution of application . Said differently, application security system  can modify or instrument runtime environment , and interact with application  via the modifications or instrumentation to runtime environment . As a specific example, application security system  can replace an output library of runtime environment  with a modified output library that allows application security system  to receive output from application . In one example implementation, application security system  can instrument runtime environment  to intercept output from application . Application security system  then analyzes, processes, and forwards that output to client .","Tainted values within application  are tagged during execution of application . For example, application  can include a module or a group of modules that tag tainted values. As a specific example, application  can include a routine that is applied to data values (or tainted values) received as input to the application and associates tags with (or tags) those data values as tainted values. As another example, application  can provide tainted values to a module within runtime environment  such as a routine of a library or application (or web) framework within runtime environment , which associates tags with those tainted values.","In some implementations, application security system  provides such a module to runtime environment . That is, application security system  can instrument runtime environment  with such a module. In yet other implementations, application  can provide tainted values to application security system  (e.g., via runtime environment ), and application security system  can associate tags with those tainted values.","Additionally, application security system  receives output from application . For example, as discussed above, application security system  can receive output (e.g., tainted values and\/or other data values output) from application  via runtime environment . Application security system  then processes (or handles) the output.","As a specific example, output received from application  is provided to output context monitor . Output context monitor  monitors or tracks the output context of an application. In other words, output context monitor  maintains a descriptor or identifier of the current output context of the application. As a specific example, output context monitor  can receive the output from the application and interpret the output (e.g., the data value output) from the application as a client of the application to monitor the output context. Accordingly, the output context descriptor (i.e., description or identifier of the current output context of the application) maintained by output context monitor  represents the interpretation context (or state) of the client for the output.","Application security system  determines whether the output from application  includes a tainted value. If the output does not include a tainted value, application security system  provides (or delivers or forwards) the output to client  without applying a taint processing to the output. If, however, the output includes a tainted value, taint processing module  receives a context identifier associated with output of the tainted value (i.e., an output context descriptor that represents the output context of the application when the tainted value is output from the application) from output context monitor , and taint processing module  selects a taint processing for the output context of the application. For example, taint processing module  can access a security policy to determine which taint processing from a group of taint processings should be selected for a particular output context.","Taint processing module  then applies the selected taint processing to the tainted value (or the output including the tainted value), and the output is subsequently provided to the client. In some implementations, output from application  is processed at application security system  in a block mode. That is, a group of data values is received from application , applied to output context monitor , provided to taint processing module  if there are any tainted values in the group of data values, and then forwarded to client . In other implementations, output from application  is processed at application security system  in a stream mode. That is, output from application  is processed at application security system  as it is provided to application security system  without waiting for a predetermined amount of data values to be received.",{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 3","b":["300","310","330","310","310"]},"Memory  is a processor-readable medium that stores instructions, codes, data, or other information. As used herein, a processor-readable medium is any medium that stores instructions, codes, data, or other information non-transitorily and is directly or indirectly accessible to a processor. Said differently, a processor-readable medium is a non-transitory medium at which a processor can access instructions, codes, data, or other information. For example, memory  can be a volatile random access memory (RAM), a persistent data store such as a hard disk drive or a solid-state drive, a compact disc (CD), a digital video disc (DVD), a Secure Digital\u2122 (SD) card, a MultiMediaCard (MMC) card, a CompactFlash\u2122 (CF) card, or a combination thereof or other memories. In some implementations, memory  can be integrated with processor , separate from processor , or external to computing device .","Memory  includes operating system , application , output context monitor , output analysis module , taint processing module , and delivery module . Output context monitor , output analysis module , taint processing module , and delivery module  collectively implement an application security system. Operating system , application , output context monitor , output analysis module , taint processing module , and delivery module  are each instructions or code that\u2014when executed at processor \u2014cause processor  to perform operations that implement, respectively, an operating system, an application, an output context monitor, an output analysis module, a taint processing module, and a delivery module. Said differently, operating system , application , output context monitor , output analysis module , taint processing module , and delivery module  are hosted at computing device .","Output context monitor  and taint processing module  are similar to output context monitor  and taint processing module , respectively, illustrated in . Output analysis module  determines whether output received from application  includes a tainted value, and provides tainted values to taint processing module . For example, output analysis module  can analyze or parse output received from application  to determine whether the output includes one or more tags associated with a tainted value or group of tainted values. As another example, output analysis module  can access metadata associated with data values output from application  to determine whether that metadata includes tags identifying one or more data values as tainted values. More specifically, for example, output analysis module  can access that metadata based on the address or memory location of a variable output from application .","Delivery module  provides output from application  to clients of application . More specifically, delivery module  provides output from application  after one or more taint processings are applied to tainted values, if any, within the output. As an example, of interaction among application , output context monitor , output analysis module , taint processing module , and delivery module  are discussed in more detail below in relation to .","In some implementations, computing device  can be a virtualized computing device. For example, computing device  can be hosted as a virtual machine at a computing server. Moreover, in some implementations, computing device  can be a virtualized computing appliance, and operating system  is a minimal or just-enough operating system to support (e.g., provide services such as a communications stack and access to components of computing device  such as a communications interface module (not shown)) an application security system.","An application security system (e.g., an application security system including output context monitor , output analysis module , taint processing module , and delivery module ) can be accessed or installed at computing device  from a variety of memories or processor-readable media. For example, computing device  can access a remote processor-readable medium via a communications interface module (not shown) and the application security system at that processor-readable medium. As a specific example, computing device  can be a thin client that accesses operating system  and the application security system during a boot sequence.","As another example, computing device  can include (not illustrated in ) a processor-readable medium access device (e.g., CD, DVD, SD, MMC, or a CF drive or reader) and the application security system at a processor-readable medium via that processor-readable medium access device. As a more specific example, the processor-readable medium access device can be a DVD drive at which a DVD including an installation package for the application security system is accessible. The installation package can be executed or interpreted at processor  to install the application security system at computing device  (e.g., at memory ). Computing device  can then host or execute the application security system.","In some implementations, an application security system can be accessed at or installed from multiple sources, locations, or resources. For example, some components or modules of the application security system can be installed via a communications link, and other components or modules of the application security system can be installed from a DVD.",{"@attributes":{"id":"p-0050","num":"0049"},"figref":["FIG. 4","FIG. 3","FIG. 4"],"b":["360","333","361","362","363","364","365","362","364","363","338","363","338","363","333"]},"Output  is provided to output context monitor  and output analysis module  within application security system . Output context monitor  analyzes, parses, or interprets output  to monitor, track, or otherwise determine the output context (e.g., maintain a current output context) of application , and provides context identifier  to taint processing module . For example, output context monitor  can provide context identifier  (e.g., a signal or other data) to taint processing module  each time output context monitor  determines that the current output context of application  has changed or been altered. That is, output context monitor  can proactively update taint processing module  about changes in the output context of application . In other implementations, output context monitor  can provide context identifier  to taint processing module  in response to a request from taint processing module  for the current output context of application . That is, taint processing module  can determine the output context of application  using information (e.g., context identifier ) pushed to taint processing module  by output context monitor , or using information pulled from output context monitor  by taint processing module .","Output analysis module  parses output  and\/or processes other information (e.g., metadata or signals representing tags) provided to application security system  to identify tainted value  within output . As illustrated in , output analysis module  identifies tainted value  within output  based on begin tag  and end tag . In other implementations, output analysis module  can identify tainted value  within output  based on metadata or a signal provided by application . Output analysis module  then provides tainted value  to taint processing module .","Taint processing module  determines the output context of application  associated with tainted value  (e.g., the current output context of application  when tainted value  is output from application ) based on context identifier , and selects a taint processing that is compatible with that context from a group of taint processings. In some implementations, output analysis module  and output context monitor  synchronously process output  to synchronize tainted values provided to taint processing module  with context identifier provided by output context monitor . In other words, output analysis module  and output context monitor  can synchronously process output  to ensure that context identifier  provided by output context monitor  is associated with tainted value  provided to taint processing module .","After the selected taint processing is applied to tainted value , tainted value  (which may have been modified or altered by the selected taint processing) is provided to delivery module . Delivery module  also receives data values  and data values  from output analysis module . Delivery module  then provides (or delivers) data values , tainted value , and data values  to client . In some implementations, delivery module  receives signals or commands from output analysis module  and\/or taint processing module  to synchronize delivery of data values , tainted value , and data values  to client . That is, output analysis module  and\/or taint processing module  provide signals or commands to delivery module  to indicate an order of data values , tainted value , and data values . In other implementations, data values , tainted value , and data values  are serially provided to delivery module  by output analysis module  and\/or taint processing module  to preserve an order of data values , tainted value , and data values .","As illustrated in , application  and application security system  are hosted at a common computing device. For example, components (e.g., modules) of application security system  and application  can execute within a common runtime environment. Moreover, in some implementations, application security system  or components thereof can be integrated with application . For example, application  can include code or instructions that, when executed at a processor, implement application security system  or components thereof. As another example, application  can include code or instructions that, when executed at a processor, provide output from application  to a library, framework, or another module implementing application security system  or components thereof. As specific examples, application security system  or components thereof can be implemented as Java\u2122 technologies such as Java Servlets, filter components, or Java Enterprise Edition libraries or components; or as Apache\u2122 modules in the Apache\u2122 web server.","In other implementations, an application and an application security system can be implemented at separate computing devices. For example,  is a schematic block diagram of an environment including an application security system, according to another implementation. Computing device  includes processor , communications interface , and memory , which includes operating system  and application . Computing device  includes processor , communications interface , and memory , which includes operating system  and application security system . Client  is a client of application  hosted at computing device . Computing device , computing device , and client  are in communication one with another via communications link .","Communications link  includes devices, services, or a combination thereof that define communications paths between computing device , computing device , client , and\/or other devices or services. For example, communications link  can include one or more of a cable (e.g., twisted-pair cable, coaxial cable, or fiber optic cable), a wireless link (e.g., radio-frequency link, optical link, or sonic link), or any other connectors or systems that transmit or support transmission of signals. Communications link  can include communications networks such as an intranet, the Internet, other telecommunications networks, or a combination thereof. Additionally, communications link  can include proxies, routers, switches, gateways, bridges, load balancers, and similar communications devices. Furthermore, the connections or communications paths illustrated in  are logical and do not necessarily reflect physical connections.","As illustrated in , application  provides data to client  via computing device  along communications path  and communications path . For example, computing device  can be a proxy server or other computing server or service. In some implementations, client  provides data to application  directly via communications link . In other implementations, client  provides data to application  indirectly via communications link  and computing device .",{"@attributes":{"id":"p-0059","num":"0058"},"figref":["FIG. 6","FIG. 5"],"b":["525","515","525","570","610","525","570","610","525","620","525","515"]},"Additionally, application security system  selects taint processings to be for the tainted values based on the output contexts of application  associated with those tainted values at block , and applies those taint processings to the tainted values at block . Application security system  then provides the output from application  including the processed tainted values (i.e., the tainted values to which the taint processing were applied) to client  at block . In other words, application security system  receives output from application , processes the output by applying context-sensitive or\u2014specific taint processings to tainted values within the output, and provides the processed output to the client. Thus, application security system  can mitigate security vulnerabilities such as XSS vulnerabilities or other code injection vulnerabilities.","While certain implementations have been shown and described above, various changes in form and details may be made. For example, some features that have been described in relation to one implementation and\/or process can be related to other implementations. In other words, processes, features, components, and\/or properties described in relation to one implementation can be useful in other implementations. As another example, functionalities discussed above in relation to specific modules or elements can be included at different modules, engines, or elements in other implementations. Furthermore, it should be understood that the systems, apparatus, and methods described herein can include various combinations and\/or sub-combinations of the components and\/or features of the different implementations described. Thus, features described with reference to one or more implementations can be combined with other implementations described herein."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0004","num":"0003"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0005","num":"0004"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
