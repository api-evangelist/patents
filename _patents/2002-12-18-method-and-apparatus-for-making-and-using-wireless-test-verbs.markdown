---
title: Method and apparatus for making and using wireless test verbs
abstract: A computerized method and system for testing a function of an information-processing system. This includes providing an architecture having a set of test commands, the test commands including a set of one or more stimulation commands and a set of one or more result-testing commands, and defining a set of test verbs out of combinations of the test commands. This allows the test programmer to define an overall test program that uses the test verbs in writing a test program that specifies an overall function that will extensively test a system-under-test. The methods further includes executing a program that includes a plurality of test verb instructions and outputting a result of the program. In some embodiments, the present invention provides a computer-readable media that includes instructions coded thereon that when executed on a suitably programmed computer executes one or more of the above methods.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06862682&OS=06862682&RS=06862682
owner: TestQuest, Inc.
number: 06862682
owner_city: Chanhassen
owner_country: US
publication_date: 20021218
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATION","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION","Apparatus for Making and Using Test Verbs","Method for Making and Using Test Verbs","Wireless Test Verb Architecture","CONCLUSION"],"p":["This application claims priority to U.S. Provisional Application Ser. No. 60\/377,515 (entitled AUTOMATIC TESTING APPARATUS AND METHOD, filed May 1, 2002) which is herein incorporated by reference.","This application is related to U.S. Patent Application entitled METHOD AND APPARATUS FOR MAKING AND USING TEST VERBS filed on even date herewith, to U.S. Patent Application entitled NON-INTRUSIVE TESTING SYSTEM AND METHOD filed on even date herewith, and to U.S. Patent Application entitled SOFTWARE TEST AGENTS filed on even date herewith, each of which are incorporated in their entirety by reference.","This invention relates to the field of computerized test systems and more specifically to a method and apparatus of making and using wireless test verbs out of combinations of simpler test commands.","Wireless information-processing devices are tested several times over the course of their life cycle, starting with their initial design and being repeated every time the product is modified. Typical wireless information-processing devices include wireless personal data assistants (PDAs), wireless phones, wireless point-of-sale devices, pagers, and wireless networked computing devices. Because products today commonly go through a sizable number of revisions and because testing typically becomes more sophisticated over time, this task becomes a larger and larger proposition. Additionally, the testing of such wireless information-processing devices is becoming more complex and time consuming because a wireless information-processing device may run on many different platforms with many different configurations in many different languages. Because of this, the testing requirements in today's wireless information-processing device development environment continue to grow exponentially.","For most organizations, testing is conducted by a test engineer who identifies defects by manually running the product through a defined series of steps and observing the result after each step. Because the series of steps is intended to both thoroughly exercise product functions as well as reexecute scenarios that have identified problems in the past, the testing process can be rather lengthy and time-consuming. Add on the multiplicity of tests that must be executed due to device size, platform and configuration requirements, and language requirements, testing has become a time consuming and extremely expensive process.","In today's economy, manufacturers of technology solutions are facing new competitive pressures that are forcing them to change the way they bring products to market. Now, being first-to-market with the latest technology is more important than ever before. But customers require that defects be uncovered and corrected before new products get to market. Additionally, there is pressure to improve profitability by cutting costs anywhere possible.","Product testing has become the focal point where these conflicting demands collide. Manual testing procedures, long viewed as the only way to uncover product defects, effectively delay delivery of new products to the market, and the expense involved puts tremendous pressure on profitability margins. Additionally, by their nature, manual testing procedures often fail to uncover all defects.","Automated testing of information-processing device products has begun replacing manual testing procedures. The benefits of test automation include reduced test personnel costs, better test coverage, and quicker time to market. However, an effective automated testing product often cannot be implemented. The most common reason for failure is the cost of creating and maintaining automated testing code. Additionally, the available automated testing products are typically are a one size fits all type of product that is not tailored to one specific type of device.","The creation of test automation scripts requires a considerable amount of time and resources. The reusability of these scripts is necessary to fully realize the benefits of a test automation product. Customizing a one size fits all product to a specific type of device also requires a considerable amount of time and resources. However, when, for example, a user interface is changed or a system is implemented on a new device platform, with today's automated testing tools, all test scripts for the user interface or a specific device may need to be rewritten. Additionally, if an information-processing system operates on multiple hardware or operating-system variants, each platform requires its own test script. Further, if a system-under-test is developed in multiple languages, automated test scripts need to be created for each language.","What is lacking in the prior art are automated testing systems and methods that allow for the reusability of automated test scripts taking into account multiple platforms, languages, and cosmetic changes to the system-under-test. The prior art is also lacking an automated testing system and method that meets the reusability deficiency that is also tailored to meet the automated testing needs of the wireless information-process device manufacturing and development community.","What is needed is an automated testing system and method that is reusable across wireless platforms, handles multiple languages, and allows cosmetic changes to a wireless information-processing system-under-test. Further, the automated testing system and method must reduce test personnel costs, provide better test coverage, reduce time to market, and decrease the creation and maintenance costs of automated test scripts.","The present invention provides a computerized method for testing a function of a wireless information-processing system. This method includes providing an architecture having a set of low-level test commands, the test commands including a set of one or more stimulation commands and a set of one or more result-testing commands, and defining a set of wireless test verbs out of combinations of the low-level test commands. This allows the test programmer to define an overall test program that uses the wireless test verbs in writing a test program that specifies an overall function that will extensively test a system-under-test. The method further includes executing a program that includes a plurality of test verb instructions and outputting a result of the program.","Another aspect of the present invention provides a computer-readable media that includes instructions coded thereon that when executed on a suitably programmed computer executes one or more of the above methods.","Yet another aspect of the present invention provides a computerized system for testing a function of a wireless information-processing system. The system includes a memory, a set of test commands stored in the memory, wherein each one of the test commands includes a set of one or more stimulation commands and a set of one or more result-testing commands. The system also includes a wireless test verb instruction set program stored in the memory that defines a set of test verbs out of combinations of the test commands. A programmer then generates a test program stored in the memory that includes a plurality of wireless test verb instructions. Some embodiments further include an output port that drives stimulation signals based on the execution of the test program, an input port that receives result signals based on behavior of a system-under-test, and an output device that presents a result of the test program.","In the following detailed description of the invention, reference is made to the accompanying drawings that form a part hereof, and in which are shown by way of illustration specific embodiments in which the invention may be practiced. It is understood that other embodiments may be utilized and structural changes may be made without departing from the scope of the present invention.","The leading digit(s) of reference numbers appearing in the Figures generally corresponds to the Figure number in which that component is first introduced, such that the same reference number is used throughout to refer to an identical component which appears in multiple Figures. Signals and connections may be referred to by the same reference number or label, and the actual meaning will be clear from its use in the context of the description.","Conventional automated testing systems typically require the creation of different code for testing each different hardware and operating-system platform on which a system-under-test may be executed. Further, if the system-under-test is developed in multiple languages, code must be created for each language to ensure complete testing coverage. In contrast, the present invention allows for the creation of reusable code for testing a system that is deployable on one or more platforms in one or more languages.",{"@attributes":{"id":"P-00028","num":"00028"},"figref":"FIG. 1","b":["100","99","99"]},"In some embodiments, system  includes a testing host device  having a memory  storing a test program , a set of test commands , test verb definitions , an automated testing tool , and a result log . Within test program  is a comparator  that compares the result signals returned from a system-under-test with the expected results for the test. The comparator  generates a test result based on this comparison. In some embodiments, system  includes a database  coupled to system  by connector .","In various embodiments, database  includes a relational database management system, a hierarchical database management system, or a document management system. In various embodiments, connector  includes a wired local area network (LAN) connection, a wireless LAN connection, or a wide area network connection (WAN).","In some embodiments, testing host device  also includes a storage , an output port , and an input port . In some embodiments, system  also includes a removable media  and a media reader  used in testing host device .","Each test verb definition  is an encapsulated macro that a test verb programmer creates to perform a specific task. The set of test verb definitions  are created in the test-command syntax required by test program . Each test verb definition  includes one or more test commands . In some embodiments, test program  is an automated testing tool, such as TestQuest Pro\u2122 (available from TestQuest Inc. of Chanhassen, Minn.), for testing information-processing  systems. One such system is described in U.S. Pat. No. 5,740,352 to Philipp et al. Test verbs  are then included in a predetermined order in a test program  for testing a system-under-test .","In some embodiments, a test verb , stored in memory , is used for determining whether to reject a manufactured part based on analysis of test results from system-under-test . In some embodiments, the test verb  used for determining whether to reject a manufactured part requires the input of an acceptable variation tolerance for the test performed.","An example embodiment of a test program  implementing the test verb  used for determining whether to reject a manufactured part  includes test verbs performing multiple tasks. These tasks include testing the manufactured part  by executing  a stimulation command , executing  a result-checking command , comparing  the test result with the acceptable variation tolerance with comparator  to determine  whether to reject the manufactured part , and logging  the result in result log . In various embodiments, acceptable variation tolerances for manufactured parts are stored in a location such as memory , database , storage , and removable media .","In some embodiments, a test verb , stored in memory , is used for determining the location of a graphical user interface object displayed on a display of a system-under-test . In some embodiments, test verb  used for determining the location of a graphical user interface object requires the input of a bitmap file and indicators specifying a region of the graphical user interface to search for the graphical user interface object. In some embodiments, test verb  used for determining the location of a graphical user interface object returns a boolean value signifying whether the graphical user interface object exists on the graphical user interface. In another embodiment, test verb  used for determining the location of a graphical user interface object returns the location on the graphical user interface of the graphical user interface object and the selected status of the graphical user interface object (e.g., selected or not selected). In various embodiments, graphical user interface objects to be located are stored in locations including memory , database , storage , and removable media .","In one embodiment of a test program , a test verb  used for determining the location of a graphical user interface object is defined narrowly to leverage test verbs  created for more common testing tasks (e.g., log result ). In one such embodiment, a test program is created to perform a testing task that requires the determination of the location of a graphical user interface object. In this embodiment, test verbs  are used to capture  the image displayed on a graphical user interface of a system-under-test , process  the captured image to create a bitmap file (BMP), gather  inputs for other test verbs  (e.g., the graphical user interface object to be located, a region to search for the graphical user interface object, . . . ), locate  the graphical user interface object, log  the result, and output  the location of the graphical user interface object either to the next test verb  in a test program  or to an output device  of a system .","In some embodiments, a test verb , stored in memory , is used for comparing an audio output from system-under-test  with an expected output. In various embodiments, the expected audio output is an audio file stored in storage , database , or removable media . In some embodiments, test verb  requires the input of an expected audio output file and the audio output of system-under-test . In some embodiments, the test verb  used for comparing an audio output of system-under-test  with an expected audio output returns a boolean indication of a match between the expected and actual audio outputs.","In one embodiment, testing host device  is used to test an information-processing system  that is external to testing host device . In such an embodiment, system-under-test  is coupled to output port  via connector  and input port  via connector . Test program  is then run on test host device . The test command definitions  send stimulus commands  and provide result-checking commands  to check for test failure on system-under-test . In one embodiment, upon completion of a test, an entry is made in result log . In another embodiment, upon completion of a test, the results are sent to output device . In some embodiments, output device  includes a CRT monitor, a printer, or an audio-output device such as a sound card. In some embodiments, upon completion of a test, the results are sent to an output device  and\/or to the log file .","In various embodiments, connectors  and  include VGA or S-video cables. In other embodiments, connectors  and  include coaxial, serial, category 5, universal serial bus (USB), or custom cables specific for a certain system-under-test .","In one embodiment, result log  is an ASCII text file. In another embodiment, result log  is an extensible markup language (XML) file that facilitates entry of the log data into a database by providing various identification or categorization tags on each result. In some embodiments, log file  is created in memory , but in other embodiments log file  is stored in storage  or on removable media . In some embodiments, result log  is stored in database .","In another embodiment, shown in , testing host device  is used to test an information-processing system  that is internal to testing host device . In such an embodiment, system-under-test  is stored in memory  and executed on testing host device . All relevant input operations to, and output operations from, system-under-test  are handled within testing host device . In some embodiments, testing host device  holds a database  in memory.","As shown in , one aspect of the present invention provides a computerized method  for testing functions of an information-processing system. Method  includes providing  an architecture having a set of test commands, the test commands including a set of one or more stimulation commands  and a set of one or more result-testing commands , and defining  a set of test verbs out of combinations of the test commands . This allows the test programmer to define an overall test program  that uses the test verbs  in writing a test program  that specifies an overall function that will extensively test an information-processing system. The methods further include executing  a program that includes one or more test verb instructions  and outputting  a result of the program.","In some embodiments, computerized method  is implemented by coding instructions on a computer-readable media  (see ) that when executed on a testing host device, executes computerized method .","In some embodiments, the executing program further includes logging  results of the program execution. In some embodiments, logging  of activities and results is performed in an ASCII text file. In another embodiment, logging  of activities and results is performed in an extensible markup language file that facilitates entry of log data into a database by providing various identification and categorization tags on each result.","In some embodiments, the method  further includes accepting  or rejecting  a manufactured part as a result of analyzing  results of the execution of the test program. In some embodiments, in order to determine whether to accept or reject a manufactured part, the test verb definitions  and test program  are created with acceptable tolerances, or access to acceptable tolerances, for the quality or performance of the manufactured part. In some embodiments, the test program  is executed  by stimulating  the manufactured part, testing  the result of the stimulus , analyzing  the result by checking  the result against acceptable tolerances to determine whether to accept  the part or to reject  it. In some embodiments, test program  can make adjustments  to the manufacturing process used to make the product and\/or to the design of the product itself.","The computerized method  of  for testing functions of an information-processing system is continued on  as method .","In some embodiments, method  includes a process for locating  a graphical user interface object on the display of a system-under-test. In some embodiments, locating  a graphical user interface object is accomplished by providing test program  a graphical user interface object definition  which is used to compare against objects found on the graphical user interface until a match is found. In various embodiments, a graphical user interface object definition  includes information that enables an information-processing system implementing method  to locate a graphical user interface object such as the coordinates corresponding to a region of the graphical user interface to search, a bitmap file, or a color. In various embodiments, the output  of the process for locating  a graphical user interface object returns varying types of information about the graphical user interface object such as coordinates specifying the location of the graphical user interface object, a boolean result specifying whether the graphical user interface object exists, or a status of the graphical user interface object such as whether or not the graphical user interface object is currently selected.","Another embodiment of the process for locating  a graphical user interface object on the display of a system-under-test is shown in  This embodiment includes the steps of processing  a captured image of a cellular phone graphical user interface , gathering  inputs for further processing, locating  the graphical user interface object to be located , and returning  the location of the graphical user interface object .","The step of processing  the captured image of a cellular phone graphical user interface  includes capturing  a graphical user interface image  from the system-under-test and converting  the image to a bitmap file (BMP). The bitmap file of the graphical user interface is then passed  to the gathering inputs step .","The gathering inputs step  includes maintaining  an instance of the bitmap file of the graphical user interface, selecting  the graphical user interface object to be located file  location  from a table  within a relational database management system , selecting  the region to search  within the bitmap file of the graphical user interface from the relational database management system , and opening  the file  containing the graphical user interface object to be located . The table , named \u201cGUI Objects\u201d  within the relational database management system  includes columns screen , search region , and object file  and data (, and ) under those columns representative of a screen  with a search region  where an object file  can be located. A reference to the instance of the bitmap file of the graphical user interface , a reference to the open file  of the graphical user interface object  to be located, and the region to search  for the graphical user interface object  on the image of the graphical user interface of the system-under-test are then passed  to the step for locating  the graphical user interface object .","Step  for locating the graphical user interface object  includes comparing  the graphical user interface image of the system-under-test with the file  of the graphical user interface object  to be located in order to find matches. If the graphical user interface object  is located, the step  outputs  the coordinates  of the graphical user interface object  within the graphical user interface  of the system-under-test and writes  a success message to a log. If the graphical user interface object  is not located, the step  writes  the graphical user interface image  file of the system-under-test to storage, writes  a failure message to the log including the location of the graphical user interface image  file of the system-under-test in storage, and outputs  null values for the location of the graphical user interface object .","Further embodiments of method  include a process for locating  text strings  on a graphical user interface. In some embodiments, the process of locating  text strings  on a graphical user interface includes taking  a snapshot of the graphical user interface and creating  a bitmap, processing  the bitmap image to derive text, locating  the text input  to the process , and converting  the text location back to graphical user interface coordinates. In various embodiments, the output  of the process  of locating text strings  on a graphical user interface returns varying types of information about the text string  such as the font, the font size, the coordinates specifying the location of the text  on the graphical user interface, the color of the text , the number of times the text  was located on the graphical user interface, or a boolean result indicating whether the text  was located on the graphical user interface.","In some embodiments, method  includes a process  for comparing an expected audio output definition  with the output of a system-under-test. In various embodiments, the input  to the process  for comparing an expected audio output definition  with the actual output of a system-under-test includes information such as frequency, wave pattern, volume, or duration of the sound. In some embodiments, the output  of process  includes information about the audio output from the system-under-test. In one such embodiment, the output  of process  is a boolean value indicating whether process  made a match between the expected audio output  with the system-under-test audio output.","In some embodiments, method  includes a process for translating  a primary language input  to a target language  output . Translation process  is used when a system-under-test requires testing in multiple languages. In some embodiments, the translation process  requires inputs . In some embodiments, inputs  include a primary language word identifier  and a target language . In some embodiments, translation process  uses the primary language identifier  input and the target language  to select  the desired language equivalent  from a relational database management system table.","In some embodiments, translation process  operates using a relational database management system to store the primary language  and target language equivalents . In some embodiments, as shown is , database table  named \u201ctvt_infrastructure\u201d  includes columns  and rows . In this embodiment, there are columns text_english  and text_french  that in row  hold the values of \u201cAdapters\u201d  as the English word and \u201cConnections\u201d  as the French equivalent. Table  operates for the translation process  by selecting  a row  based on specific values in columns  including the value in column text_english . In one such embodiment, an example of a structured query language (SQL) statement used to select  a target language equivalent  of a primary language text string  in a typical relational database management system is:",{"@attributes":{"id":"P-d0e3085","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"SELECT text_french"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"FROM tvt_infrastructure"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"WHERE screen = \u201cMAIN\u201d  AND"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"objectname = \u201cICO_ADAPTOR\u201d AND"]},{"entry":[{},"text_english = \u201cAdapters\u201d;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{},"b":["642","632","600","604","346","342","348","700","346"],"figref":"FIG. 7"},"In other embodiments, translation process  operates using a relational database management system to store the primary language  and target language equivalents . As shown in , database table , named tvt_translation , has columns  named English , French , Spanish , and German  and rows  holding text strings of equivalent meaning in the language of their respective columns. In one such embodiment, an example of a structured query language (SQL) statement used to select  a target language equivalent  of a primary language text string  in a typical relational database management system is:",{"@attributes":{"id":"P-d0e3362","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"SELECT german"]},{"entry":[{},"FROM tvt_infrastructure"]},{"entry":[{},"WHERE spanish = \u201cArchivo\u201d;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{},"b":["742","346","732"]},"In one such embodiment, the system-under-test is a washing machine, developed with English as the primary language. However, the washing machine must also be able to display text on its LCD display in French and Spanish. In such embodiments, when a process is encountered that requires testing of graphical user interface text displayed on the LCD, any text strings that are displayed in English when the washing machine is operating in its primary language are sent to process  for translation into the target language  of French or Spanish.","In some embodiments, underlying a system for automated testing of an information-processing system is a flexible, layered architecture , as shown in , that allows such a system to operate on many different devices and operating-system platforms and in many different languages. In some embodiments, the flexible, layered architecture  includes a test verb layer , a task layer , a platform abstraction layer , a graphical user interface object layer , and a test tool primitive layer .","In some embodiments, test verb layer  includes the semantic content of the test verbs that define a test vocabulary. In some embodiments, task layer  includes test verbs instantiated in memory that are available to an automated test program during execution. In some embodiments, the platform abstraction layer  handles test verb command handling differences when test verbs are executed or performed on different platforms that have different execution, processing, stimulation, or language requirements. In some embodiments, graphical user interface object layer  handles graphical user interface object differences between systems-under-test such as color display, monochrome display, display size, display resolution, or language. In some embodiments, the test tool primitive layer  includes the application programming interface (API) of the test tool used along with a test verb implementation such as the HLF application programming interface available within TestQuest Pro.","In some embodiments, the flexible, layered architecture  allows communication between the infrastructure layers and with additional ancillary components of the computerized system embodied in FIG. . In some embodiments, test verb layer  includes semantic content that accesses test data  that becomes instantiated in memory in task layer . In some embodiments, task layer  communicates with test verb layer , platform abstraction layer , graphical user interface object layer , and test tool primitives layer ; accesses test data ; and handles activity logging  and error handling and recovery . In some embodiments, platform abstraction layer  communicates with task layer  and graphical user interface object layer  and handles activity logging  and error handling and recovery . In another embodiment, graphical user interface object layer  communicates with task layer , platform abstraction layer , and test tool primitives layer  and handles activity logging  and error handling and recovery .","In some embodiments, test verbs are defined by abstracting the function to be tested to a system level, rather than a hardware level, to ensure the reusability of test verbs across platforms. In one such embodiment for a computerized coffee pot, as shown in , the test vocabulary for a computerized coffee pot  is valid regardless of whether the coffee pot on\/off switch is a touch panel interface or an electro-mechanical switch. In this embodiment, all of the test verb definitions  for testing a computerized coffee pot are created at a level that allows for a test program using these test verbs  to be reused from one type of coffee pot to the next. In such an embodiment, the hardware specifics for test verbs are handled in the platform abstraction and graphical user interface object layers. Both example test vocabularies shown in  are oriented to the operations performed not the hardware specifics of the platform. In these embodiments, the flexible, layered architecture shown in , and described above, allows this platform independence.","1 Overview","The following exemplary architecture provides a list of some test verbs embodiments for a generic phone implementation of test verb technology (TVT) along with providing possible parameter information and usage explanations for the test verbs.","2 Abbreviations Acronyms & Definitions",{"@attributes":{"id":"P-d0e3765","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["ATS","Automated Test Solution"]},{"entry":["ATC","Automated Test Case (the script that automates the test"]},{"entry":[{},"case)"]},{"entry":["GUI","Graphical User Interface"]},{"entry":["TQPro","TestQuest Pro system"]},{"entry":["TED","Test Execution Driver"]},{"entry":["Test Case","The basic test unit that reports a pass\/fail status"]},{"entry":["Test Verb","ATC statements that implement common testing activities."]},{"entry":["TV","Test Verb"]},{"entry":["Test Session","The running of a sequence of ATC's"]},{"entry":["SUT","System Under Test"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":{}},"The table below shows the test verb embodiments that are described herein. This is intended to be an illustrative list of some embodiments of wireless test verb technology. This is not intended to be an exhaustive list of embodiments. Many other embodiments will be apparent to those of skill in the art upon reviewing the information disclosed herein.","The various TV are categorized as to usage. Parameterization, implementation details and general design guidelines for each TV are treated in later sections",{"@attributes":{"id":"P-d0e3955","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"TV List","Parameters"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"GENERIC TEST VERBS",{}]},{"entry":[{},"FOR_EACH","prt, arr"]},{"entry":[{},"FOR_EACH_IF","ptr, arr, expr"]},{"entry":[{},"REMARK","sz"]},{"entry":[{},"SKIP_TESTCASE","sz"]},{"entry":[{},"KNOWN_TO_FAIL","sz"]},{"entry":[{},"KNOWN_TO_FAIL_BUG","sz"]},{"entry":[{},"DELAY","time"]},{"entry":[{},"NOT","(another TV)"]},{"entry":[{},"NAVIGATION TEST VERBS"]},{"entry":[{},"NAVIGATE_HOME","NULL"]},{"entry":[{},"NAVIGATE_TO_SCREEN","sz"]},{"entry":[{},"VERIFICATION TEST VERBS"]},{"entry":[{},"VERIFY_CHOICE_ITEMS","list"]},{"entry":[{},"VERIFY_CHOICE_ITEMS_SELECTED","list"]},{"entry":[{},"VERIFY_INCOMING_CALL","timeout"]},{"entry":[{},"VERIFY_TEXT","sz"]},{"entry":[{},"VERIFY_TEXT_SELECTED","sz"]},{"entry":[{},"READ_TEXT","buf"]},{"entry":[{},"VERIFY_OBJECT","sz"]},{"entry":[{},"WAIT FOR TEST VERBS"]},{"entry":[{},"WAIT_FOR_TEXT","sz, timeout"]},{"entry":[{},"WAIT_FOR_OBJECT","sz, timeout"]},{"entry":[{},"CURSOR TEST VERBS"]},{"entry":[{},"CHECK_CURSOR_BLINK","x, y"]},{"entry":[{},"CURSOR_MUST_NOT_EXIST","x, y"]},{"entry":[{},"MENU ITEM SELECTION TEST VERBS"]},{"entry":[{},"SELECT_MENU_ITEM","sz"]},{"entry":[{},"PHONE RELATED TEST VERBS"]},{"entry":[{},"SET_POWER","ival"]},{"entry":[{},"POWER_CYCLE_PHONE","NULL"]},{"entry":[{},"RESET_AUDIO","NULL"]},{"entry":[{},"DISCONNECT_BATTERY","NULL"]},{"entry":[{},"CONNECT_BATTERY","NULL"]},{"entry":[{},"UNLOCK_PHONE","NULL"]},{"entry":[{},"LOCK_PHONE","NULL"]},{"entry":[{},"LOG_PHONE_CONFIGURATION","NULL"]},{"entry":[{},"SET_OBJECT","Sz"]},{"entry":[{},"KEY PRESS TEST VERBS"]},{"entry":[{},"DIAL_NUMBER","sz"]},{"entry":[{},"SEND_STRING","sz"]},{"entry":[{},"PRESS_KEYS","sz"]},{"entry":[{},"HOLD_KEY","sz"]},{"entry":[{},"RELEASE_KEY","sz"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"The table below shows some embodiments of the test verbs that are described herein. The various test verbs are categorized.","4.1 Generic Test Verbs","This category of TV's is generally associated with whatever implementation is undertaken. These TV's are more specific to testing than they are to a particular platform and are used to control, monitor, log and establish control of testing.","4.1.1 FOR_EACH(ptr, arr)","This test verb is a simplified loop iterator that works in conjunction with special data table format. The two parameters that are passed to this test verb have to following characteristics:\n\n",{"@attributes":{"id":"P-d0e4685","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"FOR_EACH(Record,DataTable)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"DoThis(Record->Object1);"]},{"entry":[{},"DoThat(Record->Object2);"]},{"entry":[{},"DoThis(OtherParameter);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},{"@attributes":{"id":"P-d0e4809","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"static struct"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"char * Object1;"]},{"entry":[{},"int Object2;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"} *Record,DataTable[] = {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"{\u2003\u201cOne\u201d, 1 },"]},{"entry":[{},"{\u2003\u201cTwo\u201d, 2 },"]},{"entry":[{},"{\u2003\u201cThree\u201d 3 }"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"};"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"4.1.2 FOR_EACH_IF(ptr, arr,expr)","This test verb is a slightly more complex loop iterator that works in conjunction with a special data table format, allowing for conditional execution of data table entries. The three parameters that are passed to this test verb have to following characteristics:\n\n",{"@attributes":{"id":"P-d0e5008","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"FOR_EACH_IF(Record,DataTable,(Record->Filter =  = variable))"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"DoThis(Record->Object1);"]},{"entry":[{},"DoThat(Record->Object2);"]},{"entry":[{},"Filter = DoThis(OtherParameter);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},{"@attributes":{"id":"P-d0e5142","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"static struct"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"char * Object1;"]},{"entry":[{},"int Object2;"]},{"entry":[{},"int Filter;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"} *Record,DataTable[] = {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"{\u2003\u201cOne\u201d, 1, 4},"]},{"entry":[{},"{\u2003\u201cTwo\u201d, 2, 4},"]},{"entry":[{},"{\u2003\u201cTwo\u201d 2, 8}"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"};"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"4.1.3 REMARK(sz)","This TV simply posts a comment to the log.","In some embodiments, the general usage of this test verb within the script would be as shown below:\n\n","4.1.4 SKIP_TESTCASE(sz)","This TV simply posts comments to the log.","In some embodiments, the general usage of this test verb within the script would be as shown below:",{"@attributes":{"id":"P-d0e5356","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"TEST_CASE_START(\u201cTC DataTable 14\u201d)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"SKIP_TESTCASE(\u201cThe TC requires a BSE, will perform"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"manually for now\u201d);"]},{"entry":[{},"}"]},{"entry":[{},"TEST_CASE_CLEANUP(iStatus)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"4.1.5 KNOWN_TO_FAIL(sz)","This TV simply posts comments to the log and then skips the remainder of the code to go to the test case cleanup.","In some embodiments, the general usage of this test verb within the script would be as shown below: In general, if an ATC is authored, but the script does not yet run for some external reason (that is not a bug), this line can be placed in an appropriate place in the script to ensure the script does not continue to a failure and to continue to note in the log files an area that must be addressed prior to completion.","In general, the test engineer would author a complete script, execute the script one time and determine that there was a Bug in the software. At that point, the BUG TV would be inserted typically as the first line of code, to record the fact of the bug to the logfile and skip the remainder of the test. This line of code would be removed upon the bug being corrected so that the test script again executed. It is simply a short-term placeholder of sorts.",{"@attributes":{"id":"P-d0e5495","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"TEST_CASE_START(\u201cTC DataTable 14\u201d)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"KNOWN_TO_FAIL(\u201cBSE TV for invalid frequency not"]},{"entry":[{},"implemented yet.\u201d);"]},{"entry":[{},"\u201cBUG - 1734 - End Call Softkey not visible during emergency"]},{"entry":[{},"call\u201d);"]},{"entry":[{},"MORE_TESTVERBS(\u2009);"]},{"entry":[{},"MORE_TESTVERBS(\u2009);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"TEST_CASE_CLEANUP(iStatus);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"4.1.6 KNOWN_TO_FAIL_BUG(sz)","This TV simply posts comments to the log and then skips the remainder of the code to go to the test case cleanup.","In some embodiments, the general usage of this test verb within the script would be as shown below: In general, the test engineer would author a complete script, execute the script one time and determine that there was a Bug in the software. At that point, the BUG TV would be inserted typically as the first line of code, to record the fact of the bug to the logfile and skip the remainder of the test. This line of code would be removed upon the bug being corrected so that the test script again executed. It is simply a short term placeholder of sorts.",{"@attributes":{"id":"P-d0e5669","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"TEST_CASE_START(\u201cTC DataTable 14\u201d)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"KNOWN_TO_FAIL_BUG(\u201c\u201cBUG - 1734 - End Call Softkey"]},{"entry":[{},"not visible during emergency call\u201d);"]},{"entry":[{},"MORE_TESTVERBS(\u2009);"]},{"entry":[{},"MORE_TESTVERBS(\u2009);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"TEST_CASE_CLEANUP(iStatus);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"4.1.7 DELAY(time)","This TV simply waits the specified amount of time before releasing control to the next line of code.","The parameter that is passed to this TV has the following characteristics:\n\n","4.1.8 NOT(another TV)","This TV performs the converse of another TV and takes care of correct logging and error handling. For example, if VERIFY_OBJECT(\u201caHat\u201d) was used to verify that a bitmap depicting a hat was displayed on the screen, the command shown below would be used to verify that the bitmap was NOT present on the screen.\n\n","4.2 Navigation Test Verbs","This category of TV's is platform independent to the extent that it is typically used with a menued UI implementation. It is very platform dependent in it's implementation, as the characteristics of each platform are accessed by the TV's.","4.2.1 NAVIGATE_HOME(NULL)","This TV takes the steps necessary to return the device to its \u201chome\u201d or default screen. This is the screen from which all other navigation takes place. For the navigation in general, there will be a datatable maintained as one sheet of an Excel spreadsheet which will have a unique name for every screen that can be navigated to (including \u201chome\u201d), along with a title, tag or other unique identifier that can be used to verify navigation to that screen and the key sequence (from the home screen) that is required to navigate to that screen. This particular TV will lookup the screen name (likely \u201chome\u201d) on the Excel spreadsheet and execute the associated key sequence and then verify that the navigation to the home screen was successful. For this particular TV, it is likely that the navigation is simply a sequence of END or CLEAR keys. This TV is typically implemented because it is quite frequently used. It could be replaced by the following TV (NAVIGATE_TO_SCREEN(\u201cHome\u201d)).","In some embodiments, the general usage of this test verb within the script would be as shown below:\n\n",{"@attributes":{"id":"P-d0e5928","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"133pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["Screen","English","Spanish","Navigation"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Home","Names","nombre","<End><End> <Clear>"]},{"entry":["Names","Add","sumar","Right><Down><Down><Down><Down>"]},{"entry":["Add","Number","numero","<Left>"]},{"entry":"Number"},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}}}},"4.2.2 NAVIGATE_TO_SCREEN(sz)","This TV takes the steps necessary to navigate to the specified screen. A single parameter, which is the screen to which to navigate is passed to this routine. The first action taken within this TV will be to navigate to the Home screen, after which the navigation to the desired screen will take place. The associated Excel spreadsheet contains entries which specify all navigation from the \u201chome\u201d screen.","The parameter that is passed to this TV has the following characteristics:\n\n","4.3 Verification Test Verbs","This category of TV's is used to perform verification activities on the device.","4.3.1 VERIFY_CHOICE_ITEMS(list)","This TV verifies that a list of choice items supplied by the call exists on the display. It will pass if the items are visible whether they are selected (reverse highlighted or color coded) or not selected. The TV will scroll as necessary to view the complete list. The choice items must be valid screen names from the datatable (Excel spreadsheet mentioned in the previous section).",{"@attributes":{"id":"P-d0e6117","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"char *aList[10] = {\u201cUnmute\u201d,NULL};"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"VERIFY_CHOICE_ITEMS(aList);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{},"ul":{"@attributes":{"id":"ul200015","list-style":"none"},"li":{"@attributes":{"id":"ul200016-li00016"},"ul":{"@attributes":{"id":"ul200016","list-style":"none"},"li":["NAVIGATE_TO_SCREEN(\u201cNames Add Number\u201d);","VERIFY_CHOICE_ITEMS(aList);\n\nThis script usage would in general be supported by a character array declared within the script, an example of which would be:\n"]}}}},{"@attributes":{"id":"P-d0e6206","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00014","num":"00014"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"char *aList[10] = {\u201cGeneral\u201d, \u201cMobile\u201d, \u201cHome\u201d, \u201cWork\u201d,"]},{"entry":[{},"\u201cFax\u201d, NULL};"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"4.3.2 VERIFY_CHOICE_ITEMS_SELECTED(list)","This TV verifies that a list of choice items supplied by the call exists on the display, and that the items are in the required order and selected (reverse highlighted or color coded) as the cursor passes over each item. The choice items must be valid screen names from the datatable (Excel spreadsheet mentioned in the previous section).",{"@attributes":{"id":"P-d0e6275","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00015","num":"00015"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"char *aList[10] = {\u201cUnmute\u201d,NULL};"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"VERIFY_CHOICE_ITEMS(aList);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{},"ul":{"@attributes":{"id":"ul200017","list-style":"none"},"li":{"@attributes":{"id":"ul200018-li00018"},"ul":{"@attributes":{"id":"ul200018","list-style":"none"},"li":["NAVIGATE_TO_SCREEN(\u201cNames Add Number\u201d);","VERIFY_CHOICE_ITEMS(aList);\n\nThis script usage would in general be supported by a character array declared within the script, an example of which would be:\n"]}}}},{"@attributes":{"id":"P-d0e6364","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00016","num":"00016"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"char *aList[10]  = {\u201cGeneral\u201d, \u201cMobile\u201d, \u201cHome\u201d, \u201cWork\u201d,"]},{"entry":[{},"\u201cFax\u201d, NULL};"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"4.3.3 VERIFY_INCOMING_CALL(timeout)","This TV will continue to attempt to verify that an incoming call is detected until the specified timeout period is exceeded. Internal to this test verb, it may look for objects, look for text, check LED's or use whatever method a particular phone requires for verification of an incoming call.\n\n","4.3.4 VERIFY_TEXT(sz)","This TV verifies that the specified text in the fonts declared in the font tables appears on the display. The parameters passed to this TV has the following format:\n\n","The fonts that are searched for this test verb can be any of those specifically listed in the platform font table. The search region is the default search region set in the platform layer.","If a specific font or a specific search region must be verified, the _EXT TV must be developed as discussed in section 5.","4.3.5 VERIFY_TEXT_SELECTED(sz)","This TV verifies that the specified text. The parameter passed to this TV has the following format:\n\n","This TV can be thought to be the opposite of the VERIFY_TEXT TV, as for monochrome screens, typically a single routine is used for this with the foreground and background just reversed. In other instances, the same TV code is used, with a simple if statement that switches the search flow based on foreground\/background requirements.","The script usage and supporting data are the same as the previous TV.","4.3.6 READ_TEXT(buf)","This TV is typically only used in an _EXT format (as described below). It reads the screen for the data and returns that information found.\n\n","The above usage shows a general read text, which could be used to cycle through the entire screen and a pattern of different fonts, which in many cases is not practical, thus the typical usage of this as a _EXT verb.","4.3.7 VERIFY_OBJECT(sz)","This TV verifies the characteristics associated with anything that can be deemed an object. Object types include Icons, Softkeys, Images, Tones, LED's, etc. The string that is passed to this routine contains a key that is used internal to the routine to determine the object type. This in turn leads to the area of the Excel spreadsheet that is used to gather the object characteristics relative to each object type verification.\n\n","This test verb would be supported for the above usage by two different sheets in the Excel file. One which contains the Icons and their associated properties and one the contains the SoftKeys and their associated properties. In the first case above, the lookup would be performed against the Icon sheet because of the \u201cIC_\u201d prefix in the second case, the lookup is against the SoftKey sheet (\u201cSK_\u201d prefix). The associated tables in Excel for each case would take a form such as follows;",{"@attributes":{"id":"P-d0e6608","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00017","num":"00017"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Icon Properties Data Sheet"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ICON","Bitmap","Region"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"ConnectedIcon","ConnectedIcon.bmp","0, 0, 100, 20"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"SoftKey Properties Data Sheet"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"49pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Key Name","Font","Foreground","Background","Reqion"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["Menu","Courier.fnt","Black","White","0, 0, 20, 20"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}}]}}},"4.4 WaitFor Test Verbs","This category of is used to provide the capability to wait a specified amount of time for an event to occur and declare an error if the event does not occur in the specified timeframe.","4.4.1 WAIT_FOR_TEXT(sz timeout)","This TV has the identical form to VERIFY_TEXT, where the first parameter specifies the text. The difference is that instead of the immediate check performed by VERIFY_TEXT, this TV will continue to retry the verification activity until a specified timeout period is elapsed.\n\n","4.4.2 WAIT_FOR_OBJECT(sz, timeout)","This TV has the identical form to VERIFY_OBJECT, where the first parameter specifies the object. The difference is that instead of the immediate check performed by VERIFY_OBJECT, this TV will continue to retry the verification activity until a specified timeout period is elapsed.\n\n","4.5 Cursor Test Verbs","This category of TV's is used to perform various operations with the cursor.","4.5.1 CHECK_CURSOR_BLINK(x,y)","This test verb verifies that the cursor is blinking at the specified location.","The location must be expressed in X and Y coordinates, and is typically found in the Excel Spreadsheet.","The parameters for the TV are as follows:\n\n","In some embodiments, the general usage of this test verb within the script would be as shown below:\n\n","4.5.2 CURSOR_MUST_NOT_EXIST(x,y)","This test verb verifies that the cursor does not exist at the specified location.","The location must be expressed in X and Y coordinates, and is typically found in the Excel Spreadsheet.","The parameters for the TV are as follows:\n\n","4.6 Menu Item Selection Test Verbs","This TV is used to perform menu selection.","4.6.1 SELECT_MENU_ITEM(sz)","This test verb selects a particular menu item.","The parameters for the TV are as follows:\n\n","In some embodiments, the general usage of this test verb within the script would be as shown below:\n\n","4.7 Phone Related Test Verbs","This category of TV's is related to specific phone actions.","4.7.1 SET_POWER(ival)","This TV sets the power of the phone to a specified state.","The parameter for the TV is as follows:\n\n","4.7.2 POWER_CYCLE_PHONE(NULL)","This TV powers off the phone and then powers on the phone.","In some embodiments, the general usage of this test verb within the script would be as shown below:\n\n","4.7.3 RESET_AUDIO(NULL)","This TV resets the audio detection circuitry of the test station (if so equipped). This TV is typically used in conjunction with a VERIFY_OBJECT call.","In some embodiments, the general usage of this test verb within the script would be as shown below:\n\n","4.7.4 DISCONNECT_BATTERY(NULL)","This TV disconnects the battery from the phone.","In some embodiments, the general usage of this test verb within the script would be as shown below:\n\n","In this case, Spanish is the language selected from a menu item selection. The battery is then disconnected and reconnected and it is then verified that the language selection remains Spanish. The SET_LANGUAGE TV is the key to the various routines that the lookup table in the Excel spreadsheet is to be used to find the translation of the \u201cConnected\u201d phrase in the Spanish language and that is the verification item.","4.7.5 CONNECT_BATTERY(NULL)","This TV reconnects the battery to the phone.","In some embodiments, the general usage of this test verb within the script would be as shown above:","4.7.6 UNLOCK_PHONE(NULL)","This TV unlocks the phone.","In some embodiments, the general usage of this test verb within the script would be as shown below:\n\n","4.7.7 LOCK_PHONE(NULL)","This TV unlocks the phone.","In some embodiments, the general usage of this test verb within the script would be as shown above:","4.7.8 LOG_PHONE_CONFIGURATION(NULL)","This TV logs various information about the phone, the TV is somewhat dependent on the particular phone that is used and what information is desired to be logged when this TV is selected. Typically the TV will navigate to various menus and read information from the screen such as the software version, browser version, ESN, etc.","In some embodiments, the general usage of this test verb within the script would be as shown below:\n\n","4.7.9 SET_OBJECT(sz)","This TV is used to act upon input objects with characteristics defined in the spreadsheet. Objects can include strings of text, numeric strings, discretes, audio, etc. The string passed to the TV indexes into a table in the spreadsheet which can contain a column or columns that are used internal to the implementation to determine the actions associated with the particular object.","In some embodiments, the general usage of this test verb within the script would be as shown below\n\n","In the case above, the actions necessary to answer a call on a particular phone (keypress, keypresses, touchpad, etc.) would be performed when this command is utilized.","Allowable Input Parameters for this TV are:",{"@attributes":{"id":"P-00280","num":"none"},"ul":{"@attributes":{"id":"ul200057","list-style":"none"},"li":["AnswerCall\u2014Must perform actions necessary to answer a call to the mobile.","EndCall\u2014Must perform the actions necessary to terminate a call to the mobile."]}},"4.8 Key Press Test Verbs","This category of TV's is used to stimulate the keypad of the phone and input either text or numerics dependent on selection.","4.8.1 DIAL_NUMBER(sz)","This TV sends the specified numeric sequence to the phone, and hits the key necessary to \u201csend\u201d the numeric string to the network.","The parameter for the TV is as follows:\n\n","In some embodiments, the general usage of this test verb within the script would be as shown below:\n\n","4.8.2 SEND_STRING(sz)","This TV set the specified sequence of keys to the phone.","The parameter for the TV is as follows:\n\n","In some embodiments, the general usage of this test verb within the script would be as shown below:\n\n","Within the TV, the determination is made of what keys to strike and how many times to strike the key to obtain the desired sequence, which can be alpha, or alpha and numeric. If the current screen is not a text entry screen, the multiple key strikes to obtain the specified alpha character could be represented as multiple instances of the same number. The TV contains the intelligence to wait the required time between keystrokes to ensure the proper string is obtained when on an alpha entry screen.","4.8.3 PRESS_KEYS(sz)","This TV will use the Excel Spreadsheet to perform a lookup of the specified key and press it. It is typically used to specify a named softkey for pressing via looking up what key activates that particular softkey, or to simply press a sequence of keys a single time.","The parameter for the TV is as follows:\n\n","In some embodiments, the general usage of this test verb within the script would be as shown below:\n\n","This TV in the first case above is supported by a sheet in the data file that specifies the associated key to press.","4.8.4 HOLD_KEY(sz)","This TV is used to press a specified key without releasing it.","The parameters for the TV are as follows:\n\n","In some embodiments, the general usage of this test verb within the script would be as shown below:\n\n","4.8.5 RELEASE_KEY(sz)","This TV is used to release a specified key=t.","The parameters for the TV are as follows:\n\n","In some embodiments, the general usage of this test verb within the script would be as shown above.","EXT Test Verbs","A certain category of test verbs is quite often required, that being an extended test verb and is denoted by a suffix of _EXT to one of the TV's defined in the previous section. The typical list of TV's that would have the EXT suffix would be as follows:\n\n","These TV's typically will get the _EXT suffix to specifically denote font and search region characteristics. One example (VERIFY_TEXT) will be shown below. The others follow the same format.\n\n","This TV verifies that the specified text in the specified font in the specified region appears on the screen. The parameters passed to this TV has the following format:\n\n","In some embodiments, the general usage of this test verb within the script would be as shown below:\n\n","As shown in , one aspect of the present invention provides a computerized method  for testing, from a host computer, a function of a wireless information-processing device. Method  provides an architecture having a set of test commands , the test commands  including a set of one or more stimulation commands  and a set of one or more result-testing commands  and defining a set of wireless test verbs from combinations of the test commands . This allows the test programmer to define an overall test program  that uses the wireless test verbs  in writing a test program  that specifies an overall function that will extensively test a wireless information processing device-under-test . The method further includes executing  a program that includes a plurality of wireless test verb instructions  and outputting  a result of the program . The method , further includes executing one or more test programs  on the host test computer.","In some embodiments, the wireless information processing device tested by an executing method  is a wireless telephone. In some other embodiments, the wireless information processing device tested by an executing method  is a personal data assistant (PDA).","In various embodiments, the stimulating  of method  includes a dialing test for performance on a wireless telephone when the method  is executed. In some embodiments, the receiving of a method  embodiment includes receiving a ringing signal.","In some embodiments of method , the test verbs  include test verbs  for stimulating  a wireless personal data assistant (PDA). In some other embodiments of method , the test verbs  include test verbs  for stimulating  a wireless phone.","In some embodiments, the method  further includes connecting the wireless information-processing device to one or more networks. In various method  embodiments, the one or more networks the wireless information-processing device can be connected to include a local area network, a wide area network, the internet, a telephone network, and a peer-to-peer network.","In various embodiments of method , the test verbs  include test verbs  defined to perform tasks that include looping, looping until certain criteria is met, posting remarks to an execution log, skipping steps in a test sequence in various ways, pausing test program or session execution for a specified period of time, and testing for an inverse result another test verb is intended to test for (see \u201cNOT\u201d test verb described above).","Other aspects of some embodiments of the method  include test verbs  for navigating through a graphical user interface of a wireless information-processing device, verifying the existence of specified items in a displayed list, verifying the existence and order of specified items in a displayed list, waiting for and verifying an incoming telephone call, and verifying that specified text is displayed and in the proper font. Some other embodiments of the method  include test verbs  for verifying that specified text is selected, reading displayed text, verifying the characteristics associated with a displayed object, waiting for certain events to occur, waiting for a specified event to occur, checking if a cursor is blinking, and checking if a cursor exists. Further, some embodiments of a method  include test verbs  for determining the existence of static, blinking, and moving pixel patterns.","Some method  embodiments include test verbs  for selecting menu items, setting power options, cycling power settings, manipulating audio options, connecting and disconnecting a power source, locking and unlocking a device, logging configuration settings, and acting upon input objects. In some further embodiments, method  includes test verbs  for dialing phone numbers, entering text strings, simulating pressing of keys and buttons, simulating the holding of keys and buttons for a specified duration, simulating the release of keys and buttons","In some embodiments, the method  also includes wireless test verbs  for causing numeric, alphanumeric, and iconic data to be entered into the wireless information-processing device includes simulating key-presses, spoken words, and handwriting strokes.","Another aspect of the present invention, shown in , provides a computer readable media  having a instructions coded thereon for causing a suitably configured information handling system  to perform tests on a wireless information-processing device .","Yet another aspect of the present invention, again shown in , provides a computerized system  for testing a function of an information-processing system . The system includes a memory , an automated test tool , a set of test commands  stored in the memory , wherein each one of the test commands  includes a set of one or more stimulation commands  and a set of one or more result-testing commands . The system also includes individual wireless test verb definitions  stored in the memory  that defines a set of wireless test verbs  out of combinations of the test commands . A programmer then generates a wireless test program  stored in the memory  that includes a plurality of wireless test verb instructions . The system also includes a comparator  that generates test results based on a comparison of test result signals to desired result values. The system also includes an output port  that drives stimulation signals  based on the execution of the test program , an input port  that receives result signals  based on behavior of a system-under-test , and an output device  that presents a result of the test program . The system also includes an output device  for presenting the test results of a test program .","In some embodiments, the computerized system  is configured for testing wireless information processing devices including wireless telephones and personal digital assistants (PDA).","It is understood that the above description is intended to be illustrative, and not restrictive. Many other embodiments will be apparent to those of skill in the art upon reviewing the above description. The scope of the invention should, therefore, be determined with reference to the appended claims, along with the full scope of equivalents to which such claims are entitled."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"P-00016","num":"00016"},"figref":"FIG. 1","b":"100"},{"@attributes":{"id":"P-00017","num":"00017"},"figref":"FIG. 2","b":"200"},{"@attributes":{"id":"P-00018","num":"00018"},"figref":"FIG. 3","b":"300"},{"@attributes":{"id":"P-00019","num":"00019"},"figref":"FIG. 4","b":"400"},{"@attributes":{"id":"P-00020","num":"00020"},"figref":"FIG. 5"},{"@attributes":{"id":"P-00021","num":"00021"},"figref":"FIG. 6"},{"@attributes":{"id":"P-00022","num":"00022"},"figref":"FIG. 7"},{"@attributes":{"id":"P-00023","num":"00023"},"figref":"FIG. 8"},{"@attributes":{"id":"P-00024","num":"00024"},"figref":"FIG. 9","b":"900"}]},"DETDESC":[{},{}]}
