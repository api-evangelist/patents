---
title: Magnified texture-mapped pixel performance in a single-pixel pipeline
abstract: A system and a method for improving magnified texture-mapped pixel performance in a single-pixel pipeline. A plurality of textured pixel addresses corresponding to a plurality of pixels may be generated. A FIFO or other memory unit may be used to linearly order the plurality of textured pixel addresses. Two consecutive textured pixel addresses out of the plurality of textured pixel addresses may be examined if they map to a common set of texels in texture space. The two consecutive textured pixel addresses may be merged together and propagated down the pipeline if they map to the common set of texels. However, only a first of the two consecutive textured pixel addresses may be propagated down the pipeline if the two consecutive textured pixel addresses do not map to a common set of texels. Texel data may be generated in response to receiving either the combined texel structure or the first of the two textured pixel addresses. The texel data may be filtered using one or more texture filters in order to generate texture values. The next two textured pixel addresses that may be examined by the merge unit include the subsequent two consecutive textured pixel addresses, or a second of the two consecutive textured pixel addresses and a subsequent consecutive textured pixel address.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07145570&OS=07145570&RS=07145570
owner: Sun Microsystems, Inc.
number: 07145570
owner_city: Santa Clara
owner_country: US
publication_date: 20021212
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CONTINUATION DATA","CROSS REFERENCE TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["This is a continuation-in-part of application Ser. No. 10\/094,934 titled \u201cImproving Magnified Texture-Mapped Pixel Performance in a Single-Pixel Pipeline\u201d filed Mar. 11, 2002 now U.S. Pat. No. 6,847,372, whose inventors are Brian D. Emberling and Michael G. Lavelle, and which is assigned to Sun Microsystems Corporation.","The following patents and\/or patent applications are related to the present application.","U.S. patent application Ser. No. 10\/094,934 titled \u201cImproving Magnified Texture-Mapped Pixel Performance in a Single-Pixel Pipeline\u201d filed Mar. 11, 2002, whose inventors are Brian D. Emberling and Michael G. Lavelle, and which is assigned to Sun Microsystems Corporation.","1. Field of the Invention","This invention relates generally to the field of computer graphics and, more particularly, to performance optimization of graphics pipelines.","2. Description of the Related Art","A computer system typically relies upon its graphics system for producing visual output on the computer screen or display device. Early graphics systems were only responsible for taking what the processor produced as output and displaying it on the screen. In essence, they acted as simple translators or interfaces. Modern graphics systems, however, incorporate graphics processors with a great deal of processing power. They now act more like coprocessors rather than simple translators. This change is due to the recent increase in both the complexity and amount of data being sent to the display device. For example, modern computer displays have many more pixels, greater color depth, and are able to display more complex images with higher refresh rates than earlier models. Similarly, the images displayed are now more complex and may involve advanced techniques such as anti-aliasing and texture mapping.","As a result, without considerable processing power in the graphics system, the CPU would spend a great deal of time performing graphics calculations. This could rob the computer system of the processing power needed for performing other tasks associated with program execution and thereby dramatically reduce overall system performance. With a powerful graphics system, however, when the CPU is instructed to draw a box on the screen, the CPU is freed from having to compute the position and color of each pixel. Instead, the CPU may send a request to the video card stating \u201cdraw a box at these coordinates.\u201d The graphics system then draws the box, freeing the processor to perform other tasks.","Generally, a graphics system in a computer (also referred to as a graphics system) is a type of video adapter that contains its own processor to boost performance levels. These processors are specialized for computing graphical transformations, so they tend to achieve better results than the general-purpose CPU used by the computer system. In addition, they free up the computer's CPU to execute other commands while the graphics system is handling graphics computations. The popularity of graphical applications, and especially multimedia applications, has made high performance graphics systems a common feature of computer systems. Most computer manufacturers now bundle a high performance graphics system with their systems.","Since graphics systems typically perform only a limited set of functions, they may be customized and therefore far more efficient at graphics operations than the computer's general-purpose central processor. While early graphics systems were limited to performing two-dimensional (2D) graphics, their functionality has increased to support three-dimensional (3D) wire-frame graphics, 3D solids, and now includes support for three-dimensional (3D) graphics with textures and special effects such as advanced shading, fogging, alpha-blending, and specular highlighting.","A modern graphics system may generally operate as follows. First, graphics data is initially read from a computer system's main memory into the graphics system. The graphics data may include geometric primitives such as information specifying vertex parameters of polygons (e.g., triangles), NURBS (Non-Uniform Rational B-Splines), sub-division surfaces, voxels (volume elements) and other types of data. The various types of data are typically converted into triangles (e.g., three vertices having at least position and color information). Then, transform and lighting calculation units receive and process the triangles. Transform calculations typically include changing a triangle's coordinate axis, while lighting calculations typically determine what effect, if any, lighting has on the color of triangle's vertices. The transformed and lit triangles may then be conveyed to a clip test\/back face culling unit that determines which triangles are outside the current parameters for visibility (e.g., triangles that are off screen). These triangles are typically discarded to prevent additional system resources from being spent on non-visible triangles.","Next, the triangles that pass the clip test and back-face culling may be translated into screen space. The screen space triangles may then be forwarded to the set-up and draw processor for rasterization. Rasterization typically refers to the process of generating actual pixels (or samples) by interpolation from the vertices. The rendering process may include interpolating slopes of edges of the polygon or triangle, and then calculating pixels or samples on these edges based on these interpolated slopes. Pixels or samples may also be calculated in the interior of the polygon or triangle.","As noted above, in some cases samples are generated by the rasterization process instead of pixels. A pixel typically has a one-to-one correlation with the hardware pixels present in a display device, while samples are typically more numerous than the hardware pixel elements and need not have any direct correlation to the display device. Where pixels are generated, the pixels may be stored into a frame buffer, or possibly provided directly to refresh the display. Where samples are generated, the samples may be stored into a sample buffer or frame buffer. The samples may later be accessed and filtered to generate pixels, which may then be stored into a frame buffer. Alternatively, the samples may be filtered to form pixels that are provided directly to refresh the display without any intervening frame buffer storage of the pixels.","The pixels are converted into an analog video signal by digital-to-analog converters. If samples are used, the samples may be read out of sample buffer or frame buffer and filtered to generate pixels, which may be stored and later conveyed to digital to analog converters. The video signal from the converters is conveyed to a display device such as a computer monitor, LCD display, or projector.","Many implementations of graphics systems may have a limited amount of space available for implementing a graphics processor. Improvements are possible in the implementation of a graphics pipeline, especially the processing of textured pixel addresses. Therefore it would be advantageous to improve the performance of a graphics processor without generating many additional components.","The problems set forth above may at least in part be solved in some embodiments by a system or method for improving magnified texture-mapped pixel performance in a single-pixel pipeline.","A graphics pipeline may be operable to process textured pixel addresses. The graphics pipeline may comprise a texture address unit, a texture buffer, and one or more texture filters. The texture address unit may comprise one or more texture address generators and a merge unit. Each of these units in the graphics pipeline may be coupled together through FIFO memories.","One or more texture address generators can generate a plurality of textured pixel addresses corresponding to a plurality of pixels. In other words, each of the plurality of pixels may have a corresponding textured pixel address. The generation of each textured pixel address may be performed using any of the algorithms known in the art. Two consecutive textured pixel addresses may then be passed to a next unit in the pipeline (e.g., the merge unit). A FIFO or another memory unit may be used to store the textured pixel addresses propagated from the one or more textured address generators. As a result, the textured pixel addresses may be ordered linearly. The FIFO may be able to store two or more textured pixel addresses at the same time.","The merge unit may be used to examine the two consecutive textured pixel addresses received from the one or more texture address generators. This examination may determine if the two consecutive textured pixel addresses correspond to a common set of texels in texture space (or map to a same texel). The merge unit may merge the two consecutive textured pixel addresses if the two consecutive textured pixel addresses correspond to the common set of texels. Merging may operate to create a combined texel structure.","The merge unit may access the FIFO by using a FIFO read pointer, such as a ReadPtr. The merge unit is operable to examine the two consecutive textured pixel addresses in the FIFO without affecting the ordering of the textured pixel addresses in the FIFO. For example, the merge unit may be operable to peek at the two consecutive textured pixel addresses without removing the two consecutive textured pixel addresses from the FIFO. For example, in a case where the two consecutive textured pixel addresses are to be merged together, the merge unit may access the FIFO at ReadPtr and ReadPtr+1. As a result, the two consecutive textured pixel addresses in the FIFO may be accessed at the start of the FIFO in order to be examined, and the FIFO read pointer may be repositioned to point to a third and a fourth consecutive textured pixel addresses. In other words, the subsequent third and fourth consecutive textured pixel addresses may be the next two consecutive textured pixel addresses. The merge unit may then merge the two consecutive textured pixel addresses.","On the other hand, the two consecutive textured pixel addresses may not map to the same texel. In this case, only the first of the two consecutive textured pixel addresses may be propagated to the next stage of the pipeline. In other words, the merge unit may not merge the two consecutive textured pixel addresses. The merge unit may access the FIFO at ReadPtr to retrieve the first of the two consecutive textured pixel addresses. The second of the two consecutive textured pixel addresses may remain in the FIFO and be available for examination with a subsequent consecutive textured pixel address. In this case, the value of the ReadPtr may increment only by one value. Furthermore, the next two consecutive textured pixel addresses to be examined may include the second of the two consecutive textured pixel addresses and the subsequent, or a third, consecutive textured pixel address.","The texture buffer may receive the combined texel structure from the merge unit. The texture buffer may generate texel data for the two consecutive textured pixel addresses. Specifically, the texel data may be generated by processing the combined texel structure if the two consecutive textured pixel addresses map to the same texel. Alternatively, texel data may be generated for only the first of the two consecutive textured pixel addresses. Specifically, texel data may be generated by processing the first of the two consecutive textured pixel addresses if the two consecutive textured pixel addresses do not map to the same texel.","The texture buffer may be operable to generate texel data in the same amount of time regardless of whether it receives the combined texel structure (including the merged two consecutive textured pixel addresses) or the first of the two consecutive textured pixel addresses. As a result, the texel data may contain data for the two consecutive textured pixel addresses or only the first of the two textured pixel addresses. In both cases the texel data may be propagated to the next unit in the pipeline, e.g., the one or more texture filters.","Next, the one or more texture filters may filter the texel data received from the texture buffer in order to generate at least one texture value. The one or more texture filters may generate a first and a second texture value if the one or more texture filters receive the combined texture structure. Alternatively, the one or more texture filters may generate only the first texture value if the one or more texture filters receive only the first of the two consecutive textured pixel addresses.","In another embodiment, the system may further include a split unit, which may be operable to receive the texel data from the texture buffer and split the texel data into first texel data and second texel data, collectively referred to as the split texel data. The split texel data may be propagated to the one or more texture filters. For example, if examining determines that the two consecutive textured pixel addresses map to the same texel, the split unit may split the texel data. However, if examining determines that the two consecutive textured pixel addresses do not map to the same texel, the split unit may propagate only the first texel data to the one or more texture filters.","While the invention is susceptible to various modifications and alternative forms, specific embodiments thereof are shown by way of example in the drawings and will herein be described in detail. It should be understood, however, that the drawings and detailed description thereto are not intended to limit the invention to the particular form disclosed, but on the contrary, the intention is to cover all modifications, equivalents, and alternatives falling within the spirit and scope of the present invention as defined by the appended claims. Note, the headings are for organizational purposes only and are not meant to be used to limit or interpret the description or claims. Furthermore, note that the word \u201cmay\u201d is used throughout this application in a permissive sense (i.e., having the potential to, being able to), not a mandatory sense (i.e., must).\u201d The term \u201cinclude\u201d, and derivations thereof, mean \u201cincluding, but not limited to\u201d. The term \u201cconnected\u201d means \u201cdirectly or indirectly connected\u201d, and the term \u201ccoupled\u201d means \u201cdirectly or indirectly connected\u201d.","Incorporation By Reference","U.S. patent application Ser. No. 10\/094,934 titled \u201cImproving Magnified Texture-Mapped Pixel Performance in a Single-Pixel Pipeline\u201d and filed Mar. 11, 2002 (5181-88000) is hereby incorporated by reference in its entirety as though fully and completely set forth herein.","Computer System\u2014",{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 1","b":"80"},"As shown, the computer system  includes a system unit  and a video monitor or display device  coupled to the system unit . The display device  may be any of various types of display monitors or devices (e.g., a CRT, LCD, or gas-plasma display). Various input devices may be connected to the computer system, including a keyboard  and\/or a mouse , or other input device (e.g., a trackball, digitizer, tablet, six-degree of freedom input device, head tracker, eye tracker, data glove, or body sensors). Application software may be executed by the computer system  to display graphical objects on display device .","Computer System Block Diagram\u2014",{"@attributes":{"id":"p-0045","num":"0044"},"figref":["FIG. 2","FIG. 1"],"b":["80","102","104","104","106","104"]},"Host processor  may include one or more processors of varying types, e.g., microprocessors, multi-processors and CPUs. The system memory  may include any combination of different types of memory subsystems such as random access memories (e.g., static random access memories or \u201cSRAMs,\u201d synchronous dynamic random access memories or \u201cSDRAMs,\u201d and Rambus dynamic random access memories or \u201cRDRAMs,\u201d among others), read-only memories, and mass storage devices. The system bus or host bus  may include one or more communication or host computer buses (for communication between host processors, CPUs, and memory subsystems) as well as specialized subsystem buses.","In , a graphics system  is coupled to the high-speed memory bus . The graphics system  may be coupled to the bus  by, for example, a crossbar switch or other bus connectivity logic. It is assumed that various other peripheral devices, or other buses, may be connected to the high-speed memory bus . It is noted that the graphics system  may be coupled to one or more of the buses in computer system  and\/or may be coupled to various types of buses. In addition, the graphics system  may be coupled to a communication port and thereby directly receive graphics data from an external source, e.g., the Internet or a network. As shown in the figure, one or more display devices  may be connected to the graphics system .","Host CPU  may transfer information to and from the graphics system  according to a programmed input\/output (I\/O) protocol over host bus . Alternately, graphics system  may access system memory  according to a direct memory access (DMA) protocol or through intelligent bus mastering.","A graphics application program conforming to an application programming interface (API) such as OpenGL\u00ae or Java 3D\u2122 may execute on host CPU  and generate commands and graphics data that define geometric primitives such as polygons for output on display device . Host processor  may transfer the graphics data to system memory . Thereafter, the host processor  may operate to transfer the graphics data to the graphics system  over the host bus . In another embodiment, the graphics system  may read in geometry data arrays over the host bus  using DMA access cycles. In yet another embodiment, the graphics system  may be coupled to the system memory  through a direct port, such as the Advanced Graphics Port (AGP) promulgated by Intel Corporation.","The graphics system may receive graphics data from any of various sources, including host CPU  and\/or system memory , other memory, or from an external source such as a network (e.g. the Internet), or from a broadcast medium, e.g., television, or from other sources.","Note while graphics system  is depicted as part of computer system , graphics system  may also be configured as a stand-alone device (e.g., with its own built-in display). Graphics system  may also be configured as a single chip device or as part of a system-on-a-chip or a multi-chip module. Additionally, in some embodiments, certain of the processing operations performed by elements of the illustrated graphics system  may be implemented in software.","Graphics System\u2014",{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 3","b":["112","112","112","14","18","20","22","24","112","26","28","14","18"]},"In some embodiments, one or more of these components may be removed. For example, the texture buffer may not be included in an embodiment that does not provide texture mapping. In other embodiments, all or part of the functionality incorporated in either or both of the media processor or the hardware accelerator may be implemented in software.","In one set of embodiments, media processor  is one integrated circuit and hardware accelerator is another integrated circuit. In other embodiments, media processor  and hardware accelerator  may be incorporated within the same integrated circuit. In some embodiments, portions of media processor  and\/or hardware accelerator  may be included in separate integrated circuits.","As shown, graphics system  may include an interface to a host bus such as host bus  in  to enable graphics system  to communicate with a host system such as computer system . More particularly, host bus  may allow a host processor to send commands to the graphics system . In one embodiment, host bus  may be a bi-directional bus.","Media Processor\u2014",{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIG. 4","b":["14","14","112","80","80","112","14"]},"Transformation refers to the spatial manipulation of objects (or portions of objects) and includes translation, scaling (e.g. stretching or shrinking), rotation, reflection, or combinations thereof. More generally, transformation may include linear mappings (e.g. matrix multiplications), nonlinear mappings, and combinations thereof.","Lighting refers to calculating the illumination of the objects within the displayed image to determine what color values and\/or brightness values each individual object will have. Depending upon the shading algorithm being used (e.g., constant, Gourand, or Phong), lighting may be evaluated at a number of different spatial locations.","As illustrated, media processor  may be configured to receive graphics data via host interface . A graphics queue  may be included in media processor  to buffer a stream of data received via the accelerated port of host interface . The received graphics data may include one or more graphics primitives. As used herein, the term graphics primitive may include polygons, parametric surfaces, splines, NURBS (non-uniform rational B-splines), sub-divisions surfaces, fractals, volume primitives, voxels (i.e., three-dimensional pixels), and particle systems. In one embodiment, media processor  may also include a geometry data preprocessor  and one or more microprocessor units (MPUs) . MPUs  may be configured to perform vertex transformation, lighting calculations and other programmable functions, and to send the results to hardware accelerator . MPUs  may also have read\/write access to texels (i.e. the smallest addressable unit of a texture map) and pixels in the hardware accelerator . Geometry data preprocessor  may be configured to decompress geometry, to convert and format vertex data, to dispatch vertices and instructions to the MPUs , and to send vertex and attribute tags or register data to hardware accelerator .","As shown, media processor  may have other possible interfaces, including an interface to one or more memories. For example, as shown, media processor  may include direct Rambus interface  to a direct Rambus DRAM (DRDRAM) . A memory such as DRDRAM  may be used for program and\/or data storage for MPUs . DRDRAM  may also be used to store display lists and\/or vertex texture maps.","Media processor  may also include interfaces to other functional components of graphics system . For example, media processor  may have an interface to another specialized processor such as hardware accelerator . In the illustrated embodiment, controller  includes an accelerated port path that allows media processor  to control hardware accelerator . Media processor  may also include a direct interface such as bus interface unit (BIU) . Bus interface unit  provides a path to memory  and a path to hardware accelerator  and video output processor  via controller .","Hardware Accelerator\u2014","One or more hardware accelerators  may be configured to receive graphics instructions and data from media processor  and to perform a number of functions on the received data according to the received instructions. For example, hardware accelerator  may be configured to perform rasterization, 2D and\/or 3D texturing, pixel transfers, imaging, fragment processing, clipping, depth cueing, transparency processing, set-up, and\/or screen space rendering of various graphics primitives occurring within the graphics data.","Clipping refers to the elimination of graphics primitives or portions of graphics primitives that lie outside of a 3D view volume in world space. The 3D view volume may represent that portion of world space that is visible to a virtual observer (or virtual camera) situated in world space. For example, the view volume may be a solid truncated pyramid generated by a 2D view window, a viewpoint located in world space, a front clipping plane and a back clipping plane. The viewpoint may represent the world space location of the virtual observer. In most cases, primitives or portions of primitives that lie outside the 3D view volume are not currently visible and may be eliminated from further processing. Primitives or portions of primitives that lie inside the 3D view volume are candidates for projection onto the 2D view window.","Set-up refers to mapping primitives to a three-dimensional viewport. This involves translating and transforming the objects from their original \u201cworld-coordinate\u201d system to the established viewport's coordinates. This creates the correct perspective for three-dimensional objects displayed on the screen.","Screen-space rendering refers to the calculations performed to generate the data used to form each pixel that will be displayed. For example, hardware accelerator  may calculate \u201csamples.\u201d Samples are points that have color information but no real area. Samples allow hardware accelerator  to \u201csuper-sample,\u201d or calculate more than one sample per pixel. Super-sampling may result in a higher quality image.","Hardware accelerator  may also include several interfaces. For example, in the illustrated embodiment, hardware accelerator  has four interfaces. Hardware accelerator  has an interface  (referred to as the \u201cNorth Interface\u201d) to communicate with media processor . Hardware accelerator  may receive commands and\/or data from media processor  through interface . Additionally, hardware accelerator  may include an interface  to bus . Bus  may connect hardware accelerator  to boot PROM  and\/or video output processor . Boot PROM  may be configured to store system initialization data and\/or control code for frame buffer . Hardware accelerator  may also include an interface to a texture buffer . For example, hardware accelerator  may interface to texture buffer  using an eight-way interleaved texel bus that allows hardware accelerator  to read from and write to texture buffer . Hardware accelerator  may also interface to a frame buffer . For example, hardware accelerator  may be configured to read from and\/or write to frame buffer  using a four-way interleaved pixel bus.","The vertex processor  may be configured to use the vertex tags received from the media processor  to perform ordered assembly of the vertex data from the MPUs . Vertices may be saved in and\/or retrieved from a mesh buffer .","The render pipeline  may be configured to rasterize 2D window system primitives and 3D primitives into fragments. A fragment may contain one or more samples. Each sample may contain a vector of color data and perhaps other data such as alpha and control tags. 2D primitives include objects such as dots, fonts, Bresenham lines and 2D polygons. 3D primitives include objects such as smooth and large dots, smooth and wide DDA (Digital Differential Analyzer) lines and 3D polygons (e.g. 3D triangles).","For example, the render pipeline  may be configured to receive vertices defining a triangle, to identify fragments that intersect the triangle.","The render pipeline  may be configured to handle full-screen size primitives, to calculate plane and edge slopes, and to interpolate data (such as color) down to tile resolution (or fragment resolution) using interpolants or components such as:","r, g, b (i.e., red, green, and blue vertex color);","r2, g2, b2 (i.e., red, green, and blue specular color from lit textures);","alpha (i.e. transparency);","z (i.e. depth); and","s, t, r, and w (i.e. texture components).","In embodiments using super-sampling, the sample generator  may be configured to generate samples from the fragments output by the render pipeline  and to determine which samples are inside the rasterization edge. Sample positions may be defined by user-loadable tables to enable stochastic sample-positioning patterns.","Hardware accelerator  may be configured to write textured fragments from 3D primitives to frame buffer . The render pipeline  may send pixel tiles defining r, s, t and w to the texture address unit . The texture address unit  may use the r, s, t and w texture coordinates to compute texel addresses (e.g. addresses for a set of neighboring texels) and to determine interpolation coefficients for the texture filter . The texel addresses are used to access texture data (i.e. texels) from texture buffer . The texture buffer  may be interleaved to obtain as many neighboring texels as possible in each clock. The texture filter  may perform bilinear, trilinear or quadlinear interpolation. The pixel transfer unit  may also scale and bias and\/or lookup texels. The texture environment  may apply texels to samples produced by the sample generator . The texture environment  may also be used to perform geometric transformations on images (e.g., bilinear scale, rotate, flip) as well as to perform other image filtering operations on texture buffer image data (e.g., bicubic scale and convolutions).","In the illustrated embodiment, the pixel transfer MUX  controls the input to the pixel transfer unit . The pixel transfer unit  may selectively unpack pixel data received via north interface , select channels from either the frame buffer  or the texture buffer , or select data received from the texture filter  or sample filter .","The pixel transfer unit  may be used to perform scale, bias, and\/or color matrix operations, color lookup operations, histogram operations, accumulation operations, normalization operations, and\/or min\/max functions. Depending on the source of (and operations performed on) the processed data, the pixel transfer unit  may output the processed data to the texture buffer  (via the texture buffer MUX ), the frame buffer  (via the texture environment unit  and the fragment processor ), or to the host (via north interface ). For example, in one embodiment, when the pixel transfer unit  receives pixel data from the host via the pixel transfer MUX , the pixel transfer unit  may be used to perform a scale and bias or color matrix operation, followed by a color lookup or histogram operation, followed by a min\/max function. The pixel transfer unit  may then output data to either the texture buffer  or the frame buffer .","Fragment processor  may be used to perform standard fragment processing operations such as the OpenGL\u00ae fragment processing operations. For example, the fragment processor  may be configured to perform the following operations: fog, area pattern, scissor, alpha\/color test, ownership test (WID), stencil test, depth test, alpha blends or logic ops (ROP), plane masking, buffer selection, pick hit\/occlusion detection, and\/or auxiliary clipping in order to accelerate overlapping windows.","Texture Buffer ","Texture buffer  may include several SDRAMs. Texture buffer  may be configured to store texture maps, image processing buffers, and accumulation buffers for hardware accelerator . Texture buffer  may have many different capacities (e.g., depending on the type of SDRAM included in texture buffer ). In some embodiments, each pair of SDRAMs may be independently row and column addressable.","Frame Buffer ","Graphics system  may also include a frame buffer . In one embodiment, frame buffer  may include multiple memory devices such as 3D-RAM memory devices manufactured by Mitsubishi Electric Corporation. Frame buffer  may be configured as a display pixel buffer, an offscreen pixel buffer, and\/or a super-sample buffer. Furthermore, in one embodiment, certain portions of frame buffer  may be used as a display pixel buffer, while other portions may be used as an offscreen pixel buffer and sample buffer.","Video Output Processor\u2014","A video output processor  may also be included within graphics system . Video output processor  may buffer and process pixels output from frame buffer . For example, video output processor  may be configured to read bursts of pixels from frame buffer . Video output processor  may also be configured to perform double buffer selection (dbsel) if the frame buffer  is double-buffered, overlay transparency (using transparency\/overlay unit ), plane group extraction, gamma correction, psuedocolor or color lookup or bypass, and\/or cursor generation. For example, in the illustrated embodiment, the output processor  includes WID (Window ID) lookup tables (WLUTs)  and gamma and color map lookup tables (GLUTs, CLUTs) . In one embodiment, frame buffer  may include multiple 3DRAM64s  that include the transparency overlay  and all or some of the WLUTs . Video output processor  may also be configured to support two video output streams to two displays using the two independent video raster timing generators . For example, one raster (e.g., A) may drive a 1280\u00d71024 CRT while the other (e.g., B) may drive a NTSC or PAL device with encoded television video.","DAC  may operate as the final output stage of graphics system . The DAC  translates the digital pixel data received from GLUT\/CLUTs\/Cursor unit  into analog video signals that are then sent to a display device. In one embodiment, DAC  may be bypassed or omitted completely in order to output digital pixel data in lieu of analog video signals. This may be useful when a display device is based on a digital technology (e.g., an LCD-type display or a digital micro-mirror display).","DAC  may be a red-green-blue digital-to-analog converter configured to provide an analog video output to a display device such as a cathode ray tube (CRT) monitor. In one embodiment, DAC  may be configured to provide a high resolution RGB analog video output at dot rates of 240 MHz. Similarly, encoder  may be configured to supply an encoded video signal to a display. For example, encoder  may provide encoded NTSC or PAL video to an S-Video or composite video television monitor or recording device.","In other embodiments, the video output processor  may output pixel data to other combinations of displays. For example, by outputting pixel data to two DACs  (instead of one DAC  and one encoder ), video output processor  may drive two CRTs. Alternately, by using two encoders , video output processor  may supply appropriate video input to two television monitors. Generally, many different combinations of display devices may be supported by supplying the proper output device and\/or converter for that display device.","Sample-to-Pixel Processing Flow","In one set of embodiments, hardware accelerator  may receive geometric parameters defining primitives such as triangles from media processor , and render the primitives in terms of samples. The samples may be stored in a sample storage area (also referred to as the sample buffer) of frame buffer . The samples are then read from the sample storage area of frame buffer  and filtered by sample filter  to generate pixels. The pixels are stored in a pixel storage area of frame buffer . The pixel storage area may be double-buffered. Video output processor  reads the pixels from the pixel storage area of frame buffer  and generates a video stream from the pixels. The video stream may be provided to one or more display devices (e.g. monitors, projectors, headmounted displays, and so forth) through DAC  and\/or video encoder .","The samples are computed at positions in a two-dimensional sample space (also referred to as rendering space). The sample space may be partitioned into an array of bins (also referred to herein as fragments). The storage of samples in the sample storage area of frame buffer  may be organized according to bins as illustrated in . Each bin may contain one or more samples. The number of samples per bin may be a programmable parameter.","Texture Space Partitioned into an Array of Bins\u2014",{"@attributes":{"id":"p-0089","num":"0088"},"figref":["FIG. 8A","FIG. 8A","FIG. 8A"],"b":["222","222"]},"Each textured pixel address may include U and V coordinates. The U and V coordinate each may include an integer and a fractional component. For example, referring to , the textured pixel address A may have (U, V) coordinates of (4.3, 4.8). For example, referring to the textured pixel address A, the integer component of the U coordinate of the textured pixel address A may have the value of 4 and the fractional component of the U coordinate of the textured pixel address A may have the value of 0.3.","In one embodiment, the two pixels, corresponding to the textured pixel addresses A and B respectively, may map to the same texel (or correspond to a common set of texels) if the integer component of the textured pixel address A is the same as the integer component of the textured pixel address B. The fractional components of the textured pixel address A and the textured pixel address B may be different.","When rendering textured mapped images, there may be a mixture of minified and magnified textured pixels. Although the ratio of minified versus magnified textured pixels may be equal, the percentage of pixels on the screen may be dominated by a few magnified triangles, i.e., that may be used to render the sky and ground in a flight simulator. Therefore, performance gains may be realized by using a method for improving magnified textured-mapped pixel performance in a single-pixel pipeline. In one embodiment, for each magnified pixel, each step in screen space may correspond to less then one texel step in texture space. Screen space may use X and Y coordinates for mapping pixels, whereas texture space may use U and V coordinates for mapping texels.","Texture Space Partitioned into an Array of Bins\u2014",{"@attributes":{"id":"p-0093","num":"0092"},"figref":["FIG. 8B","FIG. 8B"]},"In one embodiment, the textured pixel addresses A and B may not map to the same texel, or in other words, the textured pixel addresses A and B may not correspond to a common set of texels. Specifically, the integer component of the textured pixel address A may be different from the integer component of the textured pixel address B, resulting in a different texel, or a different set of texels, for each of the first textured pixel address A and the second textured pixel address B.","The textured pixel address A and a textured pixel address D may map to the same texel. The textured pixel address B and a textured pixel address C may map to another texel. The relationship between the textured pixel addresses A\u2013D will be explained below with reference to .","A Method for Improving Magnified Textured-Mapped Pixel Performance in a Single-Pixel Pipeline\u2014",{"@attributes":{"id":"p-0096","num":"0095"},"figref":["FIG. 9","FIG. 11A","FIG. 11A","FIG. 11A"],"b":["11","200","168","168","11","168","11"]},"In step , the two consecutive textured pixel addresses may be examined to determine if the two consecutive textured pixel addresses map to a same texel (or correspond to a common set of texels). For example, the textured pixel addresses A and B may map to the same texel, such as described above with reference to . In another example, the textured pixel addresses A and B may not map to the same texel, such as described above with reference to .","Referring now to  (or B), the two consecutive textured pixel addresses may be examined using the merge unit C. The merge unit C may receive the two consecutive textured pixel addresses from the one or more texture address generators A and B. This examination may determine if the two consecutive textured pixel addresses correspond to a common set of texels in the texture space. In one embodiment, this examination may be performed by control logic. The control logic may be included in the merge unit C, and may generate control bits that indicate the result of the examination.","In step , the two consecutive textured pixel addresses may be merged and propagated to a next pipeline stage if the examination indicates that the first textured pixel address and the second textured pixel address correspond to the common set of texels. As a result, the two consecutive textured pixel addresses may be merged together to create a combined texel structure , also referred to herein as a single result or two merged consecutive textured pixel addresses.","If the examination in  indicates that the two consecutive textured pixel addresses do not correspond to the same texel, then in  only the first of the two consecutive textured pixel addresses may be propagated to the next stage in the pipeline. The second of the two consecutive textured pixel addresses may be held back, e.g., the ReadPtr is incremented by 1 The second of the two consecutive textured pixel addresses may be examined with a subsequent consecutive textured pixel address out of the plurality of the textured pixel addresses. This process is described with more detail below with reference to .","In step , texel data  may be generated in response to receiving either 1) the combined texel structure  or 2) the first of the two consecutive textured pixel addresses. Referring now to , the texel data may be generated using a texture buffer , also referred to herein as a texture memory unit . In one embodiment, the texture buffer  may generate texel data  for one or more textured pixel addresses at the same time. For example, in step , only the first of the two consecutive textured pixel addresses may be propagated down to the texture buffer. In this case, the texture buffer may generate texel data corresponding to only one textured pixel address.","In step , the texel data  may be filtered in order to generate one or more texture values. Referring now to  (or B), the texel data received from the texture memory unit  may be filtered using one or more texture filters A and B in order to generate a first and a second texture value A and B respectively, also referred to as a first textured pixel A and a second textured pixel B respectively.","The steps of generating and filtering the texel data in order to generate the one or more texture values may be collectively referred to as processing textured pixel addresses .","The steps of examining the two consecutive textured pixel addresses, merging and propagating the two consecutive textured pixel addresses or only propagating the first of the two consecutive textured pixel addresses, and processing may be repeated in plurality in order to facilitate operation of the graphics pipeline.","In another embodiment, if the examination indicates that the two consecutive textured pixel addresses do not map to the same texel, then only the second of the two consecutive textured pixel address may be propagated to the next stage in the pipeline, e.g., the texture buffer, and the first of the two consecutive textured pixel addresses may be held back and examined with a subsequent consecutive textured pixel address out of the plurality of the textured pixel addresses.","It is noted that the flowchart of  is exemplary only. Further, various steps in the flowchart of  may occur concurrently or in different order than that shown, or may not be performed, as desired. Also, various additional steps may be performed as desired.","FIG. \u2014An Example of Pixel Processing",{"@attributes":{"id":"p-0107","num":"0106"},"figref":["FIG. 10","FIG. 8B"],"b":"222"},"The first two consecutive textured pixel addresses may include the textured pixel addresses A and B. In one case, the textured pixel addresses A and B may map to different texels, such as the textured pixel addresses A and B with reference to . In this case, the textured pixel address A may be processed independently A from the textured pixel address B. In other words, only the textured pixel address A may be propagated to the next stage, and the textured pixel address B may be held back, such as described above in step  with reference to .","In the case where the textured pixel address B was held back, the next consecutive textured pixel address is the textured pixel address C. In other words, the next two consecutive textured pixel addresses may be the textured pixel addresses B and C. The textured pixel address C may map to the same texel as the textured pixel address B, such as the textured pixel addresses B and C with reference to . In this case, the textured pixel addresses B and C can be merged and propagated together B as a combined texel structure B, such as described above in step  with reference to . However, if the textured pixel addresses A and B do not map to the same texel, then the textured pixel address B may be processed independently B from the textured pixel address C, in which case the textured pixel address C may be held back.","On the other hand, the textured pixel addresses A and B may map to the same texel, such as the textured pixel addresses A and B with reference to . In this case, the textured pixel addresses A and B may be merged and propagated together A as a combined texel structure A, such as described above in step  with reference to .","Likewise, the textured pixel addresses C and D may be examined if they map to the same texel if the textured pixel address C has not already merged with the textured pixel address B. In this case, if the textured pixel addresses C and D map to the same texel, then the textured pixel addresses C and D may be merged and propagated together C as a combined texel structure C. Otherwise, the textured pixel address C may be processed independently C of the textured pixel address D.","Therefore, in one embodiment each textured pixel address may have two chances to be merged with other textured pixel addresses.","It is noted that the diagram of  is exemplary only. Further, various steps in the diagram of  may occur concurrently or in different order than that shown, or may not be performed, as desired. Also, various additional steps may be performed as desired.","System Used to Improving Magnified Textured-Mapped Pixel Performance in a Single-Pixel Pipeline\u2014",{"@attributes":{"id":"p-0114","num":"0113"},"figref":"FIG. 11A"},"A graphics pipeline may be operable to process textured pixel addresses. The graphics pipeline may comprise a texture address unit, a texture buffer, and one or more texture filters. In one embodiment, a plurality pixels may be propagated down the single-pixel graphics pipeline, or a render pipeline , to the texture address unit . The texture address unit  may comprise the one or more texture address generators A and B and the merge unit C. The one or more texture address generators A and B may be operable to generate a plurality of textured pixel addresses, also referred to as a plurality of texture coordinates, corresponding to the plurality of pixels. The generation of a textured pixel address from a plurality of pixels may be performed using any of the algorithms known in the art.","In one embodiment, the texture address unit  may further include a FIFO (first-in first-out memory) D, which may be coupled to the one or more texture address generators A and B and the merge unit C. The one or more texture address generators A and B may write the textured pixel addresses into the FIFO D, thus imposing a linear ordering on the textured pixel addresses. Due to the linear ordering of the textured pixel addresses, the merge unit C may be operable to compare two consecutive textured pixel addresses.","The merge unit may access the FIFO by using a FIFO read pointer, such as a ReadPtr. The merge unit C is operable to examine the two consecutive textured pixel addresses in the FIFO without affecting the ordering of the textured pixel addresses in the FIFO. For example, the merge unit may be operable to peek at the two consecutive textured pixel addresses without removing the two textured pixel addresses from the FIFO.","In one embodiment, the merge unit C may examine the two consecutive textured pixel addresses at ReadPtr and ReadPtr+1, where ReadPtr is the FIFO D read pointer. The two consecutive textured pixel addresses may be merged together to create two merged consecutive textured pixel addresses, herein also referred to as a combined texel structure . The combined texel structure may be propagated to the texture buffer . As a result of the merging operation the FIFO ReadPtr may be incremented by two, thus pointing to a subsequent consecutive textured pixel address.","In one embodiment, if the two consecutive textured pixel addresses cannot be merged, a single textured pixel address, such as the first of the two consecutive textured pixel addresses may be sent to the texture buffer  and the ReadPtr is incremented only by one. In other words, the second of the two consecutive textured pixel addresses may be held back in the FIFO such that it may be examined with a subsequent consecutive textured pixel address.","In one embodiment, the FIFO may have a depth greater than or equal to two textured pixel addresses. Other forms of storing and retrieving textured pixel addresses may be contemplated, such as a circular queue or a linked list, among others. The operation of the ReadPtr or a similar read pointer, will depend on the choice of memory type for storing and ordering the textured pixel addresses.","In one embodiment, the merge unit C may comprise control logic (not shown), operable to examine texel requirements of each of the two consecutive textured pixel addresses in order to create control bits indicating whether the two corresponding pixels have identical texel composition. The merge unit C may be operable to create the combined texel structure  if the control bits indicate identical texel composition for the two consecutive textured pixels. An example of examining texel requirements for the two consecutive textured pixel addresses is described above with reference to .","In one embodiment, the texture memory unit , also referred to as the texture buffer , may be operable to receive the combined texel structure  from the merge unit C. The texture memory unit  may be further operable to generate texel data . The texture memory unit  may be operable to generate the texel data  for one or more textured pixel addresses at the same time.","In one embodiment, the one or more texture filters A and B, also referred to as a first texture filter A and a second texture filter B respectively, may be operable to receive the texel data  from the texture memory unit . The one or more texture filters A and B may be further operable to filter the texel data  to generate two textured pixels A and B, also referred to as a first textured pixel A and a second textured pixel B respectively. The first and second texture filters A and B may use both the integer and fractional components of the U and V coordinates.","It is noted that the block diagram of  is exemplary only. Further, various modules in the block diagram of  may be connected in different order than that shown, or may not be present, as desired. Also, various additional modules may be included as desired.","Another System Used to Improving Magnified Textured-Mapped Pixel Performance in a Single-Pixel Pipeline\u2014",{"@attributes":{"id":"p-0125","num":"0124"},"figref":"FIG. 11B"},"In one embodiment, the FIFO D may be distributed between the one or more texture address generators A and B. Specifically, there may be two or more FIFO's, each FIFO associated with a corresponding texture address generator.","In one embodiment, the system may further include a split unit . The split unit  may be operable to receive the texel data  and split the texel data  into a first texel data and a second texel data, collectively referred to as split texel data. The split texel data may be propagated to the one or more texture filters A and B. For example, if examining determines that the two consecutive textured pixel addresses map to the same texel, the split unit  may split the texel data since the texel data may have been generated for the combined texel structure. However, if examining determines that the two consecutive textured pixel addresses do not map to the same texel, the split unit  may propagate only the first texel data to the one or more texture filters A and B.","It is noted that the block diagram of  is exemplary only. Further, various modules in the block diagram of  may be connected in different order than that shown, or may not be present, as desired. Also, various additional modules may be included as desired.","Although the embodiments above have been described in considerable detail, other versions are possible. Numerous variations and modifications will become apparent to those skilled in the art once the above disclosure is fully appreciated. It is intended that the following claims be interpreted to embrace all such variations and modifications. Note the section headings used herein are for organizational purposes only and are not meant to limit the description provided herein or the claims attached hereto."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing, as well as other objects, features, and advantages of this invention may be more completely understood by reference to the following detailed description when read together with the accompanying drawings in which:",{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 4","FIG. 3"]},{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 5","FIG. 3"]},{"@attributes":{"id":"p-0033","num":"0032"},"figref":["FIG. 6","FIG. 3"]},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 8A"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 8B"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 11A"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 11B"}]},"DETDESC":[{},{}]}
