---
title: Systems and methods for facilitating activation of operating systems
abstract: Systems and methods are disclosed that may be implemented to install and use a replacement BIOS code stored in non-volatile memory of the system BIOS to facilitate activation of a new or replacement OS on an information handling system. The replacement BIOS code may include an activation certificate of authority information to activate a different version operating system for use on an information handling system that has been previously configured with a different operating system version along with a previous BIOS code that did not include the updated OEM activation string.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08949813&OS=08949813&RS=08949813
owner: Dell Products LP
number: 08949813
owner_city: Round Rock
owner_country: US
publication_date: 20110729
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DESCRIPTION OF ILLUSTRATIVE EMBODIMENTS"],"p":["This application relates to information handling systems, and more particularly to activation of operating systems for information handling systems.","As the value and use of information continues to increase, individuals and businesses seek additional ways to process and store information. One option available to users is information handling systems. An information handling system generally processes, compiles, stores, and\/or communicates information or data for business, personal, or other purposes thereby allowing users to take advantage of the value of the information. Because technology and information handling needs and requirements vary between different users or applications, information handling systems may also vary regarding what information is handled, how the information is handled, how much information is processed, stored, or communicated, and how quickly and efficiently the information may be processed, stored, or communicated. The variations in information handling systems allow for information handling systems to be general or configured for a specific user or specific use such as financial transaction processing, airline reservations, enterprise data storage, or global communications. In addition, information handling systems may include a variety of hardware and software components that may be configured to process, store, and communicate information and may include one or more computer systems, data storage systems, and networking systems.","An information handling system is commonly provided with an operating system that is stored on a storage device of the information handling system and executed by a central processing unit (CPU) of the information handling system. The operating system typically requires activation when first installed on the information handling system, e.g., by the original equipment manufacturer (OEM) or end user. For example, a retail end user may separately purchase a computer and operating system (OS) software disks. The retail user is required to enter a unique identifier (25-character product key) when installing the OS on the computer from the separately purchased software disks. The installed OS is in communication across the Internet with the OS manufacturer\/supplier, and in response to entry of the correct unique identifier, the OS receives a product ID from the OS manufacturer\/supplier, which serves to activate the OS on the computer.","In another method, OS activation of an operating system such as Microsoft Windows 7 may also be performed without requiring communication with the OS manufacturer\/supplier. For example, OEM activation certificate of authority information may be embedded in the core basic input\/output system (BIOS) code in non-volatile memory of the system BIOS. This information is in turn not accessible by the OS for activation until it is copied from the BIOS code to an ACPI SLIC table that is used by an advanced configuration and power interface (ACPI)-compliant BIOS program to store software licensing description information within the ACPI memory table. Whether or not the unique identifier information is copied to the ACPI table is controlled by two fields that are set at the time of OEM manufacturing: SLIC lock\/unlock and SLIC enable\/disable. If the SLIC table is enabled, the OEM activation certificate information is copied from the BIOS code to the SLIC table during Power On Self Test (POST). After manufacture, the SLIC table is locked and disabled if no operating system is purchased with the system and before shipment from the OEM to the end user (otherwise the SLIC table is enabled). Even though non-volatile memory of the system BIOS may be later updated during a BIOS Flash, it cannot be copied to the SLIC table when it is in the disabled state.","Upon installation of the OS on a particular computer (e.g., by the computer OEM), the OS queries the SLIC table during boot and the OEM activation certificate information found there is compared to certificate of authority information contained within the OS. If the stored OEM activation certificate information matches the certificate of authority information within the OS, the OS is activated. This activation procedure is performed using an OS activation string supplied by the OS provider (e.g., Microsoft) corresponding to the OS system version to be installed (e.g., Microsoft Windows 7), and which itself is installed in the system BIOS prior to installing the OS on the computer system main storage. Activation of the newly installed OS is not possible without the presence of the appropriate OS activation string. As previously described, this OS activation string can only be installed during original (e.g., OEM) factory configuration of the new computer system using an appropriate system interface, such as issuing the SMBIOS interface commands in manufacturing mode to unlock, enable and lock the SLIC table.","After activation, an end user may later wish to upgrade the OS running on the computer, e.g., from Microsoft Windows XP to Microsoft Windows Vista or Microsoft Windows 7 or to similarly upgrade between corresponding server OS versions. This requires installation and activation of the new OS on the existing computer. In some cases, corporate or in-house computer users may wish to upgrade the OS running on a large number of existing computers that are already deployed in the field. However, the onboard BIOS of these field systems only includes the original factory-installed OEM activation string corresponding to the existing original OS (e.g., Microsoft Windows XP).","Once deployed in the field, there is no system interface or other capability available to end users for utilizing a new OEM activation string to perform an OS upgrade (e.g., from Windows XP to Windows 7) in the field for a large number of computer systems. Once a computer system is shipped from the factory with the SLIC table disabled, it must be enabled before OS activation can occur. In order to enable the SLIC table, it must first be unlocked, then enabled, then locked again. However, BIOS code cannot do this unconditionally, nor can BIOS code simply be copied from one system to another system to pirate the activation. Thus, activation of the upgraded OS on each computer requires manual entry of the appropriate certificate of authority information for the new OS into that individual computer so that a product ID from the OS manufacturer\/supplier (e.g., Microsoft) may be obtained for that computer from across the Internet.","Disclosed herein are systems and methods that may be implemented to install and use a replacement BIOS code stored in non-volatile memory of the system BIOS (e.g., a newly installed updated BIOS code) to facilitate activation of a new or replacement OS on an information handling system. The replacement BIOS code may include activation certificate of authority information (e.g., as an updated OEM activation string) operable to activate a different version operating system (e.g., a newly installed upgraded OS version) for use on an information handling system that has been previously configured with a different operating system version (e.g., older or previous version OS) along with a previous BIOS code that did not include the updated OEM activation string. The disclosed systems and methods may be advantageously employed in one embodiment to utilize such a replacement BIOS code to activate a newly-installed upgraded OS on a previously field-deployed information handling system (e.g., such as a desktop computer, laptop computer, server, etc.) that was originally deployed from the manufacturer and\/or supplier to an end user with a different and previous OS version, and without the necessity of communication with a OS manufacturer\/supplier (e.g., Microsoft) server or other network source across a network (e.g., such as the Internet) to complete the authorization process. Such an end user may be, for example, a corporate customer of the computer and OS supplier\/manufacturer\/s, a corporate information technology (IT) department, a home retail customer, etc.","Examples of field-deployment of an information handling system include, but are not limited to, deployment of an information handling system to field locations such as a customer or other end user's office or other police place of business, a customer or other end user's home, a school building, a customer or other end user's vehicle, a customer's remote location with no internet connectivity, etc. or any other field location to which an information handling system is deployed and operated by a customer or other end user or an end user's personnel or staff.","In one exemplary embodiment, the disclosed systems and methods may be implemented by providing a reserved System Management Interface (SMI) application programming interface (API) function in a replacement BIOS code, such as a field upgrade BIOS code that is installable in BIOS non-volatile memory of an information handling system to replace a previous version of system BIOS code on the system. Such a replacement BIOS code may be, for example, provided to an end user after an information handling system has been manufactured and delivered to the end user with an original BIOS code. In this exemplary embodiment, the reserved SMI API function may be configured to only provide service to an updater utility that is provided to the end user for installing the replacement BIOS code. Such an updater utility may be configured to run on particular supported information handling systems and to interface with system BIOS code running on these particular systems to complete the BIOS upgrade and facilitate and\/or complete OS activation. In this exemplary embodiment, the update utility may be configured to pass a unique private security key to request a modification to the SLIC table locking and enablement.","In one exemplary embodiment, an updater utility as described above may be a separate executable program that performs the following steps: 1) detects that the system is a valid target for the update; 2) calls the external BIOS flash program to update the BIOS to a BIOS containing the SMI calls that manage the SLIC; 3) reboots the system so that the newly installed BIOS becomes active; and 4) makes appropriate SMI calls to manipulate the SLIC enable and lock states.","In this exemplary embodiment, the above-described reserved SMBIOS SMI API function may be configured to install an updated OEM activation string for a new or replacement OS in the BIOS non-volatile memory of an information handling system. The reserved SMI API function may be configured to perform this task by unlocking and enabling the SLIC table in the ACPI table area of the system BIOS non-volatile memory. When a properly formatted call with the private security key is passed to the SMI interface by the BIOS updater utility, the new OEM activation string will be enabled; otherwise the updater utility will terminate with a failure message. In this embodiment, the reserved SMI API function is a unique one-off support function and its interface is only available with the initial field upgrade BIOS via the BIOS Updater Utility. Once it is successfully called to enable the ACPI SLIC table, it becomes a dormant code and is no longer useful. In this way, a BIOS updater utility is provided that limits the systems on which the field activation of a replacement (e.g., updated) OS may occur.","In one embodiment of the disclosed systems and methods, using the private security key as part of the BIOS update utility makes it more difficult for unauthorized parties (e.g., hackers) to pirate an OS activation by examination of the information handling system alone, e.g., by creating a code that tries multiple combinations of the system management interrupt (SMI) class and command codes to see what happens. Additionally, the disclosed systems and methods may be implemented with a BIOS updater utility that only unlocks and enables the SLIC table in system BIOS non-volatile memory (e.g., via appropriate reserved SMI API function) for purpose of activating the OEM activation certificate information provided by an updated or replacement BIOS code to the SLIC table before locking the SLIC table again, and without entering into a manufacturing mode or other state that allows other changes to the system default settings such as another SMI API function to load the system defaults. Thus, the disclosed systems and methods may be implemented using a secret interface (i.e., having a unique and confidential class\/command code) in the form of an SMI calling interface that unlocks, enables, disables, and re-locks the SLIC table of system BIOS non-volatile memory without changing any other settings, such as boot sequence. This cannot be accomplished with existing conventional OEM activation schemes provided in standard system BIOS code. Moreover, the disclosed systems and methods may be advantageously employed for an OEM BIOS code (e.g., rebranded BIOS code for resellers) which a reseller installs itself or which is installed through a third party. Thus, resellers that originally had not planned to support OEM OS activation may be given the opportunity to later decide to employ OEM OS activation to seamlessly update the reseller's field systems that have disabled SLIC table, and\/or to change the OEM activation information associated therewith.","In a further optional embodiment, only an initial upgrade BIOS code version may include the reserved SMI API function, i.e., no subsequent BIOS releases will include the reserved SMI API function. Together, this initial field upgrade BIOS code and its updater utility may be so employed to provide support for an upgrade to a new or replacement OS (e.g., such as Microsoft Windows 7 or Microsoft Windows 7 embedded) from a previous OS (e.g., such as Microsoft Windows XP or Microsoft Windows XP embedded) for field systems via a secure BIOS upgrade process.","In one respect, disclosed herein is a method of preparing a replacement operating system (OS) on an information handling system for activation on the information handling system using certificate of authority information, including providing an information handling system that itself includes: non-volatile memory including memory space that is locked from editing with a private security key, the locked memory space being configured to unlock to allow editing only upon presentation of the private security key, at least one processing device, the processing device being coupled to access the non-volatile memory, and a first BIOS code and first operating system (OS) code that are each activated and executing on the at least one processing device, neither of the first BIOS code or first OS being capable of supplying the private security key to unlock the locked memory space of the non-volatile memory. The method also may include: providing a replacement BIOS code to replace the first BIOS code, the replacement BIOS code being different than the first BIOS code and being configured with the private security key and the correct certificate of authority information corresponding to the replacement OS; providing BIOS updater code, the BIOS updater code being either separate from the replacement BIOS code or part of the replacement BIOS code; installing the BIOS updater code and installing the replacement BIOS code on the information handling system to replace the first BIOS code; executing the BIOS updater code on the processing device to provide the private security key from the BIOS updater code to cause unlocking of the locked memory space in the non-volatile memory and activating of the correct certificate of authority information in the unlocked memory space in the non-volatile memory; and executing the BIOS updater code on the processing device to cause locking of the unlocked memory space in the non-volatile memory after activation of the correct certificate of authority information in the unlocked memory space in the non-volatile memory.","In another respect, disclosed herein is an information handling system comprising: non-volatile memory including memory space that is locked from editing with a private security key, the locked memory space being configured to unlock to allow editing only upon presentation of the private security key; at least one processing device, the processing device being coupled to access the non-volatile memory; a replacement BIOS code configured to replace a first BIOS code that has previously been activated and executed on the at least one processing device, the first BIOS code being incapable of supplying the private security key to unlock the locked memory space of the non-volatile memory, and the replacement BIOS code being different than the first BIOS code and being configured with the private security key and the correct certificate of authority information corresponding to a replacement OS configured to replace a first OS code that has been previously activated for execution on the at least one processing device; and a BIOS updater code, the BIOS updater code being either separate from the replacement BIOS code or part of the replacement BIOS code. The BIOS updater code may be configured for executing on the processing device to cause performance of the following steps: providing the private security key to unlock the locked memory space in the non-volatile memory, activating the correct certificate of authority information in the unlocked memory space in the non-volatile memory, and locking the unlocked memory space in the non-volatile memory after activation of the correct certificate of authority information in the unlocked memory space in the non-volatile memory.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 1","FIG. 1","FIG. 1","FIG. 1"],"b":["100","100","100","105","110","105","115","120","110","125","120","130","110","135","130","145","147","130","180","190","130"]},{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 2","FIG. 1"],"b":["200","100","200","292","290","200","250","220","224","250","222"]},"As shown in , OS activation architecture  may be implemented by CPU  that is configured to activate and execute a replacement OS  upon completion of appropriate steps by BIOS updater utility  and reserved SMI API  of replacement BIOS . In particular, BIOS updater utility  is configured as shown to communicate with SLIC table  contained in ACPI table area  of non-volatile memory  (e.g. NVRAM as shown) via reserved SMI API  of replacement BIOS code  across SMI interface . Each of replacement OS  and replacement BIOS code  may be received and loaded (together or separately) by an information handling system, for example, from across network , data bus , or from any other suitable data source\/s. Replacement OS  may be stored on local storage  and loaded for activation and execution by CPU  to replace a previous and different OS version. Replacement BIOS may be flashed on to non-volatile memory  and loaded for activation and execution by CPU  to replace a previous and different BIOS code version. In this embodiment, ACPI table area  is maintained separately and is not written over by replacement BIOS code version . In one exemplary embodiment, reserved SMI API  may only be provided with an initial field upgrade BIOS version, i.e., only once and only upon the first BIOS upgrade from the original BIOS version.","Still referring to , reserved SMI API  is configured to only provide service to an updater utility  that may be provided (as separate code from replacement BIOS code  or as part of the same code as replacement BIOS code ) for installing and activating replacement BIOS code  by passing a unique private security key (e.g., such as a unique ID for the platform and\/or a specific customer\/reseller) to access ACPI area  across SMI interface  to complete the BIOS upgrade to replacement BIOS . Reserved SMBIOS API  is further configured to activate updated OEM activation certificate of authority information (e.g., as an updated OEM activation string that includes OEM activation binary information as well as the required identifiers (IDs) for ACPI table) for replacement OS  in the locked SLIC table  of BIOS non-volatile memory . To perform this task, updater utility  may be configured to first pass a properly formatted call (e.g., writing a proper command code to the IO address assigned for SMI call) after first checking and confirming the system ID (i.e., which is accessible from the memory (SMBIOS table)) as a private key prior to continuing. Alternatively, updater utility  may be configured to pass the properly formatted call with the correct private security key to the SMI interface  via reserved SMI API .","When the system ID is checked and confirmed, and\/or the correct private security key is passed in the above-described manner, reserved SMI API  is configured to first unlock and enable SLIC table , and then activate the updated OEM activation string into SLIC table  to enable the OEM activation string in the SLIC table . Reserved SMI API  is configured to then enable and lock SLIC table . If the correct private security key is not passed to the SMI interface , BIOS updater utility  will terminate, e.g., with a failure messaged displayed to the information handling system user. In one exemplary embodiment, reserved SMI API  may be configured to compare a hard-coded private security key that is kept by SMI API  to the private security key that is passed by the updater utility . Only if the two keys match does SMI API  unlock and enable the SLP","Once the updated OEM activation certificate of authority information (e.g., OEM activation string) has been activated in SLIC table , then the replacement OS  (e.g., Microsoft Windows 7) may access and read the SLIC table  to verify that the activated OEM activation certificate of authority information in SLIC table  matches the correct certificate of authority information maintained in the OS code. The replacement OS  may be activated upon verification that SLIC table  contains the correct OEM activation certificate of authority information.","In one exemplary embodiment, reserved SMI API  may be provided as a unique one-off support function and its interface  only made available one time, e.g., with the initial field upgrade BIOS code . Reserved SMIAPI  may be configured such that once it is successfully called to unlock and enable ACPI SLIC table , it becomes dormant code that is no longer useful. Using such a configuration, BIOS updater utility  may be configured to limit field activation of replacement (e.g., updated) OS  to one system.",{"@attributes":{"id":"p-0028","num":"0027"},"figref":["FIG. 3","FIG. 2"],"b":["300","300","200","300"]},"Methodology  may be initiated during system boot in step  by BIOS updater utility , e.g., that includes a bootable master control program that determines current system configuration and BIOS version. The BIOS updater utility  may be executed, for example, by CPU  from code stored (e.g., on a USB key or other suitable storage medium) and provided across data bus  of . The system is then booted into running BIOS updater utility  in step . In step , the BIOS updater utility  checks the non-volatile memory  for the availability of SMI API  of the replacement BIOS . If SMI API  is not available, then the BIOS updater utility  may optionally notify the user in step  not to turn off the system or otherwise interrupt the system until confirmation of the presence and activation of the replacement BIOS is complete and then flashes the replacement BIOS  (which includes the reserved SMI API  and updated correct OEM certificate of authority information) in step  on to non-volatile memory . Methodology  then returns to step  and repeats as shown.","When it is determined in step  that SMI API  is available, methodology  proceeds to step  where BIOS updater utility  determines if the SLIC table  of ACPI table area  is unlocked. If SLIC table  is not unlocked, methodology  proceeds to step  and calls the SMI API using the private security key to request unlocking and enabling the SLIC, and then proceeds to step . If the updater private security key is found to be correct in step , then methodology  proceeds to step  where the SMI API will unlock and enable the SLIC table with the activated updated OEM certificate of authority information. When the correct private security key is provided, the SLIC table  is unlocked, and methodology  then returns to step  to continue. If the updater private security key is not found correct in step , then the SMI code will return an error code to the BIOS updater utility in step , and BIOS updater utility  may be configured to terminate in step  and display error or failure message to the information handling system user.","Still referring to , when SLIC table  is found in step  to be unlocked, methodology  proceeds to step  where BIOS updater utility passes a call to reserved SMI API  to lock updated SLIC table . The SMI code will then lock the SLIC table in step  and return success. Locking is not a secure operation, thus no private security key is required for this call. At this time, when the SLIC table  is found locked and enabled in step , methodology  proceeds to step  where an optional BIOS update completion message may be displayed to the information handling system user. At this point, SMI API  is disabled from further execution, and becomes dormant code, and the BIOS update steps of methodology  terminate.","After completion of step , replacement OS  is now ready for installation in step  following system reboot in step , after which it is determined if SLIC table  contains the correct OEM certificate of authority information for activation of the current copy of replacement OS . For example, assuming that the OEM certificate of authority information in SLIC table  matches the certificate of authority information for the current copy of replacement OS , then replacement OS  is activated. However, if for some reason the the OEM certificate of authority information in SLIC table  does not match the certificate of authority information for the current copy of replacement OS , then replacement OS may display an error or warning message to the user. It will be understood that these are only exemplary OS installation and activation steps, and that any other methodology that is suitable for activation of an OS using the updated OEM certificate of authority information may be employed following termination of methodology  in step .","It will be understood that the particular number and combination of steps illustrated in  are exemplary only, and that any other combination of fewer, additional, or different steps may be employed that are suitable for installing and using a replacement BIOS to prepare for, or otherwise facilitate activation of a replacement OS on an information handling system in one or more of the manners described herein.","It will also be understood that one or more steps of methodology  of  may be implemented by a computer program of instructions (e.g., computer readable code such as firmware code or software code) embodied in a non-transitory tangible computer readable medium (e.g., optical disk, magnetic disk, non-volatile memory device, etc.), in which the computer program comprising instructions are configured when executed (e.g., executed on a processing device of an information handling system such as a processor, microprocessor, microcontroller, controller, etc.) to perform the one or more steps of methodology . A computer program of instructions may be stored in or on the non-transitory computer-readable medium residing on or accessible by an information handling system for instructing the information handling system to execute the computer program of instructions. The computer program of instructions may include an ordered listing of executable instructions for implementing logical functions in the information handling system. The executable instructions may comprise a plurality of code segments operable to instruct the information handling system to perform the methodology disclosed herein. It will also be understood that one or more steps of the present methodology may be employed in one or more code segments of the present computer program. For example, a code segment executed by the information handling system may include one or more steps of the disclosed methodology.","For purposes of this disclosure, an information handling system may include any instrumentality or aggregate of instrumentalities operable to compute, classify, process, transmit, receive, retrieve, originate, switch, store, display, manifest, detect, record, reproduce, handle, or utilize any form of information, intelligence, or data for business, scientific, control, entertainment, or other purposes. For example, an information handling system may be a personal computer, a PDA, a consumer electronic device, a network storage device, or any other suitable device and may vary in size, shape, performance, functionality, and price. The information handling system may include memory, one or more processing resources such as a central processing unit (CPU) or hardware or software control logic. Additional components of the information handling system may include one or more storage devices, one or more communications ports for communicating with external devices as well as various input and output (I\/O) devices, such as a keyboard, a mouse, and a video display. The information handling system may also include one or more buses operable to transmit communications between the various hardware components.","While the invention may be adaptable to various modifications and alternative forms, specific embodiments have been shown by way of example and described herein. However, it should be understood that the invention is not intended to be limited to the particular forms disclosed. Rather, the invention is to cover all modifications, equivalents, and alternatives falling within the spirit and scope of the invention as defined by the appended claims. Moreover, the different aspects of the disclosed systems and methods may be utilized in various combinations and\/or independently. Thus the invention is not limited to only those combinations shown herein, but rather may include other combinations."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 3"}]},"DETDESC":[{},{}]}
