---
title: System and method for managing security meta-data in a reverse proxy
abstract: A system and method for managing security meta-data in a reverse proxy server. The reverse proxy caches data served by an origin server, and also stores security meta-data for authenticating a user and/or authorizing access to cached data. The security meta-data may include an ACL (Access Control List), access control token or descriptor, other access control information, user credentials, user privileges or roles, group membership, user aliases, etc. The reverse proxy may automatically receive access control information from the origin server when a request for data is forwarded to the origin server, or may explicitly request the information from the origin server or a security server. The reverse proxy receives and applies invalidation messages to invalidate stored security meta-data. Also, the reverse proxy acts in a stateful manner, with knowledge of the correlation between a given user and that user's session with the origin server.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07600230&OS=07600230&RS=07600230
owner: Oracle International Corporation
number: 07600230
owner_city: Redwood Shores
owner_country: US
publication_date: 20040706
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This invention relates generally to caching and managing cached data. More particularly, a system and method are provided for caching and managing, in a reverse proxy cache, security meta-data relating to cached data.","A reverse proxy server caches data from one or more back-end systems (e.g., web servers, application servers, databases), to serve to any number of clients or end users. In traditional reverse proxy cache systems or servers, the reverse proxy is oblivious to the existence of user sessions. Its concept of a \u201csession\u201d is limited to the receipt and resolution of a single user query. It maintains state information only for the duration of the user query and its response. As a result, if a single user submits multiple queries to the same cache, the cache has no way of knowing or detecting that all the queries are for the same user.","Because it is not \u201csession-aware,\u201d a traditional reverse proxy cache is unable to enforce consistency across the spectrum of activity it may engage in for a particular user session. More specifically, it cannot perform session scope caching. Instead, each transaction it handles for a user is processed independently of any other transactions handled for the same user.","Further, because it is not session-aware, if a reverse proxy cache intercepts a series of transactions from one user, a back-end server that established a session with the user (e.g., for web browsing, for an application) may timeout because it believes the user has ceased operation. The cache is unable to inform the server that the user associated with a particular session is still active, as it has no awareness of the session.","As another consequence of its lack of session-awareness, a traditional reverse proxy cache is unable to cache or apply security measures to its cached data. For example, even if a back-end application server or web server enforces an authorization or authentication mechanism to protect data, when that data is cached in the reverse proxy, the cache is incapable of applying the same mechanism.","Traditional cache systems are not configured to internally store or apply security mechanisms for cached data (e.g., an access control list or ACL). They could not authenticate a user who has requested access, nor determine whether the user is authorized to access the requested data. As a result, a user could access virtually any cached data by an appropriately formatted data request to the cache, even if the user would be denied access if the request were handled at an origin server. Instead, caches generally rely upon external authorization of data access (e.g., by an origin server). This results in increased network traffic and additional processing at the origin server, and therefore detracts from any performance gain achieved by caching data in the cache system.","In one embodiment of the invention, a system and method are provided for managing security meta-data in a reverse proxy server or cache. The reverse proxy caches data served by an origin server, and also stores security meta-data for authenticating a user and\/or authorizing access to cached data. The security meta-data may include an ACL (Access Control List), access control token or descriptor, other access control information, user credentials, user privileges or roles, group membership, user aliases, etc. The reverse proxy may automatically receive access control information from the origin server when a request for data is forwarded to the origin server, or may explicitly request the information from the origin server or a security server. The reverse proxy receives and applies invalidation messages to invalidate stored security meta-data. Also, the reverse proxy acts in a stateful manner, with knowledge of the correlation between a given user and that user's session with the origin server.","The reverse proxy may also store other user session meta-data (e.g., user identifier, session identifier, session expiration). Such session meta-data may be explicitly provided by the origin server, or may be gleaned from communications exchanged between a user and the origin server. The reverse proxy may keep the origin server from terminating the user's session by notifying the origin server that the session is still active.","The following description is presented to enable any person skilled in the art to make and use the invention, and is provided in the context of particular applications of the invention and their requirements. Various modifications to the disclosed embodiments will be readily apparent to those skilled in the art and the general principles defined herein may be applied to other embodiments and applications without departing from the scope of the present invention. Thus, the present invention is not intended to be limited to the embodiments shown, but is to be accorded the widest scope consistent with the principles and features disclosed herein.","In one embodiment of the invention, a system and method are provided for managing user session meta-data in a reverse proxy cache. The reverse proxy serves as a front end for one or more origin servers (e.g., web servers, application servers, databases) that establish user sessions with end users or clients. In this embodiment, the cache tracks a specific user session by session meta-data (e.g., a session identifier, a user identifier, a cookie, an expiration date or time), and therefore is capable of providing \u201csession-scope\u201d or \u201cuser-scope\u201d caching.","With session-scope caching, the reverse proxy cache can enforce coherence or consistency across a wide spectrum of activities within one user session. For example, the cache can apply authentication or authorization controls on all data requests of a particular user. And, by observing when a user session ends, the cache can determine when it is permissible to invalidate (e.g., garbage collect) data that was cached for that user.","In addition, when a reverse proxy cache can resolve a request to a particular session or user, the cache can customize its response appropriately. For example, specified portions of requested data may be tailored for different recipients, or information (e.g., hyperlinks, advertisements) accompanying a response may be tailored.","In another embodiment of the invention, a system and method are provided for managing security meta-data in a reverse proxy server. The security meta-data is used to authorize access to data cached in the reverse proxy server and\/or to authenticate users requesting access to cached data. In this embodiment, cached meta-data may be invalidated in the reverse proxy server when no longer valid.","Managing User Session Meta-Data",{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 1"},"In this embodiment, reverse proxy server  caches data from one or more origin servers (e.g., application server , web server ) for access by any number of clients or end users. In particular, reverse proxy server  may be part of a front end that receives client network traffic directed to a back-end server.","Application server  and web server  may enforce standard session controls, such as a username and password for user authentication, an access control list (ACL) for authorizing access to a data object, etc. There are three primary activities regarding user sessions that are enforced by the back-end server: Establishment or creation of a user session when a user logs in; Tearing down of the user session when the user logs out or is disconnected (e.g., because the session expires, because the user attempts an impermissible operation); and the possible association of an Expiration date (or timeout feature) with the session.","In the embodiment of , user sessions are created and torn down by back-end servers, but reverse proxy server  observes the user session activity and tracks the user sessions through associated meta-data. In particular, user session management module  is configured to maintain user session table , which maps user identities (e.g., usernames, user IDs) to attributes of the users' sessions (e.g., cookies, session IDs). Illustratively, for each user session observed by user session management module , an entry in user session table  may be populated with a user ID, a session ID, a timeout or expiration value for the session, and\/or virtually any other session-related information (e.g., access control information, user privileges or credentials, user aliases).","To maintain user session table , user session management module  is configured to detect the events identified above: Establishment and Tearing down of a session, and any associated Expiration. In the illustrated embodiment of the invention, traffic analyzer  or some other entity may be configured to detect these events.","Establishment of a user session: In one embodiment, traffic analyzer  identifies a user login request, by a requested URL or other parameter and\/or a response to a successful login, because such communications are passed through reverse proxy server . In one particular embodiment of the invention, traffic analyzer  may detect when a specific request\/response exchange between a client and a back-end server matches a specified pattern. For example, the login request may include one particular field (e.g., user ID, username) and the response may include a second particular field (e.g., session ID, set_cookie=). The traffic analyzer may then correlate the two fields.","Tear down of the user session: Traffic analyzer  may detect an explicit user logout if the logout request, or a response to the logout request, matches a specified pattern (e.g., targets a particular URL). Or, when a back-end server terminates a user session (e.g., for inactivity), the traffic analyzer may observe the use of a predetermined value for a significant field in a communication sent from the back-end server to a user (e.g., set_cookie=0) or vice versa. In one alternative embodiment of the invention, when a back-end server terminates a user session or logs a user out, it may explicitly notify the reverse proxy server.","Expiration date: An expiration date or time for a user session may be set by a back-end server or by reverse proxy server . For example, the back-end server may include an expiration value in its response to a successful login. The reverse proxy server notes the expiration and attempts to keep the user session from expiring when it shouldn't. For example, if an expiration date is assigned to a user session, subsequent data requests or other communications from the user may be intercepted by reverse proxy server  (i.e., and not be forwarded to the back-end server). In this case, the reverse proxy server may ensure that the back-end server is notified that the user session is still active and does not terminate the session at the expiration date. For example, the reverse proxy may let a data request or other communication go through to the back-end server that it would otherwise intercept. Or, the reverse proxy may send a \u201cheartbeat\u201d signal to the back-end server to inform the server that a specified user session is active and should not be torn down.","In one embodiment of the invention, reverse proxy server  includes one or more caches. In particular, the reverse proxy server may comprise a WebCache server from Oracle Corporation. Back-end servers ,  may be configured, developed and\/or operated by other entities, such as an organization that provides application services or web services to users. Thus, it may be noted that it is a back-end server, not the reverse proxy server, that logs users in and out, assigns session and\/or user identifiers and generates\/enforces other session attributes as necessary.","In such an embodiment, in which the reverse proxy server and the back-end servers are not part of an integrated system, the back-end servers may not be configured to share user session information with the reverse proxy server. And, the reverse proxy is generally configured to be transparent to users. However, as described above, the reverse proxy server is able to deduce or otherwise learn of the creation, expiration and tearing down of a user session (e.g., while it is intercepting or relaying communications between users and back-end servers). The reverse proxy may infer various user session activities from the pattern and\/or content of communications between a user and a back-end server.","In another embodiment of the invention, user session meta-data managed by the user session management module includes security meta-data. The security meta-data may be used by the reverse proxy server to authenticate a user and\/or authorize a user's access to cached data. Thus, instead of having to rely upon a back-end server to perform access control, or applying no access control at all, the reverse proxy can promote data security for data cached with the reverse proxy. The management and application of security meta-data at a reverse proxy cache is described in more detail in the following section.","Managing and Invalidating Security Meta-Data",{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 2"},"In this embodiment, reverse proxy server  receives, stores and manages security meta-data from origin server  and\/or security server . The reverse proxy server includes user session management module , authorization module , access control management module  and access control invalidation module .","User session management module  may operate similarly to user session management module  of . In particular, the user session management module tracks user session meta-data (e.g., user ID, session ID, session expiration), possibly with the user of a user session table.","Authorization module  receives users' requests for data and applies available access control information or other security meta-data. As described below, security meta-data applied by the authorization module may include Access Control Lists (ACLs), access control tokens, user privileges or roles, other user credentials, etc.","Access control management module  receives the security meta-data from origin server  and\/or security server , for application by authorization module . The access control management module may also initiate requests for access control information or other security meta-data.","Access control invalidation module  receives and applies messages invalidating security meta-data, which may be originated by origin server  and\/or security server . The access control invalidation module therefore helps ensure that obsolete access control information is not applied at the reverse proxy server.","In other embodiments of the invention, functions performed by the reverse proxy server may be divided among the same modules in a different way, or may be performed by different modules. For example, the functions of access control management module  and access control invalidation module  may be merged.","Origin server  may comprise an application server, a web server, a database or other entity configured to serve data in response to data requests. Origin server  applies some level of security to its operations. For example, the origin server may require users to login (e.g., with username and password) before receiving data, and may apply Access Control Lists (ACL) or other access control information or access control tokens to determine whether a particular user is authorized to receive a requested set of data.","Optional security server  represents an alternative, central, source of security meta-data for authorizing access to data served by origin server . Security meta-data provided by the security server (or origin server ) to the reverse proxy may include an ACL, access control token or descriptor, username or user identifier, user session identifier, user alias(es), user privileges, user credentials, or any other form of access control information.","Illustratively, security server  is implemented if a central domain is to be employed for authorizing access to data. Otherwise, if origin server  is configured to manage security for its users' data accesses, then security server  may be omitted. In one embodiment of the invention, origin server  and security server  may be distinct from each other, but may be colocated on one computer system or collection of computer systems.","The reverse proxy server (e.g., access control invalidation module ) may be configured to query a back-end server (e.g., origin server  and\/or security server ) for ACLs, user credentials or other access control information, or updates to security meta-data that has already been stored. For example, when the reverse proxy receives a data request, it may query a back-end server for access control information relating to the requested data (or updates to such information) unless, perhaps, it already has such information cached. The access control information received in response to its query may then be applied to determine whether the requestor can access the data (if the data are cached at the reverse proxy), or may be stored to facilitate access authorization for a subsequent request for the same data (if the data are retrieved from an origin server).","When access control information is changed at the origin server or the security server, a message may be sent to the reverse proxy to invalidate obsolete security meta-data. For example, when a user's group membership changes, or when a particular ACL or access control token no longer applies to a particular data object, the responsible back-end server (i.e., origin server  or security server ) sends an invalidation message to the reverse proxy to invalidate the obsolete information.","In an embodiment of the invention, origin server  and security server  are enhanced with Application Programming Interface (API) modules configured to send access control information to a reverse proxy and, if necessary, receive and respond to a proxy's queries for such information.","In one embodiment of the invention, an ACL or other access control token or descriptor is treated as a monolithic entity, and may be identified by a URL (Uniform Resource Locator). An association between an ACL and a corresponding data object may be called an ACL Association. Both ACLs and ACL Associations may be retrieved by a reverse proxy, from an origin server or security server, via a query. In this embodiment, invalidation may be performed on the ACL Associations rather than the ACLs themselves, and an ACL without any linked ACL Associations may be deleted or garbage-collected. Separating ACLs from their Associations helps eliminate duplication of cached ACLs and promotes batch-mode invalidation of access control information. In a hierarchical arrangement, individual cached data objects may be grouped, with ACLs having ACL Associations with groups instead of individual objects.",{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 3"},"In operation , a user establishes a session with an origin server (e.g., an application server, web server, data server), which may require the user to authenticate himself\/herself through a login process. As part of the login or session establishment, the user may provide a user identifier to the origin server, and the origin server may associate a session identifier with the new session.","In operation , a reverse proxy server learns of the new user session and obtains the user identifier and session identifier and stores them, along with any other relevant session meta-data (e.g., a session expiration, the user's browser type, user language). As described in the previous section, the reverse proxy may detect the session creation by monitoring the pattern or content of communications exchanged between the user and the origin server, may be informed of the session (and the associated session meta-data) by the origin server, or may obtain the session meta-data in some other way.","In operation , the reverse proxy server requests the user's security credentials from the origin server or a security server. In response, the reverse proxy may receive and store various information: the user's privileges, roles, aliases, ACLs or other access control information to be applied to the user's data requests, etc.","In operation , the reverse proxy receives a data request from the user. Alternatively, the reverse proxy may intercept a data request directed to the origin server.","In operation , the reverse proxy determines whether the user's session is near expiration. Because meta-data regarding the session is stored at the reverse proxy, it can readily determine whether an expiration date is approaching. If the session is near expiration, the illustrated method continues with operation ; otherwise, the method advances to operation .","In operation , the reverse proxy notifies the origin server that this session is still active. The origin server may respond by extending the session's expiration date, by contacting the user or user's client to verify its status, or by taking other action.","In operation , the reverse proxy determines whether it possesses valid access control information for authorizing the user's access to the requested data. The proxy also determines whether it has a valid copy of the requested data. If the proxy does not already have a valid copy of the data, a request (e.g., the user's request) is forwarded to the origin server and the proxy receives and caches the data. If the data is received from the origin server, the origin server may also send to the proxy access control information for the data.","If the reverse proxy has a valid set of access control information for the data, the method advances to operation . Otherwise, the method continues with operation .","In operation , the reverse proxy requests and receives access control information for the requested data, from the origin server or a security server. The proxy may store the information for use with a later request for the same data.","In operation , the access control information is used to arbitrate the user's request (i.e., to authorize or deny the user's access to the requested data). If authorized, the data is served to the user. If the user is denied access, the reverse proxy may return a static rejection (e.g., a web page indicating access was denied). As one alternative, the proxy may forward the request to the origin server to allow it to take appropriate action.","In one embodiment of the invention, the reverse proxy routes a user's request to a specific origin server, such the least-loaded server or the server that maintains the server-side state of the user's session. This may be particularly useful in an environment in which all nodes of a cluster or all members of some other group of cooperating computer systems do not fully replicate or publish session state information among themselves.","In operation , the reverse proxy server receives an invalidation message regarding access control information for the same or a different set of data. In response, the reverse proxy invalidates the information.","In operation , after any number of requests has been processed for the user, the reverse proxy may learn of the end of the user's session. As described above, the reverse proxy may detect an explicit logout by the user, a session termination by the origin server, a session timeout, etc.","Although access control information is applied and stored at the reverse proxy server, in the embodiment of  access control information is not edited at the proxy (e.g., to change access authorization for a user or a data object). In addition, the reverse proxy applies access control information in a stateful manner. That is, it can correlate between a particular user or data requestor, and that requestor's session with an origin server. As one consequence, it need not receive a user's credentials with every data request sent from that user, as would be necessary in a stateless environment.","In addition, a reverse proxy can invalidate access control information it has stored (e.g., in response to an invalidation message from an origin server or a security server). Thus, there is little danger that the proxy will authorize or deny access on the basis of stale information.","The foregoing descriptions of embodiments of the invention have been presented for purposes of illustration and description only. They are not intended to be exhaustive or to limit the invention to the forms disclosed. Accordingly, the above disclosure is not intended to limit the invention; the scope of the invention is defined by the appended claims.","The program environment in which a present embodiment of the invention is executed illustratively incorporates a general-purpose computer or a special purpose device such as a hand-held computer. Details of such devices (e.g., processor, memory, data storage, display) may be omitted for the sake of clarity.","It should also be understood that the techniques of the present invention may be implemented using a variety of technologies. For example, the methods described herein may be implemented in software executing on a computer system, or implemented in hardware utilizing either a combination of microprocessors or other specially designed application specific integrated circuits, programmable logic devices, or various combinations thereof. In particular, the methods described herein may be implemented by a series of computer-executable instructions residing on a suitable computer-readable storage medium. Suitable computer-readable storage media may include volatile (e.g., RAM) and\/or non-volatile (e.g., ROM, disk) memory."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF THE FIGURES","p":[{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3"}]},"DETDESC":[{},{}]}
