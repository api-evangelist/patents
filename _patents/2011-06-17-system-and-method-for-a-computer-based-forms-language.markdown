---
title: System and method for a computer based forms language
abstract: A computational platform and related methods that generally combines the object model and the programming model into a single set of constructs (e.g., Forms, relations, entities, relationships). These constructs provide the characteristics of inheritance, linkage, immutability, versioning, and substitution in a single structure that can store the objects, processes, and instructions/programs, and provide for convergence and divergence of information in information streams, a database graph, or a database web distributed across a set of nodes.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08612397&OS=08612397&RS=08612397
owner: Coral Networks, Inc.
number: 08612397
owner_city: Arlington
owner_country: US
publication_date: 20110617
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND","SUMMARY OF THE DISCLOSURE","DETAILED DESCRIPTION OF THE DISCLOSURE","DEFINITIONS","Illustrative Examples of Using the Principles of the Disclosure"],"p":["This application claims priority and benefit of U.S. Provisional Application No. 61\/355,864 filed on Jun. 17, 2010, entitled SYSTEM AND METHOD FOR A COMPUTER BASED FORMS LANGUAGE, the disclosure of which is incorporated herein in its entirety.","This application is also generally related to U.S. application Ser. No. 12\/714,094 and is also generally related to U.S. application Ser. No. 13\/155,601, and is also generally related to U.S. patent application Ser. No. 13\/020,531.","1. Field of the Invention","The invention relates generally to information processing technology and, more specifically, to a system and method that generally provides for convergence and divergence of information in information streams, a database graph, or a database web distributed across a set of nodes, among other aspects.","2. Related Art","Systems of today, before this disclosure, do not capture the linkages needed to make information meaningful, do not manage change, and do not effectively manage the limited collection of primarily disconnected data that is captured, among other issues. Data becomes meaningful information as connections, or links, are made between other data in a collection. Data that are already known comprises a baseline of understanding; new, or differential data, are required to truly inform. Systems today are not designed to store, manage, distribute, and process differential data and the connections between data. Systems today manage a snapshot of known information with small set of selected linkages artificially applied as a result of key strategies or data analytics. A synopsis of the limitations of systems before this disclosure includes:\n\n","Today's system link data through uncharacterized constructs, such as left joins and right joins and outer joins. The linkages provide no information about the context of the link; the context must be inferred based on what is being linked, the report that uses the link, the business rules in the query used to create a linkage, and the like.","Today's technology is focused on self-contained, fully-defined software-based computer systems that operate on and through the use of a specific set of information representations. The information representations are often poor models of reality as they are constrained by that availability of a limited set of static data types.","Today's \u201csystems\u201d collect data corresponding to the target information representation, the data may be stored in databases, and the systems manipulate, analyze, and report on the data. The possible execution paths of the systems are fully defined, and the systems programming logic may execute from a starting point to one or more specified endpoints.","Today's computer systems are typically limited by one or more of the following, among other limitations:\n\n","The principles of the invention described in this disclosure satisfies the above needs and avoids the drawbacks of the prior art by providing a computational platform that includes combining an object model and a programming model into a single set of constructs (e.g., Forms, Relations, Entities, Relationships). These constructs may provide characteristics of inheritance, linkage, immutability, versioning and substitution in a single structure that may store objects, process, and instructions\/programs, and provide for convergence and divergence of information in information streams, a database graph, or a database web distributable across a set of nodes for use by consumers and producers of the information. Other aspects include the following.","In one aspect, a distributable electronic database embodied in a tangible medium and readable by a computer is provided, the distributable electronic database including a first information stream maintained in the tangible medium including at least one entity and at least one relationship entity wherein the relationship entity signifies a change with respect to at least one other entity or at least one other relationship entity, wherein a relationship entity is also a type of entity, and wherein every entity includes immutable data so that a change in the state of the distributable electronic database is reflected by the addition of a new entity to the first information stream.","In another aspect, a distributed system for improved information and knowledge management is provided including a first information stream associated with a first node in a system of computer-based nodes, a second information stream associated with a second node in a system of computer-based nodes, wherein the first information stream and the second information stream are mutually appendable with respect to the other at any node in the system of computer-based nodes so that the web is expandable by adding new relationship entities to any of the streams, wherein the first information stream and second information stream comprise a plurality of entities representing information and each stream further comprises relationship entities, each relationship entity referencing at least one of the plurality of entities and signifying at least one change to the at least one of the plurality of entities so that the information content associated with the referenced entity is logically changed while preserving the immutability of the referenced entity.","In another aspect, a computer implemented method embodied as computer code in a non-transitory computer readable medium for managing convergence and divergence of information in a system of nodes is provided, the computer code when read and executed by a computer performing the steps of creating a first stream at a first node of a plurality of nodes, the first stream comprising a first set of entities including a first relationship entity, creating a second stream at a second node of the plurality of nodes, the second stream comprising a second set of entities including a second relationship entity, diverging the first stream in relation to the second stream by appending a third set of additional entities to the first stream, diverging the second stream in relation to the first stream by appending a fourth set of additional entities to the second stream, whereby the expanding first stream includes information causing asymmetry in relation to the information in the second stream and the second stream includes information causing asymmetry in relation to the information in the first stream, converging the first stream and the second stream by appending a subset of one of the streams to the other stream producing a converged stream at a point in time, while the first stream and second stream each continue to simultaneously diverge after the point in time through appending the first set of additional new entities to the first stream and the second set of additional new entities to the second stream.","In yet another aspect, a computer-implemented method embodied as computer logic in a non-transitory computer readable storage medium, the computer logic when read and executed by a computer performing the steps of creating an executable function for at least one relation corresponding to at least one property on a first form defining a class of entities, the at least one relation defined by a second form that includes two additional relations being a left side relation and a right side relation, the executable function having an input and having an output, wherein the input is an instance of the first form pointed to by the left side relation of the second form and the output includes at least one instance of a third form pointed to by the right side relation of the second form, and executing the executable function to provide an instance of the first form pointed to by the left side relation and the executable function identifying and retrieving all instances of all third forms pointed to by the right side relation that are discoverable outputs of the second form for the executing function, providing a web of linked entities instantiated from the forms defining the classes of entities so that the web of linked entities provides at least one immutable stream of information that is at least one of readable, searchable, traversable, appendable, expandable and shareable by producers and\/or consumers of the stream of information.","In another aspect, a database embodied in a tangible medium and readable by a computer, the database including a stream maintained in the tangible medium wherein the stream comprises a set of entities, including form entities that describe a total set of all entities in the stream, and the stream further comprising relationship entities that signify changes to the set of entities including changes to any form entities in the stream, thereby the stream is self-describing and self-contained and is propagatable across a network of nodes.","In another aspect, a computer-implemented method for creating or maintaining a database embodied as computer code in a tangible computer readable storage medium that when read and executed by the computer performs the steps of creating a stream by a computing device wherein the stream comprises a set of entities, including form entities that describe a total set of all entities in the stream, and the stream further comprises relationship entities that signify changes to the set of entities including changes to any form entities in the stream, thereby the stream is self-describing and self-contained and is propagatable across a network of nodes, and propagating the stream from at least one node to another node in a network of nodes for use by a consumer of the stream.","In another aspect, a computer-implemented method embodied as computer programming code embodied on a non-transitory storage medium that when read and executed causes the following steps to be performed: creating an information stream, the stream including at least one entity and at least one relationship entity wherein the relationship entity signifies a change with respect to at least one other entity or signifies a change to at least one other relationship entity, wherein a relationship entity is also a type of entity, and reflecting a change in a state of the information stream by addition of a new entity to the information stream, wherein every entity includes immutable data.","In another aspect, a computer-implemented method for creating or maintaining a distributed web for improved information and knowledge management embodied as computer code in a tangible computer readable storage medium that when read and executed by the computer performs the steps of: creating a first information stream associated with a first node in a system of computer-based nodes, creating a second information stream associated with a second node in a system of computer-based nodes, appending one of: the first information stream and the second information stream with respect to the other at any node in the system of computer-based nodes so that the distributed web is expanded by adding new relationship entities to any of the streams, wherein the first information stream and second information stream comprise a plurality of entities representing information and each stream further comprises relationship entities, each relationship entity referencing at least one of the plurality of entities and signifying at least one change to the at least one of the plurality of entities so that the information content associated with the referenced entity is logically changed while preserving the immutability of the referenced entity.","The various aspects of the invention and the various features and advantageous details thereof are explained more fully with reference to the non-limiting examples that are described and\/or illustrated in the accompanying drawings and detailed in the following description. It should be noted that the features illustrated in the drawings are not necessarily drawn to scale, and features of one example may be employed with other examples as the skilled artisan would recognize, even if not explicitly stated herein. Descriptions of well-known components and processing techniques may be omitted so as to not unnecessarily obscure the various examples of the invention. The examples used herein are intended merely to facilitate an understanding of ways in which the invention may be practiced and to further enable those of skill in the art to practice the various aspects of the invention. Accordingly, the examples herein should not be construed as limiting the scope of the invention, which is defined solely by the appended claims and applicable law. Moreover, it is noted that like reference numerals represent similar parts throughout the several views of the drawings.","It is understood that the invention is not limited to the particular methodology, protocols, devices, apparatus, materials, applications, etc., described herein, as these may vary. It is also to be understood that the terminology used herein is used for the purpose of describing particular examples only, and is not intended to limit the scope of the invention, unless specifically stated otherwise. It must be noted that as used herein and in the appended claims, the singular forms \u201ca,\u201d \u201can,\u201d and \u201cthe\u201d include plural reference unless the context clearly dictates otherwise.","A system and method for a computer based Forms Language may include defining the structures that may be needed to capture, store, manage, transfer, copy, append, distribute, evolve, diverge, and converge information across a distributed set of nodes, or even within a given node. The information may include data elements, connections between data elements, and collections of connected data elements. In addition to providing constructs for data and the connections between data, the Forms Language may also provide a construct that captures changes to the connections between data as a separate object.","The value of data linkage, or the relations between data, is often underestimated; a link between two data elements may itself be information about the two linked data elements. For example, linking George Washington and the United States in a \u201cPresident-County\u201d relation may convey not only that the two are linked in some way, but may also convey the information associated with the \u201cpresident\u201d relation. Further linking George Washington to Martha Custis using a \u201cSpouse\u201d relation provides additional information. Linking George Washington to Boston and Yorktown with the \u201cBattles Won\u201d relation provides even more information. The more links exist between George Washington and other data in a system, the more information is known about George Washington, and reciprocally, the more that is known about the data to which George Washington is linked. Using the system and method for a computer based Forms Language described herein, the usefulness of data may be increased as its connectivity increases, in other words, the more data are connected to other data, the more information is available as a result of those connections.","Today's systems before this disclosure link data through uncharacterized constructs, such as left joins and right joins and outer joins. The linkages do not provide information about the context of the link; the context must be inferred based on what is being linked, the report that uses the link, the business rules in the query used to create a linkage, and the like. In a system configured according to the principles of this disclosure, links are objects themselves and have their own relations, allowing for a robust set of descriptive relations to be included as part of the link itself so that a link can add to the information set through the information it contains, and possibly linking the link to other entities or links, expanding the information web organically.","The structures and constructs that may be building blocks of one implementation of a system and method for a computer-based Forms Language, may include but are not limited to the following:\n\n","These structures and constructs may be used to create streams that may comprise a rich web, or graph, of entities that include and link data elements, link to other entities, collections of entities and linkage between entities, and changes to the linkages between entities. Because changes may be captured as separate data themselves, each data element may itself be immutable. This rich web, or graph, of connected information, may be used to implement functions, processing, and systems that may not typically be possible with the technology available before this disclosure.","In one implementation of the Forms Language, the rich web, or graph of data, its connections, and its changes may comprise a database structure and\/or a computational model that may combine: data immutability with link Entities that may be referred to as relations, change entities that may be referred to as relationships as well as inheritance, linkage, versioning, and substitution, into a single structure for storing both the objects and programs.\n\n",{"@attributes":{"id":"p-0128","num":"0158"},"figref":"FIG. 1","b":["100","100","105","110","100","105","140","115","105","110","105","120","125","130","135"],"ul":{"@attributes":{"id":"ul0011","list-style":"none"},"li":{"@attributes":{"id":"ul0011-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0012","list-style":"none"},"li":["Linkage: All objects may be represented by Forms and instantiated as Entities. Relations and Relationships may provide the linkage between Entities. For example, a File Form may link to its Name through the Name Relation, and a Folder Entity may link to its Subfolders through a Containment Relationship Entity.","Immutability: Data may not be changed (i.e., changed in the sense of traditional systems) in a system configured according to the principles of the disclosure; rather data may evolve as a result of the addition of Relationship Entities, negation of Relationship Entities, or creation of Versions through Substitution Relationship Entities.","Relationships: Relationships may signify change between two entities, typically by creating links or substituting links. Relationships may also be described by Relations, providing additional context to a change and may link to other entities or other Relationships. Change in the system configured according to the principles of this disclosure may be signified by the information in a Relationship, and may capture change in an object that may itself be distributable and streamable, thereby making change distributable and streamable.","Substitution\/Versioning: In a system configured according to the principles of the disclosure, Entities may only be changed through the addition of Relationship Entities that target the Variant Relations belonging to the Form that defines an entity. Variant Relation point to Relationships that may evolve over time through Substitution, a process in which a new Relationship that points to a new Entity may be created, and a previous Relationship may be substituted with the new Relationship. Using this process, any Relationship may be versioned and the chain of Relationship Substitutions may be maintained."]}}}},"With these characteristics, implementation of the Forms Language constructs may be used to create collector architectures (e.g., local grid, organizational grid, regional grid, global grid and the like) in which the objects and programs may be aggregated and disaggregated based on human or automated instruction. Once aggregated, the Forms Language constructs may be used to create simple and complex computational models and algorithms. One of ordinary skill in the art may recognize that these constructs may be used to implement other types of architectures as well.","Definitions for terms used to describe aspects of one implementation of the system and method for a computer based Forms Language are provided below:","Form: A Form may be a construct that may be used to model objects in databases, configured according to the principles of the disclosure. A Form may be a collection of Relations, and Relations may also be defined by Forms. For example, a system may include two Forms: A \u201cPerson\u201d Form and a \u201cCompany\u201d Form. The \u201cPerson\u201d Form may contain a \u201cName\u201d Relation to link a name with the person. A \u201cCompany\u201d Form may contain two relations: a \u201cName\u201d Relation to link a name with a company and an \u201cEmployee\u201d Relation to link multiple \u201cPerson\u201d Forms to the \u201cCompany\u201d Form. A Form may model essentially anything tangible and\/or anything intangible.\n\nRelation: A link between two or more Forms. A Relation may act as a Function that may join a Form on one side (e.g., the input Form, or left Form) to a Form in the other side (e.g., the output Form, or right Form). For example, a system may include three Forms: A \u201cPerson\u201d Form, a \u201cName\u201d Form, and a \u201cCompany\u201d Form.\n\n","The phrase \u201cleft Form\u201d, the phrase \u201cright Form\u201d, the phrase \u201cleft side Relation\u201d, and the phrase \u201cright side Relation\u201d used in this disclosure (including the claims) are names given to the respective logical objects associated with a relation Form and are not meant to refer to an actual specific physical limitation or a specific physical arrangement; the terms are simply names for the respective logical objects to permit improved explanation\/description of the relation Form.","Entity: A concrete instance of a Form. For example, a Form and the associated relations used to describe a Company and its properties, respectively, may become an Entity when it is instantiated and a GUID (globally unique identifier) is assigned. After instantiation, a name, such as \u201cAcme, Inc.\u201d, may be associated with the \u201cCompany\u201d Entity through the \u201cName\u201d Relation and the \u201cName\u201d Relationship. Each entity may include immutable data that may not be changed, such as the entity GUID. Typically, each invariant relation is represented by immutable data field belonging to the entity. Anytime a new link is created between entities, a relationship may be created to reflect that the new link may signify one or more changes to the entities being linked,\n\nRelationship: An Entity that that may link two or more Entities and may signify change to at least one or more of the linked, or referenced entities. For example, a system may include three Entities: A \u201cJoe\u201d Entity, a \u201cMary\u201d Entity, and an \u201cAcme, Inc.\u201d Entity. The \u201cAcme, Inc.\u201d Entity may contain an \u201cEmployee\u201d Relation that may link the \u201cJoe\u201d Entity and the \u201cMary\u201d Entity to the \u201cAcme, Inc.\u201d Entity through a Containment Relationship Entity.\n\nObject: As understood by one of ordinary skill in art, an object may be a data structure used in programming that may include attributes to define its properties, methods to define its state, and methods to define operations that it may perform or that may be performed on it.\n\nInstantiate: As understood by one of ordinary skill in the art, to instantiate may be to create a \u201cconcrete\u201d instance of an abstract object (e.g., in computer's transient memory or in a computer's physical storage layer). In the Forms Language, a Form may be instantiated when an Entity defined by a specific Form is created.\n\nAttribute: In one implementation of the Forms Language, a relation of an object being modeled that may represent a characteristic with only a single value at a given point in time. For example, a \u201cPerson\u201d Form may have a \u201cName\u201d Attribute. When instantiating the \u201cPerson\u201d Form as an entity, only one value (e.g., \u201cJoe\u201d) can be associated with the \u201cName\u201d Attribute at a given time. If a need to change the \u201cName\u201d Attribute from \u201cJoe\u201d to \u201cJoseph\u201d arises, the \u201cName\u201d Attribute associated with \u201cJoe\u201d may be substituted and a new version of the \u201cName\u201d Attribute associated with the string \u201cJoseph\u201d may be created.\n\nElement: In one implementation of the Forms Language, a relation of an object being modeled that may represent a characteristic with multiple values at a given point in time; many elements of the same relationship type may exist at the same time. For example, a \u201cPerson\u201d Form may include the relations: \u201cName\u201d Attribute and a \u201cFriends\u201d Element. When instantiating the \u201cPerson\u201d Form as an entity, \u201cJoe\u201d may be associated with the \u201cName\u201d Attribute and \u201cBill\u201d may be associated with the \u201cFriends\u201d Element. The \u201cFriends\u201d Element may later be associated with a \u201cPerson\u201d Entity \u201cSally\u201d through the \u201cFriends\u201d element while \u201cBill\u201d is also associated with the \u201cFriends\u201d Element.\n\nProperty: In one implementation of the Forms Language, a property is a characteristic of a Form and may also be referred to as a Relation.\n\nProperty Relationship: In one implementation of the Forms Language, a Property Relationship may be used to link a Variant Relation with one or more entities at a given point in time. For example, a Person Form may include a Height Relation and a Friends Relation. A person's height may link to a variant relation that may be expected to point to only one value at a time, but may be expected to change as time progresses. A person's friends relation may be expected to point to multiple values at a given point in time, and may also be expected to change as time progresses.\n\nSubstitution: In one implementation of the Forms Language, the process by which an existing Relationship between two Entities may be replaced. During the replacement process, the existing Relationship linking the two entities may be assigned to the \u201cPrevious Version Relationship\u201d in the Substitution Relationship Entity. In addition, the newly created Relationship linking the two entities may be assigned to the \u201cNext Version Relationship\u201d in the Substitution Relationship. For example, a system may include a Person Entity that may include a Name Relation. The Name Relation may link the Name Entity \u201cJoe\u201d to the \u201cPerson\u201d Form through a \u201cName Property\u201d Relationship. A new \u201cName Property\u201d Relationship may be created to link the Name entity \u201cJoseph\u201d to the \u201cPerson\u201d Form. A Substitution Relationship may then be created and link the existing \u201cName Property\u201d Relationship that points to \u201cJoe\u201d as the Previous Relationship, and the newly created \u201cName Property\u201d Relationship that points to \u201cJoseph\u201d as the Next Relationship.\n\nVersioning: In one implementation of the Forms Language, the process by which a Relationship linking one Entity to another Entity may be updated. One method for updating a relationship is by inserting a Substitution Relationship.\n\nPrevious Relationship: In one implementation of the Forms Language substitution and versioning process, the Substitution Relationship Entity may designate the Relationship to be replaced as the \u201cPrevious Relationship\u201d. For example, a system may include a Person Entity that may include a Name Relation. The Name Relation may link the Name Entity \u201cJoe\u201d to the \u201cPerson\u201d Form through a \u201cName Property\u201d Relationship. A new \u201cName Property\u201d Relationship may be created to link the Name entity \u201cJoseph\u201d to the \u201cPerson\u201d Form. In this example, the Person Entity was initially assigned the Name \u201cJoe\u201d through the Name Relationship, which links the Person Entity and the Name Entity \u201cJoe\u201d. To complete replacement, the newly created Substitution Relationship may designate the existing Name Relationship that points to \u201cJoe\u201d as the Previous Version Relationship, and the new Name Version Relationship that points to \u201cJoseph\u201d as the Next Relationship.\n\nNext Relationship: In one implementation of the Forms Language substitution and versioning process, the Substitution Relationship Entity may designate the Relationship that will be assigned as the \u201cNext Relationship\u201d and may complete the update. For example, a system may include a Person Entity that may include a Name Relation. The Name Relation may link the Name Entity \u201cJoe\u201d to the \u201cPerson\u201d Form through a \u201cName Property\u201d Relationship. A new \u201cName Property\u201d Relationship may be created to link the Name entity \u201cJoseph\u201d to the \u201cPerson\u201d Form. In this example, the Person Entity was initially assigned the Name \u201cJoe\u201d through the Name Relationship, which links the Person Entity and the Name Entity \u201cJoe\u201d. To complete replacement, the newly created Substitution Relationship may designate the existing Name Relationship that points to \u201cJoe\u201d as the Previous Relationship, and the new Name Relationship that points to \u201cJoseph\u201d as the Next Relationship.\n\nNegation: In one implementation of the Forms Language, the process which by the Next Version of a Substitution Relationship may point to a null entity.\n\nNull Entity: In one implementation of the Forms Language, an entity with a GUID Relation, Time Relation, and no other Relations. In an exemplary implementation of the Forms Language, all negated relationships may point to the same null entity.\n\nRelational Bridge: In one implementation of the Forms Language, a plain English reference to the link that may be created between two Forms when joined by a Relation, or two Entities when joined by a Relationship. The Relational Bridge may be used to retrieve Entities that are linked to other Entities.\n\nRelational Stepping: In one implementation of the Forms Language, the process that may be used to \u201cwalk\u201d one or more Relational Bridges by inspecting and\/or querying a Relationship to determine the Entities that are linked to a specific Entity, followed by retrieval of the related Entities.\n\nFunction: In one implementation of the Forms Language, a construct that may receive one or more input(s) and produce one or more output(s).\n\nSystem: As understood by one of ordinary skill in the art, a collection of programming code that when read and executed by appropriate computing hardware (which may include various types of non-transitory readable memory or storage that may store the programming code), performs the operations defined in the code. A System may also include the physical hardware or allocated virtual hardware (the hardware may included distributed hardware, perhaps inter-networked) in which the collection of programming code is executed.\n\nTuple: As understood by one of ordinary skill in the art, a collection of fields of related information that may be stored in a row.\n\nTuplebase: In one implementation of the Forms Language, a collection of tuples of related information that may comprise part of the storage layer of a database configured according to the principles of the disclosure.\n\nStream or Entity Stream: In one implementation of the Forms language, a stream may be a collection of entities instantiated from Forms configured according to the principles of the disclosure. A stream may store content for a database configured according to the principles of the disclosure. A stream may typically include a relationship entity signifying a change with respect to at least one other entity or relationship entity which may or may not be present in the stream.\n\nStreamable: In one implementation of the Forms language, entities in one stream that can be merged or appended with any other stream are streamable. A stream may also be referred to as a database configured according to the principles of the disclosure. A stream may be maintained in a readable non-transitory storage medium at any of the nodes (or more than one node) in the network of nodes.\n\nStreambase: In one implementation of the Forms Language, a medium that may store structured data and\/or traditionally unstructured data (e.g., documents, images) in a structured way through the use of an entity-relational model configured according to the principles of the disclosure which may suffuses entities and relations into a flat data structure of essentially unlimited length. The Streambase may also comprise a part of the storage layer of a database configured according to the principles of the disclosure. Also known as a streamable database.\n\nDocument: In one implementation of the Forms Language, a document may be an unstructured content or may be expressed as a hierarchical structure in which order and sequence matter. A document may be physically rendered in the Forms Language as a contiguous section of structured or unstructured data in a stream. Documents in the Forms language may include files such as word processing, text, XML, spreadsheets, program file, and many other file types.\n\nNon-relationship entity: In one implementation of the Forms Language, a non-relationship entity is an entity that may be pointed to by one or more Relationships, and the non-relationship entity may not itself point to any other Relationships. Example non-relationship entities may include a string, a number, or a file. Expanding the example, a name \u201cChuck\u201d, an age \u201c25\u201d, an image file, a set of instructions that make up computer program, and the like, may be non-relationship entities.\n\nVariant Relation: In one implementation of the Forms Language, a one-to-many, or one-to-N, association between a relation and relationships that may be substituted or negated over time. A variant Relation may link a Form to an unlimited number of Relationship Forms or sets of Relationship Forms over time, although only to one Relationship Form or sets of Relationship Forms at any given time. When instantiation, right side Relation of a Variant Relation of an Entity may typically link to a Relationship Entities.\n\nInvariant Relation: In one implementation of the Forms Language, a one-to-one association between a Relation and another entity that may not change over time; invariants represent one-to-one Relations. An invariant Relation may typically link a Form with a single and unchanging Form or set of unchanging Forms over time. For example, GUID and Time may be invariant Relations for Entities.\n\nComplex Entity: In one implementation of the Forms Language, a complex entity may be a construct for structured or unstructured data that may vary in format, size, and content. Examples of Complex Entities may include Files, Folders, and Forms.\n\nPrimitive Entity: In one implementation of the Forms Language, a primitive entity may be a construct for structured data of a specified type that may be stored using a specified maximum number of bytes. Examples of \u201cPrimitive\u201d entities may include string, number, date, and the like.\n\nRelation Join Stream: In a database configured according to the principles of the disclosure, Relation Join Stream may be used to store the Relations of an Entities in the database. The Relation Join Stream is part of the entity stream.\n\nConstruct: In a database configured according to principles of the disclosure, a programming object.\n\nRelationMap: In one implementation of the Forms Language, the list of associations, also referred to as properties or, Relations that may comprise a Form.\n\nBootstrapping: In one implementation of the Forms Language, a process that may be used to initialize and seed a database configured according to the principles of the disclosure with self-referencing and self-describing Forms.\n\nBase Case: The initial run of a recursive process that may be used to build Forms and Entities during bootstrapping.\n\nformView: In one implementation of the Forms Language, a predefined set of attributes and elements that may be retrieved when accessing an Entity. In other implementations of the Forms Language, a predefined set of properties that may be retrieved when accessing an Entity.\n\nentityView: In one implementation of the Forms Language, the set of Entities that may be returned by executing a formView.\n\nVariant Form: In one implementation of the Forms Language, a Form that may be comprised of mostly variant, or one-to-many, relations. For example, a Folder Form may be comprised of mostly variant relations.\n\nInvariant Form: In one implementation of the Forms Language, a Form that may be comprised of mostly invariant, or one-to-one, relations. For example, Relationship Entities may typically be instantiated from Invariant Relationship Forms.\n\nFirst-class object: In one implementation of the Forms Language, an object defined by a Form. Forms may also be first class objects as they are themselves defined by Forms.\n\nDifferential Data: In one implementation of the Forms Language, a process by which Relationship entities may be used to capture discrete changes in state over time so that changes may become first class objects in the data representation.\n\nState change: in one implementation of the Forms language described by this disclosure, a state change is the addition of any new entity to a system, stream, database, web or the like. For example, instantiation of an entity and the relationships which link the instantiated entity to its properties may all be considered state changes. Changes to a system, stream, database, or the like when configured according to the principles of the disclosure may be signified by the creation of new relationships and may therefore also be state changes. In another example, creation of a relationship substituting one entity for another entity may also be a state change. In addition, Forms and non-relationships may also be entities for which the addition of or changing relationships may also be state changes. In a typical database before the invention, rows in databases are typically mutable integrated states. For example, each rows is a compilation of the current values of a field, such as name and may be updated and state changed directly in the field. Whereas, in a database configured according to the principles of the disclosure, rows are typically immutable differential changes. For example, existing entities are changed by the addition of new entities which reference the existing entities. These new entities my typically be inserted as new rows in the database and may not be subsequently updated, therefore these new rows are immutable.\n\nIn memory object representation: a framework that provides for the storage and retrieval of data in the random access memory of a server, personal computer, or other computing device. For example, storage of objects in the Java virtual machine is one type of in-memory representation.\n\nGraph Database: one or more or streams of entities with a rich web of linkage generated during the instantiation of the entities and their relations and relationships, with the entities, relations, and relationships configured according to the principles of the disclosure.\n\nDatabase Web: In one implementation of the Forms Language, a database web may be a collection of streams configured according to the principles of the disclosure.\n\nDistributed\/Distributable: a stream or database graph that are configured according to the principles of the disclosure that may be spread across more than one of any type of electronic infrastructure and may be inter-connected via a communications channel. The electronic infrastructure may include, but is not limited to: virtual machines, physical servers, other computer servers, electronic devices (e.g., smart phones, tablet computers, desktop computers, laptop computers, portable electronic computing devices, netbooks, and the like), other computing devices, or any device configured to receive or transmit the stream or graph database or portions thereof.\n\nNode: A virtual server, virtual machine, a physical server, a physical machine, an electronic device, a program resident on hardware, or a programming environment resident on hardware capable of running a system or part of a system configured according to the principles of the disclosure.\n\nTransmission carrier: a signal transport layer that may move information, such as radio transmission, phone line, cell phone, internet connection, and the like.\n\nOptical memory: a device that may store information written using a laser, such as a CD, DVD, and the like, or memory employing photonic techniques\n\nMagnetic memory: a device that may store information written (and\/or readable) through magnetization of the media, such as a computer hard disk, magnetic tape, and the like.\n\nDatabase table: a collection of related data that may be organized into columns and rows\n\n\u201cTraditional database\u201d or SQL database: a database that may store related information organized into tables that may contain rows and column. The data may typically be normalized to optimize information storage and retrieval. In a SQL database, the information in one table may reference information in another table through the use of primary keys and\/or foreign keys.\n\nMessage queue: a collection of information packets that may be waiting to be transferred using a specified communications protocol. Message queues may have quality of service features and may be synchronous, where the recipient must be available to receive the message before it is sent, or may be asynchronous in that the message may be sent without knowledge of whether the recipient is available or otherwise able to receive it.\n\nPortable storage device: a tangible electronic medium on which information may be persisted that may be readily carried by a human. For example, a computer hard drive, external storage drive, smart phone, flash drive, compact disk, DVD, SIM card, and the like.\n\nConsumer: as may be recognized by one of ordinary skill in the art, a consumer may include a user, a device, a computing device, a process, an application, another entity, an information stream that accepts one or more information objects and\/or makes use of the one or more accepted information objects.\n\nProducer: as may be recognized by one of ordinary skill in the art, a consumer may include a user, device, computing process, or an application, and the like. Further, in accord with principles herein, a producer may include another entity and\/or an information stream that creates or causes the creation of one or more information objects.\n\nCloud: As one of ordinary skill in the art may recognize, the Cloud is the set of computer servers and associated hardware infrastructure accessible through the Internet that an organization may operate on its own (private Cloud) or operated by third parties (Commercial Cloud) which may offer on an as-needed basis the virtual space and computing resources, operational support, and other services to organizations or individuals on a commercial or free basis. Cloud operators, private or public, may also offer service level agreements guaranteeing a certain percentage of time of availability for the servers, resources, and associated hardware infrastructure. Some implementations of a Cloud may be delivered on a network other than the Internet.\n","Architecture",{"@attributes":{"id":"p-0135","num":"0172"},"figref":["FIG. 2","FIG. 3"]},"These exemplary figures show the use of servers, virtual machines, and nodes connected in a distributed system. As one of ordinary skill in the art may recognize, a server may typically be physical device with: one or more hard drives that may provide a storage medium for electronic data; random access memory (RAM) for holding information that may be needed to execute computer programs and their instructions; a processor that may execute the various computer programs and their instructions; various connection points for input\/output, multimedia devices, other peripheral devices, and communications with other servers; and a motherboard, may also be referred to as a circuit board, that may connect and may provide power to the server components.","The terms \u201cvirtual machine\u201d and \u201cvirtual server\u201d may typically refer to a collection of software that may be required to execute and run programs on a physical server. A virtual server may share the memory and storage resources of the physical server on which it resides with other virtual machines or other installed software, or the virtual server may be specifically allocated memory and storage resources that cannot be accessed by other software on the same physical server.","A \u201cnode\u201d as shown in exemplary  may indicate a virtual server, virtual machine, physical server, physical machine, electronic device, program, or programming environment capable of running a system or part of a system configured according to the principles of the disclosure. A \u201cnode\u201d as shown in exemplary  may refer to a specific node or collection of nodes associated in a parent:child relationship.",{"@attributes":{"id":"p-0139","num":"0176"},"figref":["FIG. 2","FIG. 2"],"b":["200","200"],"ul":{"@attributes":{"id":"ul0015","list-style":"none"},"li":{"@attributes":{"id":"ul0015-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0016","list-style":"none"},"li":["Global Hub Node Server (): Coordinates and manages all Node Servers. Each Server may provide a set of applications (e.g., file management, user management, group management, database applications, etc.), and persist and manage data, information, and users.","Global Hub Node Server Clients (, , ): interface through which users may access the Node Servers, applications, data, and information. The client interface may be a thin web client, thick web client, desktop interface, command prompt, or another interface type.","Node Servers (, , , ): Dedicated servers that may be allocated for a purpose defined by the user that created the node. Each server may provide a set of applications (e.g., file management, user management, group management, database applications, specialized applications, etc.), and may persist and manage data, information, and users.","Node Server Clients (, , , , , , , , ): interface through which users may access the Node Servers, applications, data, and information. The interface may be a thin web client, thick web client, desktop interface, command prompt, or other interface type. Messaging Server (): May receive, queue, store, manage, and otherwise transact information packets being transferred between Node servers."]}}}},"The Global Hub Node Server () may be connected to a set of Node Servers (, , , ), a Messaging Server (), and a set of Clients (, , ). Additional Clients (, , , , , , , , ) may be connected to each Node Server after authenticating to the Global Hub. One of ordinary skill in the art may recognize that any number (greater than zero) of Global Hub Node Servers, Messaging Servers, Node Servers, and Clients may be implemented in this architecture.","In addition, the communications protocol shown in this example is internet protocol. One of ordinary skill in the art may recognize that other protocols may be used. In addition, the connection protocol communications may be secured through the use of firewall, secure socket layer (SSL) technology Virtual Private Network (VPN), or other security protocols.","In the example of , clients may first connect to the Global Hub Node Server () via internet protocol, authenticate, and may then be passed to another Node Server (, , , ), with or without secondary authentication. Messages may be passed between Nodes using the exemplary Messaging Server ().",{"@attributes":{"id":"p-0143","num":"0184"},"figref":"FIG. 3","b":["300","300","205","210","215","220","225","205","210","215","220","225"]},"In the example of , the Node Server architecture  may include the following:\n\n","Forms Language","In one implementation configured according to the principles of the disclosure, the Forms Language may provide a structure that may be used to create and assemble diverse and richly linked webs of Entities in streams, databases, graph databases, and the like. The Forms Language may permit the creation of \u201cForms\u201d, which may define the class properties of the Entities each represents and may define the relational structure of each specific type of Entity. The class defined by a Form may be a Form Entity, Relation Entity, Relationship Entity, or any other Entity that may be instantiated by a Form. In one example implementation, a java class may be declared for a particular Form type as follows:\n\n","In this example, the Folder Form class extends and inherits from the Content Form class. Continuing this example, the Content Form class declaration may be as follows:\n\n","Indicating that the Content Form class extends and inherits from the Entity Form class. Because the Folder Form class extends and inherits from the Content Form class, the Folder","Form class also inherits from the Entity Form class. When inheriting from a class, the class hierarchy may typically mimic the Form hierarchy.","Each Entity instantiated from the Form may be an instance of the class the Form defines. The structure of a Form may be defined by a set of Relations that bind, or link, one Form together with other Forms. Each of the set of Relations may are be defined by Forms and may also be classes. These Relations may associate meaning, context, and content with Forms they link. The Relation may link the Form that contains it with the Form that is its target.",{"@attributes":{"id":"p-0151","num":"0214"},"figref":"FIG. 4","b":["400","400","1","410","1","2","2","1","1","410","450","1","1","1","420","2","1","410","460","2","2","2","430","1","410","470","440"]},"Relations","In one implementation of the Forms Language, a Relation may be a function that maps a Form on one side (e.g., \u201clogically\u201d the left side or the input side) to a Form on the other side (e.g., \u201clogically\u201d the right side or the output side). The Relation itself may be a Form of type Function.  is an exemplary illustration of a Relation, generally designated by reference numeral . In this example, Relation Form  may include:\n\n","Once a Form and its Relations are defined, the Form may be instantiated to create new Entities that are joined to other Entities through Relations and Relationship Entities. Each Entity instantiated from the Form is an instance of the class the Form defines. The example functions represented by the example Relations shown in  () are listed in Table 1.",{"@attributes":{"id":"p-0155","num":"0220"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 1"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Example: Form 1 (410) Relation Functions"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"98pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Relation","Input\/Left Side Form","Output\/Right Side Form"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Relation 1","Form 1 (410)","Form A (450)"]},{"entry":["Relation 2","Form 1 (410)","Form B (460)"]},{"entry":["Relation N","Form 1 (410)","Form N (470)"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"In the more specific example of a Relation Form, generally denoted by reference numeral , shown in , The Name Relation Form  may include a Person Form () with a Name Relation (). The Name Relation () is defined by a Name Relation Form () that links the Person Form () through Left Side Relation  () to the Name Property Relationship Form () through Right Side Relation  (). The Name Relation Form () may include a Corresponding Relation  () that links to the Parent Relation () on the Name Property Relationship Form (). The Name Property Relationship Form () includes a Child Relation () which is defined by the Child Relation Form (). The Child Relation Form () links the Name Property Relationship Form () through Left Side Relation  () to the String Primitive Form () through Right Side Relation  (). The String Primitive Form () may include a Corresponding Relation  () that links to the String Value Relation () on the String Primitive Form (). The String Primitive Form ( may be instantiated to an Entity that may contain the string with the name when the Person Form is instantiated.","Throughout this disclosure, for ease of discussion and simplicity, the text and illustrations do not typically include a display and description of the Relation Form that corresponds to each Relation. Relations are typically shown as linking directly to the right side\/output Form.","The phrase \u201cleft Form\u201d and the phrase \u201cright Form\u201d used in this disclosure (including the claims) are names given to the respective logical objects associated with a relation Form and are not meant to refer to an actual specific physical limitation or a specific physical arrangement; the terms are simply names for the respective logical objects to permit improved explanation\/description of the relation Form. Similarly, the phrase \u201cleft side relation\u201d and the phrase \u201cright side relation\u201d (or \u201cright side relations\u201d) used in this disclosure (including the claims) are names given to the respective logical references (i.e., pointers or linkages) associated with a relation Form and are not meant to refer to an actual specific physical limitation or a specific physical arrangement; the terms are simply names for the respective logical references to permit improved explanation\/description of the references associated with a relation Form.","When a Form is said to \u201chave\u201d a set of Relations, it means that the Form is targeted by those Relations on one side (e.g., the left side, the input side). When a Form is \u201cproduced\u201d by a Relation, it receives the Relation (e.g., the right side, the output side).","Using Forms Language, any number of Entities, including Forms, Relations, Relationships, Entities instantiated from Forms, and the like may be created. A Relation is an entity that may link one Form to another Form. A Relation may map a Form on one side, (e.g., the input side, the left side) to a Form on another side (e.g., the output side, the right side).","A Relation on a Form may point to another Form, a Relationship Form, or another entity. A Relationship Form may itself contain Relations that may point to another Relationship Form or another Form. The type of Form that a Relation points to may depend on whether the Relation is variant or invariant. A Relation may be designated as variant if there may be a need to change the target output at some time. A Relation may be designated as invariant if there will never be a need to change the target output.\n\n","Continuing the example shown in , if Folder Entity  () is deleted, Folder Entity  () may be updated through the creation of another Relationship.  is an exemplary illustration of a Relationship Entity Signifying Change to a Variant Relation, configured according to the principles of the disclosure, and designated generally by reference numeral . The illustration shows Folder Entity () as linked to Folder Entity  (), Folder Entity  (), and Folder Entity  () through Containment Relationship Entity (), through Containment Relationship Entity (), Containment Relationship Entity (), and Substitution Relationship Entity (). The illustration () shows creating a Relationship to signify a change to Folder 's Variant Child Relation () to Folder Entity . In this example, to signify that Folder Entity  () no longer includes Folder Entity  (), a Substitution Relationship Entity () is instantiated. The Next Relation () on Containment Relationship Entity  () is pointed to the Previous Version Relation () on Substitution Relationship Entity  (), and the Next Version Relation () on Substitution Relationship Entity () is pointed to the NullEntity ().","Because the link to Folder Entity  () is not modified in this example, it is possible for a system configured according to the principles of the disclosure to retrieve the history of folders contained by Folder Entity  ().\n\n","In one implementation of the Forms Language, the combination of entities, variant relations, relationship Forms and entities, substitution relationships, may be used as a mechanism to assure immutability of data and capture change using new first class objects.","Relationships","A Relationship may be Entity and may therefore be defined by a Form and its Relations. A Variant Relation typically links to a Relationship through the ride side Relation on the Variant Relation Form. Relationship Entity maybe the link between the right side Relation of a Variant Relation on an Entity and another Entity Form, or when instantiated, may link a ride side Relation on the Variant Relation on one Entity to a Relationship Entity. Relationships created using the Forms Language, may be mostly invariant. Relationships are immutable because a relationship is an association. If any part of the association changed, it would no longer be the same association. Therefore, because Relationship entities are associations, a relationship entity may be invariant (or characterized by invariant relations). In a system configured according to the principles of the disclosure, changes may be signified only through the addition of new Relationship Entities that may create new linkage between entities.","Because Relationships may be defined by a Form, and a Form may be a class, a Relationship may also be a class. As a class, a Relationship may be considered a first-class object so that change itself may be an object in the system rather than simply the result of an action. According to the principles of the disclosure, a Relationship represents change in a system. Relations are mostly immutable, and rather than changing are classes that represent the changes in the system. As such, Relationships may reflect differential data with respect to one or more entities in a system. In one aspect, information may be expanded in such a system only through the accrual of differential data using Relationships and\/or non-relationship entities.","The changes that may be signified by a Relationship may be considered to be changes on one entity with respect to one or more other entities.  is an exemplary diagram of a Relationship Entity Signifying Change to a Variant Relation, generally denoted by . For example, as shown in  () the removal of Folder Entity  () as a Child of Folder Entity  () is a change in the containment of Folder Entity  () with respect to Folder Entity  (). Similarly,  is an simplified example of a substitution relationship, generally denoted by . As shown in  (), the change of a Person Entity's Name () from \u201cJoe\u201d to \u201cJoseph\u201d is a change of the Name Relationship Entity () with respect to Person Entity  ().","Relationships may be versioned, or substituted, through a process in which the Relationship linking one Entity to another Entity may be updated by inserting a Substitution Relationship. This Substitution Relationship may point to the Relationship being updated as the Previous Version Relation and the new Relationship as the Version Next Relation. During the substitution process, the existing Relationship linking the two entities may be assigned to the \u201cPrevious Version Relationship\u201d in the Substitution Relationship Entity. In addition, the newly created Relationship linking the two entities may be assigned to the \u201cNext Version Relationship\u201d in the Substitution Relationship.  is an illustration of a simplified example of a Substitution Relationship, configured according to the principles of the disclosure, generally denoted by reference numeral . In this example, a Person Entity () includes a Name Relation () that is linked to the String Entity assigned a value of \u201cJoe\u201d () through the Name Relationship Entity  (). The Name Relationship () may be updated to point to the String Entity assigned a value of \u201cJoseph\u201d () to \u201cJoseph\u201d by creating a Substitution Relationship Entity () that assigns the existing Name Relationship  () that points to the String Entity assigned a value of \u201cJoe\u201d () as the Previous Version Relation (), and assigns the assigns the new Name Relationship  () that points to the String Entity assigned a value of \u201cJoseph\u201d () as the Next Version Relation ().","To negate a Relationship, the Next Relationship may be pointed to a null entity during the substitution process as shown in  ().","Example Relations and Relationships","Several non-limiting examples of specific Relations and Relationships that may be used in one implementation of the Forms Language are described below:\n\n","Types of Forms","Any number of Forms and Form types may be created using the Forms Language. All Forms may be derived from the base, or parent, \u201cEntity\u201d Form; therefore any Form may derive from any other Form. The Child, or derived, Form may inherit all properties of the Parent Form, and additional properties may be added. Any number of unique Form types may be created using the Forms Language. Several example Forms may include the following:\n\n","In one or more implementations of the Forms Language, these Forms and their Relations may enable the combination of the object model and the programming model into a single unifying structure: a graph database that may implement linkage, immutability, versioning, and substitution into a single structure that may store objects and programs. Using these constructs, an implementation of a database may be developed using the Forms Language so that these Forms, Relations, Entities, and Relationships may:\n\n","Descriptions of the function and purpose of the Forms developed in one implementation of the Forms Language are provided in the subsections that follow.","Form Form",{"@attributes":{"id":"p-0178","num":"0286"},"figref":"FIG. 11","b":["1100","1100","1100"],"ul":{"@attributes":{"id":"ul0038","list-style":"none"},"li":{"@attributes":{"id":"ul0038-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0039","list-style":"none"},"li":["Globally Unique Identifier (GUID) Relation (): as understood by those practiced in the art, a distinct number (e.g., in hexadecimal or other format) that can be used to uniquely reference the entity with which it is associated;","Time Relation (): the date and time at which the entity was created;","FormGUID (): reference to the type of Form that defines the entity;","Name Relation (): a link to the Primitive Form that contains the name associated with this Form;","Abstract Relation (): Boolean flag that may indicate if the Form is abstract. Abstract Forms may not be instantiated and instead may only be extended by other Forms.","Final Relation (): Boolean Flag that may indicate whether a Form is final. A final Form may not be extended.","Classlnterface Relation (): Relation that may point to zero or more application class interfaces which may be used to create objects of this Entity type. For example, implementing this Relation in Java may associate the path to the Java Class used to create an Object of this Form and Entity type.","BaseForm Relation (): Relation that may point to zero or more base Forms which this Form may extend.","DerivedFrom Relation (): Relation that may point to zero or more Forms that may extend this Form.","OneToOne Relation (): Relation that may point to zero or more one-to-one relations that may be assigned to this Form.","OneToMany Relation (): Relation that may point to zero or more one-to-many relations that may be assigned to this Form."]}}}},"Entity Form","In one implementation of the Forms Language, all objects may be entities and a unified approach to describing and handling all objects may be implemented. This unified and consistent approach may begin with the Entity Form, which may be subclassed and inherited by all other Forms, providing the foundation for flexibility in systems configured according to the principles of the disclosure. The Entity Form in one implementation of the Forms Language may include numerous Relations, several of which may be described as follows. Other implementations an Entity Form may include additional Relations, exclude certain Relations, or name similar or the same Relations differently. Additional Relations not described below may be used to enable the Entity Form using Forms Language, and provide other associations and functionality.  is an illustration showing an exemplary Entity Form configured according to principles of the disclosure, generally denoted by reference numeral . The Entity Form  may include:\n\n","Example descriptions (pseudo code) of the opposing sides of the Relations contained by an Entity Form include:\n\n","Relation Form","In one implementation of the Forms Language, the Relation Form may extend the Entity Form and may provide the associations required to link one Form to another Form. The Relations on a Form may give Forms their true shape by documenting the Forms to which another Form may link, as well as the properties of a Form. With the description of each Form stored directly in a system configured according to the principles of the disclosure, a fixed data structure may not be necessary, and a database configured according to the principles of the disclosure may become self-describing and extremely flexible. Because Forms may also be Entities, both the shape of Entities as well as the data associated with entities may be stored, copied, streamed, transferred, merged, or otherwise combined in different databases, information streams, nodes, and the like configured according to the principles of the disclosure.","The Relation Form may include numerous Relations, several of which are described as follows. Other implementations of a Relation Form may include additional Relations, exclude certain Relations, or name similar or the same Relations differently. Additional Relations not described below may be used to enable the Relation Form using Forms Language, and provide other associations and functionality.  is an exemplary illustration of the Relation Form generally denoted by reference numeral . The Relation Form  may include:\n\n","Relationship Form","In one implementation of the Forms Language, the Relationship Form may extend the Entity Form and may provide the associations needed to link one or more Entities to one or more other Entities. A Relationship may be an Entity that connects multiple other entities. For example, a human may have a \u201cContact Relationship\u201d. Each \u201cContact Relationship\u201d may reference either the \u201cFriend\u201d or \u201cAcquaintance\u201d relation for that human. In addition to connecting two other entities, Relationships may also connect a many additional of entities. Relationships may connect Entities in a variety of different ways so that systems implemented according to the principles of the disclosure may provide a rich web of interconnected, interrelated data, and the interconnections and interrelation may transform disconnected data into information and knowledge.","The Relationship Form may include numerous Relations, several of which are described as follows. Other implementations of a Relationship Form may include additional relations, exclude certain relations, or name similar or the same relations differently. Additional Relations not described below may be used to enable the Relationship Form using Forms Language, and provide other associations and functionality.  is an illustration of an exemplary Relationship Form, configured according to the principles of the disclosure, generally denoted by reference numeral . Relationship Form  may include:\n\n","Primitive Form","In one implementation of the Forms Language, the Primitive Form may provide a construct for managing structured data of a specified type, such as the most distinct level at which data may be expressed, and may include a number, a string, a date, and the like. Each of these distinct and atomic pieces of data may be a separate subclass of the Primitive Form, so that each may be linked to using Relations and Relationships in the same that that any other Form and Entity may be linked. Additionally, linking these Primitive Forms using Relations and Relationships may allow tracking of changes through the Substitution Relationship.","The Primitive Form may include numerous Relations, several of which are described as follows. Other implementations of a Primitive Form may include additional Relations, exclude certain Relations, or name similar or the same Relations differently. Additional Relations not described below may be used to enable the Primitive Form using Forms Language, and may provide other associations and functionality.  is an exemplary illustration of the Primitive Form configured according to the principles of the disclosure, generally denoted by reference numeral . Primitive Form  may include:\n\n","Substitution Relationship Form","In a system configured according to the principles of the disclosure, data may not be directly modified, rather, a combination of new Relationships may signify the change: one new Relationship may link to the new information and a Substitution Relationship may link between the old Relationship and the new Relationship through a Previous Version Relation and a Next Version Relation. In this way, changes to a database, information stream, or web may be implemented by \u201clayering\u201d new information \u201con top of\u201d old information. Data immutability is important in systems configured according to the principles of the disclosure so that one such system may distribute data to another such system and may assure referential integrity.  is an illustration showing an exemplary Substitution Relationship Form, configured according to principles of the disclosure, generally denoted by . In one implementation of the Forms Language, the Substitution Relationship Form  may be used to create a new Relationship(s) that may replace an existing Relationship(s) by providing a link between the Previous Version Relation and the Next Version Relation.\n\n","Attribute Form","In one implementation of the Forms Language, an Attribute Form may be a generic representation of how a Form of a specific data type and a specific value may be explicitly assigned. The Attribute Form may describe properties of an Entity that may not be changed. An Attribute may not be substituted using a Relationship. This may allow some information in the system to be immutable. The Attribute Form may derive from the Containment Relationship Form and may include numerous Relations, several of which may be described as follows. Other implementations of an Attribute Form may include additional Relations, exclude certain Relations, or name similar or the same Relations differently. Additional Relations not described below may be used to enable the Attribute Form using Forms Language, and provide other associations and functionality.  is an exemplary illustration of the Attribute Form, configured according to the principles of the disclosure, designated generally by reference numeral . The Attribute Form  may include:\n\n","The two sides (e.g., left and right, input and output) of the Attribute Form Relation may generally be described as follows.\n\n","Versioned Attribute Relationship Form",{"@attributes":{"id":"p-0197","num":"0385"},"figref":"FIG. 18","b":"1800"},"The Versioned Attribute Relationship Form may be derived from an Attribute Form and may include numerous Relations, several of which are described as follows. Other implementations of a Versioned Attribute Form may include additional Relations, exclude certain Relations, or name similar or the same Relations differently. Additional Relations not described below may be used to enable the Versioned Attribute Form using Forms Language, and provide other associations and functionality. Versioned Attribute Form  may include:\n\n","Element Form",{"@attributes":{"id":"p-0200","num":"0401"},"figref":"FIG. 19","b":["1900","1900"]},"An Element Form  may derive from a Containment Relationship Form and may include numerous Relations, several of which are described as follows. Other implementations of an Element Form may include additional Relations, exclude certain Relations, or name similar or the same Relations differently. Additional Relations not described below may be used to enable the Element Form using Forms Language, and provide other associations and functionality. Element Form  may include:\n\n","Property Relationship Form",{"@attributes":{"id":"p-0203","num":"0412"},"figref":"FIG. 20","b":"2000"},"The Property Relationship Form  may derive from the Containment Relationship Form and may include numerous Relations, several of which are described as follows. Other implementations of a Property Relationship Form  may include additional Relations, exclude certain Relations, or name similar or the same Relations differently. Additional Relations not described below may be used to enable the Property Relationship Form  using Forms Language, and provide other associations and functionality. Property Relationship Form  may include:\n\n","Ownership Relationship Form",{"@attributes":{"id":"p-0206","num":"0423"},"figref":"FIG. 21","b":["2100","2100","2100","2100","2100"],"ul":{"@attributes":{"id":"ul0067","list-style":"none"},"li":{"@attributes":{"id":"ul0067-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0068","list-style":"none"},"li":["Globally Unique Identifier (GUID) Relation (): as understood by those of ordinary skill in the art, a distinct number (e.g., in hexadecimal or other format) that may be used to uniquely reference the entity with which it is associated;","Time Relation (): the date and time at which the entity was created;","FormGUID (): reference to the type of Form that may define the entity;","Owners Relation (): the Entity that may store the information and any content for the Entity created when the Form is instantiated;","Name Relation (): a link to the Primitive Form that may contain the name associated with this Form;","Thumbnail Relation (): a link to the Image Form that may store the location of the image file associated with the Form;","Owner (): The Entity that may store another Entity's content;","Owned (): The Entity whose content is may be stored."]}}}},"Content Form",{"@attributes":{"id":"p-0208","num":"0433"},"figref":"FIG. 22","b":["2200","2200","2200"],"ul":{"@attributes":{"id":"ul0069","list-style":"none"},"li":{"@attributes":{"id":"ul0069-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0070","list-style":"none"},"li":["Globally Unique Identifier (GUID) Relation (): as understood by those of ordinary skill in the art, a distinct number (e.g., in hexadecimal or other format) that may be used to uniquely reference the entity with which it is associated;","Time Relation (): the date and time at which the entity was created;","FormGUID (): reference to the type of Form that may define the entity;","Owners Relation (): the Entity that may store the information and any content for the Entity created when the Form is instantiated;","Name Relation (): a link to the Primitive Form that may contain the name associated with this Form;","Thumbnail Relation (): a link to the Image Form that may store the location of the image file associated with the Form;","Containers Relation (): a Relation that may store the listing of parents for this content;","Attributes Relation (): a Relation that may specify characteristics for this content;","Elements Relation (): a Relation that may specify the set of content;","Description Relation (): may include a description of the entity."]}}}},"Folder Form",{"@attributes":{"id":"p-0210","num":"0445"},"figref":"FIG. 23","b":["2300","2300","2300","2300"],"ul":{"@attributes":{"id":"ul0071","list-style":"none"},"li":{"@attributes":{"id":"ul0071-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0072","list-style":"none"},"li":["Globally Unique Identifier (GUID) Relation (): as understood by those of ordinary skill in the art, a distinct number (e.g., in hexadecimal or other format) that may be used to uniquely reference the entity with which it is associated;","Time Relation (): the date and time at which the entity was created;","FormGUID (): reference to the type of Form that may define the entity;","Owners Relation (): the Entity that may store the information and any content for the Entity created when the Form is instantiated;","Name Relation (): a link to the Primitive Form that may contain the name associated with this Form;","Thumbnail Relation (): a link to the Image Form that may store the location of the image file associated with the Form;","Containers Relation (): a Relation that may store the listing of parents for this content;","Attributes Relation (): a Relation that may specify characteristics for this content;","Elements Relation (): a Relation that may specify the set of content;","Description Relation (): may include a description of the entity","Parent Relation (): a link to the GUID of the Parents Relation in the associated Containment Relationship Form, indicates Folders that may contains this Folder.","Children Relation (): a link to the GUID of a Child Relation of Files Relation in the associated Containment Relationship Form, may indicate Folders that this Folder contains or a File that this Folder may contain."]}}}},"Containment Relationship Form",{"@attributes":{"id":"p-0212","num":"0459"},"figref":"FIG. 24","b":["2400","2400","2400","2400"]},"The Containment Relationship Form  may derive from the Relationship Form and may include numerous Relations, several of which are described as follows. Other implementations of a Containment Relationship Form  may include additional Relations, exclude certain Relations, or name similar or the same Relations differently. Additional Relations not described below may be used to enable the Containment Relationship Form  using Forms Language and provide other associations and functionality. The Containment Relationship Form  may include:\n\n","NullEntity Form",{"@attributes":{"id":"p-0215","num":"0472"},"figref":"FIG. 25","b":["2500","2500","2500","2500"],"ul":{"@attributes":{"id":"ul0075","list-style":"none"},"li":{"@attributes":{"id":"ul0075-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0076","list-style":"none"},"li":["Globally Unique Identifier (GUID) Relation (): as understood by those of ordinary skill in the art, a distinct number (e.g., in hexadecimal or other format) that may be used to uniquely reference the entity with which it is associated;","Time Relation (): the date and time at which the entity was created;","FormGUID (): reference to the type of Form that may define the entity;","Owners Relation (): the Entity that may store the information and any content for the Entity created when the Form is instantiated;","Name Relation (): a link to the Primitive Form that may contain the name associated with this Form;","Thumbnail Relation (): a link to the Image Form that may store the location of the image file associated with the Form;"]}}}},{"@attributes":{"id":"p-0216","num":"0479"},"figref":"FIG. 8"},"Function Form",{"@attributes":{"id":"p-0218","num":"0481"},"figref":"FIG. 27","b":["2700","2700","2700"],"ul":{"@attributes":{"id":"ul0077","list-style":"none"},"li":{"@attributes":{"id":"ul0077-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0078","list-style":"none"},"li":["Globally Unique Identifier (GUID) Relation (): as understood by those of ordinary skill in the art, a distinct number (e.g., in hexadecimal or other format) that may be used to uniquely reference the entity with which it is associated;","Time Relation (): the date and time at which the entity was created;","FormGUID (): reference to the type of Form that may define the entity;","Owners Relation (): the Entity that may store the information and any content for the Entity created when the Form is instantiated;","Name Relation (): a link to the Primitive Form that may contain the name associated with this Form;","Thumbnail Relation (): a link to the Image Form that may store the location of the image file associated with the Form;","Input Relation (): a link to the Form(s) that may contain the inputs to the function. The inputs of a function may be subdivided into many additional relations. For example, in one example implementation of a function designed to sum two values, the Input Relation may be subdivided into the Left Value (LValue) and Right Value (RValue) Relations to represent the values to be added;","Output Relation (): a link to Forms that may contain the output(s) of the function. Functions may have more than one output;","CRN Relation (): May reference a human readable unique identifier for a Function which may be used to route information to a specific function."]}}}},"As an example,  is an illustration showing exemplary pseudocoding and Inheritance for an Add Form, configured according to principles of the disclosure, generally denoted by . The Pseudocoding and Inheritance for an Add Form  shows pseudocoding and derivation of a Function Form () from an Entity Form and subsequent derivation of a sample of an Add Function Form from the generic Function Form. Note that this example only shows a subset of the Entity Form and Function Form Relations. The information to the right of the \u201c:\u201d colon indicates the Form or Relation that may be extended to create the new Form or Relation. In this example, the Function Form () may be created by extending the Entity Form (). The Input Relation () and Output Relations () may be added to the Function Form (). The example Add Function Form () may then be created by extending the Function Form (). The example LValue Relation () and example RValue Relation () may be created by extending the Input Relation (), and the Sum Relation () may be created by extending the Output Relation ().","In another example, pseudocoding of the derivation of a Function Form from an Entity Form and subsequent derivation of a sample of a Divide Function Form from the generic Function Form is provided in  (). Note that this example only shows a subset of the Entity Form and Function Form Relations. The information to the right of the \u201c:\u201d colon indicates the Form or Relation that may be extended to create the new Form or Relation. In this example, the Function Form () may be created by extending the Entity Form (). The Input Relation () and Output Relations () may be added to the Function Form (). The example Divide Function Form () may then be created by extending the Function Form (). The example Divisor Relation () and example Dividend Relation () may be created by extending the Input Relation (), and the example Quotient Relation () and example Remainder Relation () may be created by extending the Output Relation ().","The function inputs relations and output relations may be variant relations, and may link to their target inputs and outputs through containment relationships. The target input forms and output forms, and the target input entities and target output entities, respectively, may be primitive entities or complex entities so that a function input may include another function entity, an input to a different function, an output form a different function, another relationship entity, and the like. A system configured according to the principles of the disclosure in which a function may link to one or more functions as inputs and\/or may link to one or more functions as outputs provides for the creation of a web or collection of function entities linked through relationship entities. This web of function entities that may be linked through relationship entities may be written or appended to an information stream, appended or written to a database configured according to the principles of the disclosure. A subset of the linked web of function entities in the information stream or database may be distributed across a system of nodes configured according to the principles of the disclosure, and the immutability of the distributed entities maintained so that that nodes can participate in a distributed flow of functions that may converge or diverge based on the addition of new function entities, function input entities, function output entities, and relationship entities, and the like to the information stream.","Group Form",{"@attributes":{"id":"p-0223","num":"0495"},"figref":"FIG. 31","b":"3100"},"A Group Form may include numerous Relations, several of which may be described as follows. A Group Form may be used to organize a set of entities, such as users and\/or Groups, into a collection that may be referenced by name or some other Relation on the Group Form. In some implementations, a Group may have a common purpose, such as the set of users collaborating on a specific project. Other implementations of a Group Form may include additional Relations, exclude certain Relations, or name similar or the same Relations differently. Additional Relations not described may be used to enable the Group Form using Forms Language, and provide other associations and functionality. The Group Form  may include:\n\n","Message Form",{"@attributes":{"id":"p-0226","num":"0510"},"figref":"FIG. 33","b":["3300","3300"],"ul":{"@attributes":{"id":"ul0081","list-style":"none"},"li":{"@attributes":{"id":"ul0081-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0082","list-style":"none"},"li":["Globally Unique Identifier (GUID) Relation (): as understood by those of ordinary skill in the art, a distinct number (e.g., in hexadecimal or other format) that may be used to uniquely reference the entity with which it is associated;","Time Relation (): the date and time at which the entity was created;","FormGUID (): reference to the type of Form that may define the entity;","Owners Relation (): the Entity that may store the information and any content for the Entity created when the Form is instantiated;","Name Relation (): a link to the Primitive Form that may contain the name associated with this Form;","Thumbnail Relation (): a link to the Image Form that may store the location of the image file associated with the Form;","Containers Relation (): a Relation that may store the listing of parents for this content;","Elements Relation (): a Relation that may specify the set of content;","Attributes Relation (): a Relation that may specify characteristics for this content;","Description Relation (): may include a description of the entity","Sender Relation (): a Relation that may link to the entity that sent the message;","Subject Relation (): a Relation that may link to text that describes the purpose of the message;","Body Relation (): a Relation that may link to the text of the message;","Reply Relation (): a Relation that may link to the text of a response to the message;","Recipients Relation (): a Relation that may link to the entities designated to be sent the message;","Attachments Relation (): a Relation that may link to the entities linked as attachments to the message, such as Files, Folders, and the like."]}}}},"File Form",{"@attributes":{"id":"p-0228","num":"0528"},"figref":"FIG. 34","b":["3400","3400"],"ul":{"@attributes":{"id":"ul0083","list-style":"none"},"li":{"@attributes":{"id":"ul0083-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0084","list-style":"none"},"li":["Globally Unique Identifier (GUID) Relation (): as understood by those of ordinary skill in the art, a distinct number (e.g., in hexadecimal or other format) that may be used to uniquely reference the entity with which it is associated;","Time Relation (): the date and time at which the entity was created;","FormGUID (): reference to the type of Form that may define the entity;","Owners Relation (): the Entity that may store the information and any content for the Entity created when the Form is instantiated;","Name Relation (): a link to the Primitive Form that may contain the name associated with this Form;","Thumbnail Relation (): a link to the Image Form that may store the location of the image file associated with the Form;","Containers Relation (): a Relation that may store the listing of parents for this content;","Elements Relation (): a Relation that may specify the set of content;","Attributes Relation (): a Relation that may specify characteristics for this content;","Description Relation (): may include a description of the entity;","NameOnDisk (): a reference such as the name of the file that may indicating where the file is stored in the Streambase;","Parents (): may link to one or more folder entities that may contain the File Entity;","Version (): may link the current version of the file."]}}}},"Network Form",{"@attributes":{"id":"p-0230","num":"0543"},"figref":"FIG. 35","b":["3500","3500"],"ul":{"@attributes":{"id":"ul0085","list-style":"none"},"li":{"@attributes":{"id":"ul0085-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0086","list-style":"none"},"li":["Globally Unique Identifier (GUID) Relation (): as understood by those of ordinary skill in the art, a distinct number (e.g., in hexadecimal or other format) that may be used to uniquely reference the entity with which it is associated;","Time Relation (): the date and time at which the entity was created;","FormGUID (): reference to the type of Form that may define the entity;","Owners Relation (): the Entity that may store the information and any content for the Entity created when the Form is instantiated;","Name Relation (): a link to the Primitive Form that may contain the name associated with this Form;","Thumbnail Relation (): a link to the Image Form that may store the location of the image file associated with the Form;","Input Relation (): may link to the Form(s) that may contain the inputs to the Network function. The inputs of a function can be subdivided into many additional relations. For example, in one example implementation of a function designed to sum two values, the Input Relation may be subdivided into the Left Value (LValue) and Right Value (RValue) Relations to represent the values to be added;","Output Relation (): may link to Forms that contain the output(s) of the function. Functions may have more than one output;","CRN Relation (): May reference a human readable unique identifier for a Function which may be used to route information to a specific function.","Group Name Relation (): a link to the Primitive Form that may contain the name of the Network Group;","Group Description Relation (): may link to the description of the Network Group;","Group Contact Relation (): may link to contact information for the Network Group.","Organization Relations (specify name, web address, etc.) (): may link to information about the organization that created the network;","Contact Relations (): May link to network contact information"]}}}},"User Form",{"@attributes":{"id":"p-0232","num":"0559"},"figref":"FIG. 36","b":"3600"},"Other implementations of a User Form may include additional Relations, exclude certain Relations, or name similar or the same Relations differently. Additional Relations not described may be used to enable the User Form using Forms Language, and provide other associations and functionality. The User Form  may include:\n\n","Invariant Relation Form",{"@attributes":{"id":"p-0235","num":"0573"},"figref":"FIG. 37","b":"3700"},"The Invariant Relation Form may include numerous Relations, several of which are described as follows. Other implementations of an Invariant Relation Form may include additional Relations, exclude certain Relations, or name similar or the same Relations differently. Additional Relations not described below may be used to enable an Invariant Relation Form using Forms Language, and provide other associations and functionality. Invariant Relation Form  may include:\n\n","Variant Relation Form",{"@attributes":{"id":"p-0238","num":"0589"},"figref":"FIG. 38","b":["3800","3800"],"ul":{"@attributes":{"id":"ul0091","list-style":"none"},"li":{"@attributes":{"id":"ul0091-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0092","list-style":"none"},"li":["Globally Unique Identifier (GUID) Relation (): as understood by those of ordinary skill in the art, a distinct number (e.g., in hexadecimal or other format) that may be used to uniquely reference the entity with which it is associated;","Time Relation (): the date and time at which the entity was created;","FormGUID (): reference to the type of Form that may define the entity;","Owners Relation (): the Entity that may store the information and any content for the Entity created when the Form is instantiated;","Name Relation (): a link to the Primitive Form that may contain the name associated with this Form;","Thumbnail Relation (): a link to the Image Form that may store the location of the image file associated with the Form;","Corresponding Relation (): may typically join a Relation on a Relation Form to a specific Relation on the Form joined to by the right side Relation of the Relation Form.","Left (): a link to the Form that may be the input to\/left side of a Relation;","Right (): a link to the From that may be the output\/right side of the Relation;","SuperRelation (): links to the Relations from which this Relation may derive;","SubRelation (): links to the Relations that may derive this relation;","MinOccurs (): may specify whether the relation points to zero or one, zero or more, one and only one, one or more, or some other number of Forms;","MaxOccurs (): may specify whether the relation points to zero or one, zero or more, one and only one, one or more, or some other number of Forms;"]}}}},"Subclassing Forms and Relations and Inheritance","In one implementation of Forms Language, Forms may be a class, or a construct similar to a class, and any entity defined by a Form may be a class or a construct similar to a class. One implementation of the Forms Language may permit subclassing, or derivation, of Forms, Relations, Relationship, and any other entities defined by Forms. The subclassing behavior provides for inheritance of Forms, Relations and Relationships. As may be understood by one of ordinary skill in the art, inheritance in object oriented programming allows for objects to share properties, structure, methods, and other code. If the objects share code, changes or updates made at the top of the inheritance tree automatically cascade down to the lowest branch or leaf.","In the Forms Language, it is through inheritance that:\n\n","The benefits of inheritance in one implementation of the Forms language may be demonstrated by the extension of Entity Form to create other Forms such as the Relationship Form, Container Form, and Function Form, to name a few. These Forms may then be further subclassed, as an example, to create the Containment Relationship Form, and Folder Form, respectively. Because the Entity Form may includes Relations (e.g. GUID, Date\/Timestamp, Name, and Thumbnail), all of the Forms derived from the Entity Form may automatically inherit these Relations. In addition, and methods implemented to query or otherwise perform operations on the Relation, may also be inherited. For example, every Relation may have an input and an output, as well as a method to execute the Relation input to obtain the Relation output was implemented using FL. Therefore the Relation on any Form may be executed to determine its inputs and outputs. This Relational Execution or Relational Stepping provides the basis for discovering evolving content in a database configured according to the principles of the disclosure and is described in more detail in this specification.","A Form that is derived from another Form may be a subclass (or child) of that (parent) Form. Forms may be subclassed by establishing a \u201csubclass\u201d relation between a \u201csubform\u201d and a \u201csuperform\u201d. Subclassing may provide one-to-many (through reduction) or many-to-one (through consolidation) representation between the parent(s) and child(ren) Form(s). A one-to-many subclassing may be accomplished through reduction of the parent to multiple children. Many-to-one subclassing may be accomplished through consolidation of multiple parents to the child.","Relations may be similarly subclassed by establishing a \u201csubclass\u201d association between a \u201csubrelation\u201d and a \u201csuper relation\u201d. A Relation that is derived from another Relation may be a subclass of the Parent Relation. Subclassing may provide one-to-many (through reduction) or many-to-one (through consolidation) representation between the parent(s) and child(ren) Relation(s).",{"@attributes":{"id":"p-0245","num":"0613"},"figref":"FIG. 39","b":["3900","3905","3910","3915","3910","3915","3910","3915","3905","3920","3910","3915","3920","3910","3915","3920","3910","3915","3920","3910","3915","3905","3945","3910","3915","3950","3945","3960"]},"Mapping Forms, Relations, Relationships, and Entities to a Database","In one implementation of the Forms Language, instantiating a Form to create an Entity may generate a tuple structure. Each invariant Relation belonging to a Form may be mapped as a tuple in a new column in the corresponding Entity's data row. Variant Relations may not be mapped to columns in the row; variant Relations may instead be mapped as rows. Once a row is populated, it may not be changed and may preserve the immutability of data in a database configured according to the principles of the disclosure. The implementation of immutability through the construction and relation of tuples may be is a powerful and differentiating objective of databases configured according to the principles of the disclosure. By providing structures that enable immutability, data may never be lost or conflict with other databases in a distributed system of databases configured according to the principles of the disclosure. The immutability of data coupled with signifying changes through relationship entities may provide a mechanism to discover the evolution of the data throughout a distributed system.",{"@attributes":{"id":"p-0248","num":"0616"},"figref":"FIG. 40","b":["4000","4005","1","4015","2","4020","3","4025","4030","4005","4010","1","4035","2","4040","3","4045","4050","1","1"]},"Relationship entities may also corresponds to a row in a table, and each row may represent a state change of at least one entity referenced by a relationship entity. Multiple state changes of an entity referenced by a relationship entity may be represented by:\n\n",{"@attributes":{"id":"p-0250","num":"0620"},"figref":"FIG. 41","b":["4100","4105","4115","4120","4125","4106","4107","4108","4109","4105","4130","4135","4145","4150","4115","4150","4120","4155","4125","4160"]},"In a more detailed description of a system configured according to the principles of the disclosure, an Entity may be written to a database by writing the information for each Relation of the Entity to the database through the Steps shown in  (A)  (B) () and described as follows. The Relation Entities on a Form may be variant or invariant, and the data associated with the variant Relation Entities or invariant Relation Entities may be primitive or complex. The process for writing Entities to a database may include the following steps:\n\n","An illustrative example of writing one of each type of Relation of an Entity to a database is provided in  (A) and  (B).\n\n","Static Typing and Mapping Variant Relations to a Database","In one implementation of the Forms Language, Relations may be used to link or associate one Form with another Form. Unless otherwise specified, the actual content of a Relation on a Form may be of any type. In some cases, constraining the structure of the Form that may be associated through the Relation may be beneficial. These constraints may be applied by creating Attribute Forms or Element Forms of the desired type and adding Relations to those specific attributes or elements to the Form.","For example, a Person Form may include Relations to a Name Attribute Form and an Age Attribute Form. If the Name Attribute Form and Age Attribute Form are not further defined, any type of input may be associated with the Name or Age and linked to the Person Form.","An unconstrained Name Relation may be created by deriving the Name Relationship Form from the Relationship Form and adding a new Relation \u201cAssigned Name\u201d.","A constrained, or statically typed Name Relation Form may be modeled by:\n\n","Primitive Form so that only a string can be associated with the Name Relation.",{"@attributes":{"id":"p-0259","num":"0757"},"figref":"FIG. 44","b":["4400","4405","4410","4415","4410","4430","4420","4415","4435","4425"]},{"@attributes":{"id":"p-0260","num":"0758"},"figref":"FIG. 44","b":"4500"},"In this Figure, the Person A Form () links to an Eye Color as a variant String Primitive Form () through a Eye Color Relation () and a Eye Color Property Relationship Form (). A Person Entity and Eye Color \u201cBlue\u201d may be mapped to a database configured according to the principles of the disclosure as follows:\n\n","Managing Entities and Relational Stepping","Content that the Entities configured according to the principles of the disclosure may maintain may be stored in many different types of structures, including but not limited to:\n\n","The linkages between entities in the different types of structures may be traversed by \u201creading\u201d, or executing the Relations on a Form. These Relations may be thought of as \u201cbridges\u201d between Entities.  is a general example of a relational bridge joining two Forms, generally designated by reference numeral A. The example relation bridge A illustrates Form A () as bridged, or linked, to Form B () through Relation C (). After instantiation, Entity A may be bridged, or linked, to Entity B through a Relation as well.","For example, a system configured according to the principles of the disclosure may include an \u201cAutomobile\u201d Form that may further include two invariant Relations: Automobile Make and Automobile Model.  is a general example of a relational bridge joining the three Forms through two invariant relations, generally designated by reference numeral B. The example relation bridge joining three Forms B illustrates the Automobile Form () as:\n\n","These entities may be instantiated to create a collection of entities that model a fleet of cars.","Relations may be executed to traverse from one Entity to another through a Relational Stepping process. This process may be bi-directional because each Relational hop has a corresponding hop in the other direction, meaning that Entity A can hop to Entity B, and Entity B can hop to Entity A. Relational Stepping may be summarized as comprising two processes:\n\n","Relational Stepping may be important to many operations of a structure configured according to the principles of the disclosure, and may be used to: retrieve all the subfolders of a parent folder, retrieve the file contents of a folder, retrieve the versions of an Entity such as a document, retrieving the characteristics of an entity, such as a file name or folder name, and many others. Using Relational Stepping, the set of entities associated with another entity may be retrieved. This may be useful in discovering the full set of linkage for an entity. For example, Relational Stepping may be used to retrieve a listing of the users that are members of a Group, users that have access to a file or folder, users who have shared a file or folder and whom they may shared it with, and the like. These example uses may be important to the development of collaboration networks and relationship-based programming enabled by the Forms Language.",{"@attributes":{"id":"p-0269","num":"0780"},"figref":"FIG. 26","b":["2600","2600"]},"Step : Creating an executable function for at least one relation corresponding to at least one property on a first Form defining a class of entities, the at least one relation defined by a second Form that includes two additional relations being a left side relation and a right side relation, the executable function having an input and having an output, wherein the input is an instance of the first Form pointed to by the left side relation of the second Form and the output includes at least one instance of a third Form pointed to by the right side relation of the second Form.","Step : Executing the executable function to provide an instance of the first Form pointed to by the left side relation and the executable function identifying and retrieving all instances of all third Forms pointed to by the right side relation that are discoverable outputs of the second Form for the executing function, providing a web of linked entities instantiated from the Forms defining the classes of entities so that the web of linked entities provides at least one immutable stream of information that is at least one of readable, searchable, traversable, appendable, expandable and shareable by producers and\/or consumers of the stream of information.",{"@attributes":{"id":"p-0272","num":"0783"},"figref":"FIG. 47","b":["4700","4700","4705","4715","4710"],"ul":{"@attributes":{"id":"ul0142","list-style":"none"},"li":{"@attributes":{"id":"ul0142-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0143","list-style":"none"},"li":["Parent-Containment Hop : the Parent Folder Entity () may execute its Parent Relation  () to hop to the Containment Relationship Entity (). Recalling to  (), the Parent Relation  () on  () may be defined by a Parent Relation  Form that include a Left side\/input Relation, a Right side\/output Relation, and a Corresponding Relation. The Left side\/input Relation of Parent Relation  joins to the Parent Folder Entity (). The Right side\/output Relation of the Parent Relation  joins to the Containment Relationship Entity (). The Corresponding Relation of the Parent Relation  joins to the Child Relation  () of the Containment Relationship Entity ().","Containment-Child Hop : From the Containment Relationship Entity (), the Parent elation () may be executed to determine that Child Folder Entity B () is linked as a child. Recalling to  (), Parent Relation  on  () may also be defined by a Parent Relation  Form that include a Left side\/input Relation, a Right side\/output Relation, and a Corresponding Relation. The Left side\/input Relation of the Parent Relation  joins to the Containment Relationship Entity (), the Right side\/output Relation of the Parent Relation  joins to Child Folder Entity B (). The Corresponding Relation of the Parent Relation  joins to the Child Relation  () of Child Folder Entity B ()."]}}}},"In some scenarios, Child Folder Entity B () may also be a parent folder and linked to one or more child folders through containment relationships. In these scenarios, Hop  and Hop  may be repeated, with the Child Folder Entity B as the parent. This process may repeat to retrieve child folders through as many nested level of folder as required. The process may end when the Child Relation of the Parent Folder Entity is not linked to a Containment Relationship Entity.",{"@attributes":{"id":"p-0274","num":"0787"},"figref":"FIG. 48","b":["4800","4800","4815","4805","4810"],"ul":{"@attributes":{"id":"ul0144","list-style":"none"},"li":{"@attributes":{"id":"ul0144-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0145","list-style":"none"},"li":["Child-Containment Hop : the Child Folder Entity () may execute its Child Relation () to hop to the Containment Relationship Entity ().","Containment-Parent Hop : From the Containment Relationship Entity (), the Parent Relation () may be executed to determine that Child Folder Entity B () is linked as a child ()."]}}}},"In some scenarios, Parent Folder Entity A () may also be a child of one or more folders and linked to its parents through containment relationships. In these scenarios, Hop  and Hop  may be repeated, with the Parent Folder Entity A as the child. This process may repeat to retrieve parent folders through as many nested level of folder as required. The process may end when the Parent Relation of the Parent Folder Entity is not linked to a Containment Relationship Entity.",{"@attributes":{"id":"p-0276","num":"0791"},"figref":"FIG. 49","b":["4900","4900"],"ul":{"@attributes":{"id":"ul0146","list-style":"none"},"li":{"@attributes":{"id":"ul0146-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0147","list-style":"none"},"li":["Step : Execute the ParentRelation in Parent Folder Entity A () to return the of the Containment Relationship Entities targeted by e of the Parent Folder Entity A Recalling to  (), the Parent Relation A on Parent Folder Entity A () may be defined by a Parent Relation A Form that include a Left side\/input Relation, a Right side\/output Relation, and a Corresponding Relation. The Left side\/input Relation of Parent Relation A joins to the Parent Folder Entity A (). The Right side\/output Relation of the Parent Relation A joins to the Containment Relationship Entity (). The Corresponding Relation of the Parent Relation A joins to the Child Relation  the Containment Relationship Entity ().","Step : Retrieve GUID(s) of the Containment Relationship Entities () that are associated with the Child Relations returned in Step .","Step : Retrieve the Parent Relations that correspond to the Containment Relations returned in Step .","Step : Retrieve the Child Folder Entities () targeted by the GUIDs of the Child Relations returned in Step . Recalling to  (), Parent Relation  on  () may also be defined by a Parent Relation  Form that include a Left side\/input Relation, a Right side\/output Relation, and a Corresponding Relation. The Left side\/input Relation of the Parent Relation  joins to the Containment Relationship Entity (), the Right side\/output Relation of the Parent Relation  joins to Child Folder Entity B (). The Corresponding Relation of the Parent Relation  joins to the Child Relation B of Child Folder Entity B ()."]}}}},{"@attributes":{"id":"p-0277","num":"0796"},"figref":["FIG. 50","FIG. 49","FIG. 50"],"b":["5000","5000","4900","5000"],"ul":{"@attributes":{"id":"ul0148","list-style":"none"},"li":{"@attributes":{"id":"ul0148-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0149","list-style":"none"},"li":["Step : Determine the Relation of interest on the Form type that defines the Entity of interest.","Step : Treat as an executable function the Relation of interest, having a left side\/input relation and a right side\/output relation and a corresponding relation.","Step : Discover the input\/left side Entity pointed to by the input\/left side relation.","Step : In the context of the discovered input\/left side Entity, execute the relation function for the Relation of interest discover the right side\/output Entities pointed to by the right side\/output of the relation.","Step : Use the corresponding relation of the relation function to determine which relation on the right side\/output Form is pointed to by the Relation of Interest.","Step : Repeat for each Relation of interest on either the Left Side\/Input Entity or Right Side\/Output Entity (ies)"]}}}},"This process provides a web of linked entities instantiated from the Forms defining the classes of entities so that the web of linked entities provides at least one immutable stream of information that is at least one of readable, searchable, traversable, appendable, expandable and shareable by producers and\/or consumers of the stream of information.","Immutability, Change, and State","In one implementation of the Forms Language, a database configured according to the principles of the disclosure may be implemented as non-destructive by evolving the database through the addition of entities rather than through traditional techniques such as overwriting other otherwise changing entities (techniques commonly employed in existing systems prior to the disclosure, typically using a row update procedure). In one implementation of a database configured according to the principles of the disclosure, insert methods may be used to evolve content. These inserts methods create new entities which include typically substitution relationships, enabling relationships previously created to be replaced by new relationships in a non-destructive and additive manner.","In one implementation of a database configured according to the principles of the disclosure, only row inserts are required to evolve the state of the database, thereby preserving row-level immutability because rows are typically inserted but typically not subsequently updated or altered after insert. In this configuration, an individual database row (R) representing an entity (E) does not change over time, in that is its field values are not updated or altered over time, since invariant relations (belonging to e's Form) are mapped as columns in the row R.","In this configuration, the difference between immutability and change is typically this: while the individual row representing e may not typically change over time and may typically be immutable (because invariant relations typically map to the columns of R), the variant relations (VR-Set) defined on e's Form (EF) may not change over time, as new and separate relationship entities are created which reference or point back to existing entities (such as e) under existing variant relations included in VR-Set. A variant relation (VR) belonging to VR-Set may typically change over time as new relationships entities may be created which reference (or point back to) the entity e (the entity reference part of the reference triplet) under the relation VR (the relation reference part of the reference triplet). In this way, the invention is typically able to record change relationally without altering or modifying existing rows representing entities. The delta entity stream may typically include the relationship entities signifying those changes.","In this sense, the invention may include and enable the following: that rows in a database may represent immutable changes rather than mutable states; that logical changes to the state of the system may be accomplished through the addition of new database rows rather than the modification of existing database rows; that immutability configured according to the principles of the invention make it possible to think of data in a \u201cdifferential\u201d way (as opposed to the more classic way of looking at rows as \u201cintegral\u201d states); that the integrated state of an entity may be computed by adding the set of relationships which point to the entity at a point in time minus the set of relationships negated out or substituted out at that same point in time (the relational algebra); that these integrated states may also be stored representing an integrated snapshot of an entity at a point in time; that the graph model of information in a database configured according to the principles of the invention represent both links in the web of entities and changes to the existing set of entities in the web relationships, of which there are typically many types; that these entities may be shared across many databases configured according to the principles of the invention making it possible to integrate states continuously so as to increase collaboration and cooperative advantage between organizations and the resulting information symmetries among their databases, while at the same time not sharing for a time certain other entities between databases, therefore making it possible to increase differentiation\/asymmetries between organizations and increase competitive information advantage. The invention contemplates a model of computer science oriented around differential changes typically represented by entities, so that information processing may be driven in response to the creation of new changes (typically the creation of new entities). In this way, the differential model of data contemplated herein may be viewed as the medium required to perform information management and processing, if a relationship (R) entity representing a discrete change to referenced entities is viewed as a unit of information to be processed. Those entities (ESet) referenced by such a relationship R are typically said to change when R is created. For a given member of ESet (E), E is typically referenced by relationship R using an entity reference, which includes the referenced variant relation (VR) belonging to the form (F) defining E. When the relationship R is created which contains a reference to E and its VR, the entity E is said to change with respect to the variant relation VR. Consumers or algorithms interested in changes to the entity E may request an automatically generated information stream including changes made to E with respect to a certain variant relation (VR). This stream may be called a delta stream since it describes changes made to E under one or more variant relations (including VR). In certain implementations, rows may not be mutated, however rows may be deleted for purposes such as garbage collection, erasing entities, and the like.","In one example of inserting rows to evolve the state of the database configured according to the principles of the disclosure, a new row representing a substitution relationship may be added. This row may set a previous version of an entity as a previous relation, and to substitute a current followed by the addition of another row specifying the new Relationship. Through the use of these methods and relationships, the data medium in an implementation of a database configured according to the principles of the disclosure may be immutable; rather than changing a specific Entity (row), the Relationships between Entities (rows) may be changed. This may be accomplished by adding new Entities (\u201cchanges\u201d) that are Relationships that may signify changes between referenced entities. The process of capturing changes primarily as Relationships may be referred to a differential computing. The process of combining all Relationships referencing a specific entity to determine its current state may be referred to as integration of the differentials.","The Containment Relationship or Property Relationship linking Forms and Entities joined by a variant relation may both include a Next Relation and a Previous Relations, which are also variant relations. These relations may not be specified when the initial link between two Entities joined through the appropriate Relationship. At a later time, it may be desirable to update a Containment Relationship or Property Relationship joining two entities. This update may be completing using a Substitution Relationship.  and  are an exemplary flowchart of an Substitution Process Flow, performed according to the principles of the disclosure, generally designated by reference numerals A and B. The Exemplary Substitution Process Flow in A and B provide an example of one implementation and assumes String Primitive Form and Substitution Relationship Form and Property Relationship Forms already exist. In other implementations, certain steps may be completed in different order, concurrently, or may contain fewer or additional steps. The Exemplary Substitution Process Flow in A and B may include the following steps:","Create and Link Forms\n\n","Instantiate the Person Entity \u201cJoe\u201d\n\n","Substitute Name Relation with New Primitive Entity with the Value \u201cJoseph\u201d\n\n","One purpose of an immutable data medium is to prevent inconsistency among Entities when those Entities are duplicated widely across a distributed network of databases. Problems keeping Entities synchronized across a distributed network may be a significant barrier to the development and proper functioning of a distributed database. Implementing immutability according to the principles of the disclosure may prevent changes to existing Entities, as is typically done is systems today prior to the disclosure, and may address these problems. The immutability characteristics of a entities in a system configured according to the principles of the disclosure may provide for entities to be shared across a distributed network in a consistent manner. Entities may diverge after distribution through the addition of new entities and new relationships in any of the nodes to which the entity was distributed. These divergent changes may allow for competitive advantage to consumers of the entities through the development and inclusion of new information that is not shared with other nodes. For example, competitive advantage may be desired by two companies working to develop a product to meet the same market needs. The changes may also be selectively distributed to other nodes that contain the entity to achieve cooperative advantage through the convergence of the entity sets on the nodes. The new information may then be available to consumers of the node on which it was converged. Cooperative advantage may likely be desired by two companies collaborating to develop a joint product to meet a market need.","The conservation of data supports synchronization in a distributed setting as the Entity cannot be changed; rather layers of new relationships are created by adding new tuples. These information sets, from different databases distributed across nodes in a system configured according to the principles of the disclosure, may be combined without risk of a synchronization conflict. The total information set within a database therefore accumulates over time non-destructively and consistently, even as new information sets flow into one database configured according to the principles of the disclosure from other databases configured according to the principles of the disclosure.","The immutability characteristic of the database configured according to the principles of the disclosure has many applications. Substituting and versioning relationships rather than deleting relationships, coupled with methods to step through relationships, immutability may be used in the database to:\n\n","Any change to a system configured according to the principles of the disclosure may be considered a change to the state of a system configured according to the principles of the disclosure. A change, and there for a change in state, may include but is not limited to the addition of a new entity to a system, stream, database, or the like configured according to the principles of the disclosure. Additional examples of state changes include but are not limited to:\n\n","Retrieving the Current State of an Entity","Changes through the addition of relationships may be referred to as the addition of differential data. These differential data may be integrated to determine the current or any state of an entity.","For example, a system may include the following as shown in Exemplary Substitution Process Flow in A and B:\n\n",{"@attributes":{"id":"p-0296","num":"0852"},"figref":"FIG. 52","b":["5200","5200","5100"],"ul":{"@attributes":{"id":"ul0162","list-style":"none"},"li":{"@attributes":{"id":"ul0162-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0163","list-style":"none"},"li":["Step : Provide the system with entity GUID, FormGUID, and the name of the relation that is being looked up. In this example, provide the GUID for the Person Entity.","Step : The system may use the Entity GUID to determine the FormGUID. In this example, the FormGUID is for the Person Form.","Step : The System may return the shape of the Form associated with the FormGUID, including all Relations.","Step : Branch the retrieval process according to the type of relation being retrieved.","Step \u2014Branch  Invariant Primitive Relation: Invariant primitive values may be stored directly in the table for the Form under consideration with a value in a single column with the same name as the relation, and may be retrieved directly from the table by the system. For example, GUID and timestamp may be invariant primitive relations and may be stored in the Person From table in columns GUID and Time.","Step \u2014Branch  Invariant Complex Relation: Invariant Complex Relations may be stored directly in the table for the form under consideration as the following three columns that may point to the value\u2014assigned entity, assigned entity Form, assigned entity relation name. For example, the Model relation information for a Car Entity with an invariant complex Model Relation may be found in a table that includes a model$entity column, model$form column, and a model$relation column.","Step \u2014Branch  Variant Primitive Relation: Variant Primitive Relations may be found in a Relationship table. The value associated with the relation may be stored directly in the relationship table as a value in the column with the name of the relation for that relationship.","Step \u2014Branch  Variant Complex Relations: Variant Complex Relations: Relations may be found in a Relationship table with a reference to the table that includes a pointer to the complex entity: assigned entity, assigned value, assigned relation name. The system may retrieve the complex entity Form and GUID, which provides the complex variant's Form and GUID. The above steps may be repeated to locate specific information of interest."]}}}},"In one embodiment of the invention the tables for each Form are created only when the first entity of that Form type is instantiated. One of ordinary skill in the art may also recognize that the tables may be created at the time that the Form is first created regardless of the existence of any entities of that form type.","Information Streams","In one implementation of a system configured according to the principles of the disclosure, an information stream may be a single entity or any collection of entities appended together. These entities may include but are not limited to Forms, Relations, Entities, and Relationships, as well as any subclasses of any Forms, Relations, Entities, and Relationships. For example, any of the following non-limiting example entities may be included in a stream: Form Entities, Relation Forms, Relation Entities, Relationship Forms, Relationship Entities, Primitive Forms, Primitive Entities, Substitution Relationship Forms, Substitution Relationship Entities, Attribute Forms, Attribute Entities, Versioned Attribute Forms, Versioned Attribute Entities, Element Forms. Element Entities, Property Relationship Forms, Property Relationship Entities, Ownership Forms, Ownership Relationship Entities, Content Forms, Content Entities, Folder Forms, Folder Entities, Containment Relationship Forms, Containment Relationship Entities, NullEntity Forms. NullEntities, Function Forms, Function Entities, Group Forms, Group Entities, Message Forms, Message Entities, File Forms, File Entities, Network Forms, Network Entities, User Forms, User Entities, Non-relationship Forms, and Non-relationship Entities. A conceptual overview of a stream is provided in  (). In this example illustration, the information stream () includes appended Entity  through Entity N. Information streams may expand to a substantially unlimited length as new entities are appended.","The information stream may typically include at least one entity and at least one relationship entity that may signify a change with respect to at least one other entity or at least one other relationship entity. Every entity in the stream may include immutable data so that a change in the state of the stream may be reflected by the addition of a new entity to an information stream. These relationship entities may signify changes in the state of an entity so that the information content associated with the referenced entity may be logically changed while preserving the immutability of the referenced entity. The invariant portion of the information state of the an entity referenced by a relationship prior to the creation of the relationship entity may be preserved in at least one of the information streams and the invariant portion of the information state of the referenced entity after the creation of the relationship entity may also be preserved an information stream. Additionally, the information content associated with an entity referenced by a relationship may include immutable data associated with invariant relation, and the information content associated with the referenced entity may include variable data associated with variant relations, if variant relations are present.","Integrating the entities and relationship entities comprises a snapshot at a point in time of the immutable fields belonging to one or more entities. The state of an entity may be computed by logical integration over any particular time period.","An information stream configured according to the principles of the disclosure, or a subset of an information stream configured according to the principles of the disclosure, may be:\n\n","A subset of one information stream may be copied into a second information stream. That second information stream or the first stream from which it was copied may be merged with, appended to, or otherwise combined with a third stream configured according to the principles of the disclosure. Any information stream embodied according to the principles of the disclosure may be merged with, appended to, or otherwise combined any other information stream embodied according to the principles of the disclosure. In addition, a subset of any information stream embodied according to the principles of the disclosure may be copied to create a new information stream.","An information stream may be stored on a variety of media, including but not limited to a text file, the in memory storage space of a computer processor, a traditional SQL database, a non-traditional database, a message, an XML file, and the like.","When configured according to the principles of the disclosure, streams may be used to may be ordered in a specific way to store a sequence of entities inside a file, such as in a network stream. An information stream may be used to transfer a sequence of entities from one node to another where the streams may then be appended; and streams may be stored in memory so that all entities composing the stream are an in-memory representation such as with java.","Information flow may occurs in a system configured according to the principles of the disclosure when one or more entities are appended to an information stream, or one or more information streams are appended, copied, merged, or otherwise combining with other information streams configured according to the principles of the disclosure.","Writing an Entity to an Information Stream","In one implementation of a database configured according to the principles of the disclosure, an entity may be stored in a stream. New entities may be appended to the stream and operations such as create and read may be possible without locating or writing near the location of the original entity in the stream.  is a simplified conceptual view of writing of writing a person entity and related entities to an information stream, generally denoted by A In this example, the Person Entity (), Name Property Relationship Entity  (), Age Property Relationship Entity  (), String Primitive Entity  (), and Number Primitive Entity  () are appended to an Information Stream ().","Note that to simplify the example and discussion of  (), multiple entities may be referenced as a group rather than individually. In addition, the Relations shown for each Form or each Entity may only be a subset of the full set of Relations.","When configured according to the principles of the disclosure, entities in an information stream may be immutable and may not be changed. Instead, entities in an information stream may evolve through the addition of new Relationship Entities. A Relationship Entity may be used to substitute information associated with an entity at one point in time with different information at another point in time. Relationship Entities may be added to an Information Stream to associate new information with an Entity. The set of information, or state of an entity, may be determined by integrating an Entity and any Relationship entities signifying changes to that Entity up to a particular point in time.",{"@attributes":{"id":"p-0311","num":"0881"},"figref":["FIG. 55A","FIG. 54"],"b":["5500","5400","5510","1","5545","2","5550","2","5555","5540"]},{"@attributes":{"id":"p-0312","num":"0882"},"figref":"FIG. 55B","b":["5500","5500"]},"Step : Creating an information stream, the stream including at least one entity and at least one relationship entity wherein the relationship entity signifies a change with respect to at least one other entity or signifies a change to at least one other relationship entity, wherein a relationship entity is also a type of entity","Step : Reflecting a change in a state of the information stream by addition of a new entity to the information stream, wherein every entity includes immutable data.","Writing an Information Stream to a Database","In systems of today prior to the invention, changes are typically stored outside the database, such as in a log file, and are not typically part of the database. In a database configured according to the principles of the disclosure, changes may be accomplished through the addition of new relationship entities, which themselves signify change and may be stored in the an information stream. An information stream may be stored in a database. Anytime a relationship is created or a new entity instantiated, there may be a state transition in the database configured according to the principles of the disclosure. These relationship entities may reference entities that exist anywhere in the stream, or anywhere in a different stream.","An information stream may be written to a database using the same method as when writing an entity to a database. The Relation Entities on a Form may be variant or invariant. The data associated with the variant Relation Entities of invariant Relation Entities may be primitive or complex. The process for writing Entities is shown in  (A) and B (B).","Complex Entity Stream and Relation Join Stream","In one implementation of a database configured according to the principles of the disclosure, Complex Entity Stream and Relation Join Stream may also be structures that may be used to store entities in a database structure. Complex Entity Streams may store the database content and Relation Join Streams may store the associations, or links, between content in the database.","At least two types of entities may be stored in an example database configured according to the principles of the disclosure to use Complex Entity Streams and Relation Join Streams: Complex Entities and Primitive Entities. Complex entities may derive from the complex entity Form and may contain the following relations: GUID, date\/timestamp, and one or more relations to complex content. Examples of complex entities may include: Form, document, image, or anything that is not a primitive entity.","Primitive entities may derive from the primitive entity Form and may include the following relations: GUID, date\/timestamp, and value. A primitive may be a built-in data type in the database. Primitive entities may include but are not limited to: Boolean, number, string, time, and unique. Primitive entities may be of fixed length or variable length. Primitive entity streams may supported by a specific content model.","Complex and Primitive Entity Streams may be written to the an example database configured according to the principles of the disclosure, Complex Entity Streams and Relation Join Streams using a process that may record the entities themselves and all relations of the entity being stored with other entities. This stream writing process may alternate between streams of complex entity content and streams of relational joins that may link the content together. Each stream may be a complex entity itself. For example,  () illustratively shows a Folder that may related to another Folder through a parent to child relation, configured according to principles of the disclosure.","When writing the relationships between a Parent Folder A (z) (a complex entity) and a Child Folder B (), another complex entity) to the Complex Entity Stream and Relational Join Stream, the Folder entity may be written to the streams shown in Table 2:",{"@attributes":{"id":"p-0324","num":"0894"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 2"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Example Parent Folder to Child Folder Relationship Writing to Complex"},{"entry":"Entity Stream and Relational Join Stream"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Write","Stream",{}]},{"entry":["Stream","Type","Stream Content"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Stream 1 ","Complex","Parent Folder A entity (5605)"]},{"entry":[{},"Entity",{}]},{"entry":[{},"Stream",{}]},{"entry":["Stream 2","Relation","Parent Folder A Child Relation Entity (5620)"]},{"entry":[{},"Join Stream",{}]},{"entry":["Stream 3","Complex","Containment Relationship Entity (5610)"]},{"entry":[{},"Entity",{}]},{"entry":[{},"Stream",{}]},{"entry":["Stream 4","Relation","Containment Relationship Entity Parent Relation "]},{"entry":[{},"Join Stream","entity (5625)"]},{"entry":["Stream 5","Complex","Child Folder B (5615)"]},{"entry":[{},"Entity",{}]},{"entry":[{},"Stream",{}]},{"entry":["Stream 6","Relation","GUID relation for child folder"]},{"entry":[{},"Join Stream",{}]},{"entry":["Stream 7","Primitive ","GUID value relation"]},{"entry":[{},"Entity",{}]},{"entry":[{},"Stream",{}]},{"entry":["Stream 8","Primitive ","GUID value"]},{"entry":[{},"Value"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"The alternating streams may continue until the complex entity may be related to a primitive entity. The primitive entity may be the lowest stream of the entity write process, and may terminate the complex entity stream. Because primitive entities may be supported by a specific content model, the stream writer may parse primitive entities, may convert the entities into bytes, and may write those bytes of content to the database as variable length binary strings in byte chunks of a specific or varied size.","The above example demonstrates writing one Folder relationship and the GUID of a related child into complex and primitive entity stream streams. Each complex entity may include more than one relationship. For example, as shown in  () if the Parent Folder A entity is related to three subfolders, Stream  through Stream  may include the entries shown in Table 3.",{"@attributes":{"id":"p-0327","num":"0897"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"center"}},"thead":{"row":{"entry":"TABLE 3"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Writing Multiple Parent Folder-Child Folder Relationships"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Write","Stream",{}]},{"entry":["Stream","Type","Stream Content"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Stream 1","Complex","Parent Folder A Entity (5705)"]},{"entry":[{},"Entity",{}]},{"entry":[{},"Stream",{}]},{"entry":["Stream 2","Relation","Parent Folder A Child Relation"]},{"entry":[{},"Join Stream",{}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Stream 3","Complex","Containment","Containment","Containment"]},{"entry":[{},"Entity","Relationship Entity 1","Relationship Entity 2","Relationship Entity 3"]},{"entry":[{},"Stream","(5710)","(5715)","(5720)"]},{"entry":["Stream 4","Relation","Parent Relation","Parent Relation","Parent Relation 3"]},{"entry":[{},"Join Stream",{},{},{}]},{"entry":["Stream 5","Complex","Child Folder B","Child Folder C","Child Folder D"]},{"entry":[{},"Entity","(5725)","(5730)","(5735)"]},{"entry":[{},"Stream",{},{},{}]},{"entry":["Stream 6","Relation","GUID Relation for","GUID Relation for","GUID Relation for"]},{"entry":[{},"Join Stream","Child Folder B","Child Folder C","Child Folder D"]},{"entry":["Stream 7","Primitive","GUID Value","GUID Value","GUID Value"]},{"entry":[{},"entity","Relation for Child","Relation for Child","Relation for Child"]},{"entry":[{},"Stream","Folder B","Folder C","Folder D"]},{"entry":["Stream 8","Primitive","GUID Value for","GUID Value for","GUID Value for"]},{"entry":[{},"Value","Child Folder B","Child Folder C","Child Folder D"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}}]}}},"The Complex Entity Stream writer and Relational Join Stream writer may complete the full set of writes for the relationships that terminate in a primitive entity stream before moving on to the next relation.  () in view of Table 4 may illustrate a more detailed display of the writing a Folder Form with a multiple relation to Complex Entity Stream and Relational Join Stream in a database configured to principles of the disclosure.",{"@attributes":{"id":"p-0329","num":"0899"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"343pt","align":"center"}},"thead":{"row":{"entry":"TABLE 4"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Folder Entity -- Multiple Stream Writing"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"12"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"6","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"7","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"8","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"9","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"10","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"11","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"12","colwidth":"28pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Stream","Stream","Stream ","Stream","Stream","Stream","Stream","Stream","Stream","Stream","Stream","Stream"]},{"entry":["1 (CES)","2 (RJS)","3 (CES)","4 (RJS)","5 (CES)","5 (PES)","6 (RJS)","7 (CES)","7 (PES)","8 (RJS)","9 (CES)","9 (PES)"]},{"entry":{"@attributes":{"namest":"1","nameend":"12","align":"center","rowsep":"1"}}},{"entry":["Folder","GUID","GUID","GUID",{},"GUID",{},{},{},{},{},{}]},{"entry":["(5805)",{},"Relation","Value",{},{},{},{},{},{},{},{}]},{"entry":[{},{},"Entity","Rela-",{},{},{},{},{},{},{},{}]},{"entry":[{},{},{},"tion",{},{},{},{},{},{},{},{}]},{"entry":[{},"Date\/","Date\/","Date\/",{},"Date\/",{},{},{},{},{},{}]},{"entry":[{},"Time-","Time-","Time-",{},"Time-",{},{},{},{},{},{}]},{"entry":[{},"stamp","stamp","stamp",{},"stamp",{},{},{},{},{},{}]},{"entry":[{},"Relation","Relation","Value",{},{},{},{},{},{},{},{}]},{"entry":[{},{},"Entity","Relation",{},{},{},{},{},{},{},{}]},{"entry":[{},"Child","Contain-","Parent","Child",{},"GUID","GUID",{},"GUID",{},"GUID"]},{"entry":[{},"Rela-","ment","Rel-","Folder",{},"Rela-","Rela-",{},"Value",{},{}]},{"entry":[{},"tion","Relatnship","ation 1","B",{},"tion","tion",{},"Rela-",{},{}]},{"entry":[{},{},"Entity 1",{},"(5815)",{},{},"Entity",{},"tion",{},{}]},{"entry":[{},{},"(5810)",{},{},{},{},{},{},{},{},{}]},{"entry":[{},{},"Contain-","Parent","Child",{},"GUID","GUID",{},"GUID",{},"GUID"]},{"entry":[{},{},"ment","Rela-","Folder",{},"Rela-","Rela-",{},"Value",{},{}]},{"entry":[{},{},"Relatnship","tion 2","C",{},"tion","tion",{},"Rela-",{},{}]},{"entry":[{},{},"Entity 2",{},"(5825)",{},{},"Entity",{},"tion",{},{}]},{"entry":[{},{},"(5820)",{},{},{},{},{},{},{},{},{}]},{"entry":[{},{},"Contain-","Parent","Child",{},"GUID","GUID",{},"GUID",{},"GUID"]},{"entry":[{},{},"ment","Rela-","Folder",{},"Rela-","Rela-",{},"Value",{},{}]},{"entry":[{},{},"Relatnship","tion 3","D",{},"tion","tion",{},"Rela-",{},{}]},{"entry":[{},{},"Entity 3",{},"(5835)",{},{},"Entity",{},"tion",{},{}]},{"entry":[{},{},"(5830)",{},{},{},{},{},{},{},{},{}]},{"entry":[{},"Parent","Contain-","Child","Parent",{},"GUID","GUID",{},"GUID",{},"GUID"]},{"entry":[{},"Rela-","ment","Rela-","Folder",{},"Rela-","Rela-",{},"Value",{},{}]},{"entry":[{},"tion","Relatnship","tion",{},{},"tion","tion",{},"Rela-",{},{}]},{"entry":[{},{},"Entity 4",{},{},{},{},"Entity",{},"tion",{},{}]},{"entry":[{},{},"(5850)",{},{},{},{},{},{},{},{},{}]},{"entry":[{},"Folder","Name","Folder","Name",{},"Name",{},"Name",{},{},{}]},{"entry":[{},"Name","Property","Name","Rela-",{},"Value",{},{},{},{},{}]},{"entry":[{},"Attri-","Relatnship","Rela-","tion",{},"Rela-",{},{},{},{},{}]},{"entry":[{},"bute","Entity","tion","Entity",{},"tion",{},{},{},{},{}]},{"entry":[{},"Rela-","(5840)",{},{},{},{},{},{},{},{},{}]},{"entry":[{},"tion",{},{},{},{},{},{},{},{},{},{}]},{"entry":[{},"File\/","File\/","File-","File",{},"File",{},"File",{},{},{}]},{"entry":[{},"Docu-","Document","GUID","GUID",{},"GUID",{},"GUID",{},{},{}]},{"entry":[{},"ment","Relation","Rela-","Rela-",{},"Value",{},{},{},{},{}]},{"entry":[{},"Rela-","Entity","tion","tion",{},"Rela-",{},{},{},{},{}]},{"entry":[{},"tion",{},{},"entity",{},"tion",{},{},{},{},{}]},{"entry":[{},{},"File\/","File","File",{},"File",{},"File",{},{},{}]},{"entry":[{},{},"Document","BLOB","BLOB",{},"BLOB",{},"BLOB",{},{},{}]},{"entry":[{},{},"Relatnship","Rela-","Rela-",{},"Value",{},{},{},{},{}]},{"entry":[{},{},"Entity","tion","tion",{},"Rela-",{},{},{},{},{}]},{"entry":[{},{},{},{},"entity",{},"tion"]},{"entry":{"@attributes":{"namest":"1","nameend":"12","align":"center","rowsep":"1"}}}]}}]}}},"Self-Describing Nature of Databases and Information Streams","In one implementation of the Forms Language, the databases configured according to the principles of the disclosure may be self-describing and self-contained. Several characteristics that may provide for creation of self-describing and self-contained databases:\n\n","Given these characteristics, new Form types may be added to the database by inserting rows describing that new Form type into the tables. The newly defined Form type may then be instantiated and values may be assigned to its properties. The instantiation and property assignments may be accomplished through the insertion of new rows (records) into the database. The insertion of records for both the shape of the Form and values for the Entity's properties may be accomplished through appending the records onto the appropriate tables in the system.","Table 5 through Table 11 show a simplified implementation using the principles of the disclosure to implement a self-describing, self-contained database.\n\n","Multiple tables in the system may be queried to determine additional information about each Form or each Property. For example, in Table 11 Containment Relationship, includes a record with GUID . This record shows that the GUID property on the Property Form has its \u201cIs Variant\u201d property set to the Boolean with a value of False. This may indicate that the GUID Property of the Property Form is an invariant relation. The usage of a Property to describe a Property of the Property Form is an example of the self-describing nature of this system.","In two additional examples, Table 9 describes the Document Form and includes one document Entity, and Table 10 describes the Folder Form and includes one folder Entity. Table 6 Form Table may be used to determine that the GUID for the Document Form is 12 and the GUID for the Folder Form is 11. Table 11, Containment Relationship may then be examined for all records where the Parent$Entity column equals 11 to discover all of the properties associated with the Document Form, currently Contents property. Table 11, Containment Relationship may also be examined for all records where the Parent$Entity column equals 13 to discover all the properties of the Folder Form, currently Child Property and Parent Property.","In another example, given a Form GUID of 11 and Entity GUID of 31, the tables may be examined to discover the corresponding Form type, the properties of the Form, and the values that have been assigned to this particular instantiation of the Form. In this example, Table 6 Form Table indicated that a FormGUID of 11 corresponds to a Form Type Folder, EntityGUID of 31 in Table 9 Containment Relationship corresponds to the Parent$Entity Column, and the folder has a Name property with the current value of Folder.",{"@attributes":{"id":"p-0337","num":"0918"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 5"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Form Table"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"GUID","Time",{}]},{"entry":[{},"Property","Property","Form Name"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"11","(tacor)","\u201cFolder\u201d"]},{"entry":[{},"12","(tacor)","\u201cDocument\u201d"]},{"entry":[{},"13","(tacor)","\u201cContainment"]},{"entry":[{},{},{},"Relationship\u201d"]},{"entry":[{},"14","(tacor)","\u201cProperty"]},{"entry":[{},"15","(tacor)","\u201cForm Form\u201d"]},{"entry":[{},"16","(tacor)","\u201cObject\u201d"]},{"entry":[{},"17","(tacor)","\u201cString\u201d"]},{"entry":[{},"18","(tacor)","\u201cRelationship Object\u201d"]},{"entry":[{},"19","(tacor)","\u201cStandard Object\u201d"]},{"entry":[{},"20","(tacor)","\u201cBoolean\u201d"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"*tacor = Timestamp At Creation Of Record"]}]}}]}}},{"@attributes":{"id":"p-0338","num":"0919"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 6"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Property Table"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"GUID","Time",{}]},{"entry":[{},"Property","Property","Property Name"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"21","(tacor)","\u201cParent\u201d"]},{"entry":[{},"22","(tacor)","\u201cChild\u201d"]},{"entry":[{},"23","(tacor)","\u201cGUID\u201d"]},{"entry":[{},"24","(tacor)","\u201cTime\u201d"]},{"entry":[{},"25","(tacor)","\u201cContents\u201d"]},{"entry":[{},"26","(tacor)","\u201cContainers\u201d"]},{"entry":[{},"27","(tacor)","\u201cName\u201d"]},{"entry":[{},"28","(tacor)","\u201cIs Variant\u201d"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"*tacor = Timestamp At Creation Of Record"]}]}}]}}},{"@attributes":{"id":"p-0339","num":"0920"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 7"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Primitive Boolean Table"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"GUID","Time","Value"]},{"entry":[{},"Property","Property","Property"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"101","(tacor)","\u201ctrue\u201d"]},{"entry":[{},"102","(tacor)","\u201cfalse\u201d"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"*tacor = Timestamp At Creation Of Record"]}]}}]}}},{"@attributes":{"id":"p-0340","num":"0921"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 8"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Primitive String Table"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"GUID","Time","Value"]},{"entry":[{},"Property","Property","Property"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"73","(tacor)","\u201cFolder1\u201d"]},{"entry":[{},"74","(tacor)","\u201cDocument1\u201d"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"*tacor = Timestamp At Creation Of Record"]}]}}]}}},{"@attributes":{"id":"p-0341","num":"0922"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"119pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"thead":{"row":{"entry":"TABLE 9"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Document Table",{}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["GUID","Time",{}]},{"entry":["Property","Property"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"70pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["51","(tacor)","\u2190","document1 object"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":"*tacor = Timestamp At Creation Of Record"}]}}]}}},{"@attributes":{"id":"p-0342","num":"0923"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"98pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"thead":{"row":{"entry":[{},"TABLE 10"]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Folder Table",{}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"GUID","Time ",{}]},{"entry":[{},"Property","Property"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"31","(tacor)","\u2190","folder1 object"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"*tacor = Timestamp At Creation Of Record"]}]}}]}}},{"@attributes":{"id":"p-0343","num":"0924"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"322pt","align":"center"}},"thead":{"row":{"entry":"TABLE 11"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Containment Relationship"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"98pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"112pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"63pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["GUID","Time","Parent Property","Child Property",{}]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"9"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"6","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"7","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"8","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"9","colwidth":"63pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Prop-","Prop-","Parent$","Parent$","Parent$","Child$","Child$","Child$",{}]},{"entry":["erty","erty","Form","Entity","Property","Form","Entity","Property","Purpose"]},{"entry":{"@attributes":{"namest":"1","nameend":"9","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"9"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"6","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"7","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"8","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"9","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["41","(tacor)","15","13","\u2014","14","22 (child","\u2014","Adds child"]},{"entry":[{},{},"(form","(contain-",{},"(property","property)",{},"property to"]},{"entry":[{},{},"Form)","ment",{},"Form)",{},{},"containment Form"]},{"entry":[{},{},{},"Form)",{},{},{},{},{}]},{"entry":["42","(tacor)","15","13","\u2014","14","21 (child","\u2014","Adds parent "]},{"entry":[{},{},"(form","(contain-",{},"(property","property)",{},"property to"]},{"entry":[{},{},"Form)","ment",{},"Form)",{},{},"containment Form"]},{"entry":[{},{},{},"Form)",{},{},{},{},{}]},{"entry":["43","(tacor)","15","16","\u2014","14","23 (GUID","\u2014","Adds GUID"]},{"entry":[{},{},"(form","(object",{},"(property","property)",{},"property to object"]},{"entry":[{},{},"Form)","Form)",{},"Form)",{},{},"Form"]},{"entry":["44","(tacor)","15","16","\u2014","14","24 (time","\u2014","Adds time property"]},{"entry":[{},{},"(form","(object",{},"(property","property)",{},"to object Form"]},{"entry":[{},{},"Form)","Form)",{},"Form)",{},{},{}]},{"entry":["45","(tacor)","15","11","\u2014","14","25 (contents","\u2014","Adds content"]},{"entry":[{},{},"(form","(folder",{},"(property","property)",{},"property to folder"]},{"entry":[{},{},"Form)","Form)",{},"Form)",{},{},"Form"]},{"entry":["46","(tacor)","15","12","\u2014","14","26 (con-","\u2014","Adds containers"]},{"entry":[{},{},"(form","(docu-",{},"(property","tainers",{},"property to"]},{"entry":[{},{},"Form)","ment",{},"Form)","property)",{},"document Form"]},{"entry":[{},{},{},"Form)",{},{},{},{},{}]},{"entry":["47","(tacor)","11","31","25","12","51 (docu-","26 (con-","Adds document1 to"]},{"entry":[{},{},"(folder","(folder","(contents","(document","ment","tainers","folder1"]},{"entry":[{},{},"Form)","object)","property)","Form)","object)","property)",{}]},{"entry":["48","(tacor)","11","31","27","17 (string","73","\u2014","adds name to"]},{"entry":[{},{},"(folder","(folder","(name","Form)","(\u201cfolder1\u201d",{},"folder1"]},{"entry":[{},{},"Form)","object)","property)",{},"string)",{},{}]},{"entry":["49","(tacor)","12","51 (docu-","27","17 (string","74 (\u201cdocu-","\u2014","adds name to"]},{"entry":[{},{},"(docu-","ment","(name","Form)","ment1\u201d",{},"document1"]},{"entry":[{},{},"ment","object)","property)",{},"string)",{},{}]},{"entry":[{},{},"Form)",{},{},{},{},{},{}]},{"entry":["201","(tacor)","15","16","\u2014","14","27 (name","\u2014","adds name property"]},{"entry":[{},{},"(form","(object",{},"(property","property)",{},"to object Form"]},{"entry":[{},{},"Form)","Form)",{},"Form)",{},{},{}]},{"entry":["202","(tacor)","14","23","28","20","102",{},"Makes GUID an "]},{"entry":[{},{},"(prop-","(GUID","(isvariant","(boolean","(\u201cfalse\u201d",{},"invariant property"]},{"entry":[{},{},"erty","property)","property)","Form)","boolean",{},{}]},{"entry":[{},{},"Form)",{},{},{},"object)"]},{"entry":{"@attributes":{"namest":"1","nameend":"9","align":"center","rowsep":"1"}}}]}}]}}},"In a system configured according to the principles of the disclosure, entities may be written to a database, a graph database, a database web, a stream, or to other data structures. Each of those data structures may also be self-contained and self-describing. For example, a stream that contains the following may also be self-describing and self contained: the set of entities that correspond to the rows described above as required for the database to be self-describing; the Form entities that describe a total set of all entities in the stream; and all relationship entities signifying change in the stream.","Distributing, Converging, and Diverging Information Streams","An information stream configured according to the principles of the disclosure may be a collection of entities. These entities may be comprised of variant and invariant relations. The data associated with invariant relations may be written immutably to an information streams as part of the entity with which it is associated. Variant data may also be written immutably to streams, however the variant data are associated with the entities may be substituted with new information in Relationship Entities written to an information stream.","Information streams may be created on any system configured according to the principles of the disclosure and implemented on a system of nodes using an architecture or on an infrastructure such as that described in  () and  (). Entities may be added to an information stream through appending, merging, or otherwise combining information streams. A subset of an information stream may be created by copying entities from the information stream into a new information stream. This new information stream may be transferred through a communications protocol to any other node, and appended or otherwise merged with any other information stream configured according to the principles of the disclosure and implemented using an architecture or on an infrastructure such as that described in  () and  (). Information streams may be mutually appendable.","Relationships and other entities that may be added to an information stream may create information differentials that may cause one information stream to diverge from other information streams. Information streams may converge as the number of entities in common between the streams increases as a result of streaming and appending sets of entities.","Information streams are propagatable across of distributed network of nodes through a variety of communications protocols.  is an example process flow for Converging and Diverging Streams in a system of nodes, generally denoted by . The Converging and Diverging Streams Process Flow  may include:","Step : Creating a first stream at a first node of a plurality of nodes, the first stream comprising a first set of entities including a first relationship entity;","Step : Creating a second stream at a second node of the plurality of nodes, the second stream comprising a second set of entities including a second relationship entity;","Step : Diverging the first stream in relation to the second stream by appending a third set of additional entities to the first stream;","Step : Diverging the second stream in relation to the first stream by appending a fourth set of additional entities to the second stream, whereby the expanding first stream includes information causing asymmetry in relation to the information in the second stream and the second stream includes information causing asymmetry in relation to the information in the first stream;","Step : Converging the first stream and the second stream by appending a subset of one of the streams to the other stream producing a converged stream at a point in time, while the first stream and second stream each continue to simultaneously diverge after the point in time through appending the first set of additional new entities to the first stream and the second set of additional new entities to the second stream.","One of ordinary skill in the art may recognize that a variety of processes may be used to diverge and converge streams.","Streams may be converged and diverged by propagating the streams in a network of distributed nodes configured according to the principles of the disclosure.  is an example process flow for Creating and Propagating Streams in a Network of Nodes, generally denoted by . The Creating and Propagating Streams in a Network Process Flow  may include:","Step : Creating a stream by a computing device wherein the stream comprises a set of entities, including Form entities that describe a total set of all entities in the stream, and the stream further comprises relationship entities that signify changes to the set of entities including changes to any Form entities in the stream, thereby the stream is self-describing and self-contained and is propagatable across a network of nodes;","Step : Propagating the stream from at least one node to another node in a network of nodes for use by a consumer of the stream.","The divergence and convergence of information streams is critical to achieving cooperative advantage and competitive disadvantage. The more streams tend toward convergence, the more entities the streams have in common, and the higher the degree of cooperative advantage. Businesses today often seek cooperative advantage when collaborating on activities, such as joint development of a product or other mutually beneficial teaming activities. The more information streams tend towards divergence, the higher the degree of competitive advantage. Businesses competing in the same market have more opportunity to increase their market share by having more information about their customer of client needs.","Consumers of entities and information streams, as may be recognized by one of ordinary skill in the art, may include: a user, device, computing device, process, application, another entity, an information stream that accepts one or more information objects and\/or makes use of the one or more accepted information objects. Consumer of entities in an information streams may register interest in an entity and be notified through a variety of processes that a relationship entity referencing the entity of interest has been created, signifying a change in the entity. The entities representing information in a stream may be selectively controlled and disseminated to at least one consumer of the plurality of entities referenced by relationship entities at one or more of the computer-based nodes.","Producers of entities and information streams, as may be recognized by one of ordinary skill in the art, may include: a user, device, computing process, application, another entity, an information stream that creates or causes the creation of one or more information objects.","Information Streams to Graph Database\/Database Web","When configured according to the principles of the disclosure, entities may be written to information streams, entities may be written to a database, information streams may be written to a database, streams may be distributed across a set of nodes, and entities in databases may be distributed across a collection of nodes. Information in a system configured according to the principles of the disclosure is characterized by the immutability of the data, the innumerable connections between data, the signification of change in a first class object called a relationship. Changes are made by adding new connections or nulling existing connections. The rich set of connections between data, the immutability of the data, the capturing of change in relationship entities provide for creation of a distributed graph database, or database web. The graph may expand continuously by adding new entities and the linkages intrinsic to the new entities. FIG.  is an example process flow for Expanding the Distributed Web by Appending Information Streams, generally denoted by . The Expanding the Distributed Web Process Flow  may include:","Step : Creating a first information stream associated with a first node in a system of computer-based nodes,","Step : Creating a second information stream associated with a second node in a system of computer-based nodes,","Step : Appending one of: the first information stream and the second information stream with respect to the other at any node in the system of computer-based nodes so that the distributed web is expanded by adding new relationship entities to any of the streams, wherein the first information stream and second information stream comprise a plurality of entities representing information and each stream further comprises relationship entities, each relationship entity referencing at least one of the plurality of entities and signifying at least one change to the at least one of the plurality of entities so that the information content associated with the referenced entity is logically changed while preserving the immutability of the referenced entity","Additional Detail on Creating, Instantiating, and Traversing Forms and Entities","One implementation of the use of Forms Language and object-oriented programming techniques to create or instantiate Forms, add Relations to a Form, subclass a Form, and traverse Forms and related Entities, is described in this section. This implementation is exemplary and many alternate implementations are possible one of ordinary skill in the art may recognize.","Creating a Form","A new Form may be created by instantiating (creating a new instance of) the Form Form\u2014that is, the Form which describes the structure of every Form. The Form Form may describe the structure of every derived Form in the database as having the following set of Relations:\n\n","Typically, these Relations may be required to create an instance of the Form Form that may yield a Form Entity. A Form that may have the required set of Relation \u201cimplementations\u201d may be said to be \u201cwell-formed\u201d. A well-formed Form may typically specify at least Relations , , , , , and . Relation  may be \u201cimplemented\u201d only when subclasses of the Form are created.","The Unification: Creating a Form may be no different from creating any other Entity, in that a Form may describe the structure of new Form Entities. Entities may describe Forms, and the database may store multiple levels of \u201cformal interpretation\u201d as Entities within the database. The design scales as formalization results in thousands or millions of Entities and the database may be well-suited to managing thousands or millions of Entities.","Adding a Relation to a Form","The process of \u201cformalization\u201d may occur by attaching (adding) one or more Relations to a Form. The Form may be characterized by the set of Relations associated with it. These Relations may be attached by the following sequence of steps:\n\n","Generating a Table from a Form","In a database configured according to the principles of the disclosure, columns of a table may be generated from the invariant Relations. As a result, the tables may include invariant columns. That is, rows created under the table may be invariant. The value of the invariance property may be described in the \u201cimmutability property\u201d section.","To form the table corresponding to a Form, the algorithm may select the set of invariants associated with the Form (the algorithm which produces this set may be defined under the section \u201cGetting the Relations attached to a Form\u201d). For each invariant Relation, a test on the Relation may be performed to determine whether the Form on the \u201cright side\u201d (or \u201coutput side\u201d) of the Relation is a Primitive Form (meaning: the Form subclasses the \u201cPrimitive Form\u201d).","If the right side is a Primitive Form, then typically, a single column may be created which may contain the primitive value itself. If the right side is not a Primitive Form (which means that the right side is complex Form), typically, three columns may be created which map the \u201centity reference\u201d to the complex Entity. The three columns may include:\n\n","Computing the Relations which Belong to a Form","In one aspect, an algorithm that may be used to compute the Relations attached to a Form begin with the Form Entity A. Form Entity A may have two sets of Relations:\n\n","Simple Relation Inheritance","In a simple example (which does not consider Relation subclassing), the members of Relation Set  and Relation Set  may be simply combined to form Relation Set . That is, the Form inherits Relations of the Forms of which it is a subclass.","In the absence of Relation subclassing, Relation Set  may also represent the total set of Relations attached to the Form (total Relations, abbreviated TR). The algorithm for computing the Relation Set  may be recursive. For example, Algorithm A may compute Relation Set  for Form A by taking the union of the following sets:\n\n","Because the algorithm is recursive, the sets TR-B, TR-C, and TR-D may be similarly computed using Algorithm A. The algorithm may terminates when no superForms exist for the Form Z. In this case, the total Relation set may include only Relations directly assigned to Z (DR-Z).","In one implementation, the only Form which has no superForms may be the Entity class. Therefore, in this implementation, the Entity Form may be the root from which all other Forms in the network subclass (or derive). As an example, consider the following the Form hierarchy:\n\n","The Person Form, which may inherit from the Entity Form (which may be the same as saying that it is a subform or subclass of the Person Form), may have the following total set of Relations (TR-Person):","TR-Person {GUID Relation, Time Relation, Name Relation, Age Relation}","Advanced Relation Subclassing","Relation subclassing may add another dimension to the model of Relation inheritance previously described. In the same that way a Form may be a class, Relation may similarly be a class and may support subclassing. Consequently, a Relation A class can may subclass other Relations (its set of superrelations) and another distinct set of Relations may be subclasses of Relation A (its set of subrelations). A Relation may subclass another Relation, as long as the following conditions are met:\n\n","When a Relation subclasses another Relation, a special kind of \u201cRelation subclassing\u201d association (Relationship Entity) may be created connecting the superrelation with the subrelation. The Relation subclassing may be the same subclass association type used to subclass Forms.","To compute the total set of a Form's Relations with Relation overriding, the Relation class hierarchy may typically be considered. A database configured according to the principles of the disclosure may simply list out all inherited Relations, it may often be more useful to list only those Relations which are the leaves of the class inheritance tree. When a Database configured according to the principles of the disclosure is asked for and presents the set of Relations belonging to a Form, it may typically will exclude from the result set those Relations that are \u201coverridden\u201d (or subclassed) by other Relations (listing only those Relations which are not overridden).","For example, if the Function Form (a subform of Entity Form) specifies two Relations, Input and Output, a subform Difference may specify two further Relations, LValue and RValue, which each subclass the Input Relation. When the Difference Form is queried for its Relations, a database configured according to the principles of the disclosure may typically return the following set of variant Relations: {GUID, Time, LValue, RValue, Output}. The following list may explain the inclusion of each Relation:\n\n","Instantiating a Form","Typically, after bootstrapping is completed, instances of certain type of Form (Entities) may be generated using a method defined on the Object-Oriented Programming Language (OOPL) Form class called \u201cInstantiate\u201d. The method Form.Instantiate may analyzes the structure of the Form and generate a new instance (made up of at least one Entity in the database) according to the defined structure.","The values of invariant Relations may typically be provided to the Instantiate method as parameters. The arguments bound to these parameters at runtime may provide the actual \u201cinvariant\u2019 values assigned under invariant Relations to the new Entity instance constructed by Form.Instantiate. Typically, the RelationMap may be used to provide the values \u201cmapped\u201d under given Relations of the constructed Form.","In a database, a newly instantiated Entity may be represented in one or more of several ways. The database may be broken down into the following data representations: the Tuplebase and the Streambase. A Form may be instantiated, or a new Entity created, into either or both the Tuplebase and Streambase.","If instantiated into the Tuplebase, at least one new tuple representing the instantiated Entity may be created. In the Tuplebase, Form may typically correspond to a Table structure, whose columns may map to Invariant Relations defined for the Form.","Consequently, when a new instance of a Form is created, a new Row in the Table may be created containing the fields mapped to particular columns (or Relations). The RelationMap provided at Entity instantiation time provides the values mapped into these fields. For a more complete description of the mapping of a Form to a Table.","If instantiating into the Streambase, the data structure of the Streambase may be used to capture data \u201cassociated\u201d with the instantiated Entity. Typically, the Entity stream may include alternating levels in a \u201cforest\u201d of root Entities. Level  may contain the set\/sequence of root complex Entities. At level , there may exist a stream under each complex Entity in level . Level  may contain the set of Relation joins made linking the root complex Entity with \u201crelatives\u201d. Each \u201cRelation join\u201d may correspond to a Relation attached to a Form describing the root complex Entity. Each level  Relation join may contain a level  Entity stream. In the simplest case in which a complex Entity may be constructed from a Form, the level  Entity streams may be \u201cPrimitive Entity Streams\u201d. Each Primitive Entity Stream may contain the content of the primitive data mapped under the Relation and provided by the RelationMap at Entity instantiation time. Append, in a more complex case, the relation of the relation join is executed, yielding a set of complex (non-primitive) entities, this set represented as level  entity stream.","Getting a Relative","A database configured according to the principles of the disclosure may obtain a \u201crelative\u201d by executing one or more Relations. A relative may be any Form that is associated (either directly or indirectly) by one or more relationships. For example, if a friendship relationship Entity (e) may be created linking a user Entity (e) with another user Entity (e), then e may be considered to be a relative of e. Similarly, if another friendship relationship Entity (e) may be created and links e with e, then e may be considered to be a relative of e and e.","An algorithm or method referred to as \u201cgetRelative\u201d on the Entity class may enable an Entity to obtain a relative separated by one relationship Entity (for example, an attribute relationship Entity or a friendship relationship Entity). Two Relations may be executed in order to \u201cstep\u201d across such a relationship (a). The expanded form of step may be \u201cRelational step\u201d.","A Relational step may take an Entity as input and may produce one or more Entities as \u201coutput\u201d. The input of the Relational step may be called Entity (e). The output of the Relational step may be called Entity (e). The first Relation (r) executed may belong to the Form (f) describing e. The first Relational step may execute r, and may yield the relationship Entity a. As an Entity, the relationship a may be described by a Form whose Relations may include two invariant Relations, IR (in the next example, PR) and IR (in the next example, CR). IR may \u201cmap\u201d to the Relation r (in the next example, SubFR) by inserting the name or GUID of Relation R into the IR$Relation column of the row representing a, so that the relationship a references not only e but also references the r relation on the Form f describing e. Relation r may also map to IR by setting the corresponding relation property on r equal to Relation IR, so that the corresponding relation of Relation R is Relation IR. IR and r may be, metaphorically, opposite directions of travel across a single Relational bridge. The Relation IR (in the next example, CR) may also have a corresponding Relation r (in the next example, SuperFR).","A database configured according to the principles of the disclosure may implement a \u201cRelational mapping\u201d in the following way. In this example, a Database may contain two Entities, the folder Entity  (FE) and folder Entity  (FE). FE and FE may be described by the same Folder Form (FF), since both are folders. The Folder Form may contains two variant Relations (Relations whose mapping may change over time), including the Subfolder Relation (SubFR) and the Superfolder Relation (SuperFR). A \u201ccontainment relationship Entity\u201d (CRE) may link the two folders\u2014one as the parent folder (FE) and one as the child folder (FE). The structure of the Containment Relationship Entity (CRE) may be described by the Containment Relationship Form (CRF). CAF may have two invariant Relations (Relations whose mapping does not change over time). Those Relations may include the Parent Relation (PR) and Child Relation (CR). Two \u201cRelational mappings\u201d may be made connecting the four Relations in the following way: The first Relation pairing (P) symmetrically may \u201cmap\u201d the Subfolder Relation (SubFR) to the Parent Relation (PR). The second Relation pairing (P) may \u201cmap\u201d the SuperFolder Relation (SuperFR) to the Child Relation (CR). This may typically be accomplished using the corresponding relation as the mapping tool. Typically, in P, the corresponding relation of the Subfolder Relation (SubFR) is Parent Relation PR. Typically, in P, the corresponding relation of the SuperFolder Relation (SuperFR) is the Child Relation (CR). Similarly, when CRE is created, the Parent Relation (PR) and Child Relation (CR), both invariant relations, are typically stored as data fields in CRE using the entity reference format (referenced Form, referenced Entity, referenced Relation), so that the Parent Relation (PR) is stored as the entity reference in the form (PR$FormReference, PR$EntityReference, PR$RelationReference) and the Child Relation (CR) is stored as an entity reference in the form (CR$FormReference, CR$EntityReference, CR$RelationReference), wherein PR$FormReference is typically the unique identifier of the Folder Form (FF), PR$EntityReference is typically the unique identifier of the folder Entity  (FE), PR$RelationReference is typically the name or unique identifier of the SubFolder relation SubFR, CR$FormReference is typically the unique identifier of the Folder Form (FF), CR$EntityReference is typically the unique identifier of the folder Entity  (FE), CR$RelationReference is typically the name or unique identifier of the SuperFolder relation SuperFR. The first Relation pairing (P) typically includes the relation reference PR$RelationReference. The second Relation pairing (P) typically includes the relation reference CR$RelationReference.","Detailed Relational Stepping Example","When the user provides the \u201cInput\u201d Entity (Entity) to the Relational step on the Subfolder Relation (SubFR), the system may determine the corresponding (\u201cmapped\u201d or \u201cpaired\u201d) Relation, PR. A database configured according to the principles of the disclosure may query the table corresponding to the Containment Relationship Table (CRT). This may typically be accomplished using the corresponding relation and reference$relation. CRT may contain a set of three columns representing the Parent Relation (PR) and may contain three columns representing the Child Relation (CR). The column triplet may include the following: a column containing the GUID (globally unique identifier) for the target Entity's Form (FG); a column containing the GUID of the \u201cmapped\u201d Relation (RG), and a column containing the GUID of the target Entity (EG).","In the case of the Parent Relation (PR), the triplet (PRTriplet) may contain a GUID reference (PR$FG) to the Folder Form FF (under FG), a GUID reference (PR$EG) to the folder Entity (under EG), and a GUID reference (PR$RG) to the GUID of the Relation SubFR (under RG. In the case of Child Relation (CR), the triplet (CRTriplet) may contain a GUID reference (CR$FG) to the Form Form FF (under FG), and a GUID reference (CR$EG) to the folder Entity (under EG), and a GUID reference (CR$RG) to the GUID of the Relation SuperFR (under RG).","When the Relational step is executed (RS), the Database configured according to the principles of the disclosure may execute the following selection (S) on the table corresponding to the Folder Form (CAT). The query may ask for all \u201ccontainment relationship\u201d rows where (selecting from the columns of PRTriplet) where:\n\n","In the previous step, the query selects from the columns of the PRTriplet by determining that the Parent Relation (PR) is mapped as the corresponding relation of SubFolder Relation (SubFR). The query typically reads the corresponding relation of a variant relation (such as SubFR) that is selected to execute in order to determine which invariant relation (such as PR) typically belonging to a relationship Form (such as the Containment Relationship Form) maps back to the variant relation being executed (SubFR). By determining this mapping, the selection S typically knows which columns of the containment relationship table to query (such as the columns mapped to the Parent Relation PR).","The set of rows (SR) returned from query Q may each include Containment Relationship Entities. For each such Containment Relationship Entity (CRE), the Database configured according to the principles of the disclosure may construct a set of output folder Entities (all Entity's) by performing the following selection (S). The selection (S) may select the fields contained by the second triplet (CRTriplet), and may inject the three selected fields of the row into an Entity Reference (ER) by the following mapping:\n\n","For each ER reference, corresponding Entity E object (whose class constructor may accepts a reference as a parameter) may be constructed. The set of E's constructed from all rows (SR) may constitute the output of the Relational step (RS). The set of E's typically contain the set of entities (in this case, folders) referenced by the \u201cInput Entity\u201d (in this case, the folder e) under a relation belonging to the Form of the \u201cInput Entity\u201d (in this case, SubFR).","Bootstrapping: Providing the \u201cBase Case\u201d","The Forms Language may require a special bootstrapping phase in order to bring up the \u201cbase case\u201d of the recursive process used to build Forms and Entities. In one aspect, the recursive process may be defined in the following way: each Entity in the database may be defined by at least one Form and a set of attached Relations. However, the Form and the attached Relations may be themselves described using Entities. So in a circular manner, Entities may describe Forms and Forms may describe Entities. The circularity may require a bootstrapping phase in order to overcome the classic \u201cchicken and egg\u201d problem.","The Database configured according to the principles of the disclosure may \u201cbootstrap\u201d the Forms Language by injecting rows directly into the Database representing Entities which may describe the Forms Language. The definition of the Forms Language may begin with the Form Form. That is, the Form which may describe the structure of every Form.","After bootstrapping, these bootstrapped Relations may be used to generate every Form in the Database configured according to the principles of the disclosure. Post bootstrapping, the process of generating a Form may be no different from generating any other type of Entity: the Instantiate method belonging to the Form class may be invoked on the Form Entity object. As an example, to generate a Containment Entity, the following method may be invoked:\n\n","Similarly, to generate a Form, the following method may be invoked:\n\n","Consequently, the instantiation of a Form (such as containmentForm) may not take place until the Form Form exists. For this reason, the Form Form (and all of its Relations) may be \u201cbootstrapped\u201d.","Forms Language Class Derivation Structure",{"@attributes":{"id":"p-0419","num":"1041"},"figref":"FIG. 60","b":["6000","6005","6010","6015","6020"]},"This system and method for a computer based Forms Language may be used as a platform on which a variety of software applications may be built and connected to, delivered with or without a graphical user interface, using tools such as Java, Flash, HTML, and the like. Exemplary implementations of a software application delivered through a web interface and internet communications protocol that creates, stores, manages, and retrieves forms, entities, relations, and relationships as information streams and in databases configured according to the principles of the disclosure are described in this section.\n\n","One of ordinary skill in the art may recognize that using the Forms Language, any number of software applications may be developed to power a web interface; user interface for a mobile device such as a cell phone, netbook, or tablet computer; an interface to a computer desktop application; and the like.","One of ordinary skill in the art may also recognize that the Figures illustrating the interface features, organization of elements on an interface screen or page, inclusion of specific elements, use of a specific language, and naming of elements are exemplary; many variations of the provided examples are possible. These figures are designed to demonstrate how a system configured according to the principles of the invention may enable the functionality required for the interface to function. Any number of additions, substitutions, deletions, reordering, and renaming may be possible and the interface may still be enabled by the invention.  through  are exemplary illustrations of graphical user interfaces (GUI) configured according to the principles of the disclosure. The GUIs may represent functionality (i.e., software components executed by appropriate hardware) that requests user input, translates the input into entities that may instantiate from Forms created using the Forms Language described herein, may instantiate required relation entities and relationship entities, may create a user account, and may provide appropriate outputs. One of ordinary skill in the art may recognize that many other implementations of an account creation interface are possible. The Figures showing graphical user interfaces (including ) may also represent block diagrams of software components embodied in a storage medium that when executed by an appropriate computing device produce the respective graphical user interface and may display updates thereto and receive inputs from a user. The Figures showing graphical user interfaces (including ) may also represent steps for constructing the various constructs described by the respective Figures and associate description, including but not limited to: entities including relationship entities, Forms, streams, and other constructs described herein.","Create a User Account","In an example web interface configured according to the principles of the invention, a user may create an account to access the application configured according the principles of the disclosure as follows:\n\n","As is typical with many web-based software applications, a confirmation email may be sent to the user that created an account to confirm that they requested the creation of an account, and requesting that the user confirm their account information.  () shows an example of email content that might be sent from the web site on which the user tried to create an account, and viewed with any traditional email client software. The message may contain a verification code that can be used to verify their account and a link that the user may navigate to with an internet browser.","After accessing the web page at the link provided in the confirmation email shown in  (), the Verify Account Creation Page shown in  () may be displayed. The body section () of this page may include controls for the user to enter the verification code that was emailed, their username, and password. After the user clicks Verify in the body section () of the page, the system may then compare the information the user entered with the entities stored in the information stream and complete the account verification process.","Login to a System","After creating an account, a user may wish to log in to a web application built on a platform configured according to the principles of the disclosure. A user may access the login page perhaps similar to the one shown in  () using an internet browser such as Microsoft Internet Explorer, Mozilla Firefox, and the like. In the body section () of the page, the user may enter a username and password and click login to access the application. The system may attempt to authenticate the user and if successful, a My Networks page may be displayed.  is an illustrative graphical user interface showing an exemplary My Networks page for a web application built on a system configured according the principles of the disclosure, generally denoted by reference numeral . This My Networks , and any pages accessed after logging in to the web application, may include the following sections:\n\n","The body section () of a My Networks Page may include a listing of the names of the networks a user may access and the status of the networks. The page may also provide links or buttons the user may click to access functionality to create a new network or edit his\/her global profile.","Create a Network","After logging in to the web application built on a platform configured according to the principles of the disclosure and clicking the Create a Network link or button shown in the body section () of  (), a network name and description page such as shown in  () may be displayed. The Enter Network Name and Description page () and additional pages (, , , , ) that may be accessed on the web site that are associated with creating a network may include the following sections:\n\n","After logging in to the web application built on a platform configured according to the principles of the disclosure, a My Networks page similar to that shown in  () may be displayed.  is an illustrative graphical user interface showing an exemplary My Networks page for a web application built on a system configured according the principles of the disclosure, generally denoted by . The My Networks page () on the web site may include the following sections:\n\n","A user may click on the name of the network in the body section () of a My Networks page similar to that shown in  () to access a Network. A Network Home page similar to that shown in  () may be displayed. The Network Home page () on the web site may include the following sections:\n\n","Clicking on a triangle or other icon to the left of My Inbox or clicking on My Inbox directly in the Personal Folders Section () may:\n\n","Show a set of action buttons that may be used to perform activities specific to messages in the Action and Details Pane (). This pane may also show information related to a message, such as sender, recipient, text of the message, and the like.\n\n","A Group Folders section (): A section of the page that may display a file explorer view of the content related to Group entities available the user. The Group entities may be instantiated from a Form, and that Form may include relations that linked to content such as document(s), folder(s), inbox(es), and outbox(es), primarily through Containment Relationship Entities instantiated from the Containment Relationship Form ().\n\n","A List Pane (): The List Pane () may typically display a listing of the collection of entities associated with the entity clicked in the Personal Folder section () or Group Folder section (). A few examples of selections in the Personal Folders section () or Group Folders section () and resulting display in the List Pane () may include:","Clicking a Group Name in the Group Folder section () may result in the list of users related to the group as members being displayed in the List Pane ().\n\n","An Action and Detail Pane (): The Action and Detail Pane () may typically provide a list of buttons or link that can be clicked to perform an action on the entity selected in the Personal Folder section (), Group Folder section (), or List Pane (): A few examples of selections in the Personal Folders section (), Group Folders section (), or List Pane () and resulting display in the Action and Detail Pane () may include:","Clicking the name of a group member being displayed in the List Pane () may result in the display of the following in the Action and Detail Pane ():\n\n","Clicking on a message being displayed in the List Pane () may result in the display of the following in the Action and Detail Pane ():\n\n","Clicking the name of a file being displayed in the List Pane () may result in the display of the following in the Action and Detail Pane ():\n\n","Clicking on a folder name under My Documents in the Personal Folders section () or clicking on a folder name under Documents in the Group Folders () may result in the display of the following in the Action and Detail Pane ():\n\n","Clicking on a Group name under in the Group Folders () may result in the display of the following in the Action and Detail Pane ():\n\n","A user may log in to a web application built on a system configured according to the principles of the disclosure using a page similar to the Login page shown in  (), the user may see a My Networks page such as that shown in  (). The user may access a network by clicking on a Network Name, and the Network Home page shown in  (), which was previously described in this disclosure.","To invite a new member to a Network (i.e., to become a member of the network), a user my click on the name in the Group Folder section () that matches the name of the network. This may result in the List Pane () displaying a list of all network members, and the Action and Details pane () may display:\n\n","The user may then click the Invite Members button in the Action and Details pane () to begin the process of inviting a new member. This may result in the display of the Invite Network Members popup shown in  ().  is an illustrative graphical user interface showing an exemplary Invite Member popup for a web application built on a system configured according the principles of the disclosure, generally denoted by . This Invite Network Members popup  may include the following:\n\n","After selecting existing contacts and\/or hand entering email addresses, the user may click the Send Invitations action button () and the system may generate and send invitations to the selected users to join a network.","Create a Group","To create a Group, a user may log in to a web application built on a system configured according to the principles of the disclosure using a page similar to the Login page shown in  (), after which the user may view a My Networks page such as that shown in  (). The user may access a network by clicking on a Network Name, and the Network Home page shown in  () may be displayed. The pages associated with  (),  (), and  () have been described in other sections of this disclosure.","Creating a Group on a Network may instantiate a new entity from the Form that defines a Group in a web application built on a system configured according to the principles of the disclosure. To create a Group, the user may click on the Create Group button in the in the Shortcut\/Secondary Navigation bar () on the Network Home page (). This may result in the display of the Create Group popup shown in  ().  is an illustrative graphical user interface showing an exemplary Create Group popup for a web application built on a system configured according the principles of the disclosure, generally denoted by . This Create Group popup  may include:\n\n","After entering the Group information, the user may click the Save action button () and the system may generate an entity for the Group that corresponds to the Form that defines the group.","View Group and Group Members","To view a Group and Group member, a user may log in to a web application built on a system configured according to the principles of the disclosure using a page similar to the Login page shown in  (), after which the user may view a My Networks page such as that shown in  (). The user may access a network by clicking on a Network Name, and the Network Home page shown in  () may be displayed. The pages associated with  (),  (), and  () have been described in other sections of this disclosure.","To view the member of a Group, the user may click on the name of the Group of interest in the Group Folders section () of the Network Home page shown in  (). After clicking on the Group Name, the Network Home page shown in  () may be updated to the Group and Group members view shown in  ().  is an illustrative graphical user interface showing an exemplary Group and Group Members View page for a web application built on a system configured according the principles of the disclosure, generally denoted by . The Group and Group Members View  may include:\n\n","In  (), the user selection of the Engineers Group () in the Group Folders section () may result in the List Pane () displaying the list of members related to the Group through a Relationship Entity.","Invite Group Members","When Viewing Group Members as shown in  () the user may invite another member to the Group by clicking the Invite Members button in the Action and Details Pane (). This may result in the display of the Invite Group Members popup shown in  ().  is an illustrative graphical user interface showing an exemplary Invite Member popup for a web application built on a system configured according the principles of the disclosure, generally denoted by . This Invite Network Members popup  may include the following:\n\n","After selecting contacts, the user may click the Send Invitations action button () and the system may generate and send invitations to the selected users to join a group. Inviting a member to a Group creates a new relationship between the Group entity and the entity that represents the invited user.","Group Folders Expanded View","To view a Group and Group Folders, a user may log in to a web application built on a system configured according to the principles of the disclosure using a page similar to the Login page shown in  (), after which the user may view a My Networks page such as that shown in  (). The user may access a network by clicking on a Network Name, and the Network Home page shown in  () may be displayed. The pages associated with  (),  (), and  () have been described in other sections of this specification.","To view the Folders associated with a Group, the user may click on the name of the Group of interest in the Group Folders section () of the Network Home page shown in  (). After clicking on the Group Name, the display may update to show the Documents Folder and Inbox Folder for the Group. After clicking on the Documents Folder, the display may update to show any folders contained in the document folder. Clicking on one of the folders in the Document folder may show folders related to the selected folder in the Group Folders section (), and any files in the folder may be displayed in the List Pane ().",{"@attributes":{"id":"p-0456","num":"1185"},"figref":"FIG. 82","b":["8200","8200","7700","8200"],"ul":{"@attributes":{"id":"ul0238","list-style":"none"},"li":{"@attributes":{"id":"ul0238-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0239","list-style":"none"},"li":["A header section (): a header section typically consistent across all pages in a web site, may display a logo or other identifier, list the Company or Organization Name and a Tag Line, provide links to general pages such as about, contacts, help, for more information, the name of the network or node with which the page the user is viewing is associated, link or button to logout of the application, and the like.","A menu\/navigation bar (): a menu or navigation bar may include additional links that when clicked, may display to the user other pages of the application.","A shortcut\/secondary navigation bar (): a shortcut\/secondary navigation bar may include additional buttons or icons that provide easier access to specific features of an application.","A body section (): a body section of a web page typically includes the content, controls, elements, and other features that provide the primary functionality for a page.","A Personal Folders section (): A section of the page that may display a file explorer view of the user's documents organized into folders and subfolders, inbox containing messages sent to the user, and outbox containing message sent by the user are displayed. The user may click on the triangle to the left of any of the elements in the Personal Folders section () to show an expanded view of the contents.","A Group Folders section (): A section of the page that may display a file explorer view of the content related to Group entities available the user. The Group entities may be instantiated from a Form, and that Form may include relations that linked to content such as document(s), folder(s), inbox(es), and outbox(es), primarily through Containment Relationship Entities instantiated from the Containment Relationship Form (). In  (), the New Widget Folder () of the Projects Folder () of the Documents Folder () of the Engineers Group () is selected. Each of these Folders may be entities related to each other through a series of Containment Relationship Entities.","A List Pane (): The List Pane () may typically display a listing of the collection of entities associated with the entity clicked in the Personal Folder section () or Group Folder section (). In  (), selection of the New Widget Folder () in the Group Folders section () may result in the List Pane () displaying the list of files associated with the New Widget Folder () through Containment Relationship Entities and other Entities.","An Action and Detail Pane (): The Action and Detail Pane () may typically provide a list of buttons or link that can be clicked to perform an action on the entity selected in the Personal Folder section (), Group Folder section (), or List Pane (). In  () selection of the New Widget Folder () in the Group Folders section () may result in the Action and Detail Pane displaying:","Action buttons to Add Folder, Add File, Edit Folder, Move Folder, Share Folder, and Delete Folder.","Details including the folder name, folder description, and other information.","A footer section (): a footer section on a web typically includes other general content and link that are less important, such as the copyright information, link to a privacy statement, the name of the user logged in and accessing the page, and the like."]}}}},"In  (), selection of the New Widget Folder () in the Group Folders section () may result in the List Pane () displaying the list of files associated with the New Widget Folder () through Containment Relationship Entities and other Entities.","Add Folders","When Viewing Folder Information in the Action and Detail section () as shown in  () the user may add a new folder, and the system may create a new folder entity as well as associated relationship entities by clicking the Add Folder button in the Action and Details Pane (). This may result in the display of the Create Folder popup shown in  ().  is an illustrative graphical user interface showing an exemplary Create Folder popup for a web application built on a system configured according the principles of the disclosure, generally denoted by . The Create Folder popup  may include the following:\n\n","After entering the Folder information, the user may click the Save action button () and the system may generate an entity for the Folder that corresponds to the Folder Form, as well as containment relationships to add it to any Groups and any Folders as appropriate.","Move Folders or Files","When viewing the expanded Group Folders () or Personal Folders () as shown in  () the user may move a folder from one location to another location. Moving folder locations may cause the creation of one or more substitution relationships that replace the linkage between the folder being moved from its current location to a new location. A user may move a folder by clicking the Move Folder button in the Action and Details Pane (). This may result in the display of the Move Folder popup shown in  ().  is an illustrative graphical user interface showing an exemplary Move Folder popup for a web application built on a system configured according the principles of the disclosure, generally denoted by . The Move Folder popup  may include the following:\n\n","After selecting the destination folder, the user may click the Accept action button () and the system may move the Folder from its current location to the selected destination folder location, creating any required substitution and containment relationships.","Add File","When Viewing Folder Information in the Action and Detail section () as shown in  () the user may add a new file and the system may create a new file entity as well as associated relationship entities by clicking the Add File button in the Action and Details Pane (). This may result in the display of the Add File popup shown in  ().  is an illustrative graphical user interface showing an exemplary Add File popup for a web application built on a system configured according the principles of the disclosure, generally denoted by . The Add File popup  may include the following:\n\n","The user may select a file to be uploaded from a computer hard drive, server, flash drive, CD, or any media or electronic device which they can access. To select a file, the user may click the Browse for File action button (). This may result in the display of the Select File to Upload popup shown in  ().  is an illustrative graphical user interface showing an exemplary Select File to Upload popup for a web application built on a system configured according the principles of the disclosure, generally denoted by . The Select File to Upload File popup  may include the following:\n\n","After navigating to and selecting a file to upload, the user may click Open in the action button section (). The system may initiate the upload process and may return the user to the Add File Popup shown in  (). The user may then click Save in the Action Button section (), and the system may create the file entity and any relationships required to add it to the folder as shown in ) for which the Add File button () was clicked.","File Detail View","To view the Details of a File, a user may log in to a web application built on a system configured according to the principles of the disclosure using a page similar to the Login page shown in  (), after which the user may view a My Networks page such as that shown in  (). The user may access a network by clicking on a Network Name, and the Network Home page shown in  () may be displayed. The pages associated with  (),  (), and  () have been described in other sections of this disclosure.","A user may view file details for files in personal folders of group folders using a similar process. In this description, the process that may be used to view the details of a file, and its corresponding file entity, in the Group Folders section is described. These details may be retrieved by the system by using a process such as that described in the Example Process Flow for Retrieving Entity State .","To view a file that is contained in a Group folder, the user may click on the name of the Group of interest in the Group Folders section () of the Network Home page shown in  (). After clicking on the Group Name, the display may update to show the Documents and Inbox Folders for the Group. After clicking on the Documents Folder, the display may update to show any folders contained in the document folder. Clicking on one of the folders in the Document folder may show folders related to the selected folder in the Group Folders section (), and any files in the folder may be displayed in the List Pane ().",{"@attributes":{"id":"p-0468","num":"1223"},"figref":"FIG. 87","b":["8700","8700","7700","8770","8740","8700"],"ul":{"@attributes":{"id":"ul0248","list-style":"none"},"li":{"@attributes":{"id":"ul0248-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0249","list-style":"none"},"li":["A header section (): a header section typically consistent across all pages in a web site, may display a logo or other identifier, list the Company or Organization Name and a Tag Line, provide links to general pages such as about, contacts, help, for more information, the name of the network or node with which the page the user is viewing is associated, link or button to logout of the application, and the like.","A menu\/navigation bar (): a menu or navigation bar may include additional links that when clicked, may display to the user other pages of the application.","A shortcut\/secondary navigation bar (): a shortcut\/secondary navigation bar may include additional buttons or icons that provide easier access to specific features of an application.","A body section (): a body section of a web page typically includes the content, controls, elements, and other features that provide the primary functionality for a page.","A Personal Folders section (): A section of the page that may display a file explorer view of the user's documents organized into folders and subfolders, inbox containing messages sent to the user, and outbox containing message sent by the user are displayed. The user may click on the triangle to the left of any of the elements in the Personal Folders section () to show an expanded view of the contents.","A Group Folders section (): A section of the page that may display a file explorer view of the content related to Group entities available the user. The Group entities may be instantiated from a Form, and that Form may include relations that linked to content such as document(s), folder(s), inbox(es), and outbox(es), primarily through Containment Relationship Entities instantiated from the Containment Relationship Form (). In  (), the New Widget Folder () of the Projects Folder () of the Documents Folder () of the Engineers Group () is selected. Each of these Folders may be entities related to each other through a series of Containment Relationship Entities.","A List Pane (): The List Pane () may typically display a listing of the collection of entities associated with the entity clicked in the Personal Folder section () or Group Folder section (). In  (), selection of the New Widget Folder () in the Group Folders section () may result in the List Pane () displaying the list of files associated with the New Widget Folder () through Containment Relationship Entities and other Entities.","An Action and Detail Pane (): The Action and Detail Pane () may typically provide a list of buttons or link that can be clicked to perform an action on the entity selected in the Personal Folder section (), Group Folder section (), or List Pane (). In  () selection of the analysis.docx file () in the List Pane () may result in the Action and Detail Pane displaying:","Action buttons () to Download Latest version of a file, Edit Info for a file, Upload New Version of a file, Move File, Share File, and Delete File.","Details including the file name, file extension, file description, and other information.","Version display (): may show the list of versions of the file that may have been uploaded. Users may click on a version to view a popup with the full version description and option to download the older version.","A footer section (): a footer section on a web typically includes other general content and link that are less important, such as the copyright information, link to a privacy statement, the name of the user logged in and accessing the page, and the like."]}}}},"In  (), selection of analysis.docx file () in the List Pane () may result in the Action and Detail Pane displaying the file entity and information associated with the file entity through its relations and relationships.","New Version of File","When Viewing File Information in the Action and Detail section () as shown in  () the user may upload a new version of the file and the system may create a new file entity and a substitution relationship to designate the file as a new version in the system, as the as well other relationship entities as needed. The user may begin by clicking the Upload New Version button in the Action and Details Pane (). This may result in the display of the Add Version popup shown in  ().  is an illustrative graphical user interface showing an exemplary Add Version popup for a web application built on a system configured according the principles of the disclosure, generally denoted by . The Add Version popup  may include the following:\n\n","The user may select a file that will be uploaded as a new version from a computer hard drive, server, flash drive, CD or any media or electronic device which the user can access. To select a file, the user may click the Browse for File action button (). This may result in the display of the Select File to Upload popup shown in  ().  is an illustrative graphical user interface showing an exemplary Select File to Upload popup for a web application built on a system configured according the principles of the disclosure, generally denoted by . The Select File to Upload File popup  may include the following:\n\n","After navigating to and selecting a file to upload, the user may click Open in the action button section (). The system may initiate the upload process and may return the user to the Add File Popup shown in  (). The user may then click Save in the Action Button section (), and the system may create the file entity, create the substitution relationship designating the uploaded file as a new version, and other required relationships required to add it as a new version of the file and add it to the folder as shown in ) for which the Add File button () was clicked.","Download File","When Viewing File Information in the Action and Detail section () as shown in  () the user may choose to Download a file and the system retrieve the file from the information for the download. The user may begin the download process by clicking the Download Latest button in the Action and Details Pane (). Note that a similar process may be followed to download other versions of a file but are not described. Clicking the Download Latest button in the Action and Details Pane () may result in the display of the Download File popup shown in  ().  is an illustrative graphical user interface showing an exemplary Download File popup for a web application built on a system configured according the principles of the disclosure, generally denoted by . The Download File popup  may include the following:\n\n","After selecting the folder in which to store the downloaded file, the user may click Save in the action button section (). The system may initiate the download and may return the user to the File Detail View shown in  ().","View Message","To view a Message, a user may log in to a web application built on a system configured according to the principles of the disclosure using a page similar to the Login page shown in  (), after which the user may view a My Networks page such as that shown in  (). The user may access a network by clicking on a Network Name, and the Network Home page shown in  () may be displayed. The pages associated with  (),  (), and  () have been described in other sections of this specification.","A user may view messages in the Inbox in the Personal Folders section or the Group Folders section using a similar process. In this description, the process that may be used to view a message, and its corresponding message entity, in the Personal Folders section is described.","To view a message that is contained in the Inbox in the Personal folder section, the user may click on arrow to the left of Inbox or click directly on Inbox in the Personal Folders section () of the Network Home page shown in  (). After clicking on Inbox, the display may update to show additional inboxes contained in the main Inbox folder. After clicking an Inbox of interest, messages in the Inbox may be displayed in the List Pane ().",{"@attributes":{"id":"p-0478","num":"1256"},"figref":"FIG. 90","b":["9000","9000","7700","9055","9030","9060","9065","9040","9000"],"ul":{"@attributes":{"id":"ul0256","list-style":"none"},"li":{"@attributes":{"id":"ul0256-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0257","list-style":"none"},"li":["A header section (): a header section typically consistent across all pages in a web site, may display a logo or other identifier, list the Company or Organization Name and a Tag Line, provide links to general pages such as about, contacts, help, for more information, the name of the network or node with which the page the user is viewing is associated, link or button to logout of the application, and the like.","A menu\/navigation bar (): a menu or navigation bar may include additional links that when clicked, may display to the user other pages of the application.","A shortcut\/secondary navigation bar (): a shortcut\/secondary navigation bar may include additional buttons or icons that provide easier access to specific features of an application.","A body section (): a body section of a web page typically includes the content, controls, elements, and other features that provide the primary functionality for a page.","A Personal Folders section (): A section of the page that may display a file explorer view of the user's documents organized into folders and subfolders, inbox containing messages sent to the user, and outbox containing message sent by the user are displayed. The user may click on the triangle to the left of any of the elements in the Personal Folders section () to show an expanded view of the contents. In  (), the Gadget Project Inbox () of the Inbox Folder () is selected. Each of these Inbox Folders may be entities related to each other through a series of Containment Relationship Entities.","A Group Folders section (): A section of the page that may display a file explorer view of the content related to Group entities available the user. The Group entities may be instantiated from a Form, and that Form may include relations that linked to content such as document(s), folder(s), inbox(es), and outbox(es), primarily through Containment Relationship Entities instantiated from the Containment Relationship Form ().","A List Pane (): The List Pane () may typically display a listing of the collection of entities associated with the entity clicked in the Personal Folder section () or Group Folder section (). In  (), selection of the Gadget Project Inbox () in the Personal Folders section () may result in the List Pane () displaying the list of messages associated with the Gadget Project Inbox () through Containment Relationship Entities and other Entities.","An Action and Detail Pane (): The Action and Detail Pane () may typically provide a list of buttons or link that can be clicked to perform an action on the entity selected in the Personal Folder section (), Group Folder section (), or List Pane (). In  () selection of the message with the subject \u201cBudget attached\u201d () in the List Pane () may result in the Action and Detail Pane displaying:","Action buttons () to Reply, Reply to All, Forward, or Delete a message.","Details including the name of the sender of the message, the recipients of the message, the date of the message, attachments to the message, and the text of the message, and other information.","A footer section (): a footer section on a web typically includes other general content and link that are less important, such as the copyright information, link to a privacy statement, the name of the user logged in and accessing the page, and the like."]}}}},"In  (), selection of the message with the subject \u201cBudget attached\u201d () in the List Pane () may result in the Action and Detail Pane displaying the message entity and information associated with the message entity through its relations and relationships.","Create Message","To create a Message, a user may log in to a web application built on a system configured according to the principles of the disclosure using a page similar to the Login page shown in  (), after which the user may view a My Networks page such as that shown in  (). The user may access a network by clicking on a Network Name, and the Network Home page shown in  () may be displayed. The pages associated with  (),  (), and  () have been described in other sections of this specification.","Creating a Message on a Network may instantiate a new entity from the Form that defines a Message in a web application built on a system configured according to the principles of the disclosure. In addition, the message may be streamed form one node to another node, depending on the node with which the message recipients are associated. To create a Message, the user may click on the Create Message button in the in the Shortcut\/Secondary Navigation bar () on the Network Home page (). This may result in the display of the Create Message popup shown in  ().  is an illustrative graphical user interface showing an exemplary Create Message popup for a web application built on a system configured according the principles of the disclosure, generally denoted by . This Create Message popup  may include:\n\n","The user may enter the message subject and message text, and may also wish to select recipients for the message. The user may click Address Book in the Acton buttons section () and this may result in the display of the Address Book popup shown in  ().  is an illustrative graphical user interface showing an exemplary Address Book popup for a web application built on a system configured according the principles of the disclosure, generally denoted by . This Address Book popup  may include the following:\n\n","After selecting existing contacts and\/or hand entering email addresses, the user may click the Save Selections button () to save the selections and return to the Create Message popup shown in  (). A user may add an attachment to a message by clicking the Attach File\/Folder action button on the Create message popup (). After clicking, the Attach Files and Folders popup shown in  () may be displayed.  is an illustrative graphical user interface showing an exemplary Attach Files and Folders popup for a web application built on a system configured according the principles of the disclosure, generally denoted by . This Address Book popup  may include the following:\n\n","After selecting the file(s) and or folder(s) to attached, the user may click the Attach action button () and the system may initiate the attachment process and display the Create message Popup ().","After completing all selections and entries, the user may Send the message by clicking the Send action button (). The system may create the message entity and any required relationships. If recipients are located on a different node the message entity, any attachments, and any appropriate relationship entities may be streamed to another node.","Share File or Folder","A user may begin the process of sharing a file by clicking on the triangle or other icon, or directly on folder names in the Personal Folders section () or Group Folders section () as shown in  () File Detail View. The user may begin the process of sharing a file by clicking on the triangle or other icon, or directly on folder names in the Personal Folders section () or Group Folders section (). The list of folders associated with each folder will be displayed. The files in a selected folder may also be displayed in the List Pane (). The user may click on the name of the file to be shared in the List Pane (). Selecting a file populates that Action and Details section () for the file. The user may then click the Share File action button (). The selection of the Share File button may result in the display of the Share Options popup shown in  ().  is an illustrative graphical user interface showing an exemplary Share Options popup for a web application built on a system configured according the principles of the disclosure, generally denoted by . The Share Option popup  may include the following:\n\n","A user may begin the process of sharing a folder by clicking on the triangle or other icon, or directly on folder names in the Personal Folders section () or Group Folders section () as shown in  Group Folders Expanded View. The list of folders associated with a selected folder will be displayed. This view would be similar for both selected Group Folders of selected Personal Folders. After locating and clicking to highlight a folder to be shared, the user may click the Share action button (). The selection of the Share button may result in the display of the Share Options popup shown in  ().  is an illustrative graphical user interface showing an exemplary Share Options popup for a web application built on a system configured according the principles of the disclosure, generally denoted by . The Share Option popup  may include the following:\n\n","After selecting a file or folder of interest, the user may click the Share File button in the Action and Details Pane shown in  () or the Share Folder button in the Action and Details pane as shown in  (). The selection of the Share button may result in the display of the Share Options popup shown in  ().  is an illustrative graphical user interface showing an exemplary Share Options popup for a web application built on a system configured according the principles of the disclosure, generally denoted by . The Share Option popup  may include the following:\n\n","If the user chooses to share the File or Folder as an attachment to a message (), the Create Message popup shown in  () and the process and option described previously would follow, with the exception that the message Attachments listing () would already be populated with the selected file(s) and\/or folder(s). Depending on the node on which the user the folder is being shared has a user account, the file entity and related entities, or folder entity and related entities (which may include files and additional folders) may be copied form one information stream to another information stream, streamed form one node to another node, and appended or merged with the information stream at the other node.","If the user chooses to share the File or Folder by copying it to a folder (), a popup similar to that shown in and described in  (), except that the selected file or folder would be copied rather than moved.","All flow diagrams herein (including , , A, B, , , , B, ) and any drawing showing relational type constructs (including , -, , , , , A-, , , A, B, , A, -) may equally represent a high-level block diagram of computer based components of the invention implementing the steps thereof. The Figures showing relational type constructs (such as , -, , , , , A-, , , A, B, , A, -) also represent steps for creating the respective relational type constructs. The steps and\/or components may be implemented as computer logic or computer code in combination with the appropriate computing hardware. This computer program code or computer logic may be stored on storage media such as a diskette, hard disk, CD-ROM, DVD-ROM or tape, as well as a memory storage device or collection of memory storage devices such as read-only memory (ROM) or random access memory (RAM), for example. Additionally, the computer program code can be transferred to a workstation over the Internet or some other type of network. The computer code may be a computer program product that is stored on a non-transitory computer readable medium.","While the invention has been described in this disclosure by way of illustrative examples, those skilled in the art will recognize that the invention can be practiced with modifications and in the spirit and scope of the appended claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The accompanying drawings, which are included to provide a further understanding of the invention, are incorporated in and constitute a part of this specification, illustrate aspects of the invention and together with the detailed description serve to explain the principles of the invention. No attempt is made to show structural details of the invention in more detail than may be necessary for a fundamental understanding of the invention and the various ways in which it may be practiced. In the drawings:",{"@attributes":{"id":"p-0022","num":"0043"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0023","num":"0044"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0024","num":"0045"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0025","num":"0046"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0026","num":"0047"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0027","num":"0048"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0028","num":"0049"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0029","num":"0050"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0030","num":"0051"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0031","num":"0052"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0032","num":"0053"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0033","num":"0054"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0034","num":"0055"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0035","num":"0056"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0036","num":"0057"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0037","num":"0058"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0038","num":"0059"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0039","num":"0060"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0040","num":"0061"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0041","num":"0062"},"figref":"FIG. 20"},{"@attributes":{"id":"p-0042","num":"0063"},"figref":"FIG. 21"},{"@attributes":{"id":"p-0043","num":"0064"},"figref":"FIG. 22"},{"@attributes":{"id":"p-0044","num":"0065"},"figref":"FIG. 23"},{"@attributes":{"id":"p-0045","num":"0066"},"figref":"FIG. 24"},{"@attributes":{"id":"p-0046","num":"0067"},"figref":"FIG. 25"},{"@attributes":{"id":"p-0047","num":"0068"},"figref":"FIG. 26"},{"@attributes":{"id":"p-0048","num":"0069"},"figref":"FIG. 27"},{"@attributes":{"id":"p-0049","num":"0070"},"figref":"FIG. 28"},{"@attributes":{"id":"p-0050","num":"0071"},"figref":"FIG. 29"},{"@attributes":{"id":"p-0051","num":"0072"},"figref":"FIG. 30"},{"@attributes":{"id":"p-0052","num":"0073"},"figref":"FIG. 31"},{"@attributes":{"id":"p-0053","num":"0074"},"figref":"FIG. 32"},{"@attributes":{"id":"p-0054","num":"0075"},"figref":"FIG. 33"},{"@attributes":{"id":"p-0055","num":"0076"},"figref":"FIG. 34"},{"@attributes":{"id":"p-0056","num":"0077"},"figref":"FIG. 35"},{"@attributes":{"id":"p-0057","num":"0078"},"figref":"FIG. 36"},{"@attributes":{"id":"p-0058","num":"0079"},"figref":"FIG. 37"},{"@attributes":{"id":"p-0059","num":"0080"},"figref":"FIG. 38"},{"@attributes":{"id":"p-0060","num":"0081"},"figref":"FIG. 39"},{"@attributes":{"id":"p-0061","num":"0082"},"figref":"FIG. 40"},{"@attributes":{"id":"p-0062","num":"0083"},"figref":"FIG. 41"},{"@attributes":{"id":"p-0063","num":"0084"},"figref":"FIGS. 42A and 42B"},{"@attributes":{"id":"p-0064","num":"0085"},"figref":"FIG. 43A"},{"@attributes":{"id":"p-0065","num":"0086"},"figref":["FIG. 43B","FIG. 43A"]},{"@attributes":{"id":"p-0066","num":"0087"},"figref":"FIG. 44"},{"@attributes":{"id":"p-0067","num":"0088"},"figref":"FIG. 45"},{"@attributes":{"id":"p-0068","num":"0089"},"figref":"FIG. 46A"},{"@attributes":{"id":"p-0069","num":"0090"},"figref":"FIG. 46B"},{"@attributes":{"id":"p-0070","num":"0091"},"figref":"FIG. 47"},{"@attributes":{"id":"p-0071","num":"0092"},"figref":"FIG. 48"},{"@attributes":{"id":"p-0072","num":"0093"},"figref":"FIG. 49"},{"@attributes":{"id":"p-0073","num":"0094"},"figref":"FIG. 50"},{"@attributes":{"id":"p-0074","num":"0095"},"figref":"FIG. 51A"},{"@attributes":{"id":"p-0075","num":"0096"},"figref":"FIG. 51B"},{"@attributes":{"id":"p-0076","num":"0097"},"figref":"FIG. 52"},{"@attributes":{"id":"p-0077","num":"0098"},"figref":"FIG. 53"},{"@attributes":{"id":"p-0078","num":"0099"},"figref":"FIG. 54"},{"@attributes":{"id":"p-0079","num":"0100"},"figref":"FIG. 55A"},{"@attributes":{"id":"p-0080","num":"0101"},"figref":"FIG. 55B"},{"@attributes":{"id":"p-0081","num":"0102"},"figref":"FIG. 56"},{"@attributes":{"id":"p-0082","num":"0103"},"figref":"FIG. 57"},{"@attributes":{"id":"p-0083","num":"0104"},"figref":"FIG. 58"},{"@attributes":{"id":"p-0084","num":"0105"},"figref":"FIG. 59"},{"@attributes":{"id":"p-0085","num":"0106"},"figref":"FIG. 60"},{"@attributes":{"id":"p-0086","num":"0107"},"figref":"FIG. 61"},{"@attributes":{"id":"p-0087","num":"0108"},"figref":"FIG. 62"},{"@attributes":{"id":"p-0088","num":"0109"},"figref":"FIG. 63"},{"@attributes":{"id":"p-0089","num":"0110"},"figref":"FIG. 64"},{"@attributes":{"id":"p-0090","num":"0111"},"figref":"FIG. 65"},{"@attributes":{"id":"p-0091","num":"0112"},"figref":"FIG. 66"},{"@attributes":{"id":"p-0092","num":"0113"},"figref":"FIG. 67"},{"@attributes":{"id":"p-0093","num":"0114"},"figref":"FIG. 68"},{"@attributes":{"id":"p-0094","num":"0115"},"figref":"FIG. 69"},{"@attributes":{"id":"p-0095","num":"0116"},"figref":"FIG. 70"},{"@attributes":{"id":"p-0096","num":"0117"},"figref":"FIG. 71"},{"@attributes":{"id":"p-0097","num":"0118"},"figref":"FIG. 72"},{"@attributes":{"id":"p-0098","num":"0119"},"figref":"FIG. 73"},{"@attributes":{"id":"p-0099","num":"0120"},"figref":"FIG. 74"},{"@attributes":{"id":"p-0100","num":"0121"},"figref":"FIG. 75"},{"@attributes":{"id":"p-0101","num":"0122"},"figref":"FIG. 76"},{"@attributes":{"id":"p-0102","num":"0123"},"figref":"FIG. 77"},{"@attributes":{"id":"p-0103","num":"0124"},"figref":"FIG. 78"},{"@attributes":{"id":"p-0104","num":"0125"},"figref":"FIG. 79"},{"@attributes":{"id":"p-0105","num":"0126"},"figref":"FIG. 80"},{"@attributes":{"id":"p-0106","num":"0127"},"figref":"FIG. 81"},{"@attributes":{"id":"p-0107","num":"0128"},"figref":"FIG. 82"},{"@attributes":{"id":"p-0108","num":"0129"},"figref":"FIG. 83"},{"@attributes":{"id":"p-0109","num":"0130"},"figref":"FIG. 84"},{"@attributes":{"id":"p-0110","num":"0131"},"figref":"FIG. 85"},{"@attributes":{"id":"p-0111","num":"0132"},"figref":"FIG. 86"},{"@attributes":{"id":"p-0112","num":"0133"},"figref":"FIG. 87"},{"@attributes":{"id":"p-0113","num":"0134"},"figref":"FIG. 88"},{"@attributes":{"id":"p-0114","num":"0135"},"figref":"FIG. 89"},{"@attributes":{"id":"p-0115","num":"0136"},"figref":"FIG. 90"},{"@attributes":{"id":"p-0116","num":"0137"},"figref":"FIG. 91"},{"@attributes":{"id":"p-0117","num":"0138"},"figref":"FIG. 92"},{"@attributes":{"id":"p-0118","num":"0139"},"figref":"FIG. 93"},{"@attributes":{"id":"p-0119","num":"0140"},"figref":"FIG. 94"}]},"DETDESC":[{},{}]}
