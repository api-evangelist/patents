---
title: Event management systems and methods for the distribution of motion control commands
abstract: A motion control system for controlling a target device to perform a desired motion operation. The motion control system comprises at least one motion event provider, a motion event manager, and a motion control component. The motion event provider is configured to generate at least one event token upon the occurrence of at least one predetermined event. The event token is associated with at least one motion command. The motion event manager receives the at least one event token. The motion control component is adapted to transmit to the target device a control command based on the at least one motion command associated with the event token received by the motion event manager.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07031798&OS=07031798&RS=07031798
owner: Roy-G-Biv Corporation
number: 07031798
owner_city: Bingen
owner_country: US
publication_date: 20020211
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATIONS","TECHNICAL FIELD","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["This application claims priority of U.S. Provisional Application Ser. No. 60\/267,645 filed Feb. 9, 2001.","The present invention relates to motion control systems and, more specifically, to an event management system optimized for the processing and distribution of motion control commands for a motion control device.","Electromechanical systems are used in numerous environments to translate electrical signals in mechanical movement. As examples, factory automation systems, toys, appliances, and the like all may use one or more electromechanical transducers that move in response to electrical control signals.","Typically, an application programmer familiar with a specific environment creates an application program defining a desired sequence of movements. U.S. Pat. Nos. 5,691,897, 5,867,385, and 6,209,037 to Brown et al. disclose systems and methods for generating, processing, and\/or distributing control commands to one or more motion control devices based on such an application program.","The present invention may be embodied as a part of an overall motion control system as described in the Brown et al. patents and will be described herein in that context. However, as described below, the principles of the present invention may have broader application to other motion control systems and methods, and the scope of the present invention should be determined by the claims appended hereto and not the following detailed description.","A motion control system for controlling a target device to perform a desired motion operation. The motion control system comprises at least one motion event provider, a motion event manager, and a motion control component. The motion event provider is configured to generate at least one event token upon the occurrence of at least one predetermined event The event token is associated with at least one motion command. The motion event manager receives the at least one event token. The motion event manager uses the motion control component to transmit to the target device a control command based on the at least one motion command associated with the event token received by the motion event manager.","Referring initially to , depicted therein is a motion control system  constructed in accordance with, and embodying, the principles of the present invention. The motion control system  is an event-based system used to control, configure, and query one or more motion based devices or machines such as indicated by reference character  in the drawing. The motion based devices or machines  will be referred to herein as the target device.","In the following discussion, the components or objects that form the motion control system  and the basic operation of the system  will first be described. After that will follow a discussion of the interaction between those objects and several detailed scenarios of typical actions of this system  .","Referring initially to  of the drawing, it can be seen that the motion control system  comprises the motion based machine or device , a motion event manager , one or more motion event provider objects , a motion event interface , a motion web site , and a media creation tool .","The system  is adapted to be run on a general purpose computer platform comprising computer hardware and an operating system . The exemplary operating system  is a Windows variant and comprises a registry .","The web site  and media creation tool  provide access to one or more motion media files . The motion media files  contain what will be referred to herein as motion media.","The term \u201cmotion media\u201d includes motion scripts, motion application programs, and\/or individual motion instructions capable of causing the target device  to perform a desired motion operation comprising a discrete movement or sequence of movements.","The motion media comprises what will be referred to as motion commands. The term \u201cmotion commands\u201d will be used herein to refer to both control commands and media commands associated with a desired motion operation. The term \u201ccontrol commands\u201d as used herein refers to device-specific commands that may be directly run by a target device to obtain a desired motion operation. The term \u201cmedia commands\u201d used herein refers to machine independent instructions that generically define a desired motion operation. Normally, media commands are converted into control commands before the target device executes the desired motion operation corresponding to a particular media command or set of media commands. The term \u201capplication program\u201d will be used to refer to a set of control and\/or media commands associated with a sequence of discrete movements.","The motion event manager  comprises a motion control component  and an event handling component . The motion event interface  further comprises a event provider configuration control  and a media view control .","The motion control system  operates basically as follows. The motion event providers  generate what will be referred to as event tokens based on the occurrence of a predetermined event. The event token is associated with the predetermined event in advance and thus identifies the predetermined event. The event token may also contain additional information such as the source of the predetermined event, parameters associated with the predetermined event, and the like.","The event tokens are sent to the motion event manager . The motion event providers  and motion event manager  run in separate processes and could perhaps run on separate physical machines connected over a network. The motion event providers  and motion event manager  thus use the system for the inter-process communication provided by the operating system to transmit the event tokens from the event providers  to the motion event manager .","The motion event manager  notifies the motion control component  when the event token is received and the identity of the event token. The action taken by the motion control component  upon receipt of an event token depends upon the nature of the event token. The received event token may contain or identify a particular control command, and the motion control component  can simply pass that control command to the target device . The received event token may contain or identify a particular media command, in which case the motion control component  may be required to convert the media command into a control command capable of being run by the target device . Another event token may start, stop, or otherwise control a separate application program run by the motion control component .","In the exemplary system , the association of motion media with event tokens is preferably made by the motion event manager . This association is typically represented by a table, spreadsheet, or other data storage means capable of defining relationships between event tokens and motion media. Upon receipt of each event token, the motion event manager  will identify the motion media previously associated with the received token and send the identified motion media to the motion control component  for control of the target device .","With the foregoing understanding of the basic operation of the system , the details of this exemplary motion control system  will now be described.","The motion event manager  handles the creation of each event provider  installed on the system by creating in-proc providers or injecting other providers into their target processes. The event manager  also catches events fired from each provider  and initiates the appropriate motion request for each event. In the exemplary system , the event manager  is the only object that communicates directly with the motion control component , as will be described in further detail below. The exemplary event manager  is accessible by double clicking its icon in the Windows System Tray in a conventional manner.","The purpose of the event handling component  is to handle the inter-process communications between the motion event manager  and the motion event providers . The exemplary event handling component  is or may be a conventional software object referred to as a message pump.","The motion event provider objects  are individually designed to monitor user configurable events from a given source. The exemplary system  employs two types of motion event providers : simple in-proc servers hosted by the motion event manager  and specialty DLLs that are injected into a target process to monitor event cases. Each motion event provider object  also contains an event configuration control  that, as will be described below, allows a user to configure all events supported by the motion event provider objects . The motion event provider objects  notify the motion event manager  of each event caught by the objects .","The motion event manager  and motion control component  operate together to allow interaction between the motion event providers  and the target device .","The motion control component  may be or incorporate parts of a software system as disclosed, for example, in U.S. Pat. Nos. 5,691,897 and 5,867,385. The systems disclosed in the '897 and '385 patents are capable of generating device-specific control commands based on hardware independent media commands written to a predetermined application programming interface.","As an alternative, the motion control component  may act as a conduit that passes device-specific control commands and query responses between the motion event providers  and the target device . A motion control component implemented in this manner would not convert between hardware independent media commands and device specific control commands.","A preferred implementation of the motion control component  would be to be for the component  to function in both a translation mode and in a pass-through mode. In the translation mode, the component  converts media commands into control commands. In the pass-through mode, the component  simply passes control commands from the motion event providers  to the target devices . In either mode, query responses are returned from the target devices  to the event provider  in an appropriate format.","The motion event configuration interface  is preferably a visual interface displayed on a screen to allow a user to configure all motion event providers  installed on the system . The exemplary interface  also provides access to the motion web site  where new motion media and motion event providers  may be downloaded and installed.","As will be described in more detail below, the configuration options allowed by the interface  include the ability to enable\/disable event providers  and map motion media to particular events supported by each provider . The interface  also provides access to the motion web site , allowing for new motion media and motion event providers  to be downloaded and installed onto the current system.","Each motion event provider  contains a visual configuration control  that allows the user to configure the events supported by each provider . The exemplary configuration controls  use the media view control object  to gain access to the available motion media in the motion media file  that can be mapped to each available event.","These controls may also be configured to allow the user to add new, customized events to the motion event providers . The dynamic events can be defined using parameters such as text (usernames, messages, email, etc.), date\/time, or any other parameter particular to an event providers event source.","The media view control object  provides access to all installed motion media scripts as represented by the motion media file . Preferably, the media view control object  displays a conventional browse\/select dialog to allow identification and selection of the available motion media. This object  is used by the event provider configuration controls  and allows the configuration controls  to remain independent of the motion media format.","The media creation tool application  allows the user to customize and\/or create motion media. This application  preferably implements a graphical, easier to use, front-end user interface design.","The motion web site  provides a location for the user to download new motion media as well as new and\/or updated motion event providers . The motion media is preferably stored in a single meta file. New motion media downloaded from the motion web site  will be added to this meta file.","The present invention is preferably embodied using the Windows registry; typically, a component category is created for each of the motion event providers , allowing the motion event manager  to enumerate all providers  installed on the system. Primary event sources  are user actions (in any active application supported via a motion event provider) and operating system tasks.","With the foregoing understanding of the modules that form the exemplary system , various scenarios in which these modules typically interact will now be described.","Referring now to , depicted therein is the scenario describing the startup process of the motion event manager  of the system . Each of the steps of this startup process will now be described with reference to .","The motion event manager  process  begins on system startup. The motion event manager  process  next queries the MOTION_EVENT_PROVIDER component category in the Windows Registry to enumerate all motion event providers  installed on the system.","Third, the registry entry of each of the event providers  contains startup information indicating if the particular event provider is either a standard in-proc provider or a specialty provider that is injected into a target process to monitor event conditions.","Fourth, the motion event manger  creates a new instance of each provider . If the event provider  is a specialty provider that is injected into a target application process, the event manger  will read the target-process information from the provider's registry entry, find the target process, and perform the DLL-injection. If the target process is not active, the motion event manager  will continually monitor the creation of new applications, and perform the injection when\/if the requested application is launched.","Fifth, once the event providers  are created, the motion event manager  will send the appropriate initialization information to each provider , including callback information to allow the event providers  to post event messages back to the event manager .","Finally, the event provider  reads initialize message data and establish the necessary event syncs to monitor the events. The initialize message data includes a registry key identifying the location of the event configurations and preferences as last set by the motion event configuration interface  or the default installed set.","Referring now to , depicted therein is the DLL injection scenario map. This scenario describes the process of injecting a motion event provider DLL into the address space of a target application.","As shown in , the first step of this process is for the motion event manager  to determine which process into which the motion event provider  must be injected based on the registry entry of the provider .","Once the target process has been identified, the next step is for the event manager  to install a Windows message hook in the target process. This causes the event provider DLL to be loaded into the target address space of the target process. The event provider DLL has now been loaded into the required process, and will now wait for the \u201cinitialize\u201d message from the motion event provider .","Referring now to , depicted therein is the motion event configuration scenario map. This scenario map describes the process of configuring motion events of each of the motion event providers .","First, the user launches the motion event configuration interface  from system tray interface of the motion event manager .","Each event provider object  supports a custom visual control  that can be used to edit the object's supported events. The event configuration interface  creates and hosts these visual controls  for the user.","Next, when the event provider configuration control  is created and initialized, it will receive the location in the Windows Registry  of its persisted event data, which will be loaded into the control .","Next, the user will select an event provider  to configure. Individual events may be mapped to motion actions, and particular events (as well as the entire event provider itself) may be deactivated if desired. As noted above, these event configuration controls  may also provide the means to add additional, customized events based on input user parameters (custom text strings, buddy chat names, email messages, etc).","When the user selects an event to configure, the event provider configuration control  will defer to the media view control object . The media view control object  displays all available motion media via a dialog box, allowing the user to make a selection.","Finally, once the user makes a motion media selection, the media view control object  returns data back to the event provider configuration control object  (including human-readable description text of the event for display as well as a data token which can later be used to identify media selection). The configuration control object  then persists this information to the Windows Registry .","Referring now to , depicted therein is a motion event scenario map. This scenario describes the process of handling a motion event.","The scenario depicted in  begins whenever an event occurs. The occurrence of an event may be caused from a user action, operating system event, or an event situation monitored in a third-party application.","The event provider  then fires a event token associated with this event to the event manager . The event token has previously been stored in the registry during the event configuration process. If the provider  requires queried data to be returned, the provider  will also pass the necessary callback data to the event manager .","The event manager  next receives the event and passes the requested media information to the motion control component . The motion control component  then executes the specified motion media on the target motion device .","Finally, if a query action was requested, the motion control component  will return the appropriate data. The motion event manger  will send the data through the specified event provider callback mechanism.","Depicted in  is a motion web site scenario map. The scenario of  describes how a user may obtain new motion media and motion event providers  from the motion web site .","This process may be started when users visit the motion web site  to browse currently available motion event providers  and new motion media. In , the reference character is used to represent a motion media file stored locally by the system , while the reference character  represents a motion media file stored at a remote location.","Next, the user selects the desired provider\/media download option, and the new software is installed into the motion event manager  including the motion control component .","The next time the motion event configuration interface  is launched, the user will be able to configure the new event provider  or motion media in the local motion media file ","Alternatively, users may download new event providers  and motion media directly from within the motion event Configuration dialog interface. This configuration dialog will provide the following options to the user: Download new Motion Media and\/or Download\/install new motion event providers . The user or the motion event manager  may also check for new versions of currently installed motion media and\/or event providers .","Next, the user selects the desired provide\/media download or update option, and the configuration dialog interface object  automatically downloads and installs the new software from the media web site .","Finally, once the new software is installed the configuration dialog  will automatically update to provide access to the new components and\/or media.","Referring now to , depicted therein is the system shutdown scenario map. This scenario describes the process of shutting down the exemplary event manager module  associated with the motion control component .","Upon operating system shutdown, the motion event manager  will prepare to terminate.","The event manager  next posts a shutdown message to each event provider  currently being managed by the manager . Specialty event providers  that have been injected into external processes may have already finished if the target process has been shutdown. In this case those event providers  would have already notified the event manager  that they are no longer available.","Each event provider  performs any required shutdown tasks.","Upon finishing any shutdown tasks, each provider  will notify the event manager  that the provider  is now finished.","Once the event manager  receives notifications that each of the event providers  managed thereby have been shutdown, the event manager  itself is now finished.","Referring now to , depicted therein is a scenario map illustrating the mapping of text to motion events. This scenario generally describes the mapping of text based event situations to motion.","The first step of this process is for a text based event situation to occur. This text could be one or more of the following: (a) a particular sub-string in an Instant Message or the entire message string itself; (b) an Instant Message sent from a target screen or \u2018buddy\u2019 name; (c) a text string converted from a speech-to-text engine installed on the user's machine; and\/or (d) an email message meeting previously configured criteria (Sent From, Subject, message content, etc). In the case of an event created using a peer-to-peer networked application such as Instant Messenger-type process, text is entered at a remote source application and sent as a text message to a receiving application.","The motion event provider  monitoring the specific text based event catches the event, and performs any pre-processing of the text required to identify the particular event. In the peer-to-peer application described above, a DLL functioning as the event provider  is injected into the receiving application; the DLL event provider  intercepts the message received by the receiving application and treats the received message as an event.","Once an event has been identified, the event provider  will lookup the corresponding motion event token as previously configured. As generally described above, the motion event tokens are pre-loaded upon initialization. In the peer-to-peer example described above, the DLL functioning as the event provider  sends the text message as part of the event token to the event manager  using a process-to-process communication system as generally described above.","After the event token containing the text message is sent to the motion event manager , the event manager  determines the type of event represented by the received token.","If the event manager  determines that the received event token corresponds to a text event, the event manager  next parses the text parameter from the event token. The motion event manager  looks up the motion media associated with the event type and event text parameter. The appropriate motion media is then sent to the motion control component  for execution on the target motion device  as described above with reference to .","The process described above with reference to  can also occur in the reverse. In particular, the event manager  uses the motion control component  to continually query the target device  for state information. When the state information meets certain parameters, the control component  causes the event manager to \u2018create\u2019 a new event (such as a text event) and send it to an event provider .","The event provider  in turn then causes the receiving application to sent a message to a remote peer-to-peer application; again, the receiving and remote peer-to-peer applications may be Instant Messenger compatible applications.","An example of the use of the present system to verify motion status would be for the event manager  to continually or periodically query the target device  through the motion control component  for status parameters that indicate a fault condition. Once a fault condition occurs, the event manager  builds a text message that describes the fault and then sends the text message to a remote application, such as an Instant Messenger user, using process-to-process communication system and the peer-to-peer networked application.","The following Table A describes the interface specifications for components of the exemplary motion control system  described above using the exemplary motion control component .",{"@attributes":{"id":"p-0089","num":"0088"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"105pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE A"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["compon-",{},{}]},{"entry":["ent","interface","method(s)\/description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["motion","IXMCEventProviderMgt","EnumerateProviders used by"]},{"entry":["event",{},"configuration dialog object to get"]},{"entry":["manager",{},"a list of all installed motion event"]},{"entry":["30",{},"providers 132"]},{"entry":[{},{},"EnableProvider( ) used to"]},{"entry":[{},{},"enable\/disable given event"]},{"entry":[{},{},"providers. will be called from the"]},{"entry":[{},{},"configuration dialog object"]},{"entry":[{},"IXMCEventScheme","GetSchemes( ) used by"]},{"entry":[{},{},"configuration dialog object to get"]},{"entry":[{},{},"current list of schemes on the"]},{"entry":[{},{},"system"]},{"entry":[{},{},"AddScheme( ) - used by"]},{"entry":[{},{},"configuration dialog object to add"]},{"entry":[{},{},"a new scheme"]},{"entry":[{},{},"RemoveScheme( ) - used by"]},{"entry":[{},{},"configuration dialog object to"]},{"entry":[{},{},"remove a given scheme"]},{"entry":[{},{},"RenameScheme( ) - used by"]},{"entry":[{},{},"configuration dialog object to"]},{"entry":[{},{},"rename a given scheme"]},{"entry":["Event","IXMCEventConfig","Initialize( ) - called by the"]},{"entry":["configura-",{},"configuration dialog object which"]},{"entry":["tion",{},"hosts this control, used to pass"]},{"entry":["controls",{},"required init data, such as 1)"]},{"entry":["158",{},"current registry location where"]},{"entry":[{},{},"event configuration data may be"]},{"entry":[{},{},"loaded\/persisted, 2) interface to"]},{"entry":[{},{},"the media view control 156,"]},{"entry":[{},{},"etc . . . "]},{"entry":["Media","IXMCMediaViewCtrl","method: SelectMedia( ) - called"]},{"entry":["View",{},"by each event configuration"]},{"entry":["Control",{},"control. This method will display"]},{"entry":["156",{},"a dialog to visualize all motion"]},{"entry":[{},{},"media available on the system"]},{"entry":[{},{},"and return a tokenized data"]},{"entry":[{},{},"param that can later identify the"]},{"entry":[{},{},"media item selected"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"In the following discussion, the details of a number of the exemplary components of the system  will now be described.","The Windows Registry  is used to persist event management with motion control configuration data.","Data associated with the motion event providers  is persisted to the Windows Registry  primarily to accommodate event provider DLLs that need to be injected into a target process, an environment where those DLLs may not be able to rely on standard COM storage alternatives.","At runtime, when the motion event manager  initializes an event provider, the provider will receive a location in the registry where it should read its previously configured event data.","At design time, when hosted within the motion event configuration interface , the event configuration controls  of the event providers  receive the registry location, and will persist configuration changes to that location.","Event providers will persist both standard (hard coded) and custom events to their registry storage location. Associated with each event will be the configured motion event token data, which the provider will use when firing event notifications back to the motion event manager .","The motion event manager  manages all registry locations for the event provider objects.","The event manager provides a mechanism to support different event schemes. This allows configurations unique for several different users, situations, or motion devices. When a new scheme is selected via the motion event configuration interface , the event manager  will pass the new scheme registry location to each event provider object , allowing access to the new scheme data. Each scheme will be located in a unique sub key under the primary event manager registry location.","The user interface components  and  of the system  may be implemented in many different forms. The motion event configuration control  is used to configure all motion event providers  installed on the system, as well as to provide access to the motion web site  where new motion media and motion providers may be downloaded and installed. The interface of the media creation tool  is a preferably graphical representation of the motion device or system, where simple drag-drop, click, and record operations will facilitate the creating and modification of motion media.","The system  is designed to be easily extendible via new motion event provider and motion media components. The system  is also capable of supporting any number of additional event sources with the addition of new motion event providers  by registering these new providers with the system . These event providers  can link to virtually any event source to a target system .","The motion media formats can be modified and extended without requiring changes to any event provider objects. For example, a XMCMediaCtrl object proxies the raw motion media format to the event providers. Accordingly, once the XMCMediaCtrl component is updated to handle any new media formats, the event providers  may, by design, make use of the changes.","Instead of triggering entire motion programs as described above with reference to , a motion program or media set may be streamed to the device  through the system . Whether or not and how the media plays may be controlled by captured events. For example, a media player may fire events based on different musical notes or tones. When such events are received, one media stream may be selected over another, thus causing the motion device  to perform different actions. This may also occur with the standard motion programs described above.","Very large motion programs may be downloaded in partial form and then either downloaded in full over time or as certain specified events occur in the system.","Similar to streaming media support, single motion operations may also be supported in which a specified event causes a single motion operation to take place immediately. One example of this would be an event that causes movement of one axis in the clockwise direction.","The present invention may be embodied in forms other than those described above. The scope of the present invention should thus be determined with reference to the following claims and not the foregoing exemplary detailed description."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF THE DRAWING","p":[{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4","b":"132"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 6","b":["132","136"]},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 7","FIG. 1"]},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
