---
title: Services for data sharing and synchronization
abstract: Systems and methods for sharing and synchronizing data using the addition of synchronization data to a feed that contains data items, and at least a node or endpoint that provides synchronization-related services to other endpoints, are disclosed. Such systems and methods, and client and service endpoints, may use the added synchronization data in multiple ways to share data, incorporate changes consistently, and resolve conflicts.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07933296&OS=07933296&RS=07933296
owner: Microsoft Corporation
number: 07933296
owner_city: Redmond
owner_country: US
publication_date: 20070302
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["Synchronizing and sharing data between multiple endpoints may be accomplished in a variety of ways. Many synchronization implementations require specific and perhaps not widely-accepted data interchange formats. The same or different synchronization implementations may be relatively complex, for example, in terms of the rules that synchronization endpoints must follow, the data that must be provided and exchanged when synchronizing, and so on. Some synchronization implementations may require particular networking topologies such as, for example, a hub and spoke arrangement; others may operate in a wide variety of topologies including peer-to-peer arrangements, with one or more centralized nodes, and so on.","The following presents a simplified summary of the disclosure in order to provide a basic understanding to the reader. This summary is not an extensive overview of the disclosure and does not identify key or critical elements of the invention or delineate the scope of the invention. Its sole purpose is to present some concepts disclosed herein in a simplified form as a prelude to the more detailed description that is presented later.","Described herein are various techniques and technologies directed toward sharing and synchronizing data using, in at least some implementations, the addition of synchronization data to a feed that contains data items, and at least one node or endpoint that provides synchronization-related services to other endpoints. The added synchronization data may be used in multiple ways by the service endpoint, as well as by client endpoints, to perform tasks such as incorporating changes in a consistent manner and resolving conflicts.","The present invention extends to various techniques and technologies directed toward sharing and synchronizing data using, in at least some implementations, the addition of synchronization data to a feed that contains data items, and at least one node or endpoint that provides synchronization-related services to other endpoints. More particularly, described herein are, among other things, methods, systems, and data structures that facilitate the synchronization of information through the use of at least one endpoint\u2014perhaps called a \u201cservice endpoint\u201d\u2014that provides one or more synchronization services to a variety of endpoints. The service endpoint and the client endpoints that use the service endpoint may use synchronization data that is part of feeds of data to share information, to incorporate changes in a consistent manner, and to resolve conflicts.","In general, in some implementations, synchronization of data may be implemented, at least in part, by the addition of particular data to a feed of data provided using a possibly widely accepted protocol like RSS (\u201cReally Simple Syndication\u201d or \u201cRich Site Summary\u201d). For example, in an exemplary implementation with a topology that consists of only two endpoints that communicate with each other, one endpoint might publish an RSS feed that contains some type or types of information. In perhaps one example, the feed might include calendar item information represented using a format like iCalendar or hCalendar, or some other format. The other endpoint might subscribe to the feed provided by the first endpoint and be notified when, for example, the first endpoint adds a new calendar item or changes an existing calendar item. In addition, a subscribing endpoint might publish its own feed, with the same data as is provided in the original publisher's feed and also with changes or additions made by the subscriber. The original publisher might then subscribe to this second feed. Through these mutual subscriptions, changes made by either endpoint may be reflected in the data maintained by both endpoints, enabling bidirectional synchronization. Multiple endpoints may participate and share the data by subscribing to at least one of the feeds provided by another endpoint and similarly publishing their own feed.","While endpoints may synchronize with each other in a direct fashion\u2014such as in the example described previously\u2014in some cases it may be beneficial to use one or more endpoints that provide additional services that may be useful when synchronizing data. For example, one or more endpoints that synchronize data might only be connected intermittently, might sometimes not have a public network address (perhaps when the endpoint is located behind a firewall, for example), or might be otherwise unable to provide a feed of data. In such a case, and in other cases, it may be beneficial to have at least one endpoint that is \u201calways on\u201d or that at least is available more often than endpoints with, for example, intermittent network connectivity. A more available endpoint might be, for example, located in a data center with redundant infrastructure. In practice, one endpoint might synchronize data with the available endpoint and then become unavailable, after which another endpoint may come online. Without the available endpoint, the second endpoint might not be able to receive changes made by the first endpoint. However, since the available endpoint exists, the second endpoint may synchronize with the available endpoint and thereby obtain changes made by the first endpoint.","In another example, one or more endpoints may not want to or be able to implement all of the functionality required to, for example, merge changes made by other endpoints. This may be the case, for example, when a client endpoint does not have the computing or development resources to easily implement such functionality, or for other reasons. In at least these or some other cases, at least some of the implementation and operation required for synchronization may be \u201coff-loaded\u201d or performed by another synchronization endpoint. The client endpoints that use this other synchronization endpoint might, for example, submit requests and then retrieve or receive responses, rather than have to implement particular synchronization functionality themselves.","In other examples, an endpoint might provide other additional functionality that might be useful when synchronizing data including, for example and without limitation, access control, authorization by particular identifying values or roles, centralized management and publishing of multiple feeds, and so on.","Turning now to , illustrated therein is an exemplary system  in which sharing and synchronization that uses services provided by an endpoint might be implemented. The exemplary system  contains the service endpoint . The exemplary system also contains endpoint A , endpoint B , endpoint C , and endpoint N . Each of the endpoints in this example might represent one or more general-purpose or dedicated computer systems, including server computers, desktop computers, laptop computers, workstation computers, mobile or cellular telephones, personal digital assistants (PDAs), and the like. In this example, at least some endpoints are shown as being associated with an application, such as application S , application A , application C , and application N . Some of the illustrated endpoints are shown as connected using some exemplary communication means , while other endpoints are shown connected to each other directly. Finally, this description of  may be made with reference to other figures. However, it should be understood that the elements described with reference to  are not intended to be limited to being used with the elements described with reference to other figures. In addition, while the exemplary diagram in  indicates particular elements, in some implementations not all of these elements may exist, and in some implementations additional elements may exist.","Generally speaking, a sharing relationship may exist between two endpoints. For example, a sharing relationship might exist between the service endpoint  and endpoint A , between endpoint A  and endpoint B , and so on. A particular sharing relationship generally relates to a set of data that is synchronized or shared and that comprises one or more data items, or simply \u201citems.\u201d","An endpoint in a sharing relationship may be a publisher, a subscriber, or both a publisher and a subscriber. A publisher may generally make available a \u201cfeed\u201d that contains information associated with the items being shared as part of the sharing relationship. A subscriber may be an endpoint that subscribes to a feed provided by a publisher. In the case where both endpoints in a sharing relationship are publishers and subscribers, each endpoint may make available a feed to which the other endpoint subscribes. Additionally, and as will be explained in more detail below, in some cases an endpoint may rely on another endpoint, including relying on the service endpoint , to perform various synchronization operations on its behalf, including merging changes and making changes available to other endpoints by publishing a feed.","In general, in at least some exemplary implementations an endpoint may make \u201clocal\u201d changes to items, where a \u201clocal\u201d change may be a change made on the particular endpoint for some reason, including changes made by users, by automated processes, and so on. Then, so the items being shared may be kept the same on subscribing endpoints, the local change may be published as part of a feed. Other endpoints that subscribe to the feed may \u201cmerge\u201d the changes exposed using the feed with their own local store of items. Other endpoints may also make local changes of their own, which may then be merged or incorporated by other endpoints. In at least some implementations, including those that use \u201cSimple Sharing Extensions\u201d (SSE), a local change might be made with operations similar to or the same as those described below, for example, with reference to . In the same or other implementations, merging may be accomplished using operations similar to or the same as, for example, those described with reference to .","In some cases, an endpoint may make a local change to an item and then provide an updated feed, or the change, to another endpoint. The other endpoint may perform, for example, a merge operation on behalf of the endpoint and ultimately produce an updated feed that includes the local change. The other endpoint may then make the feed available to the endpoint that made the change or to other endpoints. In such an implementation, the endpoint that makes the local change may not need to, for example, know how to merge changes from yet other endpoints. Instead, it may, for example, only need to understand how to incorporate its own local changes, and may rely on another endpoint\u2014which may be the service endpoint  in at least some implementations\u2014to merge its changes with changes made by other endpoints.","In some cases, the data synchronized between endpoints may be data used by one or more applications\u2014including application S , application A , application C , and application N \u2014that operate on or are associated in some fashion with the endpoints. An endpoint may have zero or more of such applications, including any number of applications.","In some cases, an application may be configured or implemented with at least some knowledge of how synchronization operates, and so may, for example, store or update information directly in one or more feeds. In other implementations, an application may have a limited knowledge of how data is synchronized, or in some cases even that data is synchronized at all. In at least some of these implementations, one or more intermediary layers, assisting executable code, or the like, may modify or otherwise translate information stored and used by an application into a format suitable for publishing or subscription using a feed. For example, suppose that application A  in some implementations comprises a personal information management (PIM) application that enables a user to maintain information that includes contact data. If the user shares or synchronizes some or all of their contact data, there may be executable code, for example, that produces or generates a feed that contains, among other things, the contact data the user is sharing or synchronizing. As just one example, the feed might represent the contact data using the hCard standard, the vCard standard, or any other format for representing contact data. When a user changes a particular contact using application A, at some point an updated feed may be generated that contains the change.","While the previous example relates to a feed that might contain data represented using a format like hCard or vCard, a feed may contain any type of data, including XML, XHTML, other text formats, binary data in one or more of a variety of formats, and so on. In some cases, the format or formats used to represent the data may be \u201crecognized,\u201d \u201cknown,\u201d or able to be interpreted by, for example, an endpoint that has a sharing relationship or that provides service functionality. In other cases at least some of the data communicated in a feed may be in a format that may not be recognized by one or more endpoints, services, applications, or the like. In the latter case, the endpoint, service, application, or the like, may in all or at least some cases still synchronize and share the information by, for example, reproducing the data that has the unrecognized format while processing the associated synchronization information according to any requirements of the synchronization protocol or technique in use.","The feed may itself contain shared or synchronized data, may contain data as well as references to data stored elsewhere, may contain only references to data stored elsewhere, and so on. In at least one example, where the feed is represented using a protocol like RSS, an element such as an \u201cenclosure\u201d element may be used to reference data that may not be contained by the feed itself.","It should be noted that an endpoint may still synchronize data even if it is not associated with an application that may change or even use or display that data in some form\u2014for example, endpoint B  might not change data, but might still synchronize the data. Similarly, the service endpoint  might in some cases have an application S  that uses the data outside of synchronization, but may, for example, in other cases only synchronize or perform synchronization operations for other endpoints. Furthermore, as was previously stated, while only a single application is shown for any particular endpoint, any number of applications may be associated with or implemented on a particular endpoint.","It is noted that not all endpoints must both publish a feed and subscribe to a corresponding feed. For example, some endpoints may only publish, but not subscribe, to a feed related to some particular set of data. Such endpoints may publish information about local changes made by that endpoint, but may not incorporate changes made by any other endpoint. Any other arrangement of publishing and subscribing actions may be contemplated or implemented depending on the requirements of the particular scenario or situation.","Note that, in some implementations, a particular set of two endpoints might have more than one sharing relationship if they share more than one set of data. In other implementations, a sharing relationship might be defined to include all of the data shared between two endpoints, even if it includes more than a single set or type of data.","In general, in some exemplary implementations, any of the endpoints illustrated in the exemplary system  might be an endpoint that participates in a sharing relationship with another endpoint. The particular type or purpose of an endpoint may not be relevant, as long as the endpoint can follow the necessary processes for sharing and synchronizing data, or rely on another endpoint to implement at least some of the processes for sharing and synchronizing data, as are described herein. Similarly, the manner in which an endpoint is connected to another endpoint may not generally be relevant, as long as both endpoints have some mechanism by which they can access feeds of data or publish feeds of data. Such mechanisms might consist of a network connection between two endpoints as might be illustrated, for example, by the connection between, among other endpoints, the service endpoint  and endpoint A , which are connected using the exemplary communication means . Generally, endpoints may be connected by any means by which data may be transmitted, including any type of network or any other kind of transfer mechanism, including the transfer of physical media, like a compact disc (CD) or flash memory drive. Such a connection might be illustrated by, for example, the connection between endpoint A  and endpoint B , or might be illustrated by the connection between, say, the service endpoint  and endpoint A , in the case where the exemplary communication means  includes the manual transfer of feeds of data.","While in some implementations sharing relationships exist between two endpoints, it is also possible for a particular set of items to be shared and synchronized with any number of endpoints. This may be accomplished through a variety of arrangements or topologies of endpoints. For example, suppose in the exemplary system  that all endpoints share and synchronize the same set of items. One arrangement in which this might be implemented might be one in which all of the endpoints synchronize items with the service endpoint . For example, endpoint A  might have a sharing relationship with the service endpoint for the set of items; endpoint B  might have a sharing relationship with the service endpoint for the same set of items, and so on, to endpoint N . In another arrangement, endpoint B might have a sharing relationship for a particular set of items with endpoint A. Endpoint A might then have a sharing relationship for the same set of items with the service endpoint. While in this latter example endpoint B does not have a direct sharing relationship with the service endpoint, changes made by endpoint B may still be synchronized with the service endpoint, as long as, for example, endpoint A has a sharing relationship for the same set of items with the service endpoint.","An endpoint may subscribe to and publish a variety of feeds, and the feeds may be represented using different formats, as introduced previously. Furthermore, items obtained from a feed that is represented using a particular format need not be published or further distributed using a feed or feeds that use that same format\u2014items may be published in any format supported or understood by the publisher. For example, an endpoint might subscribe to one feed that uses RSS and another feed that uses Atom. That same endpoint may then publish the same set of data, or any other set of data, using RSS, Atom, or any other type of feed format, independent of how the data was originally obtained or represented.","Finally, while the service endpoint  includes the term \u201cservice\u201d in its name, it should be noted that in at least some implementations a variety of the endpoints shown may perform \u201cservice\u201d operations on behalf of other endpoints or provide services to other endpoints. Furthermore, in some implementations more than one service endpoint may be available at a time and may be used by one or more client endpoints, as well as with one or more additional service endpoints (so that multiple service endpoints might have sharing relationships with each other, for example).","Turning now to , shown therein is an exemplary generalized operational flow  including various operations\u2014including merging data and storing data\u2014that may be performed when using services provided by a service endpoint. Operations that might be performed on an endpoint that uses services are shown in the \u201cclient endpoint\u201d column, while operations that might be performed by a service endpoint are shown in the \u201cservice endpoint\u201d column. The following description of  may be made with reference to other figures. However, it should be understood that the operational flow described with reference to  is not intended to be limited to being used with the elements described with reference to these other figures. In addition, while the exemplary operational flow of  indicates a particular order of execution, in one or more alternative embodiments the operations may be ordered differently. Furthermore, while the exemplary operational flow contains multiple steps, it should be recognized that in some implementations at least some of these operations may be combined or executed contemporaneously, and in the same or other implementations, some steps may not be executed.","As was introduced previously, and as is described in more detail below, for example with reference to  and subsequent figures, endpoints may in some cases synchronize data without the use of services provided by other endpoints. For example, in some implementations each endpoint in a two-way bi-directional synchronization relationship may make local changes to data that is synchronized. In some implementations, such local changes may be made, for example, using operations that are the same as or similar to those described below with reference to, for example, . When an endpoint makes a local change, the endpoint may update one or more feeds of data. The other endpoint may at some point retrieve, receive, or otherwise access the updated feed provided by the first endpoint and may merge the changes in the updated feed with its own local data. Merging may be performed, in at least some implementations, using at least some operations that are the same as or similar to those described below, for example, with reference to , , , and .","In some implementations and cases, however, an endpoint that makes a local change may use one or more services that in some cases might be provided by some other endpoint to perform at least some sharing or synchronization tasks. Some services and some manners in which such services may be accessed are described in more detail herein, especially with reference to , , and .","Returning to , in an exemplary implementation of operation , an endpoint may make a change to a local item in a data store accessible to the endpoint. This local change may in some cases include the addition of an entirely new item, or the deletion of an existing item, in addition to the modification of information for an existing item. As just one of many possible examples, where the stored and synchronized data includes, say, contact information, a user might use a PIM application to add a new contact, delete a contact, or modify a contact.","The endpoint that makes the local change in this operation may in some cases, including in this operational flow, be referred to as a \u201cclient endpoint,\u201d because the endpoint may be a client of services provided by some other endpoint, which may be referred to as a \u201cservice endpoint.\u201d However, the usage of these terms is done for the purposes of temporal identification only, and any endpoint may in general be a client of services provided by another endpoint. In some implementations, the same endpoint may be a \u201cclient endpoint\u201d in that it accesses services provided by another endpoint, and a \u201cservice endpoint\u201d in that it provides services to another endpoint, at the same time.","In an exemplary implementation of operation , a feed may be generated. In some cases, this generated feed may include the change made in operation . Continuing with the same example, in some implementations the feed may contain multiple elements or items, including perhaps one item or element for each contact that is shared or synchronized. In other implementations, the feed might only contain an item or particular element or elements for changes; items that have not been changed may not be part of the feed. As has been introduced previously and as discussed in more detail below, for example, with reference to , such a feed may be represented in a wide variety of formats, may include a wide variety of data, and so on. The local change may be represented in the feed using operations including those, for example, that are described below for execution when updating a local item, as in .","At this point, in at least some implementations, including at least some where individual endpoints make their feed accessible and perhaps perform their own merging of data from feeds they retrieve from other endpoints, the operational flow might end. That is, as the local change made in operation  is now published as part of a feed, other endpoints may access the published feed and merge any changes with their own associated data stores.","However, in some implementations, the endpoint that made the change may use one or more services provided by another endpoint. In an exemplary implementation of operation , the client endpoint may communicate a feed, including the feed generated in operation , to a service endpoint. The communicated feed might contain all items, or might contain some subset of items that are part of the sharing relationship, including only items that have been changed. Such communication may be accomplished in one or more of a variety of ways. As just one example, the client endpoint might initiate an HTTP POST request to a particular URL that might be associated with the service endpoint and might also be, for example, associated with the feed in question. The contents of the POST request might include the feed generated in operation . In other implementations, the generated feed may be communicated to the service endpoint in other ways, including through the use of other types of communications initiated by the client endpoint or communications initiated by the service endpoint or some other endpoint.","In at least one exemplary implementation of operation , the feed may be received by the service endpoint. For example, the service endpoint might receive an HTTP POST request initiated by the client endpoint, or might receive the feed in some other fashion. In some implementations, the received feed may be stored on the service endpoint and might be made available to, for example, other endpoints. For example, other endpoints may be able to send an HTTP GET request to the same URL to which the feed was posted and receive a copy of the feed in the response to their request. In the same or other implementations, the feed may undergo further processing on or associated with the service endpoint itself.","For example, in at least one implementation of operation , the service endpoint may merge a received feed\u2014including in some cases the feed received from the client endpoint in operation \u2014with one or more existing feeds or items in data stores. For example, suppose that the service endpoint maintains the set of items represented by the feed in a data store. In an example where the feed contains contact information, the service endpoint might maintain the contacts. It may do so in a variety of fashions, including as records in one or more databases, as a copy of the feed, and so on.","When a feed is received from another endpoint, the service endpoint may merge the contents of the feed or the changes communicated by the feed with the data it maintains in a data store. In at least some implementations, including those that use SSE, this merge operation may be performed using at least some operations that are the same as or similar to those described below, for example, with reference to , , , and . In the context of these other figures, and in at least some implementations, the feed received in operation  may be considered to be the \u201cforeign feed.\u201d Merging may involve, for example, examining the items in the incoming or foreign feed and performing a variety of operations on the service endpoint depending on the information in the feed and the service endpoint's data store or data stores. For example, when the feed includes an item that does not exist in a data store associated with the service endpoint, the service endpoint may create a new local item; when the feed includes changes to an item that already exists in a service endpoint data store, the service endpoint may examine how or if the local item should be updated (including perhaps identifying conflicts); and so on.","In some implementations, the execution of operation , as well as other operations, may vary so that, for example, the operation is executed differently depending on characteristics such as which client endpoint has communicated a feed. For example, a service endpoint might determine that merging the contents of a feed with its own data would cause one or more conflicts. This might be the case when, for example, some other client endpoint has previously made a change to the data maintained by the service endpoint, and the client endpoint that has communicated the feed being merged does not know of the change. In some implementations, and with some or particular client endpoints, a service endpoint might perform the merge and note the conflict. It might do so using exemplary conflict handling logic like that described below with reference to , , , and . In other implementations, or in the same implementation, and with other particular endpoints, the service might not merge the data communicated by the client endpoint if the merge operation would cause a conflict. Instead, the service endpoint might perform some other action including, for example, notifying the client endpoint that merging the update would cause a conflict. (In some cases, then, the client endpoint might attempt to avoid a conflict by retrieving an updated feed from the service endpoint and then changing and submitting the updated feed.) In some implementations, both behaviors may be implemented by the same service endpoint so that, for example, some client endpoints are \u201callowed\u201d to submit changes that cause conflicts while other client endpoints are not.","In an exemplary implementation of operation , the service endpoint may generate an updated feed that includes any changes made or identified, for example, when merging the received feed with the service endpoint's data. This updated feed may be generated in the same or similar fashion as the feed is generated, for example, in operation , or in some other fashion. For example, in some cases the feed may contain all of the items that are part of the sharing relationship, in other cases the feed may only contain items that were changed as part of the execution of operation , and so on. The feed may then be made accessible to other endpoints in a variety of ways.","Returning to operations that may be performed on or associated with a client endpoint, in an exemplary implementation of operation , the client endpoint may receive, retrieve, or otherwise access an updated feed generated by the service endpoint. In some cases this updated feed may be the same feed that was previously generated in operation . For example, in some implementations, the client endpoint may initiate an HTTP GET request\u2014perhaps to the same URL that may accept an HTTP POST request with the client endpoint's feed, or to some other URL\u2014and receive the updated feed in the response from the service endpoint. In some implementations, the client endpoint may provide additional information in a request including data such as a time associated in some fashion with the last time the client endpoint received the feed from the service endpoint. The service endpoint might then, for example, only return changes that were made since the previous communication. In other implementations, the client endpoint may receive or access the updated feed in some other fashion, including implementations where the service may \u201ccall back\u201d the client in some form, and so on.","Finally, in at least one exemplary implementation of operation , the client endpoint may update its local data store in some fashion, including through the use of the received and updated feed. For example, some client endpoints may actually store or maintain application data in a feed itself. In these cases, the client endpoint may simply store the retrieved feed. In other implementations, the client endpoint may perform a wide variety of general or possibly application-specific processing to integrate the information in the updated feed into one or more of the client endpoint's data stores.","It should be noted that while the operational flow described with reference to  is explained in terms of two endpoints, in at some implementations multiple client endpoints may, for example, interact with the same service endpoint. In some cases multiple client endpoints may be able to, for example, exchange data between themselves by using the service endpoint as an intermediary. For example, suppose that client endpoint A makes a local change and communicates the resulting feed to the service endpoint, which then first merges the changes from client endpoint A into a data store associated with the service endpoint, and then makes an updated feed accessible to other endpoints. Client endpoint B might then retrieve the updated feed, at which point client endpoint B would have access to the changes initially made by client endpoint A. In some cases, client endpoint B might then make its own changes and provide a feed to the service endpoint. After the service endpoint merges the changes from client endpoint B, client endpoint A could similarly receive client endpoint B's changes by retrieving the updated feed from the service endpoint.","While at least some of the operations described with reference to  refer to making changes by generating and communicating feeds to a service endpoint, in at least some implementations changes and other actions may be communicated to or performed by a service endpoint in one or more other fashions that may or may not use or require the communication of a feed. For example, rather than making a change locally, generating an updated feed, and communicating the updated feed to a service endpoint using a protocol like HTTP, a client endpoint might instead interact with the service endpoint and just, for example, communicate a change to be made to an item maintained by the service endpoint. The client endpoint, in just one example, might communicate such a request or change using something like a web service or other \u201cprogrammatic\u201d interface, or might interact with the service endpoint in any of a variety of other manners.","While merge operations are performed by a service endpoint in the operational flow previously discussed, there may be implementations that operate differently. For example, in some implementations, one or more client endpoints might perform merges locally and use the service endpoint for other services, including perhaps as a data store that is accessible to other endpoints. In at least some of such implementations, a client endpoint might maintain items locally, retrieve a feed from the service endpoint, and then\u2014locally, on the client endpoint\u2014merge any changes in the retrieved feed into its own data store. The client endpoint may then in some cases generate an updated feed and communicate the updated and generated feed to the service endpoint, where the updated feed might be stored and made accessible to other endpoints. In some implementations, some client endpoints may perform merge operations locally while other client endpoints may rely on a service endpoint to merge changes. In some cases this may be possible even when the client endpoints share and synchronize the same data using the same feed.","Turning now to , shown therein is an exemplary generalized operational flow  including additional various actions\u2014including general management and feed management actions\u2014that may be performed when using services provided by a service or other endpoint. Operations that might be performed on an endpoint that uses services are shown in the \u201cclient endpoint\u201d column, while operations that might be performed by a service endpoint are shown in the \u201cservice endpoint\u201d column. The following description of  may be made with reference to other figures. However, it should be understood that the operational flow described with reference to  is not intended to be limited to being used with the elements described with reference to these other figures. In addition, while the exemplary operational flow of  indicates a particular order of execution, in one or more alternative embodiments the operations may be ordered differently. Furthermore, while the exemplary operational flow contains multiple steps, it should be recognized that in some implementations at least some of these operations may be combined or executed contemporaneously, and in the same or other implementations, some steps may not be executed.","In general, it may be beneficial in at least some exemplary implementations to enable the management of data\u2014including in some cases one or more feeds\u2014that is in turn provided and managed by a service endpoint. For example, given a service endpoint that may provide multiple feeds, it may be desirable to provide functionality that enables an endpoint or other entity to manage the feeds accessible through the service endpoint.","In an exemplary implementation of operation , a client endpoint may initiate a management action. A wide variety of management actions are possible. For example, and without limitation, possible management actions include listing all feeds, retrieving detailed information about one or more feeds, creating a new feed, deleting a feed, and so on. As just one example, a client endpoint might use a \u201ccreate new feed\u201d action to indicate that the service endpoint should store and manage a new feed of data. Associated with the \u201ccreate new feed\u201d action, the client endpoint might provide additional information including, for example and without limitation: a name for the feed, a description of the feed, and so on. In some implementations, the client endpoint may also provide an initial feed document. (In other implementations, the same or some other client endpoint may provide an initial feed document at some other time or in some other fashion including, for example, in a similar fashion to that described previously with reference to the communicate feed to service operation  of .)","A client endpoint may initiate a management action in a variety of ways. For example, in some implementations the client endpoint may submit one or more of a variety of HTTP requests using URLs that may be defined by the service endpoint. In other implementations, the client endpoint may use any of a variety of other communication mechanisms to initiate a management action. The manner in which any results or feedback about the requested action are communicated to the client endpoint\u2014as is explained below with reference to operation \u2014may also change depending upon the communication mechanisms used to initiate the action. For example, when the action is initiated using an HTTP request, and at least with certain actions\u2014including those that may be completed relatively quickly\u2014results or feedback may be provided in the HTTP response to the HTTP request.","In an exemplary implementation of operation , the service endpoint may perform the management action that was initiated in operation . The manner in which this operation is performed may vary widely depending on, for example, the requested action, the manner in which feeds and other data are maintained or stored by the service endpoint, and so on. For example, a service endpoint might create a new feed by updating a data store\u2014implemented in one or more databases, for example\u2014with data including information provided by the client endpoint, like a name and description, as well as with information identified on the service endpoint, like a location or URL at which the feed is accessible, and so on.","Finally, in at least some exemplary implementations of operation , and with at least some management actions, results or feedback associated with the requested management action may be communicated to the client endpoint. For example, when a new feed has been created, a location or URL at which the feed is accessible may be communicated as part of a response. (The client endpoint might then use the URL by posting an initial feed document, as has been mentioned previously.) In the same or other implementations, other information, including success or failure information, may be communicated. For example, if a client endpoint has requested a listing of feeds, that listing might be received as part of this operation, and so on.","It should be noted that although the discussion has referred to a client endpoint initiating management actions that in some cases some other endpoint\u2014including the service endpoint itself\u2014may initiate such management actions.","Turning now to , shown therein is an exemplary system  in which an endpoint might provide services to other endpoints. This description of  may be made with reference to other figures. However, it should be understood that the elements described with reference to  are not intended to be limited to being used with the elements described with reference to other figures. In addition, while the exemplary diagram in  indicates particular elements, in some implementations not all of these elements may exist, and in some implementations additional elements may exist. Furthermore, while the exemplary diagram shows elements as being part of or contained by a particular computer system, for example, it should be noted that one or more modules associated with a particular endpoint may also be implemented by one or more other computer systems and connected to the exemplary illustrated computer systems by any means sufficient for exchanging any necessary data.","The exemplary system  may contain a service endpoint , an input module , a merge module , a storage module , a generation module , a management module , a local update module , and an access and security module . Also illustrated as associated with the service endpoint are an outgoing feed  and an outgoing feed N . The exemplary system may also contain a client endpoint , a local update module , a storage module , a generation module , and an input module . Also illustrated with the client endpoint are an outgoing feed  and an outgoing feed N .","In general, in at least some exemplary implementations, the client endpoint  may share and synchronize data using one or more services provided by the service endpoint . For example, and generally in some implementations, the client endpoint  may perform at least some of the operations described previously with reference to the \u201cclient endpoint\u201d columns in  and . Similarly, and also for example, the service endpoint  may in some cases perform at least some of the operations described previously with reference to the \u201cservice endpoint\u201d columns in  and .","The exemplary service endpoint  and client endpoint  may contain multiple modules, including some or all of the illustrated modules, as part of an implementation that enables the sharing and synchronization of data. In some implementations, each of the service endpoint and client endpoint might be implemented by a computing environment including the exemplary computing environment discussed below with reference to .","In some implementations, the exemplary service endpoint  may contain an input module, such as the exemplary input module . Such an input module may perform a variety of tasks associated with the input of data, including accepting feeds submitted by other endpoints, accepting programmatic or web service requests or calls from other endpoints, and so on. For example, in some implementations, the input module  may receive a feed in a manner similar to or the same as was described previously with reference to operation  of . As shown, the input module may accept one or both of the client endpoint's outgoing feed  and outgoing feed N . The input module may perform a variety of tasks using an accepted feed or request, including storing the feed or change, making the feed available to other modules or endpoints, and so on. An accepted feed might be implemented in a variety of ways and using a variety of formats, as has been previously introduced and discussed, and as is discussed in more detail below, for example, with reference to . For example, in one implementation, an accepted feed might comprise an RSS feed, and each \u201citem\u201d element in the RSS feed might contain information about a data item that is part of a sharing relationship.","In the same or other implementations, the exemplary service endpoint  may contain a merge module, like the exemplary merge module . Among other tasks, such a merge module might use one or more feeds of data or requests from client endpoints, including feeds or requests accepted by the input module , such as the outgoing feed , and might incorporate the items and changes expressed by the feed or request into the local store maintained by the service endpoint . Such a local store of items might be implemented in some embodiments by the exemplary storage module . The exemplary storage module  might be implemented in a variety of ways, including through the use of local or remote databases, flat files, and any other means by which data might be stored.","In some implementations, the exemplary merge module might implement the merging of data from an accepted feed or request as was described, for example, with reference to operation  of . The detailed merge operations may in turn include some or all of the operations described below with reference to , among other figures and examples. In examples where an accepted feed comprises an RSS feed and each \u201citem\u201d element in the RSS feed contains information about a data item, the merge module might iterate through all of the \u201citem\u201d elements in the RSS feed document and merge any changes into the store of items maintained by the storage module .","In the same or other implementations, the exemplary service endpoint  may contain a generation module, like the exemplary generation module . Such a generation module might, among other tasks, generate one or more outgoing feeds\u2014perhaps represented by the exemplary outgoing feed  and the exemplary outgoing feed N \u2014that contain some or all of the items stored by, for example, the storage module . In the same or other examples, a generation module might produce a reply to a request received from a client endpoint, or initiate a request to a client endpoint in response to a request from the client endpoint. In doing so, the generation module may implement all or part of the exemplary operation  described previously with reference to . A generation module might generate such a feed or outgoing request or reply in a variety of ways depending upon, among other things, the mechanisms by which the items are stored and the specific format and contents of the outgoing feed. For example, in one implementation, a generation module might retrieve particular database rows from a database that is part of an embodiment of storage module  and then generate an outgoing feed document, perhaps using RSS, that contains \u201citem\u201d elements for the data items that are part of the sharing relationship.","Not all of the data items maintained by the storage module  need be used by the generation module  or be part of any particular outgoing feed; only those data items that are part of a sharing relationship may be used to form the outgoing feed. Furthermore, multiple outgoing feeds may in some cases represent a different set of data items and comprise different elements than the feed or feeds that have been accepted by the input module . The ability to control the contents of the outgoing feeds produced by the generation module  may be useful to, for example, partition data by providing different feeds containing different items. Different endpoints may then access different feeds. As just one example, the service endpoint might make an outgoing feed that contains a subset of data items available to one set of endpoints and make a different outgoing feed that contains a different subset of items available to a different set of endpoints.","Another module that might exist in the exemplary service endpoint  may be a management module, such as the exemplary management module . A management module may provide a variety of different kinds of management functionality to endpoints. In some implementations, such management functionality may include some or all of the management tasks and operations described previously with reference to , including listing all feeds, retrieving detailed information about one or more feeds, creating a new feed, deleting a feed, and so on. In the same or other implementations, a management module may provide additional or different management functionality.","In at least some implementations, the exemplary service endpoint  may contain a local update module, like the exemplary local update module . Such a local update module might be capable of performing local updates of data items maintained by the service endpoint , including those stored by the storage module . In this context, the term \u201clocal update\u201d might refer to the change of a data item outside of merge operations that incorporate changes made by other endpoints, including the merge operations that might be performed by an exemplary merge module . For example, in just one example, a local update module might update data items when a user edits items or adds new items on the service endpoint itself, by interacting with the service endpoint directly or indirectly without submitting a feed and having the feed merged by the service endpoint.","Another module that might exist in the exemplary service endpoint  may be an access and security module, such as the exemplary access and security module . An access and security module may implement access and security functionality associated with other services or functionality provided by the service endpoint. For example, an access and security module may maintain or be able to identify\u2014perhaps through the use of another service that may be external to the service endpoint\u2014a set of users, groups, endpoints, or other entities, as well as associated permissions or authorizations for such users, groups, endpoints, or other entities. Using this information, the access and security module may be able to, for example, only allow particular users or endpoints to submit feeds, only allow particular users or endpoints to retrieve particular feeds, allow particular users or endpoints to submit and retrieve certain feeds but not to access other feeds, and so on.","An access and security module may use a variety of other services and functionality to, for example, control access to feeds, control access to service endpoint functionality, and so on. Such other services and functionality might include, for example, an external identity provider, such as the \u201cLive ID\u201d or \u201cPassport\u201d service provided by Microsoft Corporation of Redmond, Wash., or may include other services.","Continuing and as was introduced previously, in some implementations, the client endpoint  may perform at least some of the operations described previously with reference to the \u201cclient endpoint\u201d columns in  and .","On the client endpoint , using a local update module  that may in some cases be similar to the local update module , the client endpoint may make a change to an item maintained by or associated with the client endpoint. Such a change may involve, in at least some implementations, modifying data stored or accessed using the storage module . Such an operation may implement all or part of the exemplary operation  described previously with reference to . Subsequently, a generation module  may produce one or more feeds that may incorporate the local change, may be represented by the outgoing feed  and the outgoing feed N , and may be communicated to a service endpoint. In so doing, the client endpoint may implement some or all of the operation  and the operation  described previously with reference to . Finally, an exemplary input module  may implement some or all of the operation  and the operation  of  by retrieving or accessing an updated feed provided, for example, by the service endpoint\u2014including the outgoing feed  or the outgoing feed N , and by updating data stored or accessed using the storage module .","It should be noted that the exemplary modules associated with the system  may not represent single discrete entities within a computer system and may instead be logically comprised of multiple applications, programs, libraries, and the like. For example, a user might maintain their contacts, calendar, and email information using a PIM application. Such an application might store the contact, calendar, and email information in a variety of ways, including as records in a database or in \u201copaque\u201d files that might be generally only easily accessible, for example, through means provided the PIM application. The user might also maintain sales information using some other application that stores such sales information in another database, another file or set of files, or the like. In such an example, a storage module like the exemplary storage module  or the exemplary storage module  may comprise any or all of the stores associated with information that is part of a sharing relationship, including all databases, files, and so on, even when the stores are associated with or managed by a variety of applications. Similarly, a local update module  or local update module  might comprise multiple applications, including both the PIM and sales applications mentioned in this specific example, as long as the applications, programs, or the like, provide the capability of modifying the data outside of a merge operation. It should also be noted that while the term \u201clocal update\u201d contains the word \u201clocal,\u201d that not all local updates must necessarily be performed on a single computer system, like the service endpoint  or client endpoint . In some embodiments, updates to the data items stored by a storage module might be initiated by or performed on, for example, some other computer or device that might be connected to the endpoint in some fashion.","It should also be noted that the merge module  may in some implementations access a single foreign feed, such as the outgoing feed , while in other implementations any number of foreign feeds, representing the same or different sets of data, may be accessed. One such additional feed may be represented by the exemplary outgoing feed N . Similarly, the generation module  may in some implementations generate only a single outgoing feed, such as outgoing feed , while in other implementations the generation module may generate any number of outgoing feeds that represent the same or different sets of data. One such additional outgoing feed might be represented by the exemplary outgoing feed N .","Also, while the client endpoint  is shown herein without a merge module, in some implementations a client endpoint may also contain additional modules, including a merge module, that may enable the client endpoint to, for example, perform merge operations locally or without the assistance of another endpoint. In such implementations, a client may, for example, retrieve feeds from other endpoints itself and merge changes from other endpoints locally, but may still use a service endpoint, such as the service endpoint , to access other functionality. For example, as was previously described, the client endpoint might use a service endpoint to store feeds and make feeds available to other endpoints.","Simple Sharing Extensions","As has been described previously, various operations performed as part of sharing items may be implemented using, among other techniques, one or more extensions to existing feed protocols, including SSE. Some of the following description provides more information about SSE, including exemplary feeds and operations such as additions, modifications, and merges.","Turning now to , shown therein is an exemplary system  that includes a graphical example of a feed . A feed  might contain a header  as well as some number of items including, in some examples, item , item  , and item N . Each item might contain sync data  and item data . This description of  may be made with reference to other figures. However, it should be understood that the elements described with reference to  are not intended to be limited to being used with the elements described with reference to other figures. In addition, while the exemplary diagram in  indicates particular elements, in some implementations not all of these elements may exist, and in some implementations additional elements may exist.","A feed may be represented using any of a wide variety of formats. Generally, however, a feed might contain information necessary to communicate item data and sync data, where item data might be data associated with the particular items being shared as part of the feed and sync data might be additional data required or useful for implementing the synchronization of the items. In some implementations, a feed might use a syndication or data sharing format, such as RSS or Atom. In another example, a feed might use a list-processing format, like Outline Processor Markup Language (OPML). In yet another example, a feed might use some other method for sharing data that does not use XML.","Regardless of the format used by the feed, an exemplary feed  may in some cases contain a header with header information that may be general to the entire feed, such as the exemplary header . In the case where the feed uses RSS, the header  might contain some or all of some standard RSS header elements, such as the \u201crss\u201d element, the \u201cchannel\u201d element, the \u201ctitle\u201d element, the \u201cdescription\u201d element, and so on.","The header might also contain data, in some cases also represented using XML elements, such as the data described in the following paragraphs. While this data may be described with reference to XML elements, XML attributes, RSS, and so on, the use of XML or RSS is not required. A header, or the entire feed for that matter, may contain some or all of this data and may represent the data in a variety of formats. For example, a header represented using RSS might contain an RSS \u201cchannel\u201d element and a \u201csharing\u201d element beneath the \u201cchannel\u201d element. The \u201csharing\u201d element might in turn contain a number of attributes and sub-elements. However, such a representation\u2014using RSS, XML elements, XML attributes, and so on\u2014is provided for exemplary purposes only. The data represented in such an example may also be represented in any of a wide number of alternate formats.","As just one example, the header  might contain information like the following:",{"@attributes":{"id":"p-0087","num":"0086"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<channel>"]},{"entry":[{},"\u2003<sx:sharing since=\u201cTue, 1 Nov 2004 09:43:33 GMT\u201d"]},{"entry":[{},"\u2003\u2003\u2003until=\u201cFri, 1 Mar 2005 09:43:33 GMT\u201d version=\u201c0.92\u201d >"]},{"entry":[{},"\u2003\u2003<sx:related link=\u201chttp:\/\/x.com\/all.xml\u201d type=\u201ccomplete\u201d \/>"]},{"entry":[{},"\u2003\u2003<sx:related link=\u201chttp:\/\/y.net\/B.xml\u201d type=\u201caggregated\u201d"]},{"entry":[{},"\u2003\u2003\u2003title=\u201cFamily Contacts (Dads Copy)\u201d \/>"]},{"entry":[{},"\u2003\u2003<sx:related link=\u201chttp:\/\/y.net\/C.xml\u201d type=\u201caggregated\u201d"]},{"entry":[{},"\u2003\u2003\u2003title=\u201cFamily Contacts (Suzys Copy)\u201d \/>"]},{"entry":[{},"\u2003<\/sx:sharing>"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003..."]},{"entry":[{},"<\/channel>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"In this example, the \u201cchannel\u201d element might be the standard RSS \u201cchannel\u201d element (other standard RSS header information, like the \u201ctitle\u201d and \u201cdescription\u201d elements may exist, and, if so, is not shown). In this example the use of the string \u201csx:\u201d might indicate a particular XML namespace, perhaps including a namespace related to sharing and synchronizing data as described herein. The use of such an XML namespace prefix may not be required for the sharing of data, except as may be required, for example, by the particular format or formats used to represent the feed. For example, if the feed is represented using XML, one or more namespaces might be used or required.","The header  might contain header data like that represented in this example by the \u201csharing\u201d element including some or all of the \u201csince\u201d, \u201cuntil\u201d, and \u201cversion\u201d attributes, or the like.","Such data might include a value associated with an attribute like \u201csince\u201d, which might represent the date-time from which all items in the feed have been incorporated. In some implementations, a feed might include only the most recent modifications, additions, and deletions within some reasonable time window. In some implementations, these feeds might be referred to as \u201cpartial\u201d feeds, whereas feeds containing the complete set of items may be referred to as \u201ccomplete\u201d feeds. New subscribers to a feed might then initially copy a complete set of items from a publisher before having the ability to process incremental updates. Data like that represented by a \u201csince\u201d attribute might be useful, for example and in addition to other data described herein, as part of an implementation of partial and complete feeds. A partial feed might reference the complete feed, for example, by using one or more links or references in the partial feed. By placing a link to a complete feed, for example, in the channel descriptor, only a reference to the partial feed might need to be distributed to potential subscribers. If such an attribute is not present, the \u201cbeginning of time\u201d might be assumed, such that the feed contains the endpoint's complete set of data as of the date-time value represented by the \u201cuntil\u201d value.","The data might also include a value associated with an attribute like \u201cuntil\u201d, which might represent the last date-time when items were incorporated into the feed. The publisher of the feed might guarantee that the value associated with the \u201cuntil\u201d attribute will increase if any items in the feed are updated. If this attribute is omitted or blank, the subscriber to the feed might not be able to make assumptions about when the feed was updated.","The data might also include a value associated with an attribute like \u201cversion\u201d, which might represent the version of a specification\u2014including rules about generating and merging content\u2014that was used when the feed was generated.","In some implementations, the data might also include a value associated with an attribute like \u201cwindow\u201d, which might represent the maximum period of time, in days or some other unit, that might elapse after the value associated with the \u201cuntil\u201d attribute, before a subscriber is no longer able to synchronize with the feed. Subscribers might use this value to determine the frequency with which they should read a feed, as well as when to read the complete feed in the cases where partial feeds exist. Publishers might use this value for a variety of purposes, including to determine when to remove items from partial feeds, to determine when to actually delete data associated with items that have a \u201cdeleted\u201d attribute set to \u201ctrue\u201d, and to determine when to delete items associated with a \u201cresolvedconflicts\u201d element (exemplary \u201cdeleted\u201d and \u201cresolvedconflicts\u201d elements are described in more detail below).","In some implementations, one or more pieces of data associated with feeds related to a particular feed might be used. In some cases, like the previously presented example, this data might be represented using one or more \u201crelated\u201d elements that are children of a \u201csharing\u201d element. A \u201crelated\u201d element might contain some or all of \u201clink\u201d, \u201ctitle\u201d, \u201ctype\u201d, \u201csince\u201d, and \u201cuntil\u201d attributes, or the like.","Such data might include a value associated with an attribute like \u201clink\u201d, which might represent a URL or other reference to a related feed. The data might also include a value associated with an attribute like \u201ctitle\u201d, which might contain a name or description of the related feed.","The data might also include a value associated with an attribute like \u201ctype\u201d, which might contain as data either \u201ccomplete\u201d or \u201caggregated\u201d. The value \u201ccomplete\u201d might be used when the link references a feed that contains a complete set of items associated with the feed. The value \u201caggregated\u201d might be used when the link references a feed whose contents are being incorporated into this feed by the publisher. In some implementations\u2014for example, in the case where a publisher has aggregated information from other feeds into a larger work\u2014it may be useful for subscribers to see more detailed information about the other feeds. This data might also be used to provide information to subscribing feeds about the feeds of other participants, to which they might also wish to subscribe.","The data might also include a value associated with an attribute like \u201csince\u201d, which might represent the starting point of the related feed. If this attribute is omitted or blank, it might be assumed that this is a complete feed. The data might also include a value associated with an attribute like \u201cuntil\u201d, which might represent the ending point of the feed.","In addition to a header , an exemplary feed  may generally contain one or more item elements, such as item  , item  , and item N . Generally, each item element may contain one or both of sync data  and item data . In an implementation where the feed is provided using RSS, an item, like item  , may be associated with the \u201citem\u201d element defined and used in RSS. (Again, as has been described, feeds may be represented in a wide variety of formats, and are not limited to RSS, XML, or the like.)","When using RSS, as just one example, an item element, like item  , might contain information like the following:",{"@attributes":{"id":"p-0100","num":"0099"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<item>"]},{"entry":[{},"\u2003<sx:sync id=\u201c0a7903db47fb0ae8\u201d version=\u201c1\u201d>"]},{"entry":[{},"\u2003\u2003<sx:history when=\u201cSat, 21 May 2005 09:43:33 GMT\u201d"]},{"entry":[{},"\u2003\u2003by=\u201cUserXDeviceY\u201d\/>"]},{"entry":[{},"\u2003<\/sx:sync>"]},{"entry":[{},"\u2003<title>This is a test title<\/title>"]},{"entry":[{},"\u2003<description>This is a test item description.<\/description>"]},{"entry":[{},"<\/item>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Item data  may generally comprise information related to the item itself. In the previous example, the item data  might include the RSS \u201ctitle\u201d and \u201cdescription\u201d elements. In another example, if a feed contains an item for each of a specified set of contacts, the item data  might generally contain information about a particular contact's name, address, phone number(s), and so on. The item data information might be represented in any of a wide variety of formats. In the case of contact information, for example, the item information might be represented using the hCard standard, the vCard standard, or any other format that contains contact information. It is noted that the item data may be stored in any format and is not limited to, for example, XML, XHTML, or any other standardized method for representing information. If a feed is associated with information typically represented in binary form, like audio data or image data, the item data might include such binary information, and so on. The item data may also be stored outside of the feed. In such an implementation, the feed may reference the item data, perhaps using an element like the RSS \u201cenclosure\u201d element.","Sync data  generally comprises information associated with the sharing and synchronization of the associated item data. In some implementations this might include data represented, for example, using a \u201csync\u201d element that might have some or all of the \u201cid\u201d, \u201cversion\u201d, \u201cdeleted\u201d, and \u201cnoconflicts\u201d attributes, or the like, as well as additional attributes. The sync data  might also include elements that are, in some implementations, children of a \u201csync\u201d element, including, for example and without limitation, \u201chistory\u201d, \u201cupdate\u201d (which might be a child of a \u201chistory\u201d element), \u201cconflicts\u201d, and \u201cresolvedconflicts\u201d, and the like, as well as additional elements. In some implementations, items that include a valid sync data element , or the like, may be considered to be \u201cconfigured for sharing,\u201d in that they may contain information used when sharing the item between multiple endpoints.","Such data might include a value associated with an attribute like \u201cid\u201d, which might represent the identifier for the particular item. The value of this attribute may in some implementations be unique within a feed and might also be globally unique across feeds if an item is being shared or synchronized. In some implementations, the value of this attribute might be assigned by the creator of the item, and should not be changed by subsequent publishers.","Such data might also include a value associated with an attribute like \u201cversion\u201d, which might represent the modification sequence number of the item. In some implementations this value might start at \u201c1\u201d and increment by one indefinitely for each subsequent modification.","Such data might also include a value associated with an attribute like \u201cdeleted\u201d. Such an attribute, if present and when the associated value is \u201ctrue\u201d, might indicate that the associated item has been deleted and that the remaining data is a \u201ctombstone\u201d useful, for example, to propagate deletions. If this attribute is not present, or if it is present with value of \u201cfalse\u201d, then the item might be considered to not be deleted.","Such data might also include a value associated with an attribute like \u201cnoconflicts\u201d. Such an attribute, if present and when its associated value is \u201ctrue\u201d, might indicate that particular parts of conflict processing, including perhaps conflict detection and conflict preservation, should not be performed for the associated item. Some possible implementations associated with conflict processing are described below. If this attribute is not present, or if it is present with a value of \u201cfalse\u201d, then it might indicate that conflict processing should be performed for the item.","In addition to attributes that might be used with a \u201csync\u201d element, or the like, some implementations may maintain the chronological change history for an element, possibly through the use of an element that is a child of the \u201csync\u201d element, and that might, in some implementations, have the name \u201chistory\u201d. In some implementations, such an element might have some or all of \u201cwhen\u201d and \u201cby\u201d attributes, or the like, as well as additional attributes. A \u201chistory\u201d element might also, in some implementations, sometimes have one or more \u201cupdate\u201d elements as children, as well as additional elements. An exemplary \u201cupdate\u201d element is described in more detail below.","Information associated with a change history might include a value associated with an attribute like \u201cwhen\u201d, which might represent the date-time when the most recent modification of the associated item took place. If this attribute is omitted the value might default to the earliest time that can be represented using, for example, the date format specified by the Internet Engineering Task Force (IETF) RFC 822.","Such data might also include a value associated with an attribute like \u201cby\u201d, which might identify the unique endpoint or entity that made the most recent modification. In some implementations, the associated value might be some combination of a user and a device (which might enable a given user to edit a feed on multiple devices). In some implementations, the value of this attribute might be used programmatically to break ties in the case where two changes were made at the same time (for example, within the same second). In some embodiments, if this attribute is omitted the value may default to the empty string, which might be less than all other values for purposes of collation and determining the item that takes precedence for various operations.","In some implementations at least one of the \u201cwhen\u201d or \u201cby\u201d attributes must be present\u2014in such implementations it may be invalid to have neither.","In some implementations, some parts of an item's change history might be maintained through the use of an \u201cupdate\u201d element, or the like, as part of the item's sync data . In some of these implementations, each \u201cupdate\u201d element might represent a distinct update operation applied to the associated item. In some implementations a new \u201cupdate\u201d element might be created each time the item is updated.","As just one example, the following XML fragment might indicate that the particular item was modified on May 21, 2005\u2014as is indicated by the \u201cupdate\u201d element\u2014and then modified again, more recently, on May 23, 2005\u2014as is indicated by the \u201chistory\u201d element:",{"@attributes":{"id":"p-0113","num":"0112"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<item>"]},{"entry":[{},"\u2003<sx:sync id=\u201c0a7903db47fb0ae8\u201d version=\u201c1\u201d>"]},{"entry":[{},"\u2003\u2003<sx:history when=\u201cMon, 23 May 2005 09:43:33 GMT\u201d"]},{"entry":[{},"\u2003\u2003by=\u201cUserXDeviceY\u201d>"]},{"entry":[{},"\u2003\u2003\u2003<sx:update when=\u201cSat, 21 May 2005 09:43:33 GMT\u201d"]},{"entry":[{},"\u2003\u2003\u2003by=\u201cUserXDeviceY\u201d \/>"]},{"entry":[{},"\u2003\u2003<\/sx:history>"]},{"entry":[{},"\u2003<\/sx:sync>"]},{"entry":[{},"\u2003<title>This is a test title<\/title>"]},{"entry":[{},"\u2003<description>This is a test item description.<\/description>"]},{"entry":[{},"<\/item>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"In some implementations, an \u201cupdate\u201d element might have one or both the \u201cwhen\u201d and \u201cby\u201d attributes, as well as other attributes.","Such data might include a value associated with an attribute like \u201cwhen\u201d, which might represent the date-time when the modification associated with this update took place. If this attribute is omitted the value might default to the earliest time that can be represented using, for example, the date format specified by IETF RFC 822.","Such data might also include a value associated with an attribute like \u201cby\u201d, which might identify the unique endpoint that made the modification associated with this update. In some implementations, the value of this attribute might be some combination of a user and a device (which might enable a given user to edit a feed on multiple devices). In some implementations, the value of this attribute might be used programmatically to break ties in the case where two changes were made at the same time (for example, within the same second). In some embodiments, if this attribute is omitted the value may default to the empty string, which might be less than all other values for purposes of collation and determining the item that takes precedence for various operations.","Like with the \u201chistory\u201d element, in some implementations, at least one of the \u201cwhen\u201d or \u201cby\u201d attributes must be present\u2014in such implementations it may be invalid to have neither.","Another set of elements that might be part of an item's sync data  might be a conflict collection and a resolved conflict collection, perhaps represented using a \u201cconflicts\u201d element and a \u201cresolvedconflicts\u201d element, or the like. Both of these elements might be used, for example, as part of a conflict preservation implementation. Such an implementation might preserve, for example, the \u201closing\u201d change when two changes conflict. Some examples of conflict preservation implementations are described below, for example, with reference to , , , and .","Turning now to , shown therein is an exemplary generalized operational flow  including various operations that may be performed when modifying an item to include sharing and synchronization data. The following description of  may be made with reference to other figures. However, it should be understood that the operational flow described with reference to  is not intended to be limited to being used with the elements described with reference to these other figures. In addition, while the exemplary operational flow of  indicates a particular order of execution, in one or more alternative embodiments the operations may be ordered differently. Furthermore, while the exemplary operational flow contains multiple steps, it should be recognized that in some implementations at least some of these operations may be combined or executed contemporaneously.","The operations described in the exemplary operational flow  may generally be performed when an item that has not previously been configured for sharing or synchronization is to be shared. One example of when such operations might be performed is when a new item is created as a result of a local user operation. For example, if a user is synchronizing her contact information and creates a new contact, the operations described with reference to  might be performed so that the contact contains the minimum set of sharing information necessary for the sharing of that contact. Another example of when such operations might be performed might be when a set of items that already exists but that is not configured for synchronization is extended to support sharing and synchronization.","In one example of operation , new sync data may be defined. This new sync data might include, for example, a unique identifier and an initial version value. In some cases the initial version value may be a starting version of \u201c1\u201d. Further, in implementations that, for example, generate a feed that is represented using XML, this operation might result in the creation of a new \u201csync\u201d element, or the like, or the definition or creation of data that ultimately results in the creation or generation of a \u201csync\u201d element when a feed is generated. In such implementations, or in other implementations, the unique identifier data might be associated with an \u201cid\u201d attribute and the version information might be associated with a \u201cversion\u201d attribute.","In an exemplary implementation of operation , an update history may be created. The newly created update history may contain information about this initial update, perhaps specified using one or both of values that define when the information was defined and by whom the information was defined. In implementations that, for example, generate a feed that is represented using XML, this operation might result in the creation of a new \u201chistory\u201d element, or the like, or the definition or creation of data that ultimately results in the generation of a \u201chistory\u201d element when a feed is generated. In such implementations, or in other implementations, the time when this information was defined might be associated with a \u201cwhen\u201d attribute and the entity that defined this information might be associated with a \u201cby\u201d attribute.","As just one example, consider the following RSS item, represented using XML, as it might exist before the operations of the exemplary operational flow  are performed:",{"@attributes":{"id":"p-0124","num":"0123"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<item>"]},{"entry":[{},"\u2003<title>This is a test title<\/title>"]},{"entry":[{},"\u2003<description>This is a test item description.<\/description>"]},{"entry":[{},"<\/item>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"After the operations of the exemplary operational flow  have been performed, the same item might be represented in a feed as follows:",{"@attributes":{"id":"p-0126","num":"0125"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<item>"]},{"entry":[{},"\u2003<sx:sync id=\u201c0a7903db47fb0ae8\u201d version=\u201c1\u201d>"]},{"entry":[{},"\u2003\u2003<sx:history when=\u201cSat, 21 May 2005 09:43:33 GMT\u201d"]},{"entry":[{},"\u2003\u2003by=\u201cUserXDeviceY\u201d\/>"]},{"entry":[{},"\u2003<\/sx:sync>"]},{"entry":[{},"\u2003<title>This is a test title<\/title>"]},{"entry":[{},"\u2003<description>This is a test item description.<\/description>"]},{"entry":[{},"<\/item>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"In some implementations, the information defined by the operations of the exemplary operational flow  might be considered to form at least part of the sync data  described previously with reference to . In the same or other implementations, the item data that existed before the execution of the exemplary operational flow  might be considered to form at least part of the item data  also described previously with reference to .","Turning now to , shown therein is an exemplary generalized operational flow  including various operations that may be performed when performing a local update of an item. The following description of  may be made with reference to other figures. However, it should be understood that the operational flow described with reference to  is not intended to be limited to being used with the elements described with reference to these other figures. In addition, while the exemplary operational flow of  indicates a particular order of execution, in one or more alternative embodiments the operations may be ordered differently. Furthermore, while the exemplary operational flow contains multiple steps, it should be recognized that in some implementations at least some of these operations may be combined or executed contemporaneously.","As before, a local update, as performed by the operations of the exemplary operational flow , may be defined as an update that is performed outside of a merge operation. Such a local update may include both the modification of an item\u2014for example, this might include the modification of a contact's address or phone number in a contact item\u2014as well as the deletion of an item.","In an exemplary implementation of operation  the version data associated with the item may be incremented, for example, by one. In implementations that, for example, generate a feed that is represented using XML, this operation might result in a change to the value associated with a \u201cversion\u201d attribute. If the previous value of the version attribute was \u201c1\u201d a new value might be \u201c2\u201d, and so on.","In one implementation of operation , the update history of the item might be modified so as to capture information about when this particular modification takes place and also, in some implementations, to maintain at least some information about previous modifications. One possible implementation of this operation might involve first creating a new \u201cupdate\u201d element, or the like, as the first member of the existing update history (in doing so, any previously existing update information might be moved down in order). Note that, as has been previously stated, while this operation, and others, may be described in some cases in the context of concepts related to XML including, for example, elements and attributes, these descriptions are in no way limiting to an implementation that only uses or results in XML data. For example, in some implementations an update history, including the information described as residing, in some implementations, in \u201chistory\u201d and \u201cupdate\u201d elements, might be created and maintained in memory, using database records or other data structures, and the like. In any implementations, the relevant information may never be stored, persisted, or communicated as XML. Some of the descriptions provided herein use XML concepts only for ease of explanation.","To set the values of the \u201cwhen\u201d (modification time) and \u201cby\u201d (modifying entity) attributes of the new \u201cupdate\u201d element, operation  might copy the corresponding data from the current \u201chistory\u201d element. In doing so, data about the most recent previous modification\u2014which may have been previously recorded with \u201cwhen\u201d and \u201cby\u201d values in the \u201chistory\u201d element\u2014may now be saved in the new \u201cupdate\u201d element, and so may not be lost if the data associated with the \u201chistory\u201d element is updated.","In some implementations, operation  may truncate the update history by deleting some or all of the \u201cupdate\u201d elements. In implementations that truncate the update history, the \u201cupdate\u201d elements may generally be deleted in reverse order of their creation so that older update history is deleted before newer update history.","Finally, operation  might set one or both of the \u201cwhen\u201d (again, modification time) and \u201cby\u201d (again, modifying entity) attributes of the top-level \u201chistory\u201d element to the current time and entity making this modification, respectively.","In one implementation of operation , further steps may be performed in the case where the modification is a deletion of the item. When this is the case, in some implementations the \u201cdeleted\u201d attribute of the top-level \u201csync\u201d element may be set to \u201ctrue\u201d. In some implementations, the data associated with the item may also be physically deleted. However, in at least some implementations the top-level \u201citem\u201d element as well as the \u201csync\u201d element and its children might be retained. (In implementations that use the concept of partial feeds, the actual \u201citem\u201d and \u201csync\u201d element may be physically deleted when allowed, as defined by the \u201cwindow\u201d attribute of the \u201csharing\u201d element, and as described previously with reference to .)","As just one example, consider the following RSS item, represented using XML, as it might exist after having been modified three times in sequence, once per day, by the same endpoint:",{"@attributes":{"id":"p-0137","num":"0136"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<item>"]},{"entry":[{},"\u2003<sx:sync id=\u201c0a7903db47fb0ae8\u201d version=\u201c4\u201d>"]},{"entry":[{},"\u2003\u2003<sx:history when=\u201cTue, 24 May 2005 09:43:33 GMT\u201d"]},{"entry":[{},"\u2003\u2003by=\u201cUserXDeviceY\u201d>"]},{"entry":[{},"\u2003\u2003\u2003<sx:update when=\u201cMon, 23 May 2005 09:43:33 GMT\u201d"]},{"entry":[{},"\u2003\u2003\u2003by=\u201cUserXDeviceY\u201d \/>"]},{"entry":[{},"\u2003\u2003\u2003<sx:update when=\u201cSun, 22 May 2005 09:43:33 GMT\u201d"]},{"entry":[{},"\u2003\u2003\u2003by=\u201cUserXDeviceY\u201d \/>"]},{"entry":[{},"\u2003\u2003\u2003<sx:update when=\u201cSat, 21 May 2005 09:43:33 GMT\u201d"]},{"entry":[{},"\u2003\u2003\u2003by=\u201cUserXDeviceY\u201d \/>"]},{"entry":[{},"\u2003\u2003<\/sx:history>"]},{"entry":[{},"\u2003<\/sx:sync>"]},{"entry":[{},"\u2003<title>This is a test title<\/title>"]},{"entry":[{},"\u2003<description>This is a test item description.<\/description>"]},{"entry":[{},"<\/item>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"In this example, the execution of the exemplary operational flow  three different times has resulted in the creation of three \u201cupdate\u201d elements that represent the time at which the modification took place and the entity that made the modification.","If this particular RSS item is modified again two more times, once per day, and the particular implementation only maintains the most recent three versions, the resulting item might look as follows, represented as XML:",{"@attributes":{"id":"p-0140","num":"0139"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<item>"]},{"entry":[{},"\u2003<sx:sync id=\u201c0a7903db47fb0ae8\u201d version=\u201c6\u201d>"]},{"entry":[{},"\u2003\u2003<sx:history when=\u201cThu, 26 May 2005 09:43:33 GMT\u201d"]},{"entry":[{},"\u2003\u2003by=\u201cUserXDeviceY\u201d>"]},{"entry":[{},"\u2003\u2003\u2003<sx:update when=\u201cWed, 25 May 2005 09:43:33 GMT\u201d"]},{"entry":[{},"\u2003\u2003\u2003by=\u201cUserXDeviceY\u201d \/>"]},{"entry":[{},"\u2003\u2003\u2003<sx:update when=\u201cTue, 24 May 2005 09:43:33 GMT\u201d"]},{"entry":[{},"\u2003\u2003\u2003by=\u201cUserXDeviceY\u201d \/>"]},{"entry":[{},"\u2003\u2003\u2003<sx:update when=\u201cMon, 23 May 2005 09:43:33 GMT\u201d"]},{"entry":[{},"\u2003\u2003\u2003by=\u201cUserXDeviceY\u201d \/>"]},{"entry":[{},"\u2003\u2003<\/sx:history>"]},{"entry":[{},"\u2003<\/sx:sync>"]},{"entry":[{},"\u2003<title>This is a test title<\/title>"]},{"entry":[{},"\u2003<description>This is a test item description.<\/description>"]},{"entry":[{},"<\/item>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Turning now to , shown therein is an exemplary generalized operational flow  that includes various operations that might be performed when merging changes made by another endpoint with the data maintained by a local implementation of an endpoint. The following description of  may be made with reference to other figures. However, it should be understood that the operational flow described with reference to  is not intended to be limited to being used with the elements described with reference to these other figures. In addition, while the exemplary operational flow of  indicates a particular order of execution, in one or more alternative embodiments the operations may be ordered differently. Furthermore, while the exemplary operational flow contains multiple steps, it should be recognized that in some implementations at least some of these operations may be combined or executed contemporaneously.","In an exemplary implementation of operation , a foreign feed that contains information about the items synchronized between two endpoints may be accessed. In some embodiments, a foreign feed may be made up of items that each may contain item data and sync data, for example, perhaps as further described previously with reference to . In some implementations, the foreign feed may be the feed communicated to a service endpoint, as described in operation  of , and received by a service endpoint, as described in operation  of . In these implementations, at least part of the implementation of operation  of  may be performed using at least some of the operations described herein with reference to . In the same or other implementations, the merge module  of  may perform some or all of the operations described herein with reference to . In such implementations, the merge module  and the operations described with reference to  may operate using, for example, one of the outgoing feed  or the outgoing feed N  as the foreign feed.","In general, a foreign feed may be provided in some fashion by another endpoint. For example, the operation of accessing the foreign feed may in some implementations involve using a network to physically retrieve a file or files that contain the foreign feed. Because the mechanism by which the foreign feed is accessed or transmitted may be irrelevant to the operation of the steps illustrated with reference to , this step may also encompass any other means by which a foreign feed may be accessed, including manual transfer of data using some other form of storage including a CD, a flash drive, a physical printout of data on paper, and so on. A particular foreign feed may not necessarily contain all of the items synchronized by a particular endpoint\u2014for example, an endpoint may synchronize with multiple foreign feeds, each which may contain the same or a different set of items.","It should be noted that while some of the preceding and following description may refer to the foreign feed as, for example, an XML document that contains item and sharing information perhaps like that described elsewhere in this specification, the foreign feed is not so limited. For example, the foreign feed may not necessarily always be provided as an XML document. Any feed provided by another endpoint that contains item and sharing information may possibly be accessed or used as described in this operation and the operational flow .","In at least one implementation of operation , it may be determined if the foreign feed contains any foreign items that have not yet been processed. In this context, the term \u201cforeign item\u201d may refer to an item defined by the foreign feed, in contrast to a \u201clocal item,\u201d which may refer to an item stored or managed by the entity that accesses the foreign feed, including, in some implementations, the entity or entities that execute the operational flow . If there are no remaining foreign items to process, the operational flow ends. If the foreign feed contains at least one item that has not yet been processed, the exemplary operational flow proceeds to operation .","In an exemplary implementation of operation , the next foreign item is retrieved from or identified using the foreign feed. For example, if the foreign feed is associated with five foreign items, the first time operation  is executed, one of these items may be retrieved. The next time operation  is executed, another of these items may be retrieved, and so on. This may continue until all foreign items have been retrieved, at which point operation  stops any further retrieval.","In at least one implementation of operation , it is determined if the current foreign item\u2014that is, the foreign item retrieved in the most recent execution of operation \u2014is a new item that the endpoint performing the exemplary operational flow  has not yet evaluated. In some implementations, this operation may be performed by determining if a data store that contains local items and is managed or accessible from the local endpoint contains an item that has the same unique identifier as the current foreign item. If no such local item exists, the foreign item may be determined to be new, and the operational flow may proceed to operation . If the local data store contains an item with the same unique identifier as the foreign item, the foreign item may not be considered new, and the operational flow may proceed to operation .","If the foreign item is new, the operational flow may proceed to operation  where, in an exemplary implementation, data from the foreign item may be used to create a corresponding local item. The implementation of this operation may vary according to different factors including how, for example, local items are stored. In some implementations, this operation may be performed by creating a new database record or records, a new data structure or data structures, and so on, and setting the rows, fields, or the like by copying information from the foreign item. In other implementations, this operation may be performed by copying the information from the foreign item into a feed document maintained locally, and so on.","If the foreign item is not new, the operational flow may proceed to operation  where, in at least some implementations, data from the foreign item is used to evaluate if and how the corresponding local item should be updated. For example, data from the foreign item may be determined to be more recent than data from the local item, and so may in some cases overwrite the corresponding data in the local item. A number of other operations may occur as part of the evaluate local item update operation. An exemplary implementation of these other operations is described in more detail below, with reference to . It should be noted that, in at least some implementations, data that is overwritten may need to be saved, at least until the remaining operations that relate to this foreign item are performed. For example, an operation related to processing conflicts may use some of the data that might be overwritten as part of operation .","In an exemplary implementation of operation , it may be determined if it is necessary to process conflicts associated with the foreign item and the local item. If no conflict processing is needed, the operational flow may proceed to operation . If conflict processing is required, the operational flow may proceed to operation . This determination may be made in a variety of ways, including by, for example, determining if the foreign item, the local item, or both items contain a flag or some other data that indicates if conflicts should be or should not be processed. In some implementations, such a flag might be the \u201cnoconflicts\u201d attribute described previously, for example with reference to . In these implementations, if the \u201cnoconflicts\u201d attribute exists and is set to \u201ctrue\u201d, no conflict processing may be necessary.","If conflict processing is indicated, the operational flow may proceed to operation , where, in an exemplary implementation, potential conflicts between the foreign item and the local item may be processed. The steps executed during conflict processing may vary in different implementations and may include one or both of a conflict detection operation and a conflict preservation option. One implementation of conflict processing operations, such as these, is described in more detail below, with reference to .","Turning now to , shown therein is an exemplary generalized operational flow  that includes operations that might be performed as part of evaluating how a local item might be updated during a merge operation. In some implementations, the steps described in  may be used as all or part of an implementation of operation  described previously with reference to . This description of  may be made with reference to other figures. However, it should be understood that the operational flow described with reference to  is not intended to be limited to being used with the elements described with reference to these other figures. In addition, while the exemplary operational flow of  indicates a particular order of execution, in one or more alternative embodiments the operations may be ordered differently. Furthermore, while the exemplary operational flow contains multiple steps, it should be recognized that in some implementations at least some of these operations may be combined or executed contemporaneously.","In an exemplary implementation of operation , a \u201cwinning item\u201d and \u201closing item\u201d may be determined from two items presented. For example, when the operations in the operational flow  are used in the context of the merge operational flow  described previously with reference to , the two items presented may comprise the foreign item and the local item identified as part of the merge operational flow . One of these items may be selected to be the winning item, which in some implementations is the item that is determined to have precedence, for some reason or reasons, and the other item may be selected to be the losing item. Furthermore, in some cases neither item may be determined to be the winning item or the losing item.","In some implementations, the determination of the winning item and the losing item may be made by comparing data associated with both items. For example, the winning item and losing item may be determined by a comparison of the current version of the items, the most recent time the items were modified, and the entities that performed the most recent item modification. In the case where the items are similar to those described previously with reference to , this data may be determined, for example, using the \u201cversion\u201d attribute of the \u201csync\u201d element, the \u201cwhen\u201d attribute of the \u201chistory\u201d element, and \u201cby\u201d attribute of the \u201chistory\u201d element, respectively. In such an implementation, the version data may be compared first, and an item with a greater version number may be determined to be the winning item. If both items have the same version, the most recent modification time may be compared, and the item with the more recent modification time may be determined to be the winning item. If both modifications were performed at the same time (for example, within the same second), then the entities that performed the modifications may be compared, and the item that has the entity with the \u201cgreater\u201d value\u2014as determined by text comparison, for example\u2014may be determined to be the winning item. In implementations where the modification time and modifying entity are not necessarily required to be defined for each item, a comparison may determine that a winning item is the item that has data for a particular field\u2014for example, if only one of the items has a modification time defined, that item may be determined to be the winner in a comparison of modification times.","If one item is determined to be the winning item, the other item may be determined to be the losing item. If neither item is determined to be the winning item, then neither item may be determined to be the winning item or the losing item.","In an exemplary implementation of operation , it is determined if the items are considered the \u201csame\u201d for the purposes of updating the local item. In one implementation, this operation may use the results of the previous operation . If neither item was identified as the winning item in operation , then the items may be considered to be the same, and the operational flow  may end. If operation  determined a winning item and a losing item, then the items may be determined to not be the same, and the operational flow  may proceed to operation . Note that in some implementations, the determination of whether the items are the same may use only the synchronization data associated with each item\u2014like the version, modification time, and modifying entity\u2014as described above, for example. In these or other implementations, the determination of whether the items are the same may not use item data, like contact information when the item represents a contact, image information when the item represents an image, and so on. This may mean that the item data associated with each of the two items is different even when the items are determined to be the same in this operation, and vice versa.","In at least one implementation of operation , it may be determined whether the local item needs to be updated. For example, when the operational flow  exists in the context of some other set of operations that provide a foreign item and a local item, like when the operational flow is executed as part of the merge operational flow , this operation may determine if the local item should be updated. In some implementations, it may be determined that the local item should be updated if the foreign item was determined to be the winning item. For example, this might be the case if the foreign item had a greater version number than the local item or had a more recent modification time than the local item. If the local item needs to be updated, the operational flow  proceeds to operation ; otherwise, the operational flow ends.","In an exemplary implementation of operation , the local item may be updated. The implementation of this operation may vary according to how, for example, local items are stored. In some implementations, this operation may be performed by modifying a database record or records, a data structure or data structures, and so on, that may store data about the local items, by copying data from the foreign item. In other implementations, this operation may be performed by copying information from the foreign item into a feed document maintained locally, and so on. In at least some cases, both the synchronization data and the item data may be copied and used to update the local item. This means that, as a result, the local item now may have the same item data, same update history, same version, and so on, as the foreign item.","Turning now to , shown therein is an exemplary generalized operational flow  that includes operations that might be performed when processing conflicts. In some implementations, the steps described in  may be used as all or part of an implementation of operation  described previously with reference to . This description of  may be made with reference to other figures. However, it should be understood that the operational flow described with reference to  is not intended to be limited to being used with the elements described with reference to these other figures. In addition, while the exemplary operational flow of  indicates a particular order of execution, in one or more alternative embodiments the operations may be ordered differently. Furthermore, while the exemplary operational flow contains multiple steps, it should be recognized that in some implementations at least some of these operations may be combined or executed contemporaneously.","In an exemplary implementation of operation , it may be determined whether the two presented items are in conflict. In this context, the operational flow  may be assumed to be operating with two items. Such items may be a winning item and losing item, as identified, for example, by the operations of operational flow  described previously with reference to . Such items may also be a foreign item and a local item, as described previously, for example, with reference to . In addition, as used herein, the term \u201cin conflict\u201d may refer to the case where separate modifications were made independently to the same item. For example, suppose the same item is modified by two different endpoints, and neither endpoint knows of the other endpoint's modification at the time the endpoint is making its own modification. Such items might be determined to be in conflict, for example, during a merge operation. When this definition of the term \u201cin conflict\u201d is used, it may be possible for items that have the same item data\u2014for example, for a contact that has the same name, address, phone number(s), and so on\u2014to still be determined to be in conflict. This might occur, in one example, if two endpoints independently modified, say, a phone number field of a contact to the same new phone number. In some implementations, additional processing\u2014not described herein\u2014may be used to determine if items like this are truly different.","One procedure for determining if the two items are in conflict in operation  uses information about when and by whom modifications were made. For example, in an implementation that uses data described previously, for example, with reference to , or uses similar data, conflicts may be detected by first identifying the value of the \u201cversion\u201d attribute of the \u201csync\u201d element of the winning item, and defining this value as n. This value may then be decremented by the value of the \u201cversion\u201d attribute of the \u201csync\u201d element of the losing item, and the resulting value stored as an updated n. Then, the values of the \u201cwhen\u201d (modification time) and \u201cby\u201d (modifying entity) attributes of the losing item's \u201chistory\u201d element may be compared with the values of the \u201cwhen\u201d and \u201cby\u201d attributes of the winning item's \u201cupdate\u201d element that corresponds to the value of n. If n is zero, then the values of the \u201cwhen\u201d and \u201cby\u201d attributes of the losing item's \u201chistory\u201d element may be compared with the values of the \u201cwhen\u201d and \u201cby\u201d attributes of the winning item's \u201chistory\u201d element.","If the identified \u201cwhen\u201d and \u201cby\u201d values are the same, or if the \u201cupdate\u201d element corresponding to n does not exist (when n is greater than zero), the items may be determined to not be in conflict. If the at least one of the \u201cwhen\u201d and \u201cby\u201d values are not the same, the items may be determined to be in conflict.","As one example of how this implementation of conflict detection might proceed, suppose one endpoint\u2014perhaps called endpoint A\u2014modified an item so the item's representation in a feed was:",{"@attributes":{"id":"p-0164","num":"0163"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<item>"]},{"entry":[{},"\u2003<sx:sync id=\u201c0a7903db47fb0ae8\u201d version=\u201c3\u201d deleted=\u201cfalse\u201d>"]},{"entry":[{},"\u2003\u2003<sx:history when=\u201cThu, 6 Jul 2006 20:27:22 GMT\u201d"]},{"entry":[{},"\u2003\u2003by=\u201cendpointA\u201d>"]},{"entry":[{},"\u2003\u2003\u2003<sx:update when=\u201cThu, 6 Jul 2006 20:27:21 GMT\u201d"]},{"entry":[{},"\u2003\u2003\u2003by=\u201cendpointA\u201d \/>"]},{"entry":[{},"\u2003\u2003\u2003<sx:update when=\u201cThu, 6 Jul 2006 20:27:20 GMT\u201d"]},{"entry":[{},"\u2003\u2003\u2003by=\u201cendpointA\u201d \/>"]},{"entry":[{},"\u2003\u2003<\/sx:history>"]},{"entry":[{},"\u2003<\/sx:sync>"]},{"entry":[{},"\u2003<title>This is a test title, modified by endpoint A<\/title>"]},{"entry":[{},"\u2003<description>This is a test item description.<\/description>"]},{"entry":[{},"<\/item>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"And suppose another endpoint\u2014perhaps called endpoint B\u2014modified an item so the item's representation in a feed was:",{"@attributes":{"id":"p-0166","num":"0165"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<item>"]},{"entry":[{},"\u2003<sx:sync id=\u201c0a7903db47fb0ae8\u201d version=\u201c3\u201d deleted=\u201cfalse\u201d>"]},{"entry":[{},"\u2003\u2003<sx:history when=\u201cThu, 6 Jul 2006 20:27:23 GMT\u201d"]},{"entry":[{},"\u2003\u2003by=\u201cendpointB\u201d>"]},{"entry":[{},"\u2003\u2003\u2003<sx:update when=\u201cThu, 6 Jul 2006 20:27:21 GMT\u201d"]},{"entry":[{},"\u2003\u2003\u2003by=\u201cendpointA\u201d \/>"]},{"entry":[{},"\u2003\u2003\u2003<sx:update when=\u201cThu, 6 Jul 2006 20:27:20 GMT\u201d"]},{"entry":[{},"\u2003\u2003\u2003by=\u201cendpointA\u201d \/>"]},{"entry":[{},"\u2003\u2003<\/sx:history>"]},{"entry":[{},"\u2003<\/sx:sync>"]},{"entry":[{},"\u2003<title>This is a test title, modified by endpoint B<\/title>"]},{"entry":[{},"\u2003<description>This is a test item description.<\/description>"]},{"entry":[{},"<\/item>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"As is evident when examining the \u201chistory\u201d elements of both items, the \u201cwhen\u201d attribute of the \u201chistory\u201d element associated with the item modified by endpoint B shows a modification time that is one second later than the modification time associated with the change made by endpoint A. Using the previously described operations and procedures, in some implementations the item modified by endpoint B would be determined to be the winning item, and the items would be determined to be in conflict. In terms of the conflict detection procedure, the value of n would be determined to be zero, because subtracting the value of the \u201cversion\u201d attribute associated with the losing item (\u201c3\u201d) from the value of the \u201cversion\u201d attribute associated with the winning item (\u201c3\u201d) results in the value of zero. Therefore, the values of the \u201cwhen\u201d and \u201cby\u201d attributes of the \u201chistory\u201d elements associated with both items would be compared, and it would be seen that the values of the \u201cwhen\u201d attributes were different, therefore indicating that the items were in conflict.","In an exemplary implementation of operation , some or all conflict data associated with both items in question may be preserved. In this context, \u201cpreserving conflict information\u201d may refer to the preservation of item and synchronization data associated with conflicts. For example, suppose that two items were modified independently and were subsequently determined to be in conflict. Also suppose that the data associated with the winning item was to be used, or was already used, to overwrite the data associated with the losing item. As part of conflict preservation, in some implementations the data associated with the losing item may be preserved. This may lessen or eliminate data loss, and enable, for example, subsequent user intervention to determine if the \u201ccorrect\u201d data (as defined by a user, for example) was retained.","One procedure for preserving conflicts might use a \u201cconflict collection\u201d and a \u201cresolved conflict collection.\u201d In implementations that use feeds that have XML representations, these collections might be implemented as, for example, elements named \u201cconflicts\u201d and \u201cresolvedconflicts\u201d. The children of the \u201cconflicts\u201d and \u201cresolvedconflicts\u201d elements may in turn be, for example, one or more instances of \u201citem\u201d elements that existed at some time in losing items. When an \u201citem\u201d element is a member of a conflict collection or a resolved conflict collection, it may be referred to as a \u201cconflict item\u201d, \u201cconflict element\u201d, \u201cresolved conflict item\u201d, or a \u201cresolved conflict element\u201d. (Resolved conflicts are described in more detail below, with reference to .)","For example, in the previous exemplary description with reference to operation , the item modified by endpoint A was determined to be the losing item. As a result of a conflict preservation operation like operation , the data associated with the modification made by endpoint A might be preserved as part of the winning item, and may, for example, appear like the following in an XML representation of the feed:",{"@attributes":{"id":"p-0171","num":"0170"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<item>"},{"entry":"\u2003<sx:sync id=\u201c0a7903db47fb0ae8\u201d version=\u201c3\u201d deleted=\u201cfalse\u201d>"},{"entry":"\u2003\u2003<sx:history when=\u201cThu, 6 Jul 2006 20:27:23 GMT\u201d by=\u201cendpointB\u201d>"},{"entry":"\u2003\u2003\u2003<sx:update when=\u201cThu, 6 Jul 2006 20:27:21 GMT\u201d by=\u201cendpointA\u201d \/>"},{"entry":"\u2003\u2003\u2003<sx:update when=\u201cThu, 6 Jul 2006 20:27:20 GMT\u201d by=\u201cendpointA\u201d \/>"},{"entry":"\u2003\u2003<\/sx:history>"},{"entry":"\u2003\u2003<sx:conflicts>"},{"entry":"\u2003\u2003\u2003<item>"},{"entry":"\u2003\u2003\u2003\u2003<sx:sync id=\u201c0a7903db47fb0ae8\u201d version=\u201c3\u201d deleted=\u201cfalse\u201d>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<sx:history when=\u201cThu, 6 Jul 2006 20:27:22 GMT\u201d by=\u201cendpointA\u201d>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<sx:update when=\u201cThu, 6 Jul 2006 20:27:21 GMT\u201d by=\u201cendpointA\u201d \/>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<sx:update when=\u201cThu, 6 Jul 2006 20:27:20 GMT\u201d by=\u201cendpointA\u201d \/>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<\/sx:history>"},{"entry":"\u2003\u2003\u2003\u2003<\/sx:sync>"},{"entry":"\u2003\u2003\u2003\u2003<title>This is a test title, modified by endpoint A<\/title>"},{"entry":"\u2003\u2003\u2003\u2003<description>This is a test item description.<\/description>"},{"entry":"\u2003\u2003\u2003<\/item>"},{"entry":"\u2003\u2003<\/sx:conflicts>"},{"entry":"\u2003<\/sx:sync>"},{"entry":"\u2003<title>This is a test title, modified by endpoint B<\/title>"},{"entry":"\u2003<description>This is a test item description.<\/description>"},{"entry":"<\/item>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"In one implementation of a conflict preservation procedure, if a losing item's conflict collection is not empty, any items in a losing item's conflict collection may be copied to the winning item's conflict collection. In this context, the term \u201cidentical\u201d may mean that the items have the same values associated with the version, modification time, and modifying entity (i.e., they might have the same values for the \u201cversion\u201d, \u201cwhen\u201d, and \u201cby\u201d attributes). If the winning item already has an identical item in its conflict collection, that particular item may not be copied. Similarly, if a losing item's resolved conflict collection is not empty, any items in the losing item's resolved conflict collection may be copied to the winning item's resolved conflict collection, unless the winning item already has an identical item in its resolved conflict collection. Then, any identical items that exist in both the winning item's conflict collection and the winning item's resolved conflict collection may be removed from the winning item's conflict collection.","Finally, in the case where the items were found to be in conflict\u2014for example, they may have been found to be in conflict during operation \u2014the losing item may be preserved as part of the winning item's data. In at least some implementations, this might be implemented by deleting the losing item's conflict and resolved conflict collections (perhaps by removing the losing item's \u201cconflicts\u201d and \u201cresolvedconflicts\u201d elements), and by then appending the losing item to the winning item's conflict collection, perhaps by appending the losing item's \u201citem\u201d element to the winning item's \u201cconflicts\u201d element. The previously presented example XML showing a \u201cconflicts\u201d element demonstrates one exemplary manner in which this might be done for the described example.","Turning now to , shown therein is an exemplary generalized operational flow  that includes operations that might be performed as part of resolving conflicts. This description of  may be made with reference to other figures. However, it should be understood that the operational flow described with reference to  is not intended to be limited to being used with the elements described with reference to these other figures. In addition, while the exemplary operational flow of  indicates a particular order of execution, in one or more alternative embodiments the operations may be ordered differently. Furthermore, while the exemplary operational flow contains multiple steps, it should be recognized that in some implementations at least some of these operations may be combined or executed contemporaneously.","Some implementations may provide the ability to \u201cresolve a conflict,\u201d where such resolution may refer to the modification of an item after one or more conflicts associated with that item have been identified. In at least some cases, the resolution of conflicts may be performed by a user or some other entity outside of the context of the synchronization operations. For example, a user may examine the data identified by a merge procedure as the \u201cwinning\u201d and \u201closing\u201d data, and validate that the data chosen as the winning data was correct, that the losing data should have been chosen, or that some other data\u2014perhaps in some cases a manual combination of pieces of data, for example\u2014should instead be used.","In an exemplary implementation of operation , an item may be updated with the appropriate data. In this context, the appropriate data may be selected from one of the following: the most recent item data (i.e., this might be the case if winning item identified in a merge procedure had the correct data); the data associated with one of the members of the item's conflict collection; and from some other source, including completely new data, some user-performed manual combination of existing and\/or new data, and so on. In some implementations, such an update may need to be performed using the same procedures as other updates. For example, in implementations that use the modification operations previously described with reference to , the item's version may be incremented, the update history may be modified, and so on.","In at least one implementation of operation , conflict data may be updated after the item itself is updated in operation . As part of this operation, a resolved conflict collection may be created for the item, if one does not already exist. In cases where a feed is represented using XML, this may at some point result in the creation of a \u201cresolvedconflicts\u201d element. Then, any members of the item's conflict collection that are deemed to no longer be relevant or valid may be moved from the conflict collection to the resolved conflict collection. In cases where a feed is represented using XML, this may at some point result in moving items that are children of the \u201cconflicts\u201d element to be children of the \u201cresolvedconflicts\u201d element. In this context, whether a member of the conflict collection is no longer relevant or valid may be determined by the user or entity resolving the conflict. In some cases this may result in all of the members of the conflict collection being moved to the resolved conflict collection, while in other cases only some, or none, of the members of the conflict collection may be moved to the resolved conflict collection. For example, if a member of the conflict collection exists that is not addressed by the data used during the update item operation , that member may remain in the conflict collection. After any items have been moved to the resolved conflict collection, if the conflict collection contains no remaining items, the conflict collection itself may be deleted which, in XML feed representations, may result in the removal of the \u201cconflicts\u201d element.","As just one example, using the example XML representation described previously with reference to operational flow  and , after one possible conflict resolution procedure, an item might have the following representation:",{"@attributes":{"id":"p-0179","num":"0178"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<item>"},{"entry":"\u2003<sx:sync id=\u201c0a7903db47fb0ae8\u201d version=\u201c4\u201d deleted=\u201cfalse\u201d>"},{"entry":"\u2003\u2003<sx:history when=\u201cFri, 7 Jul 2006 20:27:24 GMT\u201d by=\u201cendpointB\u201d>"},{"entry":"\u2003\u2003\u2003<sx:update when=\u201cThu, 6 Jul 2006 20:27:23 GMT\u201d by=\u201cendpointB\u201d>"},{"entry":"\u2003\u2003\u2003<sx:update when=\u201cThu, 6 Jul 2006 20:27:21 GMT\u201d by=\u201cendpointA\u201d \/>"},{"entry":"\u2003\u2003\u2003<sx:update when=\u201cThu, 6 Jul 2006 20:27:20 GMT\u201d by=\u201cendpointA\u201d \/>"},{"entry":"\u2003\u2003<\/sx:history>"},{"entry":"\u2003\u2003<sx:resolvedconflicts>"},{"entry":"\u2003\u2003\u2003<item>"},{"entry":"\u2003\u2003\u2003\u2003<sx:sync id=\u201c0a7903db47fb0ae8\u201d version=\u201c3\u201d deleted=\u201cfalse\u201d>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<sx:history when=\u201cThu, 6 Jul 2006 20:27:22 GMT\u201d by=\u201cendpointA\u201d>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<sx:update when=\u201cThu, 6 Jul 2006 20:27:21 GMT\u201d by=\u201cendpointA\u201d \/>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<sx:update when=\u201cThu, 6 Jul 2006 20:27:20 GMT\u201d by=\u201cendpointA\u201d \/>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<\/sx:history>"},{"entry":"\u2003\u2003\u2003\u2003<\/sx:sync>"},{"entry":"\u2003\u2003\u2003\u2003<title>This is a test title, modified by endpoint A<\/title>"},{"entry":"\u2003\u2003\u2003\u2003<description>This is a test item description.<\/description>"},{"entry":"\u2003\u2003\u2003<\/item>"},{"entry":"\u2003\u2003<\/sx:resolvedconflicts>"},{"entry":"\u2003<\/sx:sync>"},{"entry":"\u2003<title>This is a resolved test title <\/title>"},{"entry":"\u2003<description>This is a test item description.<\/description>"},{"entry":"<\/item>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"In this example, the \u201ctitle\u201d element has been modified to contain new data, the version and update history of the item have been updated as part of the modification, the \u201citem\u201d element that was previously part of the conflict collection has been moved to the resolved conflict collection, and the conflict collection has been removed because it no longer contained any items.","Example Computing Environment","Turning now to , this figure and the related discussion are intended to provide a brief and general description of an exemplary computing environment in which the various technologies described herein may be implemented. Although not required, the technologies are described herein, at least in part, in the general context of computer-executable instructions, such as program modules that are executed by a controller, processor, personal computer, or other computing device, such as the computing device  illustrated in .","Generally, program modules include routines, programs, objects, components, user interfaces, data structures, and so on, that perform particular tasks, display particular information, or implement particular abstract data types. Operations performed by the program modules have been described previously with the aid of one or more block diagrams and operational flowcharts.","Those skilled in the art can implement the description, block diagrams, and operational flows in the form of computer-executable instructions, which may be embodied in one or more forms of computer-readable media. As used herein, computer-readable media may be any media that can store or embody information that is encoded in a form that can be accessed and understood by a computer. Typical forms of computer-readable media include, without limitation, both volatile and nonvolatile memory, data storage devices, including removable and\/or non-removable media, and communications media.","Communication media embodies computer-readable information in a modulated data signal, such as a carrier wave or other transport mechanism, and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communications media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media.","The computing device  illustrated in , in its most basic configuration, includes at least one processing unit  and memory . In some implementations, the computing device  may implement all or part of, for example, the service endpoint  or client endpoint  described previously with reference to . In some implementations, the processing unit  may be a general purpose central processing unit (CPU), as exists, for example, on a variety of computers, including desktop and laptop computers. Depending on the exact configuration and type of computing device, the memory  may be volatile (such as RAM), non-volatile (such as ROM, flash memory, etc.), or some combination of the two. This most basic configuration is illustrated in  by dashed line . Additionally, the computing device  may also have additional features and functionality. For example, the computing device  may also include additional storage (removable and\/or non-removable) including, but not limited to, magnetic or optical disks or tape. Such additional storage is illustrated in  by the removable storage  and the non-removable storage .","The computing device  may also contain one or more communications connection(s)  that allow the computing device  to communicate with other devices and services. For example, the computing device might have one or more connections to other computing devices, including, for example, the endpoints described previously with reference to . The computing device  may also have one or more input device(s)  such as an image input devices like cameras or scanners, keyboards, mice, pens, voice input devices including microphone arrays, touch input devices, and so on. One or more output device(s)  such as a display, speakers, printer, and so on, may also be included in the computing device .","Those skilled in the art will appreciate that the technologies described herein may be practiced with computing devices other than the computing device  illustrated in . For example, and without limitation, the technologies described herein may likewise be practiced in hand-held devices including mobile telephones and PDAs, multiprocessor systems, microprocessor-based or programmable consumer electronics, network PCs, minicomputers, mainframe computers, and the like. Each of these computing devices may be described, at some level of detail, by the system of , or may be described differently.","The technologies described herein may also be implemented in distributed computing environments where operations are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote devices.","While described herein as being implemented in software, it will further be appreciated that the technologies described herein may alternatively be implemented all or in part as hardware, firmware, or various combinations of software, hardware, and\/or firmware.","Although some particular implementations of methods and systems have been illustrated in the accompanying drawings and described in the foregoing text, it will be understood that the methods and systems shown and described are not limited to the particular implementations described, but are capable of numerous rearrangements, modifications and substitutions without departing from the spirit set forth and defined by the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0005","num":"0004"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 12"}]},"DETDESC":[{},{}]}
