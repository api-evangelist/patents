---
title: System and method for providing a web-based operating system
abstract: A system and method for providing a web-based operating system is disclosed. A web-based operating system is downloaded from a server to a network-enabled device. The web-based operating system provides a platform from which to run web-based computer applications. Web-based computer applications are downloaded from the server onto the network-enabled device, and executed in conjunction with the web-based operating system. Those portions of the web-based operating system software and web-based computer application software are downloaded to the network-enabled device as needed. A component-based environment for the development and deployment of a web-based operating system and web-based computer applications is also provided. Components are deployed within library files as part of a component-based development model. The web-based operating system downloads those library files needed to execute the web-based computer applications.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08255483&OS=08255483&RS=08255483
owner: RPX Corporation
number: 08255483
owner_city: San Francisco
owner_country: US
publication_date: 20090410
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["This application is a continuation of and claims priority under 35 U.S.C. \u00a7120 to U.S. patent application Ser. No. 11\/644,709, filed Dec. 22, 2006, now U.S. Pat. No. 8,069,220, which is a continuation of U.S. patent application Ser. No. 09\/686,136, entitled \u201cSYSTEM AND METHOD FOR PROVIDING A WEB-BASED OPERATING SYSTEM\u201d filed in the name of Malmer et al. on Oct. 11, 2000, now U.S. Pat. No. 7,155,490, which claims priority to U.S. Provisional Application No. 60\/186,304, entitled \u201cSYSTEM AND METHOD FOR PROVIDING A WEB-BASED OPERATING SYSTEM\u201d filed on Mar. 1, 2000, the disclosures of which are incorporated by reference herein.","This application is also related to the following other continuation and divisional applications:","U.S. patent application Ser. No. 13\/091,963, filed Apr. 21, 2011, which is also a continuation of U.S. patent application Ser. No. 11\/644,709, filed Dec. 22, 2006, now U.S. Pat. No. 8,069,220;","U.S. patent application Ser. No. 13\/091,978, filed Apr. 21, 2011, which is also a continuation of U.S. patent application Ser. No. 11\/644,709, filed Dec. 22, 2006, now U.S. Pat. No. 8,069,220; and","U.S. patent application Ser. No. 13\/091,993, filed Apr. 21, 2011, which is a divisional of U.S. patent application Ser. No. 11\/644,709, filed Dec. 22, 2006, now U.S. Pat. No. 8,069,220.","1. Field of the Invention","The present invention relates generally Internet-based computer applications and more particularly to providing these applications to a user from a remote server.","2. Discussion of the Related Art","In conventional computer systems, a computer application operas within the confines of an operating system resident on a local computer. The operating system provides a layer of abstraction between the computer application and the operation of the physical computer hardware associated with the local computer. The operating system enables developers of the computer application to provide various functionality to a user regardless of the type of physical computer hardware owned by the user. For example, the operating system provides the computer application with access to hard drives, monitors, input\/output ports, peripherals, and various other devices without having to understand the nature and operation of the particular piece of physical hardware associated with the local computer.","In conventional computer systems, the computer application is resident on the local computer. When the user wishes to access a particular computer application, the user selects the computer application via an operating system user interface to initiate or run the computer application. For example, in a Windows\u2122 operating system, the user may select the particular computer application by \u201cdouble-clicking\u201d on an icon associated with the particular computer application from the \u201cdesktop\u201d or selecting the particular computer application from a menu such as Windows\u2122 \u201cProgram\u201d menu. Once the particular computer application is selected, the operating system retrieves the particular computer application from a storage device at the local computer and runs it within the context of the operating system in a well-known manner.","With conventional computer systems, the user usually has to purchase a copy of each computer application that he intends to install and use on a computer. Often, these computer applications are expensive (i.e., paying for the installation of the application, or the per instance cost). When the application is purchased in this manner, the cost of a computer application on a per use basis is much higher for a casual user than a heavy user. It would be more economically efficient, if users paid for the computer application on a per use basis rather than on a per instance basis. The conventional configuration, however, does not provide a \u201cpay-for-use\u201d mechanism for the computer application.","Distribution is another problem associated with purchasing individual copies of a computer application. In conventional computer systems, computer applications are distributed to users via a software medium such as a floppy diskette. The user loads the computer application from the floppy diskette onto his local computer. Subsequent modifications to the application (e.g., corrections, modifications, additions, etc.) must be delivered to the user via a software medium as well, often times at additional expense to the user. To avoid this expense, many users simply retain an outdated (and often \u201cbuggy\u201d) version of the computer application. Moreover, developers may delay the release of \u201cbug fixes\u201d for long periods of time with the intent of releasing the \u201cbug fixes\u201d with newly developed features. Meanwhile, users \u201cmake do\u201d with a less than perfect computer application.","Yet another problem associated with individual copies of a computer application is the wasteful use of computer storage media. For example, it is not uncommon that a computer application, when fully installed on a local computer, require tens of megabytes of storage space on a computer hard drive. Typically, the amount of storage space required greatly increases with each subsequent release of the computer application. While storage space is becoming cheaper every year (in terms of dollars\/megabyte), much of storage space is occupied by code functions never utilized by the user. This problem is compounded by copies of a computer application installed by millions of users, resulting in large scale storage media inefficiencies.","In view of the shortcomings of known techniques for distributing and operating applications programs, it would be useful to have a system and method that provide an alternative technique for delivering an operating system and computer applications.","The present invention is directed to a system and method that solves the problems of conventional computer systems by providing a web-based operating system and web-based computer applications to a user via a network. A web-based operating system is downloaded from a server onto a network-enabled device. The web-based operating system provides a platform from which web-based computer applications are executed. Web-based computer applications are downloaded from a server onto the network-enabled device, and executed in conjunction with the web-based operating system.","According to one feature of the present invention, users access web-based computer applications on demand. When a user wishes to access a web-based computer application, the web-based computer application is downloaded from a server for use at a network-enabled device. The user may access and repeatedly download the web-based computer application as often as needed, rather than pay a high initial price for a conventional computer application. In this manner, the present invention provides a mechanism by which the user may \u201cpay-for-use\u201d of the web-based computer application. This solves the problem of the high initial cost of conventional computer applications.","According to another feature of the present invention, the web-based computer application software is distributed from a server when the user chooses to access the web-based computer application. When a new version of the web-based computer application software becomes available, it is released onto the server. Since the web-based computer application software is downloaded when the user wishes to execute the web-based computer application, the user always has access to the newest version of the software. This solves the problem of distribution or individual copies of a conventional computer application.","According to yet another feature of the present invention, portions of the web-based operating system software and web-based computer application software are downloaded from the server to the network-enabled device as needed. When a user first accesses the web-based operating system, the core software for operation of the web-based operating system are downloaded from the server to the network-enabled device. When the user accesses a web-based computer application, the web-based computer application software and any additional web-based operating system software needed are downloaded from the server. This results in storing only that software at the network-enabled device necessary for executing the web-based computer application. This solves the problem of wasted storage media associated with storing individual copies of conventional computer applications in conventional computer systems. This, and other advantages of the present invention arm described below.","A preferred embodiment of the invention is discussed in detail below. While specific implementations are discussed, it should be understood that this is done for illustrative purposes only. A person skilled in the relevant art will recognize that other components and configurations may be used without parting from the spirit and scope of the invention.","The present invention is directed to a system and method for providing a web-based operating system and web-based applications to a user via a network. Generally, the present invention eliminates the need for storing a copy of a computer application on a local computer. Rather, the computer application resides on a server. When a user desires to access the computer application, the user selects the application from a desktop that is managed and operated from the server. The computer application (or various aspects, features, or functions thereof) is delivered to the local computer from the server on an \u201cas needed\u201d basis. Such a computer application is referred to as a \u201cserver-side\u201d computer application whereas a conventional computer application residing on the local computer is referred to as a \u201cclient-side\u201d computer application.","In one embodiment, the present invention provides a web-based operating system that acts as an interface layer between the server-side computer application and the local computer. More particularly, the present invention provides an interface between the server-side computer application and a web-browsing engine operating on the local computer. While described in these terms for purposes of clarity, it will become apparent to those skilled in the art how various aspects of the print invention may be applied to other embodiments.","The present invention provides a component-based environment for the development and deployment of a web-based operating system and web-based applications. Components are small programs, or objects, that perform specific functions and are designed in such a way as to easily operate with other components and applications. The present invention deploys the components within library files as part of a component-based development model. The web-based operating system only downloads those library files that include components needed to execute a particular web-based application a user is accessing. Once downloaded, the components may be reused for other web-based applications when needed.","The component-based development model of the present invention provides a number of benefits. First, the component-based development model provides for faster web-based computer application and web-based operating system development. Components need only be developed once, and thereafter reused as building blocks for many applications. Web-based computer applications developed using the component-based development model are more robust because they use code that is tested, and known to work. Additionally, the present invention provides for loading component libraries once, and referencing them from the web-based computer applications many times. This allows many applications to reference components that were downloaded only once, thereby decreasing the number of downloads and increasing the speed of the web-based operating system.",{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 1","b":["100","110","120","130","140","120","140","140","140","130","110"]},"Conventionally, user  accesses a particular web page using a web browser (also referred to as web-browsing engine) such as Microsoft's Internet Explorer\u2122 or Netscape's Navigator\u2122 operating on network-enabled device . In order to access a web page, the web browser sends a request to a particular web site using a Uniform Resource Locator (\u201cURL\u201d) address associated with the desired web page. The request is passed through network  using an appropriate network protocol. For example, when network  comprises the Internet, a Hyper-Text Transfer Protocol (\u201cHTTP\u201d) is used that encapsulates the request to facilitate its transmission through network . Other network protocols may also be used as would be apparent.","Using the URL address, the request is routed to a server (or servers)  hosting the web page. Once located, the appropriate server  analyzes the request and sends web-related data corresponding to the request back to network-enabled device  using the appropriate network protocol (e.g., HTTP). The browser receives the web-related data at network enabled device . This process of requesting and retrieving web-related data is well known.",{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 2","b":["120","110","120","210","210","220","220","220","120"]},"One such conventional local computer application operating on computer hardware  is preferably a web-browsing engine , sometimes referred to as a web browser . The operation and use of web-browsing engine  are generally well known as mentioned above. Web-browsing engine  may include for example, Microsoft's Internet Explorers, version 5.0 or Netscape's Navigator\/Communicator\u2122. In a preferred embodiment of the present invention, web-browsing engine  is capable of rendering data in the Hypertext Markup Language (\u201cHTML\u201d) and Dynamic Hypertext Markup Language (\u201cDHTML\u201d) or similar markup language formats, and executing JavaScript code, as is apparent in the following description. More particularly, in the preferred embodiment of the present invention, web-browsing engine  is capable of rendering various web page data (DHTML, XML, etc.) to an output device on the client side. In general, web-browsing engine  includes interpreters that render web page data to an output device, for example, a graphics display, sound, printer, etc. Typically, computer hardware , computer operating system  and web-browsing engine  comprise network-enabled device .","Computer system  preferably includes a web-based operating system  and a web-based computer application . Web-based operating system  functions as an interface between web-browsing engine  and web-based computer application . More particularly, web-based operating system  includes an application program interface (\u201cAPI\u201d) that includes a set of components, routines, protocols and tools for building various web-based computer applications , all within the framework of web-browsing engine . The API includes components, or small programs that perform specific functions and are designed in such a way as to easily operate with other components and applications. Preferably, the components are implemented as JavaScript objects. Such objects are generally well known.","For example, the API includes various components for displaying information (e.g., windows, icons, forms, buttons, etc.) in various manners and locations. The API includes components through which applications may interact with web-browsing engine  and computer operating system . The API also includes various components for receiving user input (e.g., keyboard input, mouse input, etc.) from various sources and also components for responding to received information in an appropriate manner. With the API, application programmers may use the various components to develop web-based computer applications that fun within the context of web-based operating system  more rapidly, consistently, and robustly.","While APIs are generally well known, the API of the present invention is novel in that it is preferably written in DHTML, JavaScript\u2122, XML, etc. The API may also include various compiled portions (e.g., C++, etc.) for complex or time sensitive operations. This is significant in that web-browsing engine  executes or interprets these other forms of web data into an HTML web page that is then displayed. In effect, this enables various functions of web-based computer application  to be handled on network-enabled device  (i.e., client-side) rather than server  (i.e., server-side). This is discussed in further detail below.","Computer system  also includes a user interface  that allows user  to navigate and control web-based computer application . Together with we-based computer application  and web-based operating system , user interface  preferably operates in a manner similar to a user interface associated with a conventional client-side computer application of a similar type. According to the present invention, a user interface of a server-side, or web-based, version of a word processor preferably operates in a manner similar to that of a conventional, local version of a word processor. Computer applications with similar user interfaces arm often said to have a similar \u201clook and feed.\u201d While having a user interface for web-based computer application  that is similar to that of a conventional client-side application may speed the migration of users  to web-based computer applications , those skilled in the art would recognize that this is not necessary.","The present invention enables the development, implementation, and deployment of web-based operating system  and web-based computer application . A web-based application development environment is provided that enables developers to develop web-based computer applications  using a component-based development model. Developers reference components, and component library files in their web-based computer application code. Component library files that include the referenced components a: loaded into web-based operating system  the first time they are needed. Since the component library files are only loaded when they are actually needed, web-based operating system  and web-based computer application  downloads only that code that is needed for web-based operating system  and web-based computer application  to execute on network-enabled device .","The present invention enables the development and implementation of web-based operating system  and web-based computer application  by providing a top-level page that executes within the context of web-browsing engine . The top-level page is essentially a sophisticated web application that includes web page data (DHTML, XML, JavaScript, VBScript, etc.) that is processed by web-browsing engine . The basic functionality of web-based operating system  is included in the top-level page. Additional functionality for web-based operating system  and web-based computer application  is included in library files.","Two of the primary types of library files are component library files and application library flies. Component library files include component definitions and logic that allow applications running within web-browsing engine  to instantiate component objects. Application library files are files that include an application object. The application object identifies application program logic within the application library file and allows the application program logic to be incorporated into the top-level page so that web-browsing engine  may execute the application. Developers of web-based computer application  write the code in the form of application library files.","The top-level page accesses the library files through the library manager. The library manager is a set of functions and objects, in the top-level page that loads the components and application program logic from library files into the top-level page. Once the components and application program logic are loaded into the top-level page, the web application is executed by web-browsing engine .","The operation of web-based operating system  and web-based computer application  begins when user  downloads the top-level page to web-browsing engine  running on network-enabled device . Import statements in the top-level page identify core component libraries that provide components and functionality that the top-level page requires to operate as web-based operating system . The library manager leads the import statements, identifies the location of the core component libraries and loads them into the top-level page. Preferably, the library manager creates a new context in the top-level page and loads the components from the library file into the context. Preferably, the new context is a frame element within the top-level page, such as a frame, iframe, layer, etc. The library manager then maps the identity of the new context (e.g., frame element) to the components and identity of the library files loaded into the new context. This mapping creates a way for the library manager to determine that a particular library file has already been loaded, and map references to a component into the context that includes that component.","After the core component libraries have been loaded, the top-level page is ready to load and execute an application library file. The application library file provides the program logic to function as an application within the top-level page and web-browsing engine . Preferably, the top-level page contains a reference to an application library, such as a URL address, or other information identifying an application. Alternately, user  may provide the URL address, or surf to the location of web-based computer application  according to the present invention, Regardless of the source of the reference to the application library file, the library manager begins the process of running the application within the context of web-browsing engine  by accessing the application library file.","The library manager first retrieves the application library file, and then begins the process of loading the application library file into the top-level page. As part of the loading process, the library manager first determines if the application library file includes any import statements that identify other component libraries. Import statements identify component library files and indicate that the application library file includes program logic that instantiates components from those component library files. If the application library includes import statements identifying other component libraries, the library manager loads the component libraries in the same manner as the core component libraries, described above. After all component libraries associated with the application library have been loaded into the top-level page, the library manager begins loading the application library into a new context within the top-level page.","Preferably, the application library file program logic uses components from the loaded component libraries to implement the functions of the application. Examples of the types of components that an application library might use are components to draw windows, components to provide menu bars, components to implement business logic, etc. Within the application library file, components are referred to by the component library file name and component name, (e.g., LibraryFileName.ComponentName). This method of referring to a component, however, is not preferred within the top-level page, since component references typically need to identify the top-level page context within which the component is defined (e.g., ContextName.ComponentName). The identity of the top-level page context was defined when the library manager loaded the component library file into the top-level page. Within the top-level page, component references from within the new context identity that includes the application program logic should refer to the context of the component to which they refer. As such, library manager replaces the component library file name portion of the component reference with the identity of the context that the component library file was loaded into.","After the context identity component file name swap has been completed, and the program logic of the application library file has been loaded into a new context, the web-browsing engine  executes the new application in the top-level page, thereby rendering the application functionality of the application library file to user  at network-enabled device .",{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 3","b":["300","120","110","250","260","300","230","310","120","230","310","130","120","110","230","310","230","310","120","310"]},"The various elements of operating system and application layer  provide the functionality of web-based operating system  and web-based computer application . Although component and API based systems often blur the line of demarcation between operating system and application, generally, top-level page , library manager , core component library , and API library  function as web-based operating system . Similarly, application library  and additional component library  function as web-based computer application .","The elements of operating system and application layer  are loaded into the browser context of web-browsing engine , and are executed, or interpreted, in a manner consistent with other web documents. Moreover, the components of operating system and application layer  include program code, such as HTML, DHTML, JavaScript\u2122, VBScript\u2122, XML, etc., that executes within the context of web-browsing engine .","Top-level page  is the main application page, or document, into which other web-based application code is loaded. When user  accesses server  to download web-based operating system  and web-based computer application , top-level page  is the first page transmitted to network-enabled device . Top-level page  may include HTML, DHTML, JavaScript, VBScript, XML, and any other data that web-browsing engine  may process in order to render web-based computer application  to user . Top-level page  may also include references to other pages, such as script files, HTML source files, etc., which web-browsing engine  incorporates when top-level page  is loaded.","Top-level page  provides the core functionality for web-based operating system . Preferably, the core functionality is implemented as JavaScript functions, objects, constructors and prototypes, collectively referred to herein as JavaScript program elements. Constructors and prototypes are JavaScript programming elements that define objects that may be instantiated or used as a basis for a type of object oriented class-inheritance. The JavaScript program elements are made available in top-level page  to other portions of the web-based operating system  and web-based computer application  to form the basis of an API.","For example, the core functionality provided by top-level page , includes event handlers, core system objects, and library manager . Event handler JavaScript program elements handle events raised by web-browsing engine , and may be incorporated to handle user input and events raised by other portions of web-based computer application . System objects are JavaScript program elements for managing the execution, resource management and administration of web-based operating system . System objects may include, for example, objects to run portions of an application within top-level page , trigger an event of an object, return the location and dimensions of windows, etc.","Top-level page  includes library manager , which provides the functionality to load and reload core component library , API library , application library , and additional component library  (i.e., library files -). It should be noted that although library files - are shown as discrete elements for convenience, in actual implementation, the present invention contemplates any of library files - may include a number of library files, as would be apparent. Library files - include components and program logic that are loaded into top-level page  to add additional functionality to operating system and application layer . For example, core component library  includes the core API components for web-based operating system . API library  includes components available for development of applications, such as web-based computer application . Application library  includes components and program logic to provide application functionality to top-level page . Application library  includes, for example, application objects that may be executed within the context of web-browsing engine  once the application library has been incorporated into top-level page . Additional component library  includes components that may be loaded by library manager  into top-level page  for added functionality. Additional component library  may include, for example, components developed by third-party developers that may be incorporated into applications in application library .",{"@attributes":{"id":"p-0057","num":"0056"},"figref":"FIG. 4","b":["400","250","230","410","410","110","320","130","230","120","320","120","320","230","410","460","400"]},"In step , library manager  loads core component library  into top-level page . Loading creates a new context in top-level page  and loads the components and JavaScript program elements and other data from a library file into the new context. Loading core component library  incorporates the HTML, script, JavaScript program elements, and any other data of core component library  into top-level page . It should be noted that although step  specifies loading core component library , library files from API library , or application library  may also be loaded in step  as would be apparent. The process of loading library files into top-level page  is described in further detail below, in conjunction with . Generally, however, import statements in top-level page  identify library files, such as core component library , to be loaded. Import statements in top-level page , and library files in general identify library files to be loaded.","Library manager  retrieves the library file, and creates a context in top-level page  into which the data from the library file is loaded, such as core component library  in step . An example of such a context is an inline floating frame (\u201ciframe\u201d) or Netscape layer. Both iframes and layers are separate elements within top-level page  that allow JavaScript program elements or other data to be inserted into top-level page  and may be executed as applications by web-browsing engine . Library manager  creates the context in top-level page , using a script, or command executed by web-browsing engine . Examples of the types of script commands that allow the library manager  to create the context include the insertAdjacentHTML or new Layer() commands. After the library manager  creates the context, the JavaScript program elements and data from core component library  is inserted into the new context. After library manager  loads core component library  in step , the process of flowchart  continues at step .","In step , top-level page  receives a reference to application library . An application library is a library file that instantiates an application object. An application object is a JavaScript program element that identifies an application and it's associated program logic within a library file. Top-level page  may receive the reference to application library  in a number of ways, including a URL address, or other information identifying application library  included in top-level page  or another library file. After top-level page  receives the reference to application library  in step , the process of flowchart  continues in step . In step , library manager  loads application library  into a new context within top-level page , as described above. After step , the process of flowchart  continues in step .","In step , library manager  loads libraries referenced by application library  loaded in step . Application library  references other libraries via import statements. Import statements cause library manager  to load the referenced libraries. In step , library manager  loads any library files referenced by application library . Once the referenced library files are loaded in step , the process of flowchart  continues in step .","In step , web-browsing engine  executes the application loaded in step . Library manager  has incorporated new application data, such as JavaScript program elements, components and other data into top-level page . The new application data is included in new context elements, created by library manager . Web-browsing engine  executes the application data within the new contexts, and renders the application at network-enabled device  to user .",{"@attributes":{"id":"p-0063","num":"0062"},"figref":"FIG. 5","b":["500","510","520","530","540","550","500","510","550","510","550","500","510","510","500","510","510","330"]},"Library file  may include components . Components  provide functionality to web-based operating system  and web-based computer application . Preferably, a component is any programmatic element in library file , such as JavaScript program elements, objects, constructors, prototypes, methods, properties, events, etc.","Library file  may also include export statements . Export statements identify particular components of components  that are made available to library files that import library file . Consider, for example, the case in which library file  declares which sub-library files it needs for proper execution in import library header . When library file  is loaded, library manager  loads the sub-libraries identified in import library header . The sub-libraries make their components available to library file  through a process called exporting. If a sub-library file is defined with a component that is exported through an export statement in the sub-library, library manager  incorporates the component's functionality in the program logic of library file . When web-browsing engine  runs the application, library file  may properly reference and use the exported sub-library components.","Library file  may also include application object , which is an instance of an object defined in top-level page . Application object  identifies library file  as an application library file. Application library files contain program logic and may execute as application within a new context, such as an iframe or layer, within top-level page . For example, an application library file may provide the functionality for a window of a word processor, a menu bar, a spreadsheet program, etc. Application logic  is the program logic that implements the application library file. When top-level page  references the application library file, preferably via a URL address, the file is loaded and the function identified by the application object is executed by web-browsing engine .",{"@attributes":{"id":"p-0067","num":"0066"},"figref":"FIG. 6","b":["500","600","602","500","330","500","510","500","320","320","600","604"]},"In step , library manager  determines if library file  has already been loaded into a new context in top-level page . Library manager  loads library files by creating a new context within top-level page , such as an iframe or layer, and loads the library file into it. Library manager  then writes to a data structure, such as an array, mapping the newly created context to the particular library file loaded. In step , library manager  checks the data structure to determine if library file  has yet been loaded. If library manager  determines that library file  has not yet been loaded, the process of flowchart  continues in step .","In step , library manager  accesses and retrieves library file  from its location. The method by which library manager  accesses library file  is dependent upon the nature of the load library event and library file . For example, the locations of core component library  and API library  should be identified in top-level page , since these libraries form part of the core of web-based operating system . Application library , and additional component library , on the other hand, may originate from third party developers, and their location may not be known before the load library event occurs.","Preferably, top-level page  includes a data structure that maps an identifier for library file , such as the name of the file, or other uniquely identifying information, to the location of library file . Library file  may be located anywhere on network , server , network-enabled device , etc. In step , library manager  accesses the data structure, determines the location of, and retrieves, library file . In an alternate embodiment, the load library event may identify the location of library file , such as the URL address of library file . In such cases, library manager  accesses the location of library file  identified by the load library event. After library manager  accesses and retrieves library file  in step , the process of flowchart  continues in step . In step , library manager  creates a new context in top-level page  and loads library file  into it. In step , library manager  creates an entry in a data structure in top-level page  that maps the identifier of library file  to the new context. After step , the process of flowchart  continues in step .","If, on the other hand, in step , library manager  determines that library file  has already been loaded, the process of flowchart  continues in step . Library manager  determines that library file  has already been loaded by checking the data structure in top-level page  where the identifier of library file  is mapped to the new context. If the mapping exists, library manager  determines that library file  has already been loaded.","In step , library manager  determines if library file  identifies any sub-libraries to import Library file  identifies sub-library files to import in import library header , as described above. If library manager  determines library file  does not identify sub-library files in import library header , the process of flowchart  continues in step . If, on the other hand, library file  includes sub-libraries in import library header , the process of flowchart  continues in step . It should be noted, however, that the process for importing a sub-library is the same as that for any library. When library manager  imports a sub-library file, the sub-library file is loaded with the process of flowchart . Using the process of flowchart  to load sub-library files ensures recursive library file loading. For example, sub-library files identified in import library header  may themselves import additional sub-library files (i.e., sub-sub-library files). As such, the process of flowchart  ensures that all sub-library files identified in import library header  are loaded. If library manager  determines that library file  includes an import library header  referencing sub-library files, the process of flowchart  continues in step .","In step , library manager  determines whether the sub-library identified by import library header  has yet been loaded into a context within top-level page . Library manager  checks a data structure in top-level page  to determine if the sub-library file identified in import library header  is associated with a context within top-level page . If the sub-library file has not yet been loaded, the process of flowchart  continues in step . In step , library manager  accesses the location of, and retrieves the sub-library file. The location of the sub-library file may be stored in a data structure of top-level page , or alternatively, passed to library manager  with the import statement in import library header . After library manager  accesses and retrieves the sub-library in step , the process of flowchart  continues in step . In step , library manager  loads the sub-library file, as described above. After library manager  loads the sub-library file in step , the process of flowchart  continues in step .","If, on the other hand, library manager  determines, in step , that the sub-library file identified in import library header  has already been loaded, the process of flowchart  continues in step . In step , library manager  determines if import library header  identifies additional sub-library files to be loaded. If import library header  identifies additional sub-library files, the process of flowchart  continues at step , where steps - are iterated until all of the sub-library files have been loaded. If, on the other hand, library manager  determines there are no additional sub-library files to load, the process of flowchart  continues in step .","In step , library manager  adds components and JavaScript program elements exported by sub-library files to library file . The exported components are added to library file  for purposes of code reuse and rapid application development, as are the goals of the typical component-based development model. For each component exported by a sub-library, library manager  creates an entry in a data structure, such as an array, in top-level page . The entry identifies the sub-library that includes the component, a component identifier (i.e., name), and the context identifier, such as the name of the iframe or layer, into which the sub-library was loaded. When library file  is loaded into a new context, library manager  replaces the references to sub-library components with the context identifier for the sub-library and component name. This, effectively, maps the components from the sub-library context into the context of library file  via conventional inter-frame scripting.","In conventional JavaScript inter-frame scripting, program logic in a first context is able access the components and objects within a second context. The program logic in the first context, however, must explicitly identify the second context when instantiating objects defined within the second context. Because the present invention loads library files dynamically, the identities of contexts that include components and JavaScript program elements are not fixed, and therefore cannot be explicitly identified by program logic of application library files.","Library manager  removes the requirement that library file  explicitly refer to the context of a sub-library by maintaining a map between components, and the identity of library file contexts that include them. When a new library file is loaded, library manager  replaces references to sub-library components in the new library file with the identities of the contexts in which the sub-library components are loaded. When the new library file is loaded into a context, therefore, it explicitly identifies the context of the sub-library that includes the components.","In summary, the present invention provides a component-based development model for the development and implementation of web-based operating system  and web-based computer application . Components form core component library  and API library  are loaded into top-level page  by library manager  for use by web-based operating system . Library manager  loads application library  into to level page , and also loads any additional component library  referenced by application library . Once application library  and any related component libraries have been loaded into top-level page , web-browsing engine  executes top-level page  to provide web-based operating system  and web-based computer application  functionality to user  at network-enabled device .","Typically, applications executing within the context of web-browsing engine  are not persistent. Top-level page  and the associated component and application library files are preferably downloaded via network  to network-enabled device  and execute within the context of web-browsing engine . When user  exits the browser application or reboots network-enabled device , the downloaded files are usually discarded. Upon restart, or when reloading web-browsing engine , user  accesses top-level page  and the associated application and component library files by, once again, accessing them via network . The operation of web-based operating system  and web-based computer application , therefore is not persistent. This lack of persistence of the web-based operating system and web-based computer applications provides for a payment model based on the usage of particular web-based computer applications, since user  must have access to download for each use. Pay per use charges with web-based computer applications are a more desirable alternative to the pay per instance of conventional locally loaded computer application.","While the invention has been described in detail and with reference to specific embodiments thereof, it will be apparent to one skilled in the art that various changes and modifications can be made therein without departing from the spirit and scope thereof. Thus, it is intended that the present invention cover the modifications and variations of this invention provided they come within the scope of the appended claims and their equivalents."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing and other features and advantages of the invention will be apparent from the following more particular description of a preferred embodiment of the invention, as illustrated in the accompanying drawings.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
