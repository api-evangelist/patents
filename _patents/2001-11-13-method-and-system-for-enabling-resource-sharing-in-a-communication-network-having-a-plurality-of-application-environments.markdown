---
title: Method and system for enabling resource sharing in a communication network having a plurality of application environments
abstract: A method for enabling resource sharing in a communication network supporting a plurality of application environments. Specifically, one embodiment of the present invention discloses a method ensuring only sufficient computational resources are used by a multi-component system as needed to meet its service level objectives. A method is disclosed wherein quality of service is monitored at each component in a multi-component application environment. A metric characterizes quality of service for each component. The method determines whether the quality of service at each component meets an associated service level objective. The method then optimizes the number of computational resources in each of components in the application environment to satisfy service level objectives.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07062558&OS=07062558&RS=07062558
owner: Hewlett-Packard Development, L.P.
number: 07062558
owner_city: Houston
owner_country: US
publication_date: 20011113
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND ART","DISCLOSURE OF THE INVENTION","BEST MODES FOR CARRYING OUT THE INVENTION","Notation and Nomenclature","Resource Sharing in Application Environments"],"p":["The present invention relates to the field of quality of service measurement and control in computer systems. More specifically, the present invention relates to resource sharing in a communication network having a plurality of application environments.","Application environments are characterized by one or more independent computer systems in one or more administrative domains that are loosely coupled by networks and cooperate to provide computing resources for a global application. The extent and capabilities of each administrative domain are usually determined by the network boundaries of each distinct supplier or service provider.","For example, to break down complexity for a web-based communication network, an application environment could comprise a multi-component system, where each component is an administrative domain. The components can include a web server component, an application component, a database component, among others. The application environment is descriptive of many web shopping systems, but is also applicable to local networks servicing specific business enterprises supporting a specific need, such as application environments set up specifically for processing payroll.","Previously, application environments were optimized according to a single and static condition, e.g., a peak load condition. As such, the application environment would be originally configured to ensure operation even under peak load conditions. In particular, each of the components of the application environment would be configured accordingly to contain the correct ratio of computational resources (e.g., CPUS, database storage resources, networking resources, etc.) as compared to the other components under peak load conditions. Moreover, the application environment would be optimized to contain the maximum number of computational resources.","As such, a specific problem in the prior art application network is that dedicated computational resources (e.g., computer processing units (CPUs), memory, etc.) would go unused thereby wasting usable computational resources. Since peak load conditions occur infrequently, the application environment was not configured to efficiently use its computational resources some of the time.","Another problem associated with the prior art is the inability of the application environment to easily meet changing demands or an increasing number of users. A change in focus or demand would necessarily change the optimization parameters for each of the components in the application environment. For example, in the web shopping scenario, if an application environment was originally configured to support shopping for appliances via a single image and text interface, the number of resources in the application environment would change if the focus of the application environment were subsequently changed to support shopping for appliances via a video and text interface. Also, if user demand shifted from supporting one line of products to a sudden demand for two or more lines of products, the number of resources in the application environment would necessarily have to change to support the new demand. In another scenario, the number of resources needed would also change if the focus of the application environment is changed, such as, when changing from an environment supporting retail to one supporting scientific research. Similarly, if the number of users increased beyond that envisioned under peak load conditions, the original configuration would be unable to handle the newer peak load conditions.","Thus, a need exists for ensuring efficient use of computational resources when meeting quality of service objectives in an application environment.","The present invention provides a method and system for enabling resource sharing in a communication network supporting a plurality of application environments. The present invention provides for measuring quality of service in an application environment to better meet overall quality of service objectives in a changing environment. In addition, the present invention provides for efficient use of computational resources (e.g., host computer, storage resources, networking resources, etc.) when meeting quality of service objectives in an application environment.","Specifically, one embodiment of the present invention discloses a method for ensuring only sufficient computational resources are used by a multi-component system as needed to meet its service level objectives. A method is disclosed wherein quality of service is monitored locally at each component in a multi-component application environment. A metric (e.g., response time metric) characterizes quality of service for each component. The method determines whether the quality of service at each component meets an associated service level objective. The method then optimizes the number of servers in each of the components in the application environment to satisfy service level objectives.","Another embodiment discloses a system for ensuring only sufficient computational resources are used in a multi-component system that is an application environment. A dynamic resource manager monitors quality of service for a particular application environment. Based on localized metrics that measure performance at each of the components of the application environment, the dynamic resources manager determines whether service level objectives are met. Component managers, one at each of the components, determines the metrics for the application environment and sends the metrics to the dynamic resource manager.","For each component, the dynamic resource manager compares the associated metric against an interval of the corresponding service level objective. A message to add at least one server is sent by the dynamic resource manager to the respective component manager when the metric does not meet the interval for that corresponding component. A message to remove at least one server in the component is sent by the dynamic resource manager to the respective component manager when the metric exceeds the interval for that corresponding component. No action is taken by the dynamic resource manager when the metric falls within the interval, indicating that the service level objective for that corresponding component is satisfactory.","These and other benefits of the present invention will no doubt become obvious to those of ordinary skill in the art after having read the following detailed description of the preferred embodiments which are illustrated in the various drawing figures.","Reference will now be made in detail to embodiments of the present invention, a method for ensuring efficient use of computational resources in an application environment, examples of which are illustrated in the accompanying drawings. While the invention will be described in conjunction with the preferred embodiments, it will be understood that they are not intended to limit the invention to these embodiments. On the contrary, the invention is intended to cover alternatives, modifications and equivalents, which may be included within the spirit and scope of the invention as defined by the appended claims.","Furthermore, in the following detailed description of the present invention, numerous specific details are set forth in order to provide a thorough understanding of the present invention. However, it will be recognized by one of ordinary skill in the art that the present invention may be practiced without these specific details. In other instances, well known methods, procedures, components, and circuits have not been described in detail as not to unnecessarily obscure aspects of the present invention.","Some portions of the detailed descriptions which follow are presented in terms of procedures, steps, logic blocks, processing, and other symbolic representations of operations on data bits that can be performed on computer memory. These descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. A procedure, computer executed step, logic block, process, etc., is here, and generally, conceived to be a self-consistent sequence of steps or instructions leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually, though not necessarily, these quantities take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared, and otherwise manipulated in a computer system. It has proven convenient at times, principally for reasons of common usage, to refer to these signals as bits, values, elements, symbols, characters, terms, numbers, or the like.","It should be borne in mind, however, that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussions, it is appreciated that throughout the present invention, discussions utilizing terms such as \u201caccessing,\u201d or \u201cprocessing,\u201d or \u201ccomputing,\u201d or \u201ctranslating,\u201d or \u201ccalculating,\u201d or \u201cdetermining,\u201d or \u201cscrolling,\u201d or \u201cdisplaying,\u201d or \u201crecognizing,\u201d or the like, refer to the action and processes of a computer system, or similar electronic computing device, that manipulates and transforms data represented as physical (electronic) quantities within the computer system's registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage, transmission or display devices.","Referring now to , portions of the present invention are comprised of computer-readable and computer-executable instructions which reside, for example, in computer-readable media of an electronic system, such as, a dynamic resource manager, a component manager, a database server, and the like, in an application environment.  is a block diagram of interior components of an exemplary electronic system , upon which embodiments of the present invention may be implemented.",{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 1","b":["100","100","120","101","120","102","120","101","103","120","101"]},"Exemplary electronic system  also includes an optional data storage device  (e.g., memory card, hard drive, etc.) coupled with the bus  for storing information and instructions. Data storage device  can be removable. Exemplary electronic system  also contains an optional electronic display device  coupled to the bus  for displaying information to a user. The display device  utilized with the electronic system  may be a liquid crystal device, cathode ray tube (CRT), field emission device (FED, also called flat panel CRT) or other display device.","With reference still to , an optional signal Input\/Output device  which is coupled to bus  for providing a communication link between electronic system  and a network environment is described. As such signal Input\/Output device  enables the central processor unit  to communicate with or monitor other electronic systems or coupled to a communication network.","Accordingly, the present invention provides a method and system for enabling resource sharing in a communication network supporting a plurality of application environments. The present invention provides for measuring quality of service in an application environment to better meet overall quality of service objectives in a changing environment. In addition, the present invention provides for efficient use of computational resources when meeting quality of service objectives in an application environment.","Throughout the body of this Application, the term \u201ccomputational resource\u201d refers to resources such as, servers to include networking and database servers, host computers, database storage units, and the like.",{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 2","b":["200","200","200"]},"Combining computational resources together with permanent connections, e.g., via cable, or temporarily through telephone or other communication links, form individual networks having computational resources. The computational resources are distributed at nodes that could be located in different geographical locations. Further, computational resources in a particular network can be added or deleted, as necessary, to make the network scalable. An individual network comprised of various computational resources located on different nodes can support a particular application to form an application environment.","Exemplary communication network  shows two application environments  and  that operate independently from each other. However,  is for purposes of illustration only, and exemplary network  could handle any number of application environments. In addition, network  may be comprised of multiple networks that are conjoined or adaptively coupled for supporting one or more application environments. Each of the networks are arranged to support various applications, such as networking, storage, communications, and the like.","Referring back to , within each application environment, one or more administrative domains are provided, and hereinafter referred to as components. Each component is interconnected with at least one other component to form the application environment. In one embodiment, components are physically located in various networks in various geographical locations. In another embodiment, components are physically located in one electronic device (e.g., mainframe computer) that is partitioned into scalable, and flexibly sized virtual components.","For example, three components are interconnected to comprise application environment : component-A , component-B , and component-Z . Component-A  is comprised of computational resources at nodes and is managed by a component manager-A at node A. Component-B  is comprised of computation resources at nodes and is managed by a component manager-B at node B. Component-Z  is comprised of computational resources at nodes and is managed by component manager-Z at node Z. A dynamic resource manager  manages the monitoring of quality of service throughout the application network .","Also, three components are interconnected to comprise application environment : component-A\u2032 , component-B\u2032 , and component-Z\u2032 . Component-A\u2032  is comprised of computational resources located at four separate nodes. Component-B\u2032  is comprised of computational resources located at five separate nodes. Component-Z\u2032  is comprised of computational resources located at two separate nodes. A dynamic resource manager  manages the monitoring of quality of service throughout the application network .","Each of the nodes throughout an application environment contains a computational resource. In one embodiment, the resources may include a central processing unit, memory (e.g., storage units), Input\/Output interface, such as, a keyboard and display and network connection interface. Computational resources can be further combined into the various components of an application environment. Each of the components are structured to perform a particular function. For example, an application environment may comprise, among others, a web server component for handling web related connections, an application component for processing the request, and a database component for maintaining and storing data.","In a virtual network environment, where the computational resources are connected through logical or virtual connections, an exemplary data center manager  coordinates the distribution and allocation of computational resources between the various independent virtual networks or application environments. In this way, physical computational resources that originally are assigned to one application environment at one particular time may be assigned to another application environment at another time. Also, the computational resource may change functionality from one environment to another. As such, efficient use of the computational resources can be accomplished. Network  may contain at any particular time a pool  of available computational resources (e.g., computational resources and beyond) ready to be integrated into the various application environments supported by the network . The data center manager  communicates directly with each of the component managers in the network  to coordinate the allocation and removal of computational resources from those components.","Middleware applications allow for the different nodes in an application environment to recognize and communicate with each other. Advances in middleware allow for the formation of scalable virtual networks (e.g., an application environment) that can expand and contract. The expansion and contraction occurs transparently to the user of the application environment. For example, the addition of a computational resource to an application environment requires that each of the components and various nodes in those components in the application environment recognize the new computational resource in order to fully utilize the new resources in supporting the application. In this way, the data center (e.g., network ) that supports multiple application environments can be provisioned for peak loads, instead of having each application environment (e.g., environment  or ) individually provisioned for peak loads.","Middleware applications implement the necessary application programming interfaces to integrate the new computational resource into the application environment. As such, a new computational resource that is added to a database component is recognized by the application component and the other components of the application environment and vice versa. Similarly, middleware allows for the seamless and transparent removal of computational resources from an application environment.","For example, application environment , to meet increased user demand, may require the integration of an available server from the pool  of available servers. The server may be added to component-Z . Middleware allows for communication between the component manager-Z at node Z of environment  and the data center manager  to coordinate the assignment of server to component-Z  at a node (not shown). Middleware allows for the further integration of server into the application environment  as a whole.","For purposes of the present Application, a method for determining local and remote service level objectives is described in U.S. Pat. No. 6,003,079, SYSTEM AND METHOD FOR CONTINUOUSLY MEASURING QUALITY OF SERVICE IN A FEDERATED APPLICATION ENVIRONMENT, to Friedrich, et al. that is herein incorporated by reference as background material.","Performance for each of the distributed components in an application environment can be measured using quality of service metrics. Quality of service (QOS) performance for each component can be identified and diagnosed based on information obtained by the metrics. The performance measuring QOS can occur over a specific interval based on time, data collected, etc. For purposes of this Application, a performance metric is a unit of measurement for obtaining and analyzing the levels of the quality of service and performance received.","In one embodiment, quality of service objectives for an application environment can be broken down into local and remote service level objectives based on response-time metrics measured for local and remote performance at each node, in accordance with one embodiment of the present invention.","For each node, performance can be measured as local performance and remote performance, in accordance with one embodiment of the present invention. Local performance can be a measure of processing time on the local node in an application environment. For example, local performance can be a measure of service demand and queuing time for access to local host resources at the local node (e.g., time waiting for access to the local CPU, time spent accessing memory, time spent accessing I\/O interface, etc.). Remote performance is a measure of all remaining processing time that is not on the local node in the application environment. For purposes of this Application, metrics are used to identify performance measurement characterizing quality of service both in the local and remote components.","As a function of service performance as measured by metrics, local service level objectives can be defined for each of the components of an application environment. As a conglomerate, a global service level objective for the entire application environment can be designed by combining each of the local service level objectives.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":["FIG. 3","FIG. 3"],"b":["300","320","1","300","322","320","320","310","300"]},"Local resources are utilized to process the request at component-A . For example, CPU and memory may be used at one of the computational resources  in component-A . Time and resources spent establishing the connection and utilizing resources at the local component-A  are defined as local performance of service.","In step  of , the processing of the request then flows to component-B  in the application environment  and is received at a computational resource  associated with the remote component-B . The remote component-B  may comprise the application servers for performing the data manipulation of the request (e.g., processing an order request for goods). At this point a remote performance of service is measured in reference to the local performance measured at component-A . Performance of service at the local component-A  is suspended.","Computational resources are utilized to process the request at component-B . For example, CPU and memory may be used at one of the computational resource  in component-B  (e.g., to process an order request for goods in a web shopping environment).","In step , the reply from the computational resource  at remote component-B  (e.g., a confirmation of the order request) is sent back to the computational resource  at the local component-A . At this point, remote service processing is complete or suspended as resources at the local component-A  are used to send the reply back to the user , as illustrated in step .","As a result, for a particular I\/O operation, performance of the application environment can be broken down into local and remote processing times for each of the components in the application environment. Elapsed time, or an end-to-end processing time in reference to a particular local component is equal to the sum of the local processing time plus the remote processing time of a particular operation, such as, processing a request.",{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 4","b":["400","470"]},"A service level objective can be defined for the local component and is represented by the upper and lower boundaries  and  respectively. The service level objective can be represented as an interval  as defined by the upper and lower boundaries  and  respectively. The upper boundary represents the maximum amount of time that can be spent processing at the local component for a particular data interval (e.g. a processing a single request) while still satisfying the service level objective. The lower boundary represents a minimum amount of time needed that is spent processing at the local component for that particular data interval.","Going below the lower boundary exceeds the service level objective indicating too many computational resources are being utilized at that component. For example, referring back to , if the response time metric for component-A  indicates that too many computation resources are being utilized, then the component manager-A (e.g., manager A of ) may decide to remove the computational resource-c in component .","Defining a service level objective at the local component provides a benchmark for ensuring an adequate number of computation resources are used at this particular local component are utilized. As long as the right number of computational resources are assigned to the local component, its associated service level objective will be satisfied.","Point-Z  in  shows that the response-time metrics characterizing local performance of service do not satisfy the service level objective. Point-Z  indicates that too much time is spent on processing at the local component for the particular data interval. As such, point-Z  exceeds the interval  as set by the upper and lower boundaries  and , respectively. Exceeding the interval  indicates that computational resources need to be added to the local component.","Conversely, point-X  in  shows that the response-time metrics characterizing local performance of service exceed the service level objective. Point-X  indicates that too little time is spent on processing at the local component for the particular data interval. As such point-X  falls short of the interval  as set by the upper and lower boundaries  and , respectively. Falling short of the interval  indicates that computational resources needed to be removed from the local component. The removed computational resources can be utilized in other application environments that are not meeting their service level objectives.","In this way, by satisfying the interval , only sufficient computational resources are used at the local component. By following the service level objectives at each of the components of an application environment, this ensures only sufficient computational resources are used by the multi-component application environment as needed to met its service level objectives. Furthermore, by ensuring only sufficient amounts of computational resources are used in satisfying service level objectives, pools of unused resources can be created and made available for sharing by other application environments that need those available resources.",{"@attributes":{"id":"p-0058","num":"0057"},"figref":"FIG. 5","b":"500"},"The present embodiment exploits a feedback loop that compares and analyses measures of local performance of service against service level objectives. By focusing on local service level objectives, the behavior of each component is decoupled from the behavior of the other components in the application environment. This permits the capacity of the computational resources associated with each component to fluctuate according to demands on the application environment. As such, the application environment can change over time and ensures that only sufficient computational resources are allocated as needed to meet service level objectives. Application environments are constantly changing due to fluctuations in user demand, a change in the kinds of work being performed in that environment, among others.","The present embodiment implements the method of flow chart  in a system similar to the exemplary communication system  of . The present embodiment receives metrics from one of a plurality of components, a particular component, in an application environment, in step . The metrics can be standardized quality of service metrics as measured by a component manager at the particular component, such as, response-time metrics. The component manager is responsible for sending the metric to a dynamic resource manager on a design specific periodic basis. The component manager can also send the metric upon a request for such from the dynamic resource manager, in accordance with another embodiment of the present invention. The dynamic resource manager may be located on an independent node of the application environment.","The particular component has an associated service level objective along with a corresponding interval. The present embodiment, in step , at the dynamic resource manager, compares the metric received against the associated service level objective and corresponding interval.","In step , the intelligence located at the dynamic resource manager is able to determine whether the metric satisfies the corresponding service level objective. If the metric exceeds a corresponding interval, then the flow chart  proceeds to step . In other words, if the metric exceeds the upper boundary of the interval, then the service level objective is not satisfied.","In step , the dynamic resource manager sends a message to the particular component in question to add an instance or replicate of the component. In other words, the message sent indicates at least one of a computational resource, e.g., a server, needs to be added to the particular component. The component manager receives the message and using its own resources, communicates with the data center manager to allocate and integrate an available server from one of its server pools to the particular component.","Referring back to step , if the metric does not exceed the corresponding interval, then flow chart  proceeds to step . In step , the present embodiment has the intelligence at the dynamic resource manager to determine whether the metric satisfies the corresponding service level objective. If the metric falls short of the corresponding interval, then the flow chart  proceeds to step . In other words, if the metric falls below the lower boundary of the interval, then the service level objective is exceeded.","In step , the dynamic resource manager sends a message to the particular component in question to remove an instance or replicate of the component. In other words, the message sent indicates at least one of a computational resource, e.g., a server, that is assigned to the component needs to be removed from the particular component. The component manager receives the message and using its own resources, communicates with the data center manager to remove an available server and allocate it to one of the pools of available servers in the communication system.","Referring back to step , if the metric does not fall short of the corresponding interval, then flow chart  proceeds to step . In step , the present embodiment has the intelligence at the dynamic resource manager to determine whether the metric satisfies the corresponding service level objective. If the metric falls within the corresponding interval, indicating that the service level objective was satisfied, then no further action is necessary for that particular component and the process in flow chart  ends.","The process in flow chart repeats itself with every receipt of a metric at the dynamic resource manager associated with an application environment. As such, the method outlined in flow chart  is able to process and analyze multiple metrics received at a dynamic resource manager for an application environment containing multiple components. In this way, the present embodiment ensures that only sufficient computational resources are used to meet service level objectives for each of the components in an application environment.","While the methods of embodiments illustrated in flow chart  show specific sequences and quantity of steps, the present invention is suitable to alternative embodiments. For example, not all the steps provided for in the method are required for the present invention. Furthermore, additional steps can be added to the steps presented in the present embodiment. Likewise, the sequences of steps can be modified depending upon the application.","A method for enabling resource sharing in a network having a plurality of application environments, is thus described. While the present invention has been described in particular embodiments, it should be appreciated that the present invention should not be construed as limited by such embodiments, but rather construed according to the below claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
