---
title: Inter-extension messaging
abstract: According to one general aspect, a computer-implemented method may include implementing, in a web browser executing on a computing device, a first extension process. The first extension process may be functionally isolated from a second extension process that is implemented in the web browser. The method may also include presenting, by the first extension process, a public messaging interface. The method may further include receiving, by the first extension process via the public messaging interface, a messaging request from the second extension process, the messaging request including a unique extension ID of the second extension process. The method may also include determining, by the public messaging interface, whether to accept or reject the messaging request based on the first unique extension ID.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09477534&OS=09477534&RS=09477534
owner: Google Inc.
number: 09477534
owner_city: Mountain View
owner_country: US
publication_date: 20110518
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This application claims the benefit, under 35 U.S.C. \u00a7119, of U.S. Provisional Patent Application No. 61\/345,999 (titled \u201cInstallable Web Applications\u201d), U.S. Provisional Patent Application No. 61\/346,000 (titled \u201cWeb Store for Digital Goods\u201d), and U.S. Provisional Patent Application No. 61\/346,013 (titled, \u201cChrome Extensions\u201d), all filed May 18, 2010. The disclosures of these provisional patent applications are incorporated herein by reference in their entirety.","This application relates, in general, to message passing between browser extensions.","Use of the World Wide Web continues to increase, as does the amount and variety of content that is available to its users. Users of the World Wide Web commonly use browsers (web browsers) implemented on a web-enabled computing device to access content. Such devices include personal computers, laptop computers, netbook computers, smartphones and cell phones, among a number of other possible devices. Such web browsers are configured to read programmatic code and render that code as web pages, which may include rendering both audio and visual content contained in various media files (e.g., image, video and audio files), as well as performing other functions defined in the programmatic code. Web pages are generally implemented using standard programming languages such as HTML, HTML5, CSS and JAVASCRIPT, among a number of other available programming languages.","Some browsers allow users to install add-ons (or extensions) to the browser, where such extensions add functionality to the browser and operate as an integrated part of the browser. For instance, an extension may provide a user access to its additional functionality by modifying a user-interface (UI) of the browser. As an example, a weather forecast extension may be added to a browser, where the extension provides easy access to weather information by adding an icon or a button to the UI of the browser. A user may then interact with the extension's button or icon (e.g., by clicking it or hovering over it with a pointing device) to obtain weather information, rather than having to browse to a weather related web page in order to obtain weather information.","Browser extensions are generally implemented using programmatic code that is written using the same programming languages that are used for implementing web pages. From a browser's perspective, extensions effectively function as web pages that are an integrated part of the browser once they are installed. By installing extensions that are of interest to him or her, a user can effectively create a custom browser that includes the functionality of the extensions they choose to install.","In certain embodiments, extensions installed in a browser run in an \u201copen environment\u201d where the extensions are able to read from and also write to, and\/or modify, each other's programmatic code, which allows extensions to readily share information with each other and, if properly written, work in concert with one another. Such an approach, however, raises a number of concerns. For instance, poorly written extensions (e.g., extensions containing bugs) could inadvertently modify another extension or interfere with its operation and thus, modify one or more of the other extension's functions, or disable the other extension all together. Such situations may also affect the performance and\/or functionality of the browser. Another concern presented by running extensions in an open environment is that a malicious actor could distribute an extension that masquerades as a legitimate extension but is configured to modify one or more other extensions that are installed in the browser to perform malicious acts. Such malicious acts may include collecting personal information and the sending that information to the malicious actor.","In order to address the concerns presented by running extensions in an open environment, a browser may run each of its installed extensions in an isolated process, where the individual extensions do not have the ability to read and write each other's programmatic code. While such an approach addresses the concerns discussed above, it presents other concerns. For instance, such an approach prevents legitimate, well-formed extensions from working cooperatively with each other. Thus, one extension cannot leverage the features of another extension and would need to include code for implementing features that it may otherwise leverage from other extensions. Accordingly, the time and cost for developing an extension that will operate in an isolated process may increase as compared to an extension that operates in a well-behaved, open environment.","According to one general aspect, a computer-implemented method may include implementing, in a web browser executing on a computing device, a first extension process. The first extension process may be functionally isolated from a second extension process that is implemented in the web browser. The method may also include presenting, by the first extension process, a public messaging interface. The method may further include receiving, by the first extension process via the public messaging interface, a messaging request from the second extension process, the messaging request including a unique extension ID of the second extension process. The method may also include determining, by the public messaging interface, whether to accept or reject the messaging request based on the first unique extension ID.","According to another general aspect, a computer-implemented method may include implementing, in a web browser executing on a computing device, a first extension process having a first unique extension identification (ID). The method may also include implementing, in the web browser, a second extension process having a second unique extension ID. In various embodiments, the first extension process and the second extension process may be functionally isolated from each other. The method may include presenting, by the first extension process to the second extension process, a first messaging interface. The method may further include presenting, by the second extension process to the first extension process, a second messaging interface. The method may also include sending, by the first extension process via the first messaging interface, a messaging request to the second extension process, the messaging request including the first unique extension ID and the second unique extension ID. The method may include receiving, by the second extension process via the second messaging interface, the messaging request. The method may also include determining, by the second messaging interface, whether to accept or reject the messaging request based on the first unique extension ID.","According to another general aspect, a recordable storage medium may have recorded and stored thereon instructions that, when executed by a computing device, cause the computing device to implement, in a web browser executing on the computing device, a first extension process, the first extension process being functionally isolated from a second extension process that is implemented in the browser. The instructions may cause the computing device to present, by the first extension process, a public messaging interface. The instructions may cause the computing device to receive, by the first extension process via the public messaging interface, a messaging request from the second extension process, the messaging request including a unique extension ID of the second extension process. The instructions may cause the computing device to determine, by the public messaging interface, whether to accept or reject the messaging request based on the first unique extension ID.","According to another general aspect, a recordable storage medium may have recorded and stored thereon instructions that, when executed by a computing device, cause the computing device to implement, in a web browser executing on a computing device, a first extension process having a first unique extension identification (ID). The instructions may cause the computing device to implement, in the web browser, a second extension process having a second unique extension ID, the first extension process and the second extension process being functionally isolated from each other. The instructions may cause the computing device to present, by the first extension process to the second extension process, a first messaging interface. The instructions may cause the computing device to present, by the second extension process to the first extension process, a second messaging interface. The instructions may cause the computing device to send, by the first extension process via the first messaging interface, a messaging request to the second extension process, the messaging request including the first unique extension ID and the second unique extension ID. The instructions may cause the computing device to receive, by the second extension process via the second messaging interface, the messaging request. The instructions may cause the computing device to determine, by the second messaging interface, whether to accept or reject the messaging request based on the first unique extension ID.","According to another general aspect, an apparatus may include a processor and a non-transitory recordable storage medium having instructions recorded thereon. In various embodiments, the apparatus may be configured, as result of executing the instructions, to implement, in a web browser executing on the apparatus, a first extension process, the first extension process being functionally isolated from a second extension process that is implemented in the browser. The apparatus may be configured to present, by the first extension process, a public messaging interface. The apparatus may be configured to receive, by the first extension process via the public messaging interface, a messaging request from the second extension process, the messaging request including a unique extension ID of the second extension process. The apparatus may be configured to determine, by the public messaging interface, whether to accept or reject the messaging request based on the first unique extension ID.","The details of one or more implementations are set forth in the accompanying drawings and the description below. Other features will be apparent from the description and drawings, and from the claims.","A system and\/or method for message passing between browser extensions, substantially as shown in and\/or described in connection with at least one of the figures, as set forth more completely in the claims.","Like reference symbols in the various drawings indicate like elements.",{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 1","FIG. 7","FIG. 1"],"b":["100","100","100","110","120","100","110","120","110","120","112","122"]},"The unique IDs  and  may be generated in a number of ways and used to provide security for inter-extension message passing, such as in the manners described. In an example embodiment, the unique IDs  and  may be generated using respective public\/private encryption key pairs that are assigned or associated with the respective browser extensions. In one illustrative embodiment, such a public\/private encryption key pair may include two 1024 bit encryption keys. In such an embodiment, the private encryption key may be kept relatively secret. For example, in various embodiments, the private encryption key may be shared or only known to both the browser extension developer and a proprietor of a web-based store (e.g., such as an e-commerce site) that distributes the browser extension, for example. Conversely, the public encryption key may be widely or publicly known.","In such an embodiment, one of the encryption keys (e.g., the public encryption key) may be used to produce a hash value that is substantially globally unique. In this context, a \u201ccryptographic hash function\u201d may include a deterministic procedure that takes an arbitrary block of data (e.g., the public encryption key, etc.) and returns a fixed-size bit string, the hash value, such that an accidental or intentional change to the data will change the hash value. In a preferred embodiment, the cryptographic hash function used to produce the hash value may include the Secure Hash Algorithm-Two-Fifty-Six (SHA-256) hash function developed by the United States' National Security Agency (NSA). In such an embodiment, the public\/private encryption key pair may include a Rivest, Shamir and Adleman (RSA) public\/private encryption key pair. It is understood that the above is merely one illustrative example to which the disclosed subject matter is not limited.","In one such embodiment, by generating the hash value from the public key, it may be possible for anyone who knows the public encryption key to generate the hash value. Therefore, the hash value may be widely known or derivable. Further, depending upon the hash function, the hash value may be sufficiently or substantially unique in that no two pieces of starting data (i.e., public keys, etc.) are statistically likely to produce the same resultant hash values. In such an embodiment, the hash value may be thought of as substantially globally unique.","In one embodiment, this hash value may be fairly large. While this may not be undesirable for authentication and signature purposes, as described above, the hash value may be too large to be desirable for identification purposes. However, as computing resources (e.g., memory, processing power, bandwidth, etc.) increase it is understood the desirable length of an identifier (ID) may also increase.","In such an embodiment, the GUID may be derived from the larger hash value. In one embodiment, the GUID may include just the first 128-bits or 32 characters, hex-encoded of the resultant hash value. It is understood that the above is merely one illustrative example to which the disclosed subject matter is not limited.","In some embodiments, this may result in a hex-encoded GUID. In various embodiments, it may be desirable to encode the GUID using another encoding scheme. In one specific illustrative embodiment, hex-encoding may be used for a variety of purposes on the computing device or within the context of the web browser. For example, Internet Protocol version 6 (IPv6) network addresses are generally 128-bit addresses encoded as 32 hex characters. Therefore, it is conceivable that in some embodiments, a web browser may confuse a 32 hex-character IPv6 address with a 32 hex characters browser extension GUID. This may be more likely in embodiments in which the GUID is employed in a URL, as described above. In such an embodiment, the GUID may be re-encoded via a scheme that would not be confused with an IPv6 network address (as a non-limiting example). However, it is understood that the motivations for selecting an encoding scheme for the GUID is not limited to this illustrative example.","In various embodiments, the GUID may be encoding using a scheme that does not include or employ numeric (i.e., the numbers 0-9) values. In one embodiment, this may include converting the hex characters 0-F to the alphabetic characters A-P. In such an embodiment, a simple 1-to-1 mapping may be used in which the hex character 0 becomes the alphabetic character A; the hex character 1 becomes the alphabetic character B; the hex character 3 becomes the alphabetic character C; and so forth. In such an embodiment, the hex-encoded value \u201c01:01:23:51:CD:71:A6:14:8B:AF:D7:65:02:31:BA:35\u201d may become the alphabetic encoded value \u201cab:ab:cd:fb:mn:hb:kg:be:il:kp:nh:gf:ac:db:lk:df\u201d. In various embodiments, this encoding scheme may be referred to as \u201cmpdecimal\u201d. It is understood that the above is merely one illustrative example to which the disclosed subject matter is not limited.","Using the unique IDs  and , the Extension_A  and the Extension_B  may implement a messaging protocol that allows them operate in concert with each other, while retaining their functional isolation and thus avoiding the threats associated with operating in an open execution environment.","To provide for implementing secure, inter-extension messaging passing in the browser , each of the extension processes  and  presents a public messaging application programming interface (API),  and , respectively, the other extension process. The public messaging APIs  and  may be configured to securely pass messages between each other using the unique IDs  and  as a filtering mechanism. While only two extension processes,  and , are shown and described herein, it will be appreciated that additional extensions may be implemented in the browser  and the techniques described herein would apply equally to those additional extensions.","In the browser , the public messaging APIs  and  may communicate messages to one another over a communication channel . Depending on the particular situation, the communication channel  may be configured to accomplish one-time message transactions (e.g., a single message, or a single message and a corresponding response) or the communication channel may be configured as an open messaging channel that may be used for communicating multiple messages and responses in an extended messaging conversation between the extension processes  and .","For purposes of this disclosure, the first message in a given messaging session (whether it is for a one-time message transaction or an extended messaging conversation) is referred to as a messaging request. It will be appreciated that different terms could be used to reference the first message in a one-time message transaction, as compared to the terms for a first message in an extended messaging conversation. It will also be appreciated that the implementation details of the first messages for different types for different types of messaging sessions may be different. For instance, the public messaging APIs may use different functions to indicate the type of messaging session that is desired. For example, a sendRequest function may be used to initiate a one-time messaging transaction, while a connectExternal function may be used to initiate an extended messaging conversation.","As indicated, the public messaging APIs may use the unique IDs  and  of the extension processes  and  as a filtering mechanism when implementing secure inter-extension message passing. As are described herein, messaging requests (initial messages in given messaging sessions) include the unique ID of the sending extension and also include the unique ID of the receiving extension. For example, if the Extension_A  wants to initiate a messaging session with the Extension_B  (e.g., a one-time messaging transaction or an extended messaging conversation), the Extension_A  may send a messaging request to the Extension_B  that includes the unique ID  as the sender's unique ID and the unique ID  as the receiver's unique ID, along with content of a message that the Extension_A  wishes to pass to the Extension_B .","As is discussed herein, each public messaging API  and  may comprise one or more event listener objects that are configured to identify the type of messaging requests that are being sent to their corresponding extension. For instance, if the public messaging API  sends a messaging request to the public messaging API  the messaging request, in this example, would include the unique ID of the Extension_B  as the receiver unique ID. The public messaging API , based on the receiver unique ID may then receive the messaging request.","The public messaging API  may then determine whether to accept or reject the messaging request by comparing the sender's unique extension ID with a list of trusted extension IDs  (or trusted extension IDs  for messages received at public messaging API ). In such an approach, if it is determined that the sender's unique extension ID is present in the list of trusted extension IDs , the public messaging API , in this example, accepts the messaging request. However, if it is determined that the unique extension ID is not present in the list of trusted extension IDs , the public messaging API  may reject the messaging request.","In an alternative approach, the public messaging API  may determine whether to accept or reject the messaging request by comparing the sender's unique extension ID with a list of untrusted extension IDs  (or untrusted extension IDs  for messages received at public messaging API ). In such an approach, if it is determined that the sender's unique extension ID is not present in the list of untrusted extension IDs , the public messaging API , in this example, accepts the messaging request. However, if it is determined that the unique extension ID  is present in the list of untrusted extension IDs , the public messaging API  rejects the messaging request.","In still another alternative approach, the sender's unique ID may be compared to both a list of trusted extension IDs and a list of untrusted extension IDs. If the user's unique ID is not in either list, the public messaging API  may communicate with the Extension_B  to determine whether or not to accept the messaging request (i.e., whether or not to allow the sending extension to pass messages to the Extension_B , via the public messaging API ).","Determining whether to allow a sending extension to pass messages to the public messaging API  may be accomplished in a number of fashions. As an example, the Extension_B  may prompt the user with a query as to whether message passing access should be accepted or rejected. As another example, the Extension_B  may be configured to access a web resource that includes threat risk assessments for browser extensions. By passing the sending extension's unique ID to the web resource, the Extension_B  may be able to obtain an assessment of whether or not the sending extension is a security (e.g., contains malicious content) or a functional risk (e.g., is poorly formed) and determine whether or not to grant access based on that information, such as by comparing a received threat assessment to a threat tolerance level selected by a user. Of course, a determination whether or not to allow a sending extension to pass messages to the public messaging API  may be made in a number of appropriate fashions. In such an approach, once the determination whether to accept or reject the sender's messaging request is made, the Extension_B  may add the sender's unique ID to the appropriate list, e.g., the list of trusted IDs if a determination to accept the messaging request is made and the list of untrusted IDs if a determination to reject the messaging request is made.",{"@attributes":{"id":"p-0042","num":"0041"},"figref":["FIG. 2","FIG. 1","FIG. 1","FIG. 2","FIG. 1","FIG. 2","FIG. 1","FIG. 2","FIG. 2"],"b":["200","200","100","200"]},"As shown in , the communication channel  of  is shown as two separate communication channels A and B. In the inter-extension messaging architecture , the channel A may be used for accomplishing one-time messaging transactions, and the channel B may be used for extended messaging conversations. As shown in , the communication channel B includes a first port object, Port_A,  that is virtually connected with the public messaging API  and also includes a port object, Port_B,  that is virtually connected with the public messaging API . If a messaging request to set up a messaging channel for an extended messaging conversation is granted in the inter-extension messaging architecture , a channel such as the channel B may be established. Once the channel B is established, messages and responses may be readily passed between the public messaging APIs  and  without the use of unique IDs. Once a given extended messaging conversation is completed, the communication channel B associated with that conversation may be closed. A method of such an approach is discussed in further detail below with respect to .","The inter-extension messaging architecture  also includes a first event listener object  that is included in the public messaging API  and a second event listener object  that is included in the public messaging API . The event listeners  and  may include multiple listener objects, one listener object (e.g., an onRequestExternal.addListener object) to listen for messaging requests for one-time messaging transactions and a second listener object (e.g., an onConnectExternal.addListener object) to listen for messaging requests for extended messaging conversations.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":["FIGS. 3A and 3B","FIG. 3","FIG. 3A"],"b":["300","350","300","130"]},"The messaging request message format  shown in  includes a messaging request type . The messaging request type  may include an object that indicates the type of messaging request (e.g., a one-time request or an extended conversation request) that is being made, such as those discussed herein. The messaging request format  also includes a sender unique ID , which may include the unique ID of an extension that sent the messaging request message . Likewise, the messaging request format  also includes a receiver unique ID  that may include the unique ID of an extension that is an intended recipient of the messaging request . The messaging request  also includes a message content . The message content  may include a one-time message (including a request for a response) or, alternatively, may include a first message in an extended message conversation.","The message\/response format  shown in  may be used to respond to a one-time messaging request. The message\/response format  includes a responder unique ID  and a requestor unique ID . The responder unique ID , in this example, corresponds with the extension that received a messaging request  and the requestor unique IS corresponds with the extension that sent the messaging request . The message\/response format  also includes a response\/message content , which includes the substantive portion of a response to a one-time message request or, alternatively, messages in an extended messaging conversation once a messaging channel is open.","In some embodiments, the message\/response format  may be used for an initial response to an extended messaging conversation. However, once a messaging communication channel, such as the channel B shown in , is established for an extended messaging conversation, associated extensions may communicate messages and responses use only the response message content .",{"@attributes":{"id":"p-0049","num":"0048"},"figref":["FIG. 4","FIG. 1","FIG. 2","FIG. 3","FIG. 4","FIGS. 1-3"],"b":["400","400","100","200","300","350","400"]},"The method  includes, at block  implementing, in a web browser (e.g., the web browser ) executing on a computing device, a first extension process (e.g., the extension process Extension_A ) having a first unique extension identification (ID) (e.g., the unique ID ). The method  further includes, at block  implementing, in the web browser , a second extension process (e.g., the extension process ) having a second unique extension ID (e.g., the unique ID ). As indicated at block , in the method , the first extension process (Extension_A)  and the second extension process (Extension_B)  are functionally isolated from each other, such as was discussed above.","At block , the method  includes presenting, by the first extension process  to the second extension process , a first messaging interface (e.g., the public message API ). At block , the method  includes presenting, by the second extension process  to the first extension process , a second messaging interface (e.g., the public messaging API ).","The method , at block , includes sending, by the first extension process  via the first messaging interface , a messaging request (e.g., the messaging request ) to the second extension process . As shown at block  and in , the messaging request  may include the first unique extension ID (e.g., the sender unique ID ) and the second unique extension ID (e.g., the receiver unique ID ). In this example, the sender unique ID  is the unique ID  of the first extension process  and the receiver unique ID  is the unique ID  of the second extension process .","At block , the method  includes receiving, by the second extension process  via the second messaging interface , the messaging request . At block , the method  includes determining, by the second messaging interface , whether to accept or reject the messaging request  based on the first (sender) unique extension ID . As was discussed above, the second messaging interface , at block , may determine whether to accept or reject the messaging request  based on a comparison of the sender unique ID  with a list of trusted and\/or untrusted extension IDs (e.g., the trusted\/untrusted IDs ).","If, at block , the sender unique ID  matches one of the trusted IDs  and\/or does not match any of the untrusted IDs , the second messaging interface , in this example, would accept the messaging request. If, at block , the sender unique ID  does not match any of the trusted IDs  and\/or matches one of the untrusted IDs , the second messaging interface , in this example, would reject the messaging request .","In the method , how the messaging request  is handled by the second extension process  and its public messaging API  may depend on, in addition to the determination at block , the type of request  that is included in the messaging request . For instance, as discussed above, the messaging request type  of the messaging request  may indicate that the messaging request  is a one-time messaging request, which may or may not require a substantive response from the Extension_B . Alternatively, the messaging request  may indicate that the messaging request  is a request to open a messaging channel (e.g., the messaging channel B) to facilitate a messaging conversation between the Extension_A  and the Extension_B .  illustrate example methods for handling the messaging request  for the different messaging request types, if accepted by the public messaging API , and for handling the messaging request  if it is rejected.",{"@attributes":{"id":"p-0056","num":"0055"},"figref":["FIGS. 5A and 5B","FIG. 5","FIG. 1","FIG. 2","FIG. 3","FIG. 5","FIGS. 1-3","FIGS. 1-3","FIG. 4","FIG. 5"],"b":["500","550","500","550","400","400","500","550","100","200","300","350","500"]},"Referring to , the method  may be used for handling the messaging request  when it is determined by the second messaging interface  that the messaging request  is to be accepted, such as at block  in , and as shown at block  in . For purposes of the method , the messaging request  may comprise either a one-time messaging request or a request to open a messaging channel between the Extension_A  and the Extension_B , such as by using the approaches descried herein.","At block , the method  includes performing one or more operations of the Extension_B in accordance with the messaging request . For example, if the messaging request  is a one-time messaging request that includes a notification to the Extension_B  from the Extension_A , the operations performed at block  may include operations for processing that notification. Alternatively, if the messaging request  specifies that a substantive response is expected, the operations performed at block  may include operations for obtaining information to include in a response to the messaging request .","At block , the method  includes sending, by the second messaging interface  to the first messaging interface , a response (e.g., the message ) indicating that the messaging request  has been accepted. If the messaging request  does not specify that a substantive response is expected, the response  sent at block  may comprise an acknowledgment to the messaging request . This acknowledgment notifies the first messaging interface  that the messaging request  has been received and\/or accepted by the second messaging interface . If the messaging request  does specify that a substantive response is expected, the response may then include information gathered at block , such as was discussed above. In response to receiving the response  (whether an acknowledgment response or a substantive response), the first messaging interface  may clear a request associated with its transmission of the messaging request , so as to indicate that the one-time messaging transaction is complete.","Referring to , the method  may be used for handling the messaging request  when it is determined by the second messaging interface  that the messaging request  is not to be accepted, such as at block  in , and as shown at block  in . For purposes of the method , the messaging request  may comprise either a one-time messaging request or a request to open a messaging channel between the Extension_A  and the Extension_B . However, for the example method , because the second messaging interface  has determined that the messaging request  is to be rejected, the type of request is effectively moot.","At block , the method  includes sending, by the second messaging interface  to the first messaging interface , a response  indicating that the messaging request has been rejected. As described herein, at block , the response message content  of the response  may comprise a null object, which may indicate to the first messaging interface  that the second messaging interface has rejected the messaging request . In response to receiving, at block , the response  that includes a null object as the response message content , the first messaging interface  may clear a request associated with its transmission of the messaging request , so as to indicate that the messaging transaction is complete.",{"@attributes":{"id":"p-0062","num":"0061"},"figref":["FIG. 6","FIG. 1","FIG. 2","FIG. 3","FIG. 5","FIGS. 1-3","FIGS. 1-3","FIGS. 4 and 5","FIG. 6"],"b":["600","600","400","400","500","550","600","100","200","300","350","600"]},"The method  may be used for handling the messaging request  when it is determined by the second messaging interface  that the messaging request  is to be accepted, such as shown at block  in , and as shown at block  in . At block , the method  includes determining that the messaging request  comprises a request to open the messaging channel B (including the port objects  and ) between the first messaging interface  and the second messaging interface .","At block , the method  includes establishing the messaging channel B, which includes, at block , connecting a first messaging port object (e.g., the Port_A ) for the messaging channel B to the first messaging interface , which, as discussed above, for this example, is a virtual connection. Establishing the messaging channel at block  further includes, at block , connecting (e.g., virtually) a second messaging port object (e.g., the Port_B ) for the messaging channel B to the second messaging interface .","At block , the method  includes communicating, via the messaging channel B, a plurality of messages\/responses  between the first extension process  and the second extension process . The messages\/responses  communicated at block  may each comprise a respective JAVASCRIPT Object Notation (JSON) object. Also, the messages\/responses  communicated at block  may omit the ID fields  and , which, depending on the particular embodiment, may not be needed for messages communicated over the messaging channel B, once established at block .","The method  further includes, at block , after communicating the plurality of messages\/response, closing the messaging channel B. Closing the messaging channel B at block  includes, at block , disconnecting (e.g., virtually) the first Port_A  from the first messaging interface . Closing the message channel B at block  further includes, at block , disconnecting (e.g., virtually) the second Port_B  from the second messaging interface . In an example embodiment, closing the messaging channel B at block  may be performed in response to a Port.onDisconnect event that is triggered by either the first messaging interface  or the second messaging interface  calling a Port.disconnect object.",{"@attributes":{"id":"p-0067","num":"0066"},"figref":"FIG. 7","b":["700","750","700","750"]},"Computing device  includes a processor , memory , a storage device , a high-speed interface  connecting to memory  and high-speed expansion ports , and a low speed interface  connecting to low speed bus  and storage device . Each of the components , , , , , and , are interconnected using various busses, and may be mounted on a common motherboard or in other manners as appropriate. The processor  can process instructions for execution within the computing device , including instructions stored in the memory  or on the storage device  to display graphical information for a GUI on an external input\/output device, such as display  coupled to high speed interface . In other implementations, multiple processors and\/or multiple buses may be used, as appropriate, along with multiple memories and types of memory. Also, multiple computing devices  may be connected, with each device providing portions of the necessary operations (e.g., as a server bank, a group of blade servers, or a multi-processor system).","The memory  stores information within the computing device . In one implementation, the memory  is a volatile memory unit or units. In another implementation, the memory  is a non-volatile memory unit or units. The memory  may also be another form of computer-readable medium, such as a magnetic or optical disk.","The storage device  is capable of providing mass storage for the computing device . In one implementation, the storage device  may be or contain a computer-readable medium, such as a floppy disk device, a hard disk device, an optical disk device, or a tape device, a flash memory or other similar solid state memory device, or an array of devices, including devices in a storage area network or other configurations. A computer program product can be tangibly embodied in an information carrier. The computer program product may also contain instructions that, when executed, perform one or more methods, such as those described above. The information carrier is a computer- or machine-readable medium, such as the memory , the storage device , or memory on processor .","The high speed controller  manages bandwidth-intensive operations for the computing device , while the low speed controller  manages lower bandwidth-intensive operations. Such allocation of functions is exemplary only. In one implementation, the high-speed controller  is coupled to memory , display  (e.g., through a graphics processor or accelerator), and to high-speed expansion ports , which may accept various expansion cards (not shown). In the implementation, low-speed controller  is coupled to storage device  and low-speed expansion port . The low-speed expansion port, which may include various communication ports (e.g., USB, Bluetooth, Ethernet, wireless Ethernet) may be coupled to one or more input\/output devices, such as a keyboard, a pointing device, a scanner, or a networking device such as a switch or router, e.g., through a network adapter.","The computing device  may be implemented in a number of different forms, as shown in the figure. For example, it may be implemented as a standard server , or multiple times in a group of such servers. It may also be implemented as part of a rack server system . In addition, it may be implemented in a personal computer such as a laptop computer . Alternatively, components from computing device  may be combined with other components in a mobile device (not shown), such as device . Each of such devices may contain one or more of computing device , , and an entire system may be made up of multiple computing devices ,  communicating with each other.","Computing device  includes a processor , memory , an input\/output device such as a display , a communication interface , and a transceiver , among other components. The device  may also be provided with a storage device, such as a microdrive or other device, to provide additional storage. Each of the components , , , , , and , are interconnected using various buses, and several of the components may be mounted on a common motherboard or in other manners as appropriate.","The processor  can execute instructions within the computing device , including instructions stored in the memory . The processor may be implemented as a chipset of chips that include separate and multiple analog and digital processors. The processor may provide, for example, for coordination of the other components of the device , such as control of user interfaces, applications run by device , and wireless communication by device .","Processor  may communicate with a user through control interface  and display interface  coupled to a display . The display  may be, for example, a TFT LCD (Thin-Film-Transistor Liquid Crystal Display) or an OLED (Organic Light Emitting Diode) display, or other appropriate display technology. The display interface  may comprise appropriate circuitry for driving the display  to present graphical and other information to a user. The control interface  may receive commands from a user and convert them for submission to the processor . In addition, an external interface  may be provide in communication with processor , so as to enable near area communication of device  with other devices. External interface  may provide, for example, for wired communication in some implementations, or for wireless communication in other implementations, and multiple interfaces may also be used.","The memory  stores information within the computing device . The memory  can be implemented as one or more of a computer-readable medium or media, a volatile memory unit or units, or a non-volatile memory unit or units. Expansion memory  may also be provided and connected to device  through expansion interface , which may include, for example, a SIMM (Single In Line Memory Module) card interface. Such expansion memory  may provide extra storage space for device , or may also store applications or other information for device . Specifically, expansion memory  may include instructions to carry out or supplement the processes described above, and may include secure information also. Thus, for example, expansion memory  may be provide as a security module for device , and may be programmed with instructions that permit secure use of device . In addition, secure applications may be provided via the SIMM cards, along with additional information, such as placing identifying information on the SIMM card in a non-hackable manner.","The memory may include, for example, flash memory and\/or NVRAM memory, as discussed below. In one implementation, a computer program product is tangibly embodied in an information carrier. The computer program product contains instructions that, when executed, perform one or more methods, such as those described above. The information carrier is a computer- or machine-readable medium, such as the memory , expansion memory , or memory on processor , which may be received, for example, over transceiver  or external interface .","Device  may communicate wirelessly through communication interface , which may include digital signal processing circuitry where necessary. Communication interface  may provide for communications under various modes or protocols, such as GSM voice calls, SMS, EMS, or MMS messaging, CDMA, TDMA, PDC, WCDMA, CDMA2000, or GPRS, among others. Such communication may occur, for example, through radio-frequency transceiver . In addition, short-range communication may occur, such as using a Bluetooth, WiFi, or other such transceiver (not shown). In addition, GPS (Global Positioning System) receiver module  may provide additional navigation- and location-related wireless data to device , which may be used as appropriate by applications running on device .","Device  may also communicate audibly using audio codec , which may receive spoken information from a user and convert it to usable digital information. Audio codec  may likewise generate audible sound for a user, such as through a speaker, e.g., in a handset of device . Such sound may include sound from voice telephone calls, may include recorded sound (e.g., voice messages, music files, etc.) and may also include sound generated by applications operating on device .","The computing device  may be implemented in a number of different forms, as shown in the figure. For example, it may be implemented as a cellular telephone . It may also be implemented as part of a smart phone , personal digital assistant, or other similar mobile device.","Various implementations of the systems and techniques described here can be realized in digital electronic circuitry, integrated circuitry, specially designed ASICs (application specific integrated circuits), computer hardware, firmware, software, and\/or combinations thereof. These various implementations can include implementation in one or more computer programs that are executable and\/or interpretable on a programmable system including at least one programmable processor, which may be special or general purpose, coupled to receive data and instructions from, and to transmit data and instructions to, a storage system, at least one input device, and at least one output device.","These computer programs (also known as programs, software, software applications or code) include machine instructions for a programmable processor, and can be implemented in a high-level procedural and\/or object-oriented programming language, and\/or in assembly\/machine language. As used herein, the terms \u201cmachine-readable medium\u201d \u201ccomputer-readable medium\u201d refers to any computer program product, apparatus and\/or device (e.g., magnetic discs, optical disks, memory, Programmable Logic Devices (PLDs)) used to provide machine instructions and\/or data to a programmable processor, including a machine-readable medium that receives machine instructions as a machine-readable signal. The term \u201cmachine-readable signal\u201d refers to any signal used to provide machine instructions and\/or data to a programmable processor.","To provide for interaction with a user, the systems and techniques described here can be implemented on a computer having a display device (e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor) for displaying information to the user and a keyboard and a pointing device (e.g., a mouse or a trackball) by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback (e.g., visual feedback, auditory feedback, or tactile feedback); and input from the user can be received in any form, including acoustic, speech, or tactile input.","The systems and techniques described here can be implemented in a computing system that includes a back end component (e.g., as a data server), or that includes a middleware component (e.g., an application server), or that includes a front end component (e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the systems and techniques described here), or any combination of such back end, middleware, or front end components. The components of the system can be interconnected by any form or medium of digital data communication (e.g., a communication network). Examples of communication networks include a local area network (\u201cLAN\u201d), a wide area network (\u201cWAN\u201d), and the Internet.","The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.","A number of embodiments have been described. Nevertheless, it will be understood that various modifications may be made without departing from the spirit and scope of the invention.","In addition, the logic flows depicted in the figures do not require the particular order shown, or sequential order, to achieve desirable results. In addition, other steps may be provided, or steps may be eliminated, from the described flows, and other components may be added to, or removed from, the described systems. Accordingly, other embodiments are within the scope of the following claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIGS. 3A and 3B"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIGS. 5A and 5B"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
