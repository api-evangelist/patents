---
title: Two tier arrangement for threads support in a virtual machine
abstract: A software system with a two tier arrangement for threads support that enhances the adaptability of a virtual machine to differing platforms. The software system includes a virtual machine with a threads interface layer having a set of methods that provide thread support in the virtual machine according to a standard threads interface associated with the virtual machine. The software system includes a native threads interface layer that provides a set of methods that adapt the methods of the threads interface layer to a platform which underlies the software system. The native threads interface layer shields the virtual machine from the particulars of the underlying operating system while the threads interface layer provides a stable interface for application programs and other tasks that benefit from thread support in the virtual machine.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07043725&OS=07043725&RS=07043725
owner: Hewlett-Packard Development Company, L.P.
number: 07043725
owner_city: Houston
owner_country: US
publication_date: 19990709
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["1. Field of Invention","The present invention pertains to the field of software systems. More particularly, this invention relates to a two tier arrangement for threads support in a virtual machine.","2. Art Background","Computer systems and devices having embedded processing resources are typically implemented in a variety of differing architectures. Each architecture is usually defined by a particular instruction set, hardware register set, and memory arrangement, etc. In addition, such computer systems and devices typically include an operating system which is adapted to its particular architecture. The operating system and architecture provide a platform for execution of software tasks.","Typically, software tasks such as application programs which are written or compiled to be executed on a particular platform may be referred to as native code. A software task in the native code of a particular platform usually does not run on other non compatible platforms.","A virtual machines is a software environment that enables application programs to execute on a variety of differing platforms. The application programs which execute under such a virtual machine usually take the form of a stream of instructions each of which conforms to a predefined instruction set supported by the virtual machine. A virtual machine implemented on a particular platform typically interprets each of the instructions in the stream and provides emulation of the instructions in the native code of the particular platform. In addition, a virtual machine may include threads support. Threads support may be defined as functionality that enables the parallel execution of multiple software tasks each of which is referred to as a thread.","One example of a virtual machine that enables application programs to execute on a variety of differing platforms and that provides threads support is a Java virtual machine. A typical Java virtual machine functions as an interpreter for Java application programs. A Java application program typically take the form of a stream of Java byte code instructions and the Java virtual machine emulates each Java byte code instruction using the native code of the particular platform under which the Java virtual machine executes. A typical Java virtual machine provides threads support which is defined by the java.lang.Thread class.","A typical virtual machine invokes various services provided by the operating system of the underlying platform including services that provide threads support. Typically, the nature and extent of such operating system services varies among operating systems. For example, some operating systems provide extensive threads support services while other operating systems provide little or no threads support services. In addition, the details of any threads support services usually varies widely among operating systems. Such variation in operating system services usually complicates the process of adapting a virtual machine to different platforms. Unfortunately, such complications usually increase the development time and cost of implementing virtual machines on different platform. Moreover, such complications usually increase the cost of software support for virtual machines on different platforms.","A software system is disclosed with a two tier arrangement for multi threading in a virtual machine that enhances the adaptability of the virtual machine to different platforms. The two tier arrangement includes a threads interface layer in the virtual machine and an underlying native threads interface layer. The threads interface layer includes a set of methods that provide thread support in the virtual machine according to a standard threads interface associated with the virtual machine. The native threads interface layer includes a set of methods that adapt the methods of the threads interface layer is to a platform which underlies the software system.","The threads interface layer provides a stable interface for application programs and other tasks that benefit from thread support in the virtual machine. The interactions between the threads interface layer and the native threads interface layer are arranged to shield the virtual machine from the particulars of the underlying operating system, thereby enhancing portability of the virtual machine and ease of adapting to upgrades in the underlying operating system.","Other features and advantages of the present invention will be apparent from the detailed description that follows.",{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1","b":["10","12","10"]},"The virtual machine  provides a software environment that enables execution of application programs such as an application program  on a wide variety of differing platforms. The virtual machine  provides a set of standardized programming interfaces to the application program  including standardized interfaces for multi-thread support.","In one embodiment, the virtual machine  is a Java virtual machine and the application program  is a java application. The following description focuses on an example embodiment in which the virtual machine  is a Java virtual machine. Nevertheless, the two tier arrangement for threads support in the software system  is readily adaptable to other types of virtual machines.","The software system  includes an operating system . The operating system  together with a particular hardware architecture for which it is implemented provides a platform for the software system . The operating system  may or may not provide threads support. In addition, any threads support that may be provided by the operating system  may differ in structure and function substantially from the structure and function of threads support defined by the standardized interfaces of the virtual machine .","The two tier structure for thread support according to the present techniques is embodied in a threads interface layer (TIL)  in the virtual machine  and a native threads interface layer (NTIL) . The TIL  provides a standard threads interface for the virtual machine  which does not depend on the underlying platform for the software system  while the NTIL  is adapted to the particulars of the underlying platform including the operating system  which underlies the virtual machine .","The two tier structure provided by the TIL  and the NTIL  enhances the portability of the virtual machine  to differing platforms having differing operating systems. For example, the virtual machine  may be ported to a different platform in which the TIL  provides the standard threads interface to software tasks that execute under the virtual machine  and in which an NTIL implemented for the different platform is used to adapt the TIL  to the particulars of the operating system of the different platform.","In addition, the two tier arrangement provided by the TIL  and the NTIL  simplifies adaptation of the virtual machine  to changes in threads support in the underlying functionality of the operating system . For example, the NTIL  may be modified or a new NTIL provided to adapt to the changes in the operating system . The TIL  remains unchanged and continues to provide the standard threads interface to the application program .","The two tier arrangement for thread support according to the present techniques is illustrated with respect to a set of threads \u2013 which are associated with the application program . The threads \u2013 may be defined as relatively small processes that share an address space and that are executed by the virtual machine  in parallel. The parallel execution may involve context switching among the threads \u2013 if the hardware platform for the software system  provides a single processor architecture. Alternatively, the threads \u2013 may execute concurrently if the hardware platform for the software system  provides a multi-processor architecture or a multi-thread processor in hardware.","The functions performed by the threads \u2013 generally depend on the nature of the application program . For example, if the application program  services a communication socket which receives hypertext transfer protocol (HTTP) commands then each thread \u2013 may have been created to handle a different HTTP command received via the communication socket.","In addition to threads created by application programs, there may be threads associated with the functionality of the virtual machine  such as threads associated with a garbage collection task or just-in-time compiler task to name a few examples. These are just a few examples of the use of threads and it will be appreciated that are numerous other uses for threads in the software system .","Each of the threads \u2013 has a context in terms of the virtual machine  and a context in terms of the underlying platform of the software system  including the operating system . The TIL  maintains the context the threads \u2013 in terms of the virtual machine . In one embodiment, the context of a thread in terms of the virtual machine  includes values in the interpreter registers in a Java virtual machine, i.e. the SP, PC, FP, LVP and NPC registers, and the base of the Java stack. The NTIL  maintains the context of the threads \u2013 in terms of the underlying platform of the software system . The context of a thread in terms of the underlying platform includes values of the machine registers in the underlying processor and the native stack of the underlying platform.","The TIL  provides support in the virtual machine  for spawning multiple threads such as the threads \u2013. In one embodiment, the TIL  is an implementation of the methods in the Java threads class java.lang.Thread and each of the threads \u2013 is viewed by the TIL  as a Java thread object. A Java thread object is an object that implements the run-able interface of Java application programming interface (API). The following is a list of the methods in the Java threads class in one embodiment.\n\n","The methods in the TIL  have analogous methods in the NTIL  which are adapted to the underlying platform of the operating system . For example, the TIL  provides methods for spawning the threads \u2013 in terms of the virtual machine . The NTIL  includes analogous methods for spawning user level threads for the threads \u2013 in terms of the underlying platform of the software system . Similarly, the TIL  includes methods for suspending and resuming Java threads in terms of the virtual machine  and the NTIL  includes analogous methods of suspending and resuming the corresponding user level threads in terms of the platform that underlies the software system .","In the example embodiment, the spawn functionality of the TIL  is provided by an implementation of the start( ) method of the Java threads class. The spawning of a Java thread by the TIL  includes the allocation of the Java stack and initialization of the virtual machine registers SP, PC, FP, LVP and NPC for the Java thread. This creates the Java virtual machine context for the Java thread. The TIL  then uses analogous methods in the NTIL  to spawn a user level thread in terms of the underlying platform of the software system . The TIL  associates the user level thread created by the NTIL  to the Java thread.","The following illustrates the context of each thread \u2013 in terms of the virtual machine  in the example embodiment.",{"@attributes":{"id":"p-0032","num":"0053"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"105pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"JVM_byte","*pc;","> current program counter"]},{"entry":[{},"JVM_byte","*npc;","> next program counter"]},{"entry":[{},"int","sp;","> top of Java app stack"]},{"entry":[{},"int","lvp;","> local variable pointer"]},{"entry":[{},"int","fp;","> frame pointer"]},{"entry":[{},"JVM_word","*stack;","> base of Java app stack"]},{"entry":[{},"char","*refstk;","> base of the reference stack"]},{"entry":[{},"jmp_buf","jbuf;","> jump buffer for external"]},{"entry":[{},{},{},"exceptions"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}}}},"In one embodiment, the thread support methods in the NTIL  are as follows.",{"@attributes":{"id":"p-0034","num":"0055"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Thread threadCreate( . . . )"]},{"entry":[{},"int threadSuspend(Thread)"]},{"entry":[{},"int threadResume(Thread)"]},{"entry":[{},"int threadJoin(Thread)"]},{"entry":[{},"int threadYield( )"]},{"entry":[{},"int threadStop(Thread)"]},{"entry":[{},"int threadSetPrio(Thread)"]},{"entry":[{},"int threadGetPrio(Thread)"]},{"entry":[{},"int threadCurrent( )"]},{"entry":[{},"int scheduler( )"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The NTIL  provides an API for the above-listed methods to the TIL . The methods in the TIL  use this API to send requests to the methods in the NTIL  to perform the particular threads functions in terms of the underlying platform of the software system . The API to the NTIL  is independent of the underlying platform for the software system  and is independent of the particular implementations of the methods in the NTIL . The following sets forth one possible embodiment of the methods in the NTIL .","The following structure is used to define a user level thread in the context of the underlying platform for the software system . PTHREAD refers to a user level thread in terms of the underlying operating system .",{"@attributes":{"id":"p-0037","num":"0058"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"typedef struct thread_t{"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Lock","lock;","\/* Lock for this thread structure"]},{"entry":[{},{},{},"*\/"]},{"entry":[{},"pthread_t","pthr_id;","\/* The id of the corresp. PTHREAD"]},{"entry":[{},{},{},"*\/"]},{"entry":[{},"Utf8Const","*name;","\/* The thread name *\/"]},{"entry":[{},"JVM_word","state;","\/* The tread state *\/"]},{"entry":[{},"Object","*thrObj;","\/* Object corresp. to this thread"]},{"entry":[{},{},{},"*\/"]},{"entry":[{},"VmContext","vm;","\/* Ptr to Virt. Mach. Rntime Info"]},{"entry":[{},{},{},"*\/"]},{"entry":[{},"Thread_t","*nest;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"} * Thread;"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"The NTIL  uses Thread as a pointer to a thread structure for a user level thread. Thread is an unsigned integer that is used as a thread identifier by the NTIL . The NTIL  maintains a global thread list (GTL) which is a linked list of all user level threads. One global lock is used for adding or deleting thread structures from the GTL. A thread identifier for a currently running thread is maintained in a global variable which changes every time the scheduler( ) method chooses to schedule another thread.","In this example embodiment, the NTIL  performs a context switch using a swapcontext( ) routine which is provided in a C implementation in the operating system . The swapcontext( ) routine swaps the internal registers and stack associated with the particular processor of the underlying platform of the software system .",{"@attributes":{"id":"p-0040","num":"0061"},"figref":"FIG. 2","b":["30","32","30","32","16"]},"The method threadCreate( ) creates a new user level thread by allocating a thread structure and calling threadSpawn( ).\n\n","The method threadSuspend( ) suspends the specified thread.\n\n","The method threadResume( ) resumes the specified thread.\n\n","The method threadJoin( ) waits for completion of the specified thread.\n\n","The method threadYield( ) yields the execution, i.e. processor time, to some other thread.\n\n","The method threadStop( ) is called to stop a specified thread and to clean up some of the structures associated with the specified thread.\n\n","The method threadSetPrio( ) sets the priority of the specified thread.\n\n","The method threadGetPrio( ) returns the priority of the specified thread.\n\n","The method threadCurrent( ) returns the identifier of the currently running thread.\n\n","The method scheduler( ) selects a thread for execution.\n\n","Lock the GTL","c=Select the highest priority READY thread from the (list)\n\n","T=currentThread;","if (c==t)\n\n","if (c==NULL)\n\n","Set state of c to RUNNING","Put c in the state of list.","set currentThread=c","if (state of t is RUNNING)\n\n","Attach t to appropriate place in list.","Unlock GTL","threadContextSwitch(t,c);\n\n","switchVMachineContext(from,to)","\/*","Make sure that out of all the pthreads corresponding to Java threads only one pthread is READY at any given time.","This ensures the actual scheduling of the required Java application thread.","*\/","pthread_continue(to.pthr_id);","pthread_suspend(from.pthr_id);\n\n","threadSpawn(pthr_id, void* (*startRoutine)(void*), void *arguments)\n\n","Call pthread_create(&pthr_id,startRoutine,arguments)\n\n","In some embodiments, the native thread support routines of the NTIL  take advantage of thread support routines that exists in the operating system . For example, some UNIX operating systems and the LINUX operating system include an implementation of pthreads which may be used by the NTIL . This is illustrated by the example embodiment in which the operating system  includes the thread support routines pthread_create( ) and pthread_continue( ) and pthread_suspend( ) which are invoked by the routines threadContextSwitch( ) and threadSpawn( ) of the NTIL . The routine pthread_create( ) creates a new thread in the context of a processor under which the operating system  executes at a specified address. The routine pthread_create( ) is used to start a new execution context and it returns a thread identifier pthr_id for the new native thread. The routine pthread_suspend( ) takes a thread identifier pthr_id as an argument and is used to suspend the specified native thread. The routine pthread_continue( ) takes a thread identifier pthr_id as an argument and is used to resume the specified native thread.","In other embodiments of the software system , the operating system  provides thread support routines that perform equivalent functions to one or more of the native thread support routines of the NTIL . In such embodiments, the equivalent native thread support routines of the NTIL  perform a call to the appropriate thread support routine in the operating system . For example, if the operating system  includes a thread scheduler routine that performs the equivalent function of the scheduler( ) routine in the NTIL , then the scheduler( ) routine in the NTIL  calls the thread scheduler routine of the operating system . Other native thread support routines may be fully coded in the NTIL  if equivalents are not available in the operating system .","In other embodiments, one or more of the native thread support routines may be fully coded in the NTIL  whether or not equivalents are provided in the operating system . This insulates the NTIL  from changes to thread support in the underlying operating system .",{"@attributes":{"id":"p-0075","num":"0199"},"figref":"FIG. 3"},"At step , a threads interface layer is implemented in the virtual machine. The threads interface layer includes a set of methods that provide thread support according to a standard threads interface associated with the virtual machine. The methods in the threads interface layer maintain a set of context information for each of a set of threads in the software system in terms of the virtual machine.","At step , a native threads interface layer is implemented. The native threads interface layer includes a set of methods that adapt the methods of the threads interface layer to the platform which underlies the software system. The methods in the native threads interface layer maintain a set of context information for each of a set of threads in the software system in terms of the platform. Step  may be used to adapt the virtual machine to changes in the underlying platform for a given virtual machine.","The foregoing detailed description of the present invention is provided for the purposes of illustration and is not intended to be exhaustive or to limit the invention to the precise embodiment disclosed. Accordingly, the scope of the present invention is defined by the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention is described with respect to particular exemplary embodiments thereof and reference is accordingly made to the drawings in which:",{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 3"}]},"DETDESC":[{},{}]}
