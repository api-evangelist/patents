---
title: Web browser-based object oriented application component test client
abstract: The universal, Web browser-based Enterprise JavaBean (EJB) test client is itself a Java 2 Enterprise Edition (J2EE) application packaged in a Web archive file. This archive, when extracted, consists of a set of files that are installed on a target application server. The installation makes it possible for a user of a Web browser on a workstation remote from the application server to perform a number of tests on, and invoke, methods in EJB beans that are installed on the staging, or even production, servers. It is also possible to perform tests in real time under real conditions.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07043460&OS=07043460&RS=07043460
owner: International Business Machines Corporation
number: 07043460
owner_city: Armonk
owner_country: US
publication_date: 20010531
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["The present invention relates to object-oriented application development and, more particularly, to a Web browser-based object-oriented application component test client.","The Java\u2122 programming language is a programming language designed for use in distributed environments such as the Internet. Java enforces an object-oriented programming model and can be used to create complete applications that may run on a single computer or be distributed among servers and clients in a network.","The increasing adaptation of Java to various computing tasks may be attributed to the portability of the language and the fact that Java is an object-oriented programming language. Portability is a name given to the characteristic of Java that allows a source program to be compiled into \u201cbytecode\u201d that can be run anywhere in a network on a server or client that has a Java \u201cVirtual Machine\u201d. It is then the task of the Java Virtual Machine to interpret the bytecode into code that will run on the computer hardware that is running the Java Virtual Machine. The object-oriented characteristic of Java allows a given object to take advantage of being part of a class of objects and to inherit code that is common to the class. Objects have associated methods. A method can be thought of as one of a set of capabilities or behaviors of a given object.","According to www.whatis.com, an information technology reference, in object-oriented programming and distributed object technology, a \u201ccomponent\u201d is a reusable program building block that can be combined with other components in the same or other computers in a distributed network to form an application. Examples of a component include: a single button in a graphical user interface, a small interest calculator, an interface to a database manager. Components can be deployed on different servers in a network and communicate with each other for needed services. A component runs within a context called a container. Examples of containers include pages on a Web site, Web browsers, and word processors. In its JavaBeans\u2122 application program interface for writing a component, Sun Microsystems calls a component a \u201cBean\u201d. A JavaBean is simply the Sun Microsystems variation on the idea of a component.","Another component model is called an \u201cEnterprise\u201d JavaBean. Enterprise JavaBeans\u2122 have qualities such as security, persistence, transaction capability, multithreading and scalability, among others. Hence, Enterprise JavaBeans have found extensive use in e-commerce applications where such qualities are particularly desirable.","Rapid software development is often impeded by the need to construct supporting software to facilitate testing. Unit-testing a complex Java object usually requires the construction of some kind of test application (test client). In the case of a specialized object, like an Enterprise JavaBean (EJB\u2122), the application code required to facilitate testing can be somewhat complicated. Hand-written test applications can be quite inflexible in that they usually test a single scenario and, if something goes wrong, it can be hard to see where a problem has occurred. This is especially true with test applications that have no user interface because such test applications usually bind the test scenario at compile time. The result of a test case is usually reviewed using print statements to display the contents of a result object. If the test-case succeeds the programmer may need to change the test application and re-compile before testing a new scenario. If the test case fails, the programmer may have to add more print statements and re-compile before re-testing the scenario.","Enterprise JavaBean Test clients exist. However, typical Enterprise JavaBean test clients are dependent on a particular level of and type of Java runtime environment. Furthermore, such test clients are typically platform dependent and only work within a particular Java development environment. Other EJB test clients also need additional setup and configuration, based on the type of server, the EJB beans that will be tested, etc.","A Web browser-based object oriented application component test client described herein frees object oriented application component (e.g. Enterprise JavaBean) testing from the confines of particular development environments. Advantageously, the test client can either be used over a network or EJB beans, for example, can be tested from anywhere on the network without having the test client available locally.","In accordance with an aspect of the present invention there is provided a method of facilitating testing of an object-oriented application component. The method includes providing a client side application portion for presenting a view to a user of a Web browser, the view allowing user interactions with the view, where some of the interactions specify given tests to perform on the component. The method further includes executing a server side application portion for receiving indications of the user interactions with the client side application portion and, responsive to the indications, performing the given tests on the component. In another aspect of the present invention there is provided a test client application for performing this method.","In accordance with another aspect of the present invention there is provided, at an application server, a method of facilitating testing of an Enterprise JavaBean. The method includes providing a test client user interface to a workstation over an HTTP link, where the test client user interface is viewed through the use of a Web browser run on the workstation, receiving a selection from the workstation, the selection identifying a given object, where the given object is a home interface or a remote interface of the Enterprise JavaBean, receiving a request from the workstation, where the request is a consequence of user interaction with the test client user interface and includes an indication of a test to perform on the given object, responsive to the request, performing the test on the given object to give a result and sending a response to the workstation over the HTTP link, the response including an indication of the result to be displayed by the user interface. In a further aspect of the present invention, there is provided a software medium that permits a general purpose computer to carry out this method.","In accordance with a further aspect of the present invention there is provided a Web module containing a test client for Enterprise JavaBeans. The test client being operable to present a user interface over a data link, where the user interface may be displayed through the use of a browser application on a remote workstation, the user interface allowing a user at the remote workstation to: select a given object; select a given method of the given object; supply the given method with a parameter; request that the given method be invoked with the parameter; responsive to receiving the request, invoke the method with the parameter to give a result; and present a further user interface to present the result to the user.","In accordance with a still further aspect of the present invention there is provided a computer readable medium containing computer-executable instructions which, when performed by a processor in an application server, cause the processor to present a user interface over a data link, the user interface allowing a user to: browse a Java Naming and Directory Interface namespace; select a given object in the Java Naming and Directory Interface namespace; and receive information regarding the given object.","Other aspects and features of the present invention will become apparent to those of ordinary skill in the art upon review of the following description of specific embodiments of the invention in conjunction with the accompanying figures.","A simple network  is illustrated in  and presents an environment in which the present invention is particularly useful. The network  includes a workstation personal computer (PC)  for use by a remote user and an application server  for providing a client application for testing EJB beans. The PC  and the application server  communicate with each other through a wide area network , such as the well-known Internet, likely using protocols familiar in the Internet environment, such as the Transport Control Protocol and Internet Protocol (TCP\/IP) and the Hyper-Text Transfer Protocol (HTTP). Servers within the application server  run applications which are comprised largely of Enterprise JavaBeans and these applications are used by users stationed at remote user workstations A, B, C (collectively or individually referred to as ) for such purposes as e-commerce, e.g., buying books.","The preferred implementation for the present invention is made possible by the Java 2 Platform, Enterprise Edition SDK, known as J2EE\u2122. In this implementation, an EJB server  () may be employed within the application (J2EE) server . For a good discussion of all of the terms and concepts related to J2EE and referred to hereinafter, a J2EE tutorial is available at http:\/\/java.sun.com\/j2ee\/tutorial\/index.html and is incorporated herein by reference. Several passages from the tutorial have also been referenced herein directly.","The application server  is illustrated in further detail in  as including several single-purpose servers. The application server  may, for instance, include a Web container , which may include a conventional HTTP server, for communicating over the Internet . The application server  may also include the aforementioned EJB server , connected to the Web container  for providing applications to users stationed at remote user workstations , and a JNDI server , connected to the EJB server . The function of the JNDI server  will be discussed hereinafter. A database  may be accessible to the EJB server  via a database server  that provides the EJB server  with an interface to the database . The EJB server  may be loaded with test client software for executing methods exemplary of this invention from a software medium  which could be a disk, a tape, a chip or a random access memory containing a file downloaded from a remote source.","In overview, the EJB server  includes an embodiment of the present invention to allow the remote user at the PC  to employ a Web browser to communicate with the EJB server  for the purposes of testing the Enterprise JavaBeans that make up the applications that run on the EJB server . In particular, the remote user uses the PC  to request a test client from the EJB server . The EJB server  then provides the test client. The test client is provided to the remote user as part of a dynamic Web page viewed by the remote user using a Web browser. The test client can provide the remote user with a number of informative, interactive views. As the remote user interacts with the views provided by the test client, HTTP requests are sent by the PC  to the EJB server . The EJB server  acts on these HTTP requests and appropriately responds by sending HTTP responses to the PC  that act to update the display on the PC . In an exemplary instance, the remote user may select an Enterprise JavaBean, select a method of an object of the selected Enterprise JavaBean, supply parameters to the selected method, invoke the selected method and view the result of invoking the method with the supplied parameters.","The test client application may be considered to comprise two sides, a client side and a server side. The client-side of the application is a graphical user interface presented in a Web browser. The client side user interface is presented as a dynamic Web page, employing, for example, dynamic HTML and JavaScript\u2122. Meanwhile, the server side is executed as a J2EE application in an application server, usually the very application server on which the EJB beans, which are to be tested, are also executed.","Alternatively, the server side of the test client may be used equally on various application servers which are in various stages of application production and deployment. For example, typically, a unit test server is included within a development environment. Then, a set of servers that are quite like, or very much like, the server on which the actual applications (made up of EJB beans) are either already deployed or to be deployed. One server, in the set of servers that are like the actual server, is usually called a \u201cstaging server\u201d, in that the staging server is one stage away from the actual server. The actual server, itself, may be called a \u201cproduction server\u201d in that the production server is the server that is in use to run business methods with which users interact (business methods are included in EJB beans). The server side of the test client may run on any of these servers. WebSphere, marketed by IBM of Armonk, N.Y., is one example of software for running an application server. WebSphere may be embedded in tools (unit test servers), staging servers and production servers.","Regarding the client side of the test client application, the J2EE model described in the above-referenced tutorial provides an environment for the provision of a thin client application as part of a dynamic Web page that is presented by a Web browser. Several Web browsers are available to the remote user at the PC . The most popular of these Web browsers include Microsoft\u00ae Internet Explorer and Netscape\u00ae Navigator, but many other applications exist for the same purpose. The fact that many applications are available for the same purpose stems from the fact that the material (Web pages) that each Web browser must interpret typically adheres to very specific standards set by the World Wide Web (W3) Consortium that sets such standards. The latest of these standards to be set is Hyper-Text Markup Language (HTML) Specification 4.01, dated Dec. 24, 1999. According to the present invention, the Web browser downloads dynamic Web pages and applets to the PC  to give a Web-based test client.","As will be apparent to a person skilled in the art, the future of browsers is not limited to the interpretation of HTML. In fact, applications already exist for the interpretation of Wireless Markup Language (WML) and Extensible Markup Language (XML).","At the EJB server , Java Servlet technology and JavaServer Pages (JSP) Technology are used to react to HTTP requests received from the client side of the test client, interact with the EJB beans and supply appropriate HTTP responses to the client side of the test client. According to the above referenced tutorial, Java Servlet technology allows the definition of HTTP-specific servlet classes. A servlet class extends the capabilities of servers that host applications accessed by way of a request-response programming model. Although servlets can respond to any type of request, they are commonly used to extend the applications hosted by Web servers. JSP pages technology allows the placing of snippets of servlet code directly into a text-based document. A JSP page is a text-based document that contains two types of text: static template data, which can be expressed in any text-based format such as HTML, WML, and XML; and JSP elements that determine how the page constructs dynamic content.","When a number of Java classes are required for a particular application, they are often packaged into a Java ARchive (JAR) file. A JAR file has a platform-independent file format that permits many files to be aggregated into one file. Similarly, J2EE components are packaged separately and bundled into a J2EE application for deployment. Each component, along with its related files and a deployment descriptor (DD), is assembled into a \u201cmodule\u201d and added to a J2EE application. A J2EE application is composed of one or more Enterprise bean modules, Web modules, or application client component modules. A Web module is unit that consists of one or more Web components and a Web deployment descriptor. A JAR archive that contains a Web module is called a Web ARchive (WAR). Using modules makes it possible to assemble a number of different J2EE applications using some of the same components.","Before a remote user can begin to test an Enterprise JavaBean, the remote user must be able to find the particular Enterprise JavaBean for which testing is required. To this end, the Java Naming and Directory Interface\u2122 (JNDI\u2122) may be employed. According to a description found at java.sun.com, JNDI is a standard extension to the Java platform, providing Java technology-enabled applications with a unified interface to multiple naming and directory services in the Enterprise. As part of the Java Enterprise Application Programming Interface (API) set, JNDI enables seamless connectivity to heterogeneous Enterprise naming and directory services. The JNDI function implemented in a particular server, such as the EJB server , typically restricts a given search to a particular pre-defined \u201cnamespace\u201d.","EJB beans come in one of two types, session beans and entity beans. A session bean represents a transient conversation with a client. When the client finishes executing, the session bean and its data are gone. An example of a session bean is a shopping cart in an e-commerce application. In contrast, an entity bean represents persistent data stored in one row of a database table. If the client terminates or if the EJB server  shuts down, the underlying services ensure the entity bean data is saved. A user of an e-commerce application may add items found on various pages showing a catalog of items. When finished shopping, the user then indicates that shopping is complete and an order is created from the final state of the shopping cart. In the above e-commerce example, the order created at the end of the shopping session may be stored as an entity bean. Such an entity bean would identify the items ordered, the name of the customer, the delivery address, etc.","An EJB bean has a home interface and may have a remote interface. The home interface defines zero or more methods for managing an Enterprise bean. The home interface of a session bean defines create and remove methods, while the home interface of an entity bean defines create, finder and remove methods. The remote interface defines the business methods callable by a client.","As mentioned above, part of a given test of an EJB bean may involve supplying a method of an object within an EJB bean with some parameters. Notably, these parameters may include simple structures such as integers and strings, but may also include complex structures such as entire objects. In the client side of the test client, the remote user may have several EJB beans open for testing at the same time. To supply an entire object to a method, the remote user could select the object from one of the EJB beans open for testing, copy that object and use the copied object as a parameter for a given method in another one of the EJB beans open for testing.","Various views provided as the client side of the test client are presented in . Each of these views corresponds to a particular function of the test client as a whole. Views include: a Homepage View ; an EJB Page View ; an Inspector View ; a Hierarchy View ; a JNDI Explorer View ; a Properties View ; and a JNDI Objects View . These views are discussed hereinafter.","An exemplary screenshot of the EJB Homepage View  is illustrated in . The EJB Homepage View  allows the remote user to select among the various views available.","An exemplary screenshot of the EJB Page View  is illustrated in . The EJB Page View  allows the remote user to invoke methods in objects of the EJB home and remote interface classes, as well as other objects that have been accumulated on the Object Clipboard. As illustrated, the EJB Page View  is divided into three panes. An EJB View References pane , an EJB View Parameters pane  and an EJB View Results pane . The EJB View References pane  displays a collapsible, hierarchical, directory-like structure for the objects within the EJB bean under test. The creation of such collapsible, hierarchical, directory-like structures is well known in the art of Web page authoring using HTML and JavaScript and will not be further discussed herein. The name \u201cEJB References\u201d identifies a folder, of sorts, that acts to group the items in the EJB View References pane . The names \u201cIncrementSession\u201d and \u201cInc\u201d at the next level of the presented hierarchy identify EJB groups. These groupings are arbitrary and are used herein to group an EJB home interface with corresponding EJB objects. Inside each group is an EJB home interface and zero to n session and\/or entity beans.","More specifically, within the EJB group called lncrementSession, \u201cIncrementSessionHome\u201d identifies an EJB home interface object. The methods of this EJB home interface object can be used to load any number of real EJB entity or session beans. At the same hierarchical level, the name \u201cIncrementSession\u201d identifies an EJB session bean. At the next hierarchical level down are several public methods named \u201cIncrementSession create( )\u201d, \u201cvoid Increment( )\u201d and \u201cInc getIncrementBean( )\u201d. Selecting one of these public methods will make the method appear in the EJB Page View Parameters pane  and allow the remote user to invoke the method with remote user-supplied parameters. The method may also be invoked with objects from the EJB Page View  or objects from another open EJB bean.","Similarly, within the EJB group called Inc, \u201cIncHome\u201d identifies an EJB home interface object and, at the same hierarchical level, \u201cInc\u201d identifies an EJB entity bean. At the next hierarchical level down are several public methods named \u201cInc create(IncKey)\u201d, \u201cInc findByPrimaryKey(IncKey)\u201d, \u201cEnumeration findGreaterThan(int)\u201d, \u201cint getValue( )\u201d and \u201cint Increment( )\u201d.","The EJB Page View Parameters pane  allows the passing of parameters to a method selected in the EJB Page View References pane . The EJB Page View Results pane  shows the result of having invoked the method given the parameters passed to that method in the EJB Page View Parameters pane .","An exemplary screenshot of the Inspector View  is illustrated in . The Inspector View  allows the remote user to view the public fields of objects. The Inspector View  is divided into three panes, an Inspector View References pane , an Inspector View Parameters pane  and an Inspector View Results pane . The Inspector View References pane  shows all objects available to be viewed and any object in the Inspector View References pane  may be selected. When an object is selected, the public fields of the selected object appear in the Inspector View Parameters pane .","An exemplary screenshot of the Hierarchy View  is illustrated in . The Hierarchy View  allows the remote user to control which methods are visible in the EJB Page View References pane  (). This view also has two panes, a Hierarchy View Classes pane  and a Hierarchy View Hierarchy pane . By default, only those methods that are directly visible on the class of a given object are shown in the EJB Page View References pane . However, using the Hierarchy View Hierarchy pane , the remote user can choose to view methods on a superclass of the given object or even filter such that only methods on a particular interface are shown in the EJB Page View References pane .","In the exemplary screenshot of the JNDI Explorer View , illustrated in , a JNDI View Object pane  provides a graphical representation of the namespace of the JNDI server. Root contexts in the JNDI namespace are displayed as folders. The JNDI View  allows the remote user to browse through the hierarchy and, optionally, load EJB beans directly from this view. The JNDI Explorer View  also allows the remote user to load an EJB bean that is to be tested by directly typing in the JNDI name of the EJB bean in an EJB entry window .","An exemplary screenshot of the JNDI Properties View  is illustrated in . The JNDI Properties View  provides an Initial Factory entry window  and a Provider URL entry window  for the remote user to specify the Initial Factory and the Provider URL for use during JNDI lookup. An Initial Factory is a class that is responsible for creating the initial context of an EJB bean and is usually specific to the vendor of the EJB bean since the Initial Factory constructs the context for a specific implementation. To test EJB beans running in a different installation of an application server, or on an application server supplied by a different vendor than the original, the remote user may modify the Provider URL with the IP address of the remote installation. The remote installation may have security measures in place. Consequently, the JNDI Properties View  provides a User window  and a Password window  for supplying authentication information to the remote installation. It may also be that the remote installation requires additional properties to be supplied. These properties may be supplied via an Additional Properties window .","An exemplary screenshot of the JNDI Objects View  is illustrated in . The JNDI Objects View  allows the remote user to obtain additional information regarding user transactions and data sources, which are objects that may be associated with an EJB bean and may be found in the JNDI Explorer View . The JNDI Objects View  provides a JNDI Objects pane , for browsing user transactions and data sources, and a JNDI Object Information pane , for providing additional information regarding user transactions and data sources.","In operation, the remote user at the PC  () enters a Uniform Resource Locator (URL) for the application server  in the address field of a Web browser. The application server , in particular, the Web container , responds with a Web page. This Web page may combine HTML and JavaScript to present an initial view such as the EJB Homepage View  of . To specify the name of the EJB bean for which testing is desired, the remote user uses the mouse pointer to select the JNDI Explorer View link. The Web browser, responsive to the selection of the JNDI View link, sends a HTTP request to the application server for a JNDI View. The Web container , upon receiving the HTTP request and in conjunction with the EJB server  and the JNDI server , formulates, and sends to the PC , a Web page such as the JNDI View  shown in .","While presented with the JNDI View , the remote user may select a particular EJB bean and use the mouse pointer to select the EJB Page View icon (one of a set of icons presented in the top right corner of each view). The Web browser, responsive to the selection of the EJB Page View icon, sends a HTTP request to the application server for an EJB Page View of the selected EJB bean. The Web container , upon receiving the HTTP request and in conjunction with the EJB server , formulates and sends a Web page such as the EJB Page View  shown in .","Alternatively, while presented with the JNDI View , the remote user may select a particular EJB bean and use the mouse pointer to select the Inspector View icon. The Web browser, responsive to the selection of the Inspector View icon, sends an HTTP request to the application server for an Inspector View of the selected EJB bean. The Web container , upon receiving the HTTP request and in conjunction with the EJB server , formulates and sends a Web page such as the Inspector View  shown in . With the Inspector View , the public fields of any of the objects in a given EJB bean may be viewed.","While presented with the EJB Page View  of , the user may select a method in the EJB Page View References pane . Such a selection is interpreted by the Web browser and an HTTP request is sent to the application server  for an update to the EJB Page View Parameters pane . The servlets executing on the EJB server  interpret the HTTP request, as received by and transferred from the Web container , and generate an HTTP response that causes the Web browser to update the EJB Page View Parameters pane . The update to the EJB Page View Parameters pane  may allow the remote user to supply the selected method with parameters and provide an indication that the selected method should be invoked using the supplied parameters. Such an indication is interpreted by the Web browser and, as a result of this interpretation, an HTTP request is then sent to the application server . Subsequent to receiving the HTTP request, the EJB server  handles the invocation of the selected method, given the supplied parameters. The result of the invocation of the selected method is used to formulate an updated EJB Page View. In particular, the EJB Page View Results pane  is updated to show the result of the method invocation. This updated EJB Page View Web page is then sent to the PC  and the Web browser executed thereon updates the display seen by the remote user accordingly.","As discussed above, the result may be an integer, as shown in , a string or an object, among other possible results. In the case wherein an object is the result of the invocation of the selected method with the supplied parameters, this resultant object may become the focus of the EJB Page View , i.e., the resultant object may be viewed in the EJB Page View References pane . Once viewed in the EJB Page View , the resultant object may be tested, as described above with regard to objects as part of EJB beans.","The remote user may want to subject the resultant object to scrutiny. To this end, a selection of the Inspector View will cause an HTTP request to be sent to the application server  for a change of view on the client side of the test client. The EJB server  complies with this HTTP request by formulating, and sending to the PC , a Web page much like the Inspector View  shown in .","Where the resultant object is unfamiliar to the remote user, the remote user may choose to view the object in greater detail. Perhaps the remote user would prefer to view the objects that are inherited by the resultant object from its superclass, or other hierarchically high objects. To this end, and with the resultant object shown in the EJB Page View, the remote user may use the mouse pointer to select the Hierarchy View icon. As a consequence of this selection, the Web browser sends an HTTP request to the application server . The servlets at the EJB server , upon receipt of the HTTP request for a Hierarchy View, formulate a Web page of Hierarchy View like the Hierarchy View  shown in . This View is sent as an HTTP response to the HTTP request and the Web browser updates the display accordingly. Using the Hierarchy View, the remote user may select a level of detail required to be seen in the EJB Page View References pane  for the resultant object. An indication of the selected level of detail is transferred to the application server  as an HTTP request. Upon receipt of the indication of the requested level of detail, the level is noted, but no response is required to update the display on the client side of the test client. However, once the remote user indicates, through a mouse selection, that an EJB Page View of the resultant object is required, the EJB Page View sent in an HTTP response to this HTTP request will include the selected level of detail.","The present invention has been implemented as a tooling plug-in for a product marketed by IBM as \u201cEclipse WebSphere Studio Advanced (WSA) Server\u201d. With a view to , it may be that the remote user at the PC  would like to use the test client provided by the (primary) application server  to browse and test EJB beans on a secondary application server . As long as the EJB beans on the secondary application server  are in the current JNDI namespace, the remote user may use the JNDI View  () to browse, select and test the EJB beans. However, the EJB beans of the secondary application server  may not be in the current JNDI space. Assuming the secondary application server  includes a JNDI server, the remote user may use the Properties View  (see ) to specify, in the Provider URL entry window , a URL for the JNDI server of the secondary application server . It may also be necessary for the remote user to specify an Initial Factory in the Initial Factory entry window .","The server side of the test client that is an embodiment of the present invention may be used in servers other than the server where the EJB beans under test will be, or are, executed. As stated above, the server side of the test client is a J2EE application packaged in a WAR file. The server-side test client WAR file may, for instance, be supplied to the secondary application server  in . It may be assumed, for the sake of this example, that the secondary application server  executes the same Eclipse WSA Server product as the primary server . If the EJB beans that are to be run on the primary application server  are to be tested on the secondary application server , it is necessary that the secondary application server  be supplied with an EJB JAR file  that contains the EJB beans to be tested. The remote user may then use the client side of the test client presented at the PC  by the Web browser to exchange HTTP requests and responses with the secondary application server  to test the EJB beans.","A further challenge arises where the server-side test client WAR file is to be used on a tertiary application server , which, for the sake of this example, does not execute the same Eclipse WSA Server product as the primary server . However, even if the tertiary application server  is supplied with both the EJB JAR file  that contains the EJB beans to be tested, a further archive is required for the test client package to function properly. A WAR file  contains classes that are required by the test client package and may not be assumed to be part of whatever application server software is being executed by the tertiary application server .","Advantages of the present invention are numerous. Using embodiments of the present invention, Enterprise JavaBeans may be tested on the actual production or staging server to which they are deployed. This testing may be performed in real time and from any location in the world from which the server is accessible. The client side of the test client will run on any operating system that supports a basic HTML Web browser without any code or configuration changes. The model underlying the present invention is one wherein the data of interest is at the application server and the operations on the data are executed on the application server. As a result, the client side of the test client contains no application logic. This lack of application logic provides for good performance, as it is the application server that performs any complex computations. The lack of application logic at the client also provides for portability as well as general availability and access.","In that the front-end graphical user interface (HTML, JSP, JavaScript) that makes up the client side of the test client, which may be known as \u201cthe view\u201d, is well protected from changes made, or to be made in the future, to the server side code of the test client, which may be known as \u201cthe model\u201d, the model and the view are highly, and purposely, decoupled. Use of the terms \u201cmode\u201d and \u201cview\u201d when describing an application derive from a common programming technique, known as Model View Controller (MVC) architecture. Using MVC architecture, programs are designed so that there is as little dependency as possible between the backend model of the program, the user interface, and the interaction of the user with the program. This functional decoupling allows separate evolution of the server side code and the interface presented to the user, as well as future changes to one or the other without affecting the function of the program as a whole.","Being browser-based, the client side of the test client will run on any operating system, platform, machine and standards-compliant vendor products without necessitating change in code or configuration. The User Interface, being straight HTML and JavaScript running in Netscape\u00ae Navigator or Microsoft\u00ae Internet Explorer, is immediately understandable by even novice users who are comfortable with \u201csurfing the Internet\u201d. The same sorts of actions that are required to use the Web in general are all that is required to perform complex and involved tasks in the client side of the test client.","The present invention supports the creation of, the lookup of and invocation of methods for any given EJB bean on any EJB compliant application server. Results of invocation are immediately fed back to the user and the user may cache the results for subsequent operations or, where the result is an object, the user may choose to test the returned object. Additionally, the test client supports complex relationships for EJB beans such as inheritance and associations.","In review, the test client application may be considered to comprise two sides, a client side and a server side. The client side of the application is executed in a Web browser while the server side is executed as a J2EE application at an application server, often the very application server on which the EJB beans that are to be tested are also executed.","Given that the client side of the test client is browser-based, the Graphical User Interface is separated from the programming logic that is executed at the server. One benefit realized from this separation is that changes may be made to one side of the test client without a necessity to modify the other side. This provides the flexibility to provide a completely different look and feel to the client side of the test client, perhaps through the use of templates designed by professional graphic artists. The only restriction on these templates would be that the templates must run in the browser.","It should be evident to those skilled in the art that, although the present invention has been described in the context of Enterprise JavaBeans, the present invention may be used as a test client for object oriented programs in general.","Other modifications will be apparent to those skilled in the art and, therefore, the invention is defined in the claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["In the figures which illustrate example embodiments of this invention:",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 10","FIG. 1"]}]},"DETDESC":[{},{}]}
