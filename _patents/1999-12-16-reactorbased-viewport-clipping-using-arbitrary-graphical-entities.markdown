---
title: Reactor-based viewport clipping using arbitrary graphical entities
abstract: Arbitrary graphical entities are used for reactor-based viewport clipping. Graphics program provide two dimensional views of three-dimensional objects through ports. A user obtains a non-rectangular shape (referred to as a clipping entity) to be utilized as a view or viewport of a model. Any arbitrary shape such as a circle, ellipse, polygon, or other non-rectangular shape may be utilized as a clipping entity. The user obtains a clipping entity by creating a new clipping entity or modifying an existing entity. Multiple options are available to the user to create and modify a clipping entity. A reactor mechanism detects changes in the clipping entity and notifies the current viewport of the modifications. In response thereto, the viewport adjusts its boundaries and any graphics outside of the clipping entity are clipped/not displayed to the user. Thus, a non-rectangular viewport may be displayed by a graphics program and utilized by the user.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06848082&OS=06848082&RS=06848082
owner: Autodesk, Inc.
number: 06848082
owner_city: San Rafael
owner_country: US
publication_date: 19991216
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATION(S)","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS","CONCLUSION"],"p":["This application is related to the following co-pending and commonly-assigned patent application(s), which are incorporated by reference herein:","Application Ser. No. 09\/360,700, filed on Jul. 16, 1999, by Jack M. Bayt et al., entitled \u201cVISUAL ANNOTATIVE CLIPPING IN A COMPUTER-IMPLEMENTEDC GRAPHICS SYSTEM\u201d, now U.S. Pat. No. 6,353,441, issued Mar. 5, 2002, attorney's docket number 30566.74US01.","1. Field of the Invention","The present invention relates generally to computer-implemented graphics systems, and in particular, to clipping a portion of a drawing using an arbitrary graphical entity.","2. Description of the Related Art","Computer-implemented graphics systems have been widely used by designers, illustrators, drafters, and engineers for a number of years. Most such graphics systems use a two-dimensional (2D) graphical user interface (GUI) to display graphical images, such as 2D or three-dimensional (3D) models, schematic diagrams, photo-realistic images, etc. When a 3D object is displayed in a 2D GUI, the operator may desire to define the shape and structure of the viewing area. A viewport is a graphical entity, which displays a subset of the overall drawing (referred to as the viewport's contents) within its boundaries. Prior art methods do not provide the ability to define an arbitrary viewing area that is dynamically updated and based upon another arbitrary graphical entity.","One or more embodiments of the invention provide for reactor-based viewport clipping using arbitrary graphical entities. Graphics programs provide two-dimensional views of three-dimensional objects through viewports. Viewports are traditionally rectangular in shape and other shaped viewports cannot be utilized. One or more embodiments of the invention provide for a user to associate a graphical entity with a viewport and to utilize the entity's graphical definition to define the shape of the viewport. This graphical entity is referred to as the clipping entity. Any arbitrary shape such as a circle, ellipse, polygon, or other non-rectangular shape may be utilized as a clipping entity. In one or more embodiments, the user obtains a clipping entity by creating a new clipping entity or modifying an existing entity. Multiple options are available to the user to create and modify a clipping entity. The user associates a clip entity with a viewport. The graphics program attaches a reactor between the clip entity and the viewport. A reactor mechanism detects changes in the clipping entity and notifies the attached viewport of the modifications. In response thereto, the viewport adjusts its boundaries by utilizing the boundary of the clipping entity and any graphics outside of the clipping entity are clipped\/not displayed to the user. Thus, a non-rectangular viewport may be displayed by a graphics program and utilized by the user.","In the following description, reference is made to the accompanying drawings which form a part hereof, and which is shown, by way of illustration, several embodiments of the present invention. It is understood that other embodiments may be utilized and structural changes may be made without departing from the scope of the present invention.","Overview","One or more embodiments of the invention provide for a user to obtain a non-rectangular shape (referred to as a clipping entity) to be utilized as a view or viewport of a model. For example, the clipping entity may be obtained by creating a new clipping object or modifying an existing viewport. Multiple options are available to the user to create and modify a clipping entity. The clipping entity is associated with the viewport using a reactor mechanism. The reactor detects changes in the clipping entity and notifies the associated viewport of the modifications. In response thereto, the viewport adjusts its boundaries to coincide with the boundary of the clipping entity and any graphics outside of the boundary of the clipping entity are clipped\/not displayed to the user.","Hardware and Software Environment",{"@attributes":{"id":"P-00026","num":"00026"},"figref":"FIG. 1","b":["100","102","104","106","100"]},"One or more embodiments of the invention are implemented by a computer-implemented graphics program , wherein the graphics program  is represented by a window displayed on the monitor . Generally, the graphics program  comprises logic and\/or data embodied in or readable from a device, media, or carrier, e.g., one or more fixed and\/or removable data storage devices  connected directly or indirectly to the computer , one or more remote devices coupled to the computer  via a data communications device, etc.","Those skilled in the art will recognize that the exemplary environment illustrated in  is not intended to limit the present invention. Indeed, those skilled in the art will recognize that other alternative environments may be used without departing from the scope of the present invention.","Computer-Implemented Graphics Program",{"@attributes":{"id":"P-00030","num":"00030"},"figref":"FIG. 2","b":["108","108","200","202","204","206","108","200","206"]},"The Graphical User Interface  displays information to the operator and provides the functionality for the operator's interaction with the graphics program .","The Image Engine  processes the DWG files  and delivers the resulting graphics to the monitor  for display. In the preferred embodiment, the Image Engine  provides a complete application programming interface (API) that allows other computer programs to interface to the graphics program  as needed.","The Database  is comprised of two separate types of databases: (1) a 3D database  known as the \u201c3D world space\u201d that stores 3D information; and (2) one or more 2D databases  known as the \u201c2D view ports\u201d that store 2D information derived from the 3D information. One or more 2D databases  may also store 2D objects to be utilized by or in combination with 2D viewports .","In accordance with one or more embodiments of the invention, Database  also contains Reactor Mechanism . Reactor Mechanism  is utilized to associate or link a 2D viewport  with another object (see details below).","Object List",{"@attributes":{"id":"P-00036","num":"00036"},"figref":"FIG. 3","b":["300","208","300","302","304","306","300","208","304","300","208"]},"Operation of the Graphics Program","An object or collection of objects in the 3D world space  is often referred to as a model. Consequently, the 3D world space  in which a model resides is referred to as a model space. A viewport  into the model space is often based on a movable user defined coordinate system (UCS). Some background of coordinate systems is useful to gain an understanding of the invention.","A Cartesian coordinate system has three axes: X, Y, and Z. When a user enters coordinate values (e.g., to specify a point in space), the user indicates a point's distance (in units) and its direction (+ or \u2212) along the X, Y, and Z axes relative to the coordinate system origin (0,0,0) or relative to a previous point. The syntax utilized to define a point in space utilizes the format \u201c(X,Y,Z).\u201d In one or more embodiments of the invention, when a user opens a new viewport , the viewport  defaults to a world coordinate system (WCS): the X axis is horizontal, the Y axis is vertical, and the Z axis is perpendicular to the XY plane.","In addition to the WCS, a user can define a movable user coordinate system (UCS) with a different origin and axes in different directions. A UCS is defined in terms of the WCS.","As described above, model space is based on a UCS. A user may desire to view a model in model space from various perspectives (e.g., a top view, right and left side views, bottom view, etc.). To view a model in model space, a user may define and create one or more viewports . A viewport  is a bounded area that displays some portion of the model space of a model. Multiple viewports  provide different views of a model. For example, a user may set up viewports  that display a top view, right and left side views, and a bottom view. In one or more embodiments, to facilitate editing of the objects in the various views, a different UCS may be defined for each view\/viewport .","Viewports  are normally defined and stored in database  as rectangles of different sizes. In addition to viewports  maintaining a rectangular shape, a user may desire to utilize a viewport  that is non-rectangular (e.g., a circle, an oval, or other arbitrary shape). One or more embodiments of the invention enable a user to define non-rectangular viewports  and utilize the non-rectangular viewports  to edit and work with a model. To provide for non-rectangular viewports , the user creates or retrieves the desired non-rectangular shape (referred to as a \u201cclip entity\u201d). The clip entity is a shape such as a circle, ellipse, polygon, or other arbitrary shape with a specified boundary. The clip entity is associated with the existing viewport  (e.g., by the user placing the shape over the desired area to be viewed) and the area outside of the clip entity is clipped (i.e., not displayed).","In one or more embodiments, Reactor Mechanism  is used to associate\/link the viewport  with the clip entity. Reactor Mechanism  informs the viewport  of any modifications made to the clip entity that results in the graphics of the clip entity changing. Once informed, the viewport  queries the clip entity and update's the viewport's  size and position to encompass the clip entity's new graphical extents. Therefore any changes to the clip entity cause the viewport  to expand, contract, or move to accommodate the new graphical representation of the clip entity.","Creation and Use of Non-Rectangular Viewports ","In one or more embodiments of the invention, users can create viewports  with irregular boundaries. The following description provides for one or more embodiments of such an invention. The boundary of a non-rectangular viewport  can consist of both arc and line segments or a circle. One or more embodiments of the invention achieves this functionality by allowing a boundary to be associated with a rectangular viewport  object and clipping the model space geometry in the viewport  to the edge of the boundary.","At the database level (e.g., in 2D database ), the viewport  object itself remains rectangular, but embodiments of the invention make the viewport  appear non-rectangular by allowing components\/objects of Image Engine  or Graphical User Interface  to clip the geometry at draw\/display\/plot time, rather than clipping the geometry at a higher level and sending down the clipped geometry to 2D Database , 3D Database , or DWG Files . Thus, the clipped geometry is not stored in database . Instead, the model and clipping entity are stored in database , the geometry of the non-rectangular viewport  is stored in database , and the clipping of the model (i.e., the combination of the non-rectangular viewport  with the model) occurs at draw\/display\/plot time. The distinction should be transparent to the user. There are two basic methods of creating \u201cnon-rectangular\u201d viewports :\n\n","Creating New Non-Rectangular Viewports ","Irregular shaped viewports  can be created by selecting an object to turn into a viewport , or by specifying a new irregular shaped boundary by picking points on the display screen displayed by graphics program  on monitor . In one or more embodiments, a -VPORTS command is also available (in an area that allows commands to be entered by a user) and includes two options named Object and Polygonal. To utilize the \u201c-VPORTS\u201d command, the command is entered into graphics program  and graphics program  responds by requiring the user to specify the corner of the viewport  or to utilize another option including: Fit, Object, Polygonal, or Restore.","Object Option","The Object option of the -VPORTS command prompts the user to select a clipping object such as a closed polyline, ellipse, spline, region, or circle. Thus, the user must select an object that will be utilized to clip the viewport .","When selecting a polyline to convert into a viewport , the polyline must be closed and contain at least 3 vertices. It can be self-intersecting. The polyline can contain arcs as well as line segments, so it can be a curved or a spline fit polyline. When regions are converted to viewport  objects, the object may consist of several loops, so it is possible that areas of the viewport  will have holes or the viewport  may consist of several disjoint areas. The object that defines the boundary is treated as part of the viewport , but will be listed as a separate object in database . When a non-rectangular viewport  is listed (in a selection of available viewports ), the listing will list the viewport  object, followed by the clipping object.","When creating the irregularly shaped viewport , one or more embodiments of the invention calculate the extents (edges or points) of the object selected and places a viewport  object at the corners of the extents of the boundary. Graphics program  clips all geometry not within the specified boundary. By default, the view into the viewport  is calculated by performing a zoom extents on the model space geometry. Depending on the shape of the boundary, the model space geometry may not be fully displayed in the irregularly shaped viewport .",{"@attributes":{"id":"P-00055","num":"00055"},"figref":["FIGS. 4A","FIG. 4A","FIG. 4B","FIG. 4B","FIG. 4C"],"b":["4","4","210","210","400","400","402","404","404","400","404","404","400","400","402","400","210","210"]},"Polygonal Option","The Polygonal option of the -VPORTS command allows the creation of an irregularly shaped viewport  by specifying points displayed on the screen (e.g., monitor ). A user is prompted to specify the starting point for the viewport . The user is then prompted to specify one of the following several options: the next point, Arc, Close, Length, or Undo.","If the user selects the next point, the next point for the boundary must be specified. If the user selects the Arc option, the user is prompted to continue specifying the boundary for the arc (e.g., Angle, Center, Close, Direction, Line, Radius, Second pt, Undo, or Endpoint of arc). If after choosing three points, no option is chosen by the user, the boundary is automatically closed (e.g., a closed in area or boundary is created).","Altering an Existing Viewport  Boundary","Irregular shaped viewports  can also be created by redefining the boundary of an existing viewport . This is likely to be the most used method because users often need to see the geometry in a viewport  (e.g., a rectangular viewport ) before they can accurately specify an irregular shaped boundary.","In one or more embodiments of the invention, a VPCLIP command is utilized to alter\/edit an existing viewport . The VPCLIP command may also be utilized to clip existing viewport  objects. Upon entering the VPCLIP command, the user is prompted to select a viewport  that is to be clipped (e.g., viewport ). The user then selects a clipping entity\/object (e.g., clipping object ) or a polygonal option. If the polygonal option is selected, the user must define the polygon that comprises the clipping entity. In one or more embodiments, the user must select the various points that make up the polygon. Consequently, the user is prompted to specify the starting point for the polygon.","When specifying a clip boundary by specifying the points of a polygon, arcs can be specified as well as straight line segments. For example, after specifying a starting point, the user can elect to specify the next point of the polygon, or an arc. Alternatively, after specifying a starting point, the user can elect to close the polygon, specify a length, or to undo the previous selection.","Grip Editing Irregular Viewports ","In one or more embodiments, users can gripedit the clipping entity of a non-rectangular viewport in the same manner that a user can gripedit a clip entity if it was not associated with the viewport. Therefore, any mechanism that has previously been established to edit clip entities may be used to edit a non-rectangular viewport. Indeed to the user, the viewport appears as a clip entity that can be modified using established mechanisms such as gripediting. Gripediting is when a user selects (grips) a point on a model, and uses an input device (e.g., a mouse) to drag the point to a new location. Consequently, the shape of the object is changed based on where the user drags the point to. When stretching the vertices of an irregular boundary, the rectangular viewport  underneath the boundary is also transparently stretched, so there are no limits to the boundary.","If a rectangular boundary has been applied to a viewport  (e.g., with the CLIP command), the boundary is a polyline. Consequently, when the rectangular boundary is grip-edited, it will not retain its rectangular shape like an unclipped viewport . Users may wish to occasionally apply a rectangular clip boundary to a viewport  (instead of just of just sizing the viewport ) because the behavior is different when the viewport  is rotated (see discussion below).","As described above, when creating an irregularly shaped viewport  (or altering a viewport  boundary (e.g., by gripediting)), one or more embodiments of the invention calculate the extents of the clip entity and place a viewport  object at the corners of the extents of the boundary. The graphics system clips all geometry not within the specified boundary. Depending on the shape of the boundary, the model space geometry may not be fully displayed in the irregularly shaped viewport .",{"@attributes":{"id":"P-00067","num":"00067"},"figref":["FIGS. 5A","FIG. 5A"],"b":["5","5","210","500"]},{"@attributes":{"id":"P-00068","num":"00068"},"figref":"FIG. 5B","b":["504","500","502","500","502"]},{"@attributes":{"id":"P-00069","num":"00069"},"figref":["FIG. 5C","FIG. 5C"],"b":["502","506","5","506","5","504","502","502","504"]},"Rotation of Non-Rectangular Viewports ","If a non-rectangular viewport  is rotated, only the boundary is rotated and the geometry is clipped based on the new location of the boundary. The model space geometry does not rotate with the boundary. , B, and C illustrate the rotation of a non-rectangular viewport  in accordance with one or more embodiments of the invention. In , model geometry space  is illustrated.","In , non-rectangular viewport  is created and areas outside of viewport  are clipped. In , viewport  is rotated over model geometry space  and areas outside of rotated viewport  are clipped. As can be seen in , model geometry space  remains in the same location as in . Only viewport  is rotated to view a different area of model geometry space  with a different area being clipped.","Differentiating the Current Viewport ","In one or more embodiments of the invention, the active viewport  displays a rectangular border offset one pixel away from the outside edge of the viewport  to visually indicate the viewport  is current. However, if the result proves unsatisfactory for curved viewports , the current viewport  will display its boundary in a different color and heavier lineweight.","Zooming and Panning in Non-rectangular Viewports ","When zooming or panning inside a non-rectangular viewport , the model space geometry is clipped on the fly in real-time. The user never sees geometry that would appear outside the boundary in the rectangular viewport  underneath the clip boundary. A Zoom Extents option performs a zoom extents of the model space geometry to the extents of the clipping boundary. This means that the model space geometry may not be fully displayed within the clipping boundary of the viewport  if it is an irregular shape. As with Zoom Extents, when a Zoom All or Zoom Limits option is utilized, some model space geometry may not be fully displayed within the clipping boundary of the viewport  if it is an irregular shape","Printing Non-Rectangular Viewports ","Tessellation is a method used to represent 3D objects as a collection of triangles or polygons. Using tessellation, all surfaces, both curved and straight, are turned into triangles or polygons either at the time they are first created or in realtime when they are rendered. In tessellation, the more triangles or polygons are used to represent a surface, the more realistic and smooth the rendering becomes. In one or more embodiments of the invention, tessellation of curved boundaries is calculated based on the resolution of the hardcopy device. Thus, the number of triangles or polygons that are used depends on the resolution of the plotting or printing device. Consequently, the curved viewports  will appear smooth when printing with clipping performed right next to the boundary edge.","Viewport Toolbar","One or more embodiments of the invention provide a toolbar that the user may utilize to create viewports , rectangular or nonrectangular.  illustrates such a toolbar in accordance with one or more embodiments of the invention. Layout Viewports toolbar  contains 5 buttons - and a viewport display scale combo box . Upon selecting one of the 5 buttons -, different actions are taken depending on the button selected. Viewports dialog button  displays the viewport dialog enabling the user to create 1, 2, 3, or 4 viewports  with specified named views or viewpoint orientations and spacing between viewports . Button  creates a single viewport . Button  creates a polygonal viewport . Convert selected object into viewport button  allows the user to select a closed object in the layout and convert it into a viewport  (i.e. polygon, circle, ellipse, region, etc.). Clip viewport button  prompts the user to select a viewport  and specify a new clipping boundary or select an object to clip the viewport .","Viewport scale combo box control  allows the user to set the display scale (Zoom XP factor) of the current or selected viewport . Combo box  reflects the current paperspace's display scale. When a viewport  is made current, it displays the viewport's  display scale. If the scale is equal to one of the settings in the dropdown list, the control displays the item in the list. If the scale is not one of the preset scales, it displays the scale as a real number. The user can change the scale by selecting from one of the preset scales in the dropdown list, or type in a real number. The viewport  will zoom center to reflect the specified scale. When a viewport  is selected or made current, one or more embodiments of the invention will perform a lookup and display the equivalent scale in the dropdown if one exists. Otherwise it will just display the scale as a real number. The dropdown list will also include an MRU Most Recently Used) list (a list of the most recently used scalings).","By default control  displays Scaled to Fit when paperspace is current and a viewport  is not selected. If the CVPSCALE system variable is implemented, the value in the control (which reflects the CVPSCALE) is applied to newly created viewport  objects. The geometry in the viewports  will be centered in the viewport , and the appropriate Zoom XP factor applied when the viewport  is created. Implementing the CVPSCALE variable is a scalable task. If not implemented, the control will be disabled and display \u201cScaled to fit\u201d when paper space is current. The viewport scale controls change the Zoom XP factor when a viewport  object is current. Changing the zoom factor of the viewport  updates the scale controls.","CLIP Command","The CLIP command allows the user to re-specify the boundary of an existing viewport  object (redefine the clipped view into model space), or clip Xrefs (short for external reference\u2014a model file linked or attached to another model) or Images. This has the advantage of rationalizing three similar commands into one.","The CLIP command first prompts the user to select objects, then prompts the user to specify the first point of a clipping boundary (or enter one of the other available options). One or more embodiments of the invention allows multiple Xrefs to be clipped simultaneously, while only one image or viewport  can be clipped at one time. To accommodate the use of a single CLIP command on all three different types of objects (Xref, image, or viewport ), the command may follow the following rules:\n\n","Clipping a Viewport ","When a viewport  is selected, the user can specify the boundary in one of three ways:\n\n","The Object option prompts the user to select a polyline or circle, then converts it into the boundary for the viewport . After ending the command, the boundary is applied to the viewport . The view stays fixed relative to the original boundary as shown in , B, and C.  illustrates model geometry space .  illustrates an object circle  selected by the user that is placed over model space geometry .  illustrates how the boundary is applied to object  and graphics outside of the boundary are clipped.","Even if the viewport  boundary is created outside the existing viewport , the new clipping boundary will be applied without shifting the model space geometry as shown in , B, and C.  illustrates model space geometry .  illustrates existing viewport  and the new diamond clipping object  that the user has created.  illustrates when object  has been converted to a viewport  and clipped.","The Delete option removes a clipping boundary if the viewport  is already clipped. The boundary object is deleted, but the object can be converted back as a polyline, ellipse, etc. (however it was originally defined).","Logic of the Graphics Program","A flowchart that illustrates the logic of the graphics program  in accordance with one or more embodiments of the invention is shown in FIG. . Those skilled in the art will recognize that this logic is provided for illustrative purposes only and that different logic may be used to accomplish the same results.",{"@attributes":{"id":"P-00099","num":"00099"},"figref":"FIG. 10","b":["108","108"]},"Generally, the flowchart begins by waiting at block  for an event (e.g., a mouse button click). It should be appreciated that, during this time, other operating system  tasks, e.g., file, memory, and video tasks, etc., may also be carried out. When an event occurs, control passes to block  to identify the event. Based upon the event, as well as the current state of the graphics program  determined in block , a new state is determined in block . In block , the logic transitions to the new state and performs any actions required for the transition. In block , the current state is set to the previously determined new state, and control returns to block  to wait for more input events.","The specific operations that are performed by block  when transitioning between states will vary depending upon the current state and the event. The various operations required to implement and maintain one or more embodiments of the invention represent particular events handled by the logic. However, it should be appreciated that these operations represent merely a subset of all of the events handled by the computer .","As described above, one or more embodiments of the invention provide for a technique of generating or obtaining a non-rectangular viewport  using a viewport  (the \u201cviewport\u201d) and an arbitrary closed graphical entity (the \u201cclip entity\u201d) connected by a reactor-based mechanism.","In one or more embodiments of the invention, the clip entity can be any closed graphical entity, but can also be open as long as its boundary can be closed via a closure algorithm. Some examples of clip entities are: polylines, circles, splines, ellipses, and solid regions. The clip entities may be stored in 3D database . The clip entity's 2D graphical boundary is extracted from the 2D database  to generate a clipping boundary, which is passed to Image Engine . Image Engine  receives the clipping boundary and utilizes clipping code to clip the contents of the viewport . Any graphics that are inside of the viewport , but \u201coutside\u201d of the clip entity's graphical boundary are not displayed.","Reactor Mechanism  is used to link the viewport  with the clip entity. Reactor Mechanism  informs the viewport  of any modifications made to the clip entity that result in the graphics of the clip entity changing. Once informed, the viewport  queries the clip entity and updates the viewport's  size and position to encompass the clip entity's new graphical extents. Therefore, any changes to the clip entity cause the viewport  to expand, contract, or move to accommodate the new graphical representation of the clip entity.","The novel approach to having separate clip entities and viewports  allows the viewport  to be clipped by any entity available in a graphics program easily. Allowing more entities to clip viewport  objects requires no extra work on the entity author's part. Reactor Mechanism  allows the viewport  to update its clipping area whenever the clip entity is modified without having to know intricate details about the clip entity, its acquisition, or its editing mechanisms. For example, suppose the clip entity is a circle. Graphics program  might already have mechanisms to change the circle's center point or radius via interactive grip editing or through a property sheet. The viewport  does not need to be aware of these editing mechanisms. It is notified by the Reactor Mechanism  when the modifications are complete, and then it updates its clip region by re-extracting the clip entity graphical boundary and passing this to the graphics system viewport  clip code within Image Engine .",{"@attributes":{"id":"P-00106","num":"00106"},"figref":["FIG. 11","FIGS. 12A","FIG. 12B"],"b":["210","12","12","1100","108","1200","12","1202","1200","710","700","1202"]},"At step , Reactor Mechanism  notifies\/informs the viewport  of the creation\/modifications in the clip entity's graphics. Once informed, the viewport  queries the clip entity to obtain the new extents, if any, of the clip entity at step . For example, in , some of the clip entities new extents are indicated by dotted lines . The viewport's  size and position are updated to encompass the clip entity's new graphical extents at step . Thus, in , if viewport  were updated to encompass the clip entity's new graphical extents, portions of viewport  would be extended to the dotted lines . At step , graphics inside of the viewport  but outside of the clip entity's graphical boundary are clipped (not displayed).  illustrates the result of clipping the graphics outside of polygonal clipping entity .","This concludes the description of the preferred embodiment of the invention. The following describes some alternative embodiments for accomplishing the present invention.","For example, any type of computer, such as a mainframe, minicomputer, work station or personal computer, could be used with the present invention. In addition, any program, function, or operating system providing graphical functions could benefit from the present invention.","In summary, the present invention discloses the use of a reactor mechanism to detect changes in a clipping entity and notifies the viewport  which adjusts its boundaries and clips the graphics accordingly. The foregoing description of one or more embodiments of the invention has been presented for the purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise form disclosed. Many modifications and variations are possible in light of the above teaching. It is intended that the scope of the invention be limited not by this detailed description, but rather by the claims appended hereto."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Referring now to the drawings in which like reference numbers represent corresponding parts throughout:",{"@attributes":{"id":"P-00010","num":"00010"},"figref":"FIG. 1"},{"@attributes":{"id":"P-00011","num":"00011"},"figref":"FIG. 2"},{"@attributes":{"id":"P-00012","num":"00012"},"figref":"FIG. 3"},{"@attributes":{"id":"P-00013","num":"00013"},"figref":"FIGS. 4A","b":["4","4"]},{"@attributes":{"id":"P-00014","num":"00014"},"figref":"FIGS. 5A","b":["5","5"]},{"@attributes":{"id":"P-00015","num":"00015"},"figref":"FIGS. 6A","b":["6","6"]},{"@attributes":{"id":"P-00016","num":"00016"},"figref":"FIG. 7"},{"@attributes":{"id":"P-00017","num":"00017"},"figref":"FIGS. 8A","b":["8","8"]},{"@attributes":{"id":"P-00018","num":"00018"},"figref":"FIGS. 9A","b":["9","9"]},{"@attributes":{"id":"P-00019","num":"00019"},"figref":"FIG. 10"},{"@attributes":{"id":"P-00020","num":"00020"},"figref":"FIG. 11"},{"@attributes":{"id":"P-00021","num":"00021"},"figref":"FIGS. 12A","b":["12","12"]}]},"DETDESC":[{},{}]}
