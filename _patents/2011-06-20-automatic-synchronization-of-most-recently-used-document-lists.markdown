---
title: Automatic synchronization of most recently used document lists
abstract: A most recently used (MRU) client synchronization engine is provided to synchronize a user's most recently used (MRU) document list associated with a client machine with a file hosting server's MRU document list. The file hosting server's MRU document list contains a list of the user's most recently used documents that are stored on the file hosting server. The user's documents that are stored on the file hosting server are accessible to the user on one or more web-enabled client machines. The MRU client synchronization engine analyzes registry data pertaining to the documents that a user uses on the client machine with the file hosting server's MRU document list to determine the user's most recently used documents.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09501490&OS=09501490&RS=09501490
owner: Microsoft Technology Licensing, LLC
number: 09501490
owner_city: Redmond
owner_country: US
publication_date: 20110620
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["A most recently used (MRU) document list contains links to documents that a user has recently opened or saved. The MRU document list is a convenient mechanism for accessing a document that was recently used. By storing the links in the MRU document list, a user does not have to navigate to a document's location to open it. A user may click on the link in the MRU document list and quickly access a document without knowing the document's location.","A user's documents may be stored remotely on a file hosting server that is accessible through a web browser. The user may access the documents stored on the file hosting server through a web-enabled computing device. Each computing device has a MRU document list containing documents the user used recently from the file hosting server, as well as other locations, while logged onto the computing device. However, the MRU document list in the computing device may not accurately reflect the most recently used documents stored on the file hosting server that the user may have used from another computing device.","This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended to be used to limit the scope of the claimed subject matter.","A user may store documents in a web-accessible file hosting server and access the documents using any web-accessible client machine. The file hosting server contains a MRU-server document list, for each user, that lists the user's most recently used documents that are stored on the file hosting server. A client machine contains a MRU-client document list that includes the user's most recently used documents stored on the file hosting server and\/or the client machine. Each client machine may not be aware of accesses the user has made to the user's documents stored on the file hosting server from other client machines. As such, the MRU document list on a particular client machine may not accurately reflect the user's most recently used documents. In order to maintain an unified view of a user's most recently used documents across multiple web-accessible computing devices, a MRU synchronization engine is provided to synchronize the MRU document lists.","In an embodiment, the MRU synchronization engine obtains a configuration list from a file hosting server and compares it with document entries stored in the client machine's registry. The configuration list contains configuration data pertaining to the user's most recently used documents that are stored on the file hosting server. The registry is a database on the client machine that stores data pertaining to documents used by the user from the client machine. The MRU synchronization engine analyzes the information in both the configuration list and the registry list to determine which documents have been more recently used. In addition, the MRU synchronization engine notifies the file hosting server of updates needed to the keep the MRU-server document list current.","These and other features and advantages will be apparent from a reading of the following detailed description and a review of the associated drawings. It is to be understood that both the foregoing general description and the following detailed description are explanatory only and are not restrictive of aspects as claimed.","Various embodiments are directed to a technology for automatically synchronizing multiple MRU document lists that reference a common set of documents. A MRU document list is a list of documents that a user has more recently used. A user may store documents in a web-accessible file hosting server that the user may access from any web-enabled client machine. The file hosting server and the web-enabled computing device each contain a MRU document list listing the user's documents stored on the file hosting server that the user has used most recently. A user may use several client machines to access the user's documents from the file hosting server. Each client machine may not be aware of the user's access to these documents from other client machines. As such, the MRU document list on a particular client machine may not accurately reflect the user's most recently used documents. In order to maintain a unified view of the most recently used documents stored on the file hosting server across multiple web-enabled client machines, a mechanism is provided to synchronize the user's MRU document lists across these devices.","A MRU synchronization engine may be utilized in a client machine to synchronize a MRU-client document list with a MRU-server document list. The MRU-client document list contains links to the most recently used documents that were used by the user from the client machine. The MRU-server document list contains links to the user's most recently used documents that are stored in the file hosting server which were accessed through any client machine.","The MRU synchronization engine obtains a configuration list from the file hosting server and compares it with the client machine's registry list. A configuration list contains configuration data pertaining to each document in the MRU-server document list. A registry list contains configuration data pertaining to each document used by the user on the client machine. The MRU synchronization engine analyzes the information in both files to determine which documents are the user's most recently used documents. In addition, the MRU synchronization engine notifies the file hosting server of updates needed to the MRU-server document list that may be attributable to the user's use from the client machine. Attention now turns to a more detailed description of the technology for performing this synchronization.",{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 1","b":["100","100","102","102","102","104","106","102"],"i":["a, ","b "]},"A file hosting server  may be any type of web-accessible file storage system, such as a server, a web server, a network server, a storage server, a file sharing server, and the like. Examples of file hosting servers  are Windows Live Sky Drive, Google Docs, Box.net, and the like. The communication network  facilitates communications between the client machines  and the file hosting server . The communication network  may embody any type of communications medium, such as wired or wireless networks, utilizing any communication protocol.","Each client machine  may contain a registry , a registry list , a MRU synchronization engine , a MRU-client document list , and a document folder . A file hosting server  may contain MRU application programming interface (API) handler procedures , a configuration list , and a file system . The file system  may contain a folder for each user  containing the user's documents that are stored in the file hosting server and a MRU-server document list  containing links to the user's most recently used documents.","Each client machine  may contain a registry  that is a central repository for storing configuration data and settings used by an operating system. In some embodiments, the registry  may be configured as a hierarchical folder-like structure of files where each subset of files is referred to as a registry hive. Each registry hive is associated with a registry key which is similar to a folder in a file system.","Each time a file is accessed or reconfigured, an entry is placed in the registry key that is associated with the document type. For example, the registry key \u201cHKEY_CURRENT_USER\\Software\\Microsoft\\Office\\12.0\\Word\\File MRU\u201d stores entries pertaining to word documents, the registry key \u201cHKEY_CURRENT_USER\\Software\\Microsoft\\Office\\12.0\\PowerPoint\\File MRU\u201d stores entries pertaining to power point files, and the registry key \u201cHKEY_CURRENT_USER\\Software\\Microsoft\\Office\\12.0\\Excel\\File MRU\u201d stores entries pertaining to excel files.","It should be noted that although the term \u201cregistry\u201d is commonly used in the context of a Windows\u00ae-based operating system, the technology disclosed herein is not constrained to any particular operating system or registry configuration. Other techniques that provide a similar functionality can be employed as well, such as, without limitation, the configuration files used in Linux or Unix-based operating systems, and the like.","A registry list  contains configuration data pertaining to all documents that a user uses or accesses from the client machine . The registry list  may contain entries for documents that are stored on the client machine, the file hosting server, and other remote storage locations.","A MRU synchronization engine  may be an application that synchronizes a particular MRU-client document list with a MRU-server document list. A MRU synchronization engine  may be embodied in software and implemented as a software component, program, computer program, application program, system program, machine program, operating system software, middleware, firmware, software module, routine, subroutine, function, method, procedure, software interface, instruction set, computing code, code segment, process, thread, and any combination thereof. Alternatively, the MRU synchronization engine  may be part of another application and implemented as a separate executing thread or process. The embodiments are not constrained to any particular type of software implementation for the MRU synchronization engine.","A MRU-client document list  is a listing of the most recently used documents that a user has most recently used. The name of each document in the MRU-client document list is a shortcut to the location of the document's file. The MRU-client document list  may list documents stored locally on a client machine  and documents stored on the file hosting server . In one or more embodiments, a document may be a word document, a power point document, and\/or an excel document. Each document is configured as a file and the terms \u201cdocument\u201d and \u201cfile\u201d are used interchangeably herein. The MRU-client document list  may be referred to in certain operating systems as the \u201cRecently Used\u201d folder, the \u201cMy Recent Documents\u201d folder, the \u201cRecent Items\u201d folder, and the like.","The MRU-client document list  may be maintained by an application that tracks the documents that the user uses. The application may add documents to a MRU-client document list based on a timestamp indicating the time a user last accessed a document. A user's access may consist of opening a document or saving a document. The application may track MRU changes in order to reconfigure the status of the document (e.g., deleted, pinned). A user may elect to keep a document on the MRU-client document list even though the document has not been accessed recently by \u201cpinning\u201d the document. By \u201cpinning\u201d a document, the user indicates its preference to keep the document on the MRU-client document list irrespective of its use. A user may \u201cunpin\u201d a document that was once pinned thereby allowing the time of its access to determine its placement on the MRU-client document list. A user may also elect to \u201cdelete\u201d a document from the MRU-client document list although the document remains accessible. Subsequent accesses to a deleted document may place the document back onto the MRU-client document list.","The documents listed in a MRU-client document list  are represented by links to the actual location of the document. The links are used to access a document quickly without opening the document from its actual location.","A document folder  lists the documents stored locally on the client machine  as well as the user's documents that are stored in the file hosting server , in a separate shortcuts folder . Although the document folder in  shows the name of each document, the document name is actually a link to a location of the document which is otherwise referred to as a shortcut.","As shown in client machine A, user A has a document folder A containing the documents, worddoc1.doc  which is stored locally on client machine A. The document folder A contains a subfolder, file hosting server shortcuts , containing links to the user's document, presentation1.ppt , stored on file hosting server . The MRU-client document list A for user A on client machine A includes worddoc1.doc  and presentation1.ppt .","As shown in client machine B, user A has a document folder B containing the document, worddoc3.doc , which is stored locally on client machine B. The document folder B contains a subfolder, file hosting server shortcuts , containing links to the user's documents, presentation1.ppt  and worddoc2.doc , which are stored on the file hosting server . The MRU-client document list B for user A on client machine B includes presentation1.ppt , worddoc2.doc  and worddoc3.doc .","The file hosting server  contains one or more MRU application programming interface (API) handler procedures , a configuration list , and a file system . The MRU synchronization engine  interacts with the file hosting server  through one or more APIs. An API may be implemented as a remote procedure call. A remote procedure call is a form of messaging where a sender appears to be executing or calling a local procedure with specified parameters. The handler of the remote procedure call runs in a separate address space. The MRU synchronization engine  uses one or more APIs to notify the file hosting server  of updates needed to the MRU-server document list . The MRU API handler procedures  receive the specified parameters used in an API procedure call from the MRU synchronization engine  and process them accordingly. The MRU API hander procedures  are located in the file hosting server .","The configuration list  is a file containing an entry for each document listed in the MRU-server document list . Each entry contains configuration data pertaining to the configuration of the document including usage of the document on all client machines .","The file system  on the file hosting server  may contain a file folder for each user. As shown in , the file hosting server  has a file folder for user A  that contains a subfolder  storing the user's documents and a MRU-server document list . The MRU-server document list  is a folder listing the user's most recently used documents from the documents stored on the file hosting server . The MRU-server document list  includes presentation1.ppt  and worddoc2.doc . The user may elect to keep a document on the MRU-server document list  in the same manner discussed above with respect to the MRU-client document list. That is, the user may \u201cpin\u201d, \u201cunpin\u201d, and \u201cdelete\u201d a document from the MRU-server document list  in the same manner discussed above.","As shown in , the subfolder named File Hosting Server  stores user A's documents presentation1.ppt  and worddoc2.doc . By storing these documents ,  on the file hosting server , user A may access these documents from a web interface separate from the client machines. User A may use the MRU-client document list on client machine A to open the file presentation1.ppt  which is stored on the file hosting server . By accessing presentation1.ppt  through the MRU-client document list A on client machine A, user A can avoid accessing presentation1.ppt  through a web browser. Likewise, user A may use the MRU-client document list B on client machine B to open the documents presentation1.ppt and worddoc2.doc, each of which is stored on the file hosting server .","The user's MRU-server document list  should reflect the user's most recently used documents for those documents stored on the file hosting server . A MRU-client document list  may not reflect the most recent uses of those documents especially when the documents were used by the user on another client machine. For this reason, each client machine  synchronizes the MRU-server document list  with the user's MRU-client document list  associated with a particular client machine .","For example, as shown in , the MRU-client document list A shows that user A's most recently used documents on client machine A are worddoc1.doc  and presentation1.ppt . Presentation1.ppt  is stored on the file hosting server . However, the MRU-client list B shows that user A's most recently used documents on client machine B include presentation1.ppt  and worddoc2.doc , both of which are stored on file hosting server . The MRU-server document list A for user A shows that both presentation1.ppt  and worddoc2.doc  were more recently used by user A. The MRU-client document list A appears to be out of sync with the more recent accesses of user A's documents stored on the file hosting server .","Referring to , there is shown the system of  where user A's MRU-client document list A on client machine A is synchronized with respect to user A's documents stored on the file hosting server  which were more recently used on client machine B. Client machine A utilizes the MRU synchronization engine A to synchronize the MRU-client document list A with the MRU-server document list . Client machine A contains a merged list A that is a temporary file used to merge entries from the registry list  and the configuration list  in order to generate an updated MRU-client document list A. As shown in , the MRU-client document list A now includes worddoc2.doc  and all of user A's MRU-client document lists A, B are in sync with respect to user A's most recently used documents that are stored on the file hosting server .","It should be noted that other situations may occur resulting in the MRU-server document list not reflecting the user's most current usage. For example, if a document was deleted off the MRU-server document list  and later reopened on a client machine , then the document is eligible for consideration on the MRU-server document list . Furthermore, if a document's pin state was altered on the client machine , this may affect the document's placement on the MRU-server document list .","Attention now turns to a more detailed discussion of operations for the embodiments with reference to various exemplary methods. It may be appreciated that the representative methods do not necessarily have to be executed in the order presented, or in any particular order, unless otherwise indicated. Moreover, various activities described with respect to the methods can be executed in serial or parallel fashion, or any combination of serial and parallel operations. The methods can be implemented using one or more hardware elements and\/or software elements of the described embodiments or alternative embodiments as desired for a given set of design and performance constraints. For example, the methods may be implemented as logic (e.g., computer program instructions) for execution by a logic device (e.g., a general-purpose or specific-purpose computer).",{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIG. 3","FIG. 3"],"b":["200","110"]},"In several embodiments, the MRU synchronization engine  may be activated automatically when the user initially logs into a user account from a client machine  (block ). In alternate embodiments, the MRU synchronization engine  may be activated by the user directly (block ). Upon activation, the MRU synchronization engine  initiates the synchronization operations once the user is logged into a user account on the file hosting server  (block ).","The MRU synchronization engine  determines the frequency at which the synchronization operations may be performed (block ). In an embodiment, the synchronization operations may be performed in accordance with a polling frequency. The polling frequency may be a default value, a user configuration input, or a combination thereof and may be used to determine the time interval at which the synchronization operations are performed after the initial synchronization.","The MRU synchronization engine  may initially perform the synchronization operations upon activation of the MRU synchronization engine  (block ). Thereafter, additional synchronizations are performed in accordance with the polling frequency. At the time indicated to perform an update (block \u2014yes) when additional updates are to be performed (block \u2014no), the MRU synchronization engine  may synchronize the MRU client and MRU server document lists (block ). Otherwise when it is not time to perform an update (block \u2014no), the method polls until the next time update occurs. The synchronization updates are terminated when the user logs off the client machine  or when the polling frequency has been satisfied (block \u2014yes).","In another embodiment, the MRU synchronization engine  may receive notifications from the file hosting server  when the MRU-server document list  has been updated. The MRU synchronization engine  may perform the synchronization operations upon receipt of the configuration list  instead of performing them in accordance with the polling frequency. In another embodiment, the MRU synchronization engine  may receive notifications from the file hosting server  when a new entry is placed onto the MRU-server document list . The file hosting server  may forward the new entry to the MRU synchronization engine  which may then update the MRU-client document list  upon receipt. Attention now turns to a discussion of the method of performing the synchronization of the client and server MRU documents lists.","Referring to , there is shown a flow chart illustrating a method  for synchronizing the MRU document lists. A snapshot or copy of the document entries in the registry  may be made and stored in a registry list  (block ). The document entries stored in the registry  may have a format containing the data fields shown in . Turning to , a document entry in the registry  may contain an item number , an entry type , a pin state , a last modified timestamp , a flags field , and an address field . The item number  is a reference indicating a placement of the entry in the registry key. The entry type indicates the type of entry. For example, the text string \u201cREG_SZ\u201d indicates the document is an Office document and not metadata. The pin state  indicates whether or not the document is to stay on the MRU document list. When a document is \u201cpinned\u201d, the document remains on the MRU document list regardless of whether it has been recently used. The last modified timestamp  indicates the last time the file was used and the flags  are for the use of an operating system. The address  is a location for the document and it may be a URL, a physical address, a network address, or a DAV address.","Turning back to , the MRU synchronization engine  requests from the file hosting server  the configuration list  (block ). In one or more embodiments, the request may be made through an API. Alternatively, messages may be transmitted between the client machine  and the file hosting server . The user's configuration list  may structured in the form of an XML (extensible markup language) file or a JSON (JavaScript Object Notation) file.","The data format of an exemplary document entry in a configuration list  may be configured as shown in . Referring to , there is shown an entry in the configuration list  containing a DAV address , a last modified timestamp , a pin state , a pin timestamp , a delete flag , and a delete timestamp . A DAV address  is the same address used by the MRU-client document lists and is a unique identifier on the file hosting server. The last modified timestamp  indicates the last time the file was opened or saved. The pin state  indicates whether or not the document is to stay on the MRU document list. The pin timestamp  indicates the time at which the document was pinned. The delete flag  indicates whether or not the document was deleted from the MRU-server document list and the delete timestamp  indicates the time of the deletion.","Turning back to , a configuration list  may not have been updated to reflect recent uses or changes made to a document while the user was operating on a client machine . The MRU synchronization engine  may discover these changes and notify the file hosting server  so that the MRU-server document list  is updated accordingly (block ). In particular, the MRU synchronization engine  may discover documents that were deleted from the MRU server document list  yet were subsequently reopened or resaved on a client machine . The MRU synchronization engine  may also detect documents that were unpinned and subsequently repinned by the user while operating on a client machine . In both cases, these documents may be placed back on the MRU-server document list .","Turning to , the MRU synchronization engine  reads each entry in the client registry list (block ) and matches the address field  of the entry from the registry list with the DAV address  in the configuration list  (block ). The delete flag  in the configuration list  is raised when a user deletes the document from the MRU-server document list  and the delete timestamp  indicates the time when the deletion occurred. The last modified timestamp  in the corresponding entry in the registry list indicates the last time when the document was used. When the delete flag  is raised and the last modified timestamp  in the registry entry is later than the delete timestamp , then the document was reopened on the client machine  after the document was deleted from the MRU-server document list  (block ). In this case, the MRU synchronization engine  notifies the file hosting server  of this condition through an API procedure call (block ).","Next, the MRU synchronization engine  determines if a document that was previously unpinned has been pinned by a user while operating on a client machine . To detect this condition, the MRU synchronization engine  compares the pin state  of the document entry in the registry list with the corresponding entry in the configuration list  (block ). When the pin state  from the configuration list  indicates that the document is not pinned and the pin timestamp  from the configuration list  is earlier than the last modified timestamp  of the corresponding entry in the registry list, then the MRU synchronization engine  notifies the file hosting server , through an API procedure call, that the document entry has been pinned (block ).","Referring back to , the MRU synchronization engine  merges the registry list  and the configuration list  into a merged list  containing all the entries from the registry list that pertain to the documents at issue and all the entries from the configuration list  (block ). The merged list  may then be analyzed for documents that have been more recently opened, modified, saved, or pinned on the client machine  (block ).","Referring to , the MRU synchronization engine  proceeds by sorting the merged list  by address. In particular, the address field  of the registry list and the DAV address  of the MRU server document list  may be used as the sort criteria (block ). When the merged list entries are sorted by address, entries having a common address are positioned one after the other. As such, it is easier to match a document entry in the registry list with its corresponding entry in the configuration list .","The MRU synchronization engine  compares a document's entry in the registry list with the corresponding entry in the configuration list  (i.e., entry pair) (block ). For each such entry pair (block ), the MRU synchronization engine  analyzes the entry pair for more recent uses made to the document while the user was operating on a client machine  which are not reflected in the configuration list .","The MRU synchronization engine  compares the last modified timestamp  of the registry list entry with the last modified timestamp  (block ). If the last modified timestamp  on the registry entry is less recent, then the document has been accessed on a client machine  later than the last use of the document on the file hosting server . In this case, the MRU synchronization engine  notifies the file hosting server  of this event through an API procedure call (block ).","In addition, the MRU synchronization engine  compares the pin state and pin timestamp for a document entry in both the registry list  and the configuration list  in order to determine if the document's pin state was modified by the user operating on a client machine  (block ). If the pin state  and the pin timestamp  on the document's entry in the registry list is less recent than the pin timestamp  on the corresponding entry in the configuration list , then the document's pin state was modified by the user while operating on the client machine . The MRU synchronization engine  notifies the file hosting server  of this situation through an API procedure call (block ). Lastly, for each entry pair, the entry with the less recent last modified timestamp is deleted (block ).","Turning back to , a new MRU client document list is then created from the merged list  (block ). Referring to , the merged list  is sorted on pin state in order to get the pinned documents to the top of the merged list  (block ). Next, the unpinned documents are sorted by last modified timestamp in order to place the unpinned documents with the latest timestamp ahead of those with an earlier timestamp (block ). Thereafter, the merged list  may be trimmed to only include the maximum number of entries allowed in a MRU-client document list (block ). The more recently used documents are at the top of the list while the earlier-used documents are at the end of the merged list . If the number of entries in the merged list  exceeds the maximum number of entries allowed in a MRU-client document list, then the merged list  only takes the maximum number from the top of the merged list  (block ).","The merged list  at this point is the updated MRU client document list. Each entry in the updated MRU client document list may be written into the registry  (block ) and the new MRU client document list replaces the existing MRU client document list (block ). Turning back to , the MRU synchronization engine  replaces the document folder for the file hosting server documents with the addresses or shortcuts contained in the updated MRU client document list (block ). Attention now turns to a discussion of the operating environment.","Referring now to , there is shown a schematic block diagram of an exemplary operating environment . The operating environment  may include one or more client(s)  in communication through a communications framework  with one or more server(s) . In an embodiment, a client  may be configured to use documents or data stored in a server  and the client  may be implemented as the client machine . In an embodiment, the server  may receive requests from one or more clients  to access the documents and data stored therein. In an embodiment, the server  may be implemented as the file hosting server .","A client  may be embodied as a hardware device, a software module, or as a combination thereof. Examples of such hardware devices may include, but are not limited to, a computer (e.g., server, personal computer, laptop, etc.), a cell phone, a personal digital assistant, or any type of computing device, and the like. A client  may also be embodied as a software module having instructions that execute in a single execution path, multiple concurrent execution paths (e.g., thread, process, etc.), or in any other manner.","A server  may be embodied as a hardware device, a software module, or as a combination thereof. Examples of such hardware devices may include, but are not limited to, a computer (e.g., server, personal computer, laptop, etc.), a cell phone, a personal digital assistant, or any type of computing device, and the like. A server  may also be embodied as a software module having instructions that execute in a single execution path, multiple concurrent execution paths (e.g., thread, process, etc.), or in any other manner.","The communications framework  facilitates communications between the client  and the server . The communications framework  may embody any type of communications medium, such as wired or wireless networks, utilizing any communication protocol.","Referring to , a client machine  may have a processor , a memory , and a network interface . The processor  may be any commercially available processor and may include dual microprocessors and multi-processor architectures. The network interface  facilitates wired or wireless communications between the client machine  and a communications network  in order to provide a communications path between the client machine  and the file hosting server .","The memory  may be any computer-readable storage media or computer-readable media that may store processor-executable instructions, procedures, applications, and data. The computer-readable media does not pertain to propagated signals, such as a modulated data signal transmitted through a carrier wave. It may be any type of memory device (e.g., random access memory, read-only memory, etc.), magnetic storage, volatile storage, non-volatile storage, optical storage, DVD, CD, floppy drive, disk drive, flash memory, and the like. The memory  may also include one or more external storage devices or remotely located storage devices. The memory  may contain instructions and data as follows:\n\n","Referring to , a file hosting server  may have a processor , a memory , and a network interface . The processor  may be any commercially available processor and may include dual microprocessors and multi-processor architectures. The network interface  facilitates wired or wireless communications between the file hosting server  and a communications network  in order to provide a communications path between a client machine  and the file hosting server .","The memory  may be any computer-readable storage media or computer-readable media that may store processor-executable instructions, procedures, applications, and data. The computer-readable media does not pertain to propagated signals, such as a modulated data signal transmitted through a carrier wave. It may be any type of memory device (e.g., random access memory, read-only memory, etc.), magnetic storage, volatile storage, non-volatile storage, optical storage, DVD, CD, floppy drive, disk drive, flash memory, and the like. The memory  may also include one or more external storage devices or remotely located storage devices. The memory  may contain instructions and data as follows:\n\n","Although the subject matter has been described in language specific to structural features and\/or methodological acts, it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather, the specific features and acts described above are disclosed as example forms of implementing the claims.","For example, various embodiments of the system  may be implemented using hardware elements, software elements, or a combination of both. Examples of hardware elements may include devices, components, processors, microprocessors, circuits, circuit elements, integrated circuits, application specific integrated circuits, programmable logic devices, digital signal processors, field programmable gate arrays, memory units, logic gates and so forth. Examples of software elements may include software components, programs, applications, computer programs, application programs, system programs, machine programs, operating system software, middleware, firmware, software modules, routines, subroutines, functions, methods, procedures, software interfaces, application program interfaces, instruction sets, computing code, code segments, and any combination thereof. Determining whether an embodiment is implemented using hardware elements and\/or software elements may vary in accordance with any number of factors, such as desired computational rate, power levels, bandwidth, computing time, load balance, memory resources, data bus speeds and other design or performance constraints, as desired for a given implementation.","Some embodiments may comprise a storage medium to store instructions or logic. Examples of a storage medium may include one or more types of computer-readable storage media capable of storing electronic data, including volatile memory or non-volatile memory, removable or non-removable memory, erasable or non-erasable memory, writeable or re-writeable memory, and so forth. Examples of the logic may include various software components, such as programs, procedures, module, applications, code segments, program stacks, middleware, firmware, methods, routines, and so on. In an embodiment, for example, a computer-readable storage medium may store executable computer program instructions that, when executed by a processor, cause the processor to perform methods and\/or operations in accordance with the described embodiments. The executable computer program instructions may be implemented according to a predefined computer language, manner or syntax, for instructing a computer to perform a certain function. The instructions may be implemented using any suitable high-level, low-level, object-oriented, visual, compiled and\/or interpreted programming language.","In various embodiments, the system  described herein may comprise a computer-implemented system having multiple components, programs, procedures, modules. As used herein these terms are intended to refer to a computer-related entity, comprising either hardware, a combination of hardware and software, or software. For example, a component may be implemented as a process running on a processor, a hard disk drive, multiple storage drives (of optical and\/or magnetic storage medium), an object, an executable, a thread of execution, a program, and\/or a computer. By way of illustration, both an application running on a server and the server may be a component. One or more components may reside within a process and\/or thread of execution, and a component may be localized on one computer and\/or distributed between two or more computers as desired for a given implementation. The embodiments are not limited in this manner."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF DRAWINGS","p":[{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 12"}]},"DETDESC":[{},{}]}
