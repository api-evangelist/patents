---
title: Program object to support connection generation
abstract: A system and method for a program object to support generation of connections. An embodiment of a method comprises establishing a first program object, the program object being designated as an object factory for generation of a connection factory, the first program object acting as a proxy for all connection factory requests; receiving a request for a connection factory from a program application at the first program object; generating a request for the connection factory by the first program object; obtaining an instance of the connection factory; generating a connection using the connection factory; and deploying the connection between the computer application and an external resource using the generated connection.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07594237&OS=07594237&RS=07594237
owner: SAP AG
number: 07594237
owner_city: Walldorf
owner_country: DE
publication_date: 20040601
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["Embodiments of the invention generally relate to the field of client\/server systems and, more particularly, to a system and method for a program object to support connection generation.","A conventional server system may include an application server that includes certain applications. The server system may provide interfaces to certain external resources. The server may include a J2EE\u2122 Java\u2122 2 Enterprise Edition) compatible system. In operation of the server system, connections may be required between the applications and the external resources. To produce such connections, an entity may make a request to generate an instance of a connection factory, the connection factory being a program object to generate a connection between an application and an external resource.(\u201cJ2EE\u201d and \u201cjava\u201d are trademarks of Sun Microsystems, Inc.)","However, a program object, such as an Enterprise JavaBean\u2122 (EJB\u2122), may have multiple different properties that are specified for connection requirements. With the possible combinations of these properties, numerous different connection factories may be needed to provide all possible combinations of properties. (\u201cEnterprise javaBean\u201d and \u201cEJB\u201d are trademarks of Sun Microsystems, Inc.)","Further, the process of generating a connection factory may require numerous operations. For example, a connection factory may be a serializable object. Under common connection requirements, serialization will be required to bind each of the different connection factory objects. Further, when a connection factory is requested, deserialization using the serialized form of the object and the appropriate class loader is then done in order to return a new instance of the connection factory. These operations may be time-consuming and thus slow the process of establishing connections for server applications.","A system and method for a program object to support connection generation is described.","Under an embodiment of the invention, a method comprises establishing a first program object, the program object being designated as the connection factory for a plurality of program objects; receiving a request for a connection factory by the first program object; sending a request for the connection factory from the first program object; obtaining an instance of the connection factory; and deploying a program connection using the connection factory.","Under another embodiment of the invention a method comprises receiving a request for a connection factory from a program object, the connection factory to produce a connection between a program application on a server and an external resource, the request being received by a resource object factory in proxy for the server resource system; requesting a connection factory to produce the connection; receiving the connection factory; and returning the connection factory to the requesting program object.","Under another embodiment of the invention a server system comprises an application container, the application container comprising a program application; an interface with an external resource, the external resource to be connected to the program application; a resource system to provide for the connections between the program application and the external resource; and a resource object factory, the resource object factory to assist in the establishment of the connection between the program application and the external resource.","Embodiments of the invention are generally directed to server operations. Under an embodiment of the invention, a system may include a program object to support generation of connections.","Under an embodiment of the invention, a program object is provided to assist in generation of connections. The program object is to assist in the processing of requests for connections between a server system and various resources. Under an embodiment of the invention, a resource object factory acts as a proxy between an entity and a resource system for processing connections. Under an embodiment of the invention, the resource object factory acts to tune up and assist in the operation of a resource system and to manage the lifecycle of connection factories.","Under an embodiment of the invention, a resource system is a system for providing communications between containers on the server, each container being a container being an entity to provides life cycle management, security, deployment, and runtime services to program components, and resources such as JDBC connector, JMS connector, and connector container services. Under an embodiment of the invention, a resource object factory assists in the generation of connections, such as in supporting the operation of the resource system. Under an embodiment of the invention, a server may include a server that is compatible with the J2EE (Java 2 Enterprise Edition) specification, version 1.4, Nov. 24, 2003. Under an embodiment of the invention, the resource object factory may be utilized to assist in the provision of connections for the server in conformity with the J2EE Connector Architecture Specification (JCA), including version 1.0 Aug. 22, 2001 and version 1.5, Nov. 24, 2003.","According to an embodiment of the invention, in the establishment of a connection, an entity may request generation of an instance of a connection factory from a resource system and a JNDI (Java Naming and Directory Interface). A JNDI is described in the JNDI Application Programming Interface (API), version 1.2, Jul. 14, 1999, and the JNDI Server Provider Interface (SPI), version 1.3, Jul. 14, 1999. Under an embodiment of the invention, a resource object factory acts as a proxy between the entity and the resource system and the JNDI, acting to process connection factory requests. Under an embodiment, the resource object factory will be used by each resource reference object within the JNDI namespace in the generation of connection factories. A connection factory is generally an object that produces connection objects that enable a component to access a resource. Under an embodiment of the invention, each resource reference declares the resource object factory to be the object factory for the resource reference, and the resource object factory then acts as the recipient of connection factory requests.","The J2EE connector architecture provided by the JCA enables J2EE components to interact with enterprise information systems (EISs) and for the EISs to interact with J2EE components. A resource adapter is a component that implements the J2EE connector architecture for a specific EIS. A connector is a mechanism to provide connectivity to EISs, with a connector being specific to a particular EIS and consisting of the resource adapter and any application development tools for EIS connectivity. A resource adapter is generally stored in a resource adapter archive (RAR) file and can be deployed on any J2EE server to mediate communication between the server and the EIS via contracts.","Pursuant to the JCA, an Enterprise Java bean may specify certain elements that are otherwise optional in J2EE deployment. These objects are res-sharing-scope to indicate whether a connection to a resource manager is shareable or unshareable; res-auth to indicate whether there is a programmatic sign-on to an EIS; and non-transactional, which indicates whether the resource adapter may be involved in a global transaction, if any. With combinations of these properties (each having two possible values), it may be necessary to bind eight different connection factories. A connection factory is generally from type javax.resource.cci.ConnectionFactory, which is thus java.io.Serializable. Serialization describes the process of converting object instances into a linear stream of bytes (thus a serial data stream), which may be done for purposes of transferring, storing, or manipulating data. For each of such eight connection factories, serialization will occur each time any of these items is bound. Further, deserialization will occur each time there is a look up of one of such connection factories.","However, under the JNDI specification, it is also possible to bind objects of type reference instead of the serializable type that is specified for a connection factory. A reference object contains information, denoted as RefAddr properties to be stored within the reference object. The information may include the name of the object factory, which can be utilized to restore the object. Under an embodiment of the invention, the resource object factory is specified as an object factory for each relevant reference. In this way, the resource object factory acts as the recipient of each connection factory request, without requiring the serialization of the resource object factory on binding and the deserialization of a serialized object on look up. Under an embodiment of the invention, a connection factory that is provided is a Java object working in the same virtual machine as the resource object factory.","Under an embodiment of the invention, a resource object factory is enabled by making the object factory singleton. A singleton is a design pattern that supports creation of only one instance of a class. Therefore, the resource object factory will support the creation of a single factory object to operate as the connection factory for each reference.","Under an embodiment of the invention, normal bind and lookup operations may also then be modified to improve efficiency of operations. For example, utilizing the reference object, a bind operation for the connection factory may be replaced with an add to a given data structure. The lookup may then be replaced by getting the object from the given data structure. Under an embodiment of the invention, the name of the requested connection factory are included in the RefAddr properties specified under the JCA, these being the shareable property, the authority property, and the non-transaction property. The connection factory name thus will be:\n\n","Under an embodiment of the invention, each instance of a connection factory is configured by passing the connection factory an appropriate connection manager. Therefore, a connection factory then may be modified and controlled by controlling the underlying connection manager. For example, the connection manager may be started or stopped or the properties of the connection manager may be changed. The properties of a connection manager then may be changed through the JNDI. Under an embodiment of the invention, a managed connection factory wrapper (MCFWrapper) is bound at deployment time and contains properties needed for an underlying resource system. The managed connection factory wrapper includes the managed connection factory object, which will serve as the factory for connection factory objects. The managed connection factory wrapper is cached within the resource object factory after the start of a given connection factory, and thus a change of properties for the connection factory can be made by invoking appropriate methods of the resource object factory.",{"@attributes":{"id":"p-0027","num":"0027"},"figref":["FIG. 1","FIG. 1","FIG. 1"],"b":["105","110","115","110","105","125","120","130","115","130","130","135"]},{"@attributes":{"id":"p-0028","num":"0028"},"figref":"FIG. 2","b":["205","210","215","225","220","235","230","245","240","250","255","260","265","250","200","250","250"]},"The JNDI architecture consists of the JNDI API and the JNDI SPI. The JNDI API allows Java applications to access a variety of naming and directory services. The JNDI SPI is then used by multiple service providers, including directory service providers. The JNDI Service Provider Interface (SPI) provides the means by which naming and directory services are integrated into the JNDI framework. This arrangement enables a variety of directory and naming services to be plugged in transparently to a Java application.",{"@attributes":{"id":"p-0030","num":"0030"},"figref":"FIG. 3","b":["305","310","325","315","320","310","315"]},{"@attributes":{"id":"p-0031","num":"0031"},"figref":"FIG. 4","b":["405","410","415"]},"To generate an instance of a connection factory, there is a lookup operation . For each of the multiple connection factories, there is a deserialization operation , converting the serialized version of the program object data. The deserialized factory then may be utilized in the process of generating and returning an instance of the connection factory . As illustrated in , multiple operations are needed to generate the connection factory. A connection factory needs to be bound for each combination of properties for the program object, and each of these connection factories is then serialized. Then, a deserialization operation is required each time there is a request to generate an instance of a connection factory.",{"@attributes":{"id":"p-0033","num":"0033"},"figref":["FIG. 5","FIG. 5"],"b":["505","510","515"]},"To deploy a connection factory, there is a lookup request , which, because of the establishment of a resource object factory, results in a get object instance request  to the resource object factory. There is then a request for an instance of the connection manager , and a request to create a connection factory using the connection manager . In the processes shown in , generation of a connection factory may be accomplished using the support of a resource object factory without the serialization and deserialization of the resource object.",{"@attributes":{"id":"p-0035","num":"0035"},"figref":["FIG. 6","FIG. 6"],"b":["605","640","610","642","615","615","644","646","615","648","620","620","650","650","625","652","630","654","656","635","635","658","660","662","664","668"]},"It should be appreciated that reference throughout this specification to \u201cone embodiment\u201d or \u201can embodiment\u201d means that a particular feature, structure or characteristic described in connection with the embodiment is included in at least one embodiment of the present invention. Therefore, it is emphasized and should be appreciated that two or more references to \u201can embodiment\u201d or \u201cone embodiment\u201d or \u201can alternative embodiment\u201d in various portions of this specification are not necessarily all referring to the same embodiment. Furthermore, the particular features, structures or characteristics may be combined as suitable in one or more embodiments of the invention. Embodiments may include a computer-readable medium having stored thereon data representing sequences of instructions that, when executed by a processor, cause the processor to perform certain operations.","Similarly, it should be appreciated that in the foregoing description of exemplary embodiments of the invention, various features of the invention are sometimes grouped together in a single embodiment, figure, or description thereof for the purpose of streamlining the disclosure aiding in the understanding of one or more of the various inventive aspects. This method of disclosure, however, is not to be interpreted as reflecting an intention that the claimed invention requires more features than are expressly recited in each claim. Rather, as the following claims reflect, inventive aspects lie in less than all features of a single foregoing disclosed embodiment. Thus, the claims following the detailed description are hereby expressly incorporated into this detailed description, with each claim standing on its own as a separate embodiment of this invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Embodiments of the invention are illustrated by way of example, and not by way of limitation, in the figures of the accompanying drawings in which like reference numerals refer to similar elements.",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
