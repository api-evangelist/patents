---
title: Hierarchical display and navigation of document revision histories
abstract: A system and technique for displaying a document's workflow history are disclosed. The system includes a graphical user interface for displaying one or more graphical representations of events generated by an application configured to edit a document. Each of the events generated by the application may be stored in a data structure that is associated with one or more portions of the document. The data structure may also be associated with a digital image that reflects the state of the document at the time the event was generated and one or more frames of digital video captured substantially simultaneously with the generation of the event. The system may display the stored events via graphical representations in the graphical user interface that represent a portion of the total document workflow history. A user may navigate through the graphical events based on a hierarchical algorithm for clustering events.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08874525&OS=08874525&RS=08874525
owner: AUTODESK, Inc.
number: 08874525
owner_city: San Rafael
owner_country: US
publication_date: 20110419
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION","System Overview"],"p":["1. Field of the Invention","The invention relates generally to computer software and, more specifically, to the hierarchical display and navigation of document revision histories.","2. Description of the Related Art","Users create documents in a variety of different applications, such as word processors, spreadsheets, image editors, and computer-aided design (CAD) applications. A revision history of a document is typically thought of as the set of ordered operations a user has performed in the application to create or modify contents of the document. One useful aspect of a revision history is the ability to undo, redo, or modify an operation that is stored in the revision history. Some applications discard a revision history when the document is either saved or closed, while other applications store the revision history along with the document. A revision history is typically visualized or navigated using one of many available techniques, such as textual lists, instructions presented in natural language, enhanced screen shots, before-and-after thumbnails, animations or videos.","One drawback to an approach for displaying a document revision history implemented by many applications is that user operations are not grouped based on a hierarchical system. For complex applications, the number of user operations stored in a revision history can become quite large. Typically, each of the user operations is displayed in a similar manner to all other user operations and navigating through all the user operations may become difficult. Another drawback of many applications that store a revision history of a document is that the ability to utilize the information stored for a user operation may be limited. For example, in some applications, operations based on the document revision history may be limited to undoing the last user operation. Yet another drawback to current approaches for displaying a document revision history is that, for example, simply listing the document revision history may not provide a user with enough information to understand why a series of revisions were made, but merely informs the user which revisions resulted in the final document.","As the foregoing illustrates, what is needed in the art is an effective mechanism for displaying, navigating and interacting with information stored in a complete revision history of a document.","One example embodiment of the present invention sets forth a method for capturing a workflow history of an electronic document. The method includes the steps of receiving an event generated by an application that is configured to modify the document, generating a data object that includes information related to the event, capturing a digital image that reflects a state of the document at a point in the workflow history of the document corresponding to when the application generated the event, associating the data object with a portion of the document modified as a result of the event as well as the digital image, and storing the data object and the digital image in a memory.","Another example embodiment of the present invention sets forth a computer readable storage medium containing a program which, when executed, performs an operation for capturing a workflow history of an electronic document. The operation includes the steps of receiving an event generated by an application that is configured to modify the document, generating a data object that includes information related to the event, capturing a digital image that reflects a state of the document at a point in the workflow history of the document corresponding to when the application generated the event, associating the data object with a portion of the document modified as a result of the event as well as the digital image, and storing the data object and the digital image in a memory.","Yet another example embodiment of the present invention sets forth a system for capturing a workflow history of an electronic document. The system includes a memory and a processor coupled to the memory and configured to receive an event generated by an application that is configured to modify the document, generate a data object that includes information related to the event, capture a digital image that reflects a state of the document at a point in the workflow history of the document corresponding to when the application generated the event, associate the data object with a portion of the document modified as a result of the event as well as the digital image, and store the data object and the digital image in the memory.","One advantage of the disclosed approach is that the system provides a flexible and intuitive approach for displaying and navigating the revision history of a document. Even a large revision history that includes hundreds of user operations may be reduced to a simple graphical representation that may be navigated by a user to visualize the revision history at finer and finer detail. A user may use tools within the system to filter or search the revision history for particular types of user operations. The hierarchical, high-level clustering algorithm also presents each of the user operations within the context of the complete revision history, allowing a user to visualize and learn various techniques for creating or modifying the content of a document. In addition, captured video content associated with the revision history may be played back to provide the user context within the application of how a document was revised.","In the following description, numerous specific details are set forth to provide a more thorough understanding of the invention. However, it will be apparent to one of skill in the art that the invention may be practiced without one or more of these specific details. In other instances, well-known features have not been described in order to avoid obscuring the invention.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 1","b":["100","100","100","102","104","105","102","102","100","104","102","102","105","107","107","108","109","102","105","107"]},"One or more display processors, such as display processor , are coupled to memory bridge  via a bus or other communication path  (e.g., a PCI Express, Accelerated Graphics Port, or HyperTransport link); in one embodiment display processor  is a graphics subsystem that includes at least one graphics processing unit (GPU) and graphics memory. Graphics memory includes a display memory (e.g., a frame buffer) used for storing pixel data for each pixel of an output image. Graphics memory can be integrated in the same device as the GPU, connected as a separate device with the GPU, and\/or implemented within system memory . Display processor  periodically delivers pixels to a display device  that may be any conventional CRT or LED monitor. Display processor  can provide display device  with an analog or digital signal.","A system disk  is also connected to I\/O bridge  and may be configured to store content and applications and data for use by CPU  and display processor . System disk  provides non-volatile storage for applications and data and may include fixed or removable hard disk drives, flash memory devices, and CD-ROM, DVD-ROM, Blu-ray, HD-DVD, or other magnetic, optical, or solid state storage devices.","A switch  provides connections between I\/O bridge  and other components such as a network adapter  and various add-in cards  and . Network adapter  allows system  to communicate with other systems via an electronic communications network, and may include wired or wireless communication over local area networks and wide area networks such as the Internet.","Other components (not shown), including USB or other port connections, film recording devices, and the like, may also be connected to I\/O bridge . For example, an audio processor may be used to generate analog or digital audio output from instructions and\/or data provided by CPU , system memory , or system disk . Communication paths interconnecting the various components in  may be implemented using any suitable protocols, such as PCI (Peripheral Component Interconnect), PCI Express (PCI-E), AGP (Accelerated Graphics Port), HyperTransport, or any other bus or point-to-point communication protocol(s), and connections between different devices may use different protocols, as is known in the art.","In one embodiment, display processor  incorporates circuitry optimized for graphics and video processing, including, for example, video output circuitry, and constitutes a graphics processing unit (GPU). In another embodiment, display processor  incorporates circuitry optimized for general purpose processing. In yet another embodiment, display processor  may be integrated with one or more other system elements, such as the memory bridge , CPU , and I\/O bridge  to form a system on chip (SoC). In still further embodiments, display processor  is omitted and software executed by CPU  performs the functions of display processor .","Pixel data can be provided to display processor  directly from CPU . In some embodiments of the present invention, instructions and\/or data representing a scene are provided to a render farm or a set of server computers, each similar to system , via network adapter  or system disk . The render farm generates one or more rendered images of the scene using the provided instructions and\/or data. These rendered images may be stored on computer-readable media in a digital format and optionally returned to system  for display.","Alternatively, CPU  provides display processor  with data and\/or instructions defining the desired output images, from which display processor  generates the pixel data of one or more output images, including characterizing and\/or adjusting the offset between stereo image pairs. The data and\/or instructions defining the desired output images can be stored in system memory  or a graphics memory within display processor . In an embodiment, display processor  includes 3D rendering capabilities for generating pixel data for output images from instructions and data defining the geometry, lighting shading, texturing, motion, and\/or camera parameters for a scene. Display processor  can further include one or more programmable execution units capable of executing shader programs, tone mapping programs, and the like.","In one embodiment, application  is stored in system memory . Application  may be any application configured to display a graphical user interface (GUI) on display device . Application  may be configured to generate and modify documents based on input received from a user. For example, application  may be a word processing application or an image editing program.","It will be appreciated that the system shown herein is illustrative and that variations and modifications are possible. The connection topology, including the number and arrangement of bridges, may be modified as desired. For instance, in some embodiments, system memory  may be connected to CPU  directly rather than through a bridge, and other devices may communicate with system memory  via memory bridge  and CPU . In other alternative topologies display processor  may be connected to I\/O bridge  or directly to CPU , rather than to memory bridge . In still other embodiments, I\/O bridge  and memory bridge  may be integrated in a single chip. In addition, the particular components shown herein are optional. For instance, any number of add-in cards or peripheral devices might be supported. In some embodiments, switch  is eliminated, and network adapter  and add-in cards ,  connect directly to I\/O bridge .",{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 2","b":["200","100","210","150","220","210","210","220","210","220","210","210","220","210"]},"Application  may be designed to generate and edit documents, images, videos, or any other type of user defined content. A user may generate document  via application  and store document  in system memory  or on system disk . In one embodiment, document  is an image stored in a compressed file format, such as the JPEG image file format. In alternative embodiments, document  may be a text document, such as a Microsoft Word\u2122 document file. In other embodiments, document  may be media content such as a video file compressed using an MPEG codec. In yet other embodiments, document  may be a computer-aided design (CAD) model. The CAD model may be an assembly of one or more parts that include defined volumes, surfaces or vertices. The application framework  is configured to capture and store the document workflow history (i.e., document revision history) for one or more documents created or modified with application .","In one embodiment, the document workflow history may include one or more operations used to modify document  as well as a timestamp that reflects a point in time that the operations were executed. The document workflow history may also include digital images or digital video that reflects a state of the document  as a result of executing the operations. A user may navigate through graphical representations of the document workflow history to visualize the steps taken to create the associated document . In another embodiment, the document workflow history may include a subset of operations that directly result in a modification to document .","Document workflow application extension  may implement an application programming interface (API). The document workflow application extension  receives notifications of events generated by application  and stores the events in a data object in event data . In one embodiment, document workflow application extension  generates an data object in event data  for each event generated by application . The data object in event data  may include information related to the event as well as a timestamp corresponding to when that particular event was generated by the application . The timestamp may be an absolute time, such as a time related to the computer clock of computer system , or a relative time, such as an elapsed time since document  was created.","Document workflow application extension  may also be configured to capture a screenshot (i.e., a digital image) of the main application window when an event is generated. These screenshots may be stored in image data  and may be associated with one or more data objects in event data . In one embodiment, each screenshot is stored in a compressed file format such as a JPEG file format. In alternative embodiments, the bit depth of the captured image may be reduced to minimize the size of the memory required to store image data . For example, the screen resolution of display device  in the native application environment may be 800\u00d7600 at 24 bpp (bits per pixel). Such a resolution corresponds to each color component (e.g., Red, Green, and Blue) being encoded with 8 bits. In contrast, the screenshot may be stored in a 16 bpp color depth such as by using a 565 mode where the red and blue channels are each encoded with 5 bits and the green channel is encoded with 6 bits. Using a reduced color depth to store image data  may reduce the memory requirements of system . In another embodiment, metadata associated with the screenshot may be stored along with the screenshot in image data . Such metadata may be included in the digital image file and may identify one or more data objects in event data  associated with the screenshot.","Document workflow application extension  may also be configured to capture video data  associated with the document . For example, document workflow application extension  could be configured to capture one or more frames of digital video that, when played back, display a dynamic state of document  during the generation of the events stored in the document workflow history. In one embodiment, document workflow application extension  may capture a plurality of screenshots of the main application window of application  at a frame rate of 10 frames per second. Each screenshot corresponds to one frame of video data . Document workflow application extension  may store video data  in a lossless video format or a compressed format such as by encoding video data  using an MPEG-2 video encoder or an H.264\/MPEG-4 Advanced Video Coding (AVC) encoder.","In one embodiment, a file header of a document  will be modified by the document workflow application extension  when a document revision history has been created by the document workflow application extension . The document  header may include a tag in the header that specifies that a document workflow history associated with the document is stored in a memory and include pointers to any associated metadata such as event data , image data , or video data  that are included in the document workflow history.","In one embodiment, application  and document workflow application extension  are separate processes executing in a multitasking operating system environment on CPU . In another embodiment, application  and document workflow application extension  may be included within a single process executing on CPU . Application , document , document workflow application extension , event data , image data , and video data  may all be stored locally in system memory  during execution. It will be appreciated that in some embodiments, document , event data , image data , and video data  may be written to system disk  or other non-volatile storage connected to computer system  and paged into system memory  as needed. Alternatively, such data may be stored remotely on a server located on the Internet and accessed remotely via network adapter .","In one embodiment, a user may use the document workflow application extension  to search stored document revision histories for a plurality of saved documents . For example, a user may be interested in finding other documents  that include a revision made with a specific tool, such as a line tool. A user may submit a query to the document workflow application extension  which then searches through multiple sets of event data  associated with different documents  and returns a subset of documents  that include an entry in event data  related to the line tool. In this way, a user may quickly search through a database of documents  to find examples of work related to specific tools of the application .",{"@attributes":{"id":"p-0050","num":"0049"},"figref":["FIGS. 3A-3C","FIG. 2","FIG. 3A","FIG. 5"],"b":["300","200","210","310","110","310","215","310","310","215","310","215","310"]},"In one embodiment, document workflow application extension  may be executing as a process in the background of computer system  while a user is generating or modifying document  via application . Document workflow application extension  is configured to store information related to events in event data  in order to capture the document workflow history of document . Document workflow application extension  generates data objects in event data , stores screenshots of host application window  in image data , and stores one or more frames of digital video in video data  as well as creating associations between the data objects in event data , the screenshots in image data , and the frames of digital video in video data . For example, document workflow application extension  may store metadata along with a screenshot in image data  that associates the screenshot with a data object in event data . More detailed information about the generation and storage of event data , image data , and video data  is set forth below in conjunction with a description of .","Document workflow application extension  may enable a user to view the document workflow history in a hierarchical, graphical representation. In one embodiment, a GUI associated with document workflow application extension  may be displayed on display device  in response to a user command. In another embodiment, the GUI associated with the document workflow application extension  may be displayed automatically whenever a document  associated with a stored document revision history is opened in application . As shown in , GUI may be displayed on display device . GUI includes the host application window  of GUI that is resized to enable a document workflow window  and a timeline window  to be displayed on display device  proximate to the host application window . Document workflow window  may include one or more graphical representations of events included in the document workflow history of document . The graphical representations may be associated with a hierarchy such that the user may browse through the entire document workflow history at finer and finer levels of detail. A document workflow window , according to one embodiment of the present invention, is described below in connection with .","Timeline window  may be configured to display a timeline object that includes one or more tracks of information related to the events generated by application . Each track of information may include one or more marker objects corresponding to events that were generated by application . The timeline object may be configured such that the marker objects are arranged on the timeline object in a chronological order. Timeline window  may also include a timeline marker that identifies a position in video data  that is currently displayed. As the timeline marker is moved to a point in the timeline window  that corresponds to a previous state of document , a frame of video data  that is associated with a position of the timeline marker may be overlaid on top of host application window . Timeline window  may also include one or more video controls that allow a user to play, rewind, or fast forward video data .","As shown in , video playback window  may be displayed directly over host application window . Document workflow application extension may cause one or more frames of digital video from video data  to be displayed in video playback window . The digital video reflects the dynamic state of document  over the document workflow history of the document . The timeline marker in timeline window  may be positioned at a location in the timeline window  that corresponds to the frame of digital video currently displayed in video playback window . A screenshot of timeline window , according to one embodiment of the present invention, is described below in connection with . In alternative embodiments, the application  may be utilized to change the actual state of document  to reflect a previous point in the document revision history using stored information about past events in event data .","In one embodiment, document workflow application extension  may be configured to play back only select portions of the digital video, fast-forwarding through portions that are not particularly interesting to a user. For example, document workflow application extension may be configured to play back a first portion of video data  in response to a user selecting an event in the document workflow history. Document workflow application extension  may be configured to only play back those portions of video data  that are associated with data objects in event data  that correspond to events of the same type as the selected event. For example, the selected event may correspond to an operation where a user drew graphics objects on a digital canvas using a paintbrush tool in application . Document workflow application extension  may be configured to playback each portion of video data  that is associated with an event related to the paintbrush tool. Document workflow application extension  may analyze video data  and fast-forward through portions of video data  that are not related to any events related to the paintbrush tool. Consequently, the user may view a digital video that shows the state of document  around each event related to the paintbrush tool. In other embodiments, document workflow application extension  may filter the video data  based on one or more filter criteria selected by a user. In yet other embodiments, document workflow application extension  may filter the video data  based on one or more search terms entered in a search query. For example, a user may search video data  for any portions of the digital video related to a \u201cpaintbrush tool\u201d search query.",{"@attributes":{"id":"p-0056","num":"0055"},"figref":["FIGS. 4A-4C","FIG. 4A","FIG. 1"],"b":["221","210","215","220","215","215","411","430","100","411","430"]},"Once a user opens or creates a document  in application , document workflow application extension  generates a data object corresponding to each event generated by application . For example, application  may be a Paint.Net software application used for editing digital image documents. A user may select a line tool within the Paint.NET application environment and draw on a portion of an image. Document workflow application extension  may receive a message from the Paint.NET application indicating that the user generated a graphical object in the image with the line tool. In response to receiving this message, the document workflow application extension  may check the image to determine which cells in the image have been modified as a result of the user generating a graphical object with the line tool. In one embodiment, document workflow application extension stores the state of each pixel in the image. When document workflow application extension  receives a message related to the generation of an event, the document workflow application extension  compares the pixels of the image with the stored state of each pixel in the image. If any pixels in a cell are different, then document workflow application  associates the data object corresponding to the event with that cell of the image.","A user may add a graphic object  to document . As shown in , the graphic object  is associated with cells , , , , , , , and . Application  generates an event in response to the user generating graphic object . In response to receiving a message related to the event, document workflow application extension  generates a data object in event data  corresponding to the event. The data object in event data  may include information about the event, such as an ID of the active layer or particular tool selected as well as a timestamp that indicates a time corresponding to the generation of the event. The types of events that may cause an entry to be generated in event data  may include tool changes, color changes, setting changes, save events, mouse clicks, and document navigations. One of skill in the art will readily appreciate that other types of events may also cause a data object to be generated in event data  and that other types of events are contemplated as being within the scope of the present invention.","As shown in , event data  may include data objects , ,  and  in an array  that correspond to one or more events recorded by document workflow application extension . For example, event data  could include data objects associated with four separate events , ,  and  in the document workflow history of document . A first event  corresponds with a user drawing a circle on a digital canvas of document . A second event  corresponds with the user filling the circle with a solid color. A third event  corresponds with the user drawing a line. A fourth event  corresponds with the user editing the length of the line generated in the third event .","Document workflow application extension  generates data objects in array  corresponding to each of the events , ,  and . Data object  corresponds to the first event , data object  corresponds to the second event , data object  corresponds to the third event , and data object  corresponds to the fourth event . Each data object , , , and  in event data  may include information related to the corresponding event such as an ID of the tool used to generate a graphical object, an ID of a tool setting that was changed, a timestamp corresponding to a time associated with the event, a pointer to a screenshot in image data  showing a state of document  at the time of the event, or other data related to the event. In one embodiment, document workflow application extension  may generate a timestamp, ID pair to include in the data object that uniquely identifies the event.","Document workflow application extension  may also add pointers to the data objects to slots in an n\u00d7m array  that associates the data objects , ,  and  with any cells (, , etc.) in document  that were changed as a result of the corresponding event. As shown, the first event  causes changes to cells , , , , , , , and . Consequently, document workflow application extension  may add a pointer for data object  into slots , , , , , , , and  of array . Similarly for event , document workflow application extension  may add a pointer for data object  into slots , , , , , , , , and  of array . For event , document workflow application extension  may add a pointer for data object  into slots  and . For event , document workflow application extension  may add a pointer for data object  into slot .","Other embodiments extending the functionality of different types of applications are contemplated as being within the scope of the present invention. The cells (, , etc.) described above are one possible solution for an image editing application where the contents of document  may be efficiently partitioned on a 2D grid of cells. However, other embodiments may describe \u201ccells\u201d as various parts of a document . For example in a 3D CAD program, a \u201ccell\u201d may be each of the geometric primitives stored in the 3D CAD model (i.e., the document ). The geometric primitives may include lines, surfaces, points, etc. After each event is detected by the document workflow application extension , each of the geometric primitives may be checked to determine whether the event resulted in a change of any attribute of the geometric primitive. If an attribute was changed, then document workflow application extension  may create a new entry in event data  corresponding to the associated \u201ccell\u201d (i.e., geometric primitive).","In one embodiment, document workflow application extension  may be configured to capture a screenshot of host application window  each time an event is generated by application . The screenshot may be stored in image data  and a pointer to the captured screenshot may be included in a corresponding data object in array . In other embodiments, document workflow application extension  may crop the captured screenshot to display only the cells of document  changed by the corresponding event and store the cropped screenshot in image data .","In another embodiment, document workflow application extension  may be configured to continuously capture video data  that reflects the document workflow history of the document . Document workflow application extension  may be configured to capture video at 10 fps using any technically feasible technique known in the art. In one embodiment, document workflow application extension  may process the captured video data, adding a graphical overlay to indicate the position of the mouse or to indicate one or more keys that were pressed on the keyboard, and store the processed video data in video data .",{"@attributes":{"id":"p-0065","num":"0064"},"figref":["FIG. 5","FIG. 5"],"b":["310","310","210","310","511","512","512","511","200"]},{"@attributes":{"id":"p-0066","num":"0065"},"figref":"FIGS. 6A-6B","b":["320","320","610","620","610","215","220","320","210","610","320","220","221","210"]},"The hierarchical clustering algorithm takes a list of times as input and outputs a subset of times for use as delimiters to determine the subset of data objects that is included in the cluster of events. In one embodiment, document workflow application extension  searches through data objects (, , etc.) in array  to determine whether there are any data objects related to save events. For each data object related to a save event, document workflow application extension  adds the timestamp included in the data object to the list of times to pass to the next step in the hierarchical clustering algorithm. Document workflow application extension  then determines if more than a threshold number of data objects are related to save events. For example, document  may have been saved 10 times and, consequently, there may be 10 corresponding data objects in event data . If there are more than a threshold number of data objects related to save events, then the document workflow application extension  sorts the timestamps in the list of times based on the elapsed time until the next event after the save occurred. For example, a timestamp corresponding to a save event for which the document  was also closed and then not revised for another two days would be chosen before a timestamp corresponding to a save event where the user immediately began working again. Once the timestamps corresponding to save events are sorted according to absolute time until the next recorded event, a threshold number of timestamps are selected. If there are less than or equal to a threshold number of timestamps associated with save events, then the hierarchical clustering algorithm results in every timestamp associated with a save event to be selected as a delimiter for generating the one or more clusters of events. In alternative embodiments, a different type of event other than a save event may be used to select the subset of times for use as delimiters. For example, the hierarchical clustering algorithm may select the subset of times based on data objects related to adding a layer to document , a particular tool of application , or when data is imported into the application  and other like heuristics.","In another embodiment, document workflow application extension  generates the list of times to pass to the next step of the hierarchical clustering algorithm by adding each timestamp included in a data object in event data  to the list of times. Document workflow application extension  then sorts the list of input times based on the absolute time between a time (t) in the input list and the next subsequent time (t) in the input list. For example, time twould be sorted higher than time tif and only if the difference between tand tis greater than the difference between tand t. The hierarchical clustering algorithm then selects up to a threshold number of timestamps from the top of the sorted list, which corresponds to the timestamps associated with an event corresponding to the largest elapsed time until the next event generated by application .","In yet another embodiment, document workflow application extension  first attempts to generate the list of times based on each data object related to a save event. If the list of times includes greater than a threshold number of timestamps, then document workflow application extension  passes the list of times associated with save events to the next step of the hierarchical clustering algorithm. However, if the list of times does not include greater than a threshold number of timestamps, then document workflow application extension  will re-generate the list of times by adding each timestamp included in a data object in event data , regardless of whether the data object is related to a save event, to the list of times. Document workflow application extension  then passes the list of times to the next step of the hierarchical clustering algorithm.","The one or more delimiter timestamps that result from processing the list of times via the hierarchical clustering algorithm may be used by document workflow application extension  to generate one or more graphical representations  for display in the document workflow window . Each of the one or more delimiter timestamps marks a demarcation between the events that are represented by one graphical representation  and the events represented by another graphical representation . Document workflow application extension  then generates a graphical representation  associated with all data objects in event data  that are associated with a timestamp between two delimiter timestamps. For example, if the hierarchical clustering algorithm returns two timestamps as delimiter timestamps, the first delimiter timestamp having a value of 10 minutes and the second delimiter timestamp having a value of 25 minutes, then document workflow application extension  may generate graphical representations  corresponding to three clusters of events: (1) a first cluster of events that includes all events from the beginning of the document workflow history until the time specified by the first delimiter timestamp; (2) a second cluster of events that includes all events from the time specified by the first delimiter timestamp until the time specified by the second delimiter timestamp; and (3) a third cluster of events that includes all events from the time specified by the second delimiter timestamp until the end of the document workflow history.","In one embodiment, each graphical representation  includes a first thumbnail image , a second thumbnail image , a time indicator , a timeline , one or more tool icons , and additional state information  related to document . As described above, each graphical representation  corresponds to a portion of the document workflow history (i.e., a subset of data objects stored in event data  for document ). Once document workflow application extension  has determined a cluster of events from which to generate a graphical representation , document workflow application extension  may search through each of the data objects corresponding to the cluster of events to determine the earliest event and the latest event based on the times reflected in the timestamps associated with the data objects.","The first thumbnail image  may be generated based on a captured screenshot in image data  corresponding to the earliest event in the cluster of events associated with the graphical representation . Similarly, the second thumbnail image  may be generated based on a captured screenshot in image data  corresponding to the latest event in the cluster of events associated with the graphical representation . In alternative embodiments, the thumbnail images ,  may be generated by capturing a particular frame of video data  at a point in time in the video associated with the event corresponding to the event associated with the thumbnail image. In yet other embodiments, clicking on a thumbnail image ,  may interactively change the display of the image in graphical representation . For example, clicking on a thumbnail image ,  may toggle between a zoomed in view and a zoomed out view of the document  associated with an event in the cluster of events. In another scenario, clicking on a thumbnail image ,  may toggle between a front view and a back view of a 3D model. In yet another scenario, clicking on a thumbnail image ,  may provide a user with full navigational controls to manually zoom, pan, or rotate a view of document .","The time indicator  may correspond to the difference between the time reflected by a timestamp in a data object that corresponds to the latest event and the time reflected by a timestamp in a data object that corresponds to the earliest event. Timeline  may indicate the relative portion of the document workflow history associated with graphical representation . The marker included in timeline  may be sized according to the percentage of the document workflow history associated with graphical representation  and positioned at a location in timeline  relative to when, in the lifetime of document , the events associated with graphical representation  were generated. Tool icons  may indicate, graphically, one or more tools in application  corresponding to the events associated with graphical representation . In one embodiment, graphical representation  may display the most frequently used tools corresponding to the events associated with graphical representation . In another embodiment, graphical representation  may display a threshold number of tools. Graphical representation  may also display addition state information  related to each of the earliest and latest events. For example, as shown in , the graphical representations  may include information about the number of active layers of document  during the earliest event and during the latest event in the cluster of events associated with graphical representation . It will be appreciated that such state information  may be any type of information related to the state of document  that may be stored in event data  or that such state information  may not be included in a graphical representations .","In one embodiment, document workflow window  may display up to a maximum threshold number of graphical representations  corresponding to different clusters of events in the document workflow history. Document workflow histories and, consequently, the number of data objects in event data  may grow quite large for complex documents. It will be appreciated that the number of events recorded when creating an image in an image editing application may correspond to hundreds or thousands of events. Thus, document workflow window  may include user interface elements for navigation such as expand element  and contract element . These navigation user interface elements  and  cause document workflow application extension  to generate new graphical representations  for display in document workflow window .","When a user clicks on the expand element  associated with a graphical representation , document workflow application extension  will re-run the hierarchical clustering algorithm on the subset of data objects associated with the graphical representation . Document workflow application extension  will then generate one or more new graphical representations  for display in document workflow window  based on one or more new delimiter timestamps selected from the subset of data objects. Each graphical representation  associated with two or more events may be expanded using an expand element . In this manner, a user may navigate down through a hierarchy of graphical representations  until a graphical representation  represents a single event in the document workflow history. Similarly, when a user clicks on the contract element , document workflow application extension  will re-run the hierarchical clustering algorithm on a larger subset of events than is currently associated with each of the graphical representations  displayed in document workflow window . Put another way, all of the data objects associated with each of the one or more graphical representations  currently displayed in document workflow window  will be combined into a single cluster of event for generation of one of the one or more new graphical representations to be displayed in document workflow window .","Document workflow window  also includes user interface elements . The user interface elements  may include a data probe element , a user interface probe element , a selection probe element , a refresh element , a close video element , and a calendar view element . A user may use the data probe element , the user interface probe element , or the selection probe element  to select a subset of data objects in event data  to process via the hierarchical clustering algorithm in order to generate new graphical representations  in document workflow window . The functionality of the data probe , the user interface probe  and the selection probe  is described below in connection with ,  and , respectively.","A user may select the refresh element  to cause the graphical representations  in the document workflow window  to be re-generated based on any current selections of filter criteria. In one embodiment, a user may make changes in selections or use filters, discussed below, that effect the subset of data objects associated with the graphical representations  in document workflow window . Selecting the refresh element  will cause document workflow application extension  to re-generate the graphical representations  based on any new criteria or filters selected by a user. The close video element  may be used to close the video playback window  so that the user may edit document  in host application window . The calendar view element  may cause document workflow application extension  to display the calendar view , described below in connection with .","As shown in , the document workflow window  may include a tab that enables a user to select one or more filter criteria to apply to the data objects in event data  for generating graphical representations . Document workflow histories may become quite large for some documents and, therefore, a user may use filters to manage the types of events that are displayed via the graphical representations . The types of filters may include time filters , layer filters , user filters  and tool and workflow filters  among other like types of filters.","Time filters  enable a user to filter the events that are associated with the graphical representations . In one embodiment, document workflow application extension  enables a user to specify a certain timeframe in the document workflow history from which the one or more graphical representations  are generated. For example, by selecting the \u201cFilter Time\u201d filter in time filters , the graphical representations  are generated based on data objects that have a timestamp between any two times specified by a user. In one embodiment, a user may specify times to use in a time filter using two zoom handles in the timeline window , described below. In another embodiment, a user may specify times by entering times into a dialog box or any other technically feasible manner. Time filters  may also include an \u201cUndo Events\u201d filter to remove any data objects associated with events that have been reversed by a subsequent undo action. The time filters  effect the subset of data objects processed by the hierarchical clustering algorithm and, consequently, the generation of graphical representations . However, in one embodiment, the time filters  do not affect the playback of video data  in video playback window  and any filtered events that are not associated with the graphical representations  in the document workflow window  may still be viewed by a user in the video playback window .","Layer filters  are filters that may be implemented with image editing applications or any other types of applications that include multiple layers. Layers enable a user to create graphic objects on a hierarchy of transparent canvases that merge to form a single digital image. Pixels included in a top layer are fully visible in the resulting digital image, pixels included in the second layer are visible if not occluded by the pixels in the top layer, pixels included in the third layer are visible if not occluded by the pixels in the top layer or pixels included in the second layer, etc. Layers may be used to create masks for performing operations on pixel data included on other layers in the image. Layers may be deleted, reordered, made partially transparent, or merged with one or more other layers. Layer filters  enable a user to select events associated with specific layers of the digital image in order to generate the one or more graphical representations .","A \u201cDeleted Layers\u201d filter in layer filters  enables a user to filter out events that are associated with any deleted layers. Consequently, the graphical representations  exclude any data objects in event data  that are associated with layers that have been deleted in document . An \u201cInvisible Layers\u201d filter in layer filters  may filter out data objects that are not visible because either the user has set a layer to be hidden or the user has set the transparency of a layer to fully transparent. An \u201cOccluded Layers\u201d filter in layer filters  may filter out data objects that are associated with any layers that are fully occluded by other layers. If a user selects this filter, document workflow application extension  may determine whether any pixels on an associated layer are visible in the resulting digital image. If no pixels are visible, then that layer is considered fully occluded and any data objects associated with that layer are not included in the subset of data objects processed by the hierarchical clustering algorithm to generate the graphical representations . In one embodiment, a user may be able to select a specific layer using one or more user interface elements within application . Document workflow application extension  may then be configured to filter data objects associated with the selected layer in order to generate graphical representations  that reflect the events associated with that layer.","User filters  are filters that enable a user to generate graphical representations  that reflect data objects generated by one or more users of application . As shown, document workflow window  may enable a user to select one or more users (if document  is associated with more than one user) with which to filter the subset of data objects in event data  that are processed by the hierarchical clustering algorithm to generate graphical representations .","Tool and workflow filters  are filters that are associated with a feature of application . Such features may includes tools, layers, or applied effects as well as other features included in application  that may be associated with a data object in event data . In one embodiment, document workflow window  enables a user to select a single feature (e.g., a line tool), an entire category (e.g., drawing tools), or a set of features across multiple categories (e.g., all drawing tools and applied effects, such as a Gaussian blur effect). In another embodiment, document workflow application extension  may include preset groups of features or allow users to create preset groups of features such as a \u201cCreations\u201d group that selects all features that may add content to document  or a \u201cFeatures not Used Before\u201d group that selects all features that the current user has not used before. In yet another embodiment, document workflow application extension may enable a user to select one or more features in the tool and workflow filters .","In one embodiment, all of the filters described above may be used in combination with any of the probing tools, described below. Once a user selects which filters to apply, the user may use a probing tool, such as data probe  or the user interface probe , to generate one or more graphical representations  in document workflow window .",{"@attributes":{"id":"p-0085","num":"0084"},"figref":["FIGS. 7A-7B","FIG. 7A"],"b":["710","710","215","610","320","710","109","710","710","220","610","221","215","710","109","310","710","215","411","430","710","220","461","680","460","221","215","710","220","610","215","710"]},"In another embodiment, data probe  may be used as a lens into the document's workflow history. Document workflow application extension  may access the plurality of data objects in event data  and determine a subset of data objects that are associated with regions of document  that overlap with the aperture of the data probe . A user may then navigate through the document workflow history by going forward or backward through the events corresponding to the subset of data objects. The aperture of the data probe  may display cropped versions of the captured screenshots in image data  associated with each data object in the subset of data objects. Thus, inside the aperture of data probe , the user may visualize a previous state of document  at a point in time corresponding to one of the events associated with the subset of data objects. Simultaneously, outside the aperture of data probe , the user may still visualize a current state of document , which may provide context to the final result generated by the workflow history. As shown in , document  includes a star drawn using a line tool. The data probe  may be used to visualize document  at a previous state corresponding to one of the data objects in the subset of data objects. Outside of the aperture of data probe , the current state of document  remains visible. Moving the aperture of the data probe  around the document frame  will reveal the state of document  corresponding to one of the data objects in a subset of data objects generated based on the location of the data probe .",{"@attributes":{"id":"p-0087","num":"0086"},"figref":["FIG. 8","FIG. 8"],"b":["810","810","710","810","610","221","310","810","710","810","710"]},"The user interface probe  may be used to select a subset of data objects that are associated with tool icons, floating palettes, setting icons, menu items, and dialog boxes in the host application window . In response to a selection with the user interface probe , document workflow application extension  may generate one or more graphical representations  in document workflow window  based on a subset of data objects in event data  that are associated with any of the user interface elements in host application window  that overlap with the current aperture of the user interface probe . In another embodiment, selecting a menu item of host application window  while holding a hotkey, such as F2, is equivalent to selecting the menu item with the user interface probe .","For example, as shown in , the aperture of the user interface probe  overlaps with both a text tool and a rectangle tool in toolbar  of the host application window . In response to such a selection with the user interface probe , document workflow application extension  traverses through each of the data objects in event data  and determines whether the data object is associated with an event related to either the text tool or the rectangle tool. If the data object is associated with a related event, then document workflow application extension  adds the timestamp included in that data object to a list of times to pass to the hierarchical clustering algorithm. If the data object is not associated with a related event, then document workflow application extension  moves to the next data object. Document workflow application extension  then generates one or more graphical representations  in document workflow window  based on a subset of events corresponding to times returned from the hierarchical clustering algorithm.",{"@attributes":{"id":"p-0090","num":"0089"},"figref":["FIG. 9","FIG. 9"],"b":["910","210","210","623","320","220","610","215","623","210","215","220","610","710","215"]},{"@attributes":{"id":"p-0091","num":"0090"},"figref":"FIG. 10","b":["330","330","223","340","330","220","340","310","223","215","340","215","223","215","215","1010","340","340","330","1023","223","1010"]},"As shown in , timeline window  may include timing information , an event track , a tools track , a users track , an annotation track , and one or more other tracks (such as a colors track or layers track in an image editing application) related to application . The timing track  includes video timing information that may be in an absolute time, such as a date and time of a system clock associated with a particular frame of video data , or an elapsed time, such as a relative time in tenths of seconds that document  was open in application . The timing track  may include one or more markers  that correspond to a timeframe in the video data  associated with a graphical representation  currently displayed in the document workflow window .","A user may zoom in or out of the timeline window  to display only a portion of the total timeline associated with the document workflow history. In one embodiment, the timeline track  includes zoom handles  that allow a user to zoom into a portion of the timeline. As shown, each of the tracks in the timeline window  (i.e., the events track , the tools track , etc.) will be repopulated to only show the associated marker objects that correspond to a data object in event data  with a timestamp that reflects a time in between the two zoom handles . In another embodiment, when a user clicks on a graphical representation  in the document workflow window , the timeline may be automatically zoomed into that portion of the timeline window  corresponding to the subset of data objects associated with the graphical representation .","The event track  includes one or more marker objects  that each correspond to a different data object in event data . Each marker object  is located at a position in the event track  that corresponds to the timestamp included in the associated data object in event data . In one embodiment, a marker object  may be an icon related to the particular event type associated with that marker object . In another embodiment, the icon may be of variable width to prevent overlap of multiple marker objects on the event track . In yet another embodiment, the icon may have a variable width that corresponds to the duration of time represented by the marker object . For example, if a dialog box was open for  seconds, then the associated marker object  would have a width representing  seconds of time on the timeline.","The event track  may be expanded to include one or more subtracks that display information about the particular event associated with a marker object  in the event track . For example, as shown in , the subtracks may include information about settings, dialog boxes, user actions, or tools selected in application  that are related to the marker object . Additional marker objects may be placed on the subtracks to indicate that the event associated with marker object  includes information related to one of the subtrack categories.","In one embodiment, placing a mouse cursor over a marker object  in the events track  or one of the additional marker objects  in the subtrack may cause document workflow application extension  to display a tooltip that provides a user with additional information about that particular event. For example, hovering the mouse cursor over a marker object  on the settings subtrack may display information about the particular setting that was changed and the value that the setting was changed to. Tooltips may be displayed for an action marker, a tool marker, a setting marker, a save point, a user marker, or a color marker among other types of marker objects . In one embodiment, hovering the mouse cursor over a marker object  on the dialog subtrack may display the actual dialog box in application  that is associated with the marker object  and any changes to the dialog box may be highlighted by using a phosphor or other special effect to draw the user's focus to the particular setting in the dialog box that was adjusted by the event. In another embodiment, a user may be able to cycle through a plurality of images of the dialog box, where each image represents a different state of the dialog box, from when the dialog box was first opened to when the dialog box was closed. A key on the keyboard  or a button or wheel on the mouse  may be used to cycle through the plurality of images.","In yet another embodiment, marker objects  may be associated with other related marker objects  on one or more tracks in timeline window . When a user hovers the mouse cursor over a tool marker, one or more associated marker objects  may be highlighted to show that there is an association between the two marker objects . For example, a marker object  on the tools subtrack may be associated with a separate marker object  on the settings subtrack. The marker object  on the settings subtrack may correspond to a change in a value of a setting associated with the tool that corresponds to the marker object  on the tools subtrack.","The tools track  (unlike the tools subtrack associated with the event tack ) may indicate which tool of application  was selected at any point in time in the document workflow history. The tools track  indicates an application state rather than an explicit event in the document workflow history (i.e., a marker object in the tool track  indicates that a tool in application  was active during a period of time, but not necessarily that the tool was used). The user track  indicates a user that was editing document  at a given point in the document workflow history. For documents with a single author, there may only be one marker on the user track . However, many documents may have multiple contributors, and the user track  may display information on the various authors that have opened document . In addition, the user track  may include save markers  that indicate a save event where the user saved document . In one embodiment, a user may right-click on a save marker  and restore a previous version of the document  associated with the save event corresponding to the save marker . The annotation track  may include one or more marker objects that correspond to any annotations which have been added to video data . Annotation markers may be configured to identify the user that added the annotation to video data  as well as the text or graphic that was added by the annotation event.","As also shown in , one or more other tracks may be included in timeline window . For example, the colors track may display the selected color or selected colors at a given point in the document revision history. The layers track may display the active layers of document . The activity track may display the relative amount of activity, such as by measuring the number or frequency of mouse clicks, at a given point in time in the document workflow history.","In one embodiment, a user may be able to select a portion of the document revision history in the timeline window , such as by dragging the timeline marker  or dragging the zoom handles , in order to select a subset of events within the document revision history. Then, the user may right-click on the timeline window  in the selected portion of the timeline to apply the selected portion of the document revision history to a new document . In alternative embodiments, a user may interact with other features of the timeline window  such as by right-clicking a marker object , , etc. and applying the operation corresponding to the marker object to the current document . In yet other embodiments, users may be able to drag-and-drop a marker object , , etc. from the timeline window  onto a document  to apply the corresponding operation to the document . For example, a user could drag-and-drop a marker object  associated with a gradient tool from the tools subtrack in the timeline window  to apply the associated gradient operation to a document . Such features may be applied to the document  associated with the currently open document revision history or may be applied to other documents or even applications (e.g., a gradient tool in Paint.net could be applied to a document opened in a Photoshop application). In another embodiment, a portion of a document revision history may be selected in the timeline window  and export to share with other users such as through an email attachment or instant message.",{"@attributes":{"id":"p-0101","num":"0100"},"figref":"FIG. 11","b":["1100","626","320","220","1100","1100","215","1100","1100","1111","1112","1100"]},"An icon associated with the state of document  on a given date may be displayed on a date of the calendar view . As shown, a first icon , that represents a first state of document  as saved on Mar. 3, 2010, is displayed in the calendar view . A second icon , that represents a second state of document  on Mar. 11, 2010, is also displayed in the calendar view . In one embodiment, hovering the mouse cursor over an icon in the calendar view  may cause a tooltip to display information related to the user or users that accessed document  on that date. In another embodiment, clicking on an icon in the calendar view  may cause the timeline window  to zoom in on a timeframe corresponding to that particular date. In yet another embodiment, clicking on an icon in the calendar view  may cause video playback window  to be displayed and video data  associated with that particular date to be played in the video playback window .",{"@attributes":{"id":"p-0103","num":"0102"},"figref":["FIGS. 12A-12B","FIG. 12A"],"b":["1210","223","220","223","340","223","215","220","215","1010","330","1023","223","340"]},"In addition to annotating frames of video data , a user may annotate a portion of the document revision history using the timeline window  by selecting a portion of the timeline window using the zoom handles  or dragging the timeline marker  with a mouse. For example, the user could select a portion of the timeline and indicate that the selected portion is an area of interest or, alternatively, an area of little interest. A user may also be able to mark a portion of the document revision history as private, thereby disabling other users from being able to view information related to that portion of the document revision history. Such hidden areas of the document revision history may be indicated on the timeline window  with annotated comments that indicate that portion of the document revision history has been made private by the author of the document .","As shown in , document workflow application extension  may add a graphical overlay to the frame of digital video in video data  that includes a string of text entered by a user. The annotation  may help a user understand how an effect was created in document . Document workflow application extension  may store the annotation text as metadata along with frame of video data  and generate the graphical overlay at runtime. In addition, document workflow application extension  may also generate a graphical overlay to indicate keystrokes  or any actions or position data  associated with the mouse device . In other embodiments, document workflow application extension  may modify the pixel data in one or more frames of video data  such that the annotation is permanently included in the digital video.",{"@attributes":{"id":"p-0106","num":"0105"},"figref":["FIG. 13","FIGS. 1-12"],"b":["1300","215"]},"The method  begins at step , where document workflow application extension  receives an event generated by application . The event may be generated by application  in response to a user command and may result in a modification to document . At step , document workflow application extension  generates a data object in event data  that stores information related to the event. In one embodiment, the data object may include a timestamp and an ID that identifies a feature of application . At step , document workflow application extension  captures a screenshot (i.e., a digital image) of document  that reflects a state of document  at a time corresponding to the generation of the event. At step , document workflow application extension  associates the data object generated in step  with a portion of document  modified by the event as well as the screenshot captured at step . In one embodiment, document  is a digital image that is divided into one or more cells that include a block of pixels. Document workflow application extension  associates the data object with each cell of pixels in document  that was modified as a result of the event. In one embodiment, document workflow application extension  also stores a pointer to the captured screenshot in the data object. At step , document workflow application extension  captures a plurality of frames of digital video that reflects a state of document  at a time corresponding to the generation of the event. In one embodiment, document workflow application extension  captures digital video of host application window  at 10 frames per second and stores the digital video in video data . At step , document workflow application extension  associates the data object with at least one frame of the digital video. In one embodiment, document workflow application extension  stores a pointer to a first frame of digital video in the data object. At step , document workflow application extension  stores the data object, the digital image, and the digital video in system memory  or in non-volatile storage such as system disk . The data object, the digital image, and the digital video may be associated with document  such that document workflow application extension  may retrieve the data object, the digital image, and the digital video when a user opens document  in application .",{"@attributes":{"id":"p-0108","num":"0107"},"figref":["FIG. 14","FIGS. 1-12"],"b":"1400"},"The method  begins at step , where document workflow application extension  accesses a plurality of data objects in event data . In one embodiment, each data object in event data  stores information related to an event generated by application . At step , document workflow application extension  identifies a first time and a second time via a hierarchical clustering algorithm. In one embodiment, document workflow application extension  analyzes the plurality of data objects via a hierarchical clustering algorithm. The first time and the second time may be identified based on at least one data object related to a save event. In another embodiment, the first time and the second time may be identified based on the largest elapsed time between subsequent events. At step , document workflow application extension  selects a set of data objects from the plurality of data objects in event data  based on the first time and the second time. In one embodiment, each data object in the set of data objects includes a timestamp that reflects a time that is either equal to the first time, equal to the second time, or falls between the first time and the second time.","At step , document workflow application extension  generates a graphical representation that represents the set of data objects. In one embodiment the graphical representation includes a first thumbnail image that reflects a state of document  prior to any of the events corresponding to a data object in the set of data objects and a second thumbnail image that reflects a state of document  after all of the events corresponding to a data object in the set of data objects. The graphical representation may also include a duration indicator that reflects a difference between the times reflected in the timestamps stored in the first data object and the last data object in the set of data objects. At step , document workflow application extension  causes the graphical representation to be displayed in a graphical user interface associated with the document workflow application extension . In one embodiment, the graphical representation is displayed in the document workflow window  proximate to the host application window .","At step , document workflow application extension  determines whether a user selects a navigation element associated with the graphical representation  in document workflow window . If a user has not selected the navigation element, then document workflow application extension  waits until the navigation element is selected. If a user selects the navigation element, then method  proceeds to step , where document workflow application extension  generates a new graphical representation  that represents subset of data objects based on the set of data objects associated with the graphical representation . For example, document workflow application extension  may generate a new graphical representation  in response to a user expanding one of the graphical representations in document workflow window . Document workflow application extension  may generate a new subset of data objects based on a portion of the set of data objects represented by the graphical representation . In this manner, a user may visualize a smaller subset of events within the document workflow history. At step , document workflow application extension  causes the new graphical representation  to be displayed in the document workflow window .",{"@attributes":{"id":"p-0112","num":"0111"},"figref":["FIG. 15","FIGS. 1-12"],"b":"1500"},"The method  begins at step , where document workflow application extension  captures a plurality of frames of video data . In one embodiment, document workflow application extension  captures a plurality of frames of digital video at 10 fps, where each frame corresponds to a screenshot of host application window . At step , document workflow application extension  accesses a plurality of data objects in event data . In one embodiment, each data object in event data  stores information related to an event generated by application . At step , document workflow application extension  associates each data object in the plurality of data objects with at least one frame of digital video in video data . At step , document workflow application extension  receives a selection of an event corresponding to a first event type. In one embodiment, event types may include settings events, tool events, user events, save events, or any other type of event that is related to application .","At step , document workflow application extension  causes a first portion of video data  to be displayed in video playback window . At least one frame of the first portion of video data  is associated with a data object corresponding to an event of the first event type. At step , document workflow application extension  skips a second portion of video data . In one embodiment, document workflow application extension  is configured to fast forward to a third portion of video data . At step , document workflow application extension  causes the third portion of video data  to be displayed in video playback window . At least one frame of the third portion of video data  is associated with a data object corresponding to an event of the first event type.",{"@attributes":{"id":"p-0115","num":"0114"},"figref":["FIG. 16","FIGS. 1-12"],"b":"1600"},"The method  begins at step , where document workflow application extension  accesses a plurality of data objects in event data . In one embodiment, each data object in event data  stores information related to an event generated by application . At step , document workflow application extension  generates a timeline object that includes one or more tracks of information related to the workflow history of document . In one embodiment, the timeline object includes timing information , an event track , a tools track , a users track , an annotation track , and one or more other tracks related to data associated with application . Each information track of timeline window  may include one or more marker objects associated with a data object in event data . At step , document workflow application extension  causes the timeline window  to be displayed in a timeline window  proximate to a host application window .","At step , document workflow application extension  receives a selection of a first marker object in the timeline object. The first marker object is associated with at least one data object in event data . At step , document workflow application extension  configures application  based on the information in the data object associated with the first marker object. In one embodiment, a user may right-click on a marker object in timeline window  to configure a feature of application  or to perform a scripted action based on the information in the data object associated with the marker object. For example, a marker object may be associated with a data object corresponding to an event generated when a user selected a line tool in application . By right-clicking on the marker object, the line tool will be selected in application  such that the user may generate a line in document .",{"@attributes":{"id":"p-0118","num":"0117"},"figref":["FIG. 17","FIGS. 1-12"],"b":"1700"},"The method  begins at step , where document workflow application extension  accesses a plurality of data objects in event data . In one embodiment, each data object in event data  stores information related to an event generated by application . At step , document workflow application extension  filters the plurality of data objects in event data  to create a subset of filtered data objects. Document workflow application extension  filters the data objects in event data  based on one or more filter criteria. In one embodiment, the filter criteria may be selected by a user via one or more user interface elements included in document workflow window . In another embodiment, the filter criteria may be selected using native tools included in application . In yet another embodiment, document workflow application extension  selects the filter criteria based on an algorithm such as by filtering out every data object related to a feature of application  that the current user has never selected.","At step , document workflow application extension  identifies a first time and a second time via a hierarchical clustering algorithm. In one embodiment, document workflow application extension  analyzes the set of filtered data objects via a hierarchical clustering algorithm. The first time and the second time may be identified based on at least one data object related to a save event. In another embodiment, the first time and the second time may be identified based on the largest elapsed time between subsequent events. At step , document workflow application extension  selects a subset of filtered data objects from the set of filtered data objects in event data  based on the first time and the second time. In one embodiment, each data object in the subset of filtered data objects includes a timestamp that reflects a time that is either equal to the first time, equal to the second time, or falls between the first time and the second time.","At step , document workflow application extension  generates a graphical representation that represents the subset of filtered data objects. In one embodiment the graphical representation includes a first thumbnail image that reflects a state of document  prior to any of the events corresponding to a data object in the subset of filtered data objects and a second thumbnail image that reflects a state of document  after all of the events corresponding to a data object in the subset of filtered data objects. At step , document workflow application extension  causes the graphical representation to be displayed in a graphical user interface associated with the document workflow application extension .","In sum, the present application describes a system and technique for displaying a revision history of a document. The disclosed system includes a graphical user interface for displaying graphical representations of events generated by an application. Each of the events generated by the application is stored in a data structure that is associated with one or more portions of the document. The data structure may also be associated with a digital image that reflects the state of the document at the time the event was generated and one or more frames of digital video captured substantially simultaneously with the generation of the event. The system then displays the revision history via graphical representations in the graphical user interface. Each graphical representation represents a portion of the revision history of the document. A user may navigate through various graphical representations of events that are generated using a hierarchical clustering algorithm. A user may also view digital video of those events that are played back in a window overlaid over the host application window.","One advantage of the disclosed approach is that the system provides a flexible and intuitive approach for displaying and navigating the revision history of a document. Even a large revision history that includes hundreds of user operations may be reduced to a simple graphical representation that may be navigated by a user to visualize the revision history at finer and finer detail. A user may use tools within the system to filter or search the revision history for particular types of user operations. The hierarchical, high-level clustering algorithm also presents each of the user operations within the context of the complete revision history, allowing a user to visualize and learn various techniques for creating or modifying the content of a document.","While the foregoing is directed to embodiments of the present invention, other and further embodiments of the present invention may be devised without departing from the basic scope thereof. For example, aspects of the present invention may be implemented in hardware or software or in a combination of hardware and software. One embodiment of the present invention may be implemented as a program product for use with a computer system. The program(s) of the program product define functions of the embodiments (including the methods described herein) and can be contained on a variety of computer-readable storage media. Illustrative computer-readable storage media include, but are not limited to: (i) non-writable storage media (e.g., read-only memory devices within a computer such as CD-ROM disks readable by a CD-ROM drive, flash memory, ROM chips or any type of solid-state non-volatile semiconductor memory) on which information is permanently stored; and (ii) writable storage media (e.g., floppy disks within a diskette drive or hard-disk drive or any type of solid-state random-access semiconductor memory) on which alterable information is stored. Such computer-readable storage media, when carrying computer-readable instructions that direct the functions of the present invention, are embodiments of the present invention.","In view of the foregoing, the scope of the present invention is determined by the claims that follow."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["So that the manner in which the above recited features of the invention can be understood in detail, a more particular description of the invention, briefly summarized above, may be had by reference to embodiments, some of which are illustrated in the appended drawings. It is to be noted, however, that the appended drawings illustrate only typical embodiments of this invention and are therefore not to be considered limiting of its scope, for the invention may admit to other equally effective embodiments.",{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":["FIGS. 3A-3C","FIG. 2"]},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIGS. 4A-4C"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIGS. 6A-6B"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIGS. 7A-7B"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIGS. 12A-12B"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 17"}]},"DETDESC":[{},{}]}
