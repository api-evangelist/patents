---
title: Method and apparatus for associating metadata attributes with program elements
abstract: One embodiment of the present invention provides a system for associating metadata attributes with program elements. During operation, the system receives source code containing syntactic elements that specify metadata attributes for program elements, wherein the metadata attributes do not affect program execution. The system then parses the source code to obtain the metadata attributes. Next, the system associates the metadata attributes with corresponding program elements and determines values associated with the metadata attributes. Finally, the system incorporates the metadata attributes, including identifiers for the associated values and the associated program elements, into object code for the program, thereby allowing the metadata attributes to be accessed from the object code. Another embodiment of the present invention provides a system for accessing metadata attributes for program elements from object code through an application programming interface (API).
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07013458&OS=07013458&RS=07013458
owner: Sun Microsystems, Inc.
number: 07013458
owner_city: Santa Clara
owner_country: US
publication_date: 20020909
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["1. Field of the Invention","The present invention relates to the design of programming languages for computer systems and associated development tools. More specifically, the present invention relates to a method and an apparatus for associating metadata attributes that do not affect program execution with program elements.","2. Related Art","It is often desirable for programmers to annotate program elements, such as fields, methods, and classes, as having particular attributes that indicate that they should be processed in special ways by development tools, deployment tools, or run-time libraries. We call such annotations \u201cmetadata.\u201d Ideally, this metadata should be easily accessible at development time, deployment time, and run time.","Metadata has many uses. Custom tools may use metadata to generate auxiliary source files to be used in conjunction with the source file containing the annotation. For example, a stub generator can generate remote procedure call stubs based on annotations indicating that certain methods are designed for remote use.","A number of existing mechanisms presently allow programmers to associate metadata with programs. For example, the C++ programming language has a preprocessor directive called \u201c#pragma\u201d that affects the actions of the compiler as it compiles the program. Some uses of this directive associate metadata with the program. For example, this directive's COPYRIGHT function associates a copyright string with a program. The copyright string is then embedded in the object code where it can be read with the Unix strings utility. However, the C++ #pragma directive does not allow the programmer to associate arbitrary metadata, does not allow metadata to be associated with particular program elements, and does not allow metadata to be read at run time.","JAVA's doclet API has been used to associate metadata with program elements by various tools such as ejbdoclet, webdoclet, ejbgen, and icontract. Although this usage does allow the programmer to associate arbitrary metadata with particular program elements, it does not allow metadata to be read at run time, nor does it provide a mechanism to manage the namespace of metadata attributes.","Hence, what is needed is a facility that allows programmers to associate arbitrary metadata with arbitrary program elements in a manner that allows the metadata to be accessed by development tools, deployment tools, and programmatically at runtime without the limitations of the mechanisms described above.","One embodiment of the present invention provides a system for associating metadata attributes with program elements. During operation, the system receives source code containing syntactic elements that specify metadata attributes for program elements, wherein the metadata attributes do not affect program execution. The system then parses the source code to obtain the metadata attributes. Next, the system associates the metadata attributes with corresponding program elements and determines values associated with the metadata attributes. Finally, the system incorporates the metadata attributes, including identifiers for the associated values and the associated program elements, into object code for the program, thereby allowing the metadata attributes to be accessed from the object code.","In a variation on this embodiment, a metadata attribute for a program element is expressed in the source code as a modifier for a declaration for the program element.","In a variation on this embodiment, a given metadata attribute can contain nested metadata attributes.","In a variation on this embodiment, a given metadata attribute is defined by a corresponding class for the given metadata attribute.","In a variation on this embodiment, the corresponding class for the given metadata attribute is located in a package named according to a unique package naming convention. This allows parties to define their own metadata attributes that are guaranteed not to interfere with attributes defined by other parties.","In a variation on this embodiment, the system additionally validates a given metadata attribute using validation criteria from an object file for a class associated with the given metadata attribute.","In a variation on this embodiment, determining values associated with the metadata attributes involves evaluating constant expressions.","In a variation on this embodiment, the object code for the program includes one or more class files for the program.","In a variation on this embodiment, a program element can include, a method, a class, and or a field.","One embodiment of the present invention provides a system for accessing metadata attributes associated with program elements. During operation, the system receives object code for a program, wherein the object code contains metadata attributes for program elements; these the metadata attributes do not affect program execution. Next, the system stores the object code in a memory buffer without loading the object code for program execution. The system then accesses the metadata attributes for the program elements from the object code through an application programming interface (API).","In a variation on this embodiment, the API includes: a method that returns a specified attribute of a specified element; a method that returns all attributes of a specified element; a method that returns all elements having a specified attribute; and a method that returns all elements having a specified attribute-value pair.","The following description is presented to enable any person skilled in the art to make and use the invention, and is provided in the context of a particular application and its requirements. Various modifications to the disclosed embodiments will be readily apparent to those skilled in the art, and the general principles defined herein may be applied to other embodiments and applications without departing from the spirit and scope of the present invention. Thus, the present invention is not limited to the embodiments shown, but is to be accorded the widest scope consistent with the principles and features disclosed herein.","The data structures and code described in this detailed description are typically stored on a computer-readable storage medium, which may be any device or medium that can store code and\/or data for use by a computer system. This includes, but is not limited to, magnetic and optical storage devices such as disk drives, magnetic tape, CDs (compact discs) and DVDs (digital versatile discs or digital video discs), and computer instruction signals embodied in a transmission medium (with or without a carrier wave upon which the signals are modulated). For example, the transmission medium may include a communications network, such as the Internet.","Computer System",{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIG. 1","FIG. 1"],"b":["100","100","102","112","110","106","106","100"]},"Processor  can include any type of processor, including, but not limited to, a microprocessor, a mainframe computer, a digital signal processor, a personal organizer, a device controller and a computational engine within an appliance. Processor  includes a cache  that stores code and data for execution by processor .","Processor  communicates with storage device  through bridge  and peripheral bus . Storage device  can include any type of non-volatile storage device that can be coupled to a computer system. This includes, but is not limited to, magnetic, optical, and magneto-optical storage devices, as well as storage devices based on flash memory and\/or battery-backed up memory.","Processor  communicates with memory  through bridge . Memory  can include any type of memory that can store code and data for execution by processor .","As illustrated in , memory  contains compiler . Compiler  converts source code  into object code . In doing so, compiler  incorporates metadata attributes that are specified by syntactic elements within source code  into object code . This process is described in more detail below with reference to .","Incorporating metadata into object code enables development tool  to access the metadata attributes from object code  through an API. This process is described in more detail below with reference to .","Note that although the present invention is described in the context of computer system  illustrated in , the present invention can generally operate on any type of computing device. Hence, the present invention is not limited to the specific implementation of computer system  illustrated in .","Compiler",{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 2","b":["116","116","114","118","114","118"]},"Compiler  includes a number of components, including front end  and back end . Front end  takes in source code  and parses source code  to produce intermediate representation .","Intermediate representation  feeds into back end , which produces object code . Within backend , intermediate representation  feeds through optimizer , and the resulting optimized intermediate representation  feeds though code generator  which produces object code .","During this process, compiler  incorporates metadata attributes into object code  as is described below with reference to .","Process of Incorporating Metadata into Object Code",{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 3","b":"302"},"The program elements can include methods, classes or fields that can be associated with attributes. For example, a method can be associated with attributes, such as: (1) a remote attribute that specifies whether the method is a remote method or a local method; (2) a precondition attribute and a postcondition attribute that collectively facilitate \u201cdesign by contract;\u201d (3) a deprecated attribute which indicates that a given method is supported, but should no longer be used; or (4) a query attribute that facilitates forming a database query for an accessor method.","A class can be associated with attributes, such as: (1) an author attribute that identifies the author of the class; (2) a deprecated attribute, which indicates that the class is supported, but should no longer be used; and (3) a framework membership attribute that signifies that the class participates in a framework.","A field can have attributes, such as a persistence attribute, which indicates whether or not the field is persistent. Note that this persistence attribute can be a boolean attribute, or alternatively a multi-valued attribute that specifies a type of persistence.","Next, the system parses the source code to obtain metadata attributes (step ). In one embodiment of the present invention, a metadata attribute is expressed in the source code as a modifier associated with a declaration for a program element. In this embodiment, each attribute is declared as a class. For example, an interface for a class associated with \u201cdeprecated\u201d attribute can have the form,",{"@attributes":{"id":"p-0043","num":"0042"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"interface @deprecated extends"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Java.lang.BooleanAttribute{"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},{"@attributes":{"id":"p-0044","num":"0043"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"@deprecated"},{"entry":"@author(\u201cMickey Mouse\u201d) public static final class Foo extends Bar {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public static final void main {"]},{"entry":[{},"}"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"Attributes can also be nested. For example, a \u201cremote\u201d attribute for a class can the specified as follows,",{"@attributes":{"id":"p-0046","num":"0045"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"@remote("]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"@comstyle(\u201cCorba\u201d),"]},{"entry":[{},"@timeout(10),"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},") <<method declaration>>."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},"An interface for a class that defines the nested \u201cremote\u201d attribute can have the form,",{"@attributes":{"id":"p-0048","num":"0047"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"public interface @remote extends CompoundAttribute {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"public interface @comstyle"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"extends java.lang.StringAttribute{ }"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"public interface @timeout"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"extends java.lang.IntAttribute{ }"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},". . . "]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Note that by placing the classes that define the attributes in packages named according to a unique package naming convention like the one described in Section 7.7 of the Java(tm) Language specification, Second Edition (Gosling, Joy, Steele, Bracha; Addison-Wesley 2000), the present invention can leverage off the existing namespace management features enabled by the convention. Hence, unrelated parties can define their own classes for their own attributes, and these classes can be located within their own portions of the package namespace. This allows unrelated parties to define different attributes using the same name without interfering with each other.","Next, the system determines values associated with the metadata attributes, which may involve evaluating constant expressions (step ). After or during the parsing process, the system can validate the metadata attributes (step ). In one embodiment of the present invention, this involves using validation criteria retrieved from an object file for a class that defines a given metadata attribute to validate the given metadata attribute.","The system then associates metadata attributes with corresponding program elements (step ). The system then incorporates the metadata attributes, including identifiers for associated values and associated program elements, into object code (class files) for the program (step ). In one embodiment of the present invention, the metadata attributes are stored as \u201cclass file attributes\u201d in a JAVA class.","Process of Accessing Metadata Attributes from Object Code",{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 4"},"If the process takes place during run time, one embodiment of the present invention adds an accessor method to class for each primitive type attribute. For example, we can add the following accessor methods to class,\n\n","These accessor methods can be used to retrieve a string and an integer, respectively. For example, \u201cFoo.class.getStringAttribute@author.class)\u201d returns a string for the attribute \u201cauthor\u201d during run time. However, note that in order to do this the class literal \u201cFoo.class\u201d must be evaluated, which requires loading the class.","If the process takes place during design time, one embodiment of the present invention provides an application programming interface (API) to obtain metadata associated without program elements without having the load the class.","The process operates as follows. Upon receiving object code for a program (step ), the process loads the object code into a memory buffer\u2014without performing the time-consuming verification operations involved in loading the class into a virtual machine (step ). Next, the process accesses metadata attributes for program elements through an API (step ).","Note that API can be defined as a class. For example, the class can include methods to: (1) return a specified attribute of a specified element; (2) return all attributes of a specified element; (3) return all elements having a specified attribute; (4) return all elements having a specified attribute-value pair; (5) return a specified sub-attribute of a complex attribute; and (6) to return all sub-attributes of a complex attribute.","The foregoing descriptions of embodiments of the present invention have been presented only for purposes of illustration and description. They are not intended to be exhaustive or to limit the present invention to the forms disclosed. Accordingly, many modifications and variations will be apparent to practitioners skilled in the art. Additionally, the above disclosure is not intended to limit the present invention. The scope of the present invention is defined by the appended"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE FIGURES","p":[{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
