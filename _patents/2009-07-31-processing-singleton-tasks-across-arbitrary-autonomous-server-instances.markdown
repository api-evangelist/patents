---
title: Processing singleton task(s) across arbitrary autonomous server instances
abstract: Large scale internet services may be implemented using multiple discrete server instances. Some tasks of the large scale internet services may be singleton tasks, which may be advantageously processed by a sub-set of the server instances (e.g., merely one instance). Accordingly, as provided herein, a singleton task may be processed in a reliable manner based upon one or more instances of a protocol executed across a set of arbitrary autonomous server instances. In one example, the protocol may determine whether a lease for a singleton task is valid or expired. If the lease is expired, then an attempt to claim the lease may be performed by updating a current lease expiration with a new lease expiration. If the attempt is successful, then the singleton task may be processed until the new lease expiration expires.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09009718&OS=09009718&RS=09009718
owner: Microsoft Technology Licensing, LLC
number: 09009718
owner_city: Redmond
owner_country: US
publication_date: 20090731
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["Large scale network services may be implemented using multiple discrete server instances in an effort to increase robustness, capacity, and performance. These network services may be enhanced by scaling out the number of discrete server instances as opposed to scaling up. That is, it may be advantageous to have a large number of commodity server machines with minimal interaction between one another in comparison to a smaller number of powerful server machines. Scaling out along with reducing accumulated state information (e.g., an affinity between a task and a particular server instance because of cached data) may mitigate the overhead in adding new server instances or replacing failed server instances. Efficiency and proper task performance (e.g., a singleton task performed by a particular number of server instances) may be become an issue when introducing new server instances into an always on network service environment.","This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key factors or essential features of the claimed subject matter, nor is it intended to be used to limit the scope of the claimed subject matter.","A technique for processing a singleton task is disclosed herein. A singleton task, for example, may be a task (e.g., retrieve email, retrieve SMS messages, a task performed by one or more server instances within a computing environment, etc.) in which it may be beneficial that a particular number of server instances perform the task. For example, it may be advantageous for merely a single server instance to perform an email retrieval singleton task, while other processing tasks related to the retrieved email may be performed by multiple server instances. A lease may be associated with a singleton task (e.g., a row within a database comprising a lease expiration associated with a lease of the singleton task) to facilitate the processing of the singleton task in accordance with a contract (e.g., a designation of a particular number of server instances that may process a singleton task).","A lease for a singleton task may be determined, for example, by a server instance executing a protocol, as valid or expired. For example, a current lease expiration of the lease may be compared with a current time to determine whether the lease is expired (e.g., the lease is expired if the current time exceeds the current lease expiration, the lease is valid if the current time does not exceed the current lease expiration or rather the current lease expiration exceeds the current time). If the lease is valid, then the server instance may wait until the current time exceeds the current lease expiration (e.g., an anticipated expiration of the current lease) and then again determine whether the lease for the singleton task is valid or expired. Otherwise, if the lease is expired, then an attempt may be made to claim the lease with a new lease expiration. For example, an attempt may be made to update a database row comprising the current lease expiration of the lease with the new lease expiration.","If the attempt to claim the lease is unsuccessful (e.g., another server instance successfully updated the database row with a claim to the lease), then the server instance may again determine whether the lease for the singleton task is valid or expired. Otherwise, if the attempt to claim the lease is successful, then the singleton task may be processed until the new lease expiration expires. Attempts by other server instances may be unsuccessful, which provides that the singleton task is performed according to a contract specifying, for example, that one server instance may perform the singleton task (e.g., the one server instances successfully claiming the lease), while the unsuccessful server instances may try again later (e.g., when the new lease expiration expires). It may be appreciated that the technique for processing a singleton task described herein may be, for example, incorporated into a protocol executed by a large number of server instances (e.g., hundreds of server instances participating in a network service environment) to facilitate the processing of one or more singleton tasks based upon respective contracts of the one or more singleton tasks.","To the accomplishment of the foregoing and related ends, the following description and annexed drawings set forth certain illustrative aspects and implementations. These are indicative of but a few of the various ways in which one or more aspects may be employed. Other aspects, advantages, and novel features of the disclosure will become apparent from the following detailed description when considered in conjunction with the annexed drawings.","The claimed subject matter is now described with reference to the drawings, wherein like reference numerals are used to refer to like elements throughout. In the following description, for purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of the claimed subject matter. It may be evident, however, that the claimed subject matter may be practiced without these specific details. In other instances, structures and devices are illustrated in block diagram form in order to facilitate describing the claimed subject matter.","Within a computer environment, the processing of tasks may be distributed among multiple server instances to increase robustness, capacity, and performance. Nevertheless, it is common for some tasks to be singleton tasks. That is, it may be advantageous to have a subset of server instances (e.g., a single server instance) perform the singleton task instead of many server instances. In one example, a contract may specify a particular number of server instances that may process a singleton task. Providing that singleton tasks are performed correctly becomes complicated when new server instances are introduced into the computer environment (e.g., when a failed server instance is replaced) and\/or when server instances are removed from the computer environment (e.g., server failure, lower capacity requirements, etc.). Because the computer environment may be in an always on state, there is no global bootstrap concept that may be used to provide compliance with contracts regarding singleton tasks. Moreover, server instances may have minimal knowledge of other server instances in an effort to minimize state management. Because of the lack of bootstrap and the minimal awareness between server instances, human intervention may be currently needed to assign singleton tasks when new servers are introduced into a computing environment. Requiring human intervention can introduce large time delays (e.g., if a failure occurs in the middle of the night and is not discovered until the morning) and introduce an opportunity for human error.","Among other things, a technique for processing a singleton task is provided herein. In one example, the technique may be implemented as a protocol used by multiple server instances to process a singleton task according to a contract specifying a desired number of server instances that may perform the singleton task. The protocol may be implemented across multiple server instances coordinated through a database comprising rows having lease information (e.g., a current lease expiration) corresponding to singleton tasks. The protocol may be based upon an optimistic concurrency implemented though a leasing model facilitated through the database. In this way, leases may be awarded and lease duration and fault recovery durations may be specified.","One embodiment of processing a singleton task is illustrated by an exemplary method  in . At , the method begins. At , a lease for a singleton task may be determined as valid or expired. For example, a lease may be determined as valid if a current lease expiration of the lease exceeds the current time (e.g., the current time has not yet reached the expiration time of the lease). Otherwise, the lease may be determined as expired if the current time exceeds the current lease expiration (e.g., the current time has reached the expiration time of the lease). At , if the lease is expired, then an attempt may be made to claim the lease with a new lease expiration. For example, a database operation to update the current lease expiration of the lease with the new lease expiration may be performed. If successful, the lease will be claimed by the server instance performing the update. It may be appreciated that a singleton task may be performed by a subset of server instances that claim a lease for a singleton task. That is, even though the examples described herein refer to a single server instance claiming a lease of a singleton task, it may be appreciated that multiple server instances may claim a lease of a singleton task (e.g., a small subset of server instances). It may be appreciated that multiple server instances may attempt to claim the lease of the singleton task, but because the singleton task may be designated by a contract to be performed by merely one server instance, that all but one server instance may fail at claiming the lease, for example.","At , upon successfully claiming the lease, the singleton task may be processed until the new lease expiration expires. At this point, the server instance has claimed the lease for the singleton task and can take action based upon that claim until the new lease expiration expires. Other server instances may be barred from processing the singleton task based upon the claim to the lease. This provides that the singleton task is processed by the designated number of server instances, for example, as specified by a contract. At , the method ends.",{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 2","FIG. 4"],"b":["200","216","216","204","206","208","210","216","212","216","212","212","402","2","2","214"]},"The system  may be associated with a server ()  within a computer environment. For example, the system  may be configured to perform functionality of a steady state protocol that server ()  may execute in regard to performing singleton tasks as defined by a contract. It may be appreciated that the computer environment may comprise multiple servers, respective servers configured to process singleton tasks through instances of the system .","The validity determination component  may be configured to determine whether a lease for a singleton task is valid or expired. For example, the lease may be valid if a current lease expiration exceeds a current time, otherwise the lease may be expired if the current time exceeds the current lease expiration. Upon determining the lease is valid, the validity determination component  may be configured to wait until a current time exceeds the current lease expiration, and once the current lease expiration is exceeded, then again determine whether the lease for the singleton task is valid or expired. The validity determination component  may be configured to wait for a valid lease to expire because another server may be processing the singleton task, whereas if yet another server begins processing the singleton task, then a contract may be violated because too many servers are processing the singleton task.","In one example, the server ()  may request  the validity determination component  to check a lease for the singleton task (). The validity determination component  may make a determination  as to whether the singleton task () & lease ()  within the lease storage component  is valid. If the singleton task () & lease ()  is valid, then the validity determination component  may wait until the current time exceeds the current lease expiration, and once the current lease expiration is exceeded, then again determine whether the lease for the singleton task is valid or expired. Otherwise, if the lease singleton task () & lease ()  is expired, the lease claim component  may attempt to claim the singleton task () & lease () .","The lease claim component  may be configured to attempt to claim the lease with a new lease expiration based upon the lease being expired. That is, the lease claim component  may attempt to update a current lease expiration within a database row corresponding to a singleton task with the new lease expiration. The update may be successful or fail due to other servers attempting to claim the lease of the singleton task. In one example, the lease claim component , upon a determination that the singleton task () & lease ()  is expired, may attempt to claim  the singleton task () & lease ()  within the lease storage component . For example, a new lease expiration based upon a current time and a pre-defined lease duration may be used to update a current lease expiration of the singleton task () & lease () . The pre-defined lease duration may be defined based upon efficiency and\/or time to detect a failure. For example, a longer pre-defined lease duration allows a server to process a singleton task longer to increase processing efficiency. That is, strain\/load on the validity determination component  may be reduced by extending a pre-defined lease duration, for example, for long running operations. A shorter pre-defined lease duration may reduce the time to detect that a server has failed.","It may be appreciated that the lease claim component  may be configured to attempt to claim the lease based upon an optimistic concurrent database design. That is, the lease claim component  may assume the claim (e.g., an update to a database row) will succeed without conflict, and may be configured to properly handle situations in which a conflict results. In one example, an initial database read may be performed to determine database information (e.g., a tag regarding database conflicts). It may be appreciated that a variety of database conflict detection mechanisms may be utilized to determine database information. The database information may be utilized by the lease claim component  when attempting to claim a lease (e.g., utilizing the data information when optimistically updating a database).","The execution component  may be configured to initiate processing of the singleton task until the new lease expiration expires, based upon a successful attempt to claim the lease. For example, if the singleton task () & lease ()  is successfully claimed, then the execution component  may initiate processing of the singleton task  by server () . The lease extension component  may be configured to extend or relinquish the claim to the lease based the new lease expiration expiring. For example, the extension component  may extend or relinquish  the lease for the singleton task () & lease () . To extend the lease, the extension component  may update the expired new lease expiration with a second new lease expiration, thus allowing the server ()  to continue processing the singleton task (). Extending the lease may be advantageous when the server ()  has a lot of state and\/or overhead associated with the singleton task (), which would otherwise be replicated if a new server began processing the singleton task (). If the claim is relinquished, then the validity determination component  may be configured to again determine whether the lease for the singleton task is valid or expired.",{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 3","b":["300","302","304","306","308","302"]},"If the lease is determined to have expired, at , then at , an attempt to claim the lease is performed. For example, an update to a database row comprising the lease data may be performed using a new lease expiration to update the current lease expiration. At , a determination may be made as to whether the claim was successful (e.g., was the database row successfully updated or not). If the claim was unsuccessful, then the method again begins at .","If the claim was successful, at , then at , the singleton task may be processed until the new lease expiration expires. At , the lease may be extended, whereupon an attempt to claim the lease may be performed (e.g., the attempt to claim the lease ), otherwise the lease may be relinquished, whereupon the method again beings at .","It may be appreciated that multiple instances of the flow diagram  may be executed in a continuous loop for respective singleton tasks within a lease storage component. The multiple instances of the flow diagram  may be implemented as a protocol within one or more server instances to provide that singleton tasks are executed per contracts specifying a desirable number of server instances that may process the singleton tasks.",{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 4","b":["400","402","402","1","1","2","2","1","1","2","2","402"]},{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIG. 5","FIG. 2"],"b":["500","1","502","2","504","3","506","516","216","516"]},"In one example, a lease storage component  may be configured with an email retrieval singleton task  having a lease comprising a current lease expiration . The lease storage component  and the singleton task processing protocol  may be implemented as a leasing model through a database. Server ()  through server (N) may execute instances of the singleton task processing protocol  to determine validity of the lease for the email retrieval singleton task ; claim the lease by attempting to update the current lease expiration  with a new lease expiration; and\/or process the email retrieval singleton task  based upon successfully claiming the lease when the current lease expiration  is expired.","For example, server ()  may determine through the singleton task processing protocol  that the current lease expiration  has expired for the email retrieval singleton task . The server ()  may successfully claim the current lease by updating the current lease expiration  with a new lease expiration . It may be appreciated that server () has ownership of the lease once claimed, whereas server ()  and\/or other servers do not own the lease and may not process the email retrieval singleton task , for example, because a contract may specify that no more than one server may process the email retrieval singleton task . Once claimed, the server ()  may process the email retrieval singleton task  until expiration of the new lease expiration , whereupon the server ()  may extend or relinquish the claim to the lease.",{"@attributes":{"id":"p-0037","num":"0036"},"figref":["FIG. 6","FIG. 2"],"b":["600","1","602","616","216","604","606","608","604","616","1","602","616"]},"In one example, the lease for the email retrieval singleton task  may be determined as valid because the current lease expiration  exceeds a current time, thus another server may be processing the email retrieval singleton task . The singleton task processing protocol  may wait or have its associated server (e.g., server () ) process other tasks until a current time exceeds the current lease expiration. This wait period allows the current lease expiration  to potentially expire. When the current time is exceeded by the current lease expiration (e.g., the wait period has lapsed), then the singleton task processing protocol  of respective servers (e.g., server () ), may again determine whether the lease for the email retrieval singleton task  is valid or expired.",{"@attributes":{"id":"p-0039","num":"0038"},"figref":["FIG. 7","FIG. 2"],"b":["700","1","702","716","216","704","706","708","704","716","1","702","716"]},"In one example, the lease for the email retrieval singleton task  may be determined as expired because a current time exceeds the current lease expiration . The singleton task processing protocol  may attempt to claim the lease for the email retrieval singleton task  by updating the current lease expiration  within the lease storage component with a new lease expiration. Because another server may successfully claim the lease, the singleton task processing protocol  of server () , for example, may unsuccessfully claim the lease. Upon unsuccessfully claiming the lease, the singleton task processing protocol  again determines whether the lease for the email retrieval singleton task  is valid or expired (e.g., performing a loop within the singleton task processing protocol  algorithm).","The leasing model implemented through the singleton task processing protocol  allows a contract defining a particular sub-set of server instances (e.g., a single server instance) that can concurrently process singleton task to be upheld. This allows singleton task ownership to be reliably assigned across arbitrary autonomous server instances that may have minimal knowledge of one another and\/or situations where new server instances are introduced into an always on computer environment without the benefit of bootstrap code.","Still another embodiment involves a computer-readable medium comprising processor-executable instructions configured to implement one or more of the techniques presented herein. An exemplary computer-readable medium that may be devised in these ways is illustrated in , wherein the implementation  comprises a computer-readable medium  (e.g., a CD-R, DVD-R, or a platter of a hard disk drive), on which is encoded computer-readable data . This computer-readable data  in turn comprises a set of computer instructions  configured to operate according to one or more of the principles set forth herein. In one such embodiment , the processor-executable instructions  may be configured to perform a method , such as the exemplary method  of , for example. In another such embodiment, the processor-executable instructions  may be configured to implement a system, such as the exemplary system  of , for example. Many such computer-readable media may be devised by those of ordinary skill in the art that are configured to operate in accordance with the techniques presented herein.","Although the subject matter has been described in language specific to structural features and\/or methodological acts, it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather, the specific features and acts described above are disclosed as example forms of implementing the claims.","As used in this application, the terms \u201ccomponent,\u201d \u201cmodule,\u201d \u201csystem\u201d, \u201cinterface\u201d, and the like are generally intended to refer to a computer-related entity, either hardware, a combination of hardware and software, software, or software in execution. For example, a component may be, but is not limited to being, a process running on a processor, a processor, an object, an executable, a thread of execution, a program, and\/or a computer. By way of illustration, both an application running on a controller and the controller can be a component. One or more components may reside within a process and\/or thread of execution and a component may be localized on one computer and\/or distributed between two or more computers.","Furthermore, the claimed subject matter may be implemented as a method, apparatus, or article of manufacture using standard programming and\/or engineering techniques to produce software, firmware, hardware, or any combination thereof to control a computer to implement the disclosed subject matter. The term \u201carticle of manufacture\u201d as used herein is intended to encompass a computer program accessible from any computer-readable device, carrier, or media. Of course, those skilled in the art will recognize many modifications may be made to this configuration without departing from the scope or spirit of the claimed subject matter.",{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIG. 9","FIG. 9"]},"Although not required, embodiments are described in the general context of \u201ccomputer readable instructions\u201d being executed by one or more computing devices. Computer readable instructions may be distributed via computer readable media (discussed below). Computer readable instructions may be implemented as program modules, such as functions, objects, Application Programming Interfaces (APIs), data structures, and the like, that perform particular tasks or implement particular abstract data types. Typically, the functionality of the computer readable instructions may be combined or distributed as desired in various environments.",{"@attributes":{"id":"p-0048","num":"0047"},"figref":["FIG. 9","FIG. 9"],"b":["910","912","912","916","918","918","914"]},"In other embodiments, device  may include additional features and\/or functionality. For example, device  may also include additional storage (e.g., removable and\/or non-removable) including, but not limited to, magnetic storage, optical storage, and the like. Such additional storage is illustrated in  by storage . In one embodiment, computer readable instructions to implement one or more embodiments provided herein may be in storage . Storage  may also store other computer readable instructions to implement an operating system, an application program, and the like. Computer readable instructions may be loaded in memory  for execution by processing unit , for example.","The term \u201ccomputer readable media\u201d as used herein includes computer storage media. Computer storage media includes volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions or other data. Memory  and storage  are examples of computer storage media. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, Digital Versatile Disks (DVDs) or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by device . Any such computer storage media may be part of device .","Device  may also include communication connection(s)  that allows device  to communicate with other devices. Communication connection(s)  may include, but is not limited to, a modem, a Network Interface Card (NIC), an integrated network interface, a radio frequency transmitter\/receiver, an infrared port, a USB connection, or other interfaces for connecting computing device  to other computing devices. Communication connection(s)  may include a wired connection or a wireless connection. Communication connection(s)  may transmit and\/or receive communication media.","The term \u201ccomputer readable media\u201d may include communication media. Communication media typically embodies computer readable instructions or other data in a \u201cmodulated data signal\u201d such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d may include a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal.","Device  may include input device(s)  such as keyboard, mouse, pen, voice input device, touch input device, infrared cameras, video input devices, and\/or any other input device. Output device(s)  such as one or more displays, speakers, printers, and\/or any other output device may also be included in device . Input device(s)  and output device(s)  may be connected to device  via a wired connection, wireless connection, or any combination thereof. In one embodiment, an input device or an output device from another computing device may be used as input device(s)  or output device(s)  for computing device .","Components of computing device  may be connected by various interconnects, such as a bus. Such interconnects may include a Peripheral Component Interconnect (PCI), such as PCI Express, a Universal Serial Bus (USB), firewire (IEEE 1394), an optical bus structure, and the like. In another embodiment, components of computing device  may be interconnected by a network. For example, memory  may be comprised of multiple physical memory units located in different physical locations interconnected by a network.","Those skilled in the art will realize that storage devices utilized to store computer readable instructions may be distributed across a network. For example, a computing device  accessible via a network  may store computer readable instructions to implement one or more embodiments provided herein. Computing device  may access computing device  and download a part or all of the computer readable instructions for execution. Alternatively, computing device  may download pieces of the computer readable instructions, as needed, or some instructions may be executed at computing device  and some at computing device .","Various operations of embodiments are provided herein. In one embodiment, one or more of the operations described may constitute computer readable instructions stored on one or more computer readable media, which if executed by a computing device, will cause the computing device to perform the operations described. The order in which some or all of the operations are described should not be construed as to imply that these operations are necessarily order dependent. Alternative ordering will be appreciated by one skilled in the art having the benefit of this description. Further, it will be understood that not all operations are necessarily present in each embodiment provided herein.","Moreover, the word \u201cexemplary\u201d is used herein to mean serving as an example, instance, or illustration. Any aspect or design described herein as \u201cexemplary\u201d is not necessarily to be construed as advantageous over other aspects or designs. Rather, use of the word exemplary is intended to present concepts in a concrete fashion. As used in this application, the term \u201cor\u201d is intended to mean an inclusive \u201cor\u201d rather than an exclusive \u201cor\u201d. That is, unless specified otherwise, or clear from context, \u201cX employs A or B\u201d is intended to mean any of the natural inclusive permutations. That is, if X employs A; X employs B; or X employs both A and B, then \u201cX employs A or B\u201d is satisfied under any of the foregoing instances. In addition, the articles \u201ca\u201d and \u201can\u201d as used in this application and the appended claims may generally be construed to mean \u201cone or more\u201d unless specified otherwise or clear from context to be directed to a singular form.","Also, although the disclosure has been shown and described with respect to one or more implementations, equivalent alterations and modifications will occur to others skilled in the art based upon a reading and understanding of this specification and the annexed drawings. The disclosure includes all such modifications and alterations and is limited only by the scope of the following claims. In particular regard to the various functions performed by the above described components (e.g., elements, resources, etc.), the terms used to describe such components are intended to correspond, unless otherwise indicated, to any component which performs the specified function of the described component (e.g., that is functionally equivalent), even though not structurally equivalent to the disclosed structure which performs the function in the herein illustrated exemplary implementations of the disclosure. In addition, while a particular feature of the disclosure may have been disclosed with respect to only one of several implementations, such feature may be combined with one or more other features of the other implementations as may be desired and advantageous for any given or particular application. Furthermore, to the extent that the terms \u201cincludes\u201d, \u201chaving\u201d, \u201chas\u201d, \u201cwith\u201d, or variants thereof are used in either the detailed description or the claims, such terms are intended to be inclusive in a manner similar to the term \u201ccomprising.\u201d"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 9"}]},"DETDESC":[{},{}]}
