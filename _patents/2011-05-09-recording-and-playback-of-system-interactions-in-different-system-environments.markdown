---
title: Recording and playback of system interactions in different system environments
abstract: A system includes a recording interface configured for receiving tagged information for recording system interactions. A recording module is configured for communicating with the recording interface and for recording the system interactions from a first computing environment between at least one application and a common component based on the tagged information. A repository is configured for storing the recorded system interactions. A playback interface is configured for retrieving a portion of the stored system interactions from the repository and playing back the retrieved portion of system interactions for simulating system interactions for a second computing environment.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08863095&OS=08863095&RS=08863095
owner: International Business Machines Corporation
number: 08863095
owner_city: Armonk
owner_country: US
publication_date: 20110509
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","BRIEF SUMMARY","DETAILED DESCRIPTION"],"p":["The present invention relates generally to recording computing system interactions for playback, and in particular, playing back recorded computing system interactions from a first computing environment in a second computing environment.","Simulators are available for simulating calls to system components, for example when testing an application for a storage device that is not available. Further, debuggers intercept and log the traffic between an application and a component, for example a management application and an interface. The simulators and debuggers are designed to work in a single environment.","Embodiments of the invention provide a method and system for enhanced playback of system interactions from a first computing environment in a second computing environment. In one embodiment of the invention, a system includes a recording interface configured for receiving tagged information for recording system interactions. A recording module is configured for communicating with the recording interface and for recording the system interactions from a first computing environment between at least one application and a common component based on the tagged information. A repository is configured for storing the recorded system interactions. A playback interface is configured for retrieving a portion of the stored system interactions from the repository and playing back the retrieved portion of system interactions for simulating system interactions for a second computing environment.","Another embodiment of the invention provides a computer program product for playing back recorded interactions from a first computing environment in a second computing environment. The computer program product comprising: a computer readable storage medium having computer usable program code embodiment therewith. The computer usable code comprising computer usable program code configured to record interactions from the first computing environment between a plurality of executing processes of at least one application and a common component based on tagged information. The computer usable code further comprises computer usable program code configured to retrieve a portion of the recorded interactions and to play back the retrieved portion of recorded interactions for simulating interactions for the second computing environment.","In one embodiment of the invention, a method includes receiving tagged information for recording processing interactions from a first computing environment. The processing interactions between at least one application and a common component is recorded based on the tagged information. The recorded processing interactions are stored in a memory. A portion of the stored processing interactions are retrieved from the memory. The retrieved portion of processing interactions is played back for simulating processing interactions for a second computing environment.","Other aspects and advantages of the present invention will become apparent from the following detailed description, which, when taken in conjunction with the drawings, illustrate by way of example the principles of the invention.","The following description is made for the purpose of illustrating the general principles of the invention and is not meant to limit the inventive concepts claimed herein. Further, particular features described herein can be used in combination with other described features in each of the various possible combinations and permutations. Unless otherwise specifically defined herein, all terms are to be given their broadest possible interpretation including meanings implied from the specification, as well as meanings understood by those skilled in the art and\/or as defined in dictionaries, treatises, etc. The description may disclose several preferred embodiments for file systems, as well as operation and\/or component parts thereof. While the following description will be described in terms of file systems and processes for clarity and placing the invention in context, it should be kept in mind that the teachings herein may have broad application to all types of systems, devices and applications.","Embodiments of the invention provide recording of system processing interactions between computing applications and their respective internal processes in one computing environment and playing back the recorded interactions in another computing environment. The playback of recorded interactions simulates the execution of application logic in a controlled debug environment that mimics the environment in which a problem or a behavior of interest may have been observed. The embodiments assist users to understand the impact of interactions on logic consuming the data returned by a common component, such as a common information model object manager (CIMOM), a host bus adapter (HBA), an application programming interface (API) library, etc.","The embodiments of the invention provide simulation of the processing interactions with a common component from another environment, and observing the effects of those interactions on code branches consuming the responses of the common component in order to debug problems, perform \u201cwhat-if analysis,\u201d etc. Additionally, the embodiments of the invention may be used to simulate the interaction of a common component, by itself, by simulating other applications that typically interact with the common component.","The embodiments of the invention take into consideration elements that may be unique to a particular computing\/processing environment that needs to be simulated including the presence of multiple applications and\/or multiple threads\/processes within applications interacting with a common component. For example, a user may be interested in debugging a first application A. However, there may also be other third-party applications B and C that are interacting with the common component and this complex interaction may be a factor in a problem that has been observed and is one that needs to be simulated. Another example may be that a specific sequence of calls made by an application needs to be simulated (both in order specific and also in the same elapsed time between calls). Additionally, the content of responses sent back by a common application and the elapsed time in sending the response may need to be simulated. The embodiments of the invention provide a system and method to record interactions made during a logical operation of an application to be debugged in an environment where a problem is occurring, and subsequently playback the operation in another environment where the problem can be debugged.","In one embodiment, the invention provides a system including a recording interface configured for receiving tagged information for recording system interactions. A recording module is configured for communicating with the recording interface and for recording the system interactions from a first computing environment between at least one application and a common component based on the tagged information. A repository is configured for storing the recorded system interactions. A playback interface is configured for retrieving a portion of the stored system interactions from the repository and playing back the retrieved portion of system interactions for simulating system interactions for a second computing environment.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1","b":["100","100","110","115","120","130","135","140","150","110","135","130","120","130"]},"In one embodiment of the invention, repository  may be any memory device, memory structure, component, virtual device, etc., for storing information including system interactions (e.g., input\/output data, thread\/process  identification, timing information, etc.).","In one embodiment of the invention, calls made by the tagged application  include tagged calls made during the logical operation of the tagged application . The responses by a system component to the calls made by the tagged application  are recorded by the recording module . Responses are associated to the tagged calls made by the tagged application . Any interactions made by a third-party application (i.e., non-tagged application ) on the common component  (since the interaction of the other applications can be a factor in a problem being debugged) are also recorded by the recording module .","In one example, the recording module  may intercept all calls between all tagged applications  and non-tagged applications  and the common component  that they interact with. The recording API  may be used for applications that need to be debugged. In one embodiment of the invention, tagged applications  pass information (e.g., arguments, identifiers, etc.) to the recording API  and invoke the recording module  instead of invoking the common component  directly. The repository  stores the information recorded by the recording module .","In one embodiment of the invention, the application code of the tagged application  is modified to issue the tagged calls to the recording API  for recording interaction information, such as variable values, thread states, object information, thread identification information, etc. In one example, in the computing\/processing system environment to be recorded (e.g., a first environment), execution of the tagged application  code results in the interaction recorded in a file that is stored in the repository .","In one embodiment of the invention, the recording API  receives the following tagged calls from the tagged application : RegisterRecordingForThread, StartRecordingForThread, CallCommonComponentRecording, and StopRecording. In one example, tagged calls represent the following: RegisterRecordingForThread: registers a specific thread to have its interactions recorded; StartRecordingForThread: starts recording of interactions for the particular thread that was registered; CallCommonComponentRecording: records the interactions with a common component that interacts with the registered thread; StopRecording: stops recording of interactions that began to be recorded by the StartRecordingForThread tagged call. In one example, all threads\/processes within an application that can be tagged (i.e., tagged application ) are required to make the RegisterRecordingForThread call once before any other processing may be performed. In one example, a unique identifier (e.g., a name, a number, a code, combined name\/number\/code, etc.) is passed as an argument for each thread\/process . The recording module uses this information for the tagged call to StartRecordingForThread.","In one embodiment of the invention, the StartRecordingForThread tagged call is made by any thread\/process  in the tagged application . The StartRecordingForThread tagged call may be made by any thread\/process  in an application that will make a call to the common component . In one example, the argument includes a unique identifier that is passed into the StartRecordingForThread tagged call. The StartRecordingForThread tagged call blocks until all threads\/processes  that have invoked the RegisterRecordingForThread have called the StartRecordingForThread call. In one example the StartRecordingForThread tagged call is a mechanism to synchronize the processing clocks for various threads\/processes  for recording. When all registered threads\/processes  have called the StartRecordingForThread tagged call, an internal clock is started for recording calls made by the non-tagged application . In one example, an identifier NT may be used as a generic tag for all non-tagged applications .","In one embodiment of the invention, the CallCommonComponentRecording tagged call is made by threads\/processes  within the tagged application . In one example, the actual call and argument information, along with the unique identifier for the threads\/processes , is passed in. The recording module  may make the actual call to receive component information and recorded information from the repository . In one example, the CallCommonComponentRecording tagged call returns the response returned by the common component .","In one embodiment of the invention, the StopRecording tagged call stops recording by the recording module .",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 2","b":["200","200","205","210","215","150","215","205","150"]},"During playback of system interactions, the elapsed time to make calls to a common component in a new environment can be different from the elapsed time in the environment in which recording was performed (due to differences in processing speed, debugging by user, etc.). In one example, the playback module  attempts to keep the relative elapsed call timing between calls made to common component by an application. In one embodiment of the invention, the playback module  adds time delays if needed to maintain the relative elapsed call timing.","In one example, in another environment, the tagged application  (that has been modified to issue calls to the playback API ) is run\/executed with information from the recorded file from the repository  as input. Interactions previously recorded are used to return data to the tagged application  and to as closely mimic the environment from which recording was originally made in. In one example, playback may be performed for common application code if desired. In this example, playback invokes the common component using the stored recorded interactions as input data and attempts to preserve the relative elapsed time between invocations.","In one embodiment of the invention, the playback API  receives the following tagged calls from the tagged application : RegisterPlaybackForThread, StartPlaybackForThread, CallCommonComponentPlayback, and StopPlayback. In one example, tagged calls represent the following: RegisterPlaybackForThread: registers a specific thread to have recorded interactions played back as input; StartPlaybackForThread: starts playing back the recorded interactions for the particular thread that was registered; CallCommonComponentPlayback: plays back the recorded interactions with a common component that interacts with the registered thread; StopPlayback: stops playing back of interactions that began to be played back by the StartPlaybackForThread tagged call. In one example, all threads\/processes  within the tagged application  need to make a call to RegisterPlaybackForThread once before any other processing is performed. The RegisterPlaybackForThread tagged call passes a unique identifier for a thread\/process  as an argument. The playback module  uses the argument for the StartPlaybackForThread tagged call.","In one example, the StartPlaybackForThread tagged call is made by any application that may be able to be tagged, such as tagged application . The StartPlaybackForThread tagged call needs to be made by any thread\/process  in a tagged application  that will make a call to a common component, such as common component . The unique identifier is passed as an argument for all threads\/processes . In one example, the StartPlaybackForThread tagged call blocks until all threads\/processes that have invoked the RegisterPlaybackForThread tagged call have called the StartPlaybackForThread tagged call. In one example, the StartPlaybackForThread is a mechanism for synchronizing the processing clocks for various threads\/processes  for playback.","In one example, the CallCommonComponentPlayback tagged call is made by threads\/processes  within a tagged application . The actual call and argument information, along with the unique identifier for the threads\/processes , is passed in. The playback module  looks up the stored call in the repository  and returns the response data. In one example, the playback module  computes the time elapsed since a previous call to the CallCommonComponentPlayback tagged call returned during playback, and compares that duration with the elapsed time in the recorded data, and adds any delays if needed before returning the response.","In one embodiment of the invention, the StopPlayback tagged call stops playback by the playback module .",{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 3","b":["300","300","320","210","215","310","150","215","150"]},"During playback of system interactions with the common component , the elapsed time to make calls to a common component in a new environment can be different from the elapsed time in the environment in which recording was performed (due to differences in processing speed, debugging by user, etc.). In one example, the playback module  attempts to keep the relative elapsed call timing between calls made to a common component by an application. In one embodiment of the invention, the playback module  adds time delays if needed to maintain the relative elapsed call timing.","In one example, in another computing\/processing environment, the common component  is run\/executed with information from the recorded file from the repository  used as input to the common component . Interactions previously recorded are used to return data to the common component  and to as closely mimic the environment from which recording was originally made. In one example, playback invokes the common component  using the inputs recorded from the stored recorded interactions and attempts to preserve the relative elapsed time between invocations.","In one embodiment of the invention, the playback API  receives the following tagged calls from the common component : StartPlaybackForCommonComponent and StopPlaybackForCommonComponent. In one example, the StartPlaybackForCommonComponent call is made by the common component  to start the playback. In one example, the StopPlaybackForCommonComponent call stops the playback from the playback module .",{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 4","b":["110","205","115","1","110","410","115","2","110","420","115","120","430","440"]},{"@attributes":{"id":"p-0042","num":"0041"},"figref":["FIG. 5","FIG. 4"],"b":["500","150","150","500","510","520","530","540","550"]},"In one example, THR and THR each have invoked RegisterRecordingForThread and StartRecordingForThread. This results in the clocks for all applications\/threads\/processes being synchronized. In one embodiment of the invention, an internal clock in the recording module  records the relative times when interactions are been made.","At a first time, T, a call is made by a non-tagged application (e.g., non-tagged application ) that is being recorded by the recording module . In one example the identifier NT_ () represents the non-tagged application at time T. In this example, a sequential number is added to the end of the identifier by the recording module . At a second time, T, a thread\/process  represented by THR_ () makes a call to CallCommonComponentRecording that results in an entry made with an identifier THR_ () in the repository  structure . An actual call is made to the common application  and the data recorded in the repository . At a third time, T, THR makes a call CallCommonComponentRecording that results in an entry made with identifier THR_ () in the repository  structure , where a sequential number is added to the end of the identifier by the recording module . An actual call is then made to the common component  and the data is recorded in the repository . At a fourth time, T, a call is made by a non-tagged application  that is recorded using identifier NT_ ). At a fifth time, T, THR makes a call to CallCommonComponentRecording that results in an entry made with the identifier THR_ () in the repository  structure . An actual call is made to the common component  and the data is recorded in the repository . The tagged application  then invokes the StopRecording call to stop the recording.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 6","b":["600","205","150","600","610","620","630","640","650","1","2","130","1","205","205","150","205","1","1","1","1","2","205"]},"At TP, the tagged application  invokes the CallCommonComponentPlayback call. The playback module  waits, if necessary, and then sends the response data from the recorded file in the repository . The playback module  matches up an entry using the identifier THR_, where TPR\u2212TPR is the same as T\u2212T, which is the elapsed time between calls made by the tagged application .","At TP, the tagged application  invokes the CallCommonComponentPlayback call. The playback module  waits, if necessary, and then sends the response data from the recorded file in the repository . The playback module  matches up an entry using the identifier THR_ where TPR\u2212TPR is the same as T\u2212T, which is the elapsed time between calls made by the tagged application .","In one example, the common component  invokes a call to StartPlaybackForCommonComponent. This results in the clocks for all application\/threads\/processes being synchronized based on the internal clock that recorded the relative times when interactions were being made. The playback module  keeps invoking the common component  and passes in the recorded inputs for tagged applications and non-tagged applications at time intervals, such that the timing difference between calls matches the time differences from the recording.",{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 7","b":"700","ul":{"@attributes":{"id":"ul0001","list-style":"none"},"li":{"@attributes":{"id":"ul0001-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0002","list-style":"none"},"li":["Process block : Tagged information is received from a first processing\/computing environment.","Process block : A recording module records processing interactions for the first environment.","Process block : The repository stores the recorded processing interactions for the first environment.","Process block : The stored processing interactions are retrieved by a playback module.","Process block : The retrieved processing interactions are played back by the playback module in a second processing\/computing environment. Clocks are synchronized between thread processes of a tagged application with the retrieved processing interactions. Time delays are inserted with the retrieved processing interactions for simulating processing in the second environment."]}}}},"Embodiments of the invention can take the form of a computer simulation or program product accessible from a computer-usable or computer-readable medium providing program code for use by or in connection with a computer, processing device, or any instruction execution system. As will be appreciated by one skilled in the art, aspects of the present invention may be embodied as a system, method or computer program product. Accordingly, aspects of the present invention may take the form of an entirely hardware embodiment, an entirely software embodiment (including firmware, resident software, micro-code, etc.) or an embodiment combining software and hardware aspects that may all generally be referred to herein as a \u201ccircuit,\u201d \u201cmodule\u201d or \u201csystem.\u201d Furthermore, aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium(s) having computer readable program code embodied thereon.","Any combination of one or more computer readable medium(s) may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be, for example, but not limited to, an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system, apparatus, or device, or any suitable combination of the foregoing. More specific examples (a non-exhaustive list) of the computer readable storage medium would include the following: an electrical connection having one or more wires, a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), an optical fiber, a portable compact disc read-only memory (CD-ROM), an optical storage device, a magnetic storage device, or any suitable combination of the foregoing. In the context of this document, a computer readable storage medium may be any tangible medium that can contain, or store a program for use by or in connection with an instruction execution system, apparatus, or device.","A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein, for example, in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms, including, but not limited to, electro-magnetic, optical, or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate, propagate, or transport a program for use by or in connection with an instruction execution system, apparatus, or device.","Program code embodied on a computer readable medium may be transmitted using any appropriate medium, including but not limited to wireless, wireline, optical fiber cable, radio frequency (RF), etc., or any suitable combination of the foregoing. Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages, including an object oriented programming language such as Java, Smalltalk, C++ or the like and conventional procedural programming languages, such as the \u201cC\u201d programming language or similar programming languages. The program code may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider).","Aspects of the present invention are described below with reference to flowchart illustrations and\/or block diagrams of methods, apparatus (systems) and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and\/or block diagrams, and combinations of blocks in the flowchart illustrations and\/or block diagrams, can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","These computer program instructions may also be stored in a computer readable medium that can direct a computer, other programmable data processing apparatus, or other devices to function in a particular manner, such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function\/act specified in the flowchart and\/or block diagram block or blocks.","The computer program instructions may also be loaded onto a computer, other programmable data processing apparatus, or other devices to cause a series of operational steps to be performed on the computer, other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.",{"@attributes":{"id":"p-0057","num":"0061"},"figref":"FIG. 8","b":["800","800","802","802","804"]},"The computer system can include a display interface  that forwards graphics, text, and other data from the communication infrastructure  (or from a frame buffer not shown) for display on a display unit . The computer system also includes a main memory , preferably random access memory (RAM), and may also include a secondary memory . The secondary memory  may include, for example, a hard disk drive  and\/or a removable storage drive , representing, for example, a floppy disk drive, a magnetic tape drive, or an optical disk drive. The removable storage drive  reads from and\/or writes to a removable storage unit  in a manner well known to those having ordinary skill in the art. Removable storage unit  represents, for example, a floppy disk, a compact disc, a magnetic tape, or an optical disk, etc., which is read by and written to by removable storage drive . As will be appreciated, the removable storage unit  includes a computer readable medium having stored therein computer software and\/or data.","In alternative embodiments, the secondary memory  may include other similar means for allowing computer programs or other instructions to be loaded into the computer system. Such means may include, for example, a removable storage unit  and an interface . Examples of such means may include a program package and package interface (such as that found in video game devices), a removable memory chip (such as an EPROM, or PROM) and associated socket, and other removable storage units  and interfaces  which allow software and data to be transferred from the removable storage unit  to the computer system.","The computer system may also include a communications interface . Communications interface  allows software and data to be transferred between the computer system and external devices. Examples of communications interface  may include a modem, a network interface (such as an Ethernet card), a communications port, or a PCMCIA slot and card, etc. Software and data transferred via communications interface  are in the form of signals which may be, for example, electronic, electromagnetic, optical, or other signals capable of being received by communications interface . These signals are provided to communications interface  via a communications path (i.e., channel) . This communications path  carries signals and may be implemented using wire or cable, fiber optics, a phone line, a cellular phone link, an RF link, and\/or other communication channels.","In this document, the terms \u201ccomputer program medium,\u201d \u201ccomputer usable medium,\u201d and \u201ccomputer readable medium\u201d are used to generally refer to media such as main memory  and secondary memory , removable storage drive , and a hard disk installed in hard disk drive .","Computer programs (also called computer control logic) are stored in main memory  and\/or secondary memory . Computer programs may also be received via a communication interface . Such computer programs, when run, enable the computer system to perform the features of the present invention as discussed herein. In particular, the computer programs, when run, enable the processor  to perform the features of the computer system. Accordingly, such computer programs represent controllers of the computer system.","The flowchart and block diagrams in the Figures illustrate the architecture, functionality, and operation of possible implementations of systems, methods and computer program products according to various embodiments of the present invention. In this regard, each block in the flowchart or block diagrams may represent a module, segment, or portion of code, which comprises one or more executable instructions for implementing the specified logical function(s). It should also be noted that, in some alternative implementations, the functions noted in the block may occur out of the order noted in the figures. For example, two blocks shown in succession may, in fact, be executed substantially concurrently, or the blocks may sometimes be executed in the reverse order, depending upon the functionality involved. It will also be noted that each block of the block diagrams and\/or flowchart illustration, and combinations of blocks in the block diagrams and\/or flowchart illustration, can be implemented by special purpose hardware-based systems that perform the specified functions or acts, or combinations of special purpose hardware and computer instructions.","While certain exemplary embodiments have been described and shown in the accompanying drawings, it is to be understood that such embodiments are merely illustrative of and not restrictive on the broad invention, and that this invention not be limited to the specific constructions and arrangements shown and described, since various other modifications may occur to those ordinarily skilled in the art."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
