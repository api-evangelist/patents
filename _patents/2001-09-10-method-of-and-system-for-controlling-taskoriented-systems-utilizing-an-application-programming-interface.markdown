---
title: Method of and system for controlling task-oriented systems utilizing an application programming interface
abstract: A method of, and system for, using a high-level, task-oriented Application Programming Interface (API) to access a legacy system, the method including the steps of: (a) providing the legacy system, including emulation software for accessing the legacy system; (b) operating a low level API over the emulation software; (c) operating the high-level, task-oriented application programming interface over the low level API, and (d) implementing database access protocol emulation over the high-level API.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07107597&OS=07107597&RS=07107597
owner: Ericom Software 8 2001 Ltd.
number: 07107597
owner_city: Jerusalem
owner_country: IL
publication_date: 20010910
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD AND BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DESCRIPTION OF THE PREFERRED EMBODIMENTS","EXAMPLE 1","Prior Art","EXAMPLE 2"],"p":["The present invention relates to a method for providing an Application Programming Interface (API) to existing applications that do not provide this service without modifying their internal operation. Moreover, this API is constructed in such a way that these applications appear to behave as standard Database Management Systems (DBMS). This makes such applications easily controllable from external software, allowing for task automation and also allowing them to participate in cross-application operations such as transactions.","Many modern applications provide programmatic access to the functionality they implement via an Application Programming Interface (API). By allowing this type of access, an API enables automation of common tasks and facilitates integration between disparate applications. Many older, a.k.a. legacy, applications do not provide an API. This deficiency is particularly glaring because these applications often stand to benefit the most from an API. The benefits, which are manifestly evident, include the following:\n\n","Another type of applications in which an API is generally not exposed at the client side is web applications. These applications run on a central server (web server) and expose their user-interface via a web browser. Such applications can also greatly benefit from an API because:\n\n","It is possible to graft an API on top of legacy applications without modifying the internal structure of these applications. Such systems are often accessed via specialized hardware (terminals). Over the past several years, this hardware has been replaced by software applications that emulate the behavior of the hardware on modem systems. By building an API into the emulation software, it is possible to achieve most of the same benefits as an API on the original legacy application itself. In the case of web applications, the solution is very similar: creating an application that emulates the browser's behavior and also provides an API.","A useful API must be easily usable from common programming environments\/programming languages. In addition, the API should provide a development model that is familiar to users and exposes logical units that match the processes (tasks) that the users wish to perform.","There is therefore a recognized need for, and it would be highly advantageous to have, a method for providing high-level application programming interface for legacy systems that is user-friendly, universal, and adaptable to client applications such as web servers. It would be of further advantage if such a method would support most software, hardware and network configurations.","According to the present invention, there is provided a method of using a high-level, task-oriented Application Programming Interface (API) to access a legacy system, the method including the steps of: (a) providing the legacy system, including emulation software for accessing the legacy system; (b) operating a low level API over the emulation software; (c) operating the high-level, task-oriented application programming interface over the low level API, and (d) implementing database access protocol emulation over the high-level API.","According to another aspect of the present invention, there is provided a system for using a high-level, task-oriented Application Programming Interface (API) to access a legacy system, the system comprising: (a) emulation software for accessing the legacy system; (b) a low level API for operating over said emulation software; (c) a high-level, task-oriented application programming interface for operating over said low level API, and (d) a database access protocol emulation for implementing over said high-level API.","According to another aspect of the present invention, there is provided a method of using an API to access a task-oriented system, the method comprising the steps of: (a) providing the task-oriented system; (b) operating the API over said system, and (c) implementing database access protocol emulation over the API.","According to another embodiment of the present invention, the method further includes the step of: retrieving data from the legacy system using the database access protocol emulation.","According to another embodiment of the present invention, the method further includes the step of: presenting the retrieved data in the form of a collection of database records according to the rules of the database access protocol.","According to another embodiment of the present invention, the method further includes the step of: performing at least one operation on the legacy system using the database access protocol emulation prior to retrieving the data from the legacy system.","According to another embodiment of the present invention, the method further includes the step of (f) performing at least one operation on the legacy system by manipulating the collection of database records in the form of adding, updating or deleting records.","According to another embodiment of the present invention, the data retrieval is accomplished by applying a plurality of linguistic rules.","According to another embodiment of the present invention, the performing of the operation is accomplished by applying a plurality of linguistic rules According to another embodiment of the present invention, the plurality of linguistic rules includes a Structured Query Language (SQL) syntax.","According to another embodiment of the present invention, the method further includes the step of: accessing a plurality of logic units in the legacy system, the accessing including addressing the plurality as a plurality of stored procedures in a data base management system.","According to another embodiment of the present invention, the method further includes the step of: forwarding arguments to the operations and returning results thereof as a collection of database records.","According to another embodiment of the present invention, the format is a format of stored procedures.","According to another embodiment of the present invention, the SQL syntax includes a SELECT statement.","According to another embodiment of the present invention, the SELECT statement supports record filtering using a WHERE modifier.","According to another embodiment of the present invention, the record filtering is performed by the legacy system.","According to another embodiment of the present invention, the record filtering is performed by a database access emulation layer.","According to another embodiment of the present invention, the SELECT statement supports record ordering using an ORDER BY modifier.","According to another embodiment of the present invention, the record ordering is performed by the legacy system.","According to another embodiment of the present invention, the record ordering is performed by a database access emulation layer.","According to another embodiment of the present invention, the SELECT statement supports relational algebraic operations, including but not limited to JOIN, SELECT and PROJECT.","According to another embodiment of the present invention, the relational algebraic operations are selected from the group consisting of: JOIN, SELECT and PROJECT.","According to another embodiment of the present invention, the operations of the legacy system generate data, and the method further includes the step of: assigning a name of each of the operations to a name of a table of the data.","According to another embodiment of the present invention, the operations of the legacy system generate data, and the method further includes the step of: assigning a name of each of the operations to a name of a view of the data.","According to another embodiment of the present invention, a plurality of operations including inserting, updating and removing information on the legacy system is accomplished by applying a plurality of linguistic rules.","According to another embodiment of the present invention, the plurality of linguistic rules includes an SQL syntax.","According to another embodiment of the present invention, the method further includes the step of: configuring the legacy system for participation in a transaction processing environment in conjunction with a plurality of applications.","According to another embodiment of the present invention, the applications include dissimilar applications.","According to another embodiment of the present invention, the manipulation is orchestrated by a transaction server.","According to another embodiment of the present invention, the method further includes the step of: performing operations on a group of systems selected from the group consisting of task-oriented and screen-oriented systems.","According to another embodiment of the present invention, the group of systems includes web server, web service, and eXtensible Markup Language,","According to another embodiment of the present invention, the group of systems includes applications on Microsoft Windows\u2122, applications on MS DOS\u00ae, and applications on UNIX X-Windows\u2122.","The method of the invention provides an API that is modeled after the common DBMS access methodologies including, but not limited to, Open Database Connectivity (ODBC), Java Database Connectivity (JDBC), Object Linking and Embedding Database (OLE DB), ActiveX Data Object (ADO) and eXtensible Markup Language (XML)-based data access methodologies. These are widely used APIs, very well documented and familiar to many users. Also, many development environments (e.g., Microsoft Visual Studio, IBM Visual Age) provide intrinsic support for database access protocols and many third-party components and tools are also available for them.","An API provides programmatic access to functionality implemented by an application. It does this by exposing a set of methods that an external program can invoke. For this to work, the methods must be implemented in such a way that they support invocation across process or even machine boundaries. This is required because the client program is usually a separate entity form the application that provides the API. In addition, a common set of data types must be defined so that values can be passed between the client of the API and its provider.","Because of these requirements, common frameworks for implementing APIs have evolved. They include RPC, COM, CORBA, SOAP and others. Such frameworks define a common type system and also provide an infrastructure for Remote Procedure Calls (RPC) or other forms of Inter Process Communication (IPC). Above these frameworks, common usage protocols have evolved. Such protocols define standard sets of functions, task specific data-types and, in the case of object oriented frameworks, standard objects and interfaces. Using a common protocol provides several benefits:\n\n","Some of the most common API protocols have to do with access to DBMS. These protocols abstract the relationship between the DBMS and the applications that manage and display the data stored within it. Thus, the same application can run unchanged on top of several distinct databases that may not even be from the same vendor (e.g., IBM DB2, Oracle9i, Microsoft SQL Server). Most of these APIs are centered on the Structured Query Language (SQL). However, they can also be used to invoke stored-procedures that are pre-built routines hosted in the DBMS. Such routines represent predefined business-logic units that can be activated to perform complete tasks.","Before explaining at least one embodiment of the invention in detail, it is to be understood that the invention is not limited in its application to the details of construction and the arrangement of the components set forth in the following description or illustrated in the drawings. The invention is capable of other embodiments or of being practiced or carried out in various ways. Also, it is to be understood that the phraseology and terminology employed herein is for the purpose of description and should not be regarded as limiting.","As used herein in the specification and in the claims section that follows, the term \u201cLow-level API\u201d refers to an Application Programming Interface that enables interaction with a host system by providing facilities for sending simulated keystrokes and reading characters of a virtual screen. The Low-level API also provides synchronization primitives for coordinating operations with screen events such as cursor positioning. Several standards exist for this type of API including HLLAPI, EHLLAPI and OHIO.","As used herein in the specification and in the claims section that follows, the term \u201cHigh-level API\u201d refers to an Application Programming Interface that enables activation of operational tasks and transactions within the target system. A single API method call may activate a complete task, where the task is specified by a logical identifier. Arguments and return values are provided using logical data types such as numbers, dates, and arrays of values.","As used herein in the specification and in the claims section that follows, the term \u201cprotocol\u201d refers to an agreed-upon format for transferring information, both data and commands, between two or more end-points. In the context of an API, a protocol defines a task-specific collection of data-types and functions. Adhering to such a protocol guarantees proper communication between the provider of the API and clients thereof.","As used herein in the specification and in the claims section that follows, the term \u201cStructured Query Language (SQL) syntax\u201d is used generally to refer to an SQL syntax, or to any subset or variant thereof, such as Transact-SQL (T-SQL).","Referring now to the drawings,  is a block diagram illustrating a method according to the present invention. A legacy application , which could be a standalone Alpha\/OpenVMS system, is connected to an emulation application . Emulation application  is a low-level API provider  that contains a terminal emulation component  and a low-level API . The connection between legacy application  and low-level API provider  is accomplished via terminal emulation component . Legacy application  communicates with terminal emulation component  by a legacy communication protocol . A task server  containing a high-level, task-oriented, API provider  enables access to predefined tasks  and is connected to emulation application  through low-level API . An application  emulates a database management system access protocol for running task server  over a high-level API . Optionally, application  has an optional memory storage  for caching, rollback and logical operations. Rollback operations are required in cases where operations need to be undone after they have been successfully completed. This is a requirement when the application is integrated with other applications in a manner that requires transactional integrity across the entire system. In such cases failed operations in other applications will necessitate a rollback.","A client application  manages DBMS emulation application  by a connection manager  that may optionally be an Open Data Base Connectivity (ODBC) Manager, a common type of software.",{"@attributes":{"id":"p-0058","num":"0068"},"figref":["FIG. 2","FIG. 1"],"b":["50","30","200","200","100","100","230","220","220","230","200","203","210","200","201"]},{"@attributes":{"id":"p-0059","num":"0069"},"figref":"FIG. 3","i":"a ","b":["300","400","310","410","415","410","350","415","350","315","310"]},"In , incompatible legacy systems  and  are directly interfaced using a server  incorporating an API-based emulation task server (server  in ). Using terminal emulation connections  and , respectively, systems  and  automatically exchange data in real time, the operations managed by server .",{"@attributes":{"id":"p-0061","num":"0071"},"figref":"FIG. 4","i":"a ","b":["300","550","560","570","575"]},"In the system and method of the present invention, the travel reservation system running on legacy host  is accessed through an API by an application running on top of a web-server , as shown in . Customers  communicate with the travel reservation system, using a computer , via Internet . Customers  make reservations by providing the required information (name, address, desired travel dates and times, passport no., credit card information, etc.) by filling out a web form and submitting the form to the travel reservation system. Optionally and preferably, time schedules, fare information, and the like can be retrieved directly by customers . To web-server , the travel reservation running on the legacy system appears to be a DBMS, such that standard programs and techniques can be used, instead of cumbersome, expensive, and generally inflexible customized software. Consequently, the communication between web-server  and the travel reservation system is simple, routine, and robust. The present invention requires significantly less customized programming than other \u201cautomatic\u201d systems using conventional technology (e.g., web-server  accessing the travel reservation system and performing operations directly through a low-level, character-oriented API).","The above-described application provides immediate access to the legacy system services for customers having access to the Internet. The resulting configuration is cheaper, faster and much more scalable than the original, prior-art configuration.","Although the invention has been described in conjunction with specific embodiments thereof, it is evident that many alternatives, modifications and variations will be apparent to those skilled in the art. Accordingly, it is intended to embrace all such alternatives, modifications and variations that fall within the spirit and broad scope of the appended claims. All publications mentioned in this specification are herein incorporated in their entirety by reference into the specification, to the same extent as if each individual publication, patent or patent application was specifically and individually indicated to be incorporated herein by reference. In addition, citation or identification of any reference in this application shall be construed as an admission that such reference is available as prior art to the present invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The invention is herein described, by way of example only, with reference to the accompanying drawings. With specific reference now to the drawings in detail, it is stressed that the particulars shown are by way of example and for purposes of illustrative discussion of the preferred embodiments of the present invention only, and are presented in the cause of providing what is believed to be the most useful and readily understood description of the principles and conceptual aspects of the invention. In this regard, no attempt is made to show structural details of the invention in more detail than is necessary for a fundamental understanding of the invention, the description taken with the drawings making apparent to those skilled in the art how the several forms of the invention may be embodied in practice.","In the drawings:",{"@attributes":{"id":"p-0041","num":"0048"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0042","num":"0049"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0043","num":"0050"},"figref":"FIG. 3","i":"a "},{"@attributes":{"id":"p-0044","num":"0051"},"figref":"FIG. 3","i":"b "},{"@attributes":{"id":"p-0045","num":"0052"},"figref":"FIG. 4","i":"a "},{"@attributes":{"id":"p-0046","num":"0053"},"figref":["FIG. 4","FIG. 4"],"i":["b ","a. "]}]},"DETDESC":[{},{}]}
