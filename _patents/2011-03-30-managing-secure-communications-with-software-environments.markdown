---
title: Managing secure communications with software environments
abstract: A method and system for use in managing secure communications with software environments is disclosed. In at least one embodiment, the method and system comprises maintaining, in a Java operating environment, a regulatory compliant communications facility that is accessible to a Flex operating environment. The Flex and Java operating environments are caused to use the regulatory compliant communications facility for network communications with a data storage system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08566595&OS=08566595&RS=08566595
owner: EMC Corporation
number: 08566595
owner_city: Hopkinton
owner_country: US
publication_date: 20110330
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY OF THE INVENTION","DESCRIPTION OF EMBODIMENT(S)"],"p":["1. Field of the Invention","The present invention relates to managing secure communications with software environments.","2. Description of Prior Art","Information services and data processing industries in general have rapidly expanded as a result of the need for computer systems to manage and store large amounts of data. As an example, financial service companies such as banks, mutual fund companies and the like now, more than ever before, require access to many hundreds of gigabytes or even terabytes of data and files stored in high capacity data storage systems. Other types of service companies have similar needs for data storage.","Data storage system developers have responded to the increased need for storage by integrating high capacity data storage systems, data communications devices (e.g., switches), and computer systems (e.g., host computers or servers) into so-called \u201cstorage networks\u201d or \u201cStorage Area Networks\u201d (SANs.)","In general, a storage area network is a collection of data storage systems that are networked together via a switching fabric to a number of host computer systems operating as servers. The host computers access data stored in the data storage systems (of a respective storage area network) on behalf of client computers that request data from the data storage systems. For example, according to conventional applications, upon receiving a storage access request, a respective host computer in the storage area network accesses a large repository of storage through the switching fabric of the storage area network on behalf of the requesting client. Thus, via the host computer (e.g., server), a client has access to the shared storage system through the host computer. In many applications, storage area networks support hi-speed acquisitions of data so that the host servers are able to promptly retrieve and store data from the data storage system.","Conventional storage area network management applications typically include a graphical user interface (GUI) that enables a network manager to graphically manage, control, and configure various types of hardware and software resources associated with a corresponding managed storage area network. For example, one conventional storage management application generates a graphical user interface utilized by a storage administrator to graphically select, interact with, and manage local or remote devices and software processes associated with the storage area network. Based on use of the graphical user interface in combination with an input device such as a hand operated mouse and corresponding pointer displayed on a viewing screen or other display, a storage administrator is able to manage hardware and software entities such as file systems, databases, storage devices, volumes, peripherals, network data communications devices, etc., associated with the storage area network. Consequently, a storage management station and associated management software enables a storage administrator (a person responsible for managing the storage network) to manage the storage area network and its resources.","A typical computer network being used today that can run object oriented software is a client-server network, the client being the user (GUI) or workstation and the server being software (discrete or distributed throughout the network) which serves the client. In this network, a computer system can employ one or more object-oriented computer languages such as C++, XML (eXtensible Markup Language), Java, Flash, and\/or others. Briefly, an object, in computer software terms, is a dedicated area of memory which can be thought of as an impervious container holding both data and instructions within itself, both defining itself and its relationships to other objects in the computer system or network. Such object or node can send and receive messages to and from other objects, respond and react to such messages (e.g. commands) but shall normally be impervious to internal scrutiny. For example, in a computer data storage system (a kind of computer) each object (system object) may describe or relate to a specific tangible detail in the storage system or in the storage system's processor (e.g., details such as those describing or relating to aspects of operation of the processor's cooling-fan, power switch, cache memory, power supply, disk drive interface, individual disks, etc.).","With respect to networks, people today use the World Wide Web for a variety of different and diverse tasks for example locating information, ordering and buying goods on-line and managing their finances. Many users expect that these applications will operate regardless of what type of computer platform is used.","Java technology, which is a trademark of Sun Microsystems, Inc, helps provide a solution by allowing the creation of computer platform independent programs. The Java technology includes an object oriented programming language and a platform on which to run the Java applications (known as Java Runtime Environment or JRE). Java is both a compiled and an interpreted language. The source code that has been written by the application developer is compiled into an intermediate form called a Java bytecode, which is a platform independent language. At a client machine, the java bytecodes are interpreted by the Java platform and the Java interpreter parses and runs each Java bytecode instruction on the computer. (If the Java bytecode is run as a applet, it may first be sent over the network to the client machine.)","Java's objected oriented programming language is based on using objects and classes and this paragraph will introduce the reader to a few basic concepts. Just like real world objects, software objects consist of a state and a behavior. A software object maintains its state in one or more variables and a variable is an item of data named by an identifier. A software object implements its behavior with methods and a method is a function associated with an object. Just like any other objected oriented programming language objects communicate with each other by passing messages. Further object oriented concepts are well known in the art and will not be described here further.","The Java platform includes the Application Programming Interface (API), which is a large collection of ready-made software components, which provide a variety of capabilities, and the Java Virtual Machine (JVM) which will be explained in the paragraph below. Together the JVM and the API sit on top of the hardware based computer platform and provide a layer of abstraction between the Java program and the underlying hardware.","The JVM is made up of software, which can run a Java program on a specific computer platform of a client machine. Before a Java program can be run on a JVM, the Java program must first be translated into a format that the JVM recognizes, which is called a Java class file format. The Java class file format contains all the information needed by a Java runtime system to define a single Java class.","Adobe Flex is a collection of technologies released by Adobe Systems for the development and deployment of cross platform rich Internet applications based on the Adobe Flash platform. Flex provides a workflow and programming model that is familiar to developers. Macromedia XML (\u201cMXML\u201d), an eXtensible Markup Language (\u201cXML\u201d)-based markup language, offers a way to build and lay out graphic user interfaces. Interactivity is achieved through the use of ActionScript, the core language of Flash Player that is based on the European Computer Manufacturers Association (\u201cECMA\u201d) ECMAScript standard. A Flex software development kit (\u201cSDK\u201d) comes with a set of user interface components including buttons, list boxes, trees, data grids, several text controls, charts, graphs and various layout containers. Other features such as web services, drag and drop, modal dialogs, animation effects, application states, form validation, and other interactions round out the application framework.","A Flex application may be a rich internet application (\u201cRIA\u201d). RIAs introduce an intermediate layer of code, often called a client engine, between the user and the server. This client engine is typically downloaded as part of the instantiation of the application, and may be supplemented by further code downloads as use of the application progresses. The client engine acts as an extension of the browser, and usually takes over responsibility for rendering the application's user interface and for server communication. What can be done in a RIA may be limited by the capabilities of the system used on the client, but in general, the client engine is programmed to perform application functions that its designer believes will enhance some aspect of the user interface, or improve its responsiveness when handling certain user interactions, compared to a standard Web browser implementation. Also, while simply adding a client engine does not force an application to depart from the normal synchronous pattern of interactions between browser and server, in most RIAs the client engine performs additional asynchronous communications with servers.","In a multi-tiered model, Flex applications serve as the presentation tier. Unlike page-based Hypertext Markup Language (\u201cHTML\u201d) applications, Flex applications provide a stateful client where significant changes to the view don't require loading a new page. Similarly, Flex and Flash Player provide many useful ways to send and load data to and from server-side components without requiring the client to reload the view. To incorporate a Flex application into a website, one typically embeds Shockwave Flash (.SWF) file in an HTML, JavaServer Pages (\u201cJSP\u201d), Adobe, ColdFusion, or other type of web page. The page that embeds the SWF file is known as the wrapper. A wrapper consists of an <object> tag and an <embed> tag that format the SWF file on the page, define data object locations, and pass run-time variables to the SWF file. In addition, the wrapper can include support for history management and Flash Player version detection and deployment.","It is possible for a Flex application to be launched from one domain and then connect back to a different domain by installing a cross domain policy file in a site.","The uses for the Internet and the World Wide Web are continually increasing, and have expanded into \u201csecure\u201d areas. Different mechanisms for maintaining security in a network such as the Internet have been developed, such as the Secure Sockets Layer (SSL) security protocol. The SSL protocol uses a public key infrastructure to maintain security. In establishing an SSL connection between a client computer and a server computer hosting a web page, the server computer transmits a certificate to the client computer for verification or validation.","A client\/server network system and environment typically includes multiple network server computers, and multiple network client computers. The computers communicate with each other over a data communications network which may comprises a public network such as the Internet and\/or local-area networks and private wide-area networks.","Each network server computer hosts content (e.g., Java or Flex applications and\/or one or more World Wide Web pages) that can be accessed by a web browser or other application executing at a client computer. The web browser can establish a secure connection with one of the server computers using a secure communications protocol such as SSL.","Each client computer maintains a certificate store that includes one or more trusted certificates. The store can be implemented, for example, as part of the web browser or part of an operating system or some other application executing on the client. To establish a secure connection between a client computer and a server computer, the server computer transmits a server certificate to the client computer. The client computer uses the server certificate to verify or validate that server computer can be trusted.","The store is part of a software application (e.g., the web browser or an operating system). Certificates can be automatically added to the store after the application has been deployed and installed on client computers.","Each certificate may optionally include one or more usage parameters. These usage parameters are used to limit the manner in which the certificate can be used. For example, a particular certificate may have its usage limited to only certain applications. Thus, it may not be possible to use that particular certificate for establishing a secure connection to a server computer. In an example, the usage parameters are denoted by properties, policy extensions, and\/or an enhance key usage (EKU) extension that are part of, or alternatively associated with, the certificate.","The SSL protocol (sometimes called the Transport Level Security (TLS) protocol) is an industry standard method by which secure data connections or sessions can be established. The SSL protocol provides data encryption, server authentication, message integrity and optional client authentication over computer networks. SSL is a so-called transport layer protocol since it is defined to operate on the \u201csockets\u201d level of a computer network. It will be understood by those skilled in the art that \u201csockets\u201d is the standard application program interface (API) by which data is transferred on the transport level of a computer network. As a result of SSL operating on the sockets level of a network, there must be an end-to-end direct connection between networked devices in order for SSL to function correctly.","Java offers storage for public and private keys, and their associated certificates or certificate chains in a database known as a Keystore. The default Keystore implementation in Java is a flat file in a proprietary form known as a Java Keystore, or JKS.","Many commercial software applications require security functionality beyond that provided by the Java platform. RSA BSAFE\u00ae security tools for Java developers provides a set of common libraries written in Java for meeting security requirements of commercial software applications. RSA BSAFE\u00ae software helps Java application developers meet these requirements. The software also extends the core security capabilities of the Java platform by meeting requirements of series 140 of Federal Information Processing Standards (FIPS 140), which is the U.S. government standard which specifies the security requirements to be satisfied by a cryptographic module to be used by a Federal agency. The current version of the standard is FIPS 140-2.","Typically in practice, when a user's Web browser first tries to contact a server for a secure transaction, the server sends its digital certificate to the browser. This certificate includes (among other things) the server's public key, the server's identity, the name of the certificate authority (CA) that signed the certificate and the signature itself (which is a mathematical hash of the certificate encrypted with the CA's private key). To validate the certificate, the browser computes the certificate hash and compares the result with the hash obtained by decrypting the signature using the CA's public key (as well as checking the validity dates and identity included in the certificate against the desired server). To then validate the server, the browser encrypts a message with the public key obtained from the certificate and sends it to the server. If the server can prove it can decrypt that message then it must have the associated private key and the authentication has succeeded. If desired, the server may likewise validate the browser. Once the browser and (optionally) the server is\/are satisfied that each is the computer it claims to be, the browser and server can exchange session keys (additional keys that are used to encrypt the data transfers between the computers from then on).","A method and system for use in managing secure communications with software environments is disclosed. In at least one embodiment, the method and system comprises maintaining, in a Java operating environment, a regulatory compliant communications facility that is accessible to a Flex operating environment. The Flex and Java operating environments are caused to use the regulatory compliant communications facility for network communications with a data storage system.","Described below is a technique for use in managing secure communications with software environments. In at least one implementation, the technique may be used to help provide for Flex multi-system FIPS compliance (e.g., FIPS 140-2). At least one implementation using the technique makes use of a self contained hidden Java applet that supports a FIPS compliant communication stack that can be used for Flex based multi-system communication. Depending on the implementation, the applet may be built based an old JRE, e.g., the oldest JRE possible, to reduce the case that the user does not have a JRE capable of handling the applet, and use of the applet may be optional such that a user can still make use of a pure Flex stack if the user does not want to run a JRE or need FIPS compliance. Java supports base communication and Flex is used to parse and process data.","Referring now to , shown is an example of an embodiment of a computer system that may be used in connection with performing the technique described herein. The computer system  includes one or more data storage systems  connected to host systems -through communication medium . The system  also includes a management system  connected to one or more data storage systems  through communication medium . In this embodiment of the computer system , the management system , and the N servers or hosts may access the data storage systems , for example, in performing input\/output (I\/O) operations, data requests, and other operations. The communication medium  may be any one or more of a variety of networks or other type of communication connections as known to those skilled in the art. Each of the communication mediums  and  may be a network connection, bus, and\/or other type of data link, such as a hardwire or other connections known in the art. For example, the communication medium  may be the Internet, an intranet, network or other wireless or other hardwired connection(s) by which the host systems may access and communicate with the data storage systems , and may also communicate with other components (not shown) that may be included in the computer system . In one embodiment, the communication medium  may be any medium that can support TCIP\/IP (e.g., a LAN connection) and the communication medium  may be an iSCSI or fibre channel connection.","Each of the host systems -and the data storage systems  included in the computer system  may be connected to the communication medium  by any one of a variety of connections as may be provided and supported in accordance with the type of communication medium . Similarly, the management system  may be connected to the communication medium  by any one of variety of connections in accordance with the type of communication medium . The processors included in the host computer systems -and management system  may be any one of a variety of proprietary or commercially available single or multi-processor system, such as an Intel-based processor, or other type of commercially available processor able to support traffic in accordance with each particular embodiment and application.","It should be noted that the particular examples of the hardware and software that may be included in the data storage systems  are described herein in more detail, and may vary with each particular embodiment. Each of the host computers -, the management system  and data storage systems may all be located at the same physical site, or, alternatively, may also be located in different physical locations. In connection with communication mediums  and , a variety of different communication protocols may be used such as SCSI, Fibre Channel, iSCSI, and the like. Some or all of the connections by which the hosts, management system, and data storage system may be connected to their respective communication medium may pass through other communication devices, such as a Connectrix or other switching equipment that may exist such as a phone line, a repeater, a multiplexer or even a satellite. In one embodiment, the hosts may communicate with the data storage systems over an iSCSI or fibre channel connection and the management system may communicate with the data storage systems over a separate network connection using TCP\/IP. It should be noted that although  illustrates communications between the hosts and data storage systems being over a first connection, and communications between the management system and the data storage systems being over a second different connection, an embodiment may also use the same connection. The particular type and number of connections may vary in accordance with particulars of each embodiment.","Each of the host computer systems may perform different types of data operations in accordance with different types of tasks. In the embodiment of , any one of the host computers -may issue a data request to the data storage systems  to perform a data operation. For example, an application executing on one of the host computers -may perform a read or write operation resulting in one or more data requests to the data storage systems .","The management system  may be used in connection with management of the data storage systems . The management system  may include hardware and\/or software components. The management system  may include one or more computer processors connected to one or more I\/O devices such as, for example, a display or other output device, and an input device such as, for example, a keyboard, mouse, and the like. A data storage system manager may, for example, view information about a current storage volume configuration on a display device of the management system .","An embodiment of the data storage systems  may include one or more data storage systems. Each of the data storage systems may include one or more data storage devices, such as disks. One or more data storage systems may be manufactured by one or more different vendors. Each of the data storage systems included in  may be inter-connected (not shown). Additionally, the data storage systems may also be connected to the host systems through any one or more communication connections that may vary with each particular embodiment and device in accordance with the different protocols used in a particular embodiment. The type of communication connection used may vary with certain system parameters and requirements, such as those related to bandwidth and throughput required in accordance with a rate of I\/0 requests as may be issued by the host computer systems, for example, to the data storage systems .","It should be noted that each of the data storage systems may operate stand-alone, or may also be included as part of a storage area network (SAN) that includes, for example, other components such as other data storage systems.","Each of the data storage systems of element  may include a plurality of disk devices or volumes. The particular data storage systems and examples as described herein for purposes of illustration should not be construed as a limitation. Other types of commercially available data storage systems, as well as processors and hardware controlling access to these particular devices, may also be included in an embodiment.","Servers or host systems, such as -, provide data and access control information through channels to the storage systems, and the storage systems may also provide data to the host systems also through the channels. The host systems do not address the disk drives of the storage systems directly, but rather access to data may be provided to one or more host systems from what the host systems view as a plurality of logical devices or logical volumes (LVs). The LVs may or may not correspond to the actual disk drives. For example, one or more LVs may reside on a single physical disk drive. Data in a single storage system may be accessed by multiple hosts allowing the hosts to share the data residing therein. An LV or LUN (logical unit number) may be used to refer to one of the foregoing logically defined devices or volumes.","Referring now to , shown is an example of a GUI  that may be used in connection with the technique described herein and that may be included in the management system . As shown, GUI  has a section panel  that has buttons including REPLICAS button  and a backward navigation button  and a forward navigation button . GUI  also has s subsection panel  that has buttons including CLONES button . A system selection area  of GUI  has a system selection pulldown menu . GUI  also has a links table  and main body area  that has tabs including tab .",{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 3","b":["260","310","16","260","420","420","420","12","390","20"]},"System  has Flex operating environment F and Java operating environment J, which includes the JRE. Flex application logic F, bridges F F, J, J, Flex CIM\/API F, certificate service F, validation checking logic F, Java service link logic F, Java application logic J, legacy-related logic J, required logic J, Java CIM\/API J, certificate service J, Flex service link logic J, validation checking logic J, certificate store J, cryptography library J, and communications layer J are elements that are not included in environments F, J respectively but that execute and\/or are used on environments F, J as described below.","Flex environment F and elements used on environment F are used directly to produce GUI  and to support management of certificates and store J. Java environment J and elements used on environment J are used directly to manage certificates and store J and to support production of GUI .","On startup, system  loads Flex environment F and elements used on environment F, and Java environment J and elements used on environment J, for use in communicating with, e.g., storage systems A, B, C. For example, if the user uses system selection pulldown menu  to select system C, system  may rely on Java environment J and elements used on environment J to communicate with system C to retrieve status and\/or configuration information about system C to help fill out main body area  for system C.","Bridges F, J and\/or bridges F, J establish a socket connection. (Sockets are supported by both environments F, J, but in at least one embodiment, environment F does not support server sockets, so inter-environment communications relies on a message identifier system to match requests with responses.) The socket connection using bridges F, J and\/or bridges F, J can be used to pass messages between environments F and J, wherein respective message queues are provided where messages bound for the other environment may be held temporarily awaiting their turns.","In the example system of , communications between system  and systems A, B, C is FIPS  compliant. Specifically, required logic  is FIPS  compliant and handles all communications between system  and systems A, B, C.","System  uses certificates, library J, and layer J to help communicate securely with storage systems A, B, C. Flex environment F and elements used on environment F do not communicate directly with systems A, B, C. System  must rely on Java environment J and elements used on environment J to communicate with systems A, B, C (which are therefore \u201cJava-access systems\u201d). In at least some implementations, any communication that Flex environment F and elements used on environment F require with Java-access systems must be routed through Java environment J, so that, for example, Java environment J retrieves information from system C and provides such information to Flex environment F so that elements used on environment F can help fill out main body area  for system C.","In an example, an existing implementation has many Java based resources available to be leveraged by Flex environment F and elements used on environment F, which resources are made available through legacy-related logic J. In general, such resources are from or are derived from an existing Java-based user interface system, and help Flex environment F and elements used on environment F to communicate with Java-access systems to produce GUI .","In at least some cases, environment F makes use of such Java based resources by using logic F to make a request to logic J. For example, environment F may display in GUI  a page about LUNs or disks, and the user may click on a button on such page. In such a case, the request includes an RPC made to Java logic J. If necessary to fulfill the request, Java logic J uses required logic J to retrieve information securely from one or more of systems A, B, C.","System  manages certificates in a central location, i.e., store J, for use by both environments F, J. Service J causes certificates to be retrieved from storage systems and validated if possible, causes validated certificates to be stored in store J, and when system  needs to communicate with a storage system, e.g., system C, checks store J to determine whether such storage system's certificate has already been validated.","With respect to FIPS  compliant communications with systems A, B, C, all such communications, including communications through API F, are routed from one or more of bridges F, J, F to bridge J, which communicates with service J, library J, and layer J through API J.","API F and\/or API J provide an API abstraction such that a new technology may be used at a later time. For example, if a new FIPS 140 compliant solution becomes available for Flex environment F, API F may direct FIPS 140 compliant information requests to the new solution instead of to bridge F. If such new solution allows direct FIPS 140 compliant communication between environment F and systems A, B, C, and thereby renders logic J unnecessary, Java environment J need not to be included at all in such a case.","In at least one implementation, library J is validated FIPS 140 compliant, and is, includes, or is included in RSA BSAFE\u00ae software available from RSA Security, a division of EMC Corporation of Hopkinton, Mass.","Depending on the implementation, logic J and logic J may be implemented as independent respective applets. In such an implementation, logic J may be optional. In at least some cases, logic J may be implemented as a minimal, hidden Java applet that is fraction of the size of logic J.","In at least some cases in which client system  needs to communicate with only one storage system, e.g., system A, client  does not need to include environment J, logic J, or logic J at all, and can communicate directly between environment F and system A using standard browser and\/or Flex facilities.","If client system  does not need all communications to be FIPS 140 compliant with one or more of systems A, B, C, logic J in its entirety may be used only for communications that need to be FIPS 140 compliant, and other communications may be accomplished using standard browser, Java, and\/or Flex facilities, with one or more portions of logic J as needed.","Each component described herein may be a means for performing the functions described. Each components described herein includes software, hardware, or a combination of these. The components can be implemented as software modules, hardware modules, special-purpose hardware (e.g., application specific hardware, application specific integrated circuits (ASICs), digital signal processors (DSPs), etc.), embedded controllers, hardwired circuitry, etc. Software content (e.g., data, instructions, configuration) may be provided via an article of manufacture including a machine readable medium, which provides content that represents instructions that can be executed. The content may result in a machine performing various functions\/operations described herein. A machine readable medium includes any mechanism that provides (i.e., stores and\/or transmits) information in a form accessible by a machine (e.g., computing device, electronic system, etc.), such as recordable\/non-recordable media (e.g., read only memory (ROM), random access memory (RAM), magnetic disk storage media, optical storage media, flash memory devices, etc.). The content may be directly executable (\u201cobject\u201d or \u201cexecutable\u201d form), source code, or difference code (\u201cdelta\u201d or \u201cpatch\u201d code). A machine readable medium may also include a storage or database from which content can be downloaded. A machine readable medium may also include a device or product having content stored thereon at a time of sale or delivery. Thus, delivering a device with stored content, or offering content for download over a communication medium may be understood as providing an article of manufacture with such content described herein.","While the invention has been disclosed in connection with preferred embodiments shown and described in detail, their modifications and improvements thereon will become readily apparent to those skilled in the art. Accordingly, the spirit and scope of the present invention should be limited only by the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Features and advantages of the present invention will become more apparent from the following detailed description of exemplary embodiments thereof taken in conjunction with the accompanying drawings in which:",{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIGS. 1","b":"3"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 2"}]},"DETDESC":[{},{}]}
