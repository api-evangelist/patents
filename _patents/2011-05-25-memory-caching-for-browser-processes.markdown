---
title: Memory caching for browser processes
abstract: There is disclosed a method in which a process is initiated to handle a set of information, which includes one or more resources. In the method the set of information is examined to determine whether the set of information includes a resource stored as a shareable cache element in a memory. If the determination indicates that the set of information includes a resource stored as a shareable cache element, the shareable cache element is used as the resource of the set of information.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09069876&OS=09069876&RS=09069876
owner: Nokia Corporation
number: 09069876
owner_city: Espoo
owner_country: FI
publication_date: 20110525
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["RELATED APPLICATION","TECHNICAL FIELD","BACKGROUND INFORMATION","SUMMARY","DETAILED DESCRIPTION OF SOME EXAMPLE EMBODIMENTS"],"p":["This application was originally filed as PCT Application No. PCT\/FI2011\/050475 filed May 25, 2011.","The invention relates to a method, an apparatus and a computer program product for managing memory for multiple browser processes.","Some devices capable of concurrently running web applications e.g. to display web pages (web sites) may have limited resources wherein to properly run each application without affecting the performance of other applications. Web sites are typically viewed with a browser that manages operating system (OS) process creation based on user browsing actions: typing an address of the web pages such as a uniform resource locator (URL) or a uniform resource indicator (URI), clicking a link, pressing back\/forward buttons. Concurrently open sites may be presented as tabs in a browser window. The browser may decide to run each tab in its own operating system process or to run all tabs in a single operating system process.","Creating a new process for each site may increase robustness because the OS takes care of isolating the processes. If a process crashes, it does not affect other processes. A downside may be that each new process consumes resources, especially memory. This is especially problematic for web applications, because dynamic memory allocations done by the browser engine are repeated for each process as is illustrated in Figure Y. The overhead when compared to similar application not created using web-technologies per process can be in the range of, for example, 3-7 MB, which may be a problem on desktop computers and critical on mobile devices. An alternative is to run several applications in a single process, which leads to less overhead per application. However, an application crash may result in process termination, which causes that all the other applications in the same process are also terminated.","Operating systems allow sharing of read-only code e.g. by using shared libraries. However, this mechanism only allows sharing library's read-only memory that remains static for all the processes that share it. Another mechanism that allows sharing dynamic memory is copy-on-write that can be used to share memory when forking a process. When copy-on-write is used, memory segments for a created child process are not allocated from physical memory but the child can use the pages of the parent process until either of them writes to the memory. Thus copying happens only when necessary, which saves memory.","In some embodiments running many browser processes concurrently consumes much memory which may cause some problems to the capability of the device to handle each processes efficiently enough. Each browser process may allocate even several mega bytes of memory, e.g. 3-7 MB, from a heap memory, depending on the complexity of the web site that the browser is showing. However, each browser instance may have significant areas of memory that are identical in each browser process, yet they are not shared. One problem may be to identify and allow sharing these dynamically allocated memory areas between browser process instances. When sharing is in place, another problem may be to allow effectively managing cached resources in the shared memory area.","The copy-on-write mechanism described above allows sharing memory for processes that have a parent-child relationship. Copy-on-write does not work for arbitrary processes even though those processes might be executing identical code. Copy-on-write and shared libraries are operating system level mechanisms that are not tied in any specific executable.","Web browsers may store web documents (e.g., hyper text mark-up language (HTML) pages, images) to reduce bandwidth usage, server load, and perceived lag, when the same resource is requested again. This client side cache can reside in memory or on disk. A server can set certain hypertext transfer protocol (HTTP) cache control headers that aid the client-side web browser in managing the cache. A web browser may have several types of caches and memory areas, such as HTTP cache and HTML5 application cache.","A method, apparatus and computer program product are therefore provided to enable a mechanism to share and manage memory areas between e.g. web browser processes. Management allows controlling the memory usage by prioritizing cache elements in caches of different type. Some embodiments of the mechanism may be web browser-specific. The mechanism may utilize the information about the states of browser processes at a given moment to make informed decisions about optimized shared memory behaviour.","The present invention describes a mechanism to achieve code sharing for dynamic languages. In Java environment, the just in time compilation (JIT) takes place on a method (or even code block) granularity. A just in time compilation may be implemented as a code generator that converts Java bytecode into native machine code. A hash value can be calculated from the full method signature and possibly from the code block offset. This hash value is used to uniquely identify a compiled native code object. This assumes that the method body is identical when running the method in different processes, which may not be true for dynamic languages like JavaScript. According to some example embodiments of the present invention the following mechanisms are suggested: JIT compilation for a method may be done in each process, when needed; a hash key may be calculated from the compiled native code object. It may also be checked whether this compilation result exists in cache which may mean that the compilation of this code has been done in some other process. If so, the cached result is taken into use and own compilation may be discarded thus saving memory. If not found, the compilation result is cached with the hash value as the key. This mechanism may save memory as the compilation results may be shared.","A JavaScript method is a series of statements that are interpreted to perform some repeated task. Instead of interpreting the statements each time the method is invoked, repeatedly invoked method can be dynamically compiled to native code and the native instructions cached for later use. This allows the quick version of the method to be used in subsequent invocations, but requires memory for storing the native instructions.","Sharing of data caches may be technically easier than sharing executable code, because the data is read-only. However, it should be noted that in some embodiments it may be possible to replace the read-only data with new data at any time.","According to a first aspect of the invention there is provided a method comprising:\n\n","In some embodiments the method comprises creating a cache element for the shareable cache element.","In some embodiments the method comprises including a cache element header for the shareable cache element.","In some embodiments the method comprises adding an identifier of the process into the cache element header to indicate that the process uses the shareable cache element as said resource.","In some embodiments the method comprises including at least one of the following fields in the cache element header:\n\n","In some embodiments the method comprises deactivating the process, and removing information of the process from the active references field.","In some embodiments the method comprises deactivating the process, and adding information of the process into the stored references field to indicate that the process have used the shareable cache element as said resource.","In some embodiments the method comprises examining, which cache elements are not used by any processes; and selecting one or more cache elements to be evicted from the cache elements which are not used by any processes.","In some embodiments the method comprises examining the amount of allocated memory with respect to non-allocated memory; and determining whether to select one or more cache elements to be evicted.","In some embodiments the selecting comprises examining type-specific metadata of the cache elements, examining type of the cache elements and\/or examining the size of the cache elements.","In some embodiments the set of information is a web page.","In some embodiments the type of the cache element is one of the following:\n\n","According to a second aspect of the invention there is provided an apparatus comprising at least one processor and at least one memory, said at least one memory stored with code thereon, which when executed by said at least one processor, causes an apparatus to:\n\n","In some embodiments the code, when executed by said at least one processor, causes the apparatus to create a cache element for the shareable cache element.","In some embodiments the code, when executed by said at least one processor, causes the apparatus to include a cache element header for the shareable cache element.","In some embodiments the code, when executed by said at least one processor, causes the apparatus to add an identifier of the process into the cache element header to indicate that the process uses the shareable cache element as said resource.","In some embodiments the code, when executed by said at least one processor, causes the apparatus to include at least one of the following fields in the cache element header:\n\n","In some embodiments the code, when executed by said at least one processor, causes the apparatus to deactivate the process, and remove information of the process from the active references field.","In some embodiments the code, when executed by said at least one processor, causes the apparatus to deactivate the process, and add information of the process into the stored references field to indicate that the process have used the shareable cache element as said resource.","In some embodiments the code, when executed by said at least one processor, causes the apparatus to examine, which cache elements are not used by any processes; and to select one or more cache elements to be evicted from the cache elements which are not used by any processes.","In some embodiments the code, when executed by said at least one processor, causes the apparatus to examine the amount of allocated memory with respect to non-allocated memory; and to determine whether to select one or more cache elements to be evicted.","In some embodiments the code, when executed by said at least one processor, causes the apparatus to examine type-specific metadata of the cache elements.","In some embodiments the code, when executed by said at least one processor, causes the apparatus to examine type of the cache elements.","In some embodiments the code, when executed by said at least one processor, causes the apparatus to examine the size of the cache elements.","In some embodiments the set of information is a web page.","In some embodiments the type of the cache element is one of the following:\n\n","According to a third aspect of the invention there is provided an apparatus comprising:\n\n","According to a fourth aspect of the invention there is provided an apparatus comprising:\n\n","In some embodiments the apparatus further comprises means for creating a cache element for the shareable cache element.","In some embodiments the apparatus further comprises means for including a cache element header for the shareable cache element.","In some embodiments the apparatus further comprises means for adding an identifier of the process into the cache element header to indicate that the process uses the shareable cache element as said resource.","In some embodiments the apparatus further comprises means for including at least one of the following fields in the cache element header:\n\n","In some embodiments the apparatus further comprises means for deactivating the process, and removing information of the process from the active references field.","In some embodiments the apparatus further comprises means for deactivating the process, and adding information of the process into the stored references field to indicate that the process have used the shareable cache element as said resource.","In some embodiments the apparatus further comprises means for:\n\n","In some embodiments the apparatus further comprises means for:\n\n","In some embodiments the apparatus further comprises means for examining type-specific metadata of the cache elements.","In some embodiments the apparatus further comprises means for examining type of the cache elements.","In some embodiments the apparatus further comprises means for examining the size of the cache elements.","According to a fifth aspect of the invention there is provided a computer readable storage medium stored with code thereon for use by an apparatus, which when executed by a processor, causes the apparatus to:\n\n","Some embodiments will now be described more fully hereinafter with reference to the accompanying drawings, in which some, but not all embodiments are shown. Indeed, various embodiments may be embodied in many different forms and should not be construed as limited to the embodiments set forth herein; rather, these embodiments are provided so that this disclosure will satisfy applicable legal requirements. Like reference numerals refer to like elements throughout. As used herein, the terms \u201cdata,\u201d \u201ccontent,\u201d \u201cinformation\u201d and similar terms may be used interchangeably to refer to data capable of being transmitted, received and\/or stored in accordance with embodiments. Furthermore, the terms \u201cbrowser\u201d, \u201capplication\u201d, \u201cprogram\u201d and similar terms may be used interchangeably to refer to a process capable of being executed by a processor, a microprocessor, a computer or a similar apparatus in accordance with embodiments. Thus, use of any such terms should not be taken to limit the spirit and scope of various embodiments.","Additionally, as used herein, the term \u2018circuitry\u2019 refers to (a) hardware-only circuit implementations (e.g., implementations in analog circuitry and\/or digital circuitry); (b) combinations of circuits and computer program product(s) comprising software and\/or firmware instructions stored on one or more computer readable memories that work together to cause an apparatus to perform one or more functions described herein; and (c) circuits, such as, for example, a microprocessor(s) or a portion of a microprocessor(s), that require software or firmware for operation even if the software or firmware is not physically present. This definition of \u2018circuitry\u2019 applies to all uses of this term herein, including in any claims. As a further example, as used herein, the term \u2018circuitry\u2019 also includes an implementation comprising one or more processors and\/or portion(s) thereof and accompanying software and\/or firmware. As another example, the term \u2018circuitry\u2019 as used herein also includes, for example, a baseband integrated circuit or applications processor integrated circuit for a mobile phone or a similar integrated circuit in a server, a cellular network device, other network device, and\/or other computing device.","As defined herein a \u201ccomputer-readable storage medium,\u201d which refers to a non-transitory, physical storage medium (e.g., volatile or non-volatile memory device), can be differentiated from a \u201ccomputer-readable transmission medium,\u201d which refers to an electromagnetic signal.",{"@attributes":{"id":"p-0066","num":"0124"},"figref":"FIG. 1","b":["10","10"]},"The mobile terminal  may include an antenna  (or multiple antennas) in operable communication with a transmitter  and a receiver . The mobile terminal  may further include an apparatus, such as a controller  or other processing device, which provides signals to and receives signals from the transmitter  and receiver , respectively. The signals include signaling information in accordance with the air interface standard of the applicable cellular system, and also user speech, received data and\/or user generated data. In this regard, the mobile terminal  is capable of operating with one or more air interface standards, communication protocols, modulation types, and access types. By way of illustration, the mobile terminal  is capable of operating in accordance with any of a number of first, second, third and\/or fourth-generation communication protocols or the like. For example, the mobile terminal  may be capable of operating in accordance with second-generation (2G) wireless communication protocols IS-136 (time division multiple access (TDMA)), GSM (global system for mobile communication), and IS-95 (code division multiple access (CDMA)), or with third generation (3G) wireless communication protocols, such as Universal Mobile Telecommunications System (UMTS), CDMA2000, wideband CDMA (WCDMA) and time division-synchronous CDMA (TD-SCDMA), with 3.9G wireless communication protocol such as E-UTRAN, with fourth-generation (4G) wireless communication protocols or the like. As an alternative (or additionally), the mobile terminal  may be capable of operating in accordance with non-cellular communication mechanisms. For example, the mobile terminal  may be capable of communication in a wireless local area network (WLAN) or other communication networks described below in connection with .","In some embodiments, the controller  may include circuitry desirable for implementing audio and logic functions of the mobile terminal . For example, the controller  may be comprised of a digital signal processor device, a microprocessor device, and various analog to digital converters, digital to analog converters, and other support circuits. Control and signal processing functions of the mobile terminal  are allocated between these devices according to their respective capabilities. The controller  thus may also include the functionality to convolutionally encode and interleave message and data prior to modulation and transmission. The controller  may additionally include an internal voice coder, and may include an internal data modem. Further, the controller  may include functionality to operate one or more software programs, which may be stored in memory. For example, the controller  is capable of operating a connectivity program, such as a Web browser. The connectivity program may then allow the mobile terminal  to transmit and receive Web content, such as location-based content and\/or other web page content, according to a Wireless Application Protocol (WAP), Hypertext Transfer Protocol (HTTP) and\/or the like, for example.","The mobile terminal  may also comprise a user interface including an output device such as a conventional earphone or speaker , a ringer , a microphone , a display , and a user input interface, all of which are coupled to the controller . The user input interface, which allows the mobile terminal  to receive data, may include any of a number of devices allowing the mobile terminal  to receive data, such as a keypad , a touch display (not shown) or other input device. In embodiments including the keypad , the keypad  may include the conventional numeric (0-9) and related keys (#, *), and other hard and soft keys used for operating the mobile terminal . Alternatively, the keypad  may include a conventional QWERTY keypad arrangement. The keypad  may also include various soft keys with associated functions. In addition, or alternatively, the mobile terminal  may include an interface device such as a joystick or other user input interface. The mobile terminal  may further include a battery , such as a vibrating battery pack, for powering various circuits that are required to operate the mobile terminal , as well as optionally providing mechanical vibration as a detectable output.","The mobile terminal  may further include a user identity module (UIM) . The UIM  is typically a memory device having a processor built in. The UIM  may include, for example, a subscriber identity module (SIM), a universal integrated circuit card (UICC), a universal subscriber identity module (USIM), a removable user identity module (R-UIM), and the like. The UIM  typically stores information elements related to a mobile subscriber. In addition to the UIM , the mobile terminal  may be equipped with memory. For example, the mobile terminal  may include volatile memory , such as volatile Random Access Memory (RAM) including a cache area for the temporary storage of data. The mobile terminal  may also include other non-volatile memory , which may be embedded and\/or may be removable. The memories may store any of a number of pieces of information, and data, used by the mobile terminal  to implement the functions of the mobile terminal . For example, the memories may include an identifier, such as an international mobile equipment identification (IMEI) code, capable of uniquely identifying the mobile terminal .",{"@attributes":{"id":"p-0071","num":"0129"},"figref":["FIG. 2","FIG. 2","FIG. 2"],"b":["10","50","50","52","10"]},"In an example embodiment, the network  includes a collection of various different nodes, devices or functions that are capable of communication with each other via corresponding wired and\/or wireless interfaces. As such, the illustration of  should be understood to be an example of a broad view of certain elements of the system and not an all inclusive or detailed view of the system or the network . Although not necessary, in some embodiments, the network  may be capable of supporting communication in accordance with any one or more of a number of first generation (1G), second generation (2G), 2.5G, third generation (3G), 3.5G, 3.9G, fourth generation (4G) mobile communication protocols, Long Term Evolution (LTE), and\/or the like.","One or more communication terminals such as the mobile terminal  and the other communication devices may be capable of communication with each other and\/or with the servers  via the network  and each may include an antenna or antennas for transmitting signals to and for receiving signals from a base site, which could be, for example a base station that is a part of one or more cellular or mobile networks or an access point that may be coupled to a data network, such as a local area network (LAN), a metropolitan area network (MAN), and\/or a wide area network (WAN), such as the Internet. In turn, other devices such as processing devices or elements (for example, personal computers, server computers or the like) may be coupled to the mobile terminal  via the network . By directly or indirectly connecting the mobile terminal  and other devices to the network , the mobile terminal  and the other devices may be enabled to communicate with each other and\/or the network, for example, according to numerous communication protocols including Hypertext Transfer Protocol (HTTP) and\/or the like, to thereby carry out various communication or other functions of the mobile terminal  and the other communication devices, respectively.","Furthermore, although not shown in , the mobile terminal  may communicate in accordance with, for example, radio frequency (RF), Bluetooth (BT), Infrared (IR) or any of a number of different wireline or wireless communication techniques, including LAN, wireless LAN (WLAN), Worldwide Interoperability for Microwave Access (WiMAX), WiFi, ultra-wide band (UWB), Wibree techniques and\/or the like. As such, the mobile terminal  may be enabled to communicate with the network  and other communication devices by any of numerous different access mechanisms. For example, mobile access mechanisms such as wideband code division multiple access (W-CDMA), CDMA2000, global system for mobile communications (GSM), general packet radio service (GPRS) and\/or the like may be supported as well as wireless access mechanisms such as WLAN, WiMAX, and\/or the like and fixed access mechanisms such as digital subscriber line (DSL), cable modems, Ethernet and\/or the like.",{"@attributes":{"id":"p-0075","num":"0133"},"figref":["FIG. 3","FIG. 3","FIG. 3"],"b":["10","10"]},"The apparatus may include or otherwise be in communication with a processor , a user interface , a communication interface  and a memory device . The memory device  may include, for example, one or more volatile and\/or non-volatile memories. In other words, for example, the memory device  may be an electronic storage device (for example, a computer readable storage medium) comprising gates configured to store data (for example, bits) that may be retrievable by a machine (for example, a computing device). The memory device  may be configured to store information, data, applications, instructions or the like for enabling the apparatus to carry out various functions in accordance with example embodiments. For example, the memory device  could be configured to buffer input data for processing by the processor . Additionally or alternatively, the memory device  could be configured to store instructions for execution by the processor . The apparatus may also include a cache manager  that may manage the memory usage of the apparatus. The cache manager  may be implemented as a program code of the processor  or it may be a separate processor, a controller or other applicable element.","The processor  may be embodied in a number of different ways. For example, the processor  may be embodied as one or more of various processing means such as a microprocessor, a controller, a digital signal processor (DSP), a processing device with or without an accompanying DSP, or various other processing devices including integrated circuits such as, for example, an ASIC (application specific integrated circuit), an FPGA (field programmable gate array), a microcontroller unit (MCU), a hardware accelerator, a special-purpose computer chip, processing circuitry, or the like. In an example embodiment, the processor  may be configured to execute instructions stored in the memory device  or otherwise accessible to the processor . Alternatively or additionally, the processor  may be configured to execute hard coded functionality. As such, whether configured by hardware or software methods, or by a combination thereof, the processor  may represent an entity (for example, physically embodied in circuitry) capable of performing operations according to embodiments while configured accordingly. Thus, for example, when the processor  is embodied as an ASIC, FPGA or the like, the processor  may be specifically configured hardware for conducting the operations described herein. Alternatively, as another example, when the processor  is embodied as an executor of software instructions, the instructions may specifically configure the processor  to perform the algorithms and\/or operations described herein when the instructions are executed. However, in some cases, the processor  may be a processor of a specific device (for example, the mobile terminal  or other communication device) adapted for employing various embodiments by further configuration of the processor  by instructions for performing the algorithms and\/or operations described herein. The processor  may include, among other things, a clock, an arithmetic logic unit (ALU) and logic gates configured to support operation of the processor .","Meanwhile, the communication interface  may be any means such as a device or circuitry embodied in either hardware, software, or a combination of hardware and software that is configured to receive and\/or transmit data from\/to a network and\/or any other device or module in communication with the apparatus. In this regard, the communication interface  may include, for example, an antenna (or multiple antennas) and supporting hardware and\/or software for enabling communications with a wireless communication network. In some environments, the communication interface  may alternatively or also support wired communication. As such, for example, the communication interface  may include a communication modem and\/or other hardware\/software for supporting communication via cable, digital subscriber line (DSL), universal serial bus (USB) or other mechanisms.","The user interface  may be in communication with the processor  to receive an indication of a user input at the user interface  and\/or to provide an audible, visual, mechanical or other output to the user. As such, the user interface  may include, for example, a keyboard, a mouse, a joystick, a display, a touch screen, soft keys, a microphone, a speaker, or other input\/output mechanisms. In an example embodiment in which the apparatus is embodied as a server or some other network devices, the user interface  may be limited, or eliminated. However, in an embodiment in which the apparatus is embodied as a communication device (for example, the mobile terminal ), the user interface  may include, among other devices or elements, any or all of a speaker, a microphone, a display, and a keyboard or the like. In this regard, for example, the processor  may comprise user interface circuitry configured to control at least some functions of one or more elements of the user interface, such as, for example, a speaker, ringer, microphone, display, and\/or the like. The processor  and\/or user interface circuitry comprising the processor  may be configured to control one or more functions of one or more elements of the user interface through computer program instructions (e.g., software and\/or firmware) stored on a memory accessible to the processor  (for example, memory device , and\/or the like).","In the following some example technical implementations of the present invention are described based on a web page rendering engine called WebKit. However, the invention is not limited to such browsers but it can also be implemented on other web browsers as well.","When the user starts to browse web pages, the user may use the user interface  of the device  to instruct the operating system to start the web browser  (block  in ). The web browser  initiates (block ) and provides information to the operating system to display a browser window, for example. The operating system also reserves some memory for the web browser so that the web browser may store data and code into the memory. The user can then enter an address of a web page or select from previously stored bookmarks one which the user wishes to view. In this context the term bookmark means information of an address of a web page which has been stored into the memory of the device so that that web page can be easily accessed without typing the whole address of the web page. Bookmarks may have been stored as a parameter in a data file accessible by the web browser. The address may be e.g. in a form of a uniform resource locator (URL).","When the address of the desired web page has been entered to the web browser, the web browser uses the address to obtain the addressed web page. The web page may not be stored in the memory of the device wherein the web browser may need to communicate with the network  accordingly. The communication may need co-operation between the web browser and the operating system, or the web browser may have direct access to the low level software (e.g. device drives) which control the communication interface  of the device.","If the searched web page exists somewhere in the network , for example in the server , the web page may be communicated from the network  to the device  so that the web browser  can execute the code of the web page to show the contents of it. Usually, web pages are constructed using the so called Hyper Text Mark-Up Language (HTML). Actually, information to reconstruct a web page by a user's device may have been stored into one or more files. Hence, the web browser downloads the files from the network  and reads the contents of the files, interprets the commands stored in the files, and builds up the web page on the display of the device, accordingly.","The web browser may be able to handle more than one web page at a time in different windows or tabs. In other words, the web browser may have a multiple of open sites (web pages) at a time. The web browser may run each tab in its own operating system process or it may run all tabs in a single operating system process. In the following it is assumed that the web browser runs each tab in its own process. This is also illustrated in  in which the block illustrates a first browser process and the block illustrates a second browser process. There may also be more than two browser processes active at the same time.","Now, some details on how some embodiments of the present invention work when a web page is build up will be explained.","Internally, a web browser, such as WebKit, may have two main components: a JavaScript engine  and a rendering engine . Both of these components may have distinct memory usage patterns. The JavaScript engine  is a specialized computer software which interprets and executes JavaScript, for example. The rendering engine  is a software component that takes marked up content (such as HTML, extensible mark-up language (XML), image files, etc.) and formatting information (such as cascading style sheets (CSS), extensible stylesheet language (XSL), etc.) and displays the formatted content on a display of a device. The JavaScript engine  may allocate memory for storage for parsed JavaScript code , and memory for storage for just in time (JIT)\u2014compiled JavaScript code . The JavaScript engine  may allocate memory for a heap  and a stack  for executing JavaScript code. Out of these, storage areas for parsed and just in time compiled JavaScript code may be good candidates for sharing memory. The heap and the stack may be so dynamic that sharing those may not be practical. However, sharing of the heap and\/or the stack are not excluded from the scope of the present invention. Sharing of dynamically generated executable code may have some prerequisites, such as making the code relocatable and ensuring that the code is not written to while executing it. Sharing of the executable code is expected to be achieved also for more dynamic languages, such as JavaScript.","The rendering engine  loads web resources and shows web pages to the user. The rendering engine  may allocate memory for a HTTP file cache  for web resources, a HTTP memory cache  for web resources, an HTML5 application cache , memory  for decoded images, and memory  for a document object model (DOM) tree. The document object model is an application programming interface (API) for valid HTML and well-formed XML documents. It defines the logical structure of documents and the way a document is accessed and manipulated.","In addition, many web browsers have a so called page cache , which is effectively a memory cache for visited pages i.e. web pages shown by the web browser. The page cache allows fast back-forward navigation by \u201cpausing\u201d a page and storing as much as possible of the contents of the page to be able to show the page quickly, if the user browses back to the same page. Usually, the page cache may store all resources related to the main HTML page whereas HTTP caches may store each resource individually. HTTP caches can be utilized by two or more distinct pages if they have common resources that are found from the HTTP cache. In addition, using page cache is not necessarily possible for all pages, because it may be impossible to reliably determine the state of a page. If a page cache is shared between processes, the state of the page is also shared, which means that some security enforcements may need to be taken into consideration. For example, it can be verified that only processes with the same permissions are able to share a page cache.","Some embodiments of the present invention allow sharing of resources in various caches between processes using a shared memory . This principle is depicted in . The invention can be implemented e.g. by a cache manager  () that may manage the total memory usage of the system by centralizing the cache management decisions for all or for some of the cache types. The cache manager  manages both volatile and non-volatile memory usage by storing and removing cached resources to and from shared memory areas . Some examples of various cache types and their features are listed in Table 1.",{"@attributes":{"id":"p-0090","num":"0148"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 1"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Features of various cache types."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"49pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Cache",{},{}]},{"entry":[{},"storage"]},{"entry":[{},"memory","Commonly-used eviction","Resource"]},{"entry":["Cache type","type","policy","origin"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["Parsed JavaScript","volatile","Reference-counting LRU,","Browser"]},{"entry":["code cache",{},"cache size","generated"]},{"entry":["JIT-compiled","volatile","Reference-counting LRU,","Browser"]},{"entry":["JavaScript code",{},"cache size","generated"]},{"entry":"cache"},{"entry":["HTTP file cache","non-","HTTP cache control","Loaded"]},{"entry":[{},"volatile","headers, LRU, cache size","from network"]},{"entry":["HTTP memory","volatile","HTTP cache control","Loaded"]},{"entry":["cache",{},"headers, LRU, cache size","from network"]},{"entry":["HTML5","non-","Eviction only by user action","Loaded"]},{"entry":["application","volatile",{},"from network"]},{"entry":"cache"},{"entry":["Decoded images","volatile","Reference-counting LRU,","Browser"]},{"entry":[{},{},"cache size","generated"]},{"entry":["DOM tree","volatile","Reference-counting LRU,","Browser"]},{"entry":[{},{},"cache size","generated"]},{"entry":["Page cache","volatile","Reference-counting LRU,","Loaded"]},{"entry":[{},{},"cache size","from network"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},"Commonly-used eviction policy is the policy that is currently implemented inside browsers. When implementing the invention, these eviction policies may be modified to suit centralized cache management with the shared memory.","The resource origin describes whether resources of a certain cache type are loaded from the network or generated by the browser. Resources generated by the browser are typically derived from the resources loaded from the network. It may be guaranteed that a browser-generated resource is the same, if derived from the same network resource.","The cache manager operation is shown in . In an example implementation separate cache policies exist for volatile (e.g. RAM) and non-volatile (e.g. disk\/flash) memories. The cache policy for volatile memory is illustrated with a reference numeral  and the cache policy for non-volatile memory is illustrated with a reference numeral  in . In some example embodiments the maximum amount of used memory can be set for both.","The elements in the shared cache may have the fields shown in Table 2.",{"@attributes":{"id":"p-0095","num":"0153"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 2"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Cache element fields."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Cache",{}]},{"entry":"element"},{"entry":["field","Meaning"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Key","Cache element is identified using the key. The key may be the"]},{"entry":[{},"URI from where the cache element was loaded from, which"]},{"entry":[{},"may be different from the URI of the main page. The key may"]},{"entry":[{},"also include a hash value calculated from the last modified"]},{"entry":[{},"date or actual data of the cache element."]},{"entry":["Type","The type of cache element (e.g. HTTP cache element,"]},{"entry":[{},"HTML5 app cache element, page cache element, etc.)"]},{"entry":["Type-","Possible cache type specific information that affects caching"]},{"entry":["specific","decisions. E.g. HTTP cache control headers for HTTP cache"]},{"entry":["metadata","element."]},{"entry":["Size","The amount of memory that the cache element consumes"]},{"entry":[{},"when stored."]},{"entry":["Update","When the cache element was created\/last updated."]},{"entry":"time"},{"entry":["Use time","When the cache element was last used."]},{"entry":["Active","List of process ids of the processes that are currently using the"]},{"entry":["references","cache element."]},{"entry":["Stored","List of process ids of the processes that have previously used"]},{"entry":["references","the cache element and may benefit from keeping the cache"]},{"entry":[{},"element in the cache."]},{"entry":["Data","Actual data of the cache element."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"The cache element fields Key, Type, Type-specific metadata, Size, Update time, Use time, Active references and Stored references may also be called as a cache element header to distinguish these fields from the actual data of the cache element.","The cache manager  may operate based on the following rules. An active cache element means that a process is currently using the cache element (i.e. the element has at least one active reference). A stored cache element means that the cache element is stored in the cache, but no process is currently using it. Only stored cache elements can be evicted but active ones cannot. If a cache element has type-specific metadata, rules in this meta-data may be taken into consideration and may override common rules. For example, rules may prevent eviction. When a cache element is evicted, the memory that stored the cache element can be freed. When a cache element has been evicted and a process requires this cache element, the process needs to reload, redecode and\/or reparse the resource and add a new cache element.","The cache manager eviction logic may depend on the total memory situation of the system. For example, the cache manager  may examine the amount of allocated memory with respect to non-allocated memory to determine whether there is a low-memory situation or a normal memory situation. There may be one or more thresholds which the cache manager  may compare with the ratio of the amount of allocated memory to the amount of non-allocated memory to determine the memory situation. In an example implementation the eviction logic for volatile caches may be as follows. Cache elements that can be freed are identified based on type-specific metadata and active references. In a low-memory situation cache elements may be evicted based on priority. The priorities may depend on, for example, the size, the number of stored references, the use time, the update time of the cached element. In normal memory situation cache elements may be evicted based on a different priority such as the number of stored references, the use time, the update time, the size.","Following the above eviction logic may result most cache elements to be handled in a coherent way regardless of their type. This may allow more efficient system-level cache management than silo-based approach. It is also possible to e.g. evict all cache elements of a specific type, if the cache elements of that type are seen less important. For example, it may be better to evict decoded images and DOM parsing results if the device is in offline mode since it may be possible to recreate those without a network connection.","The eviction policy may also depend on the context in which the device is operating. One possible context mentioned above is the offline\/online modes of the device. Another context may depend on if the device is attached with or connected to another device or apparatus, if a memory card has been installed to the device, etc.","When a web browser  downloads a web page and the renderer engine  renders the page on the display, the renderer engine  informs the cache manager  the need to allocate memory for the web page, e.g. for the HTTP file cache , the HTTP memory cache , the HTML5 application cache , the page cache , memory  for decoded images, and memory  for the document object model (DOM) tree. In a page cache situation the cache manager  may calculate a hash value or another id value for each cache area and examine the shared memory  to determine whether the similar cache area already exists which can be shared with the new web process or whether a new cache area needs to be created. The cache manager  may also examine whether the web page refers to an object which has already been stored in a cache area (blocks -). A cache area may include several cache elements which may be shareable. The shareable cache elements may be methods inside a HTML code, pictures, and other resources. Some of these cache elements may be identified by their load addresses. The load address may be a URL, URI or another kind of a link to the object which has been loaded from the indicated address and stored to the cache area. For example, different web pages may have a link to the same object, such as a HTTP file, a picture, etc. Hence, the link on both web pages can be the same wherein the cache manager  may compare the load addresses to determine whether for each cache area and examine the shared memory  to determine whether similar cache area already exists which can be shared with the new web process (block ) or whether a new cache area needs to be created (block ). As an example a cache element can be a single picture at the address http:\/\/www.example.com\/example.gif that can be referenced by many pages, e.g. web pages at addresses http:\/\/www.example.com\/page1.html and http:\/\/www.example.com\/page2.html. It should be noted here that the above mentioned addresses are just non-limiting examples and may not represent real web pages or pictures.","The determination may be based on, for example, a comparison between the calculated id value and the value of the key element field of an existing cache area or between the address of the object and the load addresses in the cache area. If a shareable cache area exists the cache element fields of the shareable cache area are updated accordingly. For example, the active references field is added with indication of the new process (process id). Also the use time may be updated. If no shareable cache area exists a new cache area is created and the cache element fields, for example the fields described in Table 2, are filled on the basis of the new cache area.","Correspondingly, the JavaScript engine  interprets the instructions of the downloaded page and informs the cache manager  the need to allocate memory for the interpreted code of the web page, e.g. memory for parsed JavaScript code , just in time compiled JavaScript code , heap  and stack . The cache manager  may calculate a hash value or another id value for each interpreted code element and examine the shared memory  to determine whether the similar interpreted code element already exists which can be shared with the new web process or whether a new interpreted code element needs to be created. If a shareable interpreted code element exists the element fields of the interpreted code element are updated accordingly. For example, the active references field is added with indication of the new process (process id). Also the use time may be updated. If no shareable interpreted code element exists a new interpreted code element is created and the element fields, for example the fields described in Table 2, are filled on the basis of the new interpreted code element.",{"@attributes":{"id":"p-0104","num":"0162"},"figref":["FIG. 7","FIG. 7","FIG. 7","FIG. 7","FIG. 7","FIG. 7"],"i":["b ","a","a","a","a","a. "],"b":["100","710","100","100","711","712","706","713","713","100","714","715","706","716","713","717","100","100","718","706","720","720","100","100","721","722","706","707"]},"There are optional approaches to save the resource (block ), depending on the type. For individual cache elements that are stored to HTTP file\/memory cache, storing may be done after the network request is completed and the file have been received. For cache elements that are generated by the browser, storing may be done after the browser has finished generating the resource which may happen sometime after the resource has been loaded. For HTML5 app cache, storing may be done after the dedicated cache update process, for example when a page is loaded. For the page cache, the storing may be done when the user navigates away from a page.",{"@attributes":{"id":"p-0106","num":"0164"},"figref":"FIG. 8","b":["800","100"]},"When the browser process terminates the cache manager  examines which elements were used by the terminated browser process. The cache manager  examines the element fields of such elements to determine whether such element can be evicted or not. For example, the cache manager  may examine identification information stored in the active references field to determine if that field contains also other ids than the id of the terminated process (block ). If so, the element may not be evicted unless there is an overriding rule which makes the cache manager  to evict the element (block ). This situation may occur, for example, when the memory of the device is almost totally allocated and some parts of the memory is needed by another process. In this kind of situation the cache manager  may examine e.g. the use time, the type, the size or other information of the element fields to determine (block ) which element (cache area, code element, etc.) could be evicted (block ) and the memory in which the element was stored could be freed to other processes.","If the examination of the active references field reveals that this element was only used by the terminated process, the cache manager  may decide to evict the element and also delete the element fields of the element (block ).","It should be noted here that the eviction operation need not mean that the evicted area of the memory is changed or modified but it may be sufficient to provide an indication that this memory area is free so that other processes may use it when needed. For example, the cache manager , a memory manager (not shown), the processor or some other unit may be able to use a parameter array in which information of allocation situation of blocks of the memory are indicated. The memory may have been divided into blocks of a certain size wherein the allocation situation of each block may be indicated by one bit, for example. The block size may be, for example, 64 bytes, 256 bytes, 512 bytes, 1024 bytes or some size. The size is usually a power of two.","In some implementations the device  may store the contents of volatile caches when the device is shut down. Hence, the stored data can be read back to the volatile memory when the device  is switched on again.","The above described resource-level sharing may have the advantage that a cached resource can be shared between processes even though processes are showing unrelated pages that happen to load some common resource.","Moreover, although the foregoing descriptions and the associated drawings describe example embodiments in the context of certain example combinations of elements and\/or functions, it should be appreciated that different combinations of elements and\/or functions may be provided by alternative embodiments without departing from the scope of the appended claims. In this regard, for example, different combinations of elements and\/or functions than those explicitly described above are also contemplated as may be set forth in some of the appended claims. Although specific terms are employed herein, they are used in a generic and descriptive sense only and not for purposes of limitation."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF THE DRAWINGS","p":["In the following the present invention will be disclosed in more detail with reference to the accompanying drawings, which are not necessarily drawn to scale, and wherein:",{"@attributes":{"id":"p-0055","num":"0113"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0056","num":"0114"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0057","num":"0115"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0058","num":"0116"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0059","num":"0117"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0060","num":"0118"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0061","num":"0119"},"figref":"FIGS. 7","i":["a ","b "],"b":"7"},{"@attributes":{"id":"p-0062","num":"0120"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
