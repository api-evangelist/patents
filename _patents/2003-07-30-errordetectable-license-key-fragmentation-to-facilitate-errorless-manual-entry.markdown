---
title: Error-detectable license key fragmentation to facilitate errorless manual entry
abstract: A key fragment generator accepts a key string, such as from a key string generator, and produces a plurality of key fragments that can be entered by a human with a lower likelihood of error than if the human attempted to enter the original key string. A key defragmenter accepts a plurality of entered key fragments, reconstitutes the original key string from the entered key fragments and, optionally, provides the reconstituted key string to a software package or other license manager. The key fragment generator can produce “friendly” key fragments that are easier for humans to read and enter than the arbitrary character strings that characterize typical key strings. The key fragment generator can produce “error-detectable” key fragments. If an error-detectable key fragment is entered incorrectly, the key defragmenter can generate an error message and permit a user to enter the key fragment again. The key fragment generator can produce “error-correctable” key fragments. If an error-correctable key fragment is entered incorrectly, the key defragmenter can generate an error message that describes the nature of the error or that draws a user's attention to a portion of the key fragment that the user entered incorrectly. The error message can include a “hint” related to one or more confusable characters that were entered incorrectly.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07406600&OS=07406600&RS=07406600
owner: Hewlett-Packard Development Company, L.P.
number: 07406600
owner_city: Houston
owner_country: US
publication_date: 20030730
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["1. Field of the Invention","The present invention relates generally to processing key strings used to license software or hardware and, more particularly, to segmenting such license keys to facilitate errorless manual entry of such key strings.","2. Related Art","Many software packages such as operating systems and application programs are licensed by suppliers to end-users for use on one or more licensed computers or by one or more users. To prevent unlicensed use, a typical licensed software package is designed to require a potential user to enter a valid license key during installation or activation of the software package. Without entry of the valid license key, the software package will either not properly install or not operate.","A typical license key comprises a relatively long string of characters, often more than 20 characters in length. Suppliers typically use automated systems to generate a unique key string for each unit of each software package they produce. The unique key string is usually printed on a piece of paper, which is then included with each unit of the corresponding software package. Other times, the user obtains the key string via an e-commerce web site. To install or activate the software package, the user must read and correctly enter the key string using a keyboard.","Key strings often include encrypted information that software packages use to verify the validity of the entered key strings. Consequently, the key strings appear to contain random or nonsense characters from the perspective of the user. Many users have difficulty correctly entering such long, nonsensical strings of characters.","In one aspect of the invention, a method for using a plurality of error-detectable key fragments of an original license key string is disclosed. The method comprises: fragmenting the original key string into a plurality of key fragments; and calculating, for each key fragment, corresponding check data; and combining each key fragment with its corresponding check data to form said error-detectable key fragments.","In another aspect of the invention, a method of segmenting a license key string into a plurality of error-correctable key fragments is disclosed. The method comprises: fragmenting the key string into a plurality of key fragments; and calculating, for each key fragment, corresponding error-correction data; and combining each key fragment with said corresponding error-correction data to for a plurality of error-correctable key fragments. The error-correction data permits the identification of errors in said error-correctable key fragments.","In yet another aspect of the invention, an article of manufacture is disclosed. The article of manufacture comprises a computer-readable medium storing computer-executable instructions capable of segmenting a key string into a plurality of error-detectable key fragments, comprising: fragmentating the original key string into a plurality of key fragments; and calculating, for each key fragment, corresponding check data; and combining each key fragment with its corresponding check data to form said error-detectable key fragments.","In a further aspect of the invention, an article of manufacture is disclosed. The article of manufacture comprises: a computer-readable medium storing computer-executable instructions capable of segmenting a key string into a plurality of error-detectable key fragments, comprising: fragmenting the key string into a plurality of key fragments; calculating, for each key fragment, corresponding error-correction data; and combining each key fragment with said corresponding error-correction data to for a plurality of error-correctable key fragments, wherein said error-correction data permits the identification of errors in said error-correctable key fragments.","In yet a further aspect of the invention, a key fragment generator for segmenting a key string into a plurality of error-detectable key fragments is disclosed. The key fragment generator comprises: a key fragmenter adapted to input the key string and produce key fragments; a check data generator configured to calculate check data corresponding to the key fragments, wherein the check data can be subsequently used to detect if the corresponding key fragment is entered incorrectly; and a combiner configured to combine the key fragments and the corresponding check data to provide the plurality of error-detectable key fragments.","In another aspect of the invention, a key defragmenter for combining a plurality of entered error-detectable key fragments into a reconstituted key string is disclosed. Each error-detectable key fragment comprises key data and check data. The claimed key defragmenter comprises: an error checker adapted to use the check data of at least one of the entered error-detectable key fragments to detect if the entered error-detectable key fragment is entered incorrectly; and an accumulator adapted to defragment the key data of the entered error-detectable key fragments into the reconstituted key string and provide the reconstituted key string.","In yet another aspect of the invention, a key defragmenter for combining a plurality of entered friendly key fragments into a reconstituted key string is disclosed. The key defragmenter comprises: a friendly fragment converter adapted to ascertain a key fragment, from which the entered friendly key fragment was calculated; and an accumulator adapted to defragment the ascertained key fragments into the reconstituted key string and to provide externally said reconstituted key string.","In a further aspect of the invention, a key fragment generator for segmenting a key string into a plurality of error-correctable key fragments is disclosed. The key fragment generator comprises a key fragmenter configured to fragment the original key string into a plurality of key fragments; an error correction module configured to calculate error correction data corresponding to each key fragment, wherein error correction data can subsequently be used to determine the accuracy of the corresponding key data; and a combiner configured to combine each key fragments with its corresponding error correction data to provide the plurality of error-correctable key fragments.","In yet a further aspect of the invention, a licensing key defragmenter for combining a plurality of entered error-correctable key fragments into a reconstituted key string, each error-correctable key fragment comprising key data and error correction data, is disclosed. The key defragmenter comprises: an error correction module configured to use the error correction data to identify a portion of the entered error-correctable key fragment that was entered incorrectly; and an accumulator adapted to defragment the key data of the entered error-detectable key fragments into the reconstituted key string and to provide the reconstituted key string.","In yet a further aspect of the invention, a key fragment error detector for detecting an error in an entered licensing key fragment. The licensing key fragment comprising key data and error correction data, and the error detector comprises: an error correction module configured to utilize the error correction data to determine whether the entered licensing key fragment has been correctly entered; and an error message generator configured to provide to a user interface a message that identifies a portion of the entered key fragment that was entered incorrectly.","The present invention is directed to methods and systems for segmenting a license key string to produce a plurality of key string fragments (hereinafter \u201ckey fragments\u201d) that can be entered by a human with a lower likelihood of error than if a human attempted to enter the original key string. The key string fragments are error-detectable; that is, each key fragment includes error detection data that enables the present invention to verify accurate manual entry by the user. Preferably, the key string fragments are also \u201cfriendly.\u201d Friendly key fragments comprise words or other character strings that are easier for humans to read, recall and enter into a user interface, as compared with the arbitrary character strings comprising conventional license key strings. In addition to fragmentation, the present invention also performs defragmentation of received license key fragments. Here, the invention accepts a plurality of entered key fragments, reconstitutes the original key string from the entered key fragments and, optionally, provides the reconstituted\/original key string to hardware or to a software package. Preferably, the key fragments are each shorter than the original key string. Some embodiments permit a user to enter each such key fragment separately, verifying the accuracy of each such key string fragment as it is entered by the user. Preferably, such embodiments also identify incorrectly-entered key fragments, enabling the user to reenter such improperly entered key fragment(s). Optionally, the present invention generates a message describing the nature of the error or identifying a portion of the key fragment that the user entered incorrectly. Such an approach eliminates the requirement that a user correctly enter an entire license key string at one time and without error.",{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 1","FIG. 1"],"b":["100","102","116","118","102","100","104","102","104","100","104","100","104","100","104","102","100","100","104"]},"Error-detectable key fragment generator  includes a fragmenter , a check data generator , a combiner , a friendly key generator  and a dictionary . Error-detectable key fragment generator  is shown producing two human-readable outputs: a plurality of error-detectable key fragments  and a plurality of friendly error-detectable key fragments , although embodiments can produce one or both of these outputs. These outputs can be provided in printed form, as shown at  and  of , or on a display device or on a computer-readable medium (not shown). The components of key fragment generator  as well as error-detectable key fragments  and  are described in detail below with reference to .",{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 3","FIG. 4"],"b":["100","102","116","118","400"]},"At block , key fragment generator  () receives original key string  from, in this example, key generator . In the fragmentation example illustrated in , original key string  is provided as an exemplary original key string . Original key string  includes a series of characters described below.","At block , a first string of characters is separated from original key string  to form the first of a plurality of key fragments . As shown by dash lines A-N in , original key string  is segmented into shorter substrings A, B, . . . N. Key fragments A, B, . . . N are produced from substrings A, B, . . . N, respectively, as shown in . Preferably, the length of the segmented strings ( in ) is selected such that the corresponding key fragment  ( in the example of ) is short enough for a human to remember. In one embodiment, key fragments  are shorter than 11 characters in length. In an alternative embodiment, key fragments  are seven characters or less in length. Other lengths suitable for the particular application and user profile can also be implemented.","In the example key fragmentation illustrated in , key fragments  are segmented from original key string  in contiguous portions. As one of ordinary skill in the art would appreciate, however, original key string  can be fragmented in other ways. For example, every fifth character of a 40-character original key string  can be extracted, and these characters can be combined to form one of five, eight-character key fragments . Further, one of ordinary skill in the art will appreciate that key fragments  need not all be the same length.","At block , check data generator  () calculates check data  for each key fragment . For example, check data  can be a checksum or CRC. Other types of check data are utilized in alternative embodiments. Check data  can be used later to verify that key fragments  have been entered without error. This is described in further detail below.","At block , combiner  () combines key fragment  and its corresponding check data  to produce error-detectable key fragment . In one embodiment, check data  is appended to key fragment  to form error-detectable key fragment . In alternative embodiments, check data  can appear elsewhere in error-detectable key fragment . Furthermore, combiner  need not simply concatenate key fragment  and check data . For example, combiner  can combine key fragment  and check data  using any applicable mathematical, mapping or other algorithm.","Referring to the example illustrated in , check data generator  receives key fragments A-N and for each such key fragment , generates check data A-N. In this illustrative example, combiner  concatenate key fragments  and corresponding check data  to form error-detectable key fragments . For example, for key fragment A \u201cAkdfe29u,\u201d check data generator  calculates check data A of \u201cEE.\u201d Combiner  appends check data A to the end of key fragment A to form error-detectable key fragment A of \u201cAkdfe29uEE.\u201d","Optionally, at block , friendly key generator  () calculates or retrieves from dictionary  a friendly key fragment  corresponding to each error-detectable key fragment  generated by combiner . In the embodiment shown in , friendly key generator  accesses a dictionary  containing, for example, a plurality of words which serve as friendly key fragments . In one embodiment, friendly key generator  uses a binary value of error-detectable key fragment  as an index into dictionary  to retrieve friendly error-detectable key fragment . In this embodiment, dictionary  contains a plurality of word phrases. Alternatively, binary values of portions of error-detectable key fragment  can each be used as indexes into dictionary  to look up portions of friendly error-detectable key fragment . The retrieved portion can then be combined to form friendly error-detectable key fragment . For example, the binary value of each character or character-pair of error-detectable key fragment  can be used as an index into dictionary .","In an alternative embodiment, friendly key generator  can look up or generate multiple substrings for each friendly error-detectable key fragment , and combine the substrings to create friendly error-detectable key fragment . For example, friendly key generator  may generate or look-up one or more partial friendly key fragments. The one or more partial friendly key fragments may be based on, or generated from, key fragments  or check data . In these embodiments, the one or more partial friendly key fragments may be utilized along with error-detectable key fragments  to form friendly error-detectable key fragments . Alternatively, friendly key generator  can generate friendly error-detectable key fragments  using an algorithm, rather than dictionary . Regardless of whether friendly error-detectable key fragments  are retrieved or generated, the process should be reversible as described below. In the example illustrated in , exemplary friendly error-detectable key fragments  are shown as key fragments . The friendly key fragments A generated, for example, for error-detectable key fragment A \u201cAkdfE294EE\u201d are \u201clandfall,\u201d \u201cblue,\u201d and \u201cred.\u201d It is anticipated that such key fragments A can be more accurately entered by a user as compared with key fragment A \u201cAkdfE294EE.\u201d","In one alternative embodiment, friendly key generator  can generate friendly error-detectable key fragments  based on key fragments  rather than error-detectable key fragments . This approach is depicted in  by dashed line . In another alternative embodiment, key fragments  can be output without further processing by combiner , check data generator  or friendly key generator . Such an embodiment is depicted in  by dashed line . However, it should be understood that such embodiments are less preferred than other embodiments because they forego the error detectability feature described above.","At block , key fragment generator  outputs error-detectable key fragment  and\/or the friendly error-detectable key fragment . At block , key fragment generator  ascertains whether there are more key fragments  to process; that is, whether the entire original key string  has been processed. If there are more key fragments  to process, key fragment generator  control returns to block  and the above steps are repeated. Otherwise, fragmentation process  completes at block . Upon completing its operations at block , key fragment generator  has provided a plurality of error-detectable key fragments  or a plurality of friendly error-detectable key fragments  in human-readable form.",{"@attributes":{"id":"p-0042","num":"0041"},"figref":["FIG. 2","FIG. 2","FIGS. 3 and 5"],"b":["200","200","202","200","201","202","201","116","118","200","208","210","212","214","200","204","102","201","204","206","200","204"]},{"@attributes":{"id":"p-0043","num":"0042"},"figref":["FIGS. 1 and 3","FIG. 5"],"b":["200","201","204","500"]},"At block , error-detectable key defragmenter  receives a key fragment . Key defragmenter  receives key fragment  through a user interface  such as any of those noted above. Inputted key fragment  is determined, at block , to be either an error-detectable key fragment  or a friendly error-detectable key fragment . If it is the latter, control passes to block ; if it is the former, control passes to block . In , inputted key fragment  is shown as being either error-detectable key fragment  provided to error checker  (described below) or friendly error-detectable key fragment  provided to friendly fragment converter  (also described below). In the example shown in , inputted key string  could be either the exemplary error-detectable key fragments  or the exemplary friendly error-detectable key fragments .","At block , friendly fragment converter  converts inputted friendly error-detectable key fragment  into an error-detectable key fragment . In one embodiment, converter  references dictionary , essentially reversing the process performed by friendly key generator  () described above. Alternatively, friendly fragment converter  can use an appropriate algorithm to reverse the process friendly key generator  used to calculate friendly key fragments . In the example shown in , friendly error-detectable key fragments A of \u201clandfall,\u201d \u201cblue,\u201d and \u201cred\u201d are converted by friendly fragment converter  to key fragment A of \u201cAkdfE29uEE.\u201d","In certain embodiments, as noted above, friendly error-detectable key fragments  may be formed by friendly key generator  based on one or more partial friendly key fragments and error-detectable key fragments  to form friendly error-detectable key fragments . In these embodiments, friendly fragment converter  reverses the process performed by friendly key generator  by extracting error-detectable key fragments  from the friendly error-correctable key fragments .","At block , error checker  uses check data  in error-detectable key fragment  to ascertain whether the inputted key fragment  was entered correctly. As shown in , regardless of whether inputted key fragment  is an error-detectable key fragment  or a friendly error-detectable key fragment , error check  receives an error-detectable key fragment .","In the example shown in , error checker  uses check data A of \u201cEE\u201d extracted from error-detectable key fragments A of\u201cAkdfE29uEE\u201d to determine whether the remaining characters were entered correctly as key fragment A of \u201cAkdfE29u.\u201d If key fragment  was not entered correctly, an error message  is output at block  and control passes back to block  to give the user an opportunity to enter the key fragment correctly.","If the key fragment was entered correctly, then at block  accumulator  to extracts key fragment  from error-detectable key fragment  and provides it to accumulator . In the example shown in , key fragment A of \u201cAkdfE29u\u201d is extracted from error-detectable key fragments A of \u201cAkdfE29uEE\u201d and provided to accumulator .","At block , accumulator  combines key fragment  with any previously extracted key fragment . Eventually, all extracted key fragments  will be combined to form reconstituted key string . In the example illustrated in , key fragments A (\u201cAkdfE29u\u201d), B (\u201c7BadsKKf\u201d), etc., are combined to form original key string  shown in .","Alternatively, as shown by dashed line  (), if friendly key generator  generated friendly error-detectable key fragments  based on key fragments  (as described above), rather than based on error-detectable key fragments , then friendly fragment converter  converts the inputted key fragments  and passes them directly to accumulator , bypassing error checker . Similarly, in another alternative embodiment, as shown by dashed line  (), if key fragments  were output by generator  without further processing (as described above), then error-detectable key defragmenter  passes inputted key fragments  directly to accumulator  without further processing.","At block , it is determined whether more key fragments  are to be processed. If so, control returns to block  and the above steps are repeated. Otherwise, control passes to block , where key defragmenter  outputs reconstituted key string  to, for example, a software package . In one embodiment, key defragmenter  simulates user inputs to software package . Alternatively, software package  can include an application programming interface (API) for the purpose of accepting reconstituted key string . Summarizing, key defragmenter  combines a plurality of entered error-detectable key fragments  or a plurality of friendly error-detectable key fragments  into a reconstituted key string .","As noted, in certain embodiments of the present invention an error message is generated when an error-correctable key fragment is entered incorrectly. In such embodiments, the error message may describe the nature of the error, draw the user's attention to a portion of the entered key fragment that the user entered incorrectly, or include further information such as suggestive corrective action. Such embodiments will now be described with reference to .",{"@attributes":{"id":"p-0054","num":"0053"},"figref":["FIG. 6","FIG. 1","FIG. 6","FIGS. 8 and 9"],"b":["600","100","108","602","604","600","606","608","600"]},{"@attributes":{"id":"p-0055","num":"0054"},"figref":["FIG. 8","FIG. 9"],"b":["600","102","606","608","900"]},"At block , an original key string  is received, for example, from a key generator . Key fragment generator  receives original license key string  and generates error-correctable key fragments  and\/or friendly error-correctable key fragments . Original license key string  can be received from any number of sources, as is well known in the art. In the embodiment illustrated in , key fragment generator  is shown communicably coupled to a key generator  that generates original key string . As with key fragment generator  described above with respect to , key generator  can be connected to error-correctable key fragment generator  by a hardware or software connection, via an application programming interface (\u201cAPI\u201d), computer-readable medium and the like. In the fragmentation example illustrated in , an exemplary original key string , referred to as original key string , is shown. Original key string  is introduced above with reference to .","At block  original key string  is segmented into key fragments  and the first key fragment is separated from original key string . In the embodiment shown in , a fragmenter  fragments original key string . Fragmenter  is described above with reference to . As shown by dash lines A-N in , original key string  is segmented into shorter substrings A, B, . . . N. Key fragments A, B, . . . N are produced from substrings A, B, . . . N, respectively, as shown in . As noted above, the length of the segmented strings ( in ) is selected such that the corresponding key fragment  ( in the example of ) is short enough for a human to remember. In the example key fragmentation illustrated in , key fragments  are segmented from original key string  in contiguous portions. As one of ordinary skill in the art would appreciate, however, original key string  can be fragmented in other ways.","At block , a confusability evaluator  of generator  evaluates the confusability of the characters in key fragments  for the purpose of selecting an appropriate error-correcting algorithm. This evaluation can include scanning key fragment  for characters that, during entry, a user is likely to confuse with other characters in original key string . For example if key fragment  contains a combination of upper and lower case letters \u201cO\u201d and \u201co\u201d and\/or digit zeros (\u201c0\u201d), the key fragment can be considered more confusable than other key fragments. The confusability can depend on the number of such confusable characters in key fragment . Confusability evaluator  can, therefore, select an error correcting code (ECC) algorithm  that is likely to be able to detect and correct data entry errors involving the incorrect entry of some or all of these confusable characters.","Error correcting codes (ECC) and ECC algorithms are well known. They can be used to augment data with error correcting codes that enable errors to be subsequently detected and corrected. The extent to which errors can be corrected depends on the ECC algorithm used and the amount of error correcting data provided.","At block , error correction module  calculates error-correcting data  for each key fragment . If the optional confusability evaluator  is not implemented in error-correctable key fragment generator , then a predetermined ECC algorithm is used in error correction module . Otherwise, the ECC algorithm selected by confusability evaluator  is used. Error-correcting data  can be used later to identify and correct erroneously entered key fragments, within the limits imposed by the ECC algorithm and the amount of error-correcting data included with the key fragment.","At block , combiner  combines key fragment  and the calculated error-correcting data  to produce error-correctable key fragment . If the optional confusability evaluator  is implemented, error-correcting data  includes an ECC identifier indicating which ECC algorithm was used. This identifier will, in turn, be included in error-correctable key fragment . The ECC identifier will enable an error-correctable key defragmenter (described below) to use an appropriate ECC algorithm to process this key fragment. Note that different ECC algorithms can be used for each key fragment .","As with check data  described above with reference to , in this embodiment error-correcting data  can be combined in any way with key fragment  to form error-correctable key fragment . Referring to the example illustrated in , error correction module  receives a key fragment  such as key fragment B \u201c7BadsKKf,\u201d and generates error correcting data . In this example, error correcting data  comprises ECC B \u201c2Kj\u201d and identifier B \u201c3.\u201d In this illustrative example, combiner  concatenate key fragments  and corresponding error correction data ,  to form error-correctable key fragments . For example, combiner  combines key fragment B \u201c7BadsKKf\u201d with check data B \u201c2Kj\u201d and B \u201c3\u201d to form error-correctable key fragment B of \u201c7BadsKKf2Kj3.\u201d","Optionally, at block , friendly key generator  generates a friendly key fragment  corresponding to error-correctable key fragment . Friendly key generator  is described in detail above with reference to . As with the embodiment shown in , friendly key generator  executes an algorithm or accesses a dictionary  containing, for example, a plurality of words which serve as friendly key fragments . Other embodiments as described above can also be implemented. For example, in one embodiment, friendly key generator  may generate or look-up one or more partial friendly key fragments. The one or more partial friendly key fragments may be based on, or generated from, key fragments  or error correction data . In these embodiments, the one or more partial friendly key fragments may be utilized along with error-correctable key fragments  to form friendly error-correctable key fragments . In the example illustrated in , exemplary friendly error-correctable key fragments  are shown as key fragments . The friendly key fragments A generated, for example, for error-correctable key fragment A \u201cAkdfE294faA3\u201d are \u201capple,\u201d \u201cbear,\u201d and \u201chouse.\u201d It is anticipated that such key fragments A can be more accurately entered by a user as compared with key fragment A \u201cAkdfE294faA3.\u201d","At block , error-correctable key fragment generator  outputs error-correctable key fragment  and\/or friendly error-correctable key fragment . At block , error-correctable key fragment generator  ascertains whether there are more key fragments  to be processed. If there are more key fragments  to process, error-correctable key fragment generator  control returns to block  and the above steps are repeated. Otherwise, fragmentation process  finishes its operations at block . Upon completing its operations, error-correctable key fragment generator  has generated a plurality of error-correctable key fragments  or a plurality of friendly error-correctable key fragments  in human-readable form.",{"@attributes":{"id":"p-0065","num":"0064"},"figref":["FIG. 7","FIG. 2","FIG. 7","FIGS. 8 and 10"],"b":["700","700","200","212","702","704","700","251","202","204","700"]},{"@attributes":{"id":"p-0066","num":"0065"},"figref":["FIG. 10","FIG. 7","FIG. 7","FIG. 8"],"b":["1000","700","204","1002","700","701","700","701","202","701","1004","606","608","1006","1008","701","606","702","608","208","701","808","810"]},"At block , friendly fragment converter  converts the inputted friendly error-correctable key fragment  into error-correctable key fragment . Converter  references dictionary  or implements an appropriate algorithm to reverse the process friendly key generator  used to process friendly key fragments . In the example shown in , friendly error-correctable key fragments A of \u201capple,\u201d \u201cbear,\u201d and \u201chouse\u201d are converted by friendly fragment converter  to error-correctable key fragment A of\u201cAkdfE29faA3.\u201d","In certain embodiments, as noted above, friendly error-correctable key fragments  may be formed by friendly key generator  based on one or more partial friendly key fragments and error-correctable key fragments  to form friendly error-detectable key fragments . In these embodiments, friendly fragment converter  reverses the process performed by friendly key generator  by extracting error-correctable key fragments  from friendly error-correctable key fragments .","At block , an appropriate ECC algorithm is selected. If error-correctable key fragment  includes an indication  of which ECC algorithm was used, such identifier is then used to this select the appropriate ECC algorithm. Alternatively, the appropriate ECC algorithm can be ascertained by analyzing error-correctable key fragment , such as by checking its length. Otherwise, a predetermined ECC algorithm is used.","As shown in , regardless of whether inputted key fragment  is an error-correctable key fragment  or a friendly error-correctable key fragment , error correction module  receives an error-detectable key fragment . At block , the selected ECC algorithm is used by error correction module  to determine whether there is an error in error-correctable key fragment . Specifically, error correction data  which was combined with a corresponding key fragments  () is utilized to determine whether received key fragment  is without error. In the example shown in , error correction module  uses, for example, check data A of \u201cfaA\u201d extracted from error-correctable key fragment A of \u201cAkdfE29faA3\u201d to ascertain whether key fragment A of \u201cAkdfE29u\u201d was entered correctly.","If key fragment  was not entered correctly, then an error message is generated at block . Depending on the amount of error correction that was performed at block , error message generator  can compare the erroneously entered key fragment to the corrected key fragment and ascertain the nature of the error. For example, if a digit zero (\u201c0\u201d) was entered instead of an upper case letter \u201cO\u201d, the hint can so indicate, without necessarily indicating the exact position of the error. For example, the error message could be, \u201cCheck for confusion between letter \u201cO\u201d and digit zero (\u201c0\u201d).\u201d Control then passes back to block  to give the user an opportunity to enter the key fragment correctly.","If key fragment  was entered correctly, at block , error correction module  extracts key fragment  from error-correctable key fragment  and provides it to accumulator . In the example shown in , key fragment A of\u201cAkdfE29u\u201d is extracted from error-correctable key fragments A of \u201cAkdfE29faA3\u201d and provided to accumulator . Accumulator  is described above.","At block , accumulator  combines key fragment  with any previously extracted key fragment. Eventually, all extracted key fragments will be combined to form reconstituted key string . In the example shown in , key fragments  are accumulated to form original key string .","At block , it is determined whether more key fragments  are to be received. If so, control returns to block  and the above operations are repeated. Otherwise, control passes to block , where key defragmenter  outputs reconstituted key string  to, for example, a software package . Alternatively, software package  can include an application programming interface (API) for the purpose of accepting a key string. Thus, key defragmenter  combines a plurality of entered error-correctable key fragments  or a plurality of friendly error-correctable key fragments  into a reconstituted key string .","The key fragment generators and key defragmenters of the present invention are preferably implemented in software or firmware that can be stored in a memory, and control operation of, a computer, such as a personal computer or a microprocessor embedded in another system. The memory can, but need not, be part of an integrated circuit that includes the microprocessor. The software or firmware can be stored on a removable or fixed computer-readable medium, such as a CD-ROM, CD-RW, DVD-ROM, DVD-RW, ZIP disk, hard disk or floppy disk. In addition, this software or firmware can be transmitted over a wireless or wired communication link, such as a computer or telephone network. Alternatively, the key fragment generators and key defragmenters can be implemented in hardware, such as an application-specific integrated circuit (ASIC) or a field-programmable gate array (FPGA).","For purposes of providing an example, the present invention has been described in the context of key strings used to license software packages. One of ordinary skill in the art can, however, apply the teachings herein to other licensing situations. For example, so-called \u201cblade\u201d systems include printed circuits (\u201cblades\u201d) that contain many electronic components, often including a complete computer, including memory, on a single board. Sometimes computer blades include more than one processor. On some blades, individual components, such as the processors, or portions thereof, such as portions of the memory, are separately licensed for use. In these cases, a control circuit, typically a dedicated integrated circuit, on the blade controls use of the licensed capabilities by selectively enabling or disabling these components or portions or other capabilities of the blade (collectively \u201ccapabilities\u201d).","The terms and expressions employed herein are used as terms of description, not of limitation. There is no intention, in using these terms and expressions, to exclude any equivalents of the features shown or described or portions thereof. Practitioners in the art will recognize that other modifications are possible within the scope of the invention claimed."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
