---
title: Debugging data mappings
abstract: Various embodiments of systems and methods for data mappings with visual debugging capabilities are described herein. A debugger is used to debug data transformations while presenting the actual transformation being debugged. The mapping being debugged is depicted differently than the rest of the mappings. A user can check the current context, continue debugging, resume execution, or terminate the debug session.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08656359&OS=08656359&RS=08656359
owner: SAP AG
number: 08656359
owner_city: Walldorf
owner_country: DE
publication_date: 20110325
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The field relates to data transformation. More precisely, the field relates to visualization when debugging data mappings.","Data mapping is the transformation of data for adaptation to a certain usage. It is often necessary to define comprehensive data transformation mappings between complicated data structures in more than one place. Data mapping is the process of creating transformation between the elements of two distinct data scopes. Defining this transformation takes time and is quite error prone. Sometimes, graphical tools are used in order to show the relationships between data objects by drawing lines representing the connections between fields from different data scopes. Algorithms are used for creating the mapping automatically, based mainly on the idea of connecting the fields from the two scopes that have the same name. This is usually done when handling heterogeneous data, which makes the mapping a complex problem. There are technologies for overcoming this heterogeneous complexity for relational data sources. The structural heterogeneity is a basic mapping problem in order to find effective mappings between distinct data structures. Facilitating and automating data mapping is one of the fundamental challenges for data interoperability.","Data transformations in most cases are quite complex and it is a hard task to find errors during execution of the transformation or the reason why the actual result differs from the expected result. It is even impossible to find the reason of failure for non-mapping domain expert. Typically, a debugger operates with the source code, which defines the data transformation. Such approach requires deep and comprehensive technical and domain knowledge from the person who performs debugging. With visual debugging capabilities, a mapping domain expert will not be required to debug the problems. What happens during the execution of the transformation and what the actual transformation of the source into the target context is will be presented in a simple and clear way.","Various embodiments of systems and methods for debugging data mappings are described herein. In one embodiment, the method includes defining a data transformation between a source data object and a target data object in a user interface and displaying an initial mapping of elements from the source data object to the target data object. The method also includes toggling a breakpoint on at least one mapping between the source data object and the target data object that requires debugging and displaying the at least one mapping with toggled breakpoint when debugging is in progress. The transformation is confirmed when no further debugging is required.","In other embodiments, the system includes at least one processor for executing program code and memory, a source data object and a target data object, and a mapping module to define a data transformation between the source data object and the target data object and to create an initial mapping of their elements. The system also includes a plurality of predefined mapping rules to be applied for mappings between the source data object and the target data object and a debugging module to debug the mappings between the source data object and the target data object. The system further includes a display for showing the mappings from the source data object to the target data object when debugging the mappings.","These and other benefits and features of embodiments of the invention will be apparent upon consideration of the following detailed description of preferred embodiments thereof, presented in connection with the following drawings.","Embodiments of techniques for debugging data mappings are described herein. In the following description, numerous specific details are set forth to provide a thorough understanding of embodiments of the invention. One skilled in the relevant art will recognize, however, that the invention can be practiced without one or more of the specific details, or with other methods, components, materials, etc. In other instances, well known structures, materials, or operations are not shown or described in detail to avoid obscuring aspects of the invention.","Reference throughout this specification to \u201cone embodiment\u201d, \u201cthis embodiment\u201d and similar phrases, means that a particular feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment of the present invention. Thus, the appearances of these phrases in various places throughout this specification are not necessarily all referring to the same embodiment. Furthermore, the particular features, structures, or characteristics may be combined in any suitable manner in one or more embodiments.",{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1","b":["110","120","110","115","117","120","125","127","117","119","127","129","117","127","130","140","145"]},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 2","b":["200","205","200","205","210","212","200","205","215","210","220","225","212","230","235","240","245","250","250","250","235","240","245","255"]},{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 3","FIG. 4"],"b":["300","310","117","127","320","330","340","410","350","350","330","350","360"]},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 5","b":["500","510","520","540","510","520","540","510","520","510","520","510","520","570"]},"In one embodiment, the mapping module  accesses information about data structures of the source data object and the target data object to be mapped. Based on that, the mapping nodule  defines a data transformation between the source data object  and the target data object  and creates an initial mapping of their elements. The mapping module  also determines if the initial mapping needs adjustment. In case the initial mapping created between the source data object  and the target data object  needs adjustment, mapping module  uses predefined mapping rules  for a subsequent mapping. Predefined mapping rules  are common reusable templates for data transformation defined for a set of sources and target. A suitable predefined mapping rule can be chosen manually or automatically by mapping module  from a set of predefined mapping rules . In one embodiment, a mapping rule is chosen from predefined mapping rules  based on the data structures of the source data object  and the target data object  to be mapped.","Debugging module  is used for debugging the mapping between the source data object  and the target data object . Debugging may be necessary, for example, when the available predefined mapping rules  cannot perform the data transformation from the source data object  to the target data object . The mapping from the source data object  to the target data object  is displayed via a GUI on display . In one embodiment, a mapping is displayed on the display  when being debugged. In yet another embodiment, a mapping is displayed on the display  in a distinguishably different manner than the rest of the mappings when being debugged.","Some embodiments of the invention may include the above-described methods being written as one or more software components. These components, and the functionality associated with each, may be used by client, server, distributed, or peer computer systems. These components may be written in a computer language corresponding to one or more programming languages such as, functional, declarative, procedural, object-oriented, lower level languages and the like. They may be linked to other components via various application programming interfaces and then compiled into one complete application for a server or a client. Alternatively, the components maybe implemented in server and client applications. Further, these components may be linked together via various distributed programming protocols. Some example embodiments of the invention may include remote procedure calls being used to implement one or more of these components across a distributed programming environment. For example, a logic level may reside on a first computer system that is remotely located from a second computer system containing an interface level (e.g., a graphical user interface). These first and second computer systems can be configured in a server-client, peer-to-peer, or some other configuration. The clients can vary in complexity from mobile and handheld devices, to thin clients and on to thick clients or even other servers.","The above-illustrated software components are tangibly stored on a computer readable storage medium as instructions. The term \u201ccomputer readable storage medium\u201d should be taken to include a single medium or multiple media that stores one or more sets of instructions. The term \u201ccomputer readable storage medium\u201d should be taken to include any physical article that is capable of undergoing a set of physical changes to physically store, encode, or otherwise carry a set of instructions for execution by a computer system which causes the computer system to perform any of the methods or process steps described, represented, or illustrated herein. Examples of computer readable storage media include, but are not limited to: magnetic media, such as hard disks, floppy disks, and magnetic tape; optical media such as CD-ROMs, DVDs and holographic devices; magneto-optical media; and hardware devices that are specially configured to store and execute, such as application-specific integrated circuits (\u201cASICs\u201d), programmable logic devices (\u201cPLDs\u201d) and ROM and RAM devices. Examples of computer readable instructions include machine code, such as produced by a compiler, and files containing higher-level code that are executed by a computer using an interpreter. For example, an embodiment of the invention may be implemented using Java, C++, or other object-oriented programming language and development tools. Another embodiment of the invention may be implemented in hard-wired circuitry in place of, or in combination with machine readable software instructions.",{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 6","b":["600","600","605","655","600","640","655","610","615","610","615","605","615","600","625","630","600","625","630","600","635","600","650","650","600","645","600","620","660","660","660","650","660"]},"A data source is an information resource. Data sources include sources of data that enable data storage and retrieval. Data sources may include databases, such as, relational, transactional, hierarchical, multi-dimensional (e.g., OLAP), object oriented databases, and the like. Further data sources include tabular data (e.g., spreadsheets, delimited text files), data tagged with a markup language (e.g., XML data), transactional data, unstructured data (e.g., text files, screen scrapings), hierarchical data (e.g., data in a file system, XML data), files, a plurality of reports, and any other data source accessible through an established protocol, such as, Open DataBase Connectivity (ODBC), produced by an underlying software system (e.g., ERP system), and the like. Data sources may also include a data source where the data is not tangibly stored or otherwise ephemeral such as data streams, broadcast data, and the like. These data sources can include associated data foundations, semantic layers, management systems, security systems and so on.","In the above description, numerous specific details are set forth to provide a thorough understanding of embodiments of the invention. One skilled in the relevant art will recognize, however that the invention can be practiced without one or more of the specific details or with other methods, components, techniques, etc. In other instances, well-known operations or structures are not shown or described in details to avoid obscuring aspects of the invention.","Although the processes illustrated and described herein include series of steps, it will be appreciated that the different embodiments of the present invention are not limited by the illustrated ordering of steps, as some steps may occur in different orders, some concurrently with other steps apart from that shown and described herein. In addition, not all illustrated steps may be required to implement a methodology in accordance with the present invention. Moreover, it will be appreciated that the processes may be implemented in association with the apparatus and systems illustrated and described herein as well as in association with other systems not illustrated.","The above descriptions and illustrations of embodiments of the invention, including what is described in the Abstract, is not intended to be exhaustive or to limit the invention to the precise forms disclosed. While specific embodiments of, and examples for, the invention are described herein for illustrative purposes, various equivalent modifications are possible within the scope of the invention, as those skilled in the relevant art will recognize. These modifications can be made to the invention in light of the above detailed description. Rather, the scope of the invention is to be determined by the following claims, which are to be interpreted in accordance with established doctrines of claim construction."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The claims set forth the embodiments of the invention with particularity. The invention is illustrated by way of example and not by way of limitation in the figures of the accompanying drawings in which like references indicate similar elements. The embodiments of the invention, together with its advantages, may be best understood from the following detailed description taken in conjunction with the accompanying drawings.",{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
