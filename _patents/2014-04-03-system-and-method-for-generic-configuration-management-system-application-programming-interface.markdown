---
title: System and method for generic configuration management system application programming interface
abstract: The technology disclosed can query configuration management system data and includes cross table selection criteria and joined data return.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09521040&OS=09521040&RS=09521040
owner: salesforce.com, inc.
number: 09521040
owner_city: San Francisco
owner_country: US
publication_date: 20140403
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CLAIM OF PRIORITY","TECHNICAL FIELD","BACKGROUND","DETAILED DESCRIPTION"],"p":["This United States patent application is related to, and claims priority to U.S. Provisional Patent Application No. 61\/807,905 filed Apr. 3, 2013, entitled \u201cSYSTEM AND METHOD FOR GENERIC CONTENT MANAGEMENT SYSTEM APPLICATION-PROGRAMMING INTERFACE,\u201d, the entire contents of which are incorporated herein by reference.","Embodiments relate to configuration management in a computing environment. More particularly, embodiments relate to interfaces for use with generic configuration management system.","Organizations typically employ many different types of software and computing technologies to meet their computing needs. However, installing and maintaining software on an organization's own computer systems may involve one or more drawbacks. For example, when software must be installed on computer systems within the organization, the installation process often requires significant time commitments, since organization personnel may need to separately access each computer. Once installed, the maintenance of such software typically requires significant additional resources. Each installation of the software may need to be separately monitored, upgraded, and\/or maintained. Further, organization personnel may need to protect each installed piece of software against viruses and other malevolent code. Given the difficulties in updating and maintaining software installed on many different computer systems, it is common for software to become outdated. Also, the organization will likely need to ensure that the various software programs installed on each computer system are compatible. Compatibility problems are compounded by frequent upgrading, which may result in different versions of the same software being used at different computer systems in the same organization.","Accordingly, organizations increasingly prefer to use on-demand services accessible via the Internet rather than software installed on in-house computer systems. On-demand services, often termed \u201ccloud computing\u201d services, take advantage of increased network speeds and decreased network latency to provide shared resources, software, and information to computers and other devices upon request. Cloud computing typically involves over-the-Internet provision of dynamically scalable and often virtualized resources. Technological details can be abstracted from the users, who no longer have need for expertise in, or control over, the technology infrastructure \u201cin the cloud\u201d that supports them.","In one embodiment, the technology disclosed can configuration management system data and includes cross table selection criteria and joined data return. Other aspects and advantages are illustrated in the drawings, the detailed description and the claims, which follow.","The following detailed description is made with reference to the figures. Sample implementations are described to illustrate the technology disclosed, not to limit its scope, which is defined by the claims. Those of ordinary skill in the art will recognize a variety of equivalent variations on the description that follows.","In one embodiment, the technology disclosed provides for both logical configuration and physical inventory. This allows for dynamic configuration hierarchies to be supported. Typical configuration management systems are flat with simple key-value pairs. The technology disclosed provides a more complex, dynamic hierarchy of configurations. For example, in a cloud provider environment, there can be different configurations for different data centers, SUPERPODS, PODS, other clusters, servers, networks, etc. Thus, the technology discloses provides configuration functionality for on demand service environments including, for example, multitenant database environments.","In one embodiment, the technology disclosed relates to generic configuration management system application programming interface (API) for use in a computer-implemented system. The described subject matter can be implemented in the context of any computer-implemented system, such as a software-based system, a database system, a multi-tenant environment, or the like. Moreover, the described subject matter can be implemented in connection with two or more separate and distinct computer-implemented systems that cooperate and communicate with one another. One or more implementations may be implemented in numerous ways, including as a process, an apparatus, a system, a device, a method, a computer readable medium such as a computer readable storage medium containing computer readable instructions or computer program code, or as a computer program product comprising a computer usable medium having a computer readable program code embodied therein.","In one embodiment, API version validation capability allows for additional configuration items to be added\/removed\/changed with support of multiple versions of these configurations. In one embodiment, this version validation capability automatically applies to all configuration items\/resources that are added (e.g., via annotations) without having to implement versioning for each configuration item.","In one embodiment, support is provided for REST APIs for multiple resource in a generic manner by scanning and caching class metadata to build database queries and responses. This capability allows generation of REST API configuration systems (e.g., deployment configurations) and can be extended for use with non-configuration systems.",{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 1","b":["100","102","104","106","108","120"]},"In one embodiment, there is provided an interface between load balancer  and application server . In one embodiment, the interface is a HyperText Transfer Protocol (HTTP)\/REST JSON (Representational State Transfer (REST) JavaScript Object Notation (JSON) interface. In alternate embodiments, other interfaces can also be supported. JSON is a light-weight data serialization format based on a subset of JavaScript. A RESTful interface is one that conforms to the constraints and characteristics of the REST architectural style.","In one embodiment, application server  also includes an interface to database load balancer . In one embodiment, database load balancer  is coupled with one or more real application cluster (RAC) nodes (e.g., , ), which can access database . In one embodiment, database load balancer , RAC node , RAC node  and database  are part of a multitenant database environment. Various features and embodiments of multitenant database environments are described in greater detail below.","Application controller can include various components, for example, Spring Model View Controller (MVC),  and\/or Spring Service , and\/or Spring Repository . Other and\/or different components may also be provided\/utilized by application server . Spring is merely an example technology and others embodiments can also be supported. Hibernate layer  operates to integrate database functionality of the underlying database with JAVA-based functionality. Other technologies can also be used.","The technology disclosed herein can query configuration management system (CMS) data and includes cross table selection criteria and joined data return. It can further include bulk creation of rows in a single table, bulk update of rows in a single table, bulk deletion of row in a single table, cascading deletes through top level objects, creation of rows in multiple class types in a single call through top level objects, update rows in multiple class types in a single call through top level objects, pagination of \u201cget\u201d methods, etc.","In some implementations, it can include writing to non-CMS data sources, supporting federation to external sources including federating full tables to non-CMS data sources, selecting criteria that include non-CMS data sources, joining of columns from external sources logically into an object in the CMS to return column data from an external source. In other implementations, it can include data processes such as uniqueness, null allowed, and referential integrity. It can also include partial field\/property updates of resources where user may pass only the fields that need to be updated and queries with \u201cother than and\u201d as the operator.","In one embodiment, the API can adhere to most or all of the REST API standards. The base URL on which the \u201ccreate, read, update, delete\u201d (CRUD) operations can be built may be, for example, {cms-server}\/api\/{version}\/{resource}, where {resource} can represent a domain object. It can be used to abstract the REST API from the schema of the persistence layer. In some implementations, \u201c{resource}\u201d can be mapped to a domain object on one-to-one basis.","In some implementations, the API can be accessed using standard REST conventions. The API method can be modeled as a resource and invoked using one of the HTTP verbs: POST, GET, PUT, and DELETE. These HTTP verbs can directly correlate with the database CRUD operations.","In one embodiment, the resource associations can diverge from the REST standards because these associations can be added as part of the response like an object graph instead of hypertext links. Thus it can support: typed APIs or Java client bindings; updates from top-level objects; and\/or partial updates.","In one embodiment, all CRUD operations can be performed through the main resources or top-level objects. For example, in , the Host , Cluster , SuperPod  and DataCenter  objects can be top-level objects, which can support the CRUD operations. In some implementations, read operations can also support various resources, including non-top-level objects. The top-level objects of  are example implementations and other implementations can also be supported.","Furthermore, top-level objects can be updated by modifications that can be specific to the top-level objects. For example, in , host and its related objects can be updated by specifying an update to the host object.","In some implementations, processes supported by architecture illustrated in  can include updating device object (i.e., updating the host objects with embedded device information). It can also include adding more network interfaces for the host (i.e., retrieving the host for update), then adding the new network interface to the host object and making an update API call to update the host. It can include deleting a network interface for the host (i.e. retrieving the host for update), deleting the interface object from the host and making an update API call to update the host. It can further include adding a host to a cluster, in which case the host can be related to the cluster and can make a \u201ccreate API\u201d call.","In one embodiment, exposed objects  are the exposed portion of the interfaces described herein. In one embodiment, exposed objects  includes the top-level objects (e.g., Host , Cluster , SuperPod , DataCenter ) as well as Device , NetworkInterface , HostBusAdapter , FiberChannelNode , and FiberChannelPort . Exposed objects  provide an interface to one or more configuration objects that provide configuration functionality.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 3","FIG. 3","FIG. 1"],"b":"140"},"Web server  is any type of web server that provides content to, or requests content from database . Some components (e.g., load balancers) are not illustrated in  in order to not distract from the description of the configuration management techniques utilized herein.","Generic controller  handles methods (e.g., CRUD, find, describe, list, distinc) for supported resources. In one embodiment, generic controller uses the Spring @RequestMapping annotation for each method to indicate the URL pattern to handle API requests in a generic manner. An API request can be matched to one of the URL patterns, the version can be validated and the request can be matched to its resource type (whether top-level or not). Once validations are successful, the request can be handed off to generic service layer .","In one embodiment, exceptions can be handled in a generic manner in this layer as well. The following is an example controller method for a delete.",{"@attributes":{"id":"p-0035","num":"0034"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"238pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003","\/**"]},{"entry":[{},"* Delete resource;"]},{"entry":[{},"*"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"* @param version","The version requested by the client"]},{"entry":[{},"* @param resourceType","type of resource to be deleted"]},{"entry":[{},"* @param id","the id of resource to be deleted"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"238pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"*\/"]},{"entry":[{},"@RequestMapping (produces = \u201capplication\/json\u201d, value = \u201c\/{version:{circumflex over (\u2009)}[1-9] [0-"]},{"entry":[{},"9]*\\\\.[0-9] [0-9]*$}\/{resource}\/{id}\u201d, method = RequestMethod.DELETE)"]},{"entry":[{},"@Responsebody"]},{"entry":[{},"public CMSResponse delete (@PathVariable(\u201cversion\u201d) Double version,"]},{"entry":[{},"@PathVariable (\u201cresource\u201d) String resourceType, @PathVariable(\u201cid\u201d) String id)"]},{"entry":[{},"{"]},{"entry":[{},"\u2003return deleteResource (version, resourceType, id);"]},{"entry":[{},"}"]},{"entry":[{},"private CMSResponse deleteResource(Double version, String resourceType,"]},{"entry":[{},"String id) {"]},{"entry":[{},"\u2003CmsApiVersionHandler versionHandler = new CmsApiVersionHandler"]},{"entry":[{},"(version);"]},{"entry":[{},"\u2003version Handler.verifyVersion(versionValidator);"]},{"entry":[{},"\u2003cmsService.delete(apiResourceCache.getClassName(resourceType), id);"]},{"entry":[{},"\u2003return new CMSSuccessResponse( );"]},{"entry":[{},"}"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"In one embodiment, query model  stores the parsed request and is used by multiple modules for different purposes. In one embodiment, query model  is used by Repository\/DAO layer  to dynamically generate a ORM (e.g., Hibernate)  query to find resources saved in database  for handling, for example, start, limit, searchCriteria and expand, etc. In one embodiment, query model  is used by generic controller layer  to parse JSON output fields and for handling the fields query parameter in the request.","In one embodiment, generic service layer  performs CRUD operations issued by controller . Depending on the operation requested by controller , generic service layer  performs the create, find, delete or update operation on the appropriate data in the repository. Generic service layer  then wraps the result of the operation and passes it back to controller . In one embodiment, generic service layer  uses the API resource cache  and\/or API version validator  to perform the operation on the correct resource and version. The following is example code for delete:",{"@attributes":{"id":"p-0038","num":"0037"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"238pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003","Public void delete(String objectType, String id) {"]},{"entry":[{},"\u2003Logger.info(\u201cdelete({ },{ }) called\u201d, objectType, id);"]},{"entry":[{},"\u2003If (objectType == null || id == null) {"]},{"entry":[{},"\u2003\u2003Logger.error(\u201cException during delete( )\u201d);"]},{"entry":[{},"\u2003\u2003Throw new"]},{"entry":[{},"CmsRuntimeException(REQUIRED_PARAMETER_NOT_FOUND);"]},{"entry":[{},"\u2003}"]},{"entry":[{},"ConfigurationItem configurationItem = get(new RequestQueryModel(objectType,"]},{"entry":[{},"id));"]},{"entry":[{},"If(configurationItem == null) {"]},{"entry":[{},"\u2003Logger.error(\u201cExcpetion during delete( )\u201d);"]},{"entry":[{},"\u2003Throw new"]},{"entry":[{},"\u2003\u2003ResourceNotFoundException"]},{"entry":[{},"\u2003\u2003String.format(CANNOT_FIND_ENTITY_WITH_ID,"]},{"entry":[{},"apiResourceCache.getResourceName(objectType), id));"]},{"entry":[{},"\u2003}"]},{"entry":[{},"\u2003logger.info(\u201cdelete({ },{ }) completed\u201d, objectType, id);"]},{"entry":[{},"\u2003standardDao.delete(configurationItem);"]},{"entry":[{},"}"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"In one embodiment, the response (e.g., HTTP header) can include the HTTP status code. In one embodiment, the response body can include the following elements:",{"@attributes":{"id":"p-0040","num":"0039"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Response",{}]},{"entry":["Element","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Success","True if the API call is successful; false, otherwise."]},{"entry":["Data","If the API call is successful, this can depend on the"]},{"entry":[{},"operation:"]},{"entry":[{},"Create\/update API - the resource (and its associated"]},{"entry":[{},"resources can be returned) in JSON format so that the"]},{"entry":[{},"client can have the ids for the created objects."]},{"entry":[{},"Get\/find API - the resource(s) in JSON format that"]},{"entry":[{},"satisfy the input condition."]},{"entry":["Total","The total number of root resources."]},{"entry":["Message","This can contains the error message if the API call"]},{"entry":[{},"failed."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"Sample successful response follows:",{"@attributes":{"id":"p-0042","num":"0041"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003","{"]},{"entry":[{},{},"\u2003\u201csuccess\u201d: true,"]},{"entry":[{},{},"\u2003\u201cdata\u201d: ["]},{"entry":[{},{},"\u2003{"]},{"entry":[{},{},"\u2003\u201cid\u201d: \u201cbb3f02be-812e-4500-b4cd-292be253de22\u201d"]},{"entry":[{},{},"\u2003\u201cname\u201d: \u201cna55-acs1-1-was\u201d,"]},{"entry":[{},{},"\u2003\u201cdeviceRole\u201d: \u201cacs\u201d,"]},{"entry":[{},{},"\u2003}]"]},{"entry":[{},{},"\u2003\u201ctotal\u201d: 1"]},{"entry":[{},{},"}"]},{"entry":[{},{},"Sample error response follows:"]},{"entry":[{},{},"{"]},{"entry":[{},{},"\u201csuccess\u201d: false,"]},{"entry":[{},{},"\u201cmessage\u201d: \u201cError message here\u201d"]},{"entry":[{},{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"In one embodiment, API version validator  checks to determine that new fields for each resource are only accessible on the API version that they are introduced, and that the fields that are deprecated are not accessible after a particular version. In one embodiment, fields are annotated with a version number with a MinApiVersion and MaxApiVersion to indicate when these attributes\/resources are effective. In one embodiment, adding attributes will have a MinApiVersion value of the release when it got added. In one embodiment, deprecating fields are deprecating the old name and adding the new name. In one embodiment, annotations both at the resource and field level. The following is a sample of a domain object with versions on the resource and its fields.",{"@attributes":{"id":"p-0044","num":"0043"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"@Entity"},{"entry":"@Table(name = \u201cCMDB_HOST\u201d)"},{"entry":"@JsonFilter(\u201cHost\u201d)"},{"entry":"@JsonIdentityInfo(generator = ObjectIdGenerators.UUIDGenerator.class,"},{"entry":"property= \u201c@hostJacksonId\u201d)"},{"entry":"@APIResource(name = \u201chosts\u201d)"},{"entry":"@MinApiVersion(1.0)"},{"entry":"public class Host extends AuditableConfigurationItem {"},{"entry":"\u2003@MinApiVersion(1.0)"},{"entry":"\u2003@Column(name = \u201cname\u201d)"},{"entry":"\u2003private String name;"},{"entry":"\u2003@Column(name = \u201csmbiosguid\u201d, nullable = false)"},{"entry":"\u2003private String smbiosguid;"},{"entry":"\u2003@Column(name = \u201casset_tag\u201d, nullable = false)"},{"entry":"\u2003private String assetTag;"},{"entry":"\u2003@MaxApiVersion(2.0) \/\/field is \u201cdeleted\u201d by 2.1"},{"entry":"\u2003@Column(name = \u201cserial_number\u201d, nullable = false)"},{"entry":"\u2003private String serialNumber;"},{"entry":"\u2003@MinApiVersion(1.0)"},{"entry":"\u2003@MaxApiVersion(2.0)"},{"entry":"\u2003@Column(name = \u201coperational_status\u201d)"},{"entry":"\u2003private String operationalStatus;"},{"entry":"\u2003@MinApiVersion(2.1)"},{"entry":"\u2003@Column(name = \u201coperational_status\u201d)"},{"entry":"\u2003private String status"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"In one embodiment, before handling a creation, read or update of a resource and its fields, API version validator  validates that the resource and fields are accessible based on the version number provided in the URL. If there is a match, the operation is allowed on the resource\/configuration item. In one embodiment, when the resource object is built for a particular API request, these annotations are taken into consideration as well to ensure that the object is compatible with the version that the client is asking for. In one embodiment, this is accomplished using appropriate filtering on the JSON response object.","In one embodiment, API resource cache  caches metadata information about one or more resources. When an application starts for the first time, it scans the code (e.g., JAVA\u00ae) package to look for resources it could use for the REST API and caches that information. It is then used by the different modules of the system to look up information about the resources. The following are examples of resource details that can be saved in the cache: 1) operations allowed for a resource; 2) mapping of the REST API name of the resource to the actual class that supports that resource (e.g., hosts resource->Host.java); and\/or 3) a list of fields\/attributes available in the class. Other and\/or different resource details can also be stored.","In one embodiment, domain objects\/resources  can be, for example, JAVA\u00ae objects that can be referred to with getter and setter methods. Additional and\/or different domain objects\/resources can also be supported. In one embodiment, domain objects\/resources  are made available through the REST API. These classes can contain annotations for both ORM (e.g., Hibernate)  and version handling. In one embodiment, API resource cache  scans the domain objects with @APIResource and @APISearchable annotations. The following is an example of a domain object\/resource:",{"@attributes":{"id":"p-0048","num":"0047"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"@Entity"},{"entry":"@org.hibernate.annotations.Entity(dynamicInsert = true)"},{"entry":"@Table(name = \u201cCMDB_HOST\u201d, uniqueConstraints ="},{"entry":"@UniqueConstraint(columnNames = (\u201cserial_number\u201d, \u201cmanufacturer\u201d)))"},{"entry":"@JsonFilter(\u201cHost\u201d)@JsonIdentityInfo(generator ="},{"entry":"ObjectIdGenerators.UUIDGenerator.class, property = \u201c@hostJacksonId\u201d)"},{"entry":"@APIResource(name = \u201chosts\u201d)"},{"entry":"public class Host extends AuditableConfigurationItem {"},{"entry":"\u2003@Column(name = \u201cname\u201d, nullable = true, unique = true)"},{"entry":"\u2003private String name;"},{"entry":"\u2003@Column(name = \u201cserial_number\u201d, nullable = false)"},{"entry":"\u2003private String serialNumber;"},{"entry":"\u2003@Column(name = \u201coperational_status\u201d, nullable = false)"},{"entry":"\u2003private String operationalStatus;"},{"entry":"\u2003@OneToOne(fetch = FetchType.EAGER)"},{"entry":"\u2003@JoinColumn(name = \u201ccluster_id\u201d, nullable = false)"},{"entry":"\u2003private Cluster cluster;"},{"entry":"\u2003@MinApiVersion(1.01)"},{"entry":"\u2003@Column(name = \u201cmanufacturer\u201d, nullable = false)"},{"entry":"..."},{"entry":"\u2003public String getName( ) {"},{"entry":"\u2003return name;"},{"entry":"\u2003}"},{"entry":"\u2003public void setName(String name) {"},{"entry":"\u2003this.name = name;"},{"entry":"\u2003}"},{"entry":"..."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"In one embodiment, repository\/data access object (DAO) layer  handles requests handled by query model  and hands it off to ORM  for processing. In one embodiment, the class uses the @Repository annotation in Spring; however, other annotation schemes can be used. The following sample calls can be used within DAO layer .",{"@attributes":{"id":"p-0050","num":"0049"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003@Repository"},{"entry":"\u2003public class StandardDao implements Dao {"},{"entry":"\u2003@Autowired"},{"entry":"\u2003@Qualifier((\u201ccmsSessionFactory\u201d)"},{"entry":"\u2003private SessionFactory sessionFactory;"},{"entry":"\u2003@Override"},{"entry":"\u2003@Transactional(readOlnly = true)"},{"entry":"\u2003public List find(QueryModel queryModel) {"},{"entry":"\u2003\u2003logger.info(\u201cfind({ }) called\u201d);"},{"entry":"\u2003\u2003Criteria criteria = queryModel.getHibernateCriteria(sessionFactory);"},{"entry":"\u2003\u2003List list = criteria.list( );"},{"entry":"\u2003\u2003Logger.info(find( ) complete\u201d);"},{"entry":"\u2003\u2003Return list;"},{"entry":"}"},{"entry":"@Override"},{"entry":"@Transactional"},{"entry":"public void delete(ConfigurationItem configurationItem) {"},{"entry":"\u2003\u2003logger.info(\u201cdelete({ }) called\u201d, configurationItem);"},{"entry":"\u2003\u2003sessionFactory.getCurrentSession( ).delete(configurationItem);"},{"entry":"\u2003\u2003logger.info(\u2018delete({ }) completed\u201d, configurationItem);"},{"entry":"\u2003\u2003}"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"In one embodiment, HTTP POST can be used to support creation of a top-level resource and its non-top-level resource associations per call. The format of the create call can be, for example:\n\n","In some implementations, \u201cmethod\u201d can be used when bulk delete or update is required or by clients who may not be able to perform puts or deletes.","In one embodiment, the fields to be created can be sent as JavaScript Object Notation (JSON) in the request body. The parent resource association in the request and its children resources may be included. For example, for Cluster the request can be\n\n","With request body as follows:",{"@attributes":{"id":"p-0055","num":"0056"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003","{"]},{"entry":[{},{},"\u2003\u201cname\u201d: \u201cna7\u201d,"]},{"entry":[{},{},"\u2003\u201cisDR\u201d: false,"]},{"entry":[{},{},"\u2003\u201coperationalStatus\u201d: \u201cPRE_PRODUCTION\u201d,"]},{"entry":[{},{},"\u2003\u201cenvironment\u201d: \u201cproduction\u201d,"]},{"entry":[{},{},"\u2003\u201cbuildType\u201d: \u201cnew\u201d,"]},{"entry":[{},{},"\u2003\u201cclusterType\u201d: \u201cpod\u201d,"]},{"entry":[{},{},"\u2003\u201csuperpod\u201d: {"]},{"entry":[{},{},"\u2003\u201cid\u201d: \u201ccc3f02be-812e-4500-b4cd-292be253de43\u201d,"]},{"entry":[{},{},"\u2003\u201cname\u201d: \u201csp7\u201d"]},{"entry":[{},{},"\u2003}"]},{"entry":[{},{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"In one embodiment, a successful create response can return a  HTTP status code and the body can contain the full JSON object with the new id assigned to it.",{"@attributes":{"id":"p-0057","num":"0058"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003","{"]},{"entry":[{},{},"\u2003\u201csuccess\u201d: true,"]},{"entry":[{},{},"\u2003\u201cdata\u201d: ["]},{"entry":[{},{},"\u2003{"]},{"entry":[{},{},"\u2003\u201cid\u201d: \u201c783f02be-812e-4500-b4cd-292be253de43\u201d"]},{"entry":[{},{},"\u2003\u201cname\u201d: \u201cna7\u201d,"]},{"entry":[{},{},"\u2003\u201cisDR\u201d: false,"]},{"entry":[{},{},"\u2003\u201coperationalStatus\u201d: \u201cPRE_PRODUCTION\u201d,"]},{"entry":[{},{},"\u2003\u201cenvironment\u201d: \u201cproduction\u201d,"]},{"entry":[{},{},"\u2003\u201cbuildType\u201d: \u201cnew\u201d,"]},{"entry":[{},{},"\u2003\u201cclusterType\u201d: \u201cpod\u201d,"]},{"entry":[{},{},"\u2003\u201csuperpod\u201d: {"]},{"entry":[{},{},"\u2003\u201cid\u201d: \u201ccc3f02be-812e-4500-b4cd-292be253de43\u201d,"]},{"entry":[{},{},"\u2003\u201cname\u201d: \u201csp7\u201d"]},{"entry":[{},{},"\u2003}"]},{"entry":[{},{},"\u2003}]"]},{"entry":[{},{},"\u2003\u201ctotal\u201d: 1"]},{"entry":[{},{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"In one embodiment, a HTTP PUT can be used to update a top-level resource. Fields can be replaced by the new values passed in. In some implementations, the update request can be preceded by a retrieval of the full and the response can be used as input to the update call. In one embodiment, the format of the update call can be as follows:\n\n","For example, allocating the scratch host a name, role and its pod assignment can involve retrieving the cluster\/pod where the host can belong to, retrieving the host information from the previous step, changing the host name, role and cluster association, and calling update API with the host object built from the previous step.","A sample update API call is shown below:",{"@attributes":{"id":"p-0061","num":"0063"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003","PUT {cms-server}\/api\/{version}\/host"]},{"entry":[{},{},"\u2003with request body of"]},{"entry":[{},{},"\u2003{"]},{"entry":[{},{},"\u2003\u201cid\u201d: \u201cbb3f02be-812e-4500-b4cd-292be253de43\u201d"]},{"entry":[{},{},"\u2003\u201cname\u201d: \u201cna55-acs1-1-was\u201d,"]},{"entry":[{},{},"\u2003\u201csmbiosguid\u201d: \u201c123\u201d,"]},{"entry":[{},{},"\u2003\u201cassetTag\u201d: \u201c456345\u201d,"]},{"entry":[{},{},"\u2003\u201cprovisioningStatus\u201d: \u201cinventory complete\u201d,"]},{"entry":[{},{},"\u2003\u201cdeviceType\u201d: \u201capp\u201d,"]},{"entry":[{},{},"\u2003\u201cdeviceRole\u201d: \u201cacs\u201d,"]},{"entry":[{},{},"\u2003\u201cmake\u201d: \u201cDell\u201d,"]},{"entry":[{},{},"\u2003\u201cmodel\u201d: \u201cR620\u201d,"]},{"entry":[{},{},"\u2003\u201cnumberOfLocalDisk\u201d: 2,"]},{"entry":[{},{},"\u2003\u201ccluster\u201d: {"]},{"entry":[{},{},"\u2003\u201cname\u201d: \u201cna55\u201d,"]},{"entry":[{},{},"\u2003\u201cid\u201d: \u201caa3f02be-812e-4500-b4cd-292be253de43\u201d"]},{"entry":[{},{},"\u2003},"]},{"entry":[{},{},"\u2003\u201cnetworkInterfaces\u201d: ["]},{"entry":[{},{},"\u2003{"]},{"entry":[{},{},"\u2003\u201cid\u201d: \u201c993f02be-812e-4500-b4cd-292be253de12\u201d"]},{"entry":[{},{},"\u2003\u201chardwareAddress\u201d: \u201caa:bb:11:22:33:01\u201d,"]},{"entry":[{},{},"\u2003\u201clogicalName\u201d: \u201ceth0\u201d"]},{"entry":[{},{},"\u2003},"]},{"entry":[{},{},"\u2003{"]},{"entry":[{},{},"\u2003\u201cid\u201d: \u201c993f02be-812e-4500-b4cd-292be253de13\u201d"]},{"entry":[{},{},"\u2003\u201chardwareAddress\u201d: \u201caa:bb:11:22:33:02\u201d,"]},{"entry":[{},{},"\u2003\u201clogicalName\u201d: \u201ceth1\u201d"]},{"entry":[{},{},"\u2003},"]},{"entry":[{},{},"\u2003{"]},{"entry":[{},{},"\u2003\u201cid\u201d: \u201c993f02be-812e-4500-b4cd-292be253de14\u201d"]},{"entry":[{},{},"\u2003\u201chardwareAddress\u201d: \u201caa:bb:11:22:33:03\u201d,"]},{"entry":[{},{},"\u2003\u201clogicalName\u201d: \u201ceth2\u201d"]},{"entry":[{},{},"\u2003},"]},{"entry":[{},{},"\u2003{"]},{"entry":[{},{},"\u2003\u201cid\u201d: \u201c993f02be-812e-4500-b4cd-292be253de15\u201d"]},{"entry":[{},{},"\u2003\u201chardwareAddress\u201d: \u201caa:bb:11:22:33:04\u201d,"]},{"entry":[{},{},"\u2003\u201clogicalName\u201d: \u201ceth3\u201d"]},{"entry":[{},{},"\u2003},"]},{"entry":[{},{},"\u2003{"]},{"entry":[{},{},"\u2003\u201cid\u201d: \u201c993f02be-812e-4500-b4cd-292be253de16\u201d"]},{"entry":[{},{},"\u2003\u201chardwareAddress\u201d: \u201caa:bb:11:22:33:05\u201d,"]},{"entry":[{},{},"\u2003\u201clogicalName\u201d: \u201ceth4\u201d"]},{"entry":[{},{},"\u2003},"]},{"entry":[{},{},"\u2003{"]},{"entry":[{},{},"\u2003\u201cid\u201d: \u201c993f02be-812e-4500-b4cd-292be253de17\u201d"]},{"entry":[{},{},"\u2003\u201chardwareAddress\u201d: \u201caa:bb:11:22:33:06\u201d,"]},{"entry":[{},{},"\u2003\u201clogicalName\u201d: \u201ceth5\u201d"]},{"entry":[{},{},"\u2003},"]},{"entry":[{},{},"\u2003{"]},{"entry":[{},{},"\u2003\u201cid\u201d: \u201c993f02be-812e-4500-b4cd-292be253de18\u201d"]},{"entry":[{},{},"\u2003\u201chardwareAddress\u201d: \u201caa:bb:11:22:33:07\u201d,"]},{"entry":[{},{},"\u2003\u201clogicalName\u201d: \u201ceth6\u201d"]},{"entry":[{},{},"\u2003},"]},{"entry":[{},{},"\u2003{"]},{"entry":[{},{},"\u2003\u201cid\u201d: \u201c993f02be-812e-4500-b4cd-292be253de19\u201d"]},{"entry":[{},{},"\u2003\u201chardwareAddress\u201d: \u201caa:bb:11:22:33:08\u201d,"]},{"entry":[{},{},"\u2003\u201clogicalName\u201d: \u201ceth7\u201d"]},{"entry":[{},{},"\u2003},"]},{"entry":[{},{},"\u2003{"]},{"entry":[{},{},"\u2003\u201cid\u201d: \u201c993f02be-812e-4500-b4cd-292be253de20\u201d"]},{"entry":[{},{},"\u2003\u201chardwareAddress\u201d: \u201caa:bb:11:22:33:09\u201d,"]},{"entry":[{},{},"\u2003\u201clogicalName\u201d: \u201ceth8\u201d"]},{"entry":[{},{},"\u2003}"]},{"entry":[{},{},"\u2003]"]},{"entry":[{},{},"\u2003}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"In one embodiment, for concurrent updates, optimistic locking through the use of version number can be used.","In one embodiment, HTTP DELETE can be used for deleting a single resource. The format of the delete call can be as follows:\n\n","In some implementations, cascading deletes based on top-level object can be supported.","In one embodiment, for read API, the technology disclosed can support find and get functionality. Both of these can be implemented as HTTP GET methods. By default, all of its non-top-level children associations can be returned. If users need its parent association, users need to include that parent in the expand parameter which is explained below. If users need to limit the response with only certain properties, users need to use the field parameter below.","In one embodiment, top-level object reads can return the full object hierarchy that can include its non-top-level objects. Non-top-level object reads can return just that resource.","In one embodiment, Get is used when the ID of the resource is known and the goal is simply to return that resource. The get call can include the resource name and the ID of the resource to be retrieved. The format of the get call can be as follows:\n\n","An example call can be\n\n","In some implementations, the supported parameters can include \u201cfields\u201d and \u201cexpand.\u201d Fields can represent the limited list of properties that can be returned for a resource. If no field parameter is specified, then all properties of that resource can be returned. The \u201cfields\u201d can be filtered at resource-level, so if cluster name is used in \u201cfields\u201d, no matter where in object hierarchy cluster comes, it can be returned with name only.","In one embodiment, Expand can include the names of the associated resources that need to be expanded. If no expand parameter is specified, then the associated resources may not be included in the response. A value of \u201cnone\u201d means no association (children or parent) is to be included. This is useful if users want to capture the properties of a resource and can result in higher performance.","In some implementations, \u201cfind\u201d can be used to do more generic queries and support cross table selection criteria as well as returning nested objects. By default, all of its non-top-level children associations can be returned. If users need its parent association, users need to include that parent in the expand parameter which is explained below. If users need to limit the response with only certain properties, users need to use the field parameter below.","The optional parameters that can be supported on a find can be, for example:","start\u2014sets the position of the first row to retrieve to support pagination","limit\u2014sets the maximum number of records to return","fields\u2014the limited list of properties that can be returned for the resource. If no field parameter is specified then all properties of that resource can be returned. Including fields incurs additional cost on the CMS server side. The fields can be filtered at resource-level, so if cluster.name is used in fields, no matter where in object hierarchy cluster comes, it can be returned with name only.","search criteria\u2014name-value pairs that represent the field to be searched and the value the field. Note that the field to be searched is of the format {associated_resource.}field where associated_resource is not required if the field resides in the resource. This is basically to allow the query of an object graph to filter the result set.","For example, the following search criteria can exist for a resource host\n\n","which can ask for host resources that can be for cluster na1 and have application core as discovered through tables joined to the host object.","expand\u2014the names of the associated resources that need to be expanded. If no expand parameter is specified, then the associated resources may not be included in the response. Having \u201cexpand\u201d can incur additional cost on the CMS server side. The names of the potentially nested objects that can be returned on the response. A value of \u201cnone\u201d means no association (children or parent) can be included. This is useful if users want to capture the properties of a resource and can result in higher performance.","For example the following field specification can exist for a get of resource Superpod\n\n","The response to this call can return the Superpod as the main resource and can include the cluster, and host resources associated to that Superpod that met the selection criteria.","If users want to find Superpod with name=\u201cabcd\u201d.\n\n","This can return [\u201cid\u201d:\u201cabcd\u201d, \u201cname\u201d:\u201cabcd\u201d]. Superpod has associated resources of cluster but they may not be returned because it is not included in the expand parameter.","If users want to get clusters within a Superpod,\n\n","This can return superpod with the cluster resource.",{"@attributes":{"id":"p-0086","num":"0095"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003","{"]},{"entry":[{},{},"\u2003\u201csuccess\u201d: true,"]},{"entry":[{},{},"\u2003\u201cdata\u201d: ["]},{"entry":[{},{},"\u2003{"]},{"entry":[{},{},"\u2003\u201cname\u201d: \u201csp6\u201d,"]},{"entry":[{},{},"\u2003\u201cid\u201d: \u201ccc3f02be-812e-4500-b4cd-292be253de43\u201d"]},{"entry":[{},{},"\u2003\u201cclusters\u201d: ["]},{"entry":[{},{},"\u2003{"]},{"entry":[{},{},"\u2003\u201cname\u201d: \u201cna7\u201d,"]},{"entry":[{},{},"\u2003\u201cisDR\u201d: false,"]},{"entry":[{},{},"\u2003\u201coperationalStatus\u201d: \u201cPRE_PRODUCTION\u201d,"]},{"entry":[{},{},"\u2003\u201cenvironment\u201d: \u201cproduction\u201d,"]},{"entry":[{},{},"\u2003\u201cbuildType\u201d: \u201cnew\u201d,"]},{"entry":[{},{},"\u2003\u201cclusterType\u201d: \u201cpod\u201d"]},{"entry":[{},{},"\u2003}"]},{"entry":[{},{},"\u2003]"]},{"entry":[{},{},"\u2003}]"]},{"entry":[{},{},"\u2003\u201ctotal\u201d: 1"]},{"entry":[{},{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"In one embodiment, the APIs can have a version number as part of the URL. The clients need to specifically indicate which version they want to use.\n\n","If the APIs change drastically to another kind, the technology disclosed can change the URL path. For example, if users switch to an RPC type of API, the technology disclosed can update the API URL to be:\n\n","Security can be based on mutual authentication via TLS. In some implementations, the technology disclosed can also investigate supporting Kerberos to allow for users to authenticate for cases where the updates to CMS can be done through scripts or a user interface (UI).","In one embodiment, authenticated users can query all tables. For updates the following authorization models can be used",{"@attributes":{"id":"p-0091","num":"0102"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Resources","Authorization Strategy"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Data center\/pod\/super pod","authorized through LDAP or Kerberos"]},{"entry":["Application tables","LDAP or Kerberos"]},{"entry":"(future requirement)"},{"entry":["Inventory assets","if authenticated through certificate"]},{"entry":[{},"then updates automatically allowed."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"In some implementations, client libraries can be provided for Java and Perl. ConfigurationItem is the base object that all other objects, such as host, application, etc, extend. An instance of a top-level object can be passed in to these calls and the appropriate action can be taken. Note that for update, a get call must be issued in advance.\n\n","For gets and finds, there can be a GetParams object that can be populated with the following fields to inform how the get can be done. The fields can be\n\n","In some implementations, a get call for the resources can be made as follows:\n\n","In some implementations, a find call for the resources can be made as follows:\n\n","Software Components and Layers can include jetty, MVC, controller layer, service layer. These are specific examples as illustrated in  and other components can also be used. Jetty is the application server that powers the CMS APIs. It handles the HTTP requests and forwards it to Spring's Dispatcher servlet.","In one embodiment, users can utilize the Spring MVC framework to dispatch requests to the controllers.","Controller Layer\u2014This layer contains all the classes with a controller role. These classes use Spring's @Controller annotation. By using this annotation, user can inform Spring which service interfaces need to be invoked for certain URL's. This layer takes care of processing the HTTP input parameters and request body. Spring auto-serializes the response in the intended output format or media type.","Service Layer\u2014This layer contains all the classes with Spring's @Service annotation. Users put the business logic in this layer.","Repository\/DAO Layer\u2014This layer contains the classes with Spring's @Repository annotation to indicate that these can be the data access objects. This is where users use Hibernate to connect and make DB calls.","Hibernate is an object-relational mapping (ORM) tool to map the domain objects (POJOs) to the database tables and from Java data types to SQL data types. It supports optimistic locking automatically with the use of version numbers that users added in our domain objects. Users rely on Hibernate for the connection pool mechanism and actual DB calls. Users plan to use some of its annotations as well to indicate whether fields can be inserted, updated, etc.","Other implementations may include a non-transitory computer readable storage medium storing instructions executable by a processor to perform a method as described above. Yet another implementation may include a system including memory and one or more processors operable to execute instructions, stored in the memory, to perform a method as described above.",{"@attributes":{"id":"p-0103","num":"0125"},"figref":"FIG. 4","b":["410","410","412","414","416","417","418","420","422","424","426","428","410"]},"Environment  is an environment in which an on-demand database service exists. User system  may be any machine or system that is used by a user to access a database user system. For example, any of user systems  can be a handheld computing device, a mobile phone, a laptop computer, a work station, and\/or a network of computing devices. As illustrated in  (and in more detail in ) user systems  might interact via a network  with an on-demand database service, which is system .","An on-demand database service, such as system , is a database system that is made available to outside users that do not need to necessarily be concerned with building and\/or maintaining the database system, but instead may be available for their use when the users need the database system (e.g., on the demand of the users). Some on-demand database services may store information from one or more tenants stored into tables of a common database image to form a multi-tenant database system (MTS). Accordingly, \u201con-demand database service \u201d and \u201csystem \u201d will be used interchangeably herein.","A database image may include one or more database objects. A relational database management system (RDMS) or the equivalent may execute storage and retrieval of information against the database object(s). Application platform  may be a framework that allows the applications of system  to run, such as the hardware and\/or software, e.g., the operating system. In an embodiment, on-demand database service  may include an application platform  that enables creation, managing and executing one or more applications developed by the provider of the on-demand database service, users accessing the on-demand database service via user systems , or third party application developers accessing the on-demand database service via user systems .","The users of user systems  may differ in their respective capacities, and the capacity of a particular user system  might be entirely determined by permissions (permission levels) for the current user. For example, where a salesperson is using a particular user system  to interact with system , that user system has the capacities allotted to that salesperson. However, while an administrator is using that user system to interact with system , that user system has the capacities allotted to that administrator.","In systems with a hierarchical role model, users at one permission level may have access to applications, data, and database information accessible by a lower permission level user, but may not have access to certain applications, database information, and data accessible by a user at a higher permission level. Thus, different users will have different capabilities with regard to accessing and modifying application and database information, depending on a user's security or permission level.","Network  is any network or combination of networks of devices that communicate with one another. For example, network  can be any one or any combination of a LAN (local area network), WAN (wide area network), telephone network, wireless network, point-to-point network, star network, token ring network, hub network, or other appropriate configuration. As the most common type of computer network in current use is a TCP\/IP (Transfer Control Protocol and Internet Protocol) network, such as the global internetwork of networks often referred to as the \u201cInternet\u201d with a capital \u201cI,\u201d that network will be used in many of the examples herein. However, it should be understood that the networks that the present invention might use are not so limited, although TCP\/IP is a frequently implemented protocol.","User systems  might communicate with system  using TCP\/IP and, at a higher network level, use other common Internet protocols to communicate, such as HTTP, FTP, AFS, WAP, etc. In an example where HTTP is used, user system  might include an HTTP client commonly referred to as a \u201cbrowser\u201d for sending and receiving HTTP messages to and from an HTTP server at system . Such an HTTP server might be implemented as the sole network interface between system  and network , but other techniques might be used as well or instead. In some implementations, the interface between system  and network  includes load sharing functionality, such as round-robin HTTP request distributors to balance loads and distribute incoming HTTP requests evenly over a plurality of servers. At least as for the users that are accessing that server, each of the plurality of servers has access to the MTS' data; however, other alternative configurations may be used instead.","In one embodiment, system , shown in , implements a web-based customer relationship management (CRM) system. For example, in one embodiment, system  includes application servers configured to implement and execute CRM software applications as well as provide related data, code, forms, webpages and other information to and from user systems  and to store to, and retrieve from, a database system related data, objects, and Webpage content. With a multi-tenant system, data for multiple tenants may be stored in the same physical database object, however, tenant data typically is arranged so that data of one tenant is kept logically separate from that of other tenants so that one tenant does not have access to another tenant's data, unless such data is expressly shared.","In certain embodiments, system  implements applications other than, or in addition to, a CRM application. For example, system  may provide tenant access to multiple hosted (standard and custom) applications, including a CRM application. User (or third party developer) applications, which may or may not include CRM, may be supported by the application platform , which manages creation, storage of the applications into one or more database objects and executing of the applications in a virtual machine in the process space of the system .","One arrangement for elements of system  is shown in , including a network interface , application platform , tenant data storage  for tenant data , system data storage  for system data  accessible to system  and possibly multiple tenants, program code  for implementing various functions of system , and a process space  for executing MTS system processes and tenant-specific processes, such as running applications as part of an application hosting service. Additional processes that may execute on system  include database indexing processes.","Several elements in the system shown in  include conventional, well-known elements that are explained only briefly here. For example, each user system  could include a desktop personal computer, workstation, laptop, PDA, cell phone, or any wireless access protocol (WAP) enabled device or any other computing device capable of interfacing directly or indirectly to the Internet or other network connection. User system  typically runs an HTTP client, e.g., a browsing program, such as Microsoft's Internet Explorer browser, Netscape's Navigator browser, Opera's browser, or a WAP-enabled browser in the case of a cell phone, PDA or other wireless device, or the like, allowing a user (e.g., subscriber of the multi-tenant database system) of user system  to access, process and view information, pages and applications available to it from system  over network .","Each user system  also typically includes one or more user interface devices, such as a keyboard, a mouse, trackball, touch pad, touch screen, pen or the like, for interacting with a graphical user interface (GUI) provided by the browser on a display (e.g., a monitor screen, LCD display, etc.) in conjunction with pages, forms, applications and other information provided by system  or other systems or servers. For example, the user interface device can be used to access data and applications hosted by system , and to perform searches on stored data, and otherwise allow a user to interact with various GUI pages that may be presented to a user. As discussed above, embodiments are suitable for use with the Internet, which refers to a specific global internetwork of networks. However, it should be understood that other networks can be used instead of the Internet, such as an intranet, an extranet, a virtual private network (VPN), a non-TCP\/IP based network, any LAN or WAN or the like.","According to one embodiment, each user system  and all of its components are operator configurable using applications, such as a browser, including computer code run using a central processing unit such as an Intel Pentium\u00ae processor or the like. Similarly, system  (and additional instances of an MTS, where more than one is present) and all of their components might be operator configurable using application(s) including computer code to run using a central processing unit such as processor system , which may include an Intel Pentium\u00ae processor or the like, and\/or multiple processor units.","A computer program product embodiment includes a machine-readable storage medium (media) having instructions stored thereon\/in which can be used to program a computer to perform any of the processes of the embodiments described herein. Computer code for operating and configuring system  to intercommunicate and to process webpages, applications and other data and media content as described herein are preferably downloaded and stored on a hard disk, but the entire program code, or portions thereof, may also be stored in any other volatile or non-volatile memory medium or device as is well known, such as a ROM or RAM, or provided on any media capable of storing program code, such as any type of rotating media including floppy disks, optical discs, digital versatile disk (DVD), compact disk (CD), microdrive, and magneto-optical disks, and magnetic or optical cards, nanosystems (including molecular memory ICs), or any type of media or device suitable for storing instructions and\/or data.","Additionally, the entire program code, or portions thereof, may be transmitted and downloaded from a software source over a transmission medium, e.g., over the Internet, or from another server, as is well known, or transmitted over any other conventional network connection as is well known (e.g., extranet, VPN, LAN, etc.) using any communication medium and protocols (e.g., TCP\/IP, HTTP, HTTPS, Ethernet, etc.) as are well known. It will also be appreciated that computer code for implementing embodiments of the present invention can be implemented in any programming language that can be executed on a client system and\/or server or server system such as, for example, C, C++, HTML, any other markup language, Java\u2122 JavaScript, ActiveX, any other scripting language, such as VBScript, and many other programming languages as are well known may be used. (Java\u2122 is a trademark of Sun Microsystems, Inc.).","According to one embodiment, each system  is configured to provide webpages, forms, applications, data and media content to user (client) systems  to support the access by user systems  as tenants of system . As such, system  provides security mechanisms to keep each tenant's data separate unless the data is shared. If more than one MTS is used, they may be located in close proximity to one another (e.g., in a server farm located in a single building or campus), or they may be distributed at locations remote from one another (e.g., one or more servers located in city A and one or more servers located in city B).","As used herein, each MTS could include one or more logically and\/or physically connected servers distributed locally or across one or more geographic locations. Additionally, the term \u201cserver\u201d is meant to include a computer system, including processing hardware and process space(s), and an associated storage system and database application (e.g., OODBMS or RDBMS) as is well known in the art. It should also be understood that \u201cserver system\u201d and \u201cserver\u201d are often used interchangeably herein. Similarly, the database object described herein can be implemented as single databases, a distributed database, a collection of distributed databases, a database with redundant online or offline backups or other redundancies, etc., and might include a distributed database or storage network and associated processing intelligence.",{"@attributes":{"id":"p-0121","num":"0143"},"figref":["FIG. 5","FIG. 5","FIG. 5","FIG. 5","FIG. 5"],"b":["410","416","412","412","412","412","412","414","416","416","422","423","424","425","530","532","534","536","538","500","500","502","504","510","512","514","516","410"],"sub":["1","N"]},"User system , network , system , tenant data storage , and system data storage  were discussed above in . Regarding user system , processor system A may be any combination of one or more processors. Memory system B may be any combination of one or more memory devices, short term, and\/or long term memory. Input system C may be any combination of input devices, such as one or more keyboards, mice, trackballs, scanners, cameras, and\/or interfaces to networks. Output system D may be any combination of output devices, such as one or more monitors, printers, and\/or interfaces to networks.","As shown by , system  may include a network interface  (of ) implemented as a set of HTTP application servers , an application platform , tenant data storage , and system data storage . Also shown is system process space , including individual tenant process spaces  and a tenant management process space . Each application server  may be configured to tenant data storage  and the tenant data  therein, and system data storage  and the system data  therein to serve requests of user systems . The tenant data  might be divided into individual tenant storage spaces , which can be either a physical arrangement and\/or a logical arrangement of data.","Within each tenant storage space , tenant data  and application metadata  might be similarly allocated for each user. For example, a copy of a user's most recently used (MRU) items might be stored to tenant data . Similarly, a copy of MRU items for an entire organization that is a tenant might be stored to tenant storage space . A UI  provides a user interface and an API  provides an application programmer interface to system  resident processes to users and\/or developers at user systems . The tenant data and the system data may be stored in various databases, such as one or more Oracle\u2032 databases.","Application platform  includes an application setup mechanism  that supports application developers' creation and management of applications, which may be saved as metadata into tenant data storage  by save routines  for execution by subscribers as one or more tenant process spaces  managed by tenant management process  for example. Invocations to such applications may be coded using PL\/SOQL  that provides a programming language style interface extension to API .","A detailed description of some PL\/SOQL language embodiments is discussed in commonly owned co-pending U.S. Provisional Patent Application 60\/828,192 entitled, PROGRAMMING LANGUAGE METHOD AND SYSTEM FOR EXTENDING APIS TO EXECUTE IN CONJUNCTION WITH DATABASE APIS, by Craig Weissman, filed Oct. 4, 2006, which is incorporated in its entirety herein for all purposes. Invocations to applications may be detected by one or more system processes, which manages retrieving application metadata  for the subscriber making the invocation and executing the metadata as an application in a virtual machine.","Each application server  may be communicably coupled to database systems, e.g., having access to system data  and tenant data , via a different network connection. For example, one application server might be coupled via the network  (e.g., the Internet), another application server might be coupled via a direct network link, and another application server might be coupled by yet a different network connection. Transfer Control Protocol and Internet Protocol (TCP\/IP) are typical protocols for communicating between application servers  and the database system. However, it will be apparent to one skilled in the art that other transport protocols may be used to optimize the system depending on the network interconnect used.","In certain embodiments, each application server  is configured to handle requests for any user associated with any organization that is a tenant. Because it is desirable to be able to add and remove application servers from the server pool at any time for any reason, there is preferably no server affinity for a user and\/or organization to a specific application server . In one embodiment, therefore, an interface system implementing a load balancing function (e.g., an F5 Big-IP load balancer) is communicably coupled between the application servers  and the user systems  to distribute requests to the application servers .","In one embodiment, the load balancer uses a least connections algorithm to route user requests to the application servers . Other examples of load balancing algorithms, such as round robin and observed response time, also can be used. For example, in certain embodiments, three consecutive requests from the same user could hit three different application servers , and three requests from different users could hit the same application server . In this manner, system  is multi-tenant, wherein system  handles storage of, and access to, different objects, data and applications across disparate users and organizations.","As an example of storage, one tenant might be a company that employs a sales force where each salesperson uses system  to manage their sales process. Thus, a user might maintain contact data, leads data, customer follow-up data, performance data, goals and progress data, etc., all applicable to that user's personal sales process (e.g., in tenant data storage ). In an example of a MTS arrangement, since all of the data and the applications to access, view, modify, report, transmit, calculate, etc., can be maintained and accessed by a user system having nothing more than network access, the user can manage his or her sales efforts and cycles from any of many different user systems. For example, if a salesperson is visiting a customer and the customer has Internet access in their lobby, the salesperson can obtain critical updates as to that customer while waiting for the customer to arrive in the lobby.","While each user's data might be separate from other users' data regardless of the employers of each user, some data might be organization-wide data shared or accessible by a plurality of users or all of the users for a given organization that is a tenant. Thus, there might be some data structures managed by system  that are allocated at the tenant level while other data structures might be managed at the user level. Because an MTS might support multiple tenants including possible competitors, the MTS should have security protocols that keep data, applications, and application use separate. Also, because many tenants may opt for access to an MTS rather than maintain their own system, redundancy, up-time, and backup are additional functions that may be implemented in the MTS. In addition to user-specific data and tenant specific data, system  might also maintain system level data usable by multiple tenants or other data. Such system level data might include industry reports, news, postings, and the like that are sharable among tenants.","In certain embodiments, user systems  (which may be client systems) communicate with application servers  to request and update system-level and tenant-level data from system  that may require sending one or more queries to tenant data storage  and\/or system data storage . System  (e.g., an application server  in system ) automatically generates one or more SQL statements (e.g., one or more SQL queries) that are designed to access the desired information. System data storage  may generate query plans to access the requested data from the database.","Each database can generally be viewed as a collection of objects, such as a set of logical tables, containing data fitted into predefined categories. A \u201ctable\u201d is one representation of a data object, and may be used herein to simplify the conceptual description of objects and custom objects according to the present invention. It should be understood that \u201ctable\u201d and \u201cobject\u201d may be used interchangeably herein. Each table generally contains one or more data categories logically arranged as columns or fields in a viewable schema. Each row or record of a table contains an instance of data for each category defined by the fields.","For example, a CRM database may include a table that describes a customer with fields for basic contact information such as name, address, phone number, fax number, etc. Another table might describe a purchase order, including fields for information such as customer, product, sale price, date, etc. In some multi-tenant database systems, standard entity tables might be provided for use by all tenants. For CRM database applications, such standard entities might include tables for Account, Contact, Lead, and Opportunity data, each containing pre-defined fields. It should be understood that the word \u201centity\u201d may also be used interchangeably herein with \u201cobject\u201d and \u201ctable\u201d.","In some multi-tenant database systems, tenants may be allowed to create and store custom objects, or they may be allowed to customize standard entities or objects, for example by creating custom fields for standard objects, including custom index fields. U.S. patent application Ser. No. 10\/817,161, filed Apr. 2, 2004, entitled \u201cCustom Entities and Fields in a Multi-Tenant Database System\u201d, and which is hereby incorporated herein by reference, teaches systems and methods for creating custom objects as well as customizing standard objects in a multi-tenant database system. In certain embodiments, for example, all custom entity data rows are stored in a single multi-tenant physical table, which may contain multiple logical tables per organization. It is transparent to customers that their multiple \u201ctables\u201d are in fact stored in one large table or that their data may be stored in the same table as the data of other customers.","Reference in the specification to \u201cone embodiment\u201d or \u201can embodiment\u201d means that a particular feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment of the invention. The appearances of the phrase \u201cin one embodiment\u201d in various places in the specification are not necessarily all referring to the same embodiment.","While the invention has been described in terms of several embodiments, those skilled in the art will recognize that the invention is not limited to the embodiments described, but can be practiced with modification and alteration within the spirit and scope of the appended claims. The description is thus to be regarded as illustrative instead of limiting."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The included drawings are for illustrative purposes and serve only to provide examples of possible structures and process operations for one or more implementations of this disclosure. These drawings in no way limit any changes in form and detail that may be made by one skilled in the art without departing from the spirit and scope of this disclosure. A more complete understanding of the subject matter may be derived by referring to the detailed description and claims when considered in conjunction with the following figures, wherein like reference numbers refer to similar elements throughout the figures.",{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
