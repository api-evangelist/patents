---
title: Automatic generation of user stories for software products via a product content space
abstract: Exemplary embodiments include a computer-implemented method for generating agile user stories, the method including collecting, by a processor, a plurality of requirements, creating, by the processor, a plurality of content space specification files that includes the plurality of requirements, processing, by the processor, the plurality of content space specification files to generate the user stories and outputting, by the processor, the user stories.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09182945&OS=09182945&RS=09182945
owner: International Business Machines Corporation
number: 09182945
owner_city: Armonk
owner_country: US
publication_date: 20121010
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATION","BACKGROUND","SUMMARY","DETAILED DESCRIPTION","EXAMPLE"],"p":["This application is a continuation of U.S. patent application Ser. No. 13\/070,675, filed Mar. 24, 2011, the disclosure of which is incorporated by reference herein in its entirety.","The present invention relates to software development, and more specifically, to automatically generating user stories for software products.","As part of developing products and applications, particularly software products and applications, requirements are determined, usually from a wide variety of sources, such as stake-holders, strategy people, customers, marketing, industry trends, standards organizations, and more. Through various channels, a detailed technical plan of activities for the software development team is derived from the requirements, which can interact in complex ways. The process of generating detailed implementation plans from requirements is subject to errors from various sources. Multiple concurrent dialogs among teams, making assumptions and decisions in parallel, can propagate errors, which can become built into the project plans and the product architecture and or designs. As such, business results such as time to market, development cost, product viability to compete in the marketplace, and the like can affected.","Use cases have long been implemented to organize and itemize requirements for software products or application software. Use cases bridge the gap between business and market knowledge, and system design, by focusing on the user interactions with the system. The breakdown of requirements into use case or line items frequently occurs in parallel with, and is in dialog with, the architects and design leaders. During the time frame that requirements are collected and analyzed, the requirements are subject to change which must be reflected in the line items or use cases. In addition, new requirements are brought up and must be analyzed and fit with the existing line items or use cases. Some requirements are eliminated, with corresponding impacts on line items or use cases. Use cases continue to have problems of various kinds such as questions of completeness, understandability, uniqueness and manageability. What is needed is a method for generating user stories that leads to less rework, accelerated delivery and better business value.","Exemplary embodiments include a computer-implemented method for generating agile user stories, the method including collecting, by a processor, a plurality of requirements, creating, by the processor, a plurality of content space specification files that includes the plurality of requirements, processing, by the processor, the plurality of content space specification files to generate the user stories and outputting, by the processor, the user stories.","Further exemplary embodiments include a computer-implemented method for generating agile user stories, the method including collecting a plurality of requirements, defining a content space including a plurality of cells, each cell defining an agile user story, each cell having a plurality of dimensions, creating a plurality of content space specification files that includes the plurality of requirements, traversing at least one dimension of each of the plurality of cells to generate a user story and generating reports defining each of the agile user stories.","Additional features and advantages are realized through the techniques of the present invention. Other embodiments and aspects of the invention are described in detail herein and are considered a part of the claimed invention. For a better understanding of the invention with the advantages and the features, refer to the description and to the drawings.","Exemplary embodiments include systems and methods for automatically generating end-to-end use cases (i.e., agile user stories) from requirements such that the set of generated use cases is complete (i.e., fully addresses all requirements, including some future requirements) and non-overlapping (i.e., every user story is assured to be distinct from all others). In addition, the relative size and scope of user stories is adjustable to fit the needs of project management, planning, team focus, and the like.","Typically, a software development project is broken down into \u2018line items\u2019 or \u2018use cases\u2019, which are derived informally from requirements. This process of decomposition of requirements into line items or use cases is manual and labor intensive, requiring the expertise of technical leaders, project managers and the development people. The line items or use cases are then further decomposed into smaller and smaller units of schedulable work that can be assigned to individuals on the development team. The exemplary systems and methods described herein automatically generate the line items or use cases themselves, based on requirements. The term \u2018user story\u2019 is used for the line items or use cases. Typical problems associated with software product and development team requirements include, but are not limited to: 1) requirements from various sources; 2) overlapping requirements; 3) requirements interactions; 4) requirements not addressing entire scope of problem; 5) requirements hierarchy; 6) parallel teams doing requirement breakdown; 7) changing requirements; and 8) requirements timelines.","After the list of line items or use cases is obtained, the key questions about them can be difficult to answer. Inquiries about line items or use cases can include but are not limited to: 1) whether or not the list of use cases is complete and whether it represents everything needed for a given release, and covers all implicit requirements; 2) whether there are gaps in the list of line items or use cases, that is, areas where some requirement possibly exists, or is assumed to exist, and yet is uncovered by any line item or use case; 3) whether all requirements are represented and expressed in the use cases; and 4) how the design is broken up, that is by use case, by requirement and the like.","In exemplary embodiments, the systems and methods described herein servers to bridge the requirements domain and the implementation (development) domain. Requirements involve marketing, existing customers, product owners, strategists, standards organizations, etc. The implementation domain consists of technical architects, technical leaders, project managers, developers, information development, test organizations, and the like. The exemplary systems and methods systematically organize the dialogue between the groups, and automate the generation of agile user stories. The generated user stories then define software product release content and can directly be used in various project management tools, as further described herein.","In exemplary embodiments, a five-dimensional space, termed either as a \u2018software product content space\u2019 or a \u2018content space\u2019 is defined such that each cell within the content space is an end-to-end use case (i.e., agile user story). In exemplary embodiments, the systems and methods described herein can be implemented at various levels of scale, from individual software components to very large products comprising hundreds of components. The five dimensions structure the work as needed by software development (i.e., design, test, project management), and the requirements serve to define the values used on the dimensions. As such, the exemplary content space servers to bridge the requirements domain and implementation domain.",{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 1","b":["100","100"]},"In exemplary embodiments, content space (CS) specification files  are generated from the various sources in the requirements domain as described herein. As described further herein, the content space specification files are generated from various requirements . A content space tool  receives the content specification files  to automatically generate the agile user stories that can be stored in a user story storage medium . An additional storage medium  can be implemented to store changes to the specification files , or any other suitable output during the content space generation. Once generated, the agile user stories can be output to any suitable project management or test management tool  implemented by the users in the development domain.","The system  includes several functions, including, but not limited to: 1) articulating the content space; 2) classifying regions of the content space; 3) grouping the regions of the content space; 4) assigning priorities to use cases; and 5) loading the project management tool.","In articulating the content space, requirements are analyzed in terms of the five content space dimensions. This analysis results in (with iteration and consensus building) a definition of values for each of the five dimensions, which is represented in a form that can be programmatically processed. In articulating the content space, the systems and methods described herein address whether all the requirements are represented in the content space, whether each content space dimension value is properly defined and agreed upon, and whether all the dimension values are related to explicit, implicit or future requirements.","In classifying the regions of the content space, once the team is satisfied that the content space is defined (i.e., all dimension values known, understood, and reasonably well-defined) and that it does encompass all the requirements for a selected time-frame, the team next decides on how to classify regions of the content space. Through automated systems with team decisions, every cell in the content space is categorized in a variety of types, including, but not limited to: 1) does not apply to the product; 2) does apply to the product but for some future release; 3) is part of the product today (or from some prior release) and has no enhancements or changes; 4) is part of the product today and is enhanced or changed in some way; and 5) is a new or an enhanced function. The systems and methods described herein determine whether each content space dimension value is classified, and reviews of the results determine correctness.","Following agreement on the content space and categorization of regions, the content space regions are then grouped. Subsets of the content space are grouped together into a size which is desirable for project management and the scale of the product and teams. This step applies particularly to the content space regions classified as unchanged and new or enhanced (changed). The two extremes are; an entire content space can grouped into a single output project management work item, or at the other extreme every single content space cell can be output as a single project management line item. Essentially every possible grouping in between these extremes is also supported. Typically used are grouping all new & changed user stories for a particular platform or grouping specific sub-variations of a verb.","In exemplary embodiments, there is flexibility in how these regions are selected and how they related to the content space cell classifications. The systems and methods described herein determine whether the grouping is correct and do the groupings properly reflect the tradeoff between project management needs and technical visibility based on classifications and complexity.","The grouping of content space cells into right sized project management work items mostly focused on a new function and an existing and unchanged function. The user (team) can programmatically select the grouping of content space cells based on many considerations such overall content space size, product size, degree of technical difficulty of new function, team size, number of team, and the like. In exemplary embodiments, individual content cells are use cases (with adjustable granularity) and the groupings are user functions or user stories.","Based on the relative priorities of requirements, regions of the content space (subsets of use cases) are assigned priority values. These can be used to help focus review sessions to ensure the right higher priority content is defined. When loaded into a project management application, the priorities can be used directly by development in Agile sprint (iteration) planning. The output project management work items are input (e.g. \u2018import\u2019) for example, from the user story storage medium , into an appropriate project management tool .","As described herein, a content space is defined by five dimensions. In exemplary embodiments, the five dimensions of the content space are, in order: release (time); noun; verb; interface; and platform. The three dimensions, verb, interface and platform, are orthogonal and noun-specific. That is, an instance of these (e.g. a verb set, an interface set and a platform set) is defined for each noun of interest. Nouns are the fourth dimension. The combination of a noun and its associated 3D space is termed a \u2018noun space\u2019. A set of noun spaces at a given point in time (usually associated with product release) constitute the definition of the content space for a particular release of a product (when the point in time is chosen on a release calendar boundary). Instances a product content space for multiple releases represent the fifth dimension of content space: time.","For illustrative purposes, an example of a software product, a hypothetical browser-based email client is discussed for ease of discussion. It will be appreciated that other products are contemplated",{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 2","b":["201","202","203","204","205"]},"The platform dimension  is interpreted broadly to include the hardware, operating system, middle ware, hypervisor, and language runtime in which the product executes. Generally, meaningful platform elements are determined by each product. As such, the entire prerequisite software stack and hardware is considered. Values of the platform dimension  can include specific releases of each of these platform components as needed, or can be more generally specified. For example, a platform might be AIX 5.2 or just AIX. Or it might be Firefox 3.6 or better, or just Firefox. Values can include as needed ancillary hardware for storage, networking, hardware management controllers, firmware, etc. for the full functional system configuration.","The interface dimension  has values chosen to identify and separate the kinds of interfaces that the subject software presents to external entities; people, other software or hardware. The values can be specified by type such as Graphical User Interface (GUI), command line interface (CLI), and so on. The values can include programmable interfaces such as web services (e.g. REST) and APIs. Protocols can also be specified as values (e.g. IPv6 or MPI (Message Processing Interface) used in super-computing environments).","The verb dimension  includes values such as functions or operations that are supported by the subject software for a particular noun. The operations may be specified at varying levels of granularity, depending upon the needs of a given set of requirements. For example \u2018copy\u2019 or \u2018create\u2019 might be sufficient. More fine-grained values such \u2018copy to like repository\u2019 and \u2018copy to new folder\u2019 can also be used. The decision depends on considerations like how new the function is, or how critical the different forms of copy are to the product stake-holders (those that define requirements), or how technically difficult to implement.","The noun dimension  is an abstract entity presented to externals via the interface(s). Most software for direct use by people has a number of such abstractions that people manipulate via the functions (verbs) presented by the software. Example nouns for an email client can include but are not limited to: inbox; inbox email; folder; and draft email. As with values on the above dimensions, there is flexibility in how coarse-grained or fine-grained the nouns are defined. The right level of noun dimension granularity for a given product and given release depends on the requirements.","The time dimension  values include natural values (i.e., discrete units) which are the releases planned for the product. The content space for release n+1 can be various additions and changes relative to the release n content space. These additions, enhancements and other changes affect the release n content space by changing the values defined on the various dimensions. New nouns, new verbs, new platforms, can all be added. Enhancements to exiting nouns and verbs are common are defined explicitly in the n+1 content space.","Because of the way the dimensions are defined, each generated user story is an end-to-end testable unit of function (sometimes termed \u2018FVT-able\u2019, where FVT=Function Verification Test). For example, for an \u201cemail\u201d client each user story is a cell in the five-dimensional space with coordinates of release, noun, verb, interface and platform. For example, \u201csend an email on Firefox via GUI release n\u201d is represented by a 5-tuple {release n, email, send, GUI, Firefox}, as shown in .",{"@attributes":{"id":"p-0045","num":"0044"},"figref":["FIG. 3","FIG. 1"],"b":["100","110","105","305","110","110","105","105","310","315","320","325","305","310","315","320","325"]},"In exemplary embodiments, a content space is specified in a form that is processed (read) by the content space tool  (e.g., an Agile user story generation program). The specification can be split among multiple files (e.g., the content space specification files ), which can be processed individually or together. As such, an overall product content space can be split among some number of individual architects for parallel concurrent activity, and then processed as a whole.","In exemplary embodiments, each content space specification file  includes some number of noun spaces, defined symbols, and filters. A content space specification file is used to define a content space in a form that can be processed programmatically. In exemplary embodiments, the specification is implemented to generate user stories and provide various kinds of statistics about the content space, enables content coverage metric, automated comparisons of multiple content spaces (e.g. cross-release), and the like. In exemplary embodiments, the content space specification file  includes several statements, which define, among other things, a noun space, that can include noun, verb, interface (ifc) and platform. A content space is a set of noun spaces. As such, a basic content space specification file defines one or more noun spaces. Descriptive names are used for the values on all these dimensions. In exemplary embodiments, additional statements can be added to the content space specification file . On statement is symbol (SYM) to simplify maintenance of the content space specification file  by reducing redundancy across noun space definitions. Another statement is a filter statement that is used to classify user stories, and to add information to output user stories. In exemplary embodiments, each instance of statements as a group, defines a single noun space. For example, the noun statement gives the noun space a name, and the other verb, interface and platform statements provide the values for which each dimension is named.  illustrates an example of a noun space definition  in accordance with exemplary embodiments.","As further described herein, a sym statement is a simple mechanism to create a short-hand for a list of values. The short-hand can then be used in defining noun spaces (e.g. in \u2018noun\u2019, \u2018verb\u2019, \u2018ifc\u2019, \u2018platform\u2019 statements), in other sym statements, and in filter statements. This implementation of sym statements therefore simplifies use and later changes to the content specification file since the list of related values can reliably changed throughout a set of specification files by changing it in only a single place. For example, assume a content space has 15 noun spaces and 12 of those all use the same platform list. Then that list can defined once as a sym and that sym name used in the 12 noun spaces.  illustrates an example of a symbol definition  in accordance with exemplary embodiments. The example illustrates a group of related syms that aggregates various example platforms. The sym \u2018all email env\u2019 is then used to in the definition of various noun spaces, for example in the \u2018draft email\u2019 noun space shown in .","The symbols in  that end in a trailing \u2018_\u2019 (underbar) are fold syms, as is the \u2018send_\u2019 in . The \u2018_\u2019 indicates a symbol that can be folded. If the relevant type of value folding is requested (e.g. verb value to fold verb dimension, or platform value to fold platform dimension) then the symbols marked with a trailing \u2018_\u2019 are folded. That is, the symbol itself is used in the content space when folded. If not folded the symbol's value list is used in the content space. When folded a symbol is shown in generated user stories with the trailing \u2018_\u2019 so that everyone seeing the user story will know it is folded (is an abstraction).","As further described herein, filter statements are used to classify user stories into one of five categories; n\/a, future, nochange, changed or new. They also can add to a story a variety of information. A filter statement has the general structure: filter, <expression>, <classification>, <other requests>. The filter expression is a logical expression (i.e., evaluates to True or False) based on the language of the content the content space tool . For example, logical operators are supported (i.e., =, !=, >, <, in, not in, etc.) and the variables allowed are \u2018noun\u2019, \u2018verb\u2019, \u2018ifc\u2019, \u2018platform\u2019 and defined symbols (sym's).  illustrates examples of filter statements . Other keyword-value pairs which may be included in a filter statement include but are not limited to: 1) Owner, owner name; 2) Group or Groupby request; 3) Priority, priority value; 3) Testid, testid value; and 4) Tag, list of tag values. By default, filtering is done after all the content space specification files  have been read and after folding is performed. The content space tool  has an option to turn off all filtering which is useful at time to check the results of content space changes.","In exemplary embodiments, the content space specification files  can implement additional statements, including, but not limited to: 1) comment_off\u2014used to end commented-out block of lines; 2) comment_on\u2014used to start a block of comment lines. Starts skipping; 3) createdby\u2014used to set the field \u2018Created By\u2019; 4) csvfile\u2014sets the name of the output .csv file; 5) eof\u2014logically ends file early (rest of file skipped); 6) include\u2014name a file to be included; 7) plannedfor\u2014used to set the RTC field \u2018Planned For\u2019; 8) scope\u2014used to set filter scope to file (default) or global; 9) set_filterid_in_summaryfield\u2014true or false (default); 10) set_implicit_folding\u2014true or false (default); 11) set_summary_prefix\u2014Default is \u201cUser Story\u201d; 12) set_summary_suffix\u2014Default is category of the user story; 13) tag_exclusion_set\u2014Define a mutually exclusive set of tags; and 14) title\u2014title (label) of content space.","As described herein, the specification supports the definition of symbols used in the defining the values and in the filters, that is, used within the content space specification file itself. This format helps maintain a content space specification by lessening duplication of constants (i.e., dimension values). This format also serves to help the specification file be self-documenting when description names are used for the symbols. For example, a list of platforms used in a prior release might be assigned to a symbol named \u2018prior_platforms\u2019. This symbol is then used in the noun spaces as a short-hand for the full list. This symbol can also be used in the filters.","Each use case in a content space is classified using filters into basic categories including, but not limited to: not applicable, future, regression and development. \u201cNot applicable\u201d are use cases judged to likely never be relevant for the product and future are use cases not in the n+1 release but inherent in the content space. In exemplary embodiments, the content space is identified to clearly encompass the requirements to help ensure nothing is missed. In doing so, some use cases are likely to be generated that are not planned for the current release.","In exemplary embodiments, filters are also implemented to add information to the generated use cases. Examples of information that can be added are priority, tags, references to requirements document and the like.","In exemplary embodiments, filters are also implemented to cause sets of use cases to be grouped into a single, broader output use case. Implementing filters in this manner can be helpful in the case regression use cases where fine-grained management and tracking of the individual use cases is not necessary (e.g., due to the existence of automated testing built during previous releases).","In generating the agile use cases, one or more content space specification files  are read by the content space tool . As described herein, a primary output is the user story storage medium . In exemplary embodiments, the user story storage medium can have a comma separated value (.csv) file format, which is a quasi-standard widely used by many software applications. A second type of output is the additional storage medium  for various summary and report like information or in progress changes.",{"@attributes":{"id":"p-0057","num":"0056"},"figref":["FIG. 7","FIG. 3","FIG. 3"],"b":["700","105","305","705","110","105","105","110","105","710","110","710","110","310","710","715","110","715","720","110","705","715","725","110","725","730","110","705","725","735","110","735","740","110","705","735","745","110","105","755","750","110","705","745","745","110"]},{"@attributes":{"id":"p-0058","num":"0057"},"figref":["FIG. 8","FIG. 3","FIG. 3"],"b":["800","310","805","110","805","110","805","110","815","815","110","815","110","315","815","110","820"]},"In exemplary embodiments, both grouping and folding are techniques to manage content space size. The size of a content space is naturally expressed as the number of user stories it contains, or will output if requested. For example, in software products, content space sizes in range of hundreds to over thirty million. Average sizes can be in the range of two thousand to twenty thousand. Both folding and grouping can manage content space size without eliminating detail from the content space specification files .","In grouping user stories, a set of user stories is represented in output as a single user story. For example all the user stories for platform ABC or for function XYZ might be represented by a single output user story. Grouping does not change the size of a content space. Grouping allows the number of output user stories to be directly managed without eliminating any details from the CS specification. There is no limit on the size of a user story group. In exemplary embodiments, grouping is controlled by the user by filters in the content space specification file .","As filtering occurs, when a filter matches a user story and the filter has any kind of grouping requested, save the user story is saved in a buffer associated with the filter. After all filtering and all non-grouped user stories are output. The content space tool  loops through all the filters that have any kind of grouping. For each filter, the content space tool performs several steps. First, if a simple \u2018group\u2019 is requested in the filter, the content space tool  generates the single grouping user story, summary field, description field, and the like, and writes to output. The content space tool  then continues to the next filter. If a type of \u2018group by\u2019 is requested, then for each group by element (e.g. noun, verb, ifc, platform), the content space tool  builds subsets of the respective values on the dimension from among the buffered user stories. The content space tool  then generates a single user story group for each cross-dimension subset, generates the description field that itemizes the subset of user stories for the group, and writes the user story group.","Folding also reduces the number of output user stories like grouping. But in contrast to grouping, folding reduces the size of the content space. Folding reduces the size of the content space by collecting some number of dimension element values into a single value. The resulting single value is then used as a dimension element value in place of the multiple collected values, thereby reducing the size of the content space. The single resulting value is termed a folding symbol (\u2018fold sym\u2019).","As described herein, folding does not eliminate the details from the content space specification file. The values collected into a fold sym remain in the content space specification file , and the folding done by the fold sym can be toggled on or off. The value-folding can be switched on and off for each of the noun, verb, interface and platform dimensions independently or all 4 dimensions together. Hence not only are the values still in the spec file, but the content space can also be processed again and user stories generated without folding or different folding, to see the detail. As shown in , folding can include both dimension folding and value folding.","In exemplary embodiments, the content space tool  processes command line parameters to determine what kinds of folding are requested. If no fold parameter, the content space tool  implements the default setting for folding. As the content space specification files  are read, the content space tool  collects a list of all fold syms, and values for each. After all the noun spaces are read from input files, the content space tool  invokes a fold function. As shown in , the content space tool implements dimension folding first if requested. For each dimension for which folding is requested, the dimension is folded to \u201cp\u201d in each noun space. If value folding is requested for any dimensions that have not been folded, the following steps are implemented. If noun value folding, the content space tool  folds the noun values by removing nouns in value list of a fold sym and replace with single instance of the fold sym. For each (remaining) noun space, for each relevant dimension, the content space tool  check each dimension value to see if it is in the value list of a fold sym. If the noun is in the value list of the fold sym, then the content space tool  removes the value and adds the fold sym (once only) to the dimension list. If folding has been set off, the content space tool  takes no action. The content space by default is loaded in this mode. If fold request for the \u2018all\u2019 or similar, the interface and platform dimensions are folded (as above) and the verb dimension is value-folded for all noun spaces are folded, and the noun dimension is value-folded.",{"@attributes":{"id":"p-0065","num":"0064"},"figref":["FIG. 9","FIG. 3","FIG. 3"],"b":["900","315","905","110","204","110","900","910","110","203","202","201","915","110","105","110","920","920","110","915","920","110","925","930","105","915","925","110","115","900","905","910","915","204","115","115"]},"As described with respect to , as the content space tool  loops through each noun , the content space tool  also continues with block  as shown in .  illustrates a method  for generating user story groups in accordance with exemplary embodiments and as shown at block  in . At block , the content space tool  loops through grouping filters and also continues at block  in . In addition, at block , the content space tool  loops through groups requested. At block , the content space tool  writes the user story group requested. The content space tool also accumulates counts and statistics as the noun spaces are traversed, and the requested outputs (e.g., report-like and .csv file) are written to the additional storage mediums .",{"@attributes":{"id":"p-0067","num":"0066"},"figref":["FIG. 11","FIG. 3"],"b":["1100","325","110","1105","120","1110","120","1115","120","1120","120","1125","120","1130","120"]},"Referring again to , the exemplary content space tool  receives requirements  from various sources and automatically generates agile user stories for the software development team. The following example described herein describes a scenario in which requirements are gathered via an email, similar to the illustrative example described herein. The content space specification file  (spec) in the example describes a basic e-mail application that is in its second release. The first release provided support for a hypothetical Simple Email 1.0 client from Company X, that supported basic e-mail operations via a web browser; creating a draft, view e-mail, an inbox, saving a received e-mail in a folder, and the like. Release 1.5 of Simple Email will provide the ability to print a draft e-mail and will support a new platform, the Widget browser from the company Provider. The team has also received a requirement for a new interface (Phone) that they would like to support in the future, in addition to the current browser interface. The content space (CS) specification is organized around three nouns; \u2018draft email\u2019, \u2018inbox email\u2019 and \u2018folder\u2019. Each noun has a set of functions (verbs) that can be applied to nouns, using interfaces (ifc) and relevant platforms. The CS spec is below, following the steps listed next. The high level process includes the following steps: A) Edit this file to specify the content space. \u2018;\u2019 begins a comment; B) Run the content space tool to process this file and see the generated user stories; C) Review the user stories to see if correct, properly classified and so on. If changes are needed go to step A above; and D) Import the user stories into project management & test management tool(s) of choice. In greater detail is broken into various sub-steps as follows:","A. Edit this file.\n\n","(The following steps are optional, and highly recommended.)\n\n","B. Run the content space tool.\n\n","C. Review the output user stories.\n\n","Repeat steps A, B and C until user stories are agreed-to or approved.","D. Import user stories to project management system.\n\n","The following content space specification is generated from the requirements, includes three nouns to define the user stories in the example.",{"@attributes":{"id":"p-0076","num":"0161"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"133pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[";",{},{}]},{"entry":["\u2003noun,","draft email","; email that is just being created or is"]},{"entry":[{},{},"; saved awhile before being sent."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003verb,","create, view, send,","; verbs are actions with draft"]},{"entry":[{},"delete, print, edit,","; email"]},{"entry":[{},"save"]},{"entry":["\u2003ifc,","browser","\u2002; this is the kind of interface"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003platform,","Internet Searcher, Firefly"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"; kinds of browsers supported"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[";",{},{}]},{"entry":["\u2003noun,","inbox email","\u2003\u2002; everyones favorite kind of email"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003verb,","view, forward, delete,"]},{"entry":[{},"print, reply, reply all,"]},{"entry":[{},"move to folder"]},{"entry":["\u2003ifc,","browser,phone"]},{"entry":["\u2003platform,","Internet Searcher, Firefly,"]},{"entry":[{},"widget"]},{"entry":";"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003noun,","folder","; we need a way to organize all that email"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003verb,","create, list, delete"]},{"entry":["\u2003ifc,","browser"]},{"entry":["\u2003platform,","Internet Searcher, Firefly, widget"]},{"entry":";"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"As such, in the example, the user stories (requirements) are classified into the content space specification file . A first requirement can be \u201cLet the development & test organizations know we're going to support Phone in the future.\u201d Another requirement can be \u201cNow, make sure the new ability to print draft email is categorized as \u2018new\u2019. And our software will support that new browser from Provider (Widget).\u201d The following content space specification filters can then be created and added to the file:",{"@attributes":{"id":"p-0078","num":"0163"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003\u2003\u2003\u2003\u2003; Let the development & test organization"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003; know we're going to support Phone in the future."]},{"entry":[{},"filter, \u2003ifc==\u2018phone\u2019, future"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003;Now, make sure the new ability to print draft email is"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003;categorized as \u2018new\u2019. \u2002And our software will support"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003;that new browser from Provider (widget)."]},{"entry":[{},"filter, \u2003verb==\u2018print\u2019 and noun==\u2018draft email\u2019, new"]},{"entry":[{},"filter, \u2003platform==\u2018widget\u2019, new"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"As described herein, the content space specification file created in the example is processed by the content space tool  implementing the exemplary methods described herein to automatically generate agile user stories in a five dimensional space with corresponding summary output reports as follows:",{"@attributes":{"id":"p-0080","num":"0165"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"number of nouns = 3"]},{"entry":[{},"number of symbols = 5"]},{"entry":[{},"number of fold symbols = 0"]},{"entry":[{},"number of filter sets = 3"]},{"entry":[{},"number of filters = 4"]},{"entry":[{},"number of grouping filters = 0"]},{"entry":[{},"----number of nouns (before folding) = 3"]},{"entry":[{},"noun: draft email , (v,i,p,space) = 5 , 1 , 2 , 10 \u2003\u2002(f,f)"]},{"entry":[{},"noun: folder , (v,i,p,space) = 3 , 1 , 3 , 9 \u2003(f,f)"]},{"entry":[{},"noun: inbox email , (v,i,p,space) = 6 , 2 , 3 , 36 \u2003(f,f)"]},{"entry":[{},"CS size = 55"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"In traversing the content space with filtering set \u2018on\u2019, the following output is generated:",{"@attributes":{"id":"p-0082","num":"0167"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"CS & filter cross ck ok for type: nochange"]},{"entry":[{},"CS & filter cross ck ok for type: future"]},{"entry":[{},"CS & filter cross ck ok for type: new"]},{"entry":[{},"CS ck Ok: cell count sum equal across dimensions."]},{"entry":[{},"CS ck Ok: announceable equals new + changed + nochange."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"7"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"6","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"7","colwidth":"14pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"n\/a","future","nochange","changed","new"]},{"entry":{"@attributes":{"namest":"1","nameend":"7","align":"center","rowsep":"1"}}},{"entry":["noun = draft email","0","0","8","0","2","10"]},{"entry":["verb create","0","0","2","0","0"]},{"entry":["verb delete","0","0","2","0","0"]},{"entry":["verb print","0","0","0","0","2"]},{"entry":["verb send","0","0","2","0","0"]},{"entry":["verb view","0","0","2","0","0"]},{"entry":["ifc browser","0","0","8","0","2"]},{"entry":["platform Firefly","0","0","4","0","1"]},{"entry":["platform Internet searcher","0","0","4","0","1"]},{"entry":["noun = folder","0","0","6","0","3","9"]},{"entry":["verb create","0","0","2","0","1"]},{"entry":["verb delete","0","0","2","0","1"]},{"entry":["verb list","0","0","2","0","1"]},{"entry":["ifc browser","0","0","6","0","3"]},{"entry":["platform widget","0","0","0","0","3"]},{"entry":["platform Firefly","0","0","3","0","0"]},{"entry":["platform Internet searcher","0","0","3","0","0"]},{"entry":["noun = inbox email","0","18","12","0","6","36"]},{"entry":["verb delete","0","3","2","0","1"]},{"entry":["verb forward","0","3","2","0","1"]},{"entry":["verb print","0","3","2","0","1"]},{"entry":["verb put in folder","0","3","2","0","1"]},{"entry":["verb reply","0","3","2","0","1"]},{"entry":["verb view","0","3","2","0","1"]},{"entry":["ifc browser","0","0","12","0","6"]},{"entry":["ifc phone","0","18","0","0","0"]},{"entry":["platform widget","0","6","0","0","6"]},{"entry":["platform Firefly","0","6","6","0","0"]},{"entry":["platform Internet Searcher","0","6","6","0","0"]},{"entry":{"@attributes":{"namest":"1","nameend":"7","align":"center","rowsep":"1"}}}]}}]}}},"And the summary report can be generated as follows:",{"@attributes":{"id":"p-0084","num":"0169"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"char"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Total content space size (number user stories) = 55",{}]},{"entry":[{},"Folding used: none"]},{"entry":[{},"Folded cells = 0"]},{"entry":[{},"Number user stories marked n\/a = 0"]},{"entry":[{},"Number user stories marked future = 18"]},{"entry":[{},"Number user stories marked nochange = 26","70.3%"]},{"entry":[{},"Number user stories marked changed = 0","0.0%"]},{"entry":[{},"Number user stories marked new = 11","29.7%"]},{"entry":[{},"priorities"]},{"entry":[{},"1-5: 0 0 0 0 0"]},{"entry":[{},"6-10: 0 0 0 0 0"]},{"entry":[{},"unassigned: 11",{}]},{"entry":[{},"Total shipped user stories = 37","100.0%"]},{"entry":[{},"Number of new & changed user stories = 11"]},{"entry":[{},"Number of grouping filters = 0"]},{"entry":[{},"Number of cells matched by grouping filters = 0"]},{"entry":[{},"Number of user story groups = 0"]},{"entry":[{},"Number nouns with n\/c, changed or new = 3"]},{"entry":[{},"Number n&c stories with multi requirements = 0"]},{"entry":[{},"Percentage changed with reqt tag = 0.0%"]},{"entry":[{},"Percentage new with reqt tag = 0.0%"]},{"entry":[{},"Net number of user stories written = 37"]},{"entry":[{},"Totals cross check is ok: shipped + future + n\/a = raw"]},{"entry":[{},"Total output check is ok . . ."]},{"entry":[{},"raw \u2212 n\/a \u2212 future \u2212 grouped + groupers = written"]},{"entry":[{},"Elapsed seconds = 0.02"]},{"entry":[{},"wed, 23 Feb 2011, 15:20:49"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The exemplary automatic agile user story generation methods described herein can be implemented on any suitable computer system as now described.  illustrates an exemplary embodiment of a system  for automatically generating agile user stories for software products. The methods described herein can be implemented in software (e.g., firmware), hardware, or a combination thereof. In exemplary embodiments, the methods described herein are implemented in software, as an executable program, and is executed by a special or general-purpose digital computer, such as a personal computer, workstation, minicomputer, or mainframe computer. The system  therefore includes general-purpose computer .","In exemplary embodiments, in terms of hardware architecture, as shown in , the computer  includes a processor , memory  coupled to a memory controller , and one or more input and\/or output (I\/O) devices ,  (or peripherals) that are communicatively coupled via a local input\/output controller . The input\/output controller  can be, but is not limited to, one or more buses or other wired or wireless connections, as is known in the art. The input\/output controller  may have additional elements, which are omitted for simplicity, such as controllers, buffers (caches), drivers, repeaters, and receivers, to enable communications. Further, the local interface may include address, control, and\/or data connections to enable appropriate communications among the aforementioned components.","The processor  is a hardware device for executing software, particularly that stored in memory . The processor  can be any custom made or commercially available processor, a central processing unit (CPU), an auxiliary processor among several processors associated with the computer , a semiconductor based microprocessor (in the form of a microchip or chip set), a macroprocessor, or generally any device for executing software instructions.","The memory  can include any one or combination of volatile memory elements (e.g., random access memory (RAM, such as DRAM, SRAM, SDRAM, etc.)) and nonvolatile memory elements (e.g., ROM, erasable programmable read only memory (EPROM), electronically erasable programmable read only memory (EEPROM), programmable read only memory (PROM), tape, compact disc read only memory (CD-ROM), disk, diskette, cartridge, cassette or the like, etc.). Moreover, the memory  may incorporate electronic, magnetic, optical, and\/or other types of storage media. Note that the memory  can have a distributed architecture, where various components are situated remote from one another, but can be accessed by the processor .","The software in memory  may include one or more separate programs, each of which comprises an ordered listing of executable instructions for implementing logical functions. In the example of , the software in the memory  includes the agile user story generation methods described herein in accordance with exemplary embodiments and a suitable operating system (OS) . The OS  essentially controls the execution of other computer programs, such the agile user story generation systems and methods as described herein, and provides scheduling, input-output control, file and data management, memory management, and communication control and related services.","The agile user story generation methods described herein may be in the form of a source program, executable program (object code), script, or any other entity comprising a set of instructions to be performed. When a source program, then the program needs to be translated via a compiler, assembler, interpreter, or the like, which may or may not be included within the memory , so as to operate properly in connection with the OS . Furthermore, the agile user story generation methods can be written as an object oriented programming language, which has classes of data and methods, or a procedure programming language, which has routines, subroutines, and\/or functions.","In exemplary embodiments, a conventional keyboard  and mouse  can be coupled to the input\/output controller . Other output devices such as the I\/O devices ,  may include input devices, for example but not limited to a printer, a scanner, microphone, and the like. Finally, the I\/O devices ,  may further include devices that communicate both inputs and outputs, for instance but not limited to, a network interface card (NIC) or modulator\/demodulator (for accessing other files, devices, systems, or a network), a radio frequency (RF) or other transceiver, a telephonic interface, a bridge, a router, and the like. The system  can further include a display controller  coupled to a display . In exemplary embodiments, the system  can further include a network interface  for coupling to a network . The network  can be an IP-based network for communication between the computer  and any external server, client and the like via a broadband connection. The network  transmits and receives data between the computer  and external systems. In exemplary embodiments, network  can be a managed IP network administered by a service provider. The network  may be implemented in a wireless fashion, e.g., using wireless protocols and technologies, such as WiFi, WiMax, etc. The network  can also be a packet-switched network such as a local area network, wide area network, metropolitan area network, Internet network, or other similar type of network environment. The network  may be a fixed wireless network, a wireless local area network (LAN), a wireless wide area network (WAN) a personal area network (PAN), a virtual private network (VPN), intranet or other suitable network system and includes equipment for receiving and transmitting signals.","If the computer  is a PC, workstation, intelligent device or the like, the software in the memory  may further include a basic input output system (BIOS) (omitted for simplicity). The BIOS is a set of essential software routines that initialize and test hardware at startup, start the OS , and support the transfer of data among the hardware devices. The BIOS is stored in ROM so that the BIOS can be executed when the computer  is activated.","When the computer  is in operation, the processor  is configured to execute software stored within the memory , to communicate data to and from the memory , and to generally control operations of the computer  pursuant to the software. The agile user story generation methods described herein and the OS , in whole or in part, but typically the latter, are read by the processor , perhaps buffered within the processor , and then executed.","When the systems and methods described herein are implemented in software, as is shown in , the methods can be stored on any computer readable medium, such as storage , for use by or in connection with any computer related system or method.","As will be appreciated by one skilled in the art, aspects of the present invention may be embodied as a system, method or computer program product. Accordingly, aspects of the present invention may take the form of an entirely hardware embodiment, an entirely software embodiment (including firmware, resident software, micro-code, etc.) or an embodiment combining software and hardware aspects that may all generally be referred to herein as a \u201ccircuit,\u201d \u201cmodule\u201d or \u201csystem.\u201d Furthermore, aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium(s) having computer readable program code embodied thereon.","Any combination of one or more computer readable medium(s) may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be, for example, but not limited to, an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system, apparatus, or device, or any suitable combination of the foregoing. More specific examples (a non-exhaustive list) of the computer readable storage medium would include the following: an electrical connection having one or more wires, a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), an optical fiber, a portable compact disc read-only memory (CD-ROM), an optical storage device, a magnetic storage device, or any suitable combination of the foregoing. In the context of this document, a computer readable storage medium may be any tangible medium that can contain, or store a program for use by or in connection with an instruction execution system, apparatus, or device.","A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein, for example, in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms, including, but not limited to, electro-magnetic, optical, or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate, propagate, or transport a program for use by or in connection with an instruction execution system, apparatus, or device.","Program code embodied on a computer readable medium may be transmitted using any appropriate medium, including but not limited to wireless, wireline, optical fiber cable, RF, etc., or any suitable combination of the foregoing.","Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages, including an object oriented programming language such as Java, Smalltalk, C++, Pyhon or the like and conventional procedural programming languages, such as the \u201cC\u201d programming language or similar programming languages. The program code may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider).","Aspects of the present invention are described below with reference to flowchart illustrations and\/or block diagrams of methods, apparatus (systems) and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and\/or block diagrams, and combinations of blocks in the flowchart illustrations and\/or block diagrams, can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","These computer program instructions may also be stored in a computer readable medium that can direct a computer, other programmable data processing apparatus, or other devices to function in a particular manner, such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function\/act specified in the flowchart and\/or block diagram block or blocks.","The computer program instructions may also be loaded onto a computer, other programmable data processing apparatus, or other devices to cause a series of operational steps to be performed on the computer, other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","The flowchart and block diagrams in the Figures illustrate the architecture, functionality, and operation of possible implementations of systems, methods and computer program products according to various embodiments of the present invention. In this regard, each block in the flowchart or block diagrams may represent a module, segment, or portion of code, which comprises one or more executable instructions for implementing the specified logical function(s). It should also be noted that, in some alternative implementations, the functions noted in the block may occur out of the order noted in the figures. For example, two blocks shown in succession may, in fact, be executed substantially concurrently, or the blocks may sometimes be executed in the reverse order, depending upon the functionality involved. It will also be noted that each block of the block diagrams and\/or flowchart illustration, and combinations of blocks in the block diagrams and\/or flowchart illustration, can be implemented by special purpose hardware-based systems that perform the specified functions or acts, or combinations of special purpose hardware and computer instructions.","In exemplary embodiments, where the agile user story generation methods are implemented in hardware, the agile user story generation methods described herein can implemented with any or a combination of the following technologies, which are each well known in the art: a discrete logic circuit(s) having logic gates for implementing logic functions upon data signals, an application specific integrated circuit (ASIC) having appropriate combinational logic gates, a programmable gate array(s) (PGA), a field programmable gate array (FPGA), etc.","Technical effects include the ability to measure the completeness of automated testing in terms of total announced function for a software product. The systems and methods described herein further automatically load project management tools with results of requirements analysis. The systems and methods described herein can further automatically accumulate user story cost history and use the user story cost history to estimate and plan future releases. The systems and methods described herein can be applied to almost any type of software from applications to middleware, to internal operating system components, or deep infrastructure layers (e.g. a unique runtime such as a JVM, or a protocol stack like TCP\/IP). This generality is achieved due to the generality of the of the five dimensions of the content space, and the adaptive flexibility in defining the values for the five dimensions.","The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein, the singular forms \u201ca\u201d, \u201can\u201d and \u201cthe\u201d are intended to include the plural forms as well, unless the context clearly indicates otherwise. It will be further understood that the terms \u201ccomprises\u201d and\/or \u201ccomprising,\u201d when used in this specification, specify the presence of stated features, integers, steps, operations, elements, and\/or components, but do not preclude the presence or addition of one more other features, integers, steps, operations, element components, and\/or groups thereof.","The corresponding structures, materials, acts, and equivalents of all means or step plus function elements in the claims below are intended to include any structure, material, or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description, but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application, and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated","The flow diagrams depicted herein are just one example. There may be many variations to this diagram or the steps (or operations) described therein without departing from the spirit of the invention. For instance, the steps may be performed in a differing order or steps may be added, deleted or modified. All of these variations are considered a part of the claimed invention.","While the preferred embodiment to the invention had been described, it will be understood that those skilled in the art, both now and in the future, may make various improvements and enhancements which fall within the scope of the claims which follow. These claims should be construed to maintain the proper protection for the invention first described."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWINGS","p":["The subject matter which is regarded as the invention is particularly pointed out and distinctly claimed in the claims at the conclusion of the specification. The forgoing and other features, and advantages of the invention are apparent from the following detailed description taken in conjunction with the accompanying drawings in which:",{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 12"}]},"DETDESC":[{},{}]}
