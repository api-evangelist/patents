---
title: Component independent process integration message monitoring
abstract: The present disclosure involves systems, software, and computer implemented methods for centralized monitoring of business processes. One process includes identifying a process integration (PI) domain, where the PI domain includes at least one PI component, accessing at least one PI component included in the identified PI domain. retrieving a set of local monitoring information from the accessed at least one PI component, persisting the retrieved set of local monitoring information in a centralized repository, and presenting at least a portion of the persisted set of local monitoring information to a client in response to a request from the client.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08769086&OS=08769086&RS=08769086
owner: SAP AG
number: 08769086
owner_city: Walldorf
owner_country: DE
publication_date: 20110509
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The present disclosure relates to software, computer systems, and computer implemented methods for providing centralized process integration (PI) domain monitoring.","Today's companies and entities employ multiple disparate computing systems in various enterprise and inter-enterprise organizations, where certain computing systems perform different parts of an overall business function. As an example, a scenario such as processing an incoming order may involve the participation of a customer relationship management (CRM) system, an enterprise resource management (ERM) system, a supply chain management (SCM) system, and one or more financial management (FM) systems, as well as others. The integration of the systems to perform one or more processes is referred to as process integration. In some instances, a set of systems used to perform specific functionality and operations may be defined to represent a specific process integration (PI) domain.","To monitor the various systems included in a PI domain, runtime components (or \u201cPI components\u201d) may run on, along with, or in combination with the systems to capture technical information about the overall operations of the PI domain, as well as to determine the process and success of messages and events occurring on or in connection with those PI components. Each PI component can collect a set of information associated with the messages and events that occur on the PI component's associated system.","The present disclosure involves systems, software, and computer implemented methods for centralized monitoring of business processes. One process includes identifying a process integration (PI) domain, where the PI domain includes at least one PI component, accessing at least one PI component included in the identified PI domain. retrieving a set of local monitoring information from the accessed at least one PI component, persisting the retrieved set of local monitoring information in a centralized repository, and presenting at least a portion of the persisted set of local monitoring information to a client in response to a request from the client.","While generally described as computer implemented software embodied on tangible media that processes and transforms the respective data, some or all of the aspects may be computer implemented methods or further included in respective systems or other devices for performing this described functionality. The details of these and other aspects and embodiments of the present disclosure are set forth in the accompanying drawings and the description below. Other features, objects, and advantages of the disclosure will be apparent from the description and drawings, and from the claims.","This disclosure generally describes computer systems, software, and computer implemented methods for providing centralized process integration (PI) domain message monitoring in distributed systems involved in message processing. Previously, PI monitoring operations were performed on a PI component-by-component basis, requiring users to access each PI component in a distributed system to review monitoring and other status information collected during the operation of those components. In other words, previous systems provided local monitoring applications for different components, but failed to provide a centralized monitoring system allowing users, technical analysts, and system administrators to be provided an overall view and status of complex systems. Some systems may have as many as hundreds of PI components collecting information through various local monitoring applications, making system-wide monitoring processes of system administrators difficult.","The present disclosure describes a system where centrally orchestrated calls to PI components associated with a particular PI domain are used to retrieve information on processed messages and events previously monitored at the various PI components. In some instances, a central monitoring application can access the information through one or more application programming interfaces (APIs) associated with the various PI components. The information collected by the central monitoring application may include some, all, or none of the following details: (1) message and event metadata (e.g., message header data) such as the integration scenario a particular message or event is associated with, the technical channels through which a message was sent, etc.; (2) statistics associated with one or more monitored messages; and (3) status information on the relative success or failure of particular monitored messages. Additional information may be collected in some implementations, including some or all of the content included in or associated with particular messages or events. The data, once collected, can be stored at the central system (or made accessible thereto) and aggregated for reporting and monitoring purposes.","In some implementations, aggregation and association of particular messages and events by the central monitoring application may be based, not on a message globally unique identifier (GUID) basis, but instead, on certain metadata attributes associated with the collected messages. By aggregating\/correlating messages based on the metadata (usually generated by the local monitoring applications), each individual message does not need to be read, thereby saving valuable systems resources, memory load, and storage. Further, the content of particular messages becomes less important, allowing technical users to take a macro-level view of the PI domain and its associated operations to identify and address system-wide issues unrelated to the particular content within individual messages.","To address the issues, algorithms determining the success, temporary success, or failure of particular messages and events sent or existing within the PI domain and among various PI components are used. In some instances, a message may be considered successful from the aspect of a first PI component, in the fact that it was successfully sent by the first PI component's associated system, while as a whole, the message was a failure, as a later system monitored by a second PI component failed to process or forward the message at a later time. After correlating the two (or more) messages, an end-to-end status of a particular message path can be determined by reviewing the combined path of related messages in the overall sense of the PI domain. In one example, messages may be correlated using aggregated message headed information collected from multiple PI runtime components, with information derived as to how many related messages were received or identified and through which path of PI runtime components the messages passed. In some instances, a message or event may be considered processed \u201ctemporarily successfully\u201d until that message has reached its intended destination and\/or left the PI domain. Once the message has reached its intended destination and\/or left the PI domain being monitored, the message may be considered as having been processed \u201csuccessfully.\u201d Additionally, if the message failed during processing, did not reach its destination in an allotted period of time, or otherwise was known to fail, the message can be considered as having been processed \u201cunsuccessfully.\u201d","Information on the relative success or failure of certain messages can be presented to technical users through a dashboard presenting summary information on the status of one or more PI domains and their associated PI components. Further, users can be provided additional details as to specific message types, interactions, and other information included in or derived from the collected sets of information. The presented information can be used to locate specific areas of concern, including information on messages, PI components, and other portions of the PI domain and related systems in which errors, warnings, exceptions, and other issues have occurred. Once those areas are located, the dashboard can provide functionality allowing users to attempt to resend (or initiate) a failed message, such as to test whether an error associated with the message and its message path components continues. The dashboard may also allow technical users to generate one or more helpdesk tickets based on observed issues occurring within the system, allowing the person(s) or organization(s) associated with observed issues to be notified and address the issues as soon as possible. In other words, the collected information and the generated dashboard allow users to view the statistics and information associated with particular PI domains in a single location, as opposed to requiring users to access each PI component individually. Additionally, the described dashboard can provide an export functionality that, for example, can be used to report upon processed message volume for a given time period (i.e., Last Month, Last Week, etc.), which can provide detailed information and reports on the messages. The export functionality can generate form and customized reports for use in analyzing the associated systems, providing users and administrators with detailed information on the status of multiple PI domains and their systems.","Turning to the illustrated example,  illustrates an example environment  for centrally monitoring a distributed business process using various process integration (PI) components. The illustrated environment  includes, or is communicably coupled with, one or more application systems , , a solution manager server , an integration server , and one or more clients . At least some of the components can communicate across or via network . In general, environment  depicts an example configuration of a system capable of collecting, at the solution manager server , information associated with messages and events occurring at a plurality of application systems , , including the messages sent between those systems , . The application systems ,  may each represent a single system within a distributed business process, where each system performs a particular task associated with the business process. For example, application system A  and application system N  may each comprise a portion of a CRM system for receiving and processing customer orders. In other instances, application system A  may be part of a CRM system, while application system N  may be a part of an ERP system performing tasks related to the CRM system. Based on their relationship, the two application systems ,  may be defined as two parts of the same PI domain. Still further, in some instances, the application systems ,  may represent different portions of the same physical system virtually distinguished or separated based on the functionality and\/or operations they perform. While only two application systems are illustrated, other implementations may include only one or more than two application systems. In alternative implementations, some or all of the illustrated elements may be included in or associated with different and\/or additional systems\/servers, clients, networks, or locations other than those illustrated in . For example, the components illustrated within the solution manager server  may be included in multiple servers, parts of one or more cloud-based networks, or other locations accessible to the solution manager server  (e.g., either directly or via network ).","In general, the solution manager server  is any server or system that stores and executes a central monitoring application  used to monitor one or more application systems (e.g., , ) associated with or included in one or more PI domain models (or definitions)  and\/or monitoring use scenarios . For example, the solution manager server  may be a Java 2 Platform, Enterprise Edition (J2EE)-compliant application server that includes Java technologies such as Enterprise JavaBeans (EJB), J2EE Connector Architecture (JCA), Java Messaging Service (JMS), Java Naming and Directory Interface (JNDI), and Java Database Connectivity (JDBC). In some instances, the solution manager server  may store a plurality of various other applications, while in other instances, the solution manager server  may be a dedicated server specifically meant to store and execute the central monitoring application  and its related functionality. In some implementations, the solution manager server  may also provide other monitoring and system administration tools. In some instances, the solution manager server  may comprise a web server or be communicably coupled with a web server, where the central monitoring application  represents a web-based (or web-accessible) application accessed and executed on one or more of the associated clients  to perform the programmed tasks or operations of the central monitoring application .","At a high level, the solution manager server  comprises an electronic computing device operable to receive, transmit, process, store, or manage data and information associated with the environment . The solution manager server  illustrated in  can be responsible for receiving requests from one or more clients  (as well as any other entity or system interacting with the central monitoring application ), responding to the received requests by processing said requests through the inherent functionality and components of the central monitoring application , and sending the appropriate responses from the central monitoring application  (including a generated or updated dashboard visualization) back to the requesting client  or other system. The central monitoring application  can also process and respond to local requests from a user locally accessing the solution manager server . Accordingly, in addition to requests from the clients  illustrated in , requests may also be sent from internal users, external or third-party customers, and other applications, as well as any other appropriate entities, individuals, systems, or computers. In some instances, the central monitoring application  may be a web-based application executing monitoring functionality associated with a networked or cloud-based distributed business process.","As used in the present disclosure, the term \u201ccomputer\u201d is intended to encompass any suitable processing device. For example, although  illustrates a single solution manager server , environment  can be implemented using any number of servers, as well as computers other than servers, including a server pool. Indeed, the solution manager server  may be any computer or processing device such as, for example, a blade server, general-purpose personal computer (PC), Macintosh, workstation, UNIX-based workstation, or any other suitable device. In other words, the present disclosure contemplates computers other than general purpose computers, as well as computers without conventional operating systems. Further, the illustrated solution manager server  may be adapted to execute any operating system, including Linux, UNIX, Windows, Mac OS, or any other suitable operating system. According to one implementation, the solution manager server  may also include or be communicably coupled with a mail server.","In the illustrated implementation of , the solution manager server  includes an interface , a processor , a memory , and a central monitoring application . The interface  is used by the solution manager server  to communicate with other systems in a client-server or other distributed system environment (including within environment ) connected to the network  (e.g., an associated client , as well as other systems communicably coupled to the network ).  depicts both a server-client environment, but could also represent a cloud computing network. The interface  generally comprises logic encoded in software and\/or hardware in a suitable combination and operable to communicate with the network . More specifically, the interface  may comprise software supporting one or more communication protocols associated with communications such that the network  or the interface's hardware is operable to communicate physical signals within and outside of the illustrated environment .","Generally, the solution manager server  may be communicably coupled with a network  that facilitates wireless or wireline communications between the components of the environment  (i.e., between the solution manager server  and one or more of the clients , or between different application systems , ), as well as with any other local or remote computer, such as additional clients, servers, or other devices communicably coupled to network , including those not illustrated in . In the illustrated environment, the network  is depicted as a single network, but may be comprised of more than one network without departing from the scope of this disclosure, so long as at least a portion of the network  may facilitate communications between senders and recipients. In some instances, one or more of the components associated with the solution manager server  may be included within the network  as one or more cloud-based services or operations. For example, the integration server  is illustrated as within the network , and may be operated at least partially within a cloud-based system in network . The network  may be all or a portion of an enterprise or secured network, while in another instance, at least a portion of the network  may represent a connection to the Internet. In some instances, a portion of the network  may be a virtual private network (VPN). Further, all or a portion of the network  can comprise either a wireline or wireless link. Example wireless links may include 802.11a\/b\/g\/n, 802.20, WiMax, and\/or any other appropriate wireless link. In other words, the network  encompasses any internal or external network, networks, sub-network, or combination thereof operable to facilitate communications between various computing components inside and outside the illustrated environment . The network  may communicate, for example, Internet Protocol (IP) packets, Frame Relay frames, Asynchronous Transfer Mode (ATM) cells, voice, video, data, and other suitable information between network addresses. The network  may also include one or more local area networks (LANs), radio access networks (RANs), metropolitan area networks (MANs), wide area networks (WANs), all or a portion of the Internet, and\/or any other communication system or systems at one or more locations. The network , however, is not a required component in all implementations of the present disclosure.","As illustrated in , the solution manager server  includes a processor . Although illustrated as a single processor  in the solution manager server , two or more processors may be used in the solution manager server  according to particular needs, desires, or particular embodiments of environment . The processor  may be a central processing unit (CPU), a blade, an application specific integrated circuit (ASIC), a field-programmable gate array (FPGA), or another suitable component. Generally, the processor  executes instructions and manipulates data to perform the operations of the solution manager server  and, specifically, the functionality associated with the corresponding central monitoring application . In one implementation, the server's processor  executes the functionality required to receive and respond to requests and instructions from the one or more clients  using the central monitoring application , as well as the operations used to access processed message information from the one or more application systems , .","Regardless of the particular implementation, \u201csoftware\u201d may include computer-readable instructions, firmware, wired or programmed hardware, or any combination thereof on a tangible and non-transitory medium operable when executed to perform at least the processes and operations described herein. Indeed, each software component may be fully or partially written or described in any appropriate computer language including C, C++, Java, Visual Basic, assembler, Perl, any suitable version of 4GL, as well as others. It will be understood that while portions of the software illustrated in  are shown as individual modules that implement the various features and functionality through various objects, methods, or other processes, the software may instead include a number of sub-modules, third-party services, components, libraries, and such, as appropriate. Conversely, the features and functionality of various components can be combined into single components, as appropriate. In the illustrated environment , the processor  executes the central monitoring application  (and its associated functionality) on the solution manager server . In some instances, a particular solution manager server  may be associated with the execution of two or more central monitoring applications , as well as two or more instances of a single central monitoring application , as appropriate.","At a high level, the central monitoring application  is any application, program, module, process, or other software that may execute, change, monitor, and manage information associated with one or more application systems , , and those system's associated PI components. In some instances, portions of the central monitoring application  may operate in response to and in connection with one or more requests received from a client  via network . Additionally, the central monitoring application  may operate independently based on a set of monitoring use scenarios , one or more defined PI domain models , and a set of monitoring settings  directing when and how information is to be collected. In some instances, portions of the central monitoring application  may represent a web-based application accessed and executed (at least in part) by one or more external clients  or other suitable entities via network  (e.g., through the Internet). In general, the central monitoring application  may perform two primary functions, as well as any number of additional operations. First, the central monitoring application  can retrieve sets of messaging and event information from one or more application systems ,  and store those sets of retrieved information in one or more aggregated data sets  at the solution manager server . By collecting the messaging and event information at a centralized location (or a location accessible to the central monitoring application ), the central monitoring application  can access sets of relevant data and other information without needing to access or poll each message received or processed at a single application system individually, thus saving time and resources on the production systems or machines. Instead, statistics on various messages within particular message scenarios can be accessed, which can then be correlated to one or more related messages. Second, the central monitoring application  can, in response to requests from technical users or analysts, generate and present the aggregated data sets to provide an overview of the statuses associated with various messages and events occurring throughout a system or environment, such as environment . In some instances, the central monitoring application  (or a related application) can generate, update, and maintain different dashboards and other visualizations presenting the collected information requested. Among other functionality, the central monitoring application  may also be used to fix errors identified once the aggregated data sets are analyzed or reviewed. For example, the central monitoring application  may be used to generate a helpdesk ticket for technical support, or, in some cases, attempt to resend or re-execute one or more messages or events that have experienced errors or have otherwise failed. The central monitoring application  may perform other operations to assist in monitoring various systems and the messages and events occurring therein.","While illustrated as internal to the solution manager server , one or more processes associated with the central monitoring application  may be stored, referenced, or executed remotely. For example, a portion of the central monitoring application  may be a web service associated with the central monitoring application  that is remotely called, while another portion of the central monitoring application  may be an interface object or agent bundled for processing at a remote client . Moreover, any or all of the central monitoring application  may be a child or sub-module of another software module or enterprise application (not illustrated) without departing from the scope of this disclosure. Still further, portions of the central monitoring application  may be executed or accessed by a user working directly at the solution manager server , as well as remotely at a corresponding client . The central monitoring application  is illustrated as including a PI monitor retrieval module , a PI dashboard controller , and a component access module . All, some, none, or different modules may be included in different implementations of the central monitoring application . Additionally, some or all of the modules may be combined with each other, as well as integrated into the functionality provided by another component.","The PI monitor retrieval module  accesses the local logs and monitoring information of the PI monitoring data  stored at individual application systems (i.e., , ) and retrieves that information for storage at one or more centralized locations. In some instances, the retrieved information may be stored as part of the aggregated data sets . The PI monitor retrieval module  can access the information stored on the application systems through APIs defined and exposed at the individual systems, such as the PI API  illustrated within a local PI monitor located on application system A  or one or more APIs exposed by the adapter engine , also located on the application system A . Alternative and\/or additional methods of retrieving the information from the different application systems may also be used. In some instances, information may be sent from the application systems to the central monitoring application . The application systems associated with a particular PI monitor retrieval module , as well as the frequency and type of information retrieved, may be determined based on one or more parameters defined at the solution manager server .","As previously described, the aggregated data sets  that include information retrieved from the various application systems is located in memory  of the solution manager server . Memory  is used for storing data and program instructions associated with the solution manager server  and, more specifically, the central monitoring application . The memory  may include any memory or database module and may take the form of volatile or non-volatile memory including, without limitation, magnetic media, optical media, random access memory (RAM), read-only memory (ROM), removable media, or any other suitable local or remote memory component. The memory  may store various objects or data, including classes, frameworks, applications, backup data, business objects, jobs, web pages, web page templates, database tables, process contexts, and any other appropriate information including any parameters, variables, algorithms, instructions, rules, constraints, or references thereto associated with the purposes of the solution manager server  and its central monitoring application . In some implementations, including cloud-based systems, some or all of the memory  may be stored remote from, but communicably coupled to, the solution manager server . As illustrated, memory  includes one or more monitoring use scenarios , one or more PI domain model definitions , one or more monitoring settings , and, as previously described, one or more aggregated data sets .","The set of PI domain model definitions  describes or defines one or more PI components that are included in one or more PI domains. Each PI domain can be defined to include a set of PI components associated with one or more business components performing a particular task or set of tasks. The PI components included in a particular PI domain may be automatically associated with one another in some instances, or manually assigned in others. In some instances, the PI components in different PI domains may overlap, such that some PI components are included in different PI domains. Examples may include PI domains associated with related business processes where some of the PI components may be used in both situations (i.e., creating a purchase order and fulfilling a purchase order). A set of PI components is logically grouped into a PI domain based on the processes and operations being monitored. The PI components making up a particular PI domain can include various runtime components that monitor and capture message and event information during execution of a system and its business processes. Some PI components may be involved in message processing, while other PI components may be involved in other processing. Each PI component is executing or running on a technical system, such as a system executing ABAP-based programs and tools or a system executing Java-based programs and tools, including the application systems ,  illustrated in . In some instances, more than one PI component may be running on a single technical system. Examples of PI components include adapter engines (e.g., adapter engine  of application system A ) and proxies (i.e., Java\/ABAP proxy ), although other components can also be used as PI components.","Returning to , the set of PI domain model definitions  can provide the central monitoring application  with information on what PI domains exist in an environment, as well as the PI components (and their associated application systems or components) that make up the PI domain. The central monitoring application  can determine from a particular PI domain model  the PI components to be accessed for information regarding a particular PI domain . As an example, one PI domain associated with environment  may include the two illustrated application systems , . The set of monitoring use scenarios  may be used to determine the type of information to be retrieved from the PI components associated with a particular PI domain. Alternatively, the set of monitoring use scenarios  may be used to determine the type of information that is relevant in a particular use case. In some monitoring use scenarios, a portion of the metadata stored at some PI components may not be necessary, and therefore may not be collected by the PI monitor retrieval module . In some instances, administrators and other users may specify that a particular monitoring use scenario  is to be associated with a particular PI domain . That association can be read by the PI monitor retrieval module  to determine the information to be accessed and collected in a particular monitoring situation. The monitoring use scenario  associated with a particular PI domain  can be changed at different intervals or in response to particular events or other triggers, including a threshold number of errors identified for messages, wherein a more detailed monitoring use scenario  may be applied. In some instances, the monitoring use scenario  may be manually selected, while in others, a default or dynamically determined monitoring use scenario  can be applied to a particular PI domain . The monitoring settings  may also be associated with different PI domains , as well as individual PI components. The monitoring settings  can be used to determine the frequency of information and data collection performed by the central monitoring application , and may provide different collection frequencies on a per PI domain basis, as well as on a per PI component basis. The specific parameters defined by the monitoring settings  can be defined manually, provided a default value, or dynamically determined based on information associated with or related to the different technical systems (i.e., the application systems , ) and\/or the monitoring use scenario .","The central monitoring application  is also illustrated as including a PI dashboard controller . The PI dashboard controller  uses the collected data to generate and provide one or more dashboards presenting the human-readable results to technical users, administrators, and other entities. The generated dashboards can be used to display information regarding different subsets of information included within the aggregated data sets  stored in memory . In some instances, the information included in the generated dashboards can initially begin at a high-level of data, providing general information on the types of messages and events occurring in a particular domain. Still further, the initial step in using the generated dashboards may be determining a particular PI domain (where multiple PI domains are monitored) for which to view relevant data. Once a particular PI domain is selected, relevant information associated with that PI domain can be displayed in the generated dashboard. The PI dashboard controller  can provide tools in the generated display to allow technical users to define one or more filters on the data to be presented, as well as allowing users to focus on different aggregated data sets or analyses performed on the different aggregated data sets. The PI dashboard controller  can interpret the filter request and generate the appropriate dashboard in response to the filter selection. The types of dashboard views available may include at least one of the following: an overall PI domain listing defining the PI domains for which monitoring information is available (see ), an overview monitor for a specific PI domain showing the issues and general information regarding the specific PI domain (see ), a message error monitor displaying the messaging errors and related information for a particular PI domain (see ), a message backlog monitor providing information on prior successful and unsuccessful messages sent through a PI domain (see ), and a message flow monitor providing information on different messages sent between various components within the PI domain (see ), among others. In general, the PI dashboard controller  can generate, maintain, and manipulate one or more dashboards associated with the information collected by the central monitoring application , usually in response to specific user requests and interactions.","The central monitoring application  is further illustrated as including a component access module . The component access module  is used to access various exposed APIs associated with different systems within a PI domain (and associated with one or more PI components) in order to interact with the systems in the PI domain. For example, the component access module  can take input received via a presented dashboard and, in response, request that a particular message or event presented for which information is presented within the dashboard be re-initiated or cancelled. This interaction with the various technical systems (i.e., the application systems , ) may be available because the solution manager server  and its components are provided information for each of the technical systems associated with a particular PI component. During a setup procedure, connections may be established between the central monitoring application  (and specifically, the component access module ) and the technical systems to allow the central monitoring application  to perform certain actions on the technical systems. In some instances, remote function call (RFC) destinations for one or more applications on the remote technical system may be identified and stored on the solution manager server . When a particular action associated with a technical system is identified in the dashboard, the component access module  can identify the connection associated with the technical system and use that connection, through exposed APIs, for example, to pass the values and information necessary to execute the requested action. The component access module  is the component of the central monitoring application  that performs the calls to these APIs and that controls the actions and events in response to input received through a presented dashboard and interpreted by the PI dashboard controller .","As described, the central monitoring application  of the solution manager server  collects information from different application systems ,  included in different, defined PI domains . The application systems ,  themselves may be any system or server involved in executing one or more business processes via one or more business applications , . Similar to the solution manager server , the applications systems ,  may be J2EE-compliant application servers that include various Java technologies. In some instances, the application systems ,  may include and execute two or more business applications, while in other instances, the application systems ,  may execute a single, dedicated business application. Each of the application systems ,  may be comprised, at least in part, of a web server, where the business applications ,  (or portions thereof) represent web-based applications or processes that can be executed on a remote client . Each application system ,  may be systems for executing different processes associated with one or more business processes, and further, the different application systems may be related to each other in that the business applications ,  may be used together to complete different end-to-end business processes or events. Each application system ,  may be operable by a user local to the systems, as well as through one or more clients  communicably coupled to the systems via the network . Each application system ,  may represent different hardware configurations, as well as a single server or system using virtualized systems such that application system  and application system  are co-located on a single server or overall system.","As illustrated, each application system ,  includes an interface , , a processor , , the business applications , , a local PI monitor ,  (sometimes including a PI API ), and a memory , . The interfaces, processors, and memories may be similar to or different than those described in the solution manager server  (i.e., interface , processor , and memory ). The local PI monitors ,  illustrated on the application systems ,  may be components used to perform local monitoring operations in association with the operations on each application system , . In some instances, the local PI monitors ,  may be legacy monitoring components previously used to collect relevant monitoring information associated with the messages and events of the business applications ,  and\/or the application systems ,  as a whole. The information collected by the local PI monitors ,  may include any information relevant to the events or messages performed, received, sent, or executed at each application system , . The relevant information can be stored by the local PI monitors into the corresponding memory ,  (i.e., in the set of PI monitoring data  included in memory  of application system A ). Local PI monitoring settings  may determine or define the type and sets of information to be monitored by the local PI monitor , . Although not illustrated in application system N , application system N  may include the same or similar information and data sets as those illustrated in application system A . As illustrated, the local PI monitor  of application system A  may include a PI API  exposing various methods for accessing the monitored information associated with the system . In some instances, the PI monitor retrieval module  may use these APIs  to access the information stored with the set of PI monitoring data . Alternatively, the PI monitor retrieval module  may directly access the sets of PI monitoring data  without using the APIs, in some instances.","Application system A  is illustrated as including an adapter engine . The adapter engine  may be considered a PI component associated with a particular PI domain. The adapter engine  may be a separate software component used by a particular system  to communicate and exchange information with one or more other systems, such as application system N  and\/or the integration server . The adapter engine  can be used to translate incoming messages received at and outgoing messages sent from the application system A  to one or more other systems. In some instances, the adapter engine  may be used to translate messages and events sent to and received from the integration server , where the integration server  controls or manages the sending of messages within the system (and a particular PI domain). Using the adapter engine  in combination with the execution of the business application , information relevant to a distributed process including messages sent between different systems can be monitored. In some instances, the local PI monitor  can be associated with the adapter engine  to identify and monitor incoming and outgoing messages as appropriate, storing the relevant information in the set of PI monitoring data .","Application system N  is illustrated as including a Java or ABAP proxy . Similar to the adapter engine  described above, the proxy  allows for messages to be sent and received by the application system N  through an message protocol or language readable by the application system N  and its business application , as well as for other applications and systems in a particular environment. In general, the proxy  can be used to encapsulate the creation or parsing of XML messages and the communication with the relevant runtime components required to send or receive messages. The proxy  allows systems to exchange messages with different communication parties, as well as through the use of the adapter engine  and the integration server .","The integration server  is a runtime system for receiving, processing, and forwarding messages between different systems within an environment, such as environment . In some instances, all messages sent between the different systems ,  may be sent via the integration server , while in other instances, some or all of the messages may be sent directly between the different systems ,  without using the integration server . As illustrated in , the integration server  includes interface , processor , memory , and an integration engine . The interface , processor , and memory  may be similar to or different than those described for the solution manager server , with the components associated with the operations of the integration engine . In general, the integration server  may facilitate interaction between diverse operating systems and application systems across internal and external networks (e.g., ). In some instances, messages between different application systems ,  can be sent to the integration server  first, where the integration engine  interprets the messages, determines the corresponding receiver of the message, and forwards or relays the message to the corresponding receiver system. Information on the messages sent via the integration server  can be stored in the set of collected message information . The information can be viewed locally on the integration server , or collected by the PI monitor retrieval module  and included in the aggregated data sets  for processing, display, and analysis. Memory  stores information used by the integration engine  to perform its operations, including the information in the integration repository . The integration repository  includes information defining integration scenarios, integration processes, interfaces and proxy information , and messaging mappings  between different components in the system. The interfaces and proxy information  may be used to create interfaces, adapters, and proxies within the environment , as well as to determine the appropriate messaging schema and format for exchanging messages between systems. The messaging mappings  may define the paths different types of messages may take between components, allowing the integration engine  to analyze a particular message and determine the appropriate receiver system, using the interface and proxy information  to modify the particular message into the appropriate format where needed. The integration engine , or a monitoring component (not illustrated), can extract and store information associated with the received, sent, and forwarded messages and events occurring at or performed by the integration server  to the set of collected message information . As illustrated in , the integration server  may be located in a cloud-based system within network . Alternatively, the integration server  may be a component within an on-premise or other conventional system, as well.","Returning to , the illustrated environment includes one or more clients . The clients  may be associated with a particular application system , , or the solution manager server  and its central monitoring application .","Each client  may be any computing device operable to connect to or communicate with at least one of the application systems ,  or solution manager server  using a wireline or wireless connection, via the network , or another suitable communication means or channel. In some instances, the client  may be a part of or associated with a business process involving one or more of the application systems, while in other instances, the client  may be associated with an administrator or monitoring account used in association with the central monitoring application . In general, each client  includes a processor , an interface , a client application , a graphical user interface (GUI) , and a memory . In general, client  comprises an electronic computer device operable to receive, transmit, process, and store any appropriate data associated with the environment  of . It will be understood that there may be any number of clients  associated with, or external to, environment . For example, while illustrated environment  includes a single client , alternative implementations of environment  may include multiple clients communicably coupled to the one or more of the systems illustrated. In some instances, at least one client  may be associated with an administrator of the environment, and may be capable of accessing and interacting with the central monitoring application . Additionally, there may also be one or more additional clients  external to the illustrated portion of environment  capable of interacting with the environment  via the network . Further, the terms \u201cclient\u201d and \u201cuser\u201d may be used interchangeably as appropriate without departing from the scope of this disclosure. Moreover, while each client  is described in terms of being used by a single user, this disclosure contemplates that many users may use one computer, or that one user may use multiple computers.","The GUI  associated with each client  may comprise a graphical user interface operable to, for example, allow the user of a client  to interface with at least a portion of the central monitoring application  and its associated operations and functionality, including the one or more dashboards generated by the PI dashboard controller . Generally, the GUI  provides the particular user with an efficient and user-friendly presentation of business data provided by or communicated within the system. The GUI  may comprise a plurality of customizable frames or views having interactive fields, pull-down lists, and buttons operated by the user. For example, the GUI  may provide interactive elements that allow a user to interact with a particular business application ,  or the central monitoring application , as well as other components within and\/or external to environment . The different portions of functionality provided by the central monitoring application  may be presented and accessible to the user through the GUI , such as through a client application  (e.g., a web browser). Generally, the GUI  may also provide general interactive elements that allow a user to access and utilize various services and functions of a particular business application , . In some instances, the client application  may be used to access various portions of different application systems, including the PI monitoring data  collected on a specific application system , . In some instances, the client application  may be used to access (and the GUI  used to view) information retrieved directly from an application system , . Alternatively, the client application  may be used to access and manipulate the central monitoring application , including as an administrator capable of modifying the operations and parameters associated with the monitoring of one or more PI domains, as well as modifying the definitions and boundaries of a particular PI domain. In some instances, the client application  may be an agent or client-side version of the central monitoring application . The GUI  may present the information of the client application  for viewing and interaction. In general, the GUI  is often configurable, supports a combination of tables and graphs (bar, line, pie, status dials, etc.), and is able to build real-time portals, where tabs are delineated by key characteristics (e.g., site or micro-site). Therefore, the GUI  contemplates any suitable graphical user interface, such as a combination of a generic web browser, intelligent engine, and command line interface (CLI) that processes information in the platform and efficiently presents the results to the user visually.","As used in this disclosure, each client  is intended to encompass a personal computer, touch screen terminal, workstation, network computer, kiosk, wireless data port, smart phone, personal data assistant (PDA), one or more processors within these or other devices, or any other suitable processing device. For example, each client  may comprise a computer that includes an input device, such as a keypad, touch screen, mouse, or other device that can accept user information, and an output device that conveys information associated with the operation of one or more application systems , , those system's business applications , , the central monitoring application , and\/or the client  itself, including digital data, visual information, or the GUI. Both the input and output device may include fixed or removable storage media such as a magnetic storage media, CD-ROM, or other suitable media, to both receive input from and provide output to users of client  through the display, namely, the GUI . The client's  processor , interface , and memory  may be similar to or different from those described in connection with the other components illustrated in , although alternative implementations of one or more of these components may be used, as well as implementations where additional components may also be included.",{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 2","b":["200","205","205","210","205"]},"In the illustrated example, various systems are illustrated, namely, a SOAP backend server , a JDBC database system , a JMS system , and a file system . These systems are each associated with adapter engines\u2014adapter engine A  with the SOAP backend server  and the JDBC database system , adapter engine B  associated with the JMS system , and adapter engine C  associated with the file system . The relationships between these components are illustrated by the arrows . In some instances, the adapter engines may be located within the system they are associated with, while in others, the adapter engines may be located separately from those systems. For purposes of the illustration in , the adapter engines are illustrated separately from the associated systems for purposes of distinction. Further, the PI domain  is considered to include the adapter engines themselves, but not the associated systems. Each of the adapter engines are considered PI components within the PI domain  where messaging information and metadata is stored and available for access.","The PI domain  also includes three ABAP proxies: ABAP proxy A , ABAP proxy B , and ABAP proxy C . In alternative implementations, one or more of the proxies may be Java-based proxies, as appropriate. The proxies may be used in association with a system to create XML-based (or other standard language or protocol) messages for sending among heterogeneous systems. The systems associated with the proxies in  are not illustrated, but may perform and send messages through the PI domain  similar to the systems associated with the adapter engines. As described above, the proxies, whether Java- or ABAP-based, as well as the adapter engines, are used to send and receive messages between heterogeneous systems in the illustrated environment . As illustrated, the adapter engines and proxies exchange messages with the integration server , which can interpret the messages to determine the location or entity to which the messages are to be delivered. The integration server  can modify the messages as needed, including translation and\/or addressing (based on defined message mappings), prior to sending the messages on. Information regarding the messages being sent via the integration server  can be locally monitored, with the relevant information stored at the integration server  (or a communicably coupled location) for later use and analysis.","As illustrated by arrows , messages are sent between the various PI components (i.e., the adapter engines and proxies). Each of the messages illustrated in  are sent to the integration server , where those messages are relayed to the appropriate recipient. Although not illustrated, the adapter engines and proxies can send some or all of the messages directly to their respective recipients. Each of the PI components, as well as the integration server , can locally collect information and metadata associated with the information from the messages passing through or by the components. Users can access the information on a component-by-component basis to view or review the messages sent through the PI domain. However, as illustrated by the arrows , the solution manager server  can access each of the PI components and the sets of monitored information in order to pull that information into a single repository located at or accessible to the solution manager server  and its associated central monitoring application. The solution manager server  can access the information stored at (or associated with) the various PI components using APIs exposed by the PI components (or their associated systems) as described in . The collected information can be aggregated and\/or correlated in order to match outgoing messages from one system to incoming messages from another system. In some instances, the solution manager server  may perform various aggregation and correlation applications and functionality in order to match related messages.","A group of related messages may be considered successful when the final message of the group leaves the PI domain . For example, a message may be sent from the JMS system  (via the adapter engine ) to the file system  (via the adapter engine ). Once the message is provided to the file system , which is considered external to the PI domain , the message may be considered a success. If no errors have been identified for a particular group of related messages, but the final message has not left the PI domain, the group of related messages may be considered \u201ctemporarily successful.\u201d Temporarily successful messages may represent messages that have not completed their processing and routing through the PI domain, as well as messages that are stalled at some point in their path but that have not yet been identified as \u201cunsuccessful,\u201d or that have not yet resulted in an error or exception. In some instances, once \u201ctemporarily successful\u201d groups of messages have exceeded a particular time period or threshold, they may be considered \u201cunsuccessful,\u201d and the system may return an error. If an error has occurred and been identified for a particular group of related messages, those messages may be considered \u201cunsuccessful.\u201d","As illustrated, the information stored at each individual component can be accessed and retrieved by the solution manager server  (illustrated by arrows ). The solution manager server  may be associated with a plurality of PI domains other than the illustrated PI domain . In those instances, information about the other PI domains may be stored in the same or a different repository than the collected and retrieved information associated with the illustrated PI domain . When a technical user first accesses a monitoring application dashboard on the solution manager server  (i.e., associated with the central monitoring application  of ), the first action for the user may be to select a particular PI domain for viewing. The solution manager server  can then prepare a corresponding dashboard or other manner of presenting information specific to the selected PI domain. In this manner, the solution manager server  can be used in association with different PI domains and their associated components, including some PI domains where some physical components may be shared across the PI domains.",{"@attributes":{"id":"p-0049","num":"0048"},"figref":["FIG. 3","FIG. 1A","FIG. 1A"],"b":["300","100","300","100","300"]},"At  a PI domain is identified for monitoring. In some instances, a plurality of PI domains may be available for monitoring, such that the identified PI domain may be one of multiple PI domains associated with a central monitoring application (e.g., central monitoring application  in ). Further, identifying a PI domain for monitoring may be a result of a manual selection provided by a user or administrator, as well as an automatic and\/or dynamic selection based on one or more monitoring settings identified at or associated with the central monitoring application. Where multiple PI domains are available, the schedules for monitoring those PI domains may differ such that the central monitoring application may perform the operations associated with method  at different times\u2014or in response to different events\u2014for each PI domain.","At , a PI monitoring use scenario associated with the identified PI domain is identified. The PI monitoring use scenario can determine the frequency of data collections performed, as well as the type of data to be collected. Different monitoring use scenarios may include an operational monitoring scenario (e.g., general information at lower frequencies), a testing monitoring scenario (e.g., more information at higher frequencies), and a customized monitoring scenario (e.g., an at least partially user-defined scenario providing user-specified monitoring specifications), among others. In some instances, a PI monitoring use scenario may cause certain PI components to be accessed and their information collected on a different schedule or data mined for different information than other PI components within the same PI domain. In other instances, the PI monitoring use scenario may collect the same type of information from each PI component on a consistent schedule.","At , at least one PI component within the PI domain is identified for monitoring. The PI components to be monitored can be defined within a PI domain model associated with the identified PI domain, where the PI components and their relationship to each other and to a specific process can be defined. The PI domain may have been defined manually, or the PI domain may be automatically or dynamically defined based on information associated with the PI components including information on one or more integration scenarios, messaging interactions, or other related events or operations performed between one or more system components associated with the corresponding PI components. In some instances, the central monitoring application (or other component) performing method  may access the PI components sequentially, while in other instances, at least some of the PI components may be accessed concurrently.","At , an identified PI component is accessed. The central monitoring application (or other collection component) will execute in certain defined (and customizable) intervals. The central monitoring application accesses the information by accessing the data collected and stored locally on or associated with each PI component. In some instances, an agent, module, or portion of the central monitoring application (or other collection component) may be included as part of one or more of the PI components, allowing the agent or module to collect the information and provide the information to the central monitoring application at appropriate intervals. In the present example, the PI component can be accessed via one or more APIs associated with a local monitoring tool associated with the PI component and\/or APIs associated with the PI component itself. In other instances, the central monitoring application may directly access the stored information in the one or more memories associated with the PI component and its underlying application (or technical) system. In some instances, more than one PI component may be associated with a single technical system, such as where a single technical (or application) system performs multiple operations and\/or functionality.","At , a set of relevant messaging information associated with the PI domain is retrieved from the identified PI component. Again, the retrieval of the relevant messaging information may be performed via APIs associated with the identified PI component, a local monitoring tool associated with the identified PI component, through direct accessing of messaging information stored at the underlying technical or application system, and through other suitable methods. The set of messaging information may be determined at least in part by the PI monitoring scenario identified at , which may provide a generic set of information to be retrieved for each PI component within the PI domain, as well as specific sets of information to be retrieved for specific PI components. An example of the information retrieved may include message metadata (e.g., integration scenarios, technical channels, and other information related to the messages), statistics associated with the messages (e.g., a number of similar messages received, etc.), and status information regarding the messages (e.g., whether a message was successfully passed to its recipient, whether an error occurred during message processing, etc.).","At , the retrieved (or collected) messaging information from the identified PI component is persisted to a centralized location associated with the PI domain. In some instances, the retrieved messaging information can be persisted within a memory or database solely associated with a single PI domain, while in other instances, the messaging information may be stored in a memory or database common to multiple PI domains. The retrieved messaging information can be associated with a PI domain identifier or within a particular table or set of entries associated with the PI domain to assist the central monitoring application in identifying the information associated with a particular PI domain.","At , a determination is made as to whether additional PI components within the PI domain are to be accessed and their associated information is to be retrieved. If no additional PI components within the PI domain are to be accessed, method  continues to . If, however, additional PI components associated with the PI domain are to be accessed, method  returns to , where the next PI component is accessed and the messaging information is retrieved. Messaging information may be retrieved differently (i.e., via different mechanisms) for one or more of the PI components. In some instances, two or more PI components may be concurrently accessed by the central monitoring application, such that messaging information is collected from different PI components at the same (or overlapping) times.","At , a determination is made as to whether one or more PI components are to be re-accessed to retrieve new messaging information. In some instances, this determination may be based on the PI monitoring scenario currently associated with the PI domain, as well as various settings associated with the central monitoring application. For instance, some monitoring scenarios may require information to be accessed at regular intervals. If the interval is met, the determination at  will be \u201cyes\u201d and return to , where the PI component is re-accessed according to the monitoring scenario. Additionally, certain identified events, including a user request for updated information, may cause at least one PI component to be accessed again. If the determination of  is \u201cno,\u201d method  waits until another PI component is to be accessed and updated or until the monitoring of the PI domain ends.",{"@attributes":{"id":"p-0058","num":"0057"},"figref":["FIG. 4","FIG. 6A","FIG. 6A"],"b":["400","405","600","600"]},"Returning to , at  a selection of a particular PI domain is received. In some instances, the selection can be received through the GUI (or other input\/output component) at the client where the PI domain monitor is presented. The selection of the particular PI domain may be received via any appropriate input, including a mouse-click, a keyboard shortcut, a voice input, or any other suitable entry. In some instances, where a single PI domain is presented with the PI domain monitor, the selection of the sole PI domain may be automatic.","At , a set of monitoring information associated with the selected PI domain is retrieved from a persisted location (or locations). At , the retrieved monitoring information associated with the selected PI domain is presented in the monitoring dashboard.  illustrates an example presentation of such information in an overview monitor  for a selected PI domain. As illustrated, information is presented in an organized and aggregated manner for different PI and technical components within or associated with the PI domain. For example,  presents three primary components within the selected PI domain, the integration server , a set of adapter engines, and the associated or connected business systems. Further, when the integration server  (or another PI component) is selected, additional information associated with the integration server and its messages is presented in an individual view  associated with the selected PI component (in , presenting information associated with both a ABAP-based and Java-based messages represented by B4X(ABAP) and B4X(JAVA)). General information associated with the alerts and other monitoring information associated with the PI domain is presented in both the overview monitor  and the more detailed individual component view , with technical users being able to select UI elements associated with that information to access and present additional information.","Returning to , at  one or more selections, commands, or filters associated with the presented monitoring information may be received. The selections, commands, and filters may include various types of input, including mouse-clicks upon certain elements within the presented dashboard, user input provided via filter boxes to determine the type or dates of certain data to be presented, and dropdown box selection of predetermined filter criteria.  illustrates an example of the information presented within a particular portion of the generated dashboard. Specifically,  illustrates an example message monitor  where specific message filters can be applied. In the illustrated example, the filter applied is for messages from the current year (as selected via the dropdown box ). Once the filter is applied, the presented monitoring information is modified based at least in part on the received selection, command, or filter ( of method ). In the illustrated example of , a detailed set of information associated with the filter is presented in a new window . The new window  provides three separate monitoring views\u2014an error monitor  (as illustrated in ), a backlog monitor, and a message flow monitor.  illustrates the message error monitor , where information on messages receiving errors can be presented. As illustrated, an error localization view provides information on the components at which errors have occurred in a table view. An error status view provides a listing of the error details for messages, as well as the number of messages (or related messages) receiving the same error. Additional information associated with a selected entry or value may be provided, including various drill-down menus and graphs provided within the illustrated dashboard. With each selection by a user, the dashboard can be modified (i.e., at  of method ) to present the information associated with the received request, command, or filter. At  of , a determination is made as to whether a request to view another PI domain is received. If so, method  returns to , where the new PI domain is selected and the associated dashboard and messaging information is presented. If not, method  returns to  where a wait for new commands, selections, and filters is performed.",{"@attributes":{"id":"p-0062","num":"0061"},"figref":["FIG. 6D","FIG. 6C","FIG. 6E"],"b":["645","639","645","645","648","645","400","660"]},{"@attributes":{"id":"p-0063","num":"0062"},"figref":["FIGS. 5A and 5B","FIGS. 5A and 5B"],"b":["500","500"]},"At , monitoring information associated with a particular PI domain is presented, such as in the example dashboards described herein. In some instances, the monitoring information may already be presented or may be in a particular state after the information's initial presentation. At , a selection of a displayed set of PI domain monitoring and messaging information is received. For example, information associated with a particular error alert or backlogged message can be selected. At , detailed information associated with the selected set of PI domain monitoring information can be retrieved and displayed, such as in one of the example dashboards described herein. At , a determination may be made as to whether a command or request to re-execute or re-initiate an event or action associated with the selected set of PI domain monitoring information is received. The command\/request may be received through one of the dashboards presented to a user, particularly where one or more messages are associated with an error or backlog via the error monitor or the backlog monitor. Users may be provided with the ability to ask for messages to be reinitiated to check whether an error or issue is continuing, or whether an error or delayed execution (in the backlog case) continues. If such a request is received, method  continues at . If such a request is not received, method  moves to .","At , the command to reinitiate or re-execute one or more messages associated with the selected set of PI domain monitoring information is received. At , the actions or events associated with the selected set of PI domain monitoring information (i.e., the identified messages) is identified. In some instances, the presented monitoring information may identify or be associated with a particular message type, message sender, message receiver, and related information. Some of that information may be readily available, while in others, the central monitoring application may analyze the selected set of PI monitoring information to determine the associated PI components (and corresponding technical systems).","At , at least one operation associated with the identified actions or events is initialized. In some instances, the central monitoring application may have established connections with the technical systems containing or associated with the PI components within the particular PI domain. Information on these connections, including one or more APIs, can be used by the central monitoring application to access the functionality of the underlying technical system, allowing the central monitoring application to initiate, restart, or cancel messages in the PI domain and associated with the technical system. The central monitoring application can provide the necessary values and information to the technical system to perform the associated operation, event, or action. Once the at least one operation, event, or action is restarted, the normal monitoring activities of the central monitoring application may continue. In some instances, the known PI components associated with the particular operations may be monitored on a higher frequency in order to follow one or more messages associated with the event, allowing for real-time or near real-time monitoring of the restarted message or messages and their relative success or failure. At , information associated with the results of the at least one initialized operation can be displayed or presented, such as within the dashboards described herein, as well as in one or more new windows or displays presented in or concurrently with the dashboards. Once the results are displayed, method  returns to , where the steps can continue.","Returning to the determination of , where no commands or requests to re-execute or reinitiate events are received, method  continues at . In some instances, method  may concurrently perform operations - and the operations of -. Further, in some instances, the operations - may be performed before the operations of -. In general, the operations of - allow users to generate a helpdesk ticket based on the selected information from . In some instances, if the operations of - demonstrate that previously-identified issues remain, the operations of - may be used to generate the helpdesk ticket.","At , an initial determination is made as to whether a command or request to generate a helpdesk ticket associated with the selected set of PI domain monitoring information can be made. If no such request or command is received, method  can return to . If, however, such a request or command is received, method  continues at . At , a helpdesk ticket template associated with the selected set of PI domain monitoring information can be generated. In some instances, a generic helpdesk ticket may be used with information derived from the selected set of PI domain monitoring information being used to fill in at least a portion of the generic template. At , additional information associated with the generated helpdesk ticket may be received, such as information provided by the user including notes, additional details, or an importance\/severity level, for example. Additionally, one or more of the automatically generated portions of the helpdesk ticket can be modified by the user. At , a command or request to finalize and send the completed helpdesk ticket may be received. At , once the command is received, the helpdesk ticket is completed and sent to the appropriate user or administrator. In some instances, information on the technical system(s) associated with the selected set of PI domain monitoring information may be used to determine the appropriate user or administrator to whom to address the completed helpdesk ticket, while in other instances, the ticket may be sent to a general helpdesk account or a manually-specified user or account. Method  then returns to  where a new set of PI domain monitoring information can be selected.","The preceding figures and accompanying description illustrate example processes and computer implementable techniques. But environment  (or its software or other components) contemplates using, implementing, or executing any suitable technique for performing these and other tasks. It will be understood that these processes are for illustration purposes only and that the described or similar techniques may be performed at any appropriate time, including concurrently, individually, or in combination. In addition, many of the steps in these processes may take place simultaneously, concurrently, and\/or in different orders than as shown. Moreover, environment  may use processes with additional steps, fewer steps, and\/or different steps, so long as the methods remain appropriate.","In other words, although this disclosure has been described in terms of certain embodiments and generally associated methods, alterations and permutations of these embodiments and methods will be apparent to those skilled in the art. Accordingly, the above description of example embodiments does not define or constrain this disclosure. Other changes, substitutions, and alterations are also possible without departing from the spirit and scope of this disclosure."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF DRAWINGS","p":[{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIGS. 1A and 1B"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":["FIG. 3","FIG. 1A"]},{"@attributes":{"id":"p-0010","num":"0009"},"figref":["FIG. 4","FIG. 1A"]},{"@attributes":{"id":"p-0011","num":"0010"},"figref":["FIGS. 5A and 5B","FIG. 1A"]},{"@attributes":{"id":"p-0012","num":"0011"},"figref":["FIGS. 6A-E","FIG. 1A"]}]},"DETDESC":[{},{}]}
