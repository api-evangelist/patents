---
title: Extensible configuration methods for optical networking apparatuses with multiple multi-protocol optical networking modules
abstract: An API including a registration function and a configuration function, is provided to an optical networking apparatus to facilitate registration of configuration specification delimiter pairs by service routines of function blocks of multi-protocol optical networking modules (MPONM), and extraction of configuration specifications for the function blocks from a configuration specification input set using the registered configuration specification delimiter pairs. In one embodiment, the configuration function also receives current configuration of the function blocks, and merges the received current configurations of the function blocks into a configuration specification output set, separating the merged configuration specification using the registered configuration specification delimiters.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08914509&OS=08914509&RS=08914509
owner: Null Networks LLC
number: 08914509
owner_city: Las Vegas
owner_country: US
publication_date: 20020802
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","DETAILED DESCRIPTION OF EMBODIMENTS OF THE INVENTION","TERMINOLOGY","Section Headings, Order of Descriptions and Embodiments","Overview","Networking Applications","Module Data Structure","Module Initialization Function","Configuration Specification","Organization of Registration Data","Configuration related Register Function","Config_Set and Config_Get Functions","FB_Config_Set and FB_Config_Get Functions","CONCLUSION AND EPILOGUE"],"p":["The present invention relates to software methods and networking apparatuses. More specifically, the present invention relates to extensible software methods for configuring multi-protocol optical networking modules (MPONM) in an optical networking apparatus.","With advances in integrated circuit, microprocessor, networking and communication technologies, an increasing number of devices, in particular, digital computing devices, are being networked together. Devices are often first coupled to a local area network, such as an Ethernet based office\/home network. In turn, the local area networks are interconnected together through wide area networks, such as SONET networks, ATM networks, Frame Relays, and the like. Of particular importance is the TCP\/IP based global inter-network, the Internet. Historically, data communication protocols specified the requirements of local\/regional area networks, whereas telecommunication protocols specified the requirements of the regional\/wide area networks. The rapid growth of the Internet has fueled a convergence of data communication (datacom) and telecommunication (telecom) protocols and requirements. It is increasingly important that data traffic be carried efficiently across local, regional, as well as wide area networks.","As a result of this trend of increased connectivity, an increasing number of applications that are network dependent are being deployed. Examples of these network dependent applications include but are not limited to, the world wide web, email, Internet based telephony, and various types of e-commerce and enterprise applications. The success of many content\/service providers as well as commerce sites depend on high speed delivery of a large volume of data across wide areas. As a result, high speed data trafficking devices, such as high speed optical, or optical-electro routers, switches and so forth, are needed.","Unfortunately, because of the multiplicity of protocols, including datacom and telecom protocols, that may be employed to traffic data in the various types of networks, designers and developers of networking components and equipment, such as line cards, routers and switchers, have to wrestle with a multitude of prior art protocol processors. Each of these protocol processors is typically dedicated to the support of either local\/regional or regional\/wide area protocols, in their design of these components\/equipment. This burden is costly, and slows down the advancement of high speed networks.","U.S. patent application Ser. Nos. 09\/860,207 and 09\/861,002, both filed on May 18, 2001, entitled \u201cA MULTI-PROTOCOL NETWORKING PROCESSOR WITH DATA TRAFFIC SUPPORT SPANNING LOCAL, REGIONAL AND WIDE AREA\u201d, and \u201cAN OPTICAL NETWORKING MODULE INCLUDING PROTOCOL PROCESSING AND UNIFIED SOFTWARE CONTROL\u201d respectively, disclosed a novel highly flexible multi-protocol processor capable of supporting high-speed data traffic in local, regional, and wide area networks, and a multi-protocol optical networking module that can be constructed from such a multi-protocol processor. Resultantly, sophisticated optical-electrical networking apparatuses such as optical-electrical routers and switches may be built more efficiently with multiple ones of the disclosed multi-protocol optical networking module (each having its own multi-protocol processor).","In turn, the task for developing networking applications for such sophisticated optical-electrical networking apparatus with multiple ones of the disclosed multi-protocol optical networking module (each having its own multi-protocol processor) have become much more difficult, in particular, the task for equipping the networking applications with the ability to configure and dynamically re-configure such networking apparatuses. Accordingly, a software architecture, including methods, that reduces the complexity and improves the ease for developing networking applications for such complex networking apparatuses with multiple ones of the disclosed multi-protocol optical networking module (each having its own integrated multi-protocol processor) is desired.","The present invention includes software methods, in particular, an application programming interface (API) for networking applications to interact with function blocks of multi-protocol processors of the MPONM of an optical-electrical networking apparatus, including API and function block service routines supporting configuration of the function blocks of the multi-protocol processors of the MPONM in an extensible manner.","In the following description, various aspects of the present invention will be described. However, it will be apparent to those skilled in the art that the present invention may be practiced with only some or all aspects of the present invention. For purposes of explanation, specific numbers, materials and configurations are set forth in order to provide a thorough understanding of the present invention. However, it will be apparent to one skilled in the art that the present invention may be practiced without the specific details. In other instances, well-known features are omitted or simplified in order not to obscure the present invention.","Parts of the description will be presented in data processing terms, such as data, variables, methods, request, return, and so forth, consistent with the manner commonly employed by those skilled in the art to convey the substance of their work to others skilled in the art. As well understood by those skilled in the art, these quantities take the form of electrical, magnetic, or optical signals capable of being stored, transferred, combined, and otherwise manipulated through electrical and\/or optical components of a processor and its subsystems.","Part of the descriptions will be described using networking terms, including but are not limited to:",{"@attributes":{"id":"p-0023","num":"0022"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Egress","Outgoing data path from the system to the network"]},{"entry":[{},"HDLC","High-Level Data Link Control. A communication"]},{"entry":[{},{},"protocol used in a Packet Over SONET switching"]},{"entry":[{},{},"network."]},{"entry":[{},"Ingress","Incoming data path from the network to the system"]},{"entry":[{},"IP","Internet Protocol"]},{"entry":[{},"LAN","Local Area Network"]},{"entry":[{},"MAC","Media Access Control layer, defined for Ethernet"]},{"entry":[{},{},"systems"]},{"entry":[{},"POS","Packet Over SONET"]},{"entry":[{},"PPP","Point to Point Protocol"]},{"entry":[{},"SONET","Synchronous Optical NETwork, a PHY"]},{"entry":[{},{},"telecommunication protocol"]},{"entry":[{},"WAN","Wide Area Network"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The terms \u201cprovide\u201d and \u201cproviding\u201d, and other terms of the like, as used in this specification and in the claims, include indirect as well as direct provision of the object of the provision operation. That is, an entity A may \u201cprovide\u201d another entity B with an item C (the object of the provision operation) directly, or indirectly by providing entity B with information to obtain the object item C, such as a pointer to a location from which the object item C may be obtained.","Section headings are merely employed to improve readability, and they are not to be construed to restrict or narrow the present invention.","Various operations will be described as multiple discrete steps in turn, in a manner that is most helpful in understanding the present invention, however, the order of description should not be construed as to imply that these operations are necessarily order dependent. In particular, these operations need not be performed in the order of presentation.","The phrase \u201cin one embodiment\u201d is used repeatedly. The phrase generally does not refer to the same embodiment, however, it may. The terms \u201ccomprising\u201d, \u201chaving\u201d and \u201cincluding\u201d are synonymous, unless the context dictates otherwise.","Referring now to -, wherein three block diagrams illustrating an overview of the software method of the present invention, in accordance with one embodiment, including an optical-electrical networking apparatus  having multiple MPONM -within which the present invention may be practiced, are shown. As illustrated, for the embodiment, optical networking apparatus  includes a number of MPONM -, a control processor , and memory , coupled to each other through system bus . Each of MPONM -includes at least one multi-protocol processor having a number of function blocks, as illustrated in , and as described in the above identified co-pending U.S. pending patent applications.","In various embodiments, the various MPONM -may be connected to system bus  in like or different manners. For examples, all MPONM -may be connected via corresponding serial or parallel interfaces, or some MPONM * are connected via corresponding serial interfaces, while others are connected via corresponding parallel or other bus interfaces.","Accordingly, for the embodiment, various device drivers  are provided to facilitate the various corresponding types of interfaces for connecting MPONM -to system bus . That is, a serial interface oriented device driver  is provided to facilitate connection of some or all of MPONM -via corresponding serial interfaces, a parallel interface oriented device driver  is provided to facilitate connection of some or all of MPONM -via corresponding parallel interfaces, and so forth.","In one embodiment, the function blocks of a multi-protocol processor include a system interface block , network interface blocks -, a MAC block , an Ethernet 64\/66 coder , an Ethernet on SONET coder block , a PPP protocol and HDLC processor block , a HDLC Packet over SONET coder block , a SONET path processor block , a SONET section and line processor block , and a control interface . The various function blocks - are selectively employed in combination to service data transmission and receipt in accordance with a selected one of a number of frame based protocols, including frame based protocols encapsulated within a synchronous protocol, as well as streaming and packet variants of the synchronous protocol. These protocols include at least one each a datacom and a telecom protocol.","Briefly, the system interface block  is employed to facilitate input of egress data from the system and output of ingress data to the system from the MPONM. The MAC block  is employed to perform data link sub-layer media access control processing on egress and ingress MAC data. The Ethernet 64\/66 coder and Ethernet on SONET Coder blocks - are provided to perform physical sub-layer 64\/66 and Ethernet on SONET coding and decoding for the egress and ingress MAC data respectively.","The PPP\/HDLC processor block  is employed to perform data link sub-layer point-to-point protocol and high level data link control processing on IP, PPP, and HDLC data. The PPP\/HDLC processor  is employed to frame or de-frame IP and POS data, providing appropriate encapsulation or de-encapsulation, in accordance with PPP and HDLC. The HDLC POS coder block  is provided to perform physical sub-layer Packet Over SONET coding and decoding for the egress and ingress HDLC data respectively.","The SONET path processor block  is provided to perform path processing for \u201cpacketized\u201d SONET data and coded frame-based data, whereas the SONET section and line processor block  is provided to perform section and line processing for \u201cpacketized\u201d as well as \u201cstreaming\u201d SONET data. The network interface blocks -are provided to facilitate output of egress data and input of ingress data.","Control interface  is employed to facilitate interaction between the multi-protocol processor and external devices.","The optical-electrical components of a MPONM * include e.g. digital-to-analog and analog-to-digital components, as well as laser components for encoding data on an optical beam and\/or decoding data from an encoded optical beam. For the purpose of the present application, the optical-electrical components of a MPONM * is also referred to as a \u201cfunction block\u201d. Accordingly, the term \u201cfunction block\u201d as used in the claim refers to a selected one of the function blocks of a multi-protocol processor and the collection of the optical-electrical components of a MPONM *. Thus, if networking applications  are required to access, control or otherwise interact with each of these function blocks of each of the multi-protocol processors of the MPONM directly, the complexity may become if not prohibitive, at least not very productive for the average software developers, especially in view of the multiplicity of multi-protocol processors and MPONM present in each optical networking apparatus .","Accordingly, under the present invention, MPONM API  and function block service routines  are provided for interfacing with the function blocks of the multi-protocol processors of the MPONM *, to insulate the complexity of the function blocks of the multi-protocol processors of the MPONM * from networking applications .","In particular, for the embodiment illustrated in , MPONM API  includes at least externalized module initialization function , Config_Set function , and Config_Get function , as well as internal configuration related Register function . The elements - are provided to further streamline the interactions between networking applications  and MPONM function block service routines , especially with respect to configuring the various function blocks of the multi-protocol processors of MPONM *.","The terms \u201cexternalized\u201d and \u201cinternal\u201d are used in the current context from the visibility perspective of networking applications  for ease of understanding. Such characterizations have no significance as to the essence of the present invention.","Also for ease of understanding, only the configuration relevant functions of API  are shown and described. In various embodiments, API  may further include other functions to facilitate other interactions between networking applications  and MPONM *.","For the embodiment, each \u201cparticipating\u201d function block service routine  includes corresponding implementations of FB_Config_Set and FB_Config_Get functions -.","MPONM API  buffers networking applications  making access, controlling, or otherwise interacting with MPONM, through MPONM function block service routines  using MPONM module data structures , one for each MPONM *.","More specifically, initialization function  is employed to initialize corresponding module data structures  for MPONM * to facilitate the interactions.","Config_Set and Config_Get functions - are employed to facilitate networking applications  in configuring the function blocks of the multi-protocol processors of MPONM * and obtaining the current configuration respectively. Config_Set function  obtains the configuration specifications from buffer set up by networking applications . In one embodiment, Config_Set function  is provided with a pointer to buffer , when invoked. Similarly, Config_Get function  outputs the requested current configuration specifications into buffers , which too is set up by network applications . In one embodiment, Config_Get function  is provided with a pointer to buffer , when invoked.","For the embodiment, both Config_Set function  and Config_Get function  effectuate their functions using the configuration specification delimiters registered by the function block service routines , and in cooperation with the FB_Config_Set and FB_Config_Get functions - of the applicable function block service routines .","Configuration related Register function  is employed to facilitate the corresponding function block service routines  in registering corresponding configuration specification delimiters for the function blocks (which as describer earlier and to be explained in more detail later, are used by Config_Set and Config_Get functions -).","FB_Config_Set and FB_Config_Get functions - of the function block service routines  are employed to actually configuring the corresponding function blocks of the multi-protocol processors of the MPONM * and retrieve (and\/or output) the current configuration of the function blocks respectively.","In one embodiment, portions of module data structures  are also used by the above described configuration related functions to store a portion or all configuration related data. In other embodiments, other configuration related working data structures are created during the configuration or configuration read out process, and deleted upon completion of the configuration or configuration read out.","Except for MPONM API , including the initialization, Config_Set, Config_Get and Register functions -, the teachings of the present invention incorporated with function block service routines , including service routines  implementing FB_Config_Set and FB_Config_Get functions -, and the manner networking applications  and function block service routines  cooperate with MPONM API , networking applications  and function block service routines  otherwise represent a broad range of such elements known in the art, and are typically application dependent. Accordingly, except for the manner networking applications  and function block service routines  cooperate with MPONM API , the two types of elements will not be otherwise further described.","[The asterisk at the end of a reference number denotes a \u201cwild card\u201d, representing any of the trailing suffixes of the reference numbers employed in a figure. For example, * stands for , or any one of the other  references of FIG. .]",{"@attributes":{"id":"p-0051","num":"0050"},"figref":["FIGS. 2","FIG. 2"],"i":["a","b ","a"],"b":["2","112","114","522","112","112","522","114","106","202"]},"In one embodiment, networking application  identifies the particular MPONM * by providing the \u201chandle\u201d of the device driver  handling the connecting interface through which the particular MPONM * is connected to bus , and if applicable, information (such as memory mapped addresses, port numbers and so forth) associated with how the particular MPONM * is mapped on the connecting interface.","As will be described in more detail below, in response, module initialization function  of MPONM API , in conjunction with the function block service routines , advantageously creates an instance of a MPONM structure  for the desired MPONM * to be initialized (if the data structure  has not been previously created for the MPONM *), to facilitate subsequent access, control and\/or interaction with the desired MPOMN * by networking applications , including configuration of the function blocks the multi-protocol processors of the desired MPONM *. As part of the process, a handle of the module data structure  for the initialized MPONM * is returned. More specifically, in one embodiment, the \u201chandle\u201d is a pointer to the corresponding module data structure  of the initialized MPONM *.","Thus, as illustrated, networking application  saves the returned handle (or pointer) to the module data structure  for the initialized MPONM *, upon receipt of the handle (or pointer) from module initialization function  of MPONM API .","Thereafter, networking application  determines if another MPONM * is to be initialized, block . If so, operations - are repeated; else the initialization process for networking application  continues and proceeds to completion.","In other embodiments, module initialization function  may support each initialization request requesting initialization of one or more desired MPONM * instead. For these embodiments, more than one desired MPONM * may be specified in a single request, with the request returning multiple corresponding handles (or pointers) for the successfully initialized ones of the requested MPONM *.","As illustrated in , upon having a need to request a service or having an operation performed in a function block of a MPONM * (such as configuring a MPONM or obtaining current configuration of a MPONM), networking application  retrieves the handle (or pointer) to the data structure  of the MPONM *, block , formats, and submits the request to an appropriate externalized function of MPONM API  (e.g. Config_Set function  or Config_Get function ).","For the embodiment, each request may also include an identification of the function block within which the requested operation is to be performed. However, the identification of the function block is not explicitly particularized to a MPONM *; and neither is an identification of the MPONM * provided. Instead, the MPONM * within which the function block of the requested operation is to be performed is implicitly identified. More specifically, for efficiency of operation, the handle (or pointer) of the module data structure  of the MPONM * is provided.","As those skilled in the art would appreciate, the implicit reference through the handle or pointer of the module data structure  of the MPONM * of interest improves the ease of the use for the software developers of networking applications, who are more used to working with handles\/pointers, as opposed to having to be cognizant of specific hardware modules, and hardware details, including the details of the connection interfaces through which the MPONM * are correspondingly connected.",{"@attributes":{"id":"p-0060","num":"0059"},"figref":"FIG. 3","b":"118"},"As described earlier, one module data structure  is employed for each MPONM *. In some embodiments, module data structures  are also employed to store the configuration related data. In other embodiments, additional configuration related working data structures created on demand, and deleted upon usage are also employed to facilitate configuration of the MPONM *.","As illustrated, each module data structure  includes a root object  and cross function block objects * having cross function block shared data variables. Examples of data included in root object  include but are not limited to data and\/or pointers employed in interacting with the appropriate device driver  for the particular MPONM *. Examples of such cross function data block shared variables include module identifier, and registers for putting data into and getting data out of selected ones of the function blocks of the MPONM *.","Additionally, each data structure  includes a number of \u201canchor\u201d data objects *, one each for the function blocks supported. \u201cAnchor\u201d data objects * may include a number of function block specific control data variables. Examples of such function block specific control data variables include status variables denoting e.g. whether the corresponding function block service routine  was successful in performing certain requested operations, registered configuration specification delimiters, and so forth.","Further, attached with each \u201canchor\u201d data objects * of the function blocks, are function block specific data objects *, having function block specific operational data variables. Examples of such function block specific operational data variables include bit masks, data rates, filter criteria, current configuration for various configurable parameters, and so forth.","In alternate embodiments, the present invention may be practiced using other data organization approaches.",{"@attributes":{"id":"p-0066","num":"0065"},"figref":"FIG. 4","b":["522","114","106","522","114","106","402","522","118","106","106","112","522","118","106","418"]},"Otherwise, i.e. if the module data structure  has not been previously created before, module initialization function  creates the root object  and global shared data objects * of the module data structure  of the MPONM *, block .","Thereafter, module initialization function  successively calls the corresponding function block service routine  of the function blocks to contribute to the creation of module data structure  (including anchor and function block specific data objects * and *) to facilitate subsequent access, control or interaction with MPONM * by networking applications , block .","For the embodiment, after each invocation, module initialization function  further determines whether the contributory creation expected of the invoked function block service routine is successful, block . If an error is returned for the contributory creation, module initialization function  successively undo all prior successful additions to the module data structure , block , and returns an error notice to the network application , block .","If the contributory creation was determined to be successful at block , module initialization function  further determines if additional function block service routines  are to be invoked, block . If at least one additional function block service routine  is to be invoked, module initialization function  continues operation at block  as earlier described.","If not, the cooperation creation initialization process is completed, and module initialization function  returns the handle\/pointer of the module data structure  of MPONM * as earlier described, block .","Resultantly, accessing, controlling or otherwise interacting with MPONM * by networking applications  is streamlined.","For the embodiment, if a function block service routine  is invoked to contribute to the creation of a module data structure  for the first time (since the last power up\/reset), has configurable parameters, and employs special configuration specification delimiters, the function block service routine  invokes configuration related Register function  to register the special configuration specification delimiters with the MPONM API .","In alternate embodiments, registration of the special configuration specification delimiters employed for configurable parameters of different function blocks may be practiced outside the initialization process, and in other, e.g. on demand, manner.","Beyond registration of configuration specification delimiters (if practiced), the exact manner a function block service routine  contributes in the creation of the module data structure of a MPONM *, i.e. the kind of data variables the function block service routine  adds to, maintains, or otherwise manipulates, using module data structure  is application dependent. Similarly, the nature and the manner of how the function block service routine  interacts with the MPONM *, in particular the function block, are application dependent. These issues vary from function blocks to function blocks.","Further, in various embodiments, invocation of the function block service routines  to contribute to the creation of the module data structure  may be made in a predetermined order, to address certain application dependencies, such as data dependencies between data of different function blocks.",{"@attributes":{"id":"p-0077","num":"0076"},"figref":"FIG. 6","b":["113","524","112","113","112","526"],"i":["a ","b "]},"As illustrated, the embodiment employs XML (Extended Mark Up Language) Tags * as configuration specification delimiters to delimit global module as well function block specific configuration specifications. Further, XML Tags * are also employed to delimit each configuration parameter within each \u201cgroup\u201d, i.e. module\/function block, of configuration specifications.","For the particular example configuration specification  illustrated, the configuration specifications include a set of configuration specifications specifying configuration for a number of global module parameters, and a number of sets of configuration specifications specifying configuration for a number of function block parameters of a number of function blocks of a multi-protocol processor of a MPONM. Again, for the embodiment, specification  does not particularize the MPONM to which the configuration specifications apply (or are associated with). As described earlier, that is effectuated through the inclusion of the handle (or pointer) to the module data structure  of the MPONM, when the Config_Set function  or Config_Get function  is invoked.","The configuration specifications for the global module parameters are delimited by the <module> and <\/module> tags . The example configuration specifications include a configuration specification for \u201cflow type\u201d of the network traffic to be processed by the module, a configuration specification for the write latency of the module, and so forth. These example module related configuration specifications are delimited by the <Flow> and <\/Flow> tags and the <WrtLatency> and <\/WrtLatency> tags respectively.","The configuration specifications for the SPI function block parameters are delimited by the <SPI> and <\/SPI> tags . The example configuration specifications include a configuration specification enabling egress of network traffic, a configuration specification enabling ingress of network traffic, a configuration specification for the data burst size of the function block, and so forth. These example SPI function block related configuration specifications are delimited by the <EnableEgress> and <\/EnableEgress> tags , <EnableIngress> and <\/EnableIngress> tags and the <BRSTSize> and <\/BRSTSize> tags respectively.","The configuration specifications for the SONET function block parameters are delimited by the <SONET> and <\/SONET> tags . The example configuration specifications include a configuration specification for a row, a configuration specification for a column, a configuration specification for a plane, a configuration specification for a channel, a configuration specification for a behavior, and so forth, for a \u201ccap unit\u201d. These example SONET function block related configuration specifications are delimited by the <Row> and <\/Row> tags , <Column> and <\/Column> tags , <Plane> and <\/Plane> tags , <Behavior> and <\/Behavior> tags , and <Channel> and <\/Channel> tags respectively.","As those skilled in the art would appreciate, XML tags are complementary, in that, each tag of a tag pair may be inferred from the other, i.e. the end of specification delimiter for global module parameters, <\/module>, may be inferred from the start of specification delimiter for global module parameters, <module>, or vice versa. Accordingly, for delimiters having such complementary characteristics, only one delimiter of a delimiter pair needs to be known or registered. As most often, regardless of whether configuration specification inputs are being processed or current configurations need to be outputted, the first delimiter to be encountered or outputted would be the \u201cstart of configuration specification\u201d delimiter, thus when only one delimiter of a delimiter pair is registered or maintained, potentially, it may be more efficient to register or maintain the \u201cstart of configuration specification\u201d delimiter. However, the present invention may be practiced with the \u201cend of configuration specification\u201d delimiter being registered or maintained, or having both being registered or maintained.","Further, the illustrated tags of  are exemplary. Additional tags of like kind may be employed to delimit the configuration specifications for other function blocks, as well as other global parameters of a module or its function blocks. Other non-XML tag delimiters may also be employed instead, to delimit the configuration specifications.","More importantly, by employing delimiters to delimit configuration specifications of global parameters of a module or its function blocks, and by providing Register function  to facilitate registration of the delimiters, the configuration approach of the present invention is advantageously extensible, allowing additional parameters and\/or function blocks to be configurable in follow on versions of MPONM. The delimiters delimiting the individual configurable parameters need not be registered, as they need to be understandable by the processing FB_Config_Set and FB_Config_Get functions - only.","As those skilled in the art would appreciate, and as illustrated by exemplary configuration specification , for the embodiment, the configuration specifications are inherently hierarchical in their \u201clayout\u201d. Resultantly, in one embodiment, to facilitate ease of development, a number of library functions for processing or traversing a hierarchical specification structure, sharable between Config_Set and Config_Get functions - and the function block implementations of FB_Config_Set and FB_Config_Get functions -, are provided.","These library functions include functions for obtaining a first tag, a last tag, a next tag, a parent tag, a child tag, the name of a tag, the delimited value within a tag, and functions for creating a tag, inserting a parameter value between a tag pair, inserting a tag pair together with its delimited value at a current level of the specification hierarchy and inserting a tag pair together with its delimited value at the next \u201cchild\u201d level of the specification hierarchy. Further, inputting and outputting configuration specifications often involve conversion of the specifications between selected two of a string form, a decimal form, a hexadecimal form, and a binary form. Thus, in various embodiments, these commonly employed conversion functions are also provided. Implementation of these library functions are well within the ability of those ordinarily skilled in the art. Accordingly, they will not be further described.",{"@attributes":{"id":"p-0088","num":"0087"},"figref":"FIG. 7","i":"a ","b":["524","526","700","702","700","706","708","524","526","700","526","700"]},"In one embodiment, each function block service routine  registers at least one of its configuration specification delimiter and the associated FB_Config_Set and FB_Config_Get functions - during initialization of networking apparatus . Accordingly, table  is dynamically built and maintained in memory  each time a networking apparatus starts up or re-initializes.","In another embodiment, each function block service routine  registers at least one of its configuration specification delimiter and the associated FB_Config_Set and FB_Config_Get functions - when the service routine is installed or refreshed on networking apparatus . Accordingly, table  is built during installation or update, and saved into a persistent store (not shown). In turn, table  is brought into memory  each time networking apparatus starts up or re-initializes.",{"@attributes":{"id":"p-0091","num":"0090"},"figref":["FIG. 7","FIG. 3"],"i":"b ","b":["118","720","720","722","724","106"]},"For ease of understanding, exemplary data structure  is merely illustrated as having only one descendant generation of child objects . Of course, as those skilled in the art would appreciate, exemplary data structure  may be organized in a hierarchical manner having two or more descendant generations of child objects.","As described earlier, in various embodiments, data structure  is a part of module data structure ; but for other embodiments, it is created on an as needed basis, i.e. during input and\/or output of configuration specifications, and deleted when a particular input\/output processing is completed.","In alternate embodiments, the present invention may also be practiced employing other data structures or data organization techniques known in the art.",{"@attributes":{"id":"p-0095","num":"0094"},"figref":"FIG. 8","b":["528","116","528","114"]},"For the embodiment, when invoking Register function , each function block service routine  provides Register function  with at least one of its configuration specification delimiter , and the corresponding identifiers - of FB_Config_Set and FB_Config_Get for the particular function block.","Thus, as illustrated, upon invocation, and receipt of a configuration specification delimiter  and identifications - of its associated FB_Config_Set and FB_Config_Get functions -, Register function  stores the information in a row  of look-up table .",{"@attributes":{"id":"p-0098","num":"0097"},"figref":["FIGS. 9","FIG. 9"],"i":["a","b ","a"],"b":["9","524","526","524","902","904","524","918"]},"However, if the \u201cnext\u201d configuration specification start delimiter is located, Config_Set  further determines if the located start delimiter is a delimiter delimiting the start of configuration specifications for global parameters of a MPONM, block .","If so, Config_Set  proceeds to locate the \u201cnext\u201d global module parameter, block . At block , Config_Set  determines if the attempt results in the return of a null, denoting the end of configuration specification for global module parameters. If the attempt was successful in locating a \u201cnext\u201d global module parameter, Config_Set  extracts the specified configuration and stores the extracted configuration specification in the working data structure, block . However, if the attempt did result in the return of a null, processing continues back at block .","Back at block , if it is determined that a located configuration specification start delimiter is not the start delimiter for global module parameters, Config_Set  locates the complementary configuration specification stop delimiter, block . Upon locating the complementary configuration specification stop delimiter, Config_Set  extracts the specified configuration for a function block, bounded by the start and end delimiters, and stores the function block configuration specifications in the working data structure, block .","From block , the process continues back at block  again. Eventually, when all configuration specifications have been processed, the attempt to locate the \u201cnext\u201d configuration specification start delimiter will result in the return of a null, and as described earlier, the process continues at block .","At block , Config_Set  first configures the MPONM at the module level based on the module level configuration specifications extracted and stored in the working data structure. Further, based on the function block configuration specifications extracted and stored in the working data structure, Config_Set  determines the appropriate FB_Config_Set  to invoke, and successively invokes these functions to configure the corresponding function blocks of the MPONM accordingly.","As described earlier, Config_Set  may e.g. determine the appropriate FB_Config Set  to invoke by accessing Table  to retrieve its identifier  using the located start delimiter . In various embodiments, Config_Set  may successively invoke the appropriate FB_Config_Set  in accordance with the order they are registered.","Further, Config_Set  may provide the extracted configuration specifications to a FB_Config_Set  directly, as part of the invocation, or indirectly, by providing a pointer to the working data structure (or the portion thereof) containing the application configuration specifications. In various embodiments, Config_Set  may provide the extracted configuration specifications directly for some FB_Config_Set functions , and indirectly for others.","As illustrated in , upon invocation, Config_Get  first outputs a configuration specification start delimiter for global module parameters into the working data structure, block . Thereafter, Config_Get  retrieves the current configuration for a \u201cnext\u201d global module parameter, block . At block , Config_Get  writes the retrieved current configuration for the global module parameter into the working data structure. Blocks - are repeated until all current configuration of global module parameters have been retrieved and outputted into the working data structure. Thereafter, Config_Get  writes the configuration specification end delimiter for global module parameters into the working data structure, block .","The process then continues at block , where Config_Get  writes the configuration specification start delimiter for the \u201cnext\u201d function block into the working data structure. At block , Config_Get  invokes the appropriate FB_Config_Get  to retrieve and write the current configuration for the configurable parameters of the function block into the working data structure. At block , Config_Get  writes the configuration specification end delimiter for the function block into the working data structure.","In alternate embodiments, FB_Config_Get  may return the retrieved current configuration for the configurable parameters to Config_Get  instead. In these cases, Config_Get  may write the returned current configuration for the configurable parameters of the function block into the working data structure itself.","As described, Config_Get  may determine the appropriate configuration specification start and stop delimiters for the function block by accessing Table  and retrieving the information. In various embodiments, Config_Get  may also successively invoke the appropriate FB_Config_Get  in accordance with the order they are registered.","Blocks - are repeated until all configuration specifications for all configurable parameters of all function blocks of the MPONM of interest have been outputted into the working data structure in the earlier described delimited manner. For the embodiment, the determinations are made at block .","At such time, Config_Get  may output the current configuration specification in an appropriate format, e.g. in the XML like format illustrated in . Config_Get  may also transfer the output specification into a buffer designated by the requesting networking application .",{"@attributes":{"id":"p-0112","num":"0111"},"figref":["FIGS. 10","FIG. 10"],"i":["a","b ","a"],"b":["10","530","532","530","1002","1004","530","530","1006","1002"]},"However, if any attempt did result in the return of a null, processing terminates, as all specified configuration for configurable parameters of the function block have been processed.","As illustrated in , upon invocation, FB_Config_Get  first outputs a configuration specification start delimiter for the next function block parameter to be retrieved and outputted (e.g. into the working data structure identified by Config_Get ), block . Thereafter, FB_Config_Get  retrieves the current configuration for the \u201cnext\u201d configurable parameter of the function block to be retrieved and outputted, block . At block , FB_Config_Get  writes the retrieved current configuration for the configurable parameter of the function block, and if applicable, the end delimiter (into the working data structure designated by Config_Get ).","Blocks - are repeated until all current configuration of configurable parameters of the function block have been retrieved and outputted.","Thereafter, FB_Config_Get  returns control to Config_Get , block .","In alternate embodiments, FB_Config_Get  may accumulate the configuration specifications to be outputted in a private (temporary) working data structure, and returns the contents of the private (temporary) working data structure when returning control to Config_Get , block .","Thus, it can be seen from the above descriptions, a novel highly flexible MPONM API equipped to streamline and improve the ease of network applications in accessing, controlling or otherwise interacting with function blocks of multi-protocol processors of MPONM, including configuring the function blocks in an extensible manner, has been described.","In particular, for the described embodiments, except for the designed manner of interaction, Config_Set and Config_Get - and various FB_Config_Set and FB_Config_Get - may be implemented independently, thereby according great flexibility to their respective designers, as well as extensibility.","While the present invention has been described in terms of the above described embodiments, those skilled in the art will recognize that the invention is not limited to the embodiments described. The present invention can be practiced with modification and alteration within the spirit and scope of the appended claims.","For example, a \u201cglobal\u201d function block may be recognized to facilitate configuration of module parameters. For such an example, the operation logic of Config_Set and Config_Get may be simplified without having to provide for separate logic to handle module parameters. That is, operations such as those depicted by blocks - and - of -may be eliminated.","Thus, the description is to be regarded as illustrative instead of restrictive on the present invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention will be described by way of exemplary embodiments, but not limitations, illustrated in the accompanying drawings in which like references denote similar elements, and in which:",{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":["FIGS. 2","FIG. 1"],"i":["a","b "],"b":"2"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":["FIGS. 5","FIG. 1"],"i":["a","b "],"b":"5"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIGS. 7","i":["a","b "],"b":"7"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIGS. 9","i":["a","b "],"b":"9"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIGS. 10","i":["a","b "],"b":"10"}]},"DETDESC":[{},{}]}
