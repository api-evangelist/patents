---
title: Policy engine for automating management of scalable distributed persistent applications in a grid
abstract: There are provided mechanisms and methods for automating management of Scalable Distributed Persistent Applications (SDPA) in a grid computing environment. These mechanisms and methods make it possible for physical and operating system resources in the grid to be dynamically allocated and/or de-allocated based upon the results of monitoring performance and monitoring usage of physical and operating system resources.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08954584&OS=08954584&RS=08954584
owner: Oracle America, Inc.
number: 08954584
owner_city: Redwood Shores
owner_country: US
publication_date: 20040818
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","BACKGROUND","SUMMARY","DETAILED DESCRIPTION OF EMBODIMENT(S)","Conceptual Overview","System Overview","Example Operation","Hardware Overview"],"p":["The present application contains subject matter that may be related to the subject matter in the following U.S. applications filed on Aug. 18, 2004, and assigned to the assignee of the present application: U.S. application Ser. No. 10\/921,595; U.S. application Ser. No. 10\/921,544; and U.S. application Ser. No. 10\/921,599.","In grid based computer implementations, it is desirable to be able to distribute work among a plurality of interconnected nodes forming a grid computing environment. Conventional approaches to the problem typically employ a distributed resource manager that allocates work to nodes having available computing resources. However, the conventional approaches are batch oriented\u2014that is, conventional approaches rely upon the work being able to be processed by the computers comprising the grid as a background task. In other words, in such conventional approaches, there are typically no users waiting with active sessions relying upon the results to be provided within a relatively short period of time.","Conventional approaches typically involve the use of a statically provisioned computing grid. Accordingly, the distributed resource manager may be apprised of only the workload and capabilities of the computers in the grid. Since computing grids are conventionally not used to support scalable distributed persistent applications (SDPA), i.e., a program without a definite termination point, there is no way to determine based upon the performance of a persistent application how that application is performing and whether additional resources need to be dedicated to the application. The result of such a deficiency is that when a persistent application, such as a web server, is met with a surge in demand, such as experienced by many news sites during the 9\/11 attacks, such systems are not capable of adjusting to handle the increased load. In one possible approach, a larger amount of resources could be statically allocated to the application in order to provide a large safety factor. However, the excess resources would typically be idle most of the time, leading to waste and inefficiency.","In accordance with one embodiment of the present invention, there are provided mechanisms and methods for automating management of Scalable Distributed Persistent Applications (SDPA) in a grid computing environment. Conceptually, a grid computing environment, or grid, is a collection of computing resources that performs tasks or renders services. Scalable Distributed Persistent Applications include without limitation application servers, web servers, portal servers, directory servers, web hosting, mail hosting and communication infrastructure provisioning applications and related applications, such as DSL provisioning, frame relay circuit provisioning and the like, simulations, and large volume data processing, data resource infrastructure managers and related applications and other applications having an indefinite lifespan implemented on a computer are contemplated. These mechanisms and methods make it possible for physical and operating system resources in the grid to be dynamically allocated and\/or de-allocated based upon the results of monitoring performance and monitoring usage of physical and operating system resources. Physical resources include without limitation processors, storage, peripheral devices and other devices operable with a computer or other processor based device to enhance the functionality of the computer or other processor based device are contemplated.","In one embodiment, a plurality of nodes comprising the grid is connected to a manager that manages use of the nodes. The manager may be a policy engine embedded within a grid engine that controls workflow to the grid, and may be deployed on one or more nodes of the grid. A plurality of persistent applications executing on the plurality of nodes provides a service to one or more users. Performance parameters about the service and usage information for usage of physical and operating system resources dedicated to the persistent applications are received at the policy engine. A set of one or more policies is applied to the performance parameters by the policy engine to determine if the performance parameters meet one or more conditions specified by the set of policies. A determination is made whether more or fewer instances of the persistent application are needed in order to meet the conditions specified by the set of policies.","The mechanisms and methods for automating management of Scalable Distributed Persistent Applications (SDPA) enables resources to be dynamically allocated and\/or de-allocated to the scalable distributed persistent applications based upon performance and other criteria. This ability to automatically scale grid resources based on the performance of scalable distributed persistent applications makes it possible for physical and operating system resources in the grid to be dynamically allocated and\/or de-allocated.","In accordance with one embodiment of the present invention, there are provided mechanisms and methods for automating management of Scalable Distributed Persistent Applications (SDPA) in a grid computing environment. Scalable Distributed Persistent Applications include without limitation application servers, web servers, portal servers, directory servers, web hosting, mail hosting and communication infrastructure provisioning applications and related applications, such as DSL provisioning, frame relay circuit provisioning and the like, simulations, and large volume data processing, data resource infrastructure managers and related applications and other applications having an indefinite lifespan implemented on a computer are contemplated. These mechanisms and methods make it possible for physical and operating system resources in the grid to be dynamically allocated and\/or de-allocated based upon the results of monitoring performance and monitoring usage of physical and operating system resources. In various embodiments, the physical and operating system resources include without limitation one or more of processors, storage, peripheral devices and other devices operable in conjunction with a computer or other processor based device to enhance the functionality of the computer or other processor based device are contemplated.","In one embodiment, a plurality of nodes comprising the grid is connected to a manager that manages usage of the nodes. The manager may be a policy engine embedded within a grid engine that controls workflow to the grid, and may be deployed on one or more nodes of the grid. A plurality of persistent applications execute on the plurality of nodes provides a service to one or more users. An operational flow diagram, which provides a high level overview of one embodiment of the present invention, is shown in .","In one embodiment, performance parameters about the service and usage information for physical and operating system resources provided by the plurality of nodes are received (block ). A set of one or more policies is applied to the performance parameters to determine if the performance parameters meet one or more conditions specified by the set of policies (block ). A determination is made whether more or fewer instances of the persistent application are needed in order to meet one or more conditions specified by the set of policies (block ). In various embodiments, the performance parameter includes without limitation one or more of hits to a web page per unit time, a response time, a number of transactions per unit time and other metrics for determining system performance are contemplated. In various embodiments, the usage information includes without limitation one or more of CPU utilization, bandwidth utilization, a number of applications per operating system image and other metrics for determining usage or loading of computer resources are contemplated.","In one embodiment, in response to a determination that at least one additional instance of the persistent application is needed, a provisioning decision is made based at least partially upon the usage information for the physical and operating system resources.","In one embodiment, the provisioning decision includes determining whether the additional instance should be provisioned on one of the plurality of nodes on which an instance of the persistent application is already executing. In response to a determination that an additional instance should be provisioned on one of the plurality of nodes on which an instance of the persistent application is already executing, nodes upon which additional instances of the persistent application may be deployed are selected from the plurality of nodes. Additional instances of the persistent application are deployed on the selected nodes.","In one embodiment, the provisioning decision includes determining whether one or more unused instances of the persistent application are deployed on one or more of the plurality of nodes. In response to a determination that at least one unused instance of the persistent application exists, one or more instances of the persistent application that may be off-loaded are selected from excess persistent application instances. The selected instances of the persistent application are de-allocated.","In other aspects, the invention encompasses in some embodiments, computer apparatus, computing systems and machine-readable media configured to carry out the foregoing methods.","Embodiments can enable dynamically allocating and\/or de-allocating physical and operating system resources in the grid based upon the results of monitoring performance and monitoring usage of physical and operating system resources.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1"},"As shown in , an example grid computing environment in which one embodiment of the present invention may be implemented includes a computing grid . Computing grid  comprises a variety of interconnected computing resources, including computing resources  and  managed by system , which acts as a resource manager for the grid. Optionally, a gateway , which can be a modem, router, local area network (LAN) connection, wide area network (WAN) connection, or other device or devices that provides connectivity can provide connectivity with Internet  or other publicly accessible networks. In various embodiments, system  and computing resources  and , may be connected by any one or more other variety of connections including networks, both public or private, communications links, shared memory interconnections, optical interconnections or the like.","System  includes a number of components that enable system  to act as a resource manager for the grid. For example, system  includes grid engine , an administrative interface  and a monitoring module . The monitoring module  receives configuration information  (of ) for each of the applications  that comprise a particular service. Monitoring module  also receives performance parameters for the applications  and usage information for the resources, such as hardware  and operating systems  on the various nodes. Monitoring module  processes the performance parameters information to obtain one or more overall performance parameter(s) for a particular service. Administrative interface  provides a mechanism for receiving requests from users external to the grid  and providing responses to the users' requests.","Computing resources  and  include any number and variety of computing resources. As shown in , computing resources  includes hardware upon which one or more operating systems  and one or more applications  may be deployed. Multiple applications  may execute on separate nodes of grid . The applications  may function together to provide an overall service. Services can include without limitation, such as financial transactions, i.e., banking, equity and commodity trading; merchandise sales, i.e., book sales clothing sales; consumer and business services, i.e., travel agency, equipment rental; an internet service provider (ISP) and other services implemented upon a computer are contemplated. For example an ISP may include various services components, such as without limitation routers, switches, servers and other hardware and software that provide infrastructure to the ISP services. The example services include without limitation DSL provisioning, frame relay circuits, web hosting, mail hosting and communication infrastructure provisioning and related services, as well as computing and data resource infrastructure and related services.","System  has the capability to allocate and de-allocate hardware , provision operating systems  on the hardware , and deploy one or more instances of applications  under the operating systems  in order to satisfy a request to provide a service. Grid engine  includes a policy engine  that makes a determination of whether more or fewer physical and operating system resources of grid  need to be allocated to the persistent applications  based upon monitoring information received from the monitoring module .","Policy engine  as operatively coupled to monitoring module  that provides monitoring information about applications , operating systems  and hardware  received from a monitoring system  deployed with the computing resources  and . Monitoring information includes performance parameter information about the service provided by the persistent applications  and usage information about physical and operating system resources, such as operating systems , hardware . In one embodiment, policy engine  uses performance parameters such as, without limitation, one or more of hits to a web page per unit time, response time, number of transactions per unit time and other metrics for determining system performance in making determinations whether more or fewer resources are to be allocated to the persistent applications. In one embodiment, the policy engine  employs usage information such as, without limitation, one or more of CPU utilization, bandwidth utilization, number of applications per operating system image and other metrics for determining usage or loading of computing resources, to determine a quantity of additional resources to allocate to an application, or to determine a quantity of excess resources to de-allocate from the application.","A monitoring system  provides performance parameter information about one or more persistent applications that render a service and usage information about physical and operating system resources upon which the persistent applications are deployed in the grid . Monitoring system  may be implemented in a variety of ways in different embodiments, however, in one embodiment, monitoring performance parameters of the persistent applications on the plurality of nodes includes receiving information from a software object configured to expose one or more parameters of the persistent application using a configurable re-usable configuration frameworks. While application specific alternatives exist, in one example application, the software object may be realized as a management bean (MBean) coupled to a configurable re-usable configuration framework implementing the Java Management Extension (JMX) specification of SUN Microsystems Incorporated to perform monitoring. In other implementations, the software objects may be classes implemented in one or more of C++, C#, REXX, or other object oriented programming systems, and the framework may be any of the re-usable configurable frameworks corresponding to the object oriented programming system being used.","MBeans are object classes associated with application , for example, to implement a JMX interface in order to expose certain aspects of the application  for monitoring. The MBeans are registered with the MBean server. The MBean server invokes the interfaces implemented by the MBeans in order to obtain performance monitoring information. A distributed service layer is used by remote management tools, such as monitoring module , in order to interface with the MBean server.",{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 2","FIG. 1","FIG. 2"],"b":["90","92","94","101","200","200","94","101","94","200","90","92","90","94","92","200","201"]},"Grid engine  includes a policy engine  that is operatively coupled to monitoring module , which provides monitoring information about applications , operating systems  and hardware . In one embodiment, usage information for physical and operating system resources may be monitored using a different mechanism from the mechanism used to monitor performance parameters. For example, as illustrated by , in one embodiment, monitoring module  employs a re-usable configuration framework conforming to the Java management extensions (JMX) specification to perform monitoring of performance parameters exposed by applications  and an exec daemon  is used to perform monitoring of usage information for physical and operating system resources such as hardware  and operating systems . In an alternative embodiment, usage information for physical and operating system resources is monitored using an identical mechanism to the mechanism used for monitoring performance parameters. Performance parameters include without limitation hits to a web page per unit time, response time, number of transactions per unit time and other metrics for determining performance of computer applications are contemplated. Usage information includes without limitation one or more of CPU utilization, bandwidth utilization, a number of applications per operating system image and other metrics for determining usage or loading of computer resources are contemplated.","In one embodiment, monitoring performance parameters is achieved with a management application having a configuration framework with attributes of re-usability, configurability and standardization, an example of which is Java Management eXtensions (JMX), including one or more software objects realized as management beans, Mbeans A, B and C, which comprise a JMX instrumentation layer. The MBeans A, B and C are Java class objects associated with one or more of the applications  in order to monitor these computational resources and expose the monitored quantities using a JMX application programming interface (JMX API). Each one of the MBeans A, B and C is operatively connected with one or more MBean servers A, B and C, which comprise a JMX agent layer. The one or more MBean servers A, B and C provide remote management of each of the MBeans A, B and C on behalf of the monitoring module . The MBean servers A, B and C interface to the MBeans A, B and C that have registered with the MBeans servers A, B and C using the JMX API. While the above example is discussed with reference to an embodiment in which the software object is realized as a management bean (MBean) coupled to a configurable re-usable configuration framework implementing the Java Management Extension (JMX) specification of SUN Microsystems Incorporated to perform monitoring, application alternatives exist. In other implementations, the software objects may be classes implemented in one or more of C++, C#, REXX, or other object oriented programming systems, and the framework may be any of the re-usable configurable frameworks corresponding to the object oriented programming system being used.","A distributed service layer  provides interfaces and components that the monitoring module  uses to interface with the one or more MBean servers A, B and C in order to obtain remote monitoring information about one or more of the applications . In some embodiments, not all of applications  will be monitored.","In one embodiment, an exec daemon  is used to perform monitoring of usage information for physical and operating system resources such as hardware  and operating systems . The exec daemon  passes the usage information to the monitoring module . In some embodiments, other computing resources not shown in  will be monitored.",{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIGS. 3A-3F","FIG. 3A","FIGS. 3B-3F"],"b":["302","304","306"]},"Now with reference to , the policy engine makes a provisioning decision based at least partially upon the usage information for the physical and operating system resources (block ).","Now with reference to , the policy engine determines whether an additional instance of the persistent application should be provisioned on one of the plurality of nodes on which an instance of the persistent application is already executing (block ). If the policy engine determines that the additional instance of the persistent application should be provisioned on one of the plurality of nodes on which an instance of the persistent application is already executing, then the new instance is provisioned on a node in which the persistent application is already executing (block ). Otherwise, the policy engine takes no further action (block ). An example of processing for deploying additional instances of the persistent application is described below with reference to .","Now with reference to , the policy engine determines whether unused instances of the persistent application are deployed on one or more of the plurality of nodes (block ). If unused persistent application instances are present, the policy engine may de-allocate selected instances of the persistent application (block ). Otherwise, the policy engine takes no further action (block ). An example of processing for de-allocating instances of the persistent application is described below with reference to .","Now with reference to , the policy engine selects from the plurality of nodes, nodes upon which additional instances of the persistent application may be deployed (block ). The policy engine deploys the additional instances of the persistent application on the selected nodes (block ).","Now with reference to , the policy engine selects from the excess persistent application instances, one or more instances of the persistent application that may be off-loaded (block ). The policy engine de-allocates the selected instances of the persistent application from the selected physical and operating system resources (block ).","An example of automated management of persistent applications in a grid computing environment in accordance with one embodiment of the present invention will now be described. In the following discussion, reference will be made to an example grid of .  are functional block diagrams illustrating an example of automated management in one embodiment of the present invention. In the presently illustrated embodiment, the example service in  are implemented using a plurality of computing resources, of which operating system  and persistent application  are illustrated. Other computing resources used to implement the service are not shown in  to preserve clarity.","Now with reference to , application  is monitored by an MBean 2 B. MBean 2 B is an object class associated with application . MBean 2 B exposes performance parameter information  from application  to MBean server 2 B using a JMX standard interface. In the illustrated example embodiment, MBean 2 B exposes performance parameter information  about application  to MBean server 2 B. The performance parameter  includes a number of hits a web site receives in a second, which is 10,000 in this example. The MBean server 2 B sends the performance parameter  to the monitoring module . The monitoring module  may also monitor other persistent applications using one more additional means, such as for example MBean 1 A (not shown in  for clarity).","Further with reference to , operating system  is monitored by an exec daemon . An exec daemon  is a process associated with operating system . The exec daemon  collects usage information  from operating system  and provides the usage information  to the monitoring module . In this example, the usage information  includes a number of active programs executing under operating system , which is eight (8). The monitoring module  may also monitor other operating systems using one more additional exec daemons (not shown in  for clarity).","The monitoring module  receives the performance parameter information from the one or more MBean servers, including MBean server2 B. The monitoring module  receives usage information from the exec daemon  also. The monitoring module  processes the performance parameter(s) received from each application being monitored in order to provide one or more overall performance parameters for the service. Then, the monitoring module  provides the one or more overall performance parameters for the service and the usage information to the policy engine .","Again with reference to , the policy engine  of grid engine  includes one or more policies  that enable making a provisioning decision about physical and operating system resources in the distributed computing environment based upon the performance parameter  and the usage information . For example, as illustrated by , policy engine  includes a first policy that indicates that if hits\/second is greater than 5000 then add (provision) an additional instance of the application. Another policy indicates that if the number of active programs is greater than 10, then add (provision) more physical and operating system resources such as another node. Based upon the \u2018hits\/second=10,000\u2019 performance parameter and the \u2018number of active programs=8\u2019 usage information from the monitoring module , the policy engine  could make a provisioning decision  to add another instance of application . The policy engine  would likely not provision an additional node since, in the present circumstances, the number of active programs, eight (8), is less than the threshold, ten (10), in policy ","In another example illustrated by , the policy engine  uses one or more rules to determine a provisioning decision to free up excess resources. As shown in , policy engine  includes a first policy that indicates that if hits\/second is less than 100 then de-allocate an excess instance of the application. Another policy indicates that if the number of active programs is less than 2, then de-allocate an excess node. Based upon the \u2018hits\/second=100\u2019 performance parameter and the \u2018number of active programs=1\u2019 usage information from the monitoring module , the policy engine  could make a provisioning decision  to de-allocate an instance of application , as well as to de-allocate a node. In this way, policy engine  can control the amount of resources allocated to a particular service based upon one or more of performance parameter information  and usage information .","Accordingly, the above example illustrates how usage information about physical and operating system resources and performance parameter information about applications can be monitored and processed to provide a policy engine with a basis for making provisioning decisions. The above example is intended only for purposes of illustration and not to be limiting of the many embodiments of the present invention.",{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 5","b":["500","500","502","504","502","500","506","502","504","506","504","500","508","502","504","510","502","500"]},"Computer system  may be coupled via bus  to a display , such as a cathode ray tube (CRT), for displaying information to a computer user. An input device , including alphanumeric and other keys, is coupled to bus  for communicating information and command selections to processor . Another type of user input device is cursor control , such as a mouse, a trackball, or cursor direction keys for communicating direction information and command selections to processor  and for controlling cursor movement on display . This input device typically has two degrees of freedom in two axes, a first axis (e.g., x) and a second axis (e.g., y), that allows the device to specify positions in a plane.","In computer system , bus  may be any mechanism and\/or medium that enables information, signals, data, etc., to be exchanged between the various components. For example, bus  may be a set of conductors that carries electrical signals. Bus  may also be a wireless medium (e.g. air) that carries wireless signals between one or more of the components. Bus  may further be a network connection that connects one or more of the components. Overall, any mechanism and\/or medium that enables information, signals, data, etc., to be exchanged between the various components may be used as bus .","Bus  may also be a combination of these mechanisms\/media. For example, processor  may communicate with storage device  wirelessly. In such a case, the bus , from the standpoint of processor  and storage device , would be a wireless medium, such as air. Further, processor  may communicate with main memory  via a network connection. In this case, the bus  would be the network connection. Further, processor  may communicate with display  via a set of conductors. In this instance, the bus  would be the set of conductors. Thus, depending upon how the various components communicate with each other, bus  may take on different forms. Bus , as shown in , functionally represents all of the mechanisms and\/or media that enable information, signals, data, etc., to be exchanged between the various components.","The invention is related to the use of computer system  for implementing the techniques described herein. According to one embodiment of the invention, those techniques are performed by computer system  in response to processor  executing one or more sequences of one or more instructions contained in main memory . Such instructions may be read into main memory  from another machine-readable medium, such as storage device . Execution of the sequences of instructions contained in main memory  causes processor  to perform the process steps described herein. In alternative embodiments, hard-wired circuitry may be used in place of or in combination with software instructions to implement the invention. Thus, embodiments of the invention are not limited to any specific combination of hardware circuitry and software.","The term \u201cmachine-readable medium\u201d as used herein refers to any medium that participates in providing data that causes a machine to operation in a specific fashion. In an embodiment implemented using computer system , various machine-readable media are involved, for example, in providing instructions to processor  for execution. Such a medium may take many forms, including but not limited to, non-volatile media, volatile media, and transmission media. Non-volatile media includes, for example, optical or magnetic disks, such as storage device . Volatile media includes dynamic memory, such as main memory . Transmission media includes coaxial cables, copper wire and fiber optics, including the wires that comprise bus . Transmission media can also take the form of acoustic or light waves, such as those generated during radio-wave and infra-red data communications.","Common forms of machine-readable media include, for example, a floppy disk, a flexible disk, hard disk, magnetic tape, or any other magnetic medium, a CD-ROM, any other optical medium, punchcards, papertape, any other physical medium with patterns of holes, a RAM, a PROM, and EPROM, a FLASH-EPROM, any other memory chip or cartridge, a carrier wave as described hereinafter, or any other medium from which a computer can read.","Various forms of machine-readable media may be involved in carrying one or more sequences of one or more instructions to processor  for execution. For example, the instructions may initially be carried on a magnetic disk of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to computer system  can receive the data on the telephone line and use an infra-red transmitter to convert the data to an infra-red signal. An infra-red detector can receive the data carried in the infra-red signal and appropriate circuitry can place the data on bus . Bus  carries the data to main memory , from which processor  retrieves and executes the instructions. The instructions received by main memory  may optionally be stored on storage device  either before or after execution by processor .","Computer system  also includes a communication interface  coupled to bus . Communication interface  provides a two-way data communication coupling to a network link  that is connected to a local network . For example, communication interface  may be an integrated services digital network (ISDN) card or a modem to provide a data communication connection to a corresponding type of telephone line. As another example, communication interface  may be a local area network (LAN) card to provide a data communication connection to a compatible LAN. Wireless links may also be implemented. In any such implementation, communication interface  sends and receives electrical, electromagnetic or optical signals that carry digital data streams representing various types of information.","Network link  typically provides data communication through one or more networks to other data devices. For example, network link  may provide a connection through local network  to a host computer  or to data equipment operated by an Internet Service Provider (ISP) . ISP  in turn provides data communication services through the world wide packet data communication network now commonly referred to as the \u201cInternet\u201d . Local network  and Internet  both use electrical, electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link  and through communication interface , which carry the digital data to and from computer system , are exemplary forms of carrier waves transporting the information.","Computer system  can send messages and receive data, including program code, through the network(s), network link  and communication interface . In the Internet example, a server 530 might transmit a requested code for an application program through Internet , ISP , local network  and communication interface .","The received code may be executed by processor  as it is received, and\/or stored in storage device , or other non-volatile storage for later execution. In this manner, computer system  may obtain application code in the form of a carrier wave.","In the foregoing specification, it should be noted that although the invention has been described with reference to one embodiment, it should not be construed to be so limited. Various modifications may be made by those of ordinary skill in the art with the benefit of this disclosure without departing from the spirit of the invention. Thus, the invention should not be limited by the embodiments used to illustrate it but only by the scope of the issued claims. The specification and drawings are, accordingly, to be regarded as illustrative rather than limiting."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIGS. 3A-3F"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIGS. 4A-4B"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
