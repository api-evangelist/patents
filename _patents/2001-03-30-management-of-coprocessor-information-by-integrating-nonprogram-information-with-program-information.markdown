---
title: Management of co-processor information by integrating non-program information with program information
abstract: A system including a host processor () operating in combination with one or more co-processors () is disclosed. In this system, a file storage facility () stores executable files () that are called by a server () in the host processor () by way of an application programming interface (API) (). In the disclosed system, the executable files () include both a program (obj 2) together with information (obj 2 attrs) indicative of a condition needed for execution of the program. Based on the condition information, the program (obj 2) is downloaded () to the co-processor (), and executed by the co-processor () if the the condition is satisfied.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06922735&OS=06922735&RS=06922735
owner: Texas Instruments Incorporated
number: 06922735
owner_city: Dallas
owner_country: US
publication_date: 20010330
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"p":["This application claims the priority under 35 U.S.C. 119(e)(1) of copending U.S. provisional application No. 60\/194,258 filed on Apr. 3, 2000, incorporated herein by reference.","The invention relates generally to data processing and, more particularly, to management of co-processor information.","Data processing systems (including single-chip systems) which utilize one or more host processors (for example microprocessors) and one or more co-processors (for example further microprocessors or digital signal processors) under control of the host processor(s) are well known in the art. In such systems, a co-processor is typically configured to perform desired functions by storing associated program information in a ROM (or other program memory) of the co-processor. The operational capability of the co-processor thus corresponds to, and is limited by, the functionality defined by the program(s) stored in its ROM.","It therefore becomes advantageous to provide systems wherein the host processor(s) can dynamically download desired programs to the co-processor(s) in response to user requests. For example, a user of a mobile telephone might initially wish to configure the mobile telephone's co-processor(s) to perform speech coding functions in support of voice communications, and might later wish to configure the co-processor(s) to perform functions in support of wireless internet access. Accordingly, in this example, the host processor(s) would first download into the co-processor(s) a program or programs for configuring the co-processor(s) as a speech coder, and would thereafter download a program or programs for configuring the co-processor(s) as an internet access port.","Different programs (also referred to herein as objects) have different platform requirements, for example, program memory size, data memory size, clock speed, etc. Therefore, a given program may not be suitable for execution on a given co-processor. The suitability of a given program for execution on a given co-processor can be determined by a host processor before downloading the program to the co-processor, provided the program developer can provide to the host processor information indicative of the platform requirements of the program. In systems with multiple co-processors, the host processor may be able to use the platform requirement information at runtime to identify an available co-processor which satisfies the platform requirements of the program. The host processor can then download the program to the identified co-processor.","In conventional practice, non-program information has typically been stored separately from the executable file that contains the program. This practice disadvantageously dictates the use of an auxiliary data source for non-program information, for example an SQL engine, Microsoft's registry, or even a simple text file. This also disadvantageously requires that two separate files be handled, the executable and the non-program information file.","It is desirable in view of the foregoing to provide for efficient communication of non-program information, such as platform requirement information, from the program developer to the host processor at runtime.","The present invention provides for efficient communication of non-program information, e.g. platform requirement information, from the program developer to the host processor at runtime. The non-program information is integrated along with the corresponding program information into an executable file which is used by the host processor to download the program information to a selected co-processor.",{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 1"},"The exemplary system of  includes a host processor  (for example a microprocessor) and one or more co-processors  (for example additional microprocessors and\/or DSPs). The processors  and  can be embedded together in a single integrated circuit chip, or can be provided on separate integrated circuit chips. A man-machine interface (MMI) , for example a keyboard\/keypad, visual display, etc. permits a user to access user applications  associated with the host processor . When a user application determines that a co-processor should execute a particular function, the application directs a server  in the host processor  to obtain program information to be downloaded from the server  to the co-processor, and then used by the co-processor in performing the desired function. In response to the request from the user application , the server  uses an application programming interface (API)  to retrieve the program information from a file storage facility (e.g. a file system or other file storage mechanism)  where executable files are stored.","According to the invention, a given executable file stored in the file storage facility  includes not only program information which the co-processor uses to perform the desired function, but also includes non-program information associated with the program information. For example, the non-program information could include platform requirement information such as described above, setup parameters, or other general properties of the program. The API  distinguishes the program information from the non-program information, and provides both sets of information to the server . Based on the non-program information, the server can, for example, make a determination as to which of a plurality of available co-processors is suitable for execution of the desired program, and can then forward the program information to the selected co-processor.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 2","FIG. 2","FIG. 1"],"b":["17","17","17","21","23","21","17","21","17","16","15"]},{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 3","FIG. 2","FIG. 3"],"b":["17","17","1","21","3","1","2","3","21"]},"Each of the assembly\/linker files ,  and  (which include the aforementioned linker command files) is combined with its associated program information (i.e., code and data) at ,  and , which program information is contained in conventional executable files (e.g. COFF files). The combining operation can be performed by a conventional compiler\/linker . The compiler\/linker  combines the data in the assembly\/linker files ,  and  with the program information from the files ,  and , respectively, to produce corresponding executable files, in this example COFF executable files ,  and , that include both program information (from ,  and ) and non-program information (from ,  and ).","Each of the executable files ,  and  illustrated in  includes program information and non-program information, as illustrated generally by the example of FIG. . The executable file  illustrated in  includes program information (code and data) and corresponding non-program information, for example platform requirement information for the program, as described above. Although the example executable file  of  includes only a single program and its associated non-program information, other executable files in the storage facility  could include code and data corresponding to a plurality of programs, together with a plurality of sets of non-program information respectively corresponding to the plurality of programs. The non-program information included in the various executable files ,  and  in  constitutes the virtual database \u2032 of , more particularly a virtual database including non-program information corresponding to the various programs stored in the storage facility .",{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 4","FIG. 2"],"b":"23"},"Referring again to , when the server  begins the process of loading an executable file onto a coprocessor for the first time, the API  will record the file path of the executable file. In some embodiments, the API  performs data retrieval through a parser  as illustrated in FIG. . The parser  uses the UUID information described above to identify uniquely each program in the storage facility , and to identify data sections within the executable files wherein the corresponding non-program information is stored.","Executable files that conform to COFF, for example the COFF utilized by Texas Instruments Incorporated, support non-downloadable data regions. Using this feature of COFF, the compiler\/linker  of  automatically stores the non-program information within the non-downloadable data regions of the COFF executable files. Thus, the parser  will search through the COFF executable files within the storage facility , comparing the UUIDs of the non-downloadable data sections with the UUID provided to the parser  by the user (via the server ). When the parser finds a non-downloadable data section UUID match, the non-program information from that section can, in some embodiments, be loaded into a corresponding data structure in the API . The non-program information can be provided to the server  along with the corresponding program information read from the storage facility , whereupon the server  can utilize conventional techniques to, for example, evaluate whether a given co-processor is suitable for execution of the desired program and\/or to setup\/configure the co-processor to execute the desired program. The parser  can be used to determine the file path information described above, and this information can be stored in an OTC (Object to COFF) map . This map  can thereafter use the user-provided UUID information to map the various programs to their corresponding COFF files.",{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 6","b":["61","62","63","64","65","66","67"]},{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 8","FIGS. 1-7","FIG. 8","FIGS. 1-7","FIG. 8","FIGS. 1-7","FIGS. 1 and 8"]},"It should also be noted that the invention described above with respect to  provides a unique data access approach inasmuch as no other database server will be able to access the data in the above-described virtual database \u2032 unless, for example, that server has access to the UUIDs that are needed to access the data in the virtual database \u2032.","The above-described integration of non-program information with program information in an executable file permits non-program information to be communicated from the developer to the server of the host processor in an efficient manner, and without increasing the size of the runtime program. This is accomplished by, for example, taking advantage of the non-downloadable data section feature of COFF executables. The invention eliminates the need for an auxiliary database on the host processor, thus saving the resources required by a traditional database, which is particularly advantageous for resource-constrained systems such as a system on a chip. The invention further simplifies the process of downloading a program to a co-processor because both program and non-program information can be provided in a single file, thereby advantageously avoiding the conventional requirement of handling two separate files. Also, as described above with respect to , the invention provides compatibility across multiple platforms with far less complexity than would result through application of conventional techniques.","Although exemplary embodiments of the invention are described above in detail, this does not limit the scope of the invention, which can be practiced in a variety of embodiments."],"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","DETAILED DESCRIPTION"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2","b":"1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4","b":"2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 5","FIGS. 1 and 2"]},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIG. 7","FIGS. 2 and 3","FIGS. 1"],"b":["3","5"]},{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 8","FIG. 1"]}]},"DETDESC":[{},{}]}
