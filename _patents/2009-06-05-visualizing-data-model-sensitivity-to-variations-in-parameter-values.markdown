---
title: Visualizing data model sensitivity to variations in parameter values
abstract: In an embodiment, a computer-implemented method facilitates optimization analysis and sensitivity analysis of a data model. The method comprises a computer: receiving first data identifying a value function, a plurality of parameters for the value function, and one or more specific parameter values for one or more of the parameters; storing a data model based on the value function and the specific parameter values; determining which parameters of the data model are capable of taking variable values; receiving second data identifying one or more selected parameters; receiving third data specifying a value selection approach for each of the selected parameters; determining a plurality of result values by substituting, based on the value selection approach, a plurality of input values for each of the selected parameters and evaluating the value function using the selected parameters and the substituted values; generating and causing displaying a table of the result values.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08484549&OS=08484549&RS=08484549
owner: Palantir Technologies, Inc.
number: 08484549
owner_city: Palo Alto
owner_country: US
publication_date: 20090605
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["BENEFIT CLAIM","TECHNICAL FIELD","COPYRIGHT NOTICE","BACKGROUND","DETAILED DESCRIPTION"],"p":["This application claims the benefit under 35 U.S.C. 119(e) of prior provisional application 61\/181,129, filed May 26, 2009, the entire contents of which are hereby incorporated by reference for all purposes as if fully set forth herein.","The present disclosure generally relates to data analysis including optimization of parameter values and sensitivity analysis for value functions, to special-purpose computers configured to perform such analysis, and to graphical user interface displays and display units configured to support such analysis.","A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure, as it appears in the Patent and Trademark Office patent file or records, but otherwise reserves all copyright rights whatsoever. Copyright\u00a9 2008-2009 Palantir Technologies, Inc.","The approaches described in this section could be pursued, but are not necessarily approaches that have been previously conceived or pursued. Therefore, unless otherwise indicated herein, the approaches described in this section are not prior art to the claims in this application and are not admitted to be prior art by inclusion in this section.","Special-purpose programmed computers are used for many kinds of data analysis. Two particular areas in which computers are helpful in data analysis involves selecting optimal values for a data model, and determining whether a data model is particularly sensitive to changes in particular values. Performing these tasks typically involves repeatedly calculating and displaying different values for the data model or value function. While computers can be configured with logic to generate a graphical user interface, at present there is no approach known for conveniently and efficiently comparing values and identifying values that reveal special sensitivity of a model.","In the following description, for the purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent, however, to one skilled in the art that the present invention may be practiced without these specific details. In other instances, well-known structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the present invention.","Embodiments are described herein according to the following outline:",{"@attributes":{"id":"p-0020","num":"0019"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"right"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1.0","General Overview"]},{"entry":["2.0","Structural and Functional Overview"]},{"entry":[{},"2.1 Terms"]},{"entry":[{},"2.2 Structural Example"]},{"entry":[{},"2.3 Functional Example"]},{"entry":[{},"2.4 Randomized Selection of Parameter Values"]},{"entry":["3.0","Implementation Mechanisms-Hardware Overview"]},{"entry":["4.0","Extensions and Alternatives"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"1.0 General Overview","In various embodiments, the disclosure provides a computer-implemented method, as shown and described; a computer comprising optimization-sensitivity determining logic as shown and described; and a computer-readable data storage medium storing one or more stored sequences of instructions which, when executed by the processor, cause the processor to perform the functions that are shown and described. Embodiments provide a build-first, extract-parameters-later approach is implemented that makes performing optimization or sensitivity analysis on a particular model easier than in past approaches because a user is not required to specify all the parameters to consider for analysis in advance, and the user is not forced to create the data model with those parameters in mind.","In an embodiment, a computer-implemented method comprises a computer receiving first data identifying a value function, a plurality of parameters for the value function, and one or more specific parameter values for one or more of the parameters; the computer storing a data model based on the value function and the specific parameter values; the computer determining which parameters of the data model are capable of taking variable values; the computer receiving second data identifying one or more selected parameters; the computer receiving third data specifying a value selection approach for each of the selected parameters; the computer determining a plurality of result values by substituting, based on the value selection approach, a plurality of input values for each of the selected parameters and evaluating the value function using the selected parameters and the substituted values; the computer generating and causing displaying a table of the result values.","In an embodiment, the third data specifies an upper range value, a lower range value, and an increment value for at least one of the selected parameters. In an embodiment, the third data specifies one or more explicit or enumerated values for at least one of the selected parameters.","In an embodiment, the third data specifies a probability distribution for one or more of the selected parameters, and the value selection approach further comprises determining a pseudo-randomly generated number for the one or more of the selected parameters.","In an embodiment, the data model is created in an object-oriented financial analysis environment.","In an embodiment, wherein the selected parameters comprise two parameters, a first parameter is displayed in association with an X-axis of the table, and the second parameter is displayed in association with a Y-axis of the table.","In an embodiment, the selected parameters comprise three parameters, a first parameter is displayed in association with an X-axis of the table, the second parameter and third parameter are displayed in association with a Y-axis of the table, and the table comprises a plurality of cells each displaying two result values.","In an embodiment, the method further comprises causing displaying the table using at least two colors, wherein a first color denotes positive values and a second color denotes negative values.","In an embodiment, the method further comprises causing displaying the table using a plurality of cells each having different color saturation levels for each of the two colors, wherein each different color saturation level is associated with a different relative magnitude of a number in one of the cells. In an embodiment, each different color saturation level is proportional to a magnitude of the number in the cells.","In an embodiment, the method further comprises causing generating and displaying a notification identifying two adjacent cells in the table that have a greatest difference in magnitude of result values.","In an embodiment, a computer comprises one or more processors; table memory coupled to the one or more processors; repository access logic coupled to the one or more processors; optimization-sensitivity determining logic coupled to the one or more processors and comprising a model creating unit configured to receive first data identifying a value function, a plurality of parameters for the value function, and one or more specific parameter values for one or more of the parameters and to store a data model based on the value function and the specific parameter values; a variable parameter determining unit configured to determine which parameters of the data model are capable of taking variable values; a table display generating unit configured to receive second data identifying one or more selected parameters, to receive third data specifying a value selection mechanism for each of the selected parameters, to determine a plurality of result values by substituting, based on the value selection approach, a plurality of input values for each of the selected parameters and evaluating the value function using the selected parameters and the substituted values, and to generate and cause displaying a table of the result values.","In other embodiments, the invention encompasses other computer apparatus and a computer-readable medium configured to carry out the foregoing steps.","2.0 Structural and Functional Overview","2.1 Terms","In an embodiment, techniques are provided for generating and displaying a comparison table showing multiple output values of a data model based on a plurality of different values for one or more input parameters to the data model. In one embodiment, the data model, parameters, output values, and table are used, generated and displayed in the context of a computer comprising logic providing an object-oriented financial analysis environment. In other embodiments, the techniques herein may be applied in other environments, for analysis of chemical data, automotive data, environmental data, or data pertinent to many other domains of investigation.","In an embodiment, the following terms used in this disclosure have the following meanings:","1. A \u201cmodel\u201d is a coherent structure of values and calculations that mimics a real-world object at a certain level of description or abstraction. The real-world object may be a physical object such as a machine or electro-mechanical system, or an intangible object such as a financial product. An example of a model in the context of finance is a regression, which attempts to model, mimic or predict the value of a specific time series (the regressand) in terms of a linear combination of other time series (regressors), with an optional constant term, and a particular method for fitting the model, such as estimating the coefficients in the linear combination.","2. A \u201cparameter\u201d is an element of a model that can vary. The term \u201cvariable\u201d is equivalent. In the case of a regression model, parameters could include (1) the particular set of regressors, (2) whether or not to include a constant term, and (3) the estimation method. In contrast, a model element that cannot be varied is the fact that the regressors must be time series. A \u201cparameter\u201d refers to a model element in terms of the abstract structure of the model, as opposed to its concrete instantiation with particular values for the parameters. The term \u201cparameter value\u201d refers to the particular value of a parameter. For example, if a parameter is the particular estimation method used in a model, then a parameter value might be [ordinary least squares].","In an embodiment, each parameter has an associated data type and can only be bound to values that fit the type. Many parameters are numeric parameters and the type of such parameters may be \u201creal number,\u201d \u201cdouble byte,\u201d or \u201cinteger.\u201d Other parameter types include Boolean type, which can hold a true or false value; enumerated types that can accept values selected from a predefined list; date types that can accept values specifying a calendar day and year; specific model types (such as Stock, Country, Index, or others that accept values identifying individual stocks, countries, indices, or others). Other embodiments may use other data types.","3. A \u201cvalue function\u201d is a computational function or logic element that receives a model as input and produces a single value, typically a number, as output. An example of a value function for a regression model is the \u201cr-squared\u201d function, which measures how well the model fits the data (regressand). A value function is especially useful for comparing related models.","4. An \u201coptimization\u201d is the process of searching for particular values for one or more parameters that maximize or minimize a particular value function. For example, a user could look for the three stocks (to use as regressors) that maximize the r-squared value of a regression model.","5. A \u201csensitivity analysis\u201d is the process of determining how sensitive a particular model is to a particular parameter or parameters. Typically sensitivity is measured by determining how much the value of a value function changes in relation to changes in the value of the parameter.","An example illustrating use the terms above is now described. Assume that a model defines a synthetic market index named \u201cTech Index\u201d having the data elements of TABLE 1:",{"@attributes":{"id":"p-0045","num":"0044"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Example Market Index"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Tech Index"]},{"entry":[{},"\u2003\u2003constituents (type: list of Stocks)"]},{"entry":[{},"\u2003\u2003\u2003\u2003MSFT"]},{"entry":[{},"\u2003\u2003\u2003\u2003GOOG"]},{"entry":[{},"\u2003\u2003\u2003\u2003YHOO"]},{"entry":[{},"\u2003\u2003start date (type: Date)"]},{"entry":[{},"\u2003\u2003\u2003\u20031\/1\/2000"]},{"entry":[{},"\u2003\u2003weighting metric (type: Metric)"]},{"entry":[{},"\u2003\u2003\u2003\u2003hvol(100)"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003days in window (type: Integer)"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003100"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The model of the example has three first-level parameters: \u201cconstituents,\u201d \u201cstart date,\u201d and \u201cweighting metric.\u201d The values of the parameters are {MSFT, GOOG, YHOO}, Jan. 1, 2000, and hvol(100) respectively. Some of the values are themselves models, and some of those models have their own parameters. For example, the weighting metric \u201chvol\u201d refers to a historical volatility function (metric) with a value of 100 for the parameter \u201cdays in window\u201d.","2.2 Structural Example",{"@attributes":{"id":"p-0048","num":"0047"},"figref":["FIG. 1A","FIG. 1B","FIG. 1A","FIG. 7"],"b":["120","122","123","124","120","102","120","102"]},"Client  comprises graphical user interface (GUI) logic . GUI logic  may be a set of program instructions which, when executed by one or more processors of the computer system, are operable to receive user input and to display a graphical representation of one or more graphic constructs related to tracking a collective value of data items using the approaches herein. GUI logic  may be operable to receive user input from, and display the graphic constructs to, a graphical user interface that is provided on display  by the computer system on which client  executes.","In some embodiments, GUI logic  is omitted. For example, in one embodiment, client  may comprise an application program or process that issues one or more function calls or application programming interface (API) calls to application server  to obtain information resulting from, to provide input to, and to execute along with application server , the processes or one or more steps thereof as described herein. For example, client  may request and obtain a representation of a group of data items as described herein using a programmatic interface, and then the client may use, process, log, store, or otherwise interact with the received data according to local logic.","Client  may also interact with application server  to provide input, definition, editing instructions, expressions related to one or more dynamic indexes as described herein using a programmatic interface, and then the application server  may use, process, log, store, or otherwise interact with the received input according to application server logic.","Application server  may be implemented as a special-purpose computer system having the logical elements shown in . In an embodiment, the logical elements may comprise program instructions recorded on one or more machine-readable storage media. Alternatively, the logical elements may be implemented in hardware, firmware, or a combination.","When executed by one or more processors of the computer system, logic in application server  is operable to provide data analysis according to the techniques described herein. In one embodiment, application server  may be implemented in a Java Virtual Machine (JVM) that is executing in a distributed or non-distributed computer system. In other embodiments, application server  may be implemented as a combination of programming instructions written in any programming language (e.g. C++ or Visual Basic) and hardware components (e.g. memory, CPU time) that have been allocated for executing the program instructions.","In an embodiment, application server  comprises repository access logic  and dynamic indexing logic . Repository access logic  may comprise a set of program instructions which, when executed by one or more processors, are operable to access and retrieve data from data repository . For example, repository access logic  may be a database client or an Open Database Connectivity (ODBC) client that supports calls to a database server that manages data repository . Data repository  may be any type of structured storage for storing data including, but not limited to, relational or object-oriented databases, data warehouses, directories, data files, and any other structured data storage.","In application server computer , a processor  is coupled to an input receiving unit , table memory , optimization-sensitivity determining logic , and repository access logic . In general, input receiving unit  is configured to receive input signals from client computer , determine whether the input signals relate to functions of the optimization-sensitivity determining logic , and provide the signals to logic  when appropriate. The table memory  is configured to receive and store data values associated with a comparison table useful in data analysis, selecting optimum data values for a data model, and sensitivity analysis. The data values stored in table memory  are generated by optimization-sensitivity determining logic  in response to particular user input signals as further described in other sections herein.","The optimization-sensitivity determining logic  is configured to receive signals specifying a data model, create and store the data model, receive signals identifying parameters for the model, receive values for parameters, generate and cause displaying a comparison table based in substituting different values into a value function associated with the model, and performing table updates, as detailed in other sections herein.","The repository access logic  is configured to receive requests for stored values in a data repository . Typically data repository  stores a large amount of data representing real-world objects such as machines, other manufactured articles, money, tradable instruments such as stock or derivative instruments, or any other tangible or intangible real-world object.","Each of the input receiving unit , optimization-sensitivity determining logic  and the internal elements thereof described for , , repository access logic , data repository , and GUI logic  may be implemented in various embodiments using a computer, one or more application-specific integrated circuits (ASICs) or other digital electronic logic, one or more computer programs, modules, objects, methods, or other software elements. For example, in one embodiment application server computer  may comprise a special-purpose computer having particular logic configured to implement the elements and functions described herein. In another embodiment, application server computer  may comprise a general purpose computer as in , loaded with one or more stored programs which transform the general purpose computer into a particular machine upon loading and execution. In either embodiment, optimization-sensitivity determining logic  can act upon and transform the state of data representing physical articles and non-physical real-world articles such as money or tradable instruments.","Referring now to , in an embodiment, the optimization-sensitivity determining logic  comprises a model creating unit , parameter storage , model storage , value function logic , a table display generating unit , a table update unit , and a variable parameter determining unit . The table display generating unit  is generated to each other element of the optimization-sensitivity determining logic . The model creating unit  is coupled to the model storage . The variable parameter determining unit  is coupled to parameter storage . The table update unit  is coupled indirectly to client computer  and is capable of receiving user value function signals , user parameter, value, range, and increment signals , and user adjustment signals .","In operation, in an embodiment, an end user of client computer  causes the optimization-sensitivity determining logic  to create a data model in terms of specific, concrete values by providing one or more user value function signals to the model creating unit . Defining a data model may include specifying or providing the value function logic  or identifying previously existing value function logic to result in associating particular value function logic with the data model. The resulting data model is stored in model storage  and definitions of parameters of the data model are stored in parameter storage . Thus, at the end of the interaction of client computer  and model creating unit , a data model is stored in model storage , value function logic  is associated with the model or installed, and parameters for the data model are stored in parameter storage .","In an embodiment, a data model comprises a strategy. A strategy might be defined by user signals indicating a single value for each of the parameters of the strategy and a single value for the annualized return of the strategy.","In an embodiment, optimization-sensitivity determining logic  then receives a user signal indicating a request to perform an optimization-sensitivity analysis of the data model. In response, table display generating unit  generates and causes displaying, on display unit  of client computer , a data value comparison table having the general form shown in . To generate the display, table display generating unit  signals the variable parameter determining unit, which reads or queries the parameter storage  associated with the current data model and determines which parameters of the current data model are capable of receiving variable values. In an embodiment, the parameters of the model that can receive variable values are displayed on the left side of the screen display of .","In an embodiment, the end user decides which value function to use for performing optimization analysis or sensitivity analysis. Using data input device , the end user causes client computer  to generate a user value function signal  to table update unit . In response, the table update unit  associates a particular value function of value function logic  with the model.","The end user then decides which parameters to vary, and causes client computer  to generate one or more user parameter signals  to table update unit . In response, table update unit  causes re-generating the display of  to show representations of the parameters in label regions of the top of the table or right side of the table.","The end user operates client computer  to provide one or more ranges and increments for each of the parameters. Client computer  generates one or more additional user value, range, or increment signals  to table update unit . In response, table update unit  causes re-generating the display of  to show representations of the values, ranges or increments in the label regions and in association with related parameters.","The table update unit  also signals the table display generating unit  and in response, a comparison table of value-function values is produced and caused to be displayed on display unit  in cooperation with GUI logic .","In other embodiment, signals  do not include range and increment signals. For example, signals providing only explicit or enumerated values may be received. In another embodiment described in a subsequent section in connection with  and , random value substitution is facilitated using a random number generator and a probability distribution signal, which are used in place of value, range, and increment signals . In either  or , the optimization-sensitivity determining logic  may include a plurality of value selection mechanisms configured to receive different kinds of input signals and to determine how to select values for substitution into the value function logic . One example of a value selection mechanism is logic configured to receive range values and an increment value for a parameter. Another example of a value selection mechanism is logic configured to receive explicit or enumerated values for a parameter. Another example, described further for  and , is logic configured to receive a probability distribution signal for a parameter and then using random number generation in step  to select and substitute values.","2.3 Functional Example",{"@attributes":{"id":"p-0069","num":"0068"},"figref":["FIG. 2","FIG. 3","FIG. 4","FIG. 5","FIG. 6","FIG. 2"],"b":["202","120","123","122","124","204"]},"In step , the computer receives a signal requesting an optimization-sensitivity display function. In response, the computer generates and displays an optimization-sensitivity display having the general form of .","For purposes of clearly illustrating dynamic indexing, this section describes an example graphical user interface screen displays. However, the GUI displays described herein represent only selected examples of visualizations dynamic indexing described herein. In other embodiments, other graphical user interface displays may be used to interact with a user. Furthermore, no particular GUI is required and the disclosure is intended to encompass optimization and sensitivity analysis techniques independent of any GUI, and is not intended to be limited to any particular GUI or other form of display. For example, each example GUI merely represents one way to receive data input from a user for the data elements, parameters and values that are shown in the GUI, and represents only one way to display output resulting from the transformations and manipulations described herein; in other embodiments, programmatic methods may be used to obtain the same data elements, parameters and values and other forms of data output may be used such as logging, reporting, storing in database tables, storing in spreadsheets, or output using the GUI of another program or process.","Referring now to , in an embodiment, screen display  depicts a model representing a Strategy, which is a set of rules for when to buy and sell different market instruments for the purpose of making money. One measure of a Strategy's performance is it's \u201cannualized return,\u201d which is the average percent return the strategy makes on its initial capital over all the years over which it operated or hypothetically operated. Thus, in screen display , the value function  of the data model is denoted \u201cstrategyAnnualizedReturn.\u201d In an embodiment, value function  is a text field that can receive user data input to specify any value function that has been previously defined in the system.","In an embodiment, screen display  comprises a parameter tree  that indicates the parameters of the model. In an embodiment, parameter tree  includes only parameters of the model that can receive variable values. Thus, in step  of , the computer determines which parameters are capable of variable values, and in step  the computer generates and causes the client computer to display the parameter tree in the screen display.","In an embodiment, the end user then decides which parameters to vary and drags labels for the parameters from the parameter tree  onto either the top of the comparison table  or the left part of the comparison table. In response, the computer re-generates the screen display  or portions of the screen display so that parameters ,  are displayed. In the example of , the user dragged the standard deviation (stddev) parameter and the days parameter to the positions of parameters ,  respectively.","In an embodiment, the user then enters ranges and increments for each of the parameters. In step  of , the computer receives signals identifying one or more parameters, and ranges, increments or explicit values for the parameters. In , the ranges, increments or explicit values are shown in association with parameters , . For example, the stddev parameter  has a low end value of \u201c1.000\u201d, a high end value of \u201c2.75\u201d, and an increment of \u201c0.250\u201d.","Step  broadly represents determining a value selection approach for use in the process. One example of a value selection approach is receiving range values and an increment value for a parameter. Another example of a value selection approach is receiving explicit or enumerated values for a parameter. Another example, described further for  and , is receiving a probability distribution signal for a parameter and then using random number generation in step  to select and substitute values.","In step , the computer calculates a plurality of result values for the comparison table  by substituting each particular value of each of the parameters into the value function of the model or strategy and computing a result value. The result values are stored in table memory at step . At step , the computer generates and causes the client computer to display a comparison table of values and function values.","In this context and in the example of , \u201ceach particular value\u201d in step  means each value obtained by starting at the low end value and incrementing by the increment value until the high end value is reached. The number of cells  in the comparison table  in a row and in a column is determined based on the number of values resulting from the incrementing. For example, the days parameter  has a low end value of \u201c20\u201d, a high end value of \u201c40\u201d and an increment of 5, resulting in 5 cells  in each row for the values of 20, 25, 30, 35, and 40 as indicated by column header values . Row header values  are similarly incremented. Each cell  displays a result value derived from the value function after substituting in the different parameter values shown as the row header values and column header values.","Optionally, at step  the computer generates and causes the client computer to display the comparison table using colored shading in each cell . In an embodiment, cells holding negative values are colored red and cells holding positive values are colored green. In an embodiment, the color brightness, intensity or saturation level increases in proportion to the magnitude of a value in a cell. Thus, cells holding small negative numbers are pale red whereas cells holding large negative numbers are bright red; cells holding small negative numbers are pale green and a deep, saturated green may be used for cells with large positive numbers.","In an embodiment, the end user may inspect the comparison table to determine optimal values for the parameters and\/or the sensitivity of the model to those parameters. For example, as seen in , an optimal value is in cell , which is recognizable for having the brightest green color and a worst or pessimal value is in cell , which can be recognized as having the brightest red color.","Further, region  comprising cells ,  appears particularly sensitive to changes in the value of the standard deviation parameter  because small changes in the value of that parameter result in large changes in the result of the value function. In an embodiment, the computer automatically identifies which adjacent cells  have the greatest difference in the magnitude of the value obtained from the value function, and in response, the computer generates and causes displaying a notification message, alert, highlighting of the cells, or other indication that the identified adjacency, region or associated pair of cells indicates special sensitivity of the value function.","In the example of , one value function  is shown. In an alternative embodiment, multiple value functions  may be received, displayed, and used. In such an embodiment, each cell  would display multiple values resulting from evaluation of the multiple value functions. Various embodiments may use any number of value functions, so that output values of any number of value functions may be represented in cells of the table. Any number of parameter values may be used, shared on either or both of the X-axis and Y-axis associated with a table.","The computation performed at step  is different for each parameter type. Numeric parameters request a range and increment to determine the values to vary over, as just described for step  for the example of . In an embodiment, when Boolean parameters are used, then step  involves computing value function output for both values of the parameter (true and false). Similarly, when a parameter is an enumerated type, then step  involves computing the value function for each discrete value of the enumerated parameter. Date parameters use a start date, end date, and an increment, or a specific set of dates.","For other types of parameters, the user may hand-pick which values to use. For example, when the type of a parameter is Stock, the computer is configured to prompt the user to specify the stocks to include in the comparison table.  is example of a screen display showing a comparison table with a Stock parameter . In this case, the Strategy does not seem particularly sensitive to the \u201cstddev\u201d parameter , but it is sensitive to the choice of stock.","As described above for step  of , at step  the computer may receive signals representing selections of one or more parameters. In an embodiment, a user can choose as many parameters as desired.  shows a comparison table that uses a single parameter .  shows a comparison table that uses four (4) parameter values , , , . Thus, the comparison table may be n-dimensional and there are no particular bounds on the value n.","Referring again to , at step , a test is performed to determine whether a user or the client computer has provided a terminate signal. If so, then in step  an end operation is performed in which the process returns control to a previous process, ends operation of the computer, or terminates in any other desired manner. Alternatively control transfers to step  in which the computer may receive additional signals identifying parameters and ranges, increments or explicit values for the parameters. The process may repeat through steps , , ,  in any number of iterations to support additional data analysis.","2.4 Randomized Parameter Values",{"@attributes":{"id":"p-0088","num":"0087"},"figref":["FIG. 1C","FIG. 8","FIG. 1C","FIG. 1B"],"b":["104","170"]},"Referring to , in an alternative embodiment to , a process comprises steps , , , ,  of , and thereafter at step  the computer receives signals identifying one or more parameters and a probability distribution for the parameters. For example, the probability distribution may be received in the form of a mean value and a standard deviation value. At step , the computer calculates result values by substituting randomly selected or generated values for each parameter into the value function of the model. Thus, the possible values over which to test the parameters are not defined specifically as a fixed list. Rather the possible values are assigned a probability distribution and particular concrete values are chosen at random.","Random value logic  may comprise or include a pseudo-random number generator or a random number generator. The particular kind of random generator is not critical; for example, various embodiments may use digital electronic hardware-based generators, a linear congruential generator, library functions such as \/dev\/random, CryptGenRandom, etc.","In an embodiment, at step  the computer may generate a comparison table as in , , , . Alternatively, the computer generates and causes displaying a scatterplot in which the x-axis is the value of the first parameter, the y-axis is the value of the second parameter, and each point represents a particular concrete instantiation of the model (with the first parameter assigned the x-value of the point and the second parameter assigned the y-value), and whose color (or size) is the value of the value function applied to that model. In another embodiment, a scatterplot is generated based on ignoring values of the input parameters and graphing two different value functions as the x- and y-axes. For example, the value functions strategyAnnualReturn and strategySharpeRatio may be used as the x- and y-axis respectively. Each point would still represent a single binding of all parameters, where such bindings are produced randomly. The user could then look for the point furthest toward the top-right of the scatterplot as a means of optimizing along two values functions at once.","In such a scatterplot, values of two parameters are shown in association with the x-axis and y-axis. Alternatively, it is possible to display visually the results of a simulation over more than two parameters or more than a single value function. In some embodiments, the computer is configured to search for the highest or lowest value or otherwise optimize or search for sensitivity over many dimensions at once, and identify locations of such values or sensitivity.","In the embodiments of , , the user can create as many different models as desired by drawing from the probability distributions repeatedly and producing a different model (point on the scatterplot) and a different value function.","2.5 Benefits of Various Approaches","The various embodiments as described herein provide several useful benefits. For example, a build-first, extract-parameters-later approach is implemented that makes performing optimization or sensitivity analysis on a particular model easier than in past approaches because a user is not required to specify all the parameters to consider for analysis in advance, and the user is not forced to create the data model with those parameters in mind. Instead, a user can build the model in presently known concrete terms and optimize it later. The approach is also well suited to building models in a graphical user interface as opposed to in a programming language.","Embodiments are useful in the context of an object-oriented financial analysis environment. Each model may be defined using object-oriented techniques as an object, and objects can be constructed by combining simpler objects together into a more complicated tree structure, and parameters can be extracted for analysis from any level of the tree. An example object-oriented financial analysis system, and an object structure useful in such a system, are described in application Ser. No. 12\/210,947, filed Sep. 15, 2008, entitled OMELDS. In that disclosure, an object model is used to facilitate performing financial analysis and that includes certain zero-order objects or building blocks that lend themselves particularly well to doing financial analysis. The object model comprises a universe of data items, relationships between the data items, higher-order objects generated based on one or more data items in the universe, higher-order objects generated based on other objects, and auxiliary entities related to the universe of data items.","While embodiments above have described the use of value functions that generate numeric values, in an object-oriented financial analysis system of the type described in the '947 application, a value function may be any first-order object and need not generate a numeric value. For example, a value function can yield a chart, histogram, portfolio, or other result rather than a numeric value. Thus, the value function can perform complex operations on objects and the value function is not restricted to performing numeric operations. Further, a data model as described herein may be a \u201cdocument\u201d as defined the '947 application, and resulting objects shown in cells  can be reused in other operations.","Thus, each cell does not represent merely static data but a query that yields a dataset.","Embodiments also provide a particular user interface that features a multi-dimensional table, coloring that indicates the significance or magnitude of output values, dragging parameters to the rows and columns, and other features. The combination of features described herein for the GUI provides an efficient and complete mechanism for interacting with parameters and viewing results.","3.0 Implementation Mechanisms\u2014Hardware Overview","According to one embodiment, the techniques described herein are implemented by one or more special-purpose computing devices. The special-purpose computing devices may be hard-wired to perform the techniques, or may include digital electronic devices such as one or more application-specific integrated circuits (ASICs) or field programmable gate arrays (FPGAs) that are persistently programmed to perform the techniques, or may include one or more general purpose hardware processors programmed to perform the techniques pursuant to program instructions in firmware, memory, other storage, or a combination. Such special-purpose computing devices may also combine custom hard-wired logic, ASICs, or FPGAs with custom programming to accomplish the techniques. The special-purpose computing devices may be desktop computer systems, portable computer systems, handheld devices, networking devices or any other device that incorporates hard-wired and\/or program logic to implement the techniques.","For example,  is a block diagram that illustrates a computer system  upon which an embodiment of the invention may be implemented. Computer system  includes a bus  or other communication mechanism for communicating information, and a hardware processor  coupled with bus  for processing information. Hardware processor  may be, for example, a general purpose microprocessor.","Computer system  also includes a main memory , such as a random access memory (RAM) or other dynamic storage device, coupled to bus  for storing information and instructions to be executed by processor . Main memory  also may be used for storing temporary variables or other intermediate information during execution of instructions to be executed by processor . Such instructions, when stored in storage media accessible to processor , render computer system  into a special-purpose machine that is customized to perform the operations specified in the instructions.","Computer system  further includes a read only memory (ROM)  or other static storage device coupled to bus  for storing static information and instructions for processor . A storage device , such as a magnetic disk or optical disk, is provided and coupled to bus  for storing information and instructions.","Computer system  may be coupled via bus  to a display , such as a cathode ray tube (CRT), for displaying information to a computer user. An input device , including alphanumeric and other keys, is coupled to bus  for communicating information and command selections to processor . Another type of user input device is cursor control , such as a mouse, a trackball, or cursor direction keys for communicating direction information and command selections to processor  and for controlling cursor movement on display . This input device typically has two degrees of freedom in two axes, a first axis (e.g., x) and a second axis (e.g., y), that allows the device to specify positions in a plane.","Computer system  may implement the techniques described herein using customized hard-wired logic, one or more ASICs or FPGAs, firmware and\/or program logic which in combination with the computer system causes or programs computer system  to be a special-purpose machine. According to one embodiment, the techniques herein are performed by computer system  in response to processor  executing one or more sequences of one or more instructions contained in main memory . Such instructions may be read into main memory  from another storage medium, such as storage device . Execution of the sequences of instructions contained in main memory  causes processor  to perform the process steps described herein. In alternative embodiments, hard-wired circuitry may be used in place of or in combination with software instructions.","The term \u201cstorage media\u201d as used herein refers to any media that store data and\/or instructions that cause a machine to operation in a specific fashion. Such storage media may comprise non-volatile media and\/or volatile media. Non-volatile media includes, for example, optical or magnetic disks, such as storage device . Volatile media includes dynamic memory, such as main memory . Common forms of storage media include, for example, a floppy disk, a flexible disk, hard disk, solid state drive, magnetic tape, or any other magnetic data storage medium, a CD-ROM, any other optical data storage medium, any physical medium with patterns of holes, a RAM, a PROM, and EPROM, a FLASH-EPROM, NVRAM, any other memory chip or cartridge.","Storage media is distinct from but may be used in conjunction with transmission media. Transmission media participates in transferring information between storage media. For example, transmission media includes coaxial cables, copper wire and fiber optics, including the wires that comprise bus . Transmission media can also take the form of acoustic or light waves, such as those generated during radio-wave and infra-red data communications.","Various forms of media may be involved in carrying one or more sequences of one or more instructions to processor  for execution. For example, the instructions may initially be carried on a magnetic disk or solid state drive of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to computer system  can receive the data on the telephone line and use an infra-red transmitter to convert the data to an infra-red signal. An infra-red detector can receive the data carried in the infra-red signal and appropriate circuitry can place the data on bus . Bus  carries the data to main memory , from which processor  retrieves and executes the instructions. The instructions received by main memory  may optionally be stored on storage device  either before or after execution by processor .","Computer system  also includes a communication interface  coupled to bus . Communication interface  provides a two-way data communication coupling to a network link  that is connected to a local network . For example, communication interface  may be an integrated services digital network (ISDN) card, cable modem, satellite modem, or a modem to provide a data communication connection to a corresponding type of telephone line. As another example, communication interface  may be a local area network (LAN) card to provide a data communication connection to a compatible LAN. Wireless links may also be implemented. In any such implementation, communication interface  sends and receives electrical, electromagnetic or optical signals that carry digital data streams representing various types of information.","Network link  typically provides data communication through one or more networks to other data devices. For example, network link  may provide a connection through local network  to a host computer  or to data equipment operated by an Internet Service Provider (ISP) . ISP  in turn provides data communication services through the world wide packet data communication network now commonly referred to as the \u201cInternet\u201d . Local network  and Internet  both use electrical, electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link  and through communication interface , which carry the digital data to and from computer system , are example forms of transmission media.","Computer system  can send messages and receive data, including program code, through the network(s), network link  and communication interface . In the Internet example, a server  might transmit a requested code for an application program through Internet , ISP , local network  and communication interface .","The received code may be executed by processor  as it is received, and\/or stored in storage device , or other non-volatile storage for later execution.","In the foregoing specification, embodiments of the invention have been described with reference to numerous specific details that may vary from implementation to implementation. Thus, the sole and exclusive indicator of what is the invention, and is intended by the applicants to be the invention, is the set of claims that issue from this application, in the specific form in which such claims issue, including any subsequent correction. Any definitions expressly set forth herein for terms contained in such claims shall govern the meaning of such terms as used in the claims. Hence, no limitation, element, property, feature, advantage or attribute that is not expressly recited in a claim should limit the scope of such claim in any way. The specification and drawings are, accordingly, to be regarded in an illustrative rather than a restrictive sense."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["In the drawings:",{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1B"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1C"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
