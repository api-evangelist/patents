---
title: Optimization framework for remotely executing a maintenance operation on a virtual machine
abstract: Embodiments provide a system for executing a maintenance operation on a virtual machine (VM). The system includes a host computing device including a first VM and a second VM, a maintenance application installed within the first VM, and an optimization framework providing an interface to the maintenance application. The system also includes an optimization server coupled to the maintenance application through the optimization framework. The optimization server is configured to select a maintenance operation to execute on the second VM and command the maintenance application to execute the maintenance operation on the second VM.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08881143&OS=08881143&RS=08881143
owner: 
number: 08881143
owner_city: 
owner_country: 
publication_date: 20111104
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["Software applications, such as virtual machines (VMs), may be executed by a group, or \u201ccluster,\u201d of host computing devices. Each VM creates an abstraction of physical computing resources, such as a processor and memory, of the host executing the VM and executes a \u201cguest\u201d operating system, which, in turn, executes one or more software applications. The abstracted resources may be functionally indistinguishable from the underlying physical resources to the guest operating system and software applications.","Over time, VMs may experience degradation in performance, for example, as a result of the installation and removal of applications. More specifically, such performance degradation may result from increasing amounts of memory being allocated to temporary files and\/or other undesired files within the VMs, increased execution time resulting from fragmented files within one or more virtual disks of the VMs, and\/or increased execution time resulting from invalid or obsolete entries within system registries associated with operating systems installed on the VMs. To improve the performance of such VMs, intermittent or periodic maintenance may be performed on the VMs. Such maintenance may include, for example, removing undesired files from the VM or the applications of the VM, removing invalid or obsolete entries within an operating system registry, defragmenting one or more disks or memories associated with the VM, and\/or any other suitable maintenance task or action.","Maintenance programs typically execute maintenance tasks from within the VM undergoing maintenance (hereinafter referred to as the \u201ctarget VM\u201d). More specifically, the target VM executes the maintenance program, and the maintenance program performs one or more maintenance tasks on or within the target VM. However, such an individualized approach to VM maintenance requires a user to keep the maintenance tool updated on each VM within a virtual infrastructure or system that may include hundreds or thousands of VMs. Moreover, an individual user may not perform maintenance tasks on target VMs with an optimal frequency. Accordingly, maintenance tasks may not be executed on an underperforming VM for an extended period of time, and the underperforming VM may also affect a performance of other VMs.","Moreover, existing maintenance programs may perform remote maintenance on a target VM. However, such remote maintenance often uses transmission control protocol and internet protocol (TCP\/IP) and may be hindered by the presence of security measures, such as firewalls, operating within the VM or the computing device hosting the VM. Circumventing such security measures to perform remote maintenance on VMs may reduce the security of the VM and\/or the host computing device. In addition, such maintenance programs may be unable to perform maintenance tasks on a VM that is offline.","Remote maintenance of VMs within different network domains may require an agent to be installed and executing within the VM. However, if agents are installed within VMs, the agents may need to be periodically updated, for example, with software patches or upgrades. Furthermore, existing maintenance programs may require a remote registry service to perform a registry maintenance operation on a VM executing a Microsoft WINDOWS brand operating system. The remote registry service generally must be executing in the VM, and the server or other device executing the maintenance operation must have sufficient privileges to access the VM.","One or more embodiments described herein provide an optimization framework and optimization server for improving the performance of one or more target VMs. The optimization framework provides an interface between the optimization server and a maintenance application. More specifically, the optimization framework includes a plurality of concrete APIs, a plurality of interface APIs, and a framework agent that acts as a bridge between the optimization server and the maintenance application. The optimization server selects a maintenance operation to be executed on a target VM and calls the optimization framework with inventory details of the VM. The optimization framework facilitates gathering required data for performing the maintenance operation from the target VM and transmitting a maintenance command to the maintenance application. The maintenance application executes the maintenance operation on the target VM and the results of the maintenance operation are transmitted to the optimization server. In one embodiment, a user configures the optimization server such that the result of the maintenance operation is transmitted to the user for user intervention.","This summary introduces a selection of concepts that are described in more detail below. This summary is not intended to identify essential features, nor to limit in any way the scope of the claimed subject matter.","Embodiments described herein provide an optimization system for improving performance of one or more target VMs that includes an optimization framework and an optimization server. The optimization framework provides an interface between the optimization server and a maintenance application. More specifically, the optimization framework includes a plurality of concrete APIs, a plurality of interface APIs, and a framework agent that acts as a bridge between the optimization server and the maintenance application. The optimization server stores a plurality of user and\/or administrator configuration settings for the maintenance application. The maintenance application is installed in a maintenance VM that is separate from the target VM, and the maintenance application is registered with the optimization server to enable trusted communication to be established between the optimization server and the maintenance application. The optimization server selects a maintenance operation to be executed on a target VM and calls the optimization framework with inventory details of the VM. The optimization framework gathers required data for performing the maintenance operation from the target VM and transmits a maintenance command to the maintenance application. If the target VM is offline, the optimization server mounts the disks of the target VM to the maintenance application to enable the maintenance application to access the target VM data. The maintenance application executes the maintenance operation on the target VM and results of the maintenance operation are transmitted to the optimization server. In one embodiment, a user configures the optimization server such that a result of the maintenance operation is transmitted to the user for user intervention.","Accordingly, the optimization server and optimization framework described herein enable maintenance operations to be selected and executed on a target VM without installing maintenance agents within the target VM. Moreover, the maintenance operations are enabled to be executed on a target VM that is offline. Further, the maintenance application is registered with the optimization server to provide authentication for the maintenance operations. The optimization server and the framework also provide a centralized infrastructure for scaling the maintenance operations across a plurality of VMs and host computing devices. For example, one or more maintenance applications may be installed within a plurality of VMs within a virtual infrastructure, and the optimization server may initiate and control the maintenance operations for each of the VMs in a centralized manner. Accordingly, the optimization server and framework described herein provide a robust, scalable, and efficient infrastructure for executing maintenance operations on target VMs.","In addition, the centralized optimization framework and optimization server enables individual VM users to be freed from VM maintenance and performance optimization. As the maintenance application and optimization framework are installed within one central location (i.e., the maintenance VM), disk space is conserved within each VM which reduces the storage and maintenance cost of a system implementing the maintenance application and the optimization framework. In addition, providing a centralized optimization server and a maintenance application to perform the maintenance operations increases the efficiency of VMs within datacenters, cloud computing, virtual desktop, and\/or other environments. The increased efficiency may also cause a reduced failure incidence rate which also may reduce maintenance costs and increase productivity within a system implementing the optimization server and optimization framework.","Furthermore, because the maintenance application is installed within a dedicated VM, the maintenance application may be patched and upgraded, rather than having to patch each target VM. If the maintenance operation fails, or does not complete successfully, the target VM will be restored to a state prior to the execution of the maintenance operation, which increases the reliability of the optimization process.","In addition, maintenance operations may be performed using remote calls, without using or requiring the target VM's administrator privileges. Maintenance operations may also be performed on VM templates so that VM templates may be optimized or maintained in an optimized state. Furthermore, the optimization server, maintenance application, and optimization framework may execute maintenance operations without using TCP\/IP based management or remote registry services. While the maintenance operations are described herein with respect to disk cleanup, disk defragmentation, and registry cleanup and defragmentation operations, maintenance operations may also include other tasks like software auditing and offline virus scanning.",{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 1","b":["100","100","102","104","104","104"]},"Computing device  also includes at least one presentation device  for presenting information to a user . Presentation device  is any component capable of conveying information to user . Presentation device  may include, without limitation, a display device (e.g., a liquid crystal display (LCD), organic light emitting diode (OLED) display, or \u201celectronic ink\u201d display) and\/or an audio output device (e.g., a speaker or headphones). In some embodiments, presentation device  includes an output adapter, such as a video adapter and\/or an audio adapter. An output adapter is operatively coupled to processor  and configured to be operatively coupled to an output device, such as a display device or an audio output device.","The computing device  may include a user input device  for receiving input from user . User input device  may include, for example, a keyboard, a pointing device, a mouse, a stylus, a touch sensitive panel (e.g., a touch pad or a touch screen), a gyroscope, an accelerometer, a position detector, and\/or an audio input device. A single component, such as a touch screen, may function as both an output device of presentation device  and user input device .","Computing device  also includes a network communication interface , which enables computing device  to communicate with a remote device (e.g., another computing device ) via a communication medium, such as a wired or wireless packet network. For example, computing device  may transmit and\/or receive data via network communication interface . User input device  and\/or network communication interface  may be referred to as an input interface  and may be configured to receive information, such as configuration options (e.g., threshold values), from a user.","Computing device  further includes a storage interface  that enables computing device  to communicate with one or more datastores. In exemplary embodiments, storage interface  couples computing device  to a storage area network (SAN) (e.g., a Fibre Channel network) and\/or to a network-attached storage (NAS) system (e.g., via a packet network). The storage interface  may be integrated with network communication interface .",{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 2","FIG. 1"],"b":["235","235","235","100","100","205","205","102","104","112","110","106","210","205"],"sub":["1","2 ","N "]},"The virtualization software layer supports a virtual machine execution space  within which multiple virtual machines (VMs -) may be concurrently instantiated and executed. Hypervisor  includes a device driver layer , and maps physical resources of hardware platform  (e.g., processor , memory , network communication interface , and\/or user input device ) to \u201cvirtual\u201d resources of each of VMs -such that each of VMs -has its own virtual hardware platform (e.g., a corresponding one of virtual hardware platforms -). Each virtual hardware platform includes its own emulated hardware (such as a processor , a memory , a network communication interface , a user input device  and other emulated I\/O devices in VM ).","In some embodiments, memory  in first virtual hardware platform includes a virtual disk that is associated with or \u201cmapped to\u201d one or more virtual disk images stored in memory  (e.g., a hard disk or solid state disk) of computing device . The virtual disk image represents a file system (e.g., a hierarchy of directories and files) used by first virtual machine in a single file or in a plurality of files, each of which includes a portion of the file system. In addition, or alternatively, virtual disk images may be stored in memory  of one or more remote computing devices , such as in a storage area network (SAN) configuration. In such embodiments, any quantity of virtual disk images may be stored by the remote computing devices .","Device driver layer  includes, for example, a communication interface driver  that interacts with network communication interface  to receive and transmit data from, for example, a local area network (LAN) connected to computing device . Communication interface driver  also includes a virtual bridge  that simulates the broadcasting of data packets in a physical network received from one communication interface (e.g., network communication interface ) to other communication interfaces (e.g., the virtual communication interfaces of VMs -). Each virtual communication interface may be assigned a unique virtual Media Access Control (MAC) address that enables virtual bridge  to simulate the forwarding of incoming data packets from network communication interface . In an embodiment, network communication interface  is an Ethernet adapter that is configured in \u201cpromiscuous mode\u201d such that all Ethernet packets that it receives (rather than just Ethernet packets addressed to its own physical MAC address) are passed to virtual bridge , which, in turn, is able to further forward the Ethernet packets to VMs -. This configuration enables an Ethernet packet that has a virtual MAC address as its destination address to properly reach the VM in computing device  with a virtual communication interface that corresponds to such virtual MAC address.","Virtual hardware platform may function as an equivalent of a standard x86 hardware architecture such that any x86-compatible desktop operating system (e.g., Microsoft WINDOWS brand operating system, LINUX brand operating system, SOLARIS brand operating system, NETWARE, or FREEBSD) may be installed as guest operating system (OS)  in order to execute applications  for an instantiated VM, such as first VM . Virtual hardware platforms -may be considered to be part of virtual machine monitors (VMM) -which implement virtual system support to coordinate operations between hypervisor  and corresponding VMs -. Those with ordinary skill in the art will recognize that the various terms, layers, and categorizations used to describe the virtualization components in  may be referred to differently without departing from their functionality or the spirit or scope of the disclosure. For example, virtual hardware platforms -may also be considered to be separate from VMMs -, and VMMs -may be considered to be separate from hypervisor . One example of hypervisor  that may be used in an embodiment of the disclosure is included as a component in VMware's ESX brand software, which is commercially available from VMware, Inc.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":["FIG. 3","FIG. 2","FIG. 1","FIG. 2","FIG. 2"],"b":["300","235","235","300","302","304","306","308","310","310","300","100","300","302","304","306","308","310","310","104","250","102","245"],"sub":["1","N ","1","N","1","N "]},"In an embodiment, optimization server  is a physical server, such as computing device , that controls system  (shown in ) and\/or initiates maintenance operations within system . For example, optimization server  may be used to manage or control maintenance applications , and may \u201ctrigger\u201d maintenance applications , or cause maintenance applications  to perform maintenance operations on one or more target VMs -. Alternatively, optimization server  may be a virtual server that may be implemented by one or more VMs -executing on a host, such as a computing device . For example, in one embodiment, optimization server  may be implemented as a plug-in to VI Client that operates with VC Server, both of which are available from VMware, Inc. In an embodiment, optimization server  is positioned remotely from target VMs -such that optimization server  is separate from a computing device  or other device that hosts target VMs -. Alternatively, optimization server  may be positioned, or executed, within a target VM . Moreover, optimization server  is coupled to one or more maintenance applications  (and\/or to the VMs -executing maintenance applications ) through optimization framework .","Optimization framework  includes a set of programming functions, classes, objects, and\/or other programming components that enable optimization server  to interface with one or more maintenance applications . More specifically, optimization framework  enables optimization server  to execute maintenance operations on target VMs -and enables maintenance application  to receive commands and\/or data from optimization server  and transmit data to optimization server . In an embodiment, optimization framework  includes a framework agent  and a plurality of framework APIs , such as a plurality of concrete, or instantiatable, APIs  and a plurality of interface APIs . At least a portion of the framework APIs  are implemented by the maintenance application  to enable the optimization server  to transmit maintenance operations to maintenance application  through optimization framework . In some embodiments, optimization framework  is provided to third party developers for use in developing maintenance application . In such embodiments, maintenance application  incorporates or implements aspects of optimization framework  and expects optimization framework  to be executing within a VM in which maintenance application  is executing. In some embodiments, optimization framework  is shipped with maintenance application  such that a user may install optimization framework  along with maintenance application .","Framework agent  operates as a bridge between maintenance application  and optimization server . For example, framework agent  may establish a data connection with optimization server  (i.e., between maintenance application  and optimization server ) and monitor the connection to determine if optimization server  is requesting or commanding a maintenance operation to be executed on a target VM . If framework agent  detects or receives a request or command to execute a maintenance operation (hereinafter referred to as a \u201cmaintenance command\u201d) on a target VM , framework agent  requests and obtains, from target VM , information or data associated with the target VM , for example, using one or more system APIs . Such information or data associated with target VM may include, for example, inventory data of the target VM , such as the number and\/or size of one or more disks -associated with target VM , the type and\/or version of the operating system executing on target VM , the contents of a file allocation table (FAT), the operating system registry contents, information required to mount one or more disks -, and\/or any other suitable information or data associated with the target VM .","Framework agent  transmits the maintenance command to a maintenance application  by calling an associated framework API . The maintenance command transmitted to the maintenance application  includes the maintenance operation (e.g., disk defragmentation, disk cleanup, or registry cleanup) to be executed on the target VM , inventory data of the target VM , and user and\/or administrator configuration settings. After the maintenance operation has completed, framework agent  transmits data representative of the maintenance operation results to optimization server  (and then to a user for user intervention) if optimization server  has been configured accordingly. For example, the maintenance results may include a summary or report based on an analysis of the target VM (hereinafter referred to as an \u201canalysis report\u201d) and one or more recommended operations or actions (hereinafter referred to as \u201crecommended actions\u201d) to perform on the target VM based on the results of the analysis. If optimization server  has not been configured to request user intervention after the maintenance operation has completed, the maintenance operation results are automatically implemented, such as by implementing the recommended actions on or within the target VM .","In an embodiment, concrete APIs  are APIs that may be instantiated and\/or called, for example, by maintenance application  to interface with components of optimization framework  and\/or optimization server . In an embodiment, one function call that may be used to implement and\/or access concrete APIs  is: void StartVMOFAgent (String), which may be used by a maintenance application  to initiate or start framework agent . Another function call that may be used to implement and\/or access concrete APIs  is: void Connect (VMOPSHostName, VMOPSPort, RegistrationKey), which may be used by framework agent  to establish a connection with optimization server  and to enable framework agent  to receive maintenance commands from optimization server . Still another function call that may be used to implement and\/or access concrete APIs  is: void Disconnect (RegistrationKey), which may be used to disconnect framework agent  from optimization server . In some embodiments, StartVMOFAgent may be referred to as StartOptimizationFrameworkAgent or StartFrameworkAgent. In addition, VMOPSHostName may be referred to as OptimizationServerHostName or OptimizationServerName, and VMOPSPort may be referred to as OptimizationServerPort.","In an embodiment, interface APIs  are APIs that are implemented by maintenance application  and that are called by framework agent . More specifically, interface APIs  are called by optimization server , through framework agent , to initiate, monitor, and\/or receive the results of one or more maintenance operations. In one embodiment, an administrator or a user may configure maintenance application  to transmit the results of a maintenance operation to optimization server  before terminating the maintenance operation. For example, the administrator or user may desire to view the analysis report before implementing the recommended actions, and\/or the administrator or user may desire to perform manual or user-selected actions based on the analysis report. In such an embodiment, a function call that may be used to receive the results of a maintenance operation, such as a disk cleanup operation, performed on an online target VM is: DiskCleanupResult AnalyzeDiskForCleanup (FAT[ ], Configuration, Registry). Another function call that may be used to receive the results of a maintenance operation, such as a registry cleanup operation, performed on an online target VM is: RegistryCleanupResult AnalyzeRegistryForCleanup (FAT[ ], Configuration, Registry). As used herein, the term \u201conline\u201d refers to a state that is a virtual representation of a powered-on device, and the term \u201coffline\u201d refers to a state that is a virtual representation of a powered-off device.","If the target VM is offline, a function call that may be used to receive the results of a maintenance operation, such as a disk cleanup operation, is: DiskCleanupResult AnalyzeDiskForCleanup (MountedDriveNames as String [ ], Configuration). Another function call that may be used to receive the results of a maintenance operation, such as a registry cleanup operation, is: RegistryCleanupResult AnalyzeRegistryForCleanup (MountedDriveNames as String [ ], Configuration).","In another embodiment, for one or more target VMs -, an administrator or a user may configure maintenance application  to complete the maintenance operation without prompting the administrator or the user to input a command (i.e., without user intervention) after receiving the results of the maintenance operation. In such an embodiment, a function call that may be used to receive the results of a maintenance operation, such as a disk cleanup operation, is: DiskCleanupResult CleanupDisk (FAT[ ], Configuration, Registry). Another function call that may be used to receive the results of a maintenance operation, such as a registry cleanup operation, is: RegistryCleanupResult CleanupRegistry (FAT[ ], Configuration, Registry).","If the target VM is offline, a function call that may be used to receive the results of a maintenance operation, such as a disk cleanup operation, is: DiskCleanupResult CleanupDisk (MountedDriveNames as String [ ], Configuration). Another function call that may be used to receive the results of a maintenance operation, such as a registry cleanup operation, is: RegistryCleanupResult CleanupRegistry (MountedDriveNames as String [ ], Configuration).","In one embodiment, a function call that may be used regardless of whether the target VM is online or offline and that may not require user intervention during the maintenance operation or after the maintenance operation has completed is: DefragmentationResult DefragmentDisk (DriveNames as String[ ], Configuration).","In an embodiment, maintenance application  is a software tool or utility that executes or performs one or more maintenance operations on a component, such as on one or more disks -of a target VM . For example, maintenance application  may execute maintenance operations including, for example, a disk cleanup operation on disk to remove undesired files and\/or a disk defragmentation operation to defragment or optimize a placement of files within disk . Maintenance application  may additionally or alternatively execute a maintenance operation including a registry cleanup operation on disk to remove undesired operating system registry files or entries, to modify one or more registry settings to improve a performance and\/or a startup time of target VM , and\/or any other operation to improve a performance or operation of a target VM . In some embodiments, maintenance application  may execute a maintenance operation including a virus scan and cleanup (for online or offline target VMs -, software auditing for target VMs -, and\/or may execute an above-mentioned maintenance operation on a template of a VM to optimize the template.","System APIs  are a plurality of APIs provided by an application suite or operating system that is common to target VMs -, maintenance application , optimization framework , and\/or optimization server . In one embodiment, system APIs  are embodied within a virtualized platform, such as vSphere, which is available from VMware, Inc. In some embodiments, system APIs  include vSphere 5.0 APIs and VM Tools, which are available from VMware, Inc. System APIs  may also include offline registry access APIs from an operating system manufacturer, such as Microsoft, Inc. for target VMs -executing a Microsoft Windows brand operating system. In some embodiments, using offline registry access APIs may introduce security concerns with respect to target VM , maintenance application , and\/or optimization server . For example, the offline registry access APIs may cause registry settings and\/or other private data of target VM to be transferred from target VM to another application, such as maintenance application . However, such security concerns may be reduced or alleviated by the registration process and the individualized and customizable configuration of maintenance application  as described herein.","Target VMs -are VMs -executing on one or more computing devices . More specifically, each target VM -executes on a hypervisor  of one or more computing devices . Each target VM -includes at least one disk -. In an embodiment, disk is embodied as a virtual disk image or file (hereinafter referred to as a \u201cdisk file\u201d) stored within a memory, such as memory  (shown in ). In an embodiment, if a target VM is offline, framework agent  mounts the disk of the target VM to enable access to the files or other data stored in disk . Framework agent  then invokes the maintenance operation of maintenance application . In such an embodiment, maintenance application  executes the maintenance operation by accessing data from the mounted disk .","Moreover, in an embodiment, optimization server , optimization framework , and maintenance application  do not install any software components within target VM to execute the maintenance operation on the target VM . For example, components of optimization framework , such as framework agent  and framework APIs , are exclusively installed within maintenance application  and\/or within a VM executing the maintenance application . Accordingly, optimization server , optimization framework , and maintenance application  may access data on the disk of the target VM directly (and thereby execute the maintenance operation on the disk and\/or target VM ), without requiring the use of an intermediary maintenance agent or maintenance application installed within the target VM .",{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 4","b":["302","302","400","302","302","402","404","406","408","410","400","302","104","250","302","102","245","410","302"]},"Manager module  controls the operation of optimization server , and directs or commands optimization server  to perform the functions described herein. For example, manager module  selects a maintenance application , and a maintenance operation associated with the maintenance application  to execute on a target VM (shown in ). When the maintenance operation has been selected, manager module  transmits a maintenance command to framework agent , which in turn calls or invokes maintenance application  (both shown in ) to cause the maintenance operation to be executed on the target VM . The maintenance command may include user configuration settings, administrator configuration settings, and at least a portion of data associated with the target VM , as described more fully herein. Manager module  also determines whether the target VM is offline, and mounts each disk -of the target VM to the maintenance application , using disk mounting module , if the target VM is offline. Moreover, manager module  registers the maintenance application  with optimization server  to enable the maintenance application  to establish a trusted communication with optimization server . As used herein, the term \u201ctrusted communication\u201d refers to communication between a first device and a second device where the first device has been authenticated with the second device to verify an identity of the first device. Such communication may also include encryption or other security measures to enhance the security of the trusted communication.","Administrator policy module  may be used to determine or select a plurality of policies or rules for optimization server  and\/or for optimization system  (shown in ) to control the operation thereof. For example, administrator policy module  may determine a frequency of maintenance operations to be performed for each target VM -, and\/or may identify target VMs -that should be excluded from a maintenance operation.","Administrator configuration module  enables optimization server  to configure settings of maintenance application . In some embodiments, administrator configuration module  enables settings of maintenance application  to be customized at one or more levels of a virtual infrastructure, such as one or more levels of a virtual infrastructure tree identified or displayed in VI Client, which is available from VMware, Inc. An administrator may use user input device  (shown in ), or another suitable input device, to enter into administrator configuration module  and\/or to cause optimization server  to generate (or update) a plurality of configuration settings (hereinafter referred to as \u201cadministrator configuration settings\u201d) for a maintenance application  (shown in ). In an embodiment, administrator configuration settings are identified or selected for a maintenance application  and are used to configure maintenance operations performed on each target VM -accessed by maintenance application . Such administrator configuration settings are stored in a configuration file (which is stored in database ) and are transmitted to maintenance application  in preparation for executing one or more maintenance operations. In one embodiment, the administrator configuration settings are stored as one or more extensible markup language (XML) files to facilitate propagating the administrator configuration settings to maintenance applications  using framework agent .","User configuration module  enables optimization server  to configure settings of maintenance application  with respect to a single target VM . For example, a user may use user input device , or another suitable input device, to enter into user configuration module , or to cause optimization server  to generate a plurality of configuration settings or to update existing configuration settings. Such configuration settings (hereinafter referred to as \u201cuser configuration settings\u201d) may be used to determine a specific configuration of a maintenance application  and\/or may be applied to a maintenance operation to be executed on a target VM . Moreover, the user configuration settings may override one or more administrative settings described above with respect to a target VM . Additionally, a user may exclude a target VM from having a maintenance operation executed on the target VM by setting a predetermined user configuration setting. In an embodiment, the user configuration settings are stored as one or more XML files within database .","In some embodiments, an XML configuration file used for a disk defragmentation maintenance operation may include:",{"@attributes":{"id":"p-0051","num":"0050"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<ToolConfiguration name=\u201dDiskDefragmenter\u201d>"},{"entry":"\u2003\u2003\u2003<Configuration id=\u201d1\u201d name=\u201dCompact Free Spaces\u201d\/>"},{"entry":"\u2003\u2003\u2003<Configuration id=\u201d2\u201d name=\u201dDefrag and Optimize Disk\u201d\/>"},{"entry":"\u2003\u2003\u2003...."},{"entry":"<\/ ToolConfiguration >"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"In addition, in some embodiments, an XML configuration file used for a disk cleanup maintenance operation may include:",{"@attributes":{"id":"p-0053","num":"0052"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<ToolConfiguration name=\u201dDiskCleanUp\u201d>"]},{"entry":[{},"<Configuration id=\u201d1\u201d name=\u201dClean Zero Length Files\u201d\/>"]},{"entry":[{},"<Configuration id=\u201d2\u201d name=\u201dIgnore System Files\u201d\/>"]},{"entry":[{},"...."]},{"entry":[{},"<IncludeFiles>"]},{"entry":[{},"\u2003\u2003\u2003<FilePattern>*.tmp<\/FilePattern>"]},{"entry":[{},"\u2003\u2003\u2003<FilePattern>*.swp<\/FilePattern>"]},{"entry":[{},"\u2003\u2003\u2003...."]},{"entry":[{},"<\/IncludeFiles>"]},{"entry":[{},"<ExcludeFiles>"]},{"entry":[{},"\u2003\u2003\u2003<FilePattern>*.dat<\/FilePattern>"]},{"entry":[{},"\u2003\u2003\u2003...."]},{"entry":[{},"<\/ExcludeFiles>"]},{"entry":[{},"<\/ToolConfiguration>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Disk mounting module  is used to mount one or more disks -and\/or disk files of a target VM to a VM (shown in ) that is executing maintenance application . Database  stores data associated with system  to facilitate executing one or more maintenance operations. For example, database  may store inventory data or other data associated with target VMs -, such as a number of target VMs -executing on a computing device  and\/or within a hypervisor  (shown in ), data regarding one or more datastores coupled to target VMs -, results of maintenance operations, and\/or information required to mount one or more disks -. In addition, database  may store a list of maintenance applications  that have been registered with optimization server , data regarding a maintenance application  that is currently executing a maintenance operation selected by optimization server , a list of target VMs -to be excluded from a maintenance operation, a plurality of user configuration settings for each target VM -, a plurality of administrator configuration settings for maintenance application , a history of maintenance operations that have been executed on each target VM -, and\/or any other suitable data that enables optimization server  to function as described herein.",{"@attributes":{"id":"p-0055","num":"0054"},"figref":["FIGS. 5A and 5B","FIG. 2","FIG. 6","FIG. 3","FIG. 6","FIG. 3"],"b":["500","235","235","600","500","600","300","500","302","600","300"],"sub":["1","N "]},"As illustrated in , for example, a host computing device  includes a plurality of VMs -, such as a first, or maintenance VM , and a second, or target VM . Any number of additional target VMs -may also be included within a host computing device . In an embodiment, a maintenance application  is installed within the maintenance VM . Maintenance VM  and target VMs -are installed or instantiated within hypervisor  of computing device . Moreover, computing device  includes an optimization framework  that includes a framework agent  and a plurality of framework APIs  (shown in ) that are installed as part of maintenance application  and\/or maintenance VM . Optimization framework  provides an interface to the maintenance application . In an embodiment, one or more disks -of target VMs -and\/or of maintenance VM  are located or stored within at least one datastore (not shown) of optimization system . In some embodiments, a separate maintenance application  or maintenance VM  is installed for each datastore in optimization system  to facilitate accessing data within each datastore during the execution of a maintenance operation on an associated target VM -. Alternatively, a single maintenance application  or maintenance VM , or any number of maintenance applications  or maintenance VMs , are installed within optimization system  to execute one or more maintenance operations on one or more target VMs -.","An optimization server  is coupled to the maintenance application  through the optimization framework  (e.g., through framework agent ) for accessing the maintenance application . In addition, the optimization server  registers the maintenance application  as described herein. The optimization server  is configured to select a maintenance operation to execute on the target VM , command the maintenance application  to execute the maintenance operation on the target VM , and receive the results of the maintenance operation. It should be recognized, as illustrated in , that optimization server  may be coupled to a plurality of computing devices  and\/or maintenance applications  installed within maintenance VMs  of the computing devices . Accordingly, optimization server  may cause a plurality of maintenance operations to be executed on a plurality of target VMs -executing on one or more computing devices .","In an embodiment, method  is at least partially executed by one or more computing devices  (shown in ) and\/or one or more VMs -. For example, a plurality of computer-executable instructions is embodied within a computer-readable medium, such as memory  or memory . The instructions, when executed by a processor, such as processor  or processor , cause the processor to execute the steps of method  and\/or to function as described herein. While method  is described with respect to one maintenance application  and target VM , it should be recognized that method  may be used with a plurality of maintenance applications  and\/or target VMs -in a similar manner as described herein.","As shown in , configuration settings are generated  for one or more maintenance applications . More specifically, an administrator initially uses, or configures, maintenance application  to generate a plurality of administrator configuration settings for maintenance application . An XML file (i.e., administrator configuration file or template) is generated by maintenance application  and is stored in optimization server  (e.g., within database ). In some embodiments, generating  the initial administrator configuration settings is a one-time manual operation performed by the administrator. In an embodiment, the maintenance application  is installed within a dedicated maintenance VM  that is separate from target VMs -.","One or more maintenance applications  are registered  with optimization server . In an embodiment, the administrator selects a maintenance application  and registers  the maintenance application  with optimization server  by associating, with optimization server , a name of the maintenance application , a description of the maintenance application , a list of maintenance operations that maintenance application  is able to execute, and one or more configuration files associated with maintenance application . In an embodiment, upon registration of the maintenance application , optimization server  generates a registration key for the maintenance application  that enables the maintenance application  to establish a trusted or authenticated communication with optimization server  for performing or executing maintenance operations. The registration key is stored  in a predetermined location within the maintenance application  (i.e., within the maintenance VM ), for use by maintenance application  in establishing a trusted communication with optimization server . In an embodiment, after registering  a maintenance application , an administrator may input administrator configuration settings into optimization server  using administrator configuration module  and a user may input user configuration settings into optimization server  using user configuration module  (both shown in ) to customize the configuration settings generated  for the maintenance application .","As shown in , optimization server  selects , without user intervention, a maintenance application  to call, a target VM , and a maintenance operation to execute on the target VM based on predetermined administrator policies. Alternatively, the user or administrator, using optimization server , selects  a maintenance application  (e.g., from a list of registered maintenance applications ), a target VM , and a maintenance operation to execute on the target VM . A profile, or \u201csnapshot,\u201d of the target VM is taken and\/or stored  by optimization server  before the maintenance operation is executed, for example, using one or more VC Server brand tools which are available from VMware, Inc.","Optimization server  determines  whether the target VM is offline. If the target VM is offline, the disk or disks -of the target VM are mounted  to the maintenance application , i.e., to the maintenance VM . Optimization server  then instructs or commands the maintenance application  to execute the maintenance operation. More specifically, optimization server  transmits  a command (i.e., a maintenance command) to execute the maintenance operation to the framework agent . The maintenance command includes configuration data from the user configuration file and\/or the administrator configuration file.","More specifically, in an embodiment, optimization server  determines whether user configuration settings exist for the target VM . If user configuration settings exist, optimization server  includes the user configuration settings in the maintenance command transmitted to maintenance application . However, if no user configuration settings exist for target VM , optimization server  determines if user configuration settings exist for any \u201cancestors\u201d of the target VM (i.e., any machines or devices at a higher infrastructure level than target VM and that have configuration settings or other settings or data inherited by the target VM ). If an ancestor of the target VM includes user configuration settings, these settings are used for the target VM and are included within the maintenance command transmitted to maintenance application . If no user configuration settings exist for the target VM or an ancestor of the target VM , the administrator configuration settings for maintenance application  are used and included within the maintenance command.","In an embodiment, a component of optimization framework , such as framework agent , is used to execute  the maintenance operation on the target VM , for example, by calling a function identified in an interface API  (shown in ) that is implemented by the maintenance application  using the data contained in the maintenance command. In an embodiment, if target VM is offline, the maintenance application  executes  the maintenance operation by receiving the data from the disk of target VM and analyzing or cleaning the data received. If the target VM is online, the maintenance application  executes  the maintenance operation in the target VM and\/or disk based on the type of the maintenance operation.","Framework agent  determines  whether user intervention is requested, for example, by analyzing the maintenance command and\/or configuration settings received from optimization server . If user intervention is requested, the maintenance results (e.g., the analysis report and\/or the recommended actions) are transmitted or displayed to the user, and the user selects one or more actions to implement based on the maintenance results. In one embodiment, a component of the optimization framework , such as framework agent , is used to transmit the maintenance results from maintenance application  to optimization server , and optimization server  transmits or displays the results to the user.","After the user selects the actions to be performed, maintenance application  implements  the user selected actions. If, however, user intervention is not requested, maintenance application  automatically implements  the recommended actions and\/or actions identified by maintenance application . Framework agent  then determines  whether the maintenance operation completed successfully (e.g., whether the actions were implemented successfully), for example, by analyzing a termination or completion message of the maintenance operation generated by the maintenance application . If the maintenance operation completed successfully, optimization server  may execute other maintenance operations on the same target VM and\/or on other target VMs -by returning to selecting  a maintenance application  to call, a target VM , and a maintenance operation to execute on the target VM . However, if the maintenance operation did not complete successfully, the target VM and\/or the disk of the target VM may be restored , from the stored profile or snapshot, to a state of the target VM and\/or disk before the maintenance operation was executed. In some embodiments, the target VM is restored  using one or more software tools or applications within VC server, which is available from VMware, Inc.","Exemplary Operating Environment","The optimization system as described herein may be performed by a computer or computing device. A computer or computing device may include one or more processors or processing units, system memory, and some form of computer-readable media. Exemplary computer-readable media include flash memory drives, digital versatile discs (DVDs), compact discs (CDs), floppy disks, and tape cassettes. By way of example and not limitation, computer-readable media comprise computer storage media and communication media. Computer storage media store information such as computer-readable instructions, data structures, program modules, or other data. Communication media typically embody computer-readable instructions, data structures, program modules, or other data in a modulated data signal such as a carrier wave or other transport mechanism and include any information delivery media. Combinations of any of the above are also included within the scope of computer-readable media.","Although described in connection with an exemplary computing system environment, embodiments of the disclosure are operative with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems, environments, and\/or configurations that may be suitable for use with aspects of the disclosure include, but are not limited to, mobile computing devices, personal computers, server computers, hand-held or laptop devices, multiprocessor systems, gaming consoles, microprocessor-based systems, set top boxes, programmable consumer electronics, mobile telephones, network PCs, minicomputers, mainframe computers, distributed computing environments that include any of the above systems or devices, and the like.","Embodiments of the disclosure may be described in the general context of computer-executable instructions, such as program modules, executed by one or more computers or other devices. The computer-executable instructions may be organized into one or more computer-executable components or modules. Generally, program modules include, but are not limited to, routines, programs, objects, components, and data structures that perform particular tasks or implement particular abstract data types. Aspects of the disclosure may be implemented with any number and organization of such components or modules. For example, aspects of the disclosure are not limited to the specific computer-executable instructions or the specific components or modules illustrated in the figures and described herein. Other embodiments of the disclosure may include different computer-executable instructions or components having more or less functionality than illustrated and described herein.","Aspects of the disclosure transform a general-purpose computer into a special-purpose computing device when programmed to execute the instructions described herein.","The operations illustrated and described herein may be implemented as software instructions encoded on a computer-readable medium, in hardware programmed or designed to perform the operations, or both. For example, aspects of the disclosure may be implemented as a system on a chip.","The embodiments illustrated and described herein as well as embodiments not specifically described herein but within the scope of aspects of the disclosure constitute exemplary means for maintaining high availability of software application instances, such as virtual machines.","The order of execution or performance of the operations in embodiments of the disclosure illustrated and described herein is not essential, unless otherwise specified. That is, the operations may be performed in any order, unless otherwise specified, and embodiments of the disclosure may include additional or fewer operations than those disclosed herein. For example, it is contemplated that executing or performing a particular operation before, contemporaneously with, or after another operation is within the scope of aspects of the disclosure.","When introducing elements of aspects of the disclosure or the embodiments thereof, the articles \u201ca,\u201d \u201can,\u201d \u201cthe,\u201d and \u201csaid\u201d are intended to mean that there are one or more of the elements. The terms \u201ccomprising,\u201d \u201cincluding,\u201d and \u201chaving\u201d are intended to be inclusive and mean that there may be additional elements other than the listed elements.","Having described aspects of the disclosure in detail, it will be apparent that modifications and variations are possible without departing from the scope of aspects of the disclosure as defined in the appended claims. As various changes could be made in the above constructions, products, and methods without departing from the scope of aspects of the disclosure, it is intended that all matter contained in the above description and shown in the accompanying drawings shall be interpreted as illustrative and not in a limiting sense."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":["FIG. 4","FIG. 3"]},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIGS. 5A and 5B"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 6","FIGS. 5A and 5B"]}]},"DETDESC":[{},{}]}
