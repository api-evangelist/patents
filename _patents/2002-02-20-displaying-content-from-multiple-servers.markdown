---
title: Displaying content from multiple servers
abstract: A request is sent for a web page and the web page is received from a first server. The web page is displayed by a browser. An identification of the web page is sent to a second server. Content is received from the second server. The content is selected by the second server based on the identification sent to the second server. A toolbar that includes a button is displayed, and the received content is displayed in response to a user selecting the button.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07058892&OS=07058892&RS=07058892
owner: America Online, Inc.
number: 07058892
owner_city: Dulles
owner_country: US
publication_date: 20020220
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"p":["This application is a continuation of U.S. patent application Ser. No. 09\/455,652 filed Dec. 7, 1999, now U.S. Pat. No. 6,433,795 issued Aug. 13, 2002, which was a continuation of U.S. patent application Ser. No. 09\/135,694 filed Aug. 18, 1998, now U.S. Pat. No. 6,020,884 issued Feb. 1, 2000, which was a continuation of U.S. patent application Ser. No. 08\/745,294 filed Nov. 8, 1996, now U.S. Pat. No. 5,796,393 issued Aug. 18, 1998.","1. Field of the Invention","The present invention relates generally to systems for human-computer interaction. In particular, the present invention relates to a system and method for enhancing a computer user's Internet browsing experience by determining a user's preferences and facilitating the user's interaction with a community of users (community members) sharing similar preferences via community content annotations related to on-line content and via synchronous and asynchronous interactions with community members sharing similar preferences.","2. Description of Related Art","Computer information services today offer a variety of services and content to their subscribers. For example, subscribers of the CompuServe\u00ae Information Service may retrieve information or content from a repository maintained by the service or possibly, by a third party provider. In addition, CompuServe subscribers may communicate with other subscribers. Communications may occur in real time as subscribers initiate and join ongoing conference room or \u201cchat\u201d sessions managed by the information service. CompuServe subscribers may also communicate directly with one another as well as with non-members via electronic mail (e-mail.) Special interest on-line discussion groups (i.e., message boards or forums) within CompuServe also provide opportunities for subscribers to communicate with one another. Forums are generally comprised of three major areas: a message area, a library, and a conference room for forum conferencing.","The message area serves as a place for posting and responding to messages relating to a specific topic. When a message is posted and someone responds to it, a thread is created. A thread is a string of two or more messages that are related to one another and that share a particular subject or topic heading (i.e., thread). The forum library serves as a storage area for documents, graphics, and other information that may be browsed, searched, or downloaded. Forum conferences, on the other hand, are live electronic conversations between two or more forum members. It is the facilitation of interaction via these various methods and in relation to shared areas or topics of interest that gives on-line information service subscribers a sense of belonging to a community.","To interact with the CompuServe Information Service, a subscriber's computer may be equipped with communication or connection software that has a graphical user interface such as the CompuServe Information Manager for Windows\u00ae (WinCIM). The communication software allows the subscriber to establish and maintain a connection with the information service and to perform tasks and retrieve information content from the service as well as interact with other subscribers. Typically, the communication software is designed to support all of the features and functionality of the information service and is tailored to a user's interaction with the on-line service. Content at the on-line service is typically organized or categorized according to areas of interest among groups of users (e.g., Windows Users'Forum, CNN Online, Entrepreneur's Small Business Forum). Content is generally presented or displayed in a similar manner regardless of the area of interest. Users are able to locate content easily and communicate easily with others who share similar interests (e.g., via forums, e-mail, conferencing or chat) thereby creating communities.","The Internet and World Wide Web (Web), comprised of a vast array of international computer networks, provide on-line service subscribers with additional content or resources to search. These international computer networks may be comprised of foreign host computers or servers (i.e., not part of the on-line service network) that users access to locate resources. Typically, these resources are accessed using a Web browser, such as Spry's Mosaic, Microsoft's Internet Explorer, or Netscape's Navigator, capable of understanding the HyperText Markup Language (HTML) used to create the documents (Web pages) found on the Web and the HyperText Transfer Protocol (HTTP) (as well as other protocols and\/or applications such as File Transfer Protocol (FTP), Internet Relay Chat (IRC), telnet, etc., collectively \u201cInternet protocols\u201d) used to navigate or locate sites on the Web from which the HTML and other documents may be accessed. Although Web browsers typically have varying levels of functionality or sophistication, retrieved content is displayed according to views or presentations specific to the Web page currently presented by the Web browser. Each screenful of information includes menu choices, highlighted words, or graphics through which users may locate further information, either from the same computer or by linking automatically to another computer somewhere else on the Internet. Typically, the views and presentations of the Web pages are different than those provided by the communication software from the on-line service because the Web browser is, in fact, a separate client application displaying Web pages containing presentation directives in the form of HTML or another protocol\/application such as FTP, IRC, etc.","Web sites are typically linked to one another via Uniform Resource Locators (URLs). Users may navigate or browse within a site or between sites simply by selecting or clicking on menu choices, highlighted words, or graphics (i.e., links on Web pages) that represent URLs. Despite the fact that navigating the Web is easy (users simply point and click), as it exists today, the Web is a huge, daunting, mostly disorganized space in which people wander aimlessly from link to link (i.e., URL) in hopes of finding meaningful content. Browsing the Web is essentially a solitary experience. Most Web pages are designed to present information to users rather than to promote interactions with other humans. Most interaction with other humans consists of, \u201ccheck out this URL\u201d by word of mouth, an e-mail message, or some other printed medium. Few, if any opportunities for interacting with others are presented to Web users.","What is further confusing to many computer users is the fact that they must learn and use different user interface software for interacting with or navigating\/browsing the information service (i.e., information service communication software) than they use for interacting with or navigating\/browsing the Web. Users' on-line experiences are compromised because they must switch between applications to access information service content and then Internet\/Web content. Switching between applications requires users to change not only the method of interaction, but also changes the context of interactions from community-oriented on the on-line service to solitary, less socially oriented interactions on the Internet\/Web. Therefore, there is a need for an integrated method of interaction that allows computer users to access the Internet\/Web using a commercially available browser, but also enjoy community-oriented activities and interactions of an on-line service that typically may be accomplished only by leaving the Internet\/browser and switching to the on-line service content\/on-line service communication software. Web users need the ability to form on-line relationships with others and to communicate with others of similar interests or background.","The present invention\u2014the Community Browser\u2014enhances a user's on-line experience by enabling those with similar interests or shared circumstances to enjoy on-going social relations. Social relations in an on-line environment translate to both real-time interactive methods or options, such as chat and gaming, and static interaction methods, such as viewing annotations (e.g., threaded messaging) and shared bookmarks. The enabling technology of the Community Browser augments the available content on the Internet\/Web that is accessed via a browser with interaction opportunities for on-line service members and for Community-created content by on-line service members. The on-line community environment is integrated with a user's browser so that messaging and interaction components of the on-line service are available while the user browses the Internet.","The Community Browser is a set of tools and capabilities that enable Web users to benefit from a focused view of the Web based on shared interest, an available group of people accessible for interactions, and a repository for relevant and pertinent information discovered while browsing or navigating the Web. The tools may be segmented into two groups: core components and interaction components. The core components enable a community to exist and are generally transparent to the user. Interaction components enable various capabilities and user interactions and facilitate the creation of community content by users.","The core components comprise a Community Server and a Community Client. The Community Server maintains communications with the Community Client which operates on the user's computer. Together the Community Server and Community Client notify the user of annotations by community members affiliated with whatever Web page (as identified by a particular URL) he or she happens upon. The Community Server serves requests from the Community Client by initiating sessions between the appropriate annotation components and the Community Client, thus enabling annotations to be created and interactions with community members to occur in conjunction with navigating the Web. The primary function of the Community Server is as a community communication hub for facilitating interaction with a community while the user's browser is running.","The Community Client serves primarily as an access mechanism to the community services, annotations, and interactions. In a preferred embodiment of the present invention, it is manifested as a toolbar on the user's computer screen when used in conjunction with a Web browser selected by the user. In another embodiment of the present invention, it may also be used independently of a Web browser. Toolbar options facilitate the user's community interaction options by, for example, allowing the user to access a Web page for the community or initiate a chat session with another community member.","The interaction components or methods (i.e., community interaction options) enable aspects of community experiences for users and allows them to engage in on-going social relations. The interaction components may comprise message boards (or forums), chat, community bookmarks, gaming, and voting. In a preferred embodiment of the present invention, the interaction components support \u201ccapabilities\u201d associated with a community. Capabilities may be viewed as actions that may be performed in a community. Each community may support a set of common or unique capabilities.","Message boards enable asynchronous interactions between community members through threaded messaging. Community threaded messages or annotations are associated with a particular Web page as identified by a URL. The concept of associating annotations to Web pages enables community members to create a natural organization for their messages. The Web page acts as the high-level interest filter and the topics of the associated annotations further define the context based on contributions from community members. Thus, community messaging becomes a true expression mechanism for the community and the millions of Web pages become catalysts for eliciting comments from community members.","Conferencing or \u201cchat\u201d enables real-time interactions between community members. Community members may initiate or just participate in real-time streaming chat sessions. Streaming chat includes the capability for users to exchange text, audio, and other multimedia type data.","Community bookmarks enable community members to contribute Web pages for the benefit of other community members. Contributors gain community recognition for their contributions. When creating a community bookmark, the contributor provides a title and a description for his or her contribution. This information may be indexed into a directory service at the time of creation so that it may be retrieved later.","Community members may also participate in on-line games such as DOOM, Quake, Flight Simulator. Users are presented with capabilities for inviting others to participate in a game and capabilities for actually participating in an on-line game.","Voting enables community managers and members to understand the temperament of the community based on input gathered through voting. There are two types of voting. (1) Votes may be registered for or against community bookmarks, thus creating a community rating system for the bookmarks. (2) A real-time polling mechanism enables community managers to ask questions and get immediate feedback from the community members while on-line.","The present invention allows Web users to form on-line relationships with Community members, to communicate with others of similar interest or backgrounds, and to view Community content. The Communities of the present invention may serve as a starting or focal point for Web navigating. The present invention provides a structure for a Web experience and helps users avoid being overwhelmed or overloaded by the complexity of the Web. The features and benefits of the present invention may be better understood by referring to the following description in conjunction with the accompanying drawings.","Referring to , a diagrammatic representation of the system architecture for a preferred embodiment of the present invention is shown. Preferably, the system is comprised of several servers providing specialized services to accomplish the features and functionality of the present invention. Some servers may be part of a wide area network owned, operated, and maintained by an on-line service. Other servers may be owned, operated, and maintained by a third party or many third parties and may thus constitute a foreign service. From the viewpoint of the on-line service, these third-party servers are foreign servers because they are not part of the wide area network of the on-line service. Preferably, the foreign servers are part of a global, wide area network such as the Web portion of the Internet. Each server, whether part of the on-line service or foreign, is comprised of hardware and software elements that provide a sophisticated set of services or operations for use by clients. Preferably, communications between servers are accomplished using well-known connection technology such as TCP\/IP connections. Finally, data needed by the present invention may be stored in databases accessible via any one of a number of interfaces (e.g., Open Database Connectivity (ODBC) interface.)","In a preferred embodiment of the present invention, object-oriented software technology (Object-Oriented Programming\u2014OOP) is used to implement the features and functionality of the software components that comprise the present invention. OOP techniques involve the definition, creation, use, and destruction of \u201cobjects.\u201d These objects are based on software entities or classes comprising data types and procedures that are automatically associated with them. Classes serve as templates that instruct on building or creating an object. OOP techniques are well-known in the art.","Referring again to , users of the present invention interact with or browse the Web using a commercially available Web browser  such as Spry's Mosaic, Netscape's Navigator, or Microsoft's Internet Explorer. The Web browser allows a user to retrieve information from servers through any one of a number of well-known protocols and\/or applications (including the HyperText Transfer Protocol (HTTP), File Transfer Protocol (FTP), Internet Relay Chat (IRC), telnet) that has been made publicly available on the Internet. A user retrieves information via the browser by supplying a URL . A connection is then made to the Web server  associated with the URL. Once connected, the user may \u201cbrowse\u201d the information at the Web site by reading the text and viewing the graphics on the Web page and selecting links to related information which may or may not be available from the same server. The servers with which the user interacts are owned, operated, and maintained by many different parties and are, from the viewpoint of an on-line service, foreign servers.","Also in communication with the user's Web browser \u2014via a Community Client comprising a Remote Passphrase Authentication module  and community control module  embodied in dynamic link libraries (DLLs)\u2014is a Community Server  which is part of the on-line service (i.e., owned, operated, and maintained by the service). The Community Server  manages communities as defined by Home Pages for each community, annotations (i.e., information service content) and their associations with or links to Web pages (as identified by URLs), and sessions established on behalf of members to enable community interactions via community interaction options. The Community Server  acts as the community communication hub. Preferably, the on-line service community environment is based on the same technology as the Web so that communities integrate easily with the Web environment. Communications between the community control module  of the Community Client and Community Server  may occur via a TCP\/IP connection . When the user navigates to a new Web page , a message (e.g., HTTP message containing the new URL ) is sent from the Community Client  to the Community Server  via the TCP\/IP connection  so interactions may begin with the community associated with the new Web page.","In a preferred embodiment of the present invention, user authentication is accomplished via a separate Remote Passphrase Authentication module  of the Community Client that communicates with a Remote Passphrase Authentication (RPA) enabled server  via the Community Server . The RPA enabled Server  may further access a passphrase database to perform user authentication. Communications between the Remote Passphrase Authentication module  of the Community Client, Community Server , and RPA enabled server  may be accomplished in accordance with any one of a number of well-known protocols and\/or applications including HTTP, FTP, IRC, etc. messages sent via TCP\/IP connections , .","Once a user is authenticated, a \u201cpersistent connection\u201d is made between the Community Client module  and the Community Server . This persistent connection, unique to the present invention, is used to send and receive notifications to and from the Community Server . The Community Client  reports to the Community Server  changes in the Web page as identified by the URL . Preferably, changes are reported by the Community Client  to the Community Server  using HTTP messages . Other protocols such as FTP, IRC, etc. may be used as well. The Community Server  responds to the Community Client , via a HTTP message , with notifications. Consequently, the persistent connection between the Community Server  and Community Client  may be accomplished using extensions to a stateless connection technology (e.g., increasing a time-out value on a HTTP connection.) Additional transparent communication thus takes place between the Community Client  and Community Server  to track the user's Web interaction and determine a context for the user's interactions while the user interacts with the Web browser in accordance with a series of stateless transactions in which the user changes Web pages based on changes to the current URL . In addition to HTTP, other protocols such as FTP, IRC, etc. may be used depending on what is to be displayed or what interactions are to occur.","Each community supported by the present invention may provide \u201ccapabilities.\u201d The actions that may be performed within a community are the communities capabilities. Capabilities represent a variety of interaction methods or options. Primary or core capabilities may include a \u201cCommunity Centre\u201d (or Home Page which introduces the user to the community), \u201cCreate or View Comments\u201d (e.g., annotations such as threaded messages, documents, spreadsheets, etc. for a particular community), \u201cWho's Online\u201d (a list of members currently in the community), \u201cChat\u201d (real time interactions with other community members), \u201cInvitations\u201d (messages from one community member to another to chat, play a game, etc.), \u201cHelp\u201d (instructions on how to perform a particular task, for example), \u201cNotices and Personal Messages\u201d (e.g., email), \u201cInternet Features\u201d (e.g., CUCME, Internet Phone), \u201cGames\u201d (e.g., DOOM, Quake, Flight Simulator). Special capabilities may also be developed for a community.","Users may be introduced to or notified of capabilities via \u201cnotifications.\u201d Notifications are associated with communities and indicate or reference additional information or content (i.e., Community Content) as well as interaction options or methods that may be of interest to the user. As the user continues to browse or \u201csurf\u201d the Web, notifications may be sent to the Community Client  from the Community Server  to let the user know what additional community capabilities or features are available for the current Web page or URL. For example, for a given URL, notifications may be sent to indicate a series of annotations exist for this page, additional community members are also at this page, and\/or a real-time chat is in progress between several community members. Notifications may be viewed as temporary listings as they are determined at the time of access to the URL to reflect the current state of the community. Notifications may also be comprised of specific on-line content such as current stock quotes that the user has requested to receive at specified intervals (e.g., once a day.)","Annotations\u2014which are one type of capability of the present invention\u2014may be viewed as \u201cnotes\u201d regarding related information service content that are associated with or linked to a particular Web page as identified by a URL. The notes may be comprised of a list of subject or topic related headings (i.e., forum message threads) that a user may peruse, a list of threaded messages relating to a particular subject or topic heading, or the contents of a particular message. Notes may also include library or archive files related to the general subject matter or topic of messages. When the user navigates to a Web page, as identified by a URL and for which annotations are available, a Web page containing the annotations is presented on request to the user to allow the user to review or access the annotations.","Referring again to , the Threaded Message Server  is used to create and retrieve threaded message type annotations that are associated with specific URLs. As community members interact with one another via message boards, the messages they submit are organized and stored by this component  for later retrieval based on a particular URL. When another user (or the same user) later provides the same URL, the annotations (or threaded messages) associated with the URL may be retrieved by the Threaded Message Server  and presented to the user. Depending on the actions of the user, a list of threaded messages, a list of messages within a thread, or an actual message may be presented to the user. Access to related library or archive files may also be provided.","In a preferred embodiment of the present invention, the Threaded Message Server  runs as an extension to a server that performs Remote Passphrase Authentication so that access to a community is through a secure means. The Community Server  interacts with the URL database  to determine whether annotations are available for a particular URL (i.e., the URL just selected by the user). If the URL database  indicates annotations are available, the Community Server  interacts with the Threaded Message database  (preferably, via a POET interface to the Threaded Message Server ) to locate the messages. Preferably, the URL database is organized according to communities and contains maps (e.g., by referencing or pointing to a file) to on-line service content associated with a URL (or a series of URLs).","The Community Server  also interacts with a Membership database  to determine if a user belongs to the community associated with the URL. If it is determined a user belongs to a community, the user is given the opportunity to enter the community (e.g., select a control button or icon that represents the community). The user may then access a home page for the community, view community comments (e.g., view the annotations of the community associated with the URL), search community comments, and create or reply to community comments. A member of a community may also interact and communicate with other community members who have similar interests or shared circumstances by initiating synchronous communications such as chat or conferencing.","To become a member of a community, a user affirmatively requests access to a membership module which, in a preferred embodiment of the preset invention, is a stand-alone process that may be initiated from any one of a number of sources including a Web site, a Community Client, on-line service sign-up process, etc. During the membership process, information about the user (e.g., preferences and profile data such as name, address, age, billing information, interests and hobbies, favorite Web sites, etc.) is collected and stored in the Membership database . Because users complete the membership process for each community they wish to join, they may have a different profile for every community to which they belong. Users may also cancel community memberships resulting in deletion of the specific preference and profile data from the community membership database. In some cases, a user may become a member of a community automatically (i.e., without affirmatively initiating the membership process) as some communities may be open to all on-line service users or possibly, all Web users.","In a preferred embodiment of the present invention, the Community Server  communicates with a Tracking Server  via a TCP\/IP connection  to determine the contents of notifications to be sent. Notifications include information regarding the presence of members within a community at a given time and information regarding chat sessions currently in progress. This dynamic information preferably, is, tracked so that notifications accurately reflecting the state of a community may be sent quickly to the user who has just entered the community by specifying an associated URL. The Tracking Server  thus logs in a tracking database  accessible via an OBDC interface  information regarding the activities of users served by the Community Server . Activities that may be tracked include Web pages accessed, messages posted to the message board, and chat rooms created or entered. The Tracking Server  monitors user actions so that users who share similar interests may learn of one another and communicate with one another through a variety of options (e.g., engaging in real-time chat sessions or viewing threaded messages submitted by community members). In addition, data about user actions may be aggregated and reported to community members (e.g., results of voting on a particular issue).","In a preferred embodiment of the present invention, a session between a Community Server and a Community Client is managed by primarily two objects\u2014a Session object and a Community object. The Session object controls communications sessions with the Community Server. It maintains a list of communities to which the users belongs so that access to communities may be provided as the user navigates the Web. In the event the user requests access to community content or community interactions, the Session object establishes a Community object that manages interactions with a specific Community server. The Community server, in turn, is responsible for managing interactions with the community associated with the Web page. Preferably, each community is identified by a text name and an identification number and has an associated port number through which a connection may be established to a Community server. Preferably, each interaction between a Community Client and a Community Server is identified by a \u201cCapability Id\u201d number. These numbers represent specific features, functions, or community capabilities that may be offered to the user. Primary or core capabilities may include a \u201cCommunity Centre\u201d (or Home Page which introduces the user to the community), \u201cCreate or View Comments\u201d (e.g., annotations for a particular community), \u201cWho's Online\u201d (a list of members currently in the community), \u201cChat\u201d (real time interactions with other community members) and \u201cInvitations\u201d (messages from one community member to another to chat, play a game, etc.). Special capabilities may also be developed for a community.","Each capability may be comprised of one or more functions. For example, a \u201ccomments capability\u201d that provides the ability to annotate or attach comments to a Web site may support functions such as notification (change attribute of screen to notify user comments for the current Web page are available), messaging (view list of topics associated with a Web page, view list of topics created in a community, read messages within a topic, reply to a message, etc.), and chat (view list of associated public chat rooms, enter into private and public chat sessions). A membership capability may include functions that support listing (list of members currently participating in a community), profile (access member profile data), modify (personal profile data), and search (community membership), etc.","Referring to , a diagrammatic representation of the Community Client components for a preferred embodiment of the present invention is shown. In one embodiment of the present invention, the Community Client is operative in the Microsoft\u00ae Windows\u00ae operating system environment. In a preferred embodiment of the present invention, a user of the present invention interacts with the Community Server via the Community Client. The Community Client, which may be resident on the user's computer and appear as a toolbar, is responsible for both the user's on-line experience and his or her connection with the Community Server. Preferably, this component does not rely on a propriety interface to the Web. Rather it operates as an extension to a commercially available browser such as Spry's Mosaic, NetScape's Navigator, or Microsoft's Internet Explorer. The Browser Independence Manager  abstracts the browser's programmable interface so that multiple browsers may be supported. The Community Session Manager  handles communication with the Community Server based on requests from the Web browser. Community content is retrieved and then passed to the Community Content Viewer . The Toolbar and Capabilities Manager  is responsible for creating and managing the Community \u201cToolbar\u201d that appears on the user's screen. From the user's point of view, the toolbar is the user interface for controlling the Community. The Toolbar and Capabilities Manager  may also interface to one or more Capability Handlers  that support the community's capabilities or interaction options. The Toolbar and Capabilities Manager  interacts with the Capability Handler(s)  so that toolbar controls for various capabilities are made available to the user. Preferably, a Capability Handler  manages multiple capabilities. A Capability Handler  may also arrange to have additional controls (as part of the toolbar or in a separate window\/area of the screen) presented to a user to further facilitate a user's interactions with community content and other community members.","Communications between the various components that comprise the Community Client , , , , ,  may be accomplished using several mechanisms. For example, well-known interprocess communication mechanisms such as Microsoft's Windows\u00ae Dynamic Data Exchange (DDE)  or Object Linking and Embedding (OLE) formats may be used. Using DDE, programs running on the same computer (e.g., Web browser and Community Client) may exchange data with each other while they are running. Alternatively, the OLE format may be used such that the information processed by the different applications may be combined or communicated among the applications. Communications between the Community Session Manager  and Community Server may be accomplished using a TCP\/IP connection . It is noted that a lesser or greater number of components may be developed to accomplish the same features and functionality of the Community Client. Furthermore, other arrangements of similar components and other interprocess communication mechanisms may be used to accomplish the same features and functionality of the Community Client.","Referring to , a diagrammatic representation of the Community Server  architecture for a preferred embodiment of the present invention is shown. The Community Server  acts as a dispatcher and gatekeeper to the additional back-end servers that provide the features and functionality of the present invention. It provides a secure entry point for the Community Client  and mediates all transactions between the Community Client (and Web browser) and the servers. Preferably, the Community Server  relies on asynchronous I\/O, (e.g., via HTTP or some other protocol such as FTP or IRC over a TCP\/IP connection ) with the Community Client .","In a preferred embodiment, the Community Server  may be comprised of several threads. The Service Control Thread  performs service initialization, shutdown, and serves as a central repository for global configuration information. The TCP\/IP Listener Thread  listens on TCP\/IP port  for inbound client connections. When a client connects to the service, this thread creates a client connection object that is passed to a Connection Worker Thread for processing.","Pseudo code for the main processing loop may be as follows:\n\n","Three additional classes of worker thread pools  may perform the majority of the server's work. The first worker thread pool is the Connection Worker Thread Pool. Typically, there are two of these threads for each processor on the host machine.","Pseudo code for the main processing loop may be as follows:\n\n","The second worker thread pool is the ODBC Connection Thread Pool. A pool of threads may be created at server startup time, each of which establish a persistent ODBC connection with a community database. Depending on load, the server may also create additional ODBC threads as needed. When a connection object needs to access an ODBC datasource, it may take control of one of these pooled threads and make its database queries in its own dedicated thread.","The third worker thread pool is the Asynchronous I\/O Thread Pool. This thread pool is similar to the ODBC Connection Thread Pool in that the threads may be started when the service is initialized. Their main purpose is to allow connection objects to perform synchronous I\/O operations (e.g., connecting to the tracking server, performing a synchronous write down a socket, etc.) which may block in a thread so that the main worker threads may continue processing while this blocking I\/O occurs.","This Active Session List  contains the context of all users currently logged into a particular community server. The user's membership information may be cached here as well as some other maintenance information.","The Active Connection List  is a list of all active connections with the Community Server (but not active sessions). This list may be used by the Garbage Collection thread  to purge stale connections (e.g., connections waiting for outstanding asynchronous I\/O events from a client that may have gone away). A connection is a client establishing a TCP\/IP connection with the Community Server, making a request (e.g., login, get URL information, vote, create message, etc.), and receiving a reply. A session is the group of connections that apply to a single user from the initial login request to the logout request. The tracking server may also establish connections that are kept on this list.","This Tracking Server Log  thread is dedicated to one-way communication between the Community Server and the Tracking Server. All tracking server transactions that do not require a reply (e.g., those that are used for statistics purposes) are sent to the Tracking Server from a dedicated connection.","The Tracking Server Listener Thread  is similar to the TCP\/IP Listener Thread , except that this listener accepts connections from a Tracking Server (on a different TCP\/IP port than client connections come in on). Pseudo code for the main processing loop may be as follows:\n\n","The Garbage Collection Thread  looks for connections and sessions that have not been active for some configurable period of time. If they have expired, this thread purges them from the service. This function alleviates memory creep as the service runs for long periods of time (perhaps, weeks).","The Statistics Log Thread  may track information regarding activity on the server such as how many accesses have been attempted, the length of time users are connected to the Community Server, etc.","A series of transactions between the Community Client and the Community Server take place to accomplish the features and functionality of the present invention. Transactions may be generally in two distinct classes: requests (e.g., Crequest) and responses (e.g., CResponse.) Transactions take place over a persistent virtual connection between the two components. Asynchronous requests may thus be sent between the components, for example, using HTTP, FTP, IRC, etc.","Preferably, the Community Client and Community Server perform all communications across a TCP\/IP connection established on port . A class (e.g., CSession) is created to handle all client-server protocol negotiation. The client application then handles the contents of predefined CRequest and CResponse classes passed between client and the server.","A client establishes a login session, by sending a login request to the server. Once authenticated (using a RPA enabled Server), the user session may be established and a virtual connection maintained between the client and server. This virtual connection serves as the mechanism by which the server sends asynchronous messages to the client (e.g., via HTTP, FTP, IRC). An example may be a Chat invitation from one user to another community member.","Subsequent requests made by the client of the server may be conducted on a separate connection such as a Windows socket connection. This connection may be established and taken down transparently to the client application (e.g., embedded in the CSession class member functions). This subsequent connection may be authenticated by the server using Remote Passphrase Authentication mechanisms.","Login Transaction","Preferably, there are 4 steps in the login transaction:","Login Request (client to server)","Authentication Challenge (server to client)","Response to Challenge (client to server)","Login Response (server to client)","Preferably, the Client initiates the Login Request by sending the following HTTP request:","\u201cCSI-Community-Session\/<version> Login HTTP\/1.0<crlf>\u201d","The Community Server responds with an extended HTTP response code of 901 along with a RPA WWW-Authenticate response header. The connection is maintained by both the client and server at this point as the server awaits the clients response to the RPA challenge.","The client sends a Login Packet of the following format:",{"@attributes":{"id":"p-0073","num":"0089"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"119pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"Field Name","# ytes","DESCRIPTION"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Version ID","4","Version identifier of the packet"]},{"entry":[{},"Packet","4","Length of Login Packet in bytes"]},{"entry":[{},"Length"]},{"entry":[{},"Login","varies","Serialized MFC Cobject derived class"]},{"entry":[{},"Packet",{},"containing:"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"DWORD","Request Type Code"]},{"entry":[{},"DWORD","Transaction Version Id"]},{"entry":[{},"CString","RPA Authorization"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Cheating Header"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},"If authenticated, the server responds with a Login Response packet.",{"@attributes":{"id":"p-0075","num":"0091"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"119pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"Field Name","# Bytes","DESCRIPTION"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Version ID","4","Version identifier of the packet"]},{"entry":[{},"Packet","4","Length of Login Packet in bytes"]},{"entry":[{},"Length"]},{"entry":[{},"Login","varies","Serialized MFC Cobject derived class"]},{"entry":[{},"Response",{},"containing:"]},{"entry":[{},"Packet"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"DWORD","Response type Code"]},{"entry":[{},"DWORD","Version ID"]},{"entry":[{},"CString","RPA security context"]},{"entry":[{},"CString","RPA session key"]},{"entry":[{},"CString","RPA response"]},{"entry":[{},"CString","User Name"]},{"entry":[{},"CString","User Name Realm"]},{"entry":[{},"DWORD","Base Community ID"]},{"entry":[{},"CobArray","Array of N member info"]},{"entry":[{},"objects"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Member Info Object structure"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"DWORD","Community ID"]},{"entry":[{},"CString","CommunityName"]},{"entry":[{},"CString","Community Homepage"]},{"entry":[{},{},"URL"]},{"entry":[{},"Cstring","User Alias"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(screen name)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"DWORD","Flags"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"There are 2 steps in the client request protocol:","1. Request (client to server)","2. Response (server to client)","The client initiates the Login Request by sending the following HTTP request.","CSI-Community-Session\/<version> Request HTTP\/1.0 <crlf>","Content-Length: <length of request packet> <crlf>","<crlf>","<request transaction>","The format of a request transaction may be as follows:",{"@attributes":{"id":"p-0085","num":"0101"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"119pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"Field Name","# Bytes","DESCRIPTION"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Version ID","4","Version identifier of the packet"]},{"entry":[{},"Packet","4","Length of Request Packet in hytes"]},{"entry":[{},"Length"]},{"entry":[{},"Request","varies","Serialized MFC Cobject derived class"]},{"entry":[{},"Packet",{},"containing:"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"DWORD","Request Type Code"]},{"entry":[{},"DWORD","Transaction Version Id"]},{"entry":[{},"CString","RPA Authorization"]},{"entry":[{},{},"Cheating Header"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<varies depending on packet type>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The following table contains of the various request types.",{"@attributes":{"id":"p-0087","num":"0103"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"119pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":[{},{},"Direction",{}]},{"entry":["Request",{},"C - Client"]},{"entry":["Type","Code","S - Server","Contents"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Error","0","C   S","DWORD Error Code.Win32 or"]},{"entry":[{},{},{},"WINSOCK error code"]},{"entry":[{},{},{},"CString Descriptive error message"]},{"entry":["Login","1","C   S","N\/A See Login protocol"]},{"entry":["Logout","2","S   C","N\/A Client informs server that user"]},{"entry":[{},{},{},"is logging off."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"70pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Get URL","3","C   S","CString","URL"]},{"entry":["Info",{},{},"CDWordArray","Array of community"]},{"entry":[{},{},{},{},"IDs the client is"]},{"entry":[{},{},{},{},"querying the server"]},{"entry":[{},{},{},{},"about for this URL"]},{"entry":["Invite","4","C   S","CString","User Name of member"]},{"entry":[{},{},"- or -",{},"initiating the invitation"]},{"entry":[{},{},"S   C","CString","Invitation type"]},{"entry":[{},{},{},"DWORD","IP Address of server"]},{"entry":[{},{},{},{},"handling the invitation"]},{"entry":[{},{},{},{},"(a chat server,"]},{"entry":[{},{},{},{},"for example)."]},{"entry":[{},{},{},{},"Unused when sent"]},{"entry":[{},{},{},{},"from client to"]},{"entry":[{},{},{},{},"server."]},{"entry":[{},{},{},"DWORD","Port of server"]},{"entry":[{},{},{},{},"handling the invitation,"]},{"entry":[{},{},{},{},"Unused when sent"]},{"entry":[{},{},{},{},"from client to"]},{"entry":[{},{},{},{},"server."]},{"entry":[{},{},{},"CString","Channel"]},{"entry":[{},{},{},{},"Unused when sent"]},{"entry":[{},{},{},{},"from client to"]},{"entry":[{},{},{},{},"server."]},{"entry":[{},{},{},"DWORD","Context. Opaque item"]},{"entry":[{},{},{},{},"to be sent back to"]},{"entry":[{},{},{},{},"Community server in"]},{"entry":[{},{},{},{},"the client response"]},{"entry":[{},{},{},{},"to this request."]},{"entry":["Invite","5","C   S","CString","User Name of member"]},{"entry":["Reply",{},{},{},"initiating the invitation"]},{"entry":[{},{},{},"CString","Invitation type"]},{"entry":[{},{},{},"DWORD","Context. Opaque item"]},{"entry":[{},{},{},{},"obtained from the"]},{"entry":[{},{},{},{},"invitation request"]},{"entry":[{},{},{},{},"received from the"]},{"entry":[{},{},{},{},"server."]},{"entry":["Create New","6","C   S","CString","URL to associate with"]},{"entry":["Message",{},{},{},"new threaded message."]},{"entry":[{},{},{},"DWORD","Community ID to"]},{"entry":[{},{},{},{},"associate with"]},{"entry":[{},{},{},{},"threaded message."]},{"entry":["Membership","7","C   S","DWORD","Unused. If the server"]},{"entry":["Search",{},{},{},"receives this requests,"]},{"entry":[{},{},{},{},"it performs a"]},{"entry":[{},{},{},{},"\u201cWho is Here\u201d search."]},{"entry":[{},{},{},{},"(i.e., it returns a list of"]},{"entry":[{},{},{},{},"all users currently"]},{"entry":[{},{},{},{},"logged into the"]},{"entry":[{},{},{},{},"community.)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Vote","8","C   S","CString URL being voted for."]},{"entry":["Timeout","9","S   C","Server is informing the client that"]},{"entry":[{},{},{},"the session has timed out."]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"HTTP\/1.0 200 OK <crlf>","<optional HTTP response headers>","<crlf>","<response transaction>","-or-","HTTP\/1.0 401 Unauthorized <crlf>","<optional HTTP response headers>","<crlf>","-or-","HTTP\/1.0<http response code> <http reason> <crlf>","<optional HTTP response headers>","<crlf>","In 401 Unauthorized case, the user's login session context times out and the client performs the login sequence again. This reauthentication may be done transparently to the user.","If a non-401 or 200 HTTP status code is encountered, some error occurred on the server side. The standard HTTP response code gives an indication of what the problem is.","The format of a success response transaction may be as follows:",{"@attributes":{"id":"p-0103","num":"0119"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"119pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"Field Name","# Bytes","DESCRIPTION"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Version ID","4","Version identifier of the packet"]},{"entry":[{},"Packet","4","Length of Packet in bytes"]},{"entry":[{},"Length"]},{"entry":[{},"Response","varies","Serialized MFC Cobject derived class"]},{"entry":[{},"Packet",{},"containing:"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"DWORD","Response type Code"]},{"entry":[{},"DWORD","Version ID"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Varies depending on response type>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The following table describes the various response types. All are sent from server to client.",{"@attributes":{"id":"p-0105","num":"0121"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"154pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Response",{},{}]},{"entry":["Type","Code","Contents"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Error","0","DWORD","Error Code. Win32 or WINSOCK"]},{"entry":[{},{},{},"error code"]},{"entry":[{},{},"CString","Descriptive error message."]},{"entry":["OK","1","N\/A","Generic \u201csuccess\u201d response"]},{"entry":["Login","2","N\/A","See login protocol."]},{"entry":["Get URL","3","CString","URL"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["Info","CObArray","Array (0 or more) of the following:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},"DWORD","Community ID"]},{"entry":[{},{},"CString","URL to get to threaded message"]},{"entry":[{},{},{},"for this URL"]},{"entry":[{},{},"DWORD","Flags"]},{"entry":["Invite","4","CString","User Name of member invited"]},{"entry":[{},{},"CString","Invitation type"]},{"entry":[{},{},"BOOL","If non-zero, the user accepted"]},{"entry":[{},{},{},"the invitation."]},{"entry":[{},{},"DWORD","IP Address of server handling"]},{"entry":[{},{},{},"the invitation (a chat server,"]},{"entry":[{},{},{},"for example)."]},{"entry":[{},{},"DWORD","Port of server handling the"]},{"entry":[{},{},{},"invitation"]},{"entry":[{},{},"CString","Channel (may be blank)"]},{"entry":["Create New","5","CString","URL to follow to create"]},{"entry":["Message",{},{},"new threaded message."]},{"entry":["Membership","6","CStringArray","Array of user names of all users"]},{"entry":["Search",{},{},"matching search criteria."]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},"There are 2 steps in the Server Request Transaction:","1. Request (client to server)","2. Response (server to client)","The server makes asynchronous requests of the client. The request type sent by the server to the client is an invitation request.",{"@attributes":{"id":"p-0110","num":"0126"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"119pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"Field Name","# Bytes","DESCRIPTION"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Version ID","4","Version identifier of the packet"]},{"entry":[{},"Packet","4","Length of Request Packet in bytes"]},{"entry":[{},"Length"]},{"entry":[{},"Request","varies","Serialized MFC CObject derived class"]},{"entry":[{},"Packet",{},"containing:"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"DWORD","Request Type Code"]},{"entry":[{},"DWORD","Transaction Version ID"]},{"entry":[{},"CString","User Name of member"]},{"entry":[{},{},"initiating the invitation"]},{"entry":[{},"CString","Invitation type"]},{"entry":[{},"DWORD","IP Address of server"]},{"entry":[{},{},"handling the invitation"]},{"entry":[{},{},"(a chat, server"]},{"entry":[{},{},"for example)."]},{"entry":[{},"DWORD","Port of server handling"]},{"entry":[{},{},"the invitation"]},{"entry":[{},"CString","Channel (may be blank)"]},{"entry":[{},"DWORD","Context. Opaque item to"]},{"entry":[{},{},"be sent back to the"]},{"entry":[{},{},"Community server in the"]},{"entry":[{},{},"client response to this"]},{"entry":[{},{},"request."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"Referring to , a diagrammatic representation of a Tracking Server  architecture for a preferred embodiment of the present invention is shown. The Tracking Server  logs the activities of users served by the Community Server. As users change URLs, post community messages, join and leave chat sessions, etc., these actions are reported by the Community Clients running on their computers to the Community Server . This information may then be reported by the Community Server  to the Tracking Server  via a TCP\/IP connection  to a Read Tracking Event Thread pool . The Tracking Server  then receives the information from the threads in the pool via an I\/O Completion Port . The Tracking Server  modifies the information (e.g., by stripping a user identifier that may be associated with the action) and records it in a SQL Tracking Database  via an I\/O Completion Port  connection to a Write Tracking Event Thread pool . The Tracking Server also maintains a list of current users in a Memory Mapped File  that may be interrogated by the Community Server  on behalf of a client. Tracking may be used in the following examples:\n\n","All transactions sent to the Community Server  may be filtered in one way or another through the Tracking Server(s) .","Communications between the Community Server  and the Tracking Server  are based on a request\/response protocol layered on TCP\/IP . Requests and responses are serialized objects of a type derived from a object (e.g., identified as CTrackTransaction.)","The Community Server  opens an asynchronous TCP\/IP connection  to the Tracking Server  upon startup. If the connection is lost or the Tracking Server  is not running, the Community Server  may attempt to reestablish a connection periodically.","In the event of an invitation request, a separate asynchronous TCP\/IP connection may be made to the Community Server where the user is logged in that receives the invitation. After either accepting or declining the invitation, the Tracking Server uses the existing connection to the original Community Server to let the inviter know what happened.","As shown in , the Tracking Server  may be implemented as a multi-threaded server  listening for asynchronous connections on a specified port (i.e., I\/O Completion Port) . Two thread pools exist to work on incoming data: a connection pool and an ODBC pool.","The Connection Worker threads dispatch incoming data to the appropriate ODBC thread. Each ODBC worker thread, upon initialization, opens an ODBC connection to a SQL server.","The Community Server and Tracking Server may communicate via the following transactions.",{"@attributes":{"id":"p-0119","num":"0140"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":[{},{},"Direction"]},{"entry":[{},{},"(CS -"]},{"entry":[{},{},"Community"]},{"entry":[{},{},"Server)"]},{"entry":[{},{},"(TS -"]},{"entry":["Transaction Type",{},"Tracking"]},{"entry":["(Class Name)","Description","Server)"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["CsetupTrack","Server to server communication","CS   TS"]},{"entry":["CloginTrack","User logged into Community","CS   TS"]},{"entry":["ClogoutTrack","User left Community, either by","CS   TS"]},{"entry":[{},"logout or time-out"]},{"entry":["CcreateMsgThreadTrack","User created a message section","CS   TS"]},{"entry":["CGetAnnotationTrack","User obtained an annotation","CS   TS"]},{"entry":["CWhoIsHereTrackReq","User requests a list of other","CS   TS"]},{"entry":[{},"logged in members"]},{"entry":["CWhoIsHereTrackRsp","List of logged in members","TS   CS"]},{"entry":["CURLInfoTrack","User went to a new page","CS   TS"]},{"entry":["CinviteTrackReq","User extends an invitation to","CS   TS"]},{"entry":[{},"chat to another user"]},{"entry":["CinviteTrackRsp","Invited user accepts or declines","TS   CS"]},{"entry":[{},"chat invitation"]},{"entry":["CinviteTrackReq","Tracking server interrogates","TS   CS"]},{"entry":["(special context)","community server"]},{"entry":["CinviteTrackRsp","Community server returns","CS   TS"]},{"entry":["(special context)","invited user's response"]},{"entry":["CvoteURLTrack","User voted","CS   TS"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"Preferably, transactions carry the following data (type): user Id (string), community Id (number), server Id (number), transaction type, also called request code (number), and version (number). Because transactions are serialized objects, the transaction may include the name of the type of the transaction and a schema version number. The bytes of the serialized object are preceded by 8 bytes: 4 (representing a 32 bit number, in network byte order) that identify the version of the packet, and 4 (also representing a 32 bit number, in network byte order) that specify the number of bytes that follow.","Transactions may convey additional data appropriate to the type of transaction. The additional data may be appended to the transaction in the order specified in the table. Note that strings (e.g., designated CString) may be a single byte count of characters followed by exactly that many characters with no null terminating byte. Numbers are LSB first. Boolean type is a 32 bit number with a value of either 0 or 1.",{"@attributes":{"id":"p-0122","num":"0143"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Transaction Type","Transaction Specific Data"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["CSetupTrack","persistence flag (Boolean)"]},{"entry":["CLoginTrack","URL (Cstring)"]},{"entry":["CLogoutTrack","none"]},{"entry":["CCreateMsgThreadTrack","URL (Cstring)"]},{"entry":["CGetAnnotationTrack","URL (Cstring)"]},{"entry":["CWhoIsHereTrackReq","none"]},{"entry":["CWhoIsHereTrackRsp","list of user Ids (number)"]},{"entry":[{},"(CString) (CString) (CString) . . ."]},{"entry":["CURLInfoTrack","URL (Cstring)"]},{"entry":["CInviteTrackReq","user Id of invitee (CString),"]},{"entry":[{},"type of interaction: chat, game, etc."]},{"entry":[{},"(CString), IP address of server hosting"]},{"entry":[{},"inviting user (number) and port of"]},{"entry":[{},"server hosting inviting user (number)"]},{"entry":["CInviteTrackRsp","acceptance flag (Boolean), reason code"]},{"entry":[{},"(number), IP address of server hosting"]},{"entry":[{},"invitee (number) and port of server"]},{"entry":[{},"hosting invitee (number)"]},{"entry":["CVoteURLTrack","name of item or URL (CString),"]},{"entry":[{},"score (number)"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"For example, the CWhoIsHereTrackReq transaction may trigger a CWhoIsHereTrackRsp reply, and a CInviteTrackReq transaction may trigger a CInviteTrackRsp reply. Preferably, the reply packets are returned via the same connection that delivers tracking transactions to the Tracking or Voting Servers.","Invitation processing is special compared to the other transactions. For example, the CInviteTrackReq transaction causes the Tracking Server to open a connection to a second Community Server (which may be the same Community Server that initiated the invitation) and emit a CInviteTrackReq transaction, to inquire of the Community Server whether a particular user (the invitee) is still logged in. When the Community Server returns a yes or no CInviteTrackRsp transaction, the Tracking Server disconnects, and returns a CInviteTrackRsp transaction to the originally requesting Community Server.","The CSetupTrack transaction is sent by the Community Server to the Tracking Server when the Community Server connects to the Tracking Server. The persistence flag indicates whether the Community Server expects the connection to remain open for more than one transaction. This scheme permits the Community Server to occasionally connect to the Tracking Server for a single query.","Every transaction may be recorded in the tracking table of the tracking database using the base information (e.g., user id, community id, server id, and request code), and the corresponding URL, if available. For example, CLoginTrack and CLogoutTrack transactions may cause the addition or removal of user id information from a \u201cWho is Here\u201d list which is kept in memory. Finally, the CInviteTrackReq transaction queries the \u201cWho is Here\u201d list while the CWhoIsHereTrackReq transaction returns the entire list.","In a preferred embodiment in which voting is supported, the CVoteURLTrack transaction may cause the community id, the item string, and the score to be inserted into or updated in the vote table and the vote count to be incremented. The value of the score is added to the score (initially zero) for the particular community id and issue combination.",{"@attributes":{"id":"p-0128","num":"0149"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Transaction Type","Description","Destination"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["CSetupTrack","Server to server","none"]},{"entry":[{},"communication"]},{"entry":["CLoginTrack","User logged into","tracking"]},{"entry":[{},"Community"]},{"entry":["CLogoutTrack","User left Community,","tracking"]},{"entry":[{},"either by logout or"]},{"entry":[{},"time-out"]},{"entry":["CCreateMsgThreadTrack","User created a","tracking"]},{"entry":[{},"message section"]},{"entry":["CGetAnnotationTrack","User obtained an","tracking"]},{"entry":[{},"annotation"]},{"entry":["CWhoIsHereTrackReq","User requests a list of","tracking, fetches"]},{"entry":[{},"other logged members","\u201cWho Is Here\u201d list"]},{"entry":["CWhoIsHereTrackRsp","List of logged in","returns"]},{"entry":[{},"members","\u201cWho Is Here\u201d list"]},{"entry":["CURLInfoTrack","User went to a new page","tracking"]},{"entry":["CInviteTrackReq","User extends to another","tracking, queries"]},{"entry":[{},"user an invitation to chat","\u201cWho Is Here\u201d list"]},{"entry":["CInviteTrackRsp","Invited user accepts or","returns found or"]},{"entry":[{},"declines chat invitation","not found"]},{"entry":["CVoteURLTrack","User voted","tracking, vote"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}},"br":{}},"Preferably, the Tracking Server connects to a SQL server via the ODBC application programming interface. The datasource that the Tracking Server connects to may be determined at startup. Multiple ODBC (over TCP\/IP or NetBeui protocols) connections are made to a SQL server (one per ODBC worker thread) upon initialization and maintained throughout the life of each thread. All tracking transactions execute prepared ODBC-SQL statements to log the transaction.","Referring to , a diagrammatic representation of the Threaded Message Server  is shown. The Threaded Message Server  is used to create and retrieve member threaded message annotations created on specific URL's (i.e., Web pages.) The threaded message annotations may be stored in a Threaded Message Database  accessible via a POET interface . In a preferred embodiment, the Threaded Message Server  runs as an extension to a Remote Passphrase Authentication (RPA) enabled Server  (with a TCP\/IP connection to a Remote Passphrase Authentication Deity  that performs authentication via an OBDC connection  to a membership database ) to ensure that is accessed through a secure means. Preferably, the Threaded Message Server  is not required on a per community basis, but rather acts as a global resource and is shared between communities.","Preferably, the Threaded Message Server  receives notifications from the RPA enabled Server  via the Community Client rather than the Community Server. A Binary Gateway Interface  facilitates communication between the RPA enabled Server  and Threaded Message Server . For example, a Threaded Message Server Dynamic Link Library (TMS.DLL) may run as an extension to a RPA enabled Server. The RPA enabled Server may communicate with TMS.DLL through a combination of the HTTP GET and POST methods, depending on the nature of the requested transaction. TMS.DLL may then interact with the Threaded Message Server  through remote procedure calls (RPC) and the Community URL Database Server  through ODBC calls . Results of each transaction may be returned to the Web Server as dynamically created HTML pages.","GET Method","The following transactions may be requested through the use of the HTTP GET method:","PrintSectionThreads","PrintThreadMessages","PrintMessage","GenerateReplyPage","GenerateCreateMessagePage","PrintSectionThreads","This transaction prints a HTML page containing a list of threads in a given message base section. Each thread item printed is a hyper-link to the PrintThreadMessages transaction. Appropriate navigational controls are also be displayed. One of these controls may be a link to the GenerateCreateMessagePage transaction.","PrintThreadMessages","This transaction prints a HTML page containing a list of the messages in a given thread. Each message item printed is a hyper-link to the PrintMessage transaction. Appropriate navigational controls are also displayed.","PrintMessage","This transaction prints a HTML page displaying the contents of a message. Navigational controls are also displayed. One of these controls is a link to the GenerateReplyPage transaction.","GenerateReplyPage","This transaction prints a HTML page containing the form controls needed to create a reply to a message. The page also contains hidden controls needed to store state information that will be passed to the PostReply transaction via the POST command.","GenerateCreateMessagePage","This transaction prints a HTML page containing the form controls needed to create a message. The page also contains the hidden controls needed to store state information that may be passed to the PostCreateMessage transaction via the POST command.","POST Method","The following transactions are requested through the use of the HTTP POST method:","PostCreateMessage","PostReply","PostCreateMessage","This transaction uses the contents of the HTML form controls created by the GenerateCreateMessagePage transaction to create a new message. The data is sent via the HTTP POST method.","PostReply","This transaction uses the contents of the form controls created by the GenerateReplyPage transaction to create a reply to a message. The data is sent via the POST method.","Referring to , a screen shot of Web page , Community Client , and Community Web page  for a preferred embodiment of the present invention is shown. The Web page  associated with the URL  is displayed by the Web browser  (in this example, Microsoft's Internet Explorer) running on the user's computer. The Community Client  runs independently of the Web browser  and appears as a toolbar on the display. The toolbar of the Community Client comprises a plurality of custom control buttons. The control buttons are similar to menu commands (i.e., allow the user to perform actions), but are less obtrusive than menus and are always accessible. Each control button may provide a different type of community function. For example, one control button may allow a user to access threaded messages associated with the current URL. The messages may appear on a separate page (or window)  with additional control options for navigating the messages. For example, one or more control buttons on the message page may be used to move forward and backward in the message thread.","In another example, a \u201cCommunity Home Page\u201d button control on the Community Client toolbar may be available to transport the user directly to the home page of the community Web site. The home page may serve as a place where users may go to be in an environment specially designed for their interests. Another control button on the toolbar may invoke a start\/stop mechanism to enable users to start and stop the Community Client when it resides with another application such as a Web browser. Another control button may allow users to join or disassociate themselves with particular communities. Selection of certain control buttons may cause a supplemental client application (i.e., an application with an independent interface) to be invoked to facilitate certain interactions. For example, selection of a particular control button may initiate a chat session with other community members. The chat session may be initiated and managed through a separate (i.e., independent of the user's browser or Community Client) application that is invoked when the control button is selected and is stopped when the user decides to leave the session.","In a preferred embodiment of the present invention, the toolbar is extensible and dynamic so that a user may modify or tailor it to meet his or her needs or preferences. Users may extend the capabilities of the toolbar by creating new capabilities based on the primary or core capabilities provided by the present invention. As described earlier, the primary or core set of capabilities may include a Community Centre, Create or View comments, Who's Online, Chat, or Invitations. Other communities may have special capabilities in addition to the core capabilities. Using a scripting language, a user may extend the toolbar by creating a new option comprised of primary or core capabilities. For example, a user may create a \u201cGame\u201d capability comprised of the \u201cWho's Online\u201d capability and \u201cInvitation\u201d capability. When invoked from the toolbar, the Game capability may provide the user with a list of community users currently on-line and then invoke a game based on a another community member's acceptance of an invitation to play a game.","Display of community information is preferably controlled by a community viewer that provides a basic window frame in which community content displayed as well as support for additional administrative functions and capabilities. The community viewer arranges to display Community information in a single window or multiple windows depending on the amount and type of information displayed. Preferably, the information is represented by HTML pages identified by a URL. For example, annotations for a specific Web page, the list of members who are currently present in a community, and an annotation creation page may all be presented as different HTML pages associated with different URLs. In addition, capabilities such as accessing the community home page, viewing community comments, and joining communities may be supported by HTML pages and associated applications as identified by a URL.","The present invention provides a new system and method for integrating Web\/Internet and on-line service content and interactions to create a community. The present invention operates as an extension to a user's preferred Web browser so the user is not required to learn a new user interface to locate on-line service content or interact with other community members. On-line service content is delivered to the user in response to the URLs specified by the user as he or she browses the Web. In addition, opportunities for interacting with other community members are presented to the user. The user may change URLs and Web sites frequently while the present invention maintains a context\u2014via a persistent connection between a Community Server and a Community Client\u2014for the user's interactions so that on-line service content may be presented and interactions facilitated. The benefit of the present invention for end-users is a transformation of the Web to a much friendlier and valued place\u2014a community."],"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT(S)"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWING(S)","p":[{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 1A","FIG. 1B"]},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
