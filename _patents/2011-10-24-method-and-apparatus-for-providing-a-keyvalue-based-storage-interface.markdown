---
title: Method and apparatus for providing a key-value based storage interface
abstract: An approach is provided for implementing a virtual file system using a key-value-based storage interface. A key-value directory framework determines one or more files stored in at least one stream-based file store. The key-value directory framework causes, at least in part, a grouping of the one or more files into at least one key-value directory. The key-value directory includes, at least in part, one or more key-value pairs of a distributed key-value store. The key-value directory framework also causes, at least in part, a storage of (a) at least one identifier of the one or more files, the at least one key-value directory, or a combination thereof as one or more keys of the one or more key-value pairs; (b) block-based access information associated with the one or more files as one or more values of the key-value pairs; and (c) a locking mechanism to facilitate coordination of threads across multiple hosts.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08700683&OS=08700683&RS=08700683
owner: Nokia Corporation
number: 08700683
owner_city: Espoo
owner_country: FI
publication_date: 20111024
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SOME EXAMPLE EMBODIMENTS","DESCRIPTION OF SOME EMBODIMENTS"],"p":["Service providers and device manufacturers (e.g., wireless, cellular, etc.) are continually challenged to deliver value and convenience to consumers by, for example, providing compelling network services. Important differentiators in the industry are application and network services as well as capabilities to support and scale these services. In particular, these applications and services can include accessing and managing rapidly increasing amounts of data, while also ensuring high degrees of reliability and availability. Accordingly, service providers and device manufacturers face significant technical challenges to optimizing data storage and access across large distributed storage systems.","Therefore, there is a need for an approach for providing a key-value based storage interface (e.g., a virtual file system using a key-value store) for distributed data storage systems (e.g., stream-based file stores) to enhance scalability, data replication, load distribution, availability, and the like.","According to one embodiment, a method comprises determining one or more files stored in at least one stream-based file store. The method also comprises causing, at least in part, a grouping of the one or more files into at least one key-value directory. The key-value directory includes, at least in part, one or more key-value pairs of a distributed key-value store. The method further comprises causing, at least in part, a storage of (a) at least one identifier of the one or more files, the at least one key-value directory, or a combination thereof as one or more keys of the one or more key-value pairs; and (b) block-based access information associated with the one or more files as one or more values of the key-value pairs.","According to another embodiment, an apparatus comprising at least one processor, and at least one memory including computer program code for one or more programs, the at least one memory and the computer program code configured to, with the at least one processor, cause, at least in part, the apparatus to determine one or more files stored in at least one stream-based file store. The apparatus also causes, at least in part, a grouping of the one or more files into at least one key-value directory. The key-value directory includes, at least in part, one or more key-value pairs of a distributed key-value store. The apparatus further causes, at least in part, a storage of (a) at least one identifier of the one or more files, the at least one key-value directory, or a combination thereof as one or more keys of the one or more key-value pairs; and (b) block-based access information associated with the one or more files as one or more values of the key-value pairs.","According to another embodiment, a computer-readable storage medium carrying one or more sequences of one or more instructions which, when executed by one or more processors, cause, at least in part, an apparatus to determine one or more files stored in at least one stream-based file store. The apparatus also causes, at least in part, a grouping of the one or more files into at least one key-value directory. The key-value directory includes, at least in part, one or more key-value pairs of a distributed key-value store. The apparatus further causes, at least in part, a storage of (a) at least one identifier of the one or more files, the at least one key-value directory, or a combination thereof as one or more keys of the one or more key-value pairs; and (b) block-based access information associated with the one or more files as one or more values of the key-value pairs.","According to another embodiment, an apparatus comprises means for determining one or more files stored in at least one stream-based file store. The apparatus also comprises means for causing, at least in part, a grouping of the one or more files into at least one key-value directory. The key-value directory includes, at least in part, one or more key-value pairs of a distributed key-value store. The apparatus further comprises means for causing, at least in part, a storage of (a) at least one identifier of the one or more files, the at least one key-value directory, or a combination thereof as one or more keys of the one or more key-value pairs; and (b) block-based access information associated with the one or more files as one or more values of the key-value pairs.","In addition, for various example embodiments of the invention, the following is applicable: a method comprising facilitating a processing of and\/or processing (1) data and\/or (2) information and\/or (3) at least one signal, the (1) data and\/or (2) information and\/or (3) at least one signal based, at least in part, on (including derived at least in part from) any one or any combination of methods (or processes) disclosed in this application as relevant to any embodiment of the invention.","For various example embodiments of the invention, the following is also applicable: a method comprising facilitating access to at least one interface configured to allow access to at least one service, the at least one service configured to perform any one or any combination of network or service provider methods (or processes) disclosed in this application.","For various example embodiments of the invention, the following is also applicable: a method comprising facilitating creating and\/or facilitating modifying (1) at least one device user interface element and\/or (2) at least one device user interface functionality, the (1) at least one device user interface element and\/or (2) at least one device user interface functionality based, at least in part, on data and\/or information resulting from one or any combination of methods or processes disclosed in this application as relevant to any embodiment of the invention, and\/or at least one signal resulting from one or any combination of methods (or processes) disclosed in this application as relevant to any embodiment of the invention.","For various example embodiments of the invention, the following is also applicable: a method comprising creating and\/or modifying (1) at least one device user interface element and\/or (2) at least one device user interface functionality, the (1) at least one device user interface element and\/or (2) at least one device user interface functionality based at least in part on data and\/or information resulting from one or any combination of methods (or processes) disclosed in this application as relevant to any embodiment of the invention, and\/or at least one signal resulting from one or any combination of methods (or processes) disclosed in this application as relevant to any embodiment of the invention.","In various example embodiments, the methods (or processes) can be accomplished on the service provider side or on the mobile device side or in any shared way between service provider and mobile device with actions being performed on both sides.","For various example embodiments, the following is applicable: An apparatus comprising means for performing the method of any originally filed claim.","Still other aspects, features, and advantages of the invention are readily apparent from the following detailed description, simply by illustrating a number of particular embodiments and implementations, including the best mode contemplated for carrying out the invention. The invention is also capable of other and different embodiments, and its several details can be modified in various obvious respects, all without departing from the spirit and scope of the invention. Accordingly, the drawings and description are to be regarded as illustrative in nature, and not as restrictive.","Examples of a method, apparatus, and computer program for providing a key-value based storage interface are disclosed. In the following description, for the purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of the embodiments of the invention. It is apparent, however, to one skilled in the art that the embodiments of the invention may be practiced without these specific details or with an equivalent arrangement. In other instances, well-known structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the embodiments of the invention.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 1"},"One example of a distributed storage platform is a distributed key value store (e.g., a Voldemort-based key-value storage system as described at http:\/\/project-voldemort.com\/design.php, last accessed Oct. 23, 2011, which is incorporated herein in its entirety) which given a key returns as corresponding value. In one embodiment, key-value stores are an alternative data storage mechanism to traditional relational databases. By way of example, key-value stores provide schema free storage of data as a mapping of keys to underlying data values. This schema free property enables, for instance, key-value stores to store practically any type of data include stream-based storage of files whereby individual bytes or blocks of data can be stored in key-value pairs. In some embodiments, due to hashing, data storage and retrieval are typically very fast in key-value stores. Moreover, a distributed key-value store is a key-value storage system that writes each data point to multiple nodes to minimize read\/write time while protecting against data loss. By writing and reading from multiple nodes, distributed key-value stores can avoid waiting for any single read\/write to complete and mitigate against a slow or unavailable resource from slowing down or compromising the availability of the entire system. In some embodiments, the key value store can implement an Optimistic Concurrency Control (e.g., Zookeeper) mechanism to avoid concurrent updates to the same key.","At the same time, service providers have developed corresponding computing platforms capable of executing applications or other processes for efficiently processing the potentially vast quantities of data stored within such distributed storage platforms. In some embodiments, these computing platforms can provide for parallel or distributed computing across multiple computing nodes. By way of example, the distributed computing platform may operate using a parallel processing framework (e.g., an Apache Hadoop framework as described at http:\/\/hadoop.apache.org\/#What+Is+Hadoop%3F, last accessed Oct. 23, 2011, which is incorporated herein in its entirety) that supports execution of distributed applications for processing large databases via potentially thousands of computing nodes. Such a framework can be based on, for instance, a Map Reduce paradigm (e.g., as described at http:\/\/hadoop.apache.org\/mapreduce, last accessed Oct. 23, 2011, which is incorporated herein in its entirety) for parallel processing whereby a master node partitions a job or task among multiple subordinate computing nodes and then aggregates the results from the subordinate computing nodes to arrive at a \u201creduced\u201d result. For example, the subordinate computing nodes can then perform a \u201cmap\u201d function on their respective portions of the jobs to process an input and generate a result or output.","Within a context a combined system whereby a distributed computing or processing platform interacts with a distributed storage platform to process large amounts of data, it is often the case that large amounts of data are transferred from the storage platform for processing at the distributed computing platform. For example, such a system can include a full-text search system. In full-text search systems, performing keyword searches by individually scanning each of the documents or files can become prohibitively expensive (e.g., in terms of computational resources, bandwidth resources, etc.) as the number of files or documents becomes large. To solve this problem, most large-scale search systems build an inverted word index. This inverted word index maps terms from the corpus to individual documents containing each term, and optionally includes frequency counts, positions, etc. This index is built as new documents are added and is written to some form of permanent storage, usually a local disk. Search is then, for instance, performed against the pre-built index, instead of directly against the documents.","One implementation of such an index is Lucene, a popular Java implementation of an indexed full-text search system (e.g., as described at http:\/\/lucene.apache.org, last accessed Oct. 23, 2011, which is incorporated herein in its entirety). However, some of the biggest technical hurdles for Lucene-based indices are providing horizontal scalability and data replication to, for instance, distribute request load and protect against server failure. Moreover, because most Lucene-based systems are stored on local file systems, there often is a necessity for an independent process to manage copying data between different hosts or machines. Because any given search usually requires access to the entire index, this means that every server or host that needs to support search also needs to maintain an up-to-date copy of the index. Accordingly, service providers face significant challenges to reducing the resource burden associated with data-intensive applications implemented in distributed computing platforms and distributed storage platforms (e.g., an Apache Solr based system).","To address these problems, a system  of  introduces the capability to provide stream-based access to virtual files (e.g., files stored in a non-structured stream-based file store such as a distributed key-value store) with a virtual file system that is itself implemented in a key-value storage system (e.g., a distributed key-value storage system). By way of example, the key-value storage system of the virtual file system may be part of the same file store in which the virtual files are stored. In other embodiment, the two storage systems can be separate.","Various embodiments of the approach described herein are based on a Lucene directory implementation, and is used to drive indexing and searching content in Lucene via a \u201ckey-value directory.\u201d It is contemplated that the system  can also be used to provide a generic block-storage interface using a key-value store. In one embodiment, the key-value directory framework  implements a virtual file system in which a key-value directory includes an index of its content in the form of key-value pairs of distributed key-value store. For example, a key-value directory stores indices of files (e.g., stored in a distributed file store such as the cluster  of one or more store servers -) contained therein as keys corresponding to files as segmented into blocks for quick access. Because, of the scalability of key-value stores, the key-value directory framework  can support potentially millions, billions, or more of indices (e.g., with high privacy controls). The number of indices available to the key-value directory framework  is limited only by available system  resources and not by the architecture of the framework.","In some embodiments, key-value directory index files are broken up into smaller buckets or blocks to enable quick retrieval of individual sections without having to read the entire index file. In some embodiment, contents (e.g., files, subordinate directories, etc.) of the key-value directory are maintained in separate key-value pairs in the cluster . In some embodiments, the system  supports indexing and searching across multiple machines or hosts -(also collectively referred to as hosts ). Because the key-value directory data are stored remotely (e.g., in the key-value directory framework  and\/or the cluster ), the system  is completely horizontally scalable for searching. In other words, the system  relies on the distributed key-value store of the key-value directory framework  to provide fault-tolerance, replication, high availability, and high throughput. For example, application instances of the hosts  can run with stateful or stateless routing. Loss of a host simply means another host can receive file operation requests and perform the data reads, writes, etc. together with associated computes, before responding to clients. Although the system  can support use of intelligent routing of requests from applications (e.g., applications -) executing in the hosts , any instance of a particular application can pick up any request and interact with the key-value directory framework  to perform the requested operation.","In one embodiment, the files or documents indexed by the system  are stored in the cluster  in various block sizes to facilitate block-based access and support random access to different locations within the files. For example, via block-based access, a location in a file can be described by a block number and an offset to the location within the given block (as described in more detail with respect to  below). The block sizes can be tuned or selected based on various system parameters such as resource availability, file sizes, file types, etc.","In some embodiments, the system  also provides for caching of the data from the cluster  to the hosts  or the key-value directory framework . Specifically, the system  can use in-memory caching to queue up batches of writes (or other file operations such as read operations) to many blocks within the files during large sequential writes or operations to a key-value directory's underlying output stream (e.g., file block locations associated with requested file operations). The system , for instance, initiates the generation of the output stream in response to receiving a request specifying write, read, and\/or other operations. Examples of file operations in the context of a key-value directory are described in more detail with respect to  below.","In another embodiment, the system  also provides for a locking mechanism (e.g., exclusive locks) when performing operations on the output stream of a key-value directory. For example, before performing an operation, the system  can attempt to obtain an exclusive lock on the file blocks identified by the key-value directory. The exclusive lock may have a timeout period or limited duration (e.g., 30 seconds) which can be renewed or maintained using, for instance, a heartbeat signal. If another process or thread already has an exclusive lock, the system  may determine whether to delay (e.g., until a lock is available; or reserve a lock for a future time), verify the existing lock (e.g., determine whether the lock has not expired), and\/or override the existing lock. The locking mechanism is discussed in more detail with respect to  below.","As shown in , hosts -have connectivity to the key-value directory framework , the cluster , the storage servers , and a service platform  via a communication network  to request file operations (e.g., read, write, delete, update, etc.) using one or more key-value directories in support of various functions and\/or services. In one embodiment, respective applications -(also collectively referred to as applications ; e.g., a services application, a map application, a social networking application, etc.) of the hosts  can request such services via an application programming interface (API)  of the services platform . Control logic  of the services platform  receives such requests and utilizes the key-value directory framework  in conjunction with at least one cluster  of the servers , such as a distributed key value store, to provide services and related data to the applications . In one embodiment, the hosts  can in turn relay or provide the services to one or more user equipment (UEs) -(e.g., terminals or other client devices such as smartphones, personal computers, etc.; also collectively referred to as UEs ). It is also contemplated that at least a portion of the data stored in the cluster  may be shadowed or cached in the hosts , the UEs , the services platform , or other component of the system  to, for instance, reduce latency, increase reliability, increase availability when the cluster  is offline, etc. Although the key-value directory framework  is depicted as a separate component of the system , it is contemplated that the key-value directory framework  may be incorporated as a module of any other component of system .","The cluster  may consist of one or more databases that can be structured utilizing one or more systems. As noted above, the databases of the cluster  and\/or servers  can be a distributed key value store. In certain embodiments, a distributed key value store allows for the storage of values by key. The value itself can be a corpus or body of information that need not be structured. An index of keys can be generated to search for keys that may be useful to users. The key can then be retrieved and sent to a client system via the key-value directory framework . Although various embodiments are described with respect to the key value store, it is contemplated that the approach described herein may be used with other databases (e.g., a distributed database under the control of a database management system, where the storage devices are not all attached to a common processor or a non-distributed database). Key based storage can additionally be useful for social services (e.g., where the key is tied to a user profile), user sessions, shopping carts (e.g., where the key is for a shopping selection for an account of the user), or the like. In some embodiments, the cluster  and\/or servers  can include one or more shards and\/or horizontal partitioning systems. In certain embodiments, horizontal partitioning is a database where rows of a database table are separated instead of separating by columns. Each partition\/separation can constitute a shard. The shards can further be partitioned by one or more rows.","By way of example, the communication network  of system  includes one or more networks such as a data network (not shown), a wireless network (not shown), a telephony network (not shown), or any combination thereof. It is contemplated that the data network may be any local area network (LAN), metropolitan area network (MAN), wide area network (WAN), a public data network (e.g., the Internet), short range wireless network, or any other suitable packet-switched network, such as a commercially owned, proprietary packet-switched network, e.g., a proprietary cable or fiber-optic network, and the like, or any combination thereof. In addition, the wireless network may be, for example, a cellular network and may employ various technologies including enhanced data rates for global evolution (EDGE), general packet radio service (GPRS), global system for mobile communications (GSM), Internet protocol multimedia subsystem (IMS), universal mobile telecommunications system (UMTS), etc., as well as any other suitable wireless medium, e.g., worldwide interoperability for microwave access (WiMAX), Long Term Evolution (LTE) networks, code division multiple access (CDMA), wideband code division multiple access (WCDMA), wireless fidelity (WiFi), wireless LAN (WLAN), Bluetooth\u00ae, Internet Protocol (IP) data casting, satellite, mobile ad-hoc network (MANET), and the like, or any combination thereof.","The UE  is any type of mobile terminal, fixed terminal, or portable terminal including a mobile handset, station, unit, device, multimedia computer, multimedia tablet, Internet node, communicator, desktop computer, laptop computer, notebook computer, netbook computer, tablet computer, personal communication system (PCS) device, personal navigation device, personal digital assistants (PDAs), audio\/video player, digital camera\/camcorder, positioning device, television receiver, radio broadcast receiver, electronic book device, game device, or any combination thereof, including the accessories and peripherals of these devices, or any combination thereof. It is also contemplated that the UE  can support any type of interface to the user (such as \u201cwearable\u201d circuitry, etc.).","By way of example, the key-value directory framework , the cluster , the servers , the hosts , the services platform , and the UEs  communicate with each other and other components of the communication network  using well known, new or still developing protocols. In this context, a protocol includes a set of rules defining how the network nodes within the communication network  interact with each other based on information sent over the communication links. The protocols are effective at different layers of operation within each node, from generating and receiving physical signals of various types, to selecting a link for transferring those signals, to the format of information indicated by those signals, to identifying which software application executing on a computer system sends or receives the information. The conceptually different layers of protocols for exchanging information over a network are described in the Open Systems Interconnection (OSI) Reference Model.","Communications between the network nodes are typically effected by exchanging discrete packets of data. Each packet typically comprises (1) header information associated with a particular protocol, and (2) payload information that follows the header information and contains information that may be processed independently of that particular protocol. In some protocols, the packet includes (3) trailer information following the payload and indicating the end of the payload information. The header includes information such as the source of the packet, its destination, the length of the payload, and other properties used by the protocol. Often, the data in the payload for the particular protocol includes a header and payload for a different protocol associated with a different, higher layer of the OSI Reference Model. The header for a particular protocol typically indicates a type for the next protocol contained in its payload. The higher layer protocol is said to be encapsulated in the lower layer protocol. The headers included in a packet traversing multiple heterogeneous networks, such as the Internet, typically include a physical (layer 1) header, a data-link (layer 2) header, an internetwork (layer 3) header and a transport (layer 4) header, and various application headers (layer 5, layer 6 and layer 7) as defined by the OSI Reference Model.","Further, communications between the key-value directory framework , the cluster , and\/or the hosts  can be performed via one or more of the aforementioned protocols and\/or technologies. Further, fast connections (e.g., gigabit Ethernet, fiber channel, etc.) can be utilized among the any of the components of the system .","In one embodiment, the key-value directory framework , the cluster , the hosts , the services platform , and\/or the UEs  may interact according to a client-server model. According to the client-server model, a client process sends a message including a request to a server process, and the server process responds by providing a service. The server process may also return a message with a response to the client process. Often the client process and server process execute on different computer devices, called hosts, and communicate via a network using one or more protocols for network communications. The term \u201cserver\u201d is conventionally used to refer to the process that provides the service, or the host computer on which the process operates. Similarly, the term \u201cclient\u201d is conventionally used to refer to the process that makes the request, or the host computer on which the process operates. As used herein, the terms \u201cclient\u201d and \u201cserver\u201d refer to the processes, rather than the host computers, unless otherwise clear from the context. In addition, the process performed by a server can be broken up to run as multiple processes on multiple hosts (sometimes called tiers) for reasons that include reliability, scalability, and redundancy, among others.",{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 2","b":["100","201","203","205","119","203","101"]},"As described above, the key-value directory framework  provides a storage interface between the applications nodes  and the distributed key value store  (e.g., a cluster ) comprising one or more storage systems . As a storage interface, the key-value directory framework  enables the application nodes  to interact with files or documents stored in the distributed key-value store  via a virtual file system that provides a directory overlay on top of otherwise stream-based or unstructured file data. More specifically, the key-value directory framework  defines virtual directories (e.g., a key value directory) that organizes or groups files and provides an index of pointers to any file or location within the file. Because, the key-value directory framework  stores this virtual file system structure in a distributed key-value store just like the underlying file data, the key-value directory and its indices are not subject to limitations of the local hosts  (e.g., available only locally, subject to synchronization requirements among hosts , limited in size, etc.).","In addition, the block-based access provided by the key-value directory framework  enables quick and random access to specific locations within a file. As described in more detail below, block-based access enables the key-value directory to determine specific locations of a file within the distributed key-value store by identifying a particular file block and then an offset within the file block to locate the points in the files associated with a particular service request.",{"@attributes":{"id":"p-0052","num":"0051"},"figref":["FIG. 3","FIG. 3"],"b":["101","301","301","301","301","103","105","301","301","303","105","305","305","305","105"],"i":["a","k "]},"The control logic  and\/or API  may communicate with the key value store  using a client library . In certain embodiments, the key-value directory framework , the hosts , the services platform , the applications , the API , the control logic , and\/or the UEs  may be considered clients receiving database services from the key value store . The client library  may include an interface that can determine which servers  to communicate with to retrieve content from databases . In certain embodiments, databases  are stored utilizing a key and value mechanism that allows storage using the key. A portion (e.g., a partition, a shard, etc.) of each database (e.g., portions A-I as depicted in ) can be linked to a key. In one embodiment, the key is hashed to determine which portion the key is linked to. A key may be hashed using a ring method, for example. Using the ring, each key and portion may be hashed to a primary location (e.g., based on a key with an identifier that is hashed into a number k) as well as one or more backup locations. The backup locations may be locations associated with the next server or host associated with the hash. The client library  determines which servers  to read and write information from and to using the key hashes. The client library  and the servers  may each include a lookup table including which portions belong to which servers . In one embodiment, the key-value directory framework  can use a normalized identifier (e.g., a concatenation of a directory name, file name, delimiters, and\/or other identifiers) to specify the key without using a hash function.","In certain embodiments, the portion (e.g., portion A -) may be stored using multiple servers over multiple databases . In one implementation, portions may be replicated over n number (e.g., replicas=3) of servers  and databases  for redundancy, failover, and to reduce latency. Moreover, the portions may be written to and read from at the same time by the client library . When reading from the databases , the client library  may determine if there are any consistency issues (e.g., portion does not match portion ) via, for instance, a merge and\/or repair operations. In addition or alternatively, one or more clients of the key value store  (e.g., hosts , the services platform , UEs , etc.) may performed the consistency determination and initiate the merge and\/or repair operations. Moreover, in certain embodiments, an example storage scheme may require that when performing a write or a read, at least a certain number (e.g., required writes=2, required reads=2 etc.) of portions need to be successfully written or read. This allows for redundancy and quorum consistency. If a database fails or is otherwise incapacitated, a portion associated with the database may be later updated with content it should include by servers  having replicated portions , ","The API  may request that a key based data structure may be stored in the key value store . The new data structure may be assigned a key based, at least in part, on an associated account identifier associated. Then, the key may be hashed to determine a portion (e.g., portion A ) to store the new data structure in. As discussed above, in the context of a key-value directory, a file\/directory identifier may be used in place of a hash as the key. Next, the data structure is stored in a primary database as well as in backup databases (e.g., replica databases). The profile may be considered a value associated with the key. To retrieve the data structure at a later time, the hash of the key may be used to request the data structure from the server  associated with the portion. Then, the key may be utilized to search the portion for the data structure.","The key value store  is an example of a particular database structure that can be utilized in providing a key-value directory. It is contemplated that other types of database structures, for example, other key value stores, other databases, other shard databases, other partition based databases, etc. can be utilized provide a block-based storage interface.",{"@attributes":{"id":"p-0057","num":"0056"},"figref":["FIG. 4","FIG. 4"],"b":["101","401","101","101","403","405","403"]},"On receiving the command , the distributed key-value store  retrieves the replicas  of the data block representing the beginning of the list of all files in the requested key-value directory (e.g., using various embodiments of the block-based approach described herein). The distributed key-value store  can then perform a merge operation  to read-repair any discrepancies among the replicas before returning the results (e.g., the list  of key value directory metadata) to the key-value directory framework .","In one embodiment, updates to the file contents within a given key-value directory can be initiated using a command (e.g., \u201cflush( )\u201d) to update the appropriate data blocks in the distributed key-value store  with the new metadata for the updated files. In certain embodiments, all or a portion of the key-value directory metadata may be cached to improve performance.",{"@attributes":{"id":"p-0060","num":"0059"},"figref":["FIG. 5","FIG. 5"],"b":["101","501","503","101","505","101","507","509","511","507","509","503","503","507","509","511","505","507","511"]},"After writing the file , if a request is received to seek to offset  then read one byte of the file , the key-value directory framework  can determine a key by concatenating the file name and with the computed block information. For a block size of 4, as in this example, the block that encompasses offset  is \u201cfile 1\/1\u201d. Block \u201cfile 1\/1\u201d is retrieved via a \u201cGET \/file 1\/1\u201d command from the distributed key-value store . Internally, the distributed key-value store  merges reads from each of the three replicas of block \u201cfile 1\/1\u201d, performing read-repairs if needed. The returned data block has the bye sequence 0xa9 0x3a 0xb0 0x03. From that, the block offset  (e.g., computed as the current ready position modulus block size (4)) is used, and the byte 0x3a is returned.","Other file operations may be similarly performed. For example, as described above, data may also be written via a write to the file stream , and a \u201cPUT\u201d to the distributed key-value store . In one embodiment, any file operation (e.g., PUT or DELETE) to the distributed key-value store  also updates the file's metadata portion in the key-value directory metadata (e.g., update to a \u201clastModified\u201d and\/or \u201clengthOfFile\u201d metadata fields). In some embodiments, file operations maybe batched to operate on larger byte streams, and\/or can be cached locally for performance.",{"@attributes":{"id":"p-0063","num":"0062"},"figref":["FIG. 6","FIG. 6"],"b":["101","101","601","113","603","601"]},"In one embodiment, the lock interface  provides three operations: \u201cobtain( )\u201d, \u201cisLocked( )\u201d, and \u201crelease( )\u201d. As shown, the obtain( ) semantics is for obtaining the named lock if no other entity holds the lock, or if the holder's lease on the named lock is expired. By way of example, the holder's lease is determined by a comparison of the timestamp document  (e.g., an HTTP document whose content is shown as {\u201ctimestamp\u201d:130112370498000}) that an existing holder wrote to the named lock data to, for instance, the local system clock. The comparison can then be used to determine whether the lock has expired (e.g., extended beyond the lease duration). In one embodiment, the lease duration is configurable and can be extended or maintained by a heartbeat mechanism or signal to refresh the lock's timestamp periodically for a long file operation (e.g., a long write operation).","If the obtain( ) call is successful, isLocked( ) can be used to verify that the lock is still available by determining whether any other entity has written a non-expired lock since the obtain( ) was performed. This serves as a check to avoid file consistency or integrity issues in the event that the there is a significant time gap between the obtain( ) call and any subsequent file operation.","In one embodiment, once the file operation is complete, release( ) deletes the held lock if currently held by the current thread. In some embodiments, ETag protection via, for instance, the If-Match header is used to delete only if no other entity has subsequently stolen or seized the lock from the current thread.","It is contemplated that the locking mechanism or lock interface  can be used at the virtual directory or virtual file level provided by the key-value directory framework .","Although the example of  is described with a lock based on timestamp information (e.g., enabling seizing of locks based on lease expiration), it is contemplated that the system  may use any other parameter or criteria for determining when to allow seizing or invalidating and existing lock. For example, information such as thread priority of the lock holder may be used, wherein threads of higher priority may seize the locks from threads of lower priority.","In some embodiments, the lock interface  can enable advance reservations of lock periods. For example, if a data block is currently locked, the current thread can request a reservation of the lock for the next or other subsequent lease period. In one embodiment, the current lock holder may be informed of a pending reservation and may be given an opportunity to immediately surrender the lock, allow the lock to expire as scheduled, or to extend the lock.","In another embodiment, if a current thread has decided to seize or override a current lock holder, the seizing entity may provide sufficient time to the current holder to finish any pending operations before initiating the seizure.",{"@attributes":{"id":"p-0071","num":"0070"},"figref":["FIG. 7","FIG. 7","FIG. 4"],"b":["100","403"]},"In one embodiment, the key-value metadata may itself be split into blocks as its size grows. In addition, it is contemplated that any other metadata field associated with the virtual file may be included (e.g., owner, access rights, privacy settings, etc.).",{"@attributes":{"id":"p-0073","num":"0072"},"figref":["FIG. 8","FIG. 8","FIG. 8"],"b":["100","801","803","803","803"]},"The 11 bytes are divided into three blocks (e.g., blocks -) with a block size of 4 bytes. Suppose the blocks -of 11 bytes have been written to an in-memory buffer, and on flush( ), they are \u201cPUT\u201d to the distributed key-value store  in parallel. Upon success, the comment point for this content is written out, by rewriting the key-value directory metadata  for \u201cfileA\u201d with \u201clengthOfFile\u201d 11 and an updated \u201clastModified\u201d timestamp.","In one embodiment, the system  can optionally obtain( ) an exclusive write lock before the write operation, and release( ) it after the operation is complete. In one embodiment, readers will not honor the new data until \u201clengthOfFile\u201d has been increased and becomes readable. In addition, deleting (or truncating) a file also deletes all appropriate blocks that may have been previously written without reaching the commit point. If the buffer for block writing has a capacity C, a request to delete \u201cfileA\u201d will also delete all blocks that cover the current \u201clengthOfFile\u201d plus C blocks, due to possible writes that did not reach their commit point.",{"@attributes":{"id":"p-0076","num":"0075"},"figref":["FIG. 9","FIG. 12"],"b":["101","900","901","101","107","113"]},"In step , the key-value directory framework  causes, at least in part, a grouping of the one or more files into at least one key-value directory, wherein the key-value directory includes, at least in part, one or more key-value pairs of a distributed key-value store. It is noted that the key-value store for the key-value directory can be either the same key-value store for file storage or may be a different key-value store. In one embodiment, the grouping of the one or more files in the key-value directory constitutes a virtual file system that organizes the unstructured data (e.g., a collection of bytes) of the directories. In one embodiment, the key-value directory is a flat structure which contains files but no subdirectories. In other embodiments, it is contemplated that the key-value directory can include one or more subordinate key-value directories in combination with files.","In step , the key-value directory framework  causes, at least in part, a storage of at least one identifier of the one or more files, the at least one key-value directory, or a combination thereof as one or more keys of the one or more key-value pairs. In one embodiment, the key-value directory causes, at least in part, a concatenation of one or more names associated with the one or more files, the at least one key-value directory, the at least one stream-based file store, one or more delimiters, or a combination to generate the at least one identifier. The key-value directory framework  then causes, at least in part, a storage of block-based access information associated with the one or more files as one or more values of the key-value pairs (step ). By way of example, block-based access information includes information on how each file is divided into blocks and how the blocks are addressed. In one embodiment, different files may have different block sizes, but the blocks within a single file are of the same size.","In step , the key-value store determines metadata associated with the one or more files. The metadata includes, for instance, filename information, update information, owner information, access rights information, or a combination thereof. In step , the key-value directory framework  causes, at least in part, a storage of the metadata in the one or more values of the key-value pairs associated with the one or more keys. In one embodiment, the metadata may include the block-access information (e.g., block sizes, block counts, etc.) discussed above.",{"@attributes":{"id":"p-0080","num":"0079"},"figref":["FIG. 10","FIG. 12"],"b":["101","1000","1001","101","101","1003"]},"In step , the key-value directory framework  can process and\/or facilitate a processing of the block-based access information associated with the identified one or more keys to determine one or more pointers to the one or more files, to one or more locations within the one or more files, or combination thereof in the at least one stream-based file store for performing the one or more operations. In one embodiment, the block access information is based, at least in part, on block size information, block offset information, or a combination thereof associated with the one or more files.","Next, the key-value directory framework  determines whether the files or data blocks indicated by the block access information are locked (step ). It is noted that in some cases, certain operations (e.g., read operations) that can be performed concurrently without raising data integrity issues are performed without locking the blocks or files. If the key-value directory framework  determines that the one or more the one or more files, the one or more locations, or a combination thereof associated with the one or more pointers are in a locked state, the key-value directory framework  determines whether to delay the one or more operations, to verify the locking, to override the locking, or a combination thereof (step ). In one embodiment, the determination is made based, at least in part, on metadata associated with the locking. The metadata includes, at least in part, timestamp information, priority information, or a combination thereof for evaluating the validity of a lock.","After this determination or if the files, blocks, etc. are not locked, the key-value directory framework  causes, at least in part, a locking of the one or more files, the one or more locations, or a combination thereof associated with the one or more pointers (step ). In one embodiment, the locking is for at least a duration of a predetermined time period (e.g., 30 seconds), for performing the one or more operations (e.g., locked until the operation is determined to be completed), or a combination thereof.","In step , the key-value directory framework  then determines whether a heartbeat signal is to be sent to maintain the lock for the performing the one or more operations. If a no heartbeat signal is to be sent, the key-value directory framework  causes, at least in part, an initiation or a performance of the one or more operations based, at least in part, on the determined block access information (step ). By way of example, the key-value directory framework  may transmit no heartbeat signal if it anticipates that it can complete the one or more operations within the lock duration or if the system  is configured to operation with no automatic lock expiration.","If a heartbeat signal is to be sent, the key-value directory framework  causes, at least in part, a transmission of a heartbeat signal to maintain the lock (step ). The key-value directory framework  then returns to step  to perform or complete performance of the one or more operations. Periodically (e.g., before expiration of the lock), the key-value directory framework  determines whether the one or more operations have been completed (step ). If the operations are not done or completed, the key-value directory framework  returns to step  to determine whether send another heartbeat signal to maintain the lock. On completion of the operation, the key-value directory framework  causes, at least in part, a release of the lock by for instance deleting the lock record or stamp from the metadata associated with the files, blocks, or key-value directory (step ).","The processes described herein for providing a key-value based storage interface may be advantageously implemented via software, hardware, firmware or a combination of software and\/or firmware and\/or hardware. For example, the processes described herein, may be advantageously implemented via processor(s), Digital Signal Processing (DSP) chip, an Application Specific Integrated Circuit (ASIC), Field Programmable Gate Arrays (FPGAs), etc. Such exemplary hardware for performing the described functions is detailed below.",{"@attributes":{"id":"p-0087","num":"0086"},"figref":["FIG. 11","FIG. 11"],"b":["1100","1100","1100","1100","1110","1100","1100"]},"A bus  includes one or more parallel conductors of information so that information is transferred quickly among devices coupled to the bus . One or more processors  for processing information are coupled with the bus .","A processor (or multiple processors)  performs a set of operations on information as specified by computer program code related to providing a key-value based storage interface. The computer program code is a set of instructions or statements providing instructions for the operation of the processor and\/or the computer system to perform specified functions. The code, for example, may be written in a computer programming language that is compiled into a native instruction set of the processor. The code may also be written directly using the native instruction set (e.g., machine language). The set of operations include bringing information in from the bus  and placing information on the bus . The set of operations also typically include comparing two or more units of information, shifting positions of units of information, and combining two or more units of information, such as by addition or multiplication or logical operations like OR, exclusive OR (XOR), and AND. Each operation of the set of operations that can be performed by the processor is represented to the processor by information called instructions, such as an operation code of one or more digits. A sequence of operations to be executed by the processor , such as a sequence of operation codes, constitute processor instructions, also called computer system instructions or, simply, computer instructions. Processors may be implemented as mechanical, electrical, magnetic, optical, chemical or quantum components, among others, alone or in combination.","Computer system  also includes a memory  coupled to bus . The memory , such as a random access memory (RAM) or any other dynamic storage device, stores information including processor instructions for providing a key-value based storage interface. Dynamic memory allows information stored therein to be changed by the computer system . RAM allows a unit of information stored at a location called a memory address to be stored and retrieved independently of information at neighboring addresses. The memory  is also used by the processor  to store temporary values during execution of processor instructions. The computer system  also includes a read only memory (ROM)  or any other static storage device coupled to the bus  for storing static information, including instructions, that is not changed by the computer system . Some memory is composed of volatile storage that loses the information stored thereon when power is lost. Also coupled to bus  is a non-volatile (persistent) storage device , such as a magnetic disk, optical disk or flash card, for storing information, including instructions, that persists even when the computer system  is turned off or otherwise loses power.","Information, including instructions for providing a key-value based storage interface, is provided to the bus  for use by the processor from an external input device , such as a keyboard containing alphanumeric keys operated by a human user, or a sensor. A sensor detects conditions in its vicinity and transforms those detections into physical expression compatible with the measurable phenomenon used to represent information in computer system . Other external devices coupled to bus , used primarily for interacting with humans, include a display device , such as a cathode ray tube (CRT), a liquid crystal display (LCD), a light emitting diode (LED) display, an organic LED (OLED) display, a plasma screen, or a printer for presenting text or images, and a pointing device , such as a mouse, a trackball, cursor direction keys, or a motion sensor, for controlling a position of a small cursor image presented on the display  and issuing commands associated with graphical elements presented on the display . In some embodiments, for example, in embodiments in which the computer system  performs all functions automatically without human input, one or more of external input device , display device  and pointing device  is omitted.","In the illustrated embodiment, special purpose hardware, such as an application specific integrated circuit (ASIC) , is coupled to bus . The special purpose hardware is configured to perform operations not performed by processor  quickly enough for special purposes. Examples of ASICs include graphics accelerator cards for generating images for display , cryptographic boards for encrypting and decrypting messages sent over a network, speech recognition, and interfaces to special external devices, such as robotic arms and medical scanning equipment that repeatedly perform some complex sequence of operations that are more efficiently implemented in hardware.","Computer system  also includes one or more instances of a communications interface  coupled to bus . Communication interface  provides a one-way or two-way communication coupling to a variety of external devices that operate with their own processors, such as printers, scanners and external disks. In general the coupling is with a network link  that is connected to a local network  to which a variety of external devices with their own processors are connected. For example, communication interface  may be a parallel port or a serial port or a universal serial bus (USB) port on a personal computer. In some embodiments, communications interface  is an integrated services digital network (ISDN) card or a digital subscriber line (DSL) card or a telephone modem that provides an information communication connection to a corresponding type of telephone line. In some embodiments, a communication interface  is a cable modem that converts signals on bus  into signals for a communication connection over a coaxial cable or into optical signals for a communication connection over a fiber optic cable. As another example, communications interface  may be a local area network (LAN) card to provide a data communication connection to a compatible LAN, such as Ethernet. Wireless links may also be implemented. For wireless links, the communications interface  sends or receives or both sends and receives electrical, acoustic or electromagnetic signals, including infrared and optical signals, that carry information streams, such as digital data. For example, in wireless handheld devices, such as mobile telephones like cell phones, the communications interface  includes a radio band electromagnetic transmitter and receiver called a radio transceiver. In certain embodiments, the communications interface  enables connection to the communication network  for providing a key-value based storage interface.","The term \u201ccomputer-readable medium\u201d as used herein refers to any medium that participates in providing information to processor , including instructions for execution. Such a medium may take many forms, including, but not limited to computer-readable storage medium (e.g., non-volatile media, volatile media), and transmission media. Non-transitory media, such as non-volatile media, include, for example, optical or magnetic disks, such as storage device . Volatile media include, for example, dynamic memory . Transmission media include, for example, twisted pair cables, coaxial cables, copper wire, fiber optic cables, and carrier waves that travel through space without wires or cables, such as acoustic waves and electromagnetic waves, including radio, optical and infrared waves. Signals include man-made transient variations in amplitude, frequency, phase, polarization or other physical properties transmitted through the transmission media. Common forms of computer-readable media include, for example, a floppy disk, a flexible disk, hard disk, magnetic tape, any other magnetic medium, a CD-ROM, CDRW, DVD, any other optical medium, punch cards, paper tape, optical mark sheets, any other physical medium with patterns of holes or other optically recognizable indicia, a RAM, a PROM, an EPROM, a FLASH-EPROM, an EEPROM, a flash memory, any other memory chip or cartridge, a carrier wave, or any other medium from which a computer can read. The term computer-readable storage medium is used herein to refer to any computer-readable medium except transmission media.","Logic encoded in one or more tangible media includes one or both of processor instructions on a computer-readable storage media and special purpose hardware, such as ASIC .","Network link  typically provides information communication using transmission media through one or more networks to other devices that use or process the information. For example, network link  may provide a connection through local network  to a host computer  or to equipment  operated by an Internet Service Provider (ISP). ISP equipment  in turn provides data communication services through the public, world-wide packet-switching communication network of networks now commonly referred to as the Internet .","A computer called a server host  connected to the Internet hosts a process that provides a service in response to information received over the Internet. For example, server host  hosts a process that provides information representing video data for presentation at display . It is contemplated that the components of system  can be deployed in various configurations within other computer systems, e.g., host  and server .","At least some embodiments of the invention are related to the use of computer system  for implementing some or all of the techniques described herein. According to one embodiment of the invention, those techniques are performed by computer system  in response to processor  executing one or more sequences of one or more processor instructions contained in memory . Such instructions, also called computer instructions, software and program code, may be read into memory  from another computer-readable medium such as storage device  or network link . Execution of the sequences of instructions contained in memory  causes processor  to perform one or more of the method steps described herein. In alternative embodiments, hardware, such as ASIC , may be used in place of or in combination with software to implement the invention. Thus, embodiments of the invention are not limited to any specific combination of hardware and software, unless otherwise explicitly stated herein.","The signals transmitted over network link  and other networks through communications interface , carry information to and from computer system . Computer system  can send and receive information, including program code, through the networks ,  among others, through network link  and communications interface . In an example using the Internet , a server host  transmits program code for a particular application, requested by a message sent from computer , through Internet , ISP equipment , local network  and communications interface . The received code may be executed by processor  as it is received, or may be stored in memory  or in storage device  or any other non-volatile storage for later execution, or both. In this manner, computer system  may obtain application program code in the form of signals on a carrier wave.","Various forms of computer readable media may be involved in carrying one or more sequence of instructions or data or both to processor  for execution. For example, instructions and data may initially be carried on a magnetic disk of a remote computer such as host . The remote computer loads the instructions and data into its dynamic memory and sends the instructions and data over a telephone line using a modem. A modem local to the computer system  receives the instructions and data on a telephone line and uses an infra-red transmitter to convert the instructions and data to a signal on an infra-red carrier wave serving as the network link . An infrared detector serving as communications interface  receives the instructions and data carried in the infrared signal and places information representing the instructions and data onto bus . Bus  carries the information to memory  from which processor  retrieves and executes the instructions using some of the data sent with the instructions. The instructions and data received in memory  may optionally be stored on storage device , either before or after execution by the processor .",{"@attributes":{"id":"p-0101","num":"0100"},"figref":["FIG. 12","FIG. 11"],"b":["1200","1200","1200","1200","1200","1200"]},"In one embodiment, the chip set or chip  includes a communication mechanism such as a bus  for passing information among the components of the chip set . A processor  has connectivity to the bus  to execute instructions and process information stored in, for example, a memory . The processor  may include one or more processing cores with each core configured to perform independently. A multi-core processor enables multiprocessing within a single physical package. Examples of a multi-core processor include two, four, eight, or greater numbers of processing cores. Alternatively or in addition, the processor  may include one or more microprocessors configured in tandem via the bus  to enable independent execution of instructions, pipelining, and multithreading. The processor  may also be accompanied with one or more specialized components to perform certain processing functions and tasks such as one or more digital signal processors (DSP) , or one or more application-specific integrated circuits (ASIC) . A DSP  typically is configured to process real-world signals (e.g., sound) in real time independently of the processor . Similarly, an ASIC  can be configured to performed specialized functions not easily performed by a more general purpose processor. Other specialized components to aid in performing the inventive functions described herein may include one or more field programmable gate arrays (FPGA) (not shown), one or more controllers (not shown), or one or more other special-purpose computer chips.","In one embodiment, the chip set or chip  includes merely one or more processors and some software and\/or firmware supporting and\/or relating to and\/or for the one or more processors.","The processor  and accompanying components have connectivity to the memory  via the bus . The memory  includes both dynamic memory (e.g., RAM, magnetic disk, writable optical disk, etc.) and static memory (e.g., ROM, CD-ROM, etc.) for storing executable instructions that when executed perform the inventive steps described herein to provide a key-value based storage interface. The memory  also stores the data associated with or generated by the execution of the inventive steps.",{"@attributes":{"id":"p-0105","num":"0104"},"figref":["FIG. 13","FIG. 1"],"b":"1301"},"Pertinent internal components of the telephone include a Main Control Unit (MCU) , a Digital Signal Processor (DSP) , and a receiver\/transmitter unit including a microphone gain control unit and a speaker gain control unit. A main display unit  provides a display to the user in support of various applications and mobile terminal functions that perform or support the steps of providing a key-value based storage interface. The display  includes display circuitry configured to display at least a portion of a user interface of the mobile terminal (e.g., mobile telephone). Additionally, the display  and display circuitry are configured to facilitate user control of at least some functions of the mobile terminal. An audio function circuitry  includes a microphone  and microphone amplifier that amplifies the speech signal output from the microphone . The amplified speech signal output from the microphone  is fed to a coder\/decoder (CODEC) .","A radio section  amplifies power and converts frequency in order to communicate with a base station, which is included in a mobile communication system, via antenna . The power amplifier (PA)  and the transmitter\/modulation circuitry are operationally responsive to the MCU , with an output from the PA  coupled to the duplexer  or circulator or antenna switch, as known in the art. The PA  also couples to a battery interface and power control unit .","In use, a user of mobile terminal  speaks into the microphone  and his or her voice along with any detected background noise is converted into an analog voltage. The analog voltage is then converted into a digital signal through the Analog to Digital Converter (ADC) . The control unit  routes the digital signal into the DSP  for processing therein, such as speech encoding, channel encoding, encrypting, and interleaving. In one embodiment, the processed voice signals are encoded, by units not separately shown, using a cellular transmission protocol such as enhanced data rates for global evolution (EDGE), general packet radio service (GPRS), global system for mobile communications (GSM), Internet protocol multimedia subsystem (IMS), universal mobile telecommunications system (UMTS), etc., as well as any other suitable wireless medium, e.g., microwave access (WiMAX), Long Term Evolution (LTE) networks, code division multiple access (CDMA), wideband code division multiple access (WCDMA), wireless fidelity (WiFi), satellite, and the like, or any combination thereof.","The encoded signals are then routed to an equalizer  for compensation of any frequency-dependent impairments that occur during transmission though the air such as phase and amplitude distortion. After equalizing the bit stream, the modulator  combines the signal with a RF signal generated in the RF interface . The modulator  generates a sine wave by way of frequency or phase modulation. In order to prepare the signal for transmission, an up-converter  combines the sine wave output from the modulator  with another sine wave generated by a synthesizer  to achieve the desired frequency of transmission. The signal is then sent through a PA  to increase the signal to an appropriate power level. In practical systems, the PA  acts as a variable gain amplifier whose gain is controlled by the DSP  from information received from a network base station. The signal is then filtered within the duplexer  and optionally sent to an antenna coupler  to match impedances to provide maximum power transfer. Finally, the signal is transmitted via antenna  to a local base station. An automatic gain control (AGC) can be supplied to control the gain of the final stages of the receiver. The signals may be forwarded from there to a remote telephone which may be another cellular telephone, any other mobile phone or a land-line connected to a Public Switched Telephone Network (PSTN), or other telephony networks.","Voice signals transmitted to the mobile terminal  are received via antenna  and immediately amplified by a low noise amplifier (LNA) . A down-converter  lowers the carrier frequency while the demodulator  strips away the RF leaving only a digital bit stream. The signal then goes through the equalizer  and is processed by the DSP . A Digital to Analog Converter (DAC)  converts the signal and the resulting output is transmitted to the user through the speaker , all under control of a Main Control Unit (MCU)  which can be implemented as a Central Processing Unit (CPU) (not shown).","The MCU  receives various signals including input signals from the keyboard . The keyboard  and\/or the MCU  in combination with other user input components (e.g., the microphone ) comprise a user interface circuitry for managing user input. The MCU  runs a user interface software to facilitate user control of at least some functions of the mobile terminal  to providing a key-value based storage interface. The MCU  also delivers a display command and a switch command to the display  and to the speech output switching controller, respectively. Further, the MCU  exchanges information with the DSP  and can access an optionally incorporated SIM card  and a memory . In addition, the MCU  executes various control functions required of the terminal. The DSP  may, depending upon the implementation, perform any of a variety of conventional digital processing functions on the voice signals. Additionally, DSP  determines the background noise level of the local environment from the signals detected by microphone  and sets the gain of microphone  to a level selected to compensate for the natural tendency of the user of the mobile terminal .","The CODEC  includes the ADC  and DAC . The memory  stores various data including call incoming tone data and is capable of storing other data including music data received via, e.g., the global Internet. The software module could reside in RAM memory, flash memory, registers, or any other form of writable storage medium known in the art. The memory device  may be, but not limited to, a single memory, CD, DVD, ROM, RAM, EEPROM, optical storage, magnetic disk storage, flash memory storage, or any other non-volatile storage medium capable of storing digital data.","An optionally incorporated SIM card  carries, for instance, important information, such as the cellular phone number, the carrier supplying service, subscription details, and security information. The SIM card  serves primarily to identify the mobile terminal  on a radio network. The card  also contains a memory for storing a personal telephone number registry, text messages, and user specific mobile terminal settings.","While the invention has been described in connection with a number of embodiments and implementations, the invention is not so limited but covers various obvious modifications and equivalent arrangements, which fall within the purview of the appended claims. Although features of the invention are expressed in certain combinations among the claims, it is contemplated that these features can be arranged in any combination and order."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The embodiments of the invention are illustrated by way of example, and not by way of limitation, in the figures of the accompanying drawings:",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 13"}]},"DETDESC":[{},{}]}
