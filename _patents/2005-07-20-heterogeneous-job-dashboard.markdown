---
title: Heterogeneous job dashboard
abstract: This disclosure provides a system and method for summarizing jobs for a user group. In one embodiment, a job manager is operable to identify a state of a first job, the first job associated with a first job scheduler. A state of a second job is identified. The second job is associated with a second job scheduler. The first job scheduler and the second job scheduler are heterogeneous. A summary of information associated with at least the first job scheduler and the second job scheduler is determined using, at least in part, the first job state and the second job state. The summary is presented to a user though a dashboard.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08028285&OS=08028285&RS=08028285
owner: Computer Associates Think, Inc.
number: 08028285
owner_city: Islandia
owner_country: US
publication_date: 20050720
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATION","TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This application claims priority under 35 U.S.C. \u00a7119 of Provisional U.S. Application Ser. No. 60\/590,405 filed Jul. 22, 2004.","This disclosure generally relates to enterprise job scheduling and, more specifically, to a system and method for providing a heterogeneous job dashboard.","There are numerous heterogeneous operating environments for jobs, applications or other processes. Typically, each of these operating environments comprise one of disparate operating systems including UNIX, Windows or Windows Server, Linux, z\/OS or other mainframe OS, and others. Generally, these jobs or applications, whether enterprise or consumer, are compatible or optimized for one of these heterogeneous operating systems. Some properties of these jobs are similar across the heterogeneous systems, while others are unique to each operating system, job type, or job dependencies. For example, the status property of a job residing in an enterprise job scheduler for a mainframe system may indicate one of the following example states: \u201cAbend,\u201d \u201cRequeued,\u201d \u201cJCL Error,\u201d and others. But the status of a second job residing in an enterprise job scheduler for a Unix-based system may indicate one of the following example states: \u201cExited,\u201d \u201cRunning,\u201d \u201cSuspended,\u201d \u201cFailed,\u201d and such.","This disclosure provides a system and method for summarizing jobs for a user group. In one embodiment, a job manager is operable to identify a state of a first job, the first job associated with a first job scheduler. A state of a second job is identified. The second job is associated with a second job scheduler. The first job scheduler and the second job scheduler are heterogeneous. A summary of information associated with at least the first job scheduler and the second job scheduler is determined using, at least in part, the first job state and the second job state. The summary is presented to a user.","The details of one or more embodiments of the disclosure are set forth in the accompanying drawings and the description below. Particular features, objects, and advantages of the disclosure will be apparent from the description and drawings and from the claims.",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1","b":["100","106","140","142","100","106","106","106","100","140","142","150","150","100","100"],"i":["b ","a "]},"At a high level, system  is all or a portion of the enterprise that includes or is communicably coupled with server , one or more clients , and a plurality of heterogeneous operating environments . For example, system  may be associated with the entire enterprise, a geographical or logical location within the enterprise, or any other portion of the enterprise. It will be understood that the enterprise may be a corporation, non-profit organization, government agency, or any other person or entity that includes, utilizes, or receives the results from multiple computing devices and operating environments . In other words, job dashboard system  is typically a distributed client\/server system that allows users of clients  to view summaries of user groups that may span the plurality of operating environments . But system  may be any other suitable environment without departing from the scope of this disclosure. Generally, \u201cdynamically,\u201d as used herein, means that certain processing is determined, at least in part, at run-time based on one or more variables. Whereas the term \u201cautomatically,\u201d as used herein, generally means that appropriate processing is substantially performed by at least part of job dashboard system . It should be understood that \u201cautomatically\u201d further contemplates any suitable administrator or other user interaction with system  without departing from the scope of this disclosure.","Returning to the illustrated embodiment, system  includes, invokes, executes, references, or is communicably coupled with a plurality operating environments . Each operating environment  is any system or subsystem operable to at least partially or fully execute or process jobs . For example, each operating environment  is one of a plurality of heterogeneous environments including Unix, Linux, Windows, or mainframe environments, as well as others. In another example, an operating environment  may represent a particular application. Moreover, each operating environment  may include one server or may be distributed across a plurality of computers. For example, illustrated system  includes three operating environments , , and respectively. In this example, first operating environment is server environment executing UNIX, second operating environment is a mainframe environment executing z\/OS, and third operating environment is a distributed processing environment including a plurality of clients executing Windows. In another example, two operating environments  may be executing the same operating system, but may include different storage capabilities, file systems, or computing devices. In yet another example, two operating environments  may be substantively similar or identical, except for executing two disparate cyclical releases or versions of the same operating system. As illustrated in , each operating environment  typically includes one or more job schedulers , each of which may be tailored to, designed for, or at least partially compatible with job executing in the associated operating environment . In this case, \u201coperating environment \u201d and \u201cjob scheduler \u201d may be used interchangeably as appropriate. Of course, illustrated operating environments  are for example purposes only. Indeed, while illustrated separately, server  may represent, include, or execute one of the operating environments  or one of the operating environments  may include or utilize server  without departing from the scope of the disclosure.","Illustrated server  includes memory  and processor  and comprises an electronic computing device operable to receive, transmit, process and store data associated with system . For example, server  may be any computer or processing device such as, for example, a blade server, general-purpose personal computer (PC), Macintosh, workstation, Unix-based computer, or any other suitable device. Generally,  provides merely one example of computers that may be used with the disclosure. For example, although  illustrates one server  that may be used with the disclosure, server  can be implemented using computers other than servers, as well as a server pool. Server  may be adapted to execute any operating system including Linux, UNIX, Windows Server, z\/OS or any other suitable operating system. But, the present disclosure contemplates servers other than general purpose computers as well as servers without conventional operating systems. According to one embodiment, server  may also include or be communicably coupled with a web server and\/or a data server.","Memory  may include any memory or database module and may take the form of volatile or non-volatile memory including, without limitation, magnetic media, optical media, random access memory (RAM), read-only memory (ROM), removable media, or any other suitable local or remote memory component. In the illustrated embodiment, memory  includes job objects , alert objects , and dashboard objects , but may also include any other appropriate data such as a job history, normalization policies, filters, a security or audit log, print or other reporting files, HTML files or templates, and others. Job objects  are representations of enterprise jobs and their associated properties. These jobs may be update or report batch jobs, database processing utilities, commands, or other tasks. Each job object  typically comprises at least a mapping of property names to values that represent the parameters, variables, output format, or other details of the associated job. For example, job object  comprises at least a job identifier and a pointer or other reference to the appropriate or associated operating environment . The environment pointer may be automatically, dynamically, or manually populated based on operating system compatibility, data storage location, application, utilization, priority, department or business rules, geography, other criteria or characteristics, or any combination thereof. In another example, each job object  may include job predecessor, job successor, triggers, calendar, VRM requirements, dataset predecessors, user requirements, and network predecessors. In certain embodiments, the constituent data may be dynamically populated based on the particular type of job. For example, in the case of a distributed job, job object  may include two or more identifiers of the associated operating environments, while a standalone job merely includes one environment pointer. Job object  may be in any appropriate logical or physical format including an executable, a Java object, text, SQL, XML, and such. Indeed, job object  may be a default job or a particular instance of a job as appropriate. Moreover, job object  may be keyed on or associated with a user, a user or security group, a department, or any other variable or property. As described in more detail below, job object  may include properties that directly stored or normalized.","Alert objects  are representations of enterprise job alerts and their associated properties. These job alerts may be generated in response to a specific job transitioning to certain states, completion of a specified job or jobset, or any other event associated with jobs . For example, an alert object  may be generated if a critical job fails to complete. Each alert object  typically comprises at least a mapping of property names to values that represent the parameters, variables, output format, or other details of the associated job alert. For example, alert object  typically comprises at least a job identifier, a job scheduler identifier, and a pointer or other reference to the appropriate or associated operating environment . Alert object  may include one or more the following: a unique alert identifier, an alert state, a class of alert, a name of alert queue, a status of alert, a text description for alert, a job identifier, a jobset identifier, a job scheduler identifier, a severity level, a creation time, and update time, and other properties or references to properties of the alert and\/or job. In some embodiments, the alert states are critical, high, medium, low, opened, acknowledged, and closed. Alert object  may be in any appropriate logical or physical format including an executable, a Java object, text, Structured Query Language (SQL), eXtensible Markup Language (XML), and such. Alert object  may be associated with a transition to a job state, a transition to a severity level, a specific job , a specific job scheduler, a specific jobset, an operating environment  or any other suitable aspect of system .","Dashboard objects  (illustrated in more detail in ) represent one or more summaries for user groups or other categories based on jobs  and alert of jobs  in the enterprise. For example, dashboard objects  may include statistical information about jobs  and alerts of jobs . As discussed above, the statistical information may include a count of each type of job state and alert state, a percentage of each type of job state and alert state in accordance with the total number of jobs and total number of alerts, respectively, or other suitable statistical information that may provide or be used to determine a summary of the enterprise. For example, the statistical information may include the number of failed jobs  and the percentage of failed jobs  in accordance with the total number of jobs. In addition to statistical information, dashboard object  may include a severity level representing an overall state of that portion of the enterprise. Dashboard objects  may store or define various data structures such as Java objects, XML, comma-separated-value (CSV) files, internal variables, SQL, or one or more libraries. In short, dashboard objects  may comprise one table, file, or object or a plurality of tables, files, or objects stored on one computer or across a plurality of computers in any appropriate format. Moreover, dashboard objects  may be local or remote without departing from the scope of this disclosure and store any type of appropriate data.","Furthermore, dashboard object  may include parameters, variables, algorithms, instructions, rules, or other directives for determining statistical information and\/or the severity level using job objects  and\/or alert objects . In some embodiments, dashboard object  implements these directives with one or more filters. The filter criteria may be compared, directly or indirectly, with statistical information of job objects  and\/or alert objects . Dashboard object  may be a collection of tuple objects. Each example tuple object comprises three values: property names, property operator, and property value. The property name contains a name or alias of the property that is matched from the job or alert definition or instance. For example, the name could be \u201cfailed jobs\u201d representing the number of failed jobs. The operator contains the mathematical or logical operation to be performed with the value and statistical information. In one example, the operator is \u201c>\u201d. The property value contains a value to match or compare. For example, the value could be \u201c75%.\u201d In certain embodiments, dashboard object  may allow multiple tuples. For example, the example filter may additionally include the following tuple: open alerts, >, and 60%. The interpretation of the specification of multiple tuples may require that all tuples be satisfied or one or more tuples be satisfied. In addition to the collection of tuple objects, dashboard object  may contain a reference, identifier, or other pointer to an instance of the associated one or more job scheduler's. As mentioned above, each instance of a job scheduler may be identified by machine name, network address, database name, or a combination of system, network, database and proprietary identifiers that represent a unique insulation of the associated job scheduler or operating environment . The filter criteria are typically compared with values computed or determined from, derived from, generated from, or otherwise associated with statistical information of job objects  and alert objects . For example, percentages of job states and\/or alert states may be compared to the filter criteria. In the event of a match, dashboard object  may provide additional directives to assign a severity level value such as, for example, one of the following: running, low, medium, high, or critical. In some embodiments, dashboard objects  assign or otherwise associate a severity level value using percentages of job states and\/or alert states. For example, if the filter criteria directs that the severity level be set to critical if the percentage of failed jobs exceed 10% and, in fact, the calculated statistics indicate that the percentage of failed jobs is 15%, then the filter criteria match and result in server  setting the severity level value to critical. The filter criteria may be based on other suitable calculated values such as a count of each job state, a total number of jobs, a count of each alert state, a total number of alerts, the combination of the foregoing, or other suitable values based, at least in part, on the job states and alert states.","Server  also includes processor . Processor  executes instructions and manipulates data to perform the operations of server  such as, for example, a central processing unit (CPU), a blade, an application specific integrated circuit (ASIC), or a field-programmable gate array (FPGA). Although  illustrates a single processor  in server , multiple processors  may be used according to particular needs and reference to processor  is meant to include multiple processors  where applicable. In the illustrated embodiment, processor  executes job manager , which performs at least a portion of the management of heterogeneous jobs  and\/or the normalization of their properties.","Job manager  typically comprises any software component operable to allow users access to operating environments , submit jobs , query the status or other job properties, normalize some or all of these properties, or any other appropriate job management processing. As used herein, software generally includes any appropriate combination of software, firmware, hardware, and\/or other logic. For example, job manager  may be written or described in any appropriate computer language including C, C++, C#, Java, J#, Visual Basic, assembler, Perl, any suitable version of 4GL, another language, or any combination thereof. It will be understood that while job manager  is illustrated in  as a single multi-tasked module, the features and functionality performed by this engine may be performed by multiple modules. For example, job manager  may be a job scheduler and a plurality of adapters  (see ). In another example, job manager  may comprise a connection listener , a request controller  communicably coupled with a plurality of job parsers and managers, a view controller , a session manager , a template manager , an adapter manager , and a profile manager  (as shown in more detail in ). Further, while illustrated as internal to server , one or more processes associated with job manager  may be stored, referenced, or executed remotely such as GUI  and one or more agents residing in the appropriate operating environments . Moreover, job manager  may be a child or sub-module of another software module (not illustrated) without departing from the scope of this disclosure. In certain embodiments, job manager  may include or be communicably coupled with an administrative workstation  or graphical user interface (GUI) through interface . In these embodiments, job manager  may run as a persistent process (e.g., a daemon or service) operable to listen on a particular port through or in interface .","Server  may also include interface  for communicating with other computer systems, such as clients , over network  in a client-server or other distributed environment. In certain embodiments, server  receives job submissions or customizations from internal or external senders through interface  for storage in memory  and\/or processing by processor . Generally, interface  comprises logic encoded in software and\/or hardware in a suitable combination and operable to communicate with network . More specifically, interface  may comprise software supporting one or more communications protocols associated with communications network  or hardware operable to communicate physical signals.","Network  facilitates wireless or wireline communication between computer server  and any other local or remote computer, such as clients . Illustrated network  comprises two sub-nets or virtual LANS, and , respectively. Indeed, while illustrated as two networks, network  may be a continuous network without departing from the scope of this disclosure, so long as at least portion of network  may facilitate communications between job manager  and one or more of the operating environments . In other words, network  encompasses any internal or external network, networks, sub-network, or combination thereof operable to facilitate communications between various computing components in system . Network  may communicate, for example, Internet Protocol (IP) packets, Frame Relay frames, Asynchronous Transfer Mode (ATM) cells, voice, video, data, and other suitable information between network addresses. Network  may include one or more local area networks (LANs), radio access networks (RANs), metropolitan area networks (MANs), wide area networks (WANs), all or a portion of the global computer network known as the Internet, and\/or any other communication system or systems at one or more locations.","Client  is any local or remote computing device operable to receive job submissions  and present output (such as properties or reports) via a GUI . At a high level, each client  includes at least GUI  and comprises an electronic computing device operable to receive, transmit, process and store any appropriate data associated with system . It will be understood that there may be any number of clients  communicably coupled to server . For example, illustrated clients  include one directly coupled client  and two communicably coupled clients to the illustrated server . Further, \u201cclient ,\u201d \u201cjob owner,\u201d and \u201cuser\u201d may be used interchangeably as appropriate without departing from the scope of this disclosure. Moreover, for ease of illustration, each client  is described in terms of being used by one user. But this disclosure contemplates that many users may use one computer or that one user may use multiple computers to view user group summaries via GUI . As used in this disclosure, client  is intended to encompass a personal computer, touch screen terminal, workstation, network computer, kiosk, wireless data port, wireless or wireline phone, personal data assistant (PDA), one or more processors within these or other devices, or any other suitable processing device or computer. For example, client  may comprise a computer that includes an input device, such as a keypad, touch screen, mouse, or other device that can accept information, and an output device that conveys information associated with the operation of server  or clients , including digital data, visual information, or GUI . Both the input device and output device may include fixed or removable storage media such as a magnetic computer disk, CD-ROM, or other suitable media to both receive input from and provide output to users of clients  through the display, namely GUI .","GUI  comprises a graphical user interface operable to allow the user of client  to interface with at least a portion of system  for any suitable purpose. Generally, GUI  provides the user of client  with an efficient and user-friendly presentation of data provided by or communicated within system . For example, GUI  may be a front-end presenting one or more dashboard objects  and provide functionality to monitor jobs and alerts, as well as a summary of the jobs and alerts. GUI  may provide an alternate to a Business Scheduling View (BSV) graphical interface for monitoring. Further, GUI  may help the user by providing certain advantages including ease-of-use, compatibility with Java and non-Java browser platforms, and performance. Conceptually, the user logs into dashboard object  through GUI , which then presents statistical information associated with a user group. Using GUI , the user can define filters in order to configure his (or his group's) view to a specific set of jobs and\/or job properties. After configuration, the user can save this view for later reuse. When a view is saved for later use, it may show up on a list of available, pre-configured views during login. This feature may give the user the ability to quickly see the same type of information from where he left off last time or provide the same view to other users. This feature may be referred to as serialization. Alternatively, the user can start on a new view by selecting from the list of filters in the view or modifying an existing filter. From an example \u201cDashboard\u201d view, the user can select a filter and zoom into its details, thereby easily locating or viewing the specific properties. In addition to the Job Status view, GUI  may provide \u201cAlert\u201d and \u201cJob Status\u201d views. The example Alert view may show alerts that have been generated by job manager  or job scheduler  in response to a particular filter. The example Job Status view may allow the user to view and manage jobs . When multiple filters are applied to the Job Status, Alert, or Dashboard views, information from various heterogeneous job schedulers  may be collected into one view. This view shows the selected job and all its direct dependencies including its immediate predecessors, successors, triggers, resource and other requirements, and the current status of each. The consolidated data is often presented in a single way in an example \u201cEnterprise\u201d view. Thus, the Job Status, Alert and Dashboard views (as well as others) may be types or children of certain Enterprise views. Another view may be a Map view, which graphically displays the details of a selected job or jobset. Yet another view may be a Server Configuration view, in which the administrator or other authorized user can add, edit, and delete servers or operating environments  that are available to job manager . This view does not typically create back-end servers. Instead, it creates or populates the configuration information to access the environments  based on information supplied by the user. Of course, this configuration information may be automatically retrieved, received, or polled as appropriate. Each view may be static and\/or dynamic as appropriate. Generally, static views do not change over time, while dynamic views automatically change at a regular update interval or dynamically update according to other criteria. In certain embodiments, GUI  may also present a \u201cCredentialed User\u201d view, allowing the user or administrator to add, edit, and delete credentialed users. The credentialed user information provides login credentials to back-end servers or operating environments . Credentialed users are set up to simplify access to the back-end servers\/environments  and to provide an additional level of security. The portal user ID may be used as a key to access the credentialed user information. In addition to the portal user ID, the system administrator can set an environment password, which can be different than the Portal password. This feature is for users who have access to multiple back-end servers with the same user ID but different passwords for each. In addition, for each user ID in the credentialed user information, an alias ID can be establish. The alias ID can be either a group ID (one-to-many or many-to-one) or can be a user's personal ID for the back-end server. The alias ID has an associated password for the back-end server. In addition, a group user\/group ID can be set to provide the credentials.","Regardless of the particular view or data, GUI  may comprise a plurality of customizable frames or windows having interactive fields, pull-down lists, and buttons operated by the user. In one embodiment, GUI  presents statistical information associated with job objects  and alert objects , including counts and percentages, and associated buttons and receives commands  from the user of client  via one of the input devices. This statistical information may be presented in tabular, graphical, and any other suitable format. Moreover, it should be understood that the term graphical user interface may be used in the singular or in the plural to describe one or more graphical user interfaces and each of the displays of a particular graphical user interface. Therefore, GUI  contemplates any graphical user interface, such as a generic web browser or touch screen, that processes information in system  and efficiently presents the results to the user. Server  can accept data from client  via the web browser (e.g., Microsoft Internet Explorer or Netscape Navigator) and return the appropriate HTML or XML responses using network . For example, server  may receive a status request using the web browser, determine statistical information associated with jobs and alerts, and present the results in the web browser.","In one aspect of operation, a user logs into job manager  using GUI  and is presented with the following example functionality or views: Administration, Monitoring, Configuration, and Event Management. Both the Administration and Monitoring views normally includes an applet deployed in an HTML page. The Configuration view is provided by a series of HTML pages that communicate with a Configuration servlet or process. The applets graphically display the objects defined in the job dashboard system. The applet communicates with the appropriate servlet or process to send and receive data to the job dashboard system. Event Management provides web-enabled access to the log facility. Job manager  may use the Jacada Terminal Emulator (JTE) to provide host emulation capabilities. In certain embodiments, the user may be provided access to certain functionality based on assignments to Portal workgroups. Based on the particular functionality selected by the user, job manager  may invoke a particular module from a Server\/Web Server tier. This example level includes applets, servlets, servlet engines, and adapters.","Each servlet serves as a central point of communication and management between the GUI  (Applet and\/or Portlet) and the one or more operating environments . The servlet is generally operable to expose a callable interface to GUI  to allow the end-user to configure and monitor jobs. The servlets, in turn, are operable to forward those calls into the various adapters that link with the particular environment . The servlets may be further operable to control client sessions. This session control typically involves session management, authentication, and persistency. As described in more detail in the embodiments of , each individual adapter  communicates with the servlets and the associated operating environment  and\/or job scheduler . Adapters  encapsulate the job calls  to the operating environment  and\/or job scheduler  and expose an API that the example servlets can use. In other words, once the user selects the appropriate action to take within one of the desired operating environments  (such as submitting a job using the associated job scheduler ), the appropriate adapter  encapsulates the user command into an object  appropriate for the particular operating environment  and\/or job scheduler . After any suitable amount of processing or job management, job scheduler  communicates output or job details to job manager  via the appropriate adapter  (perhaps in response to a query or automatically upon job completion or error). At this point, job manager  generates one or more job objects  and\/or alert objects  using the information received from job scheduler . Prior to generating job objects  and\/or alert objects , job manager  may normalized the received information and generate objects using the normalized information.","After generating job objects  and\/or alert objects , job manager  uses dashboard object  to determine statistical information about jobs and alerts associated with a user group and present the information to a user. In response to a user request, job manager  identifies one or more dashboard objects , job objects , and alert objects  associated with the user group. Using the identified dashboard object , job manager  identifies properties and\/or determines counts of the identified job objects  and alert objects . For example, job manager  may determine a count of each job state and alert state and their associated percentages in accordance with dashboard object . Dashboard object  may include directives to perform these processes at a specified interval. After the statistical information is determined, job manager  may then determine a severity level associated with the user group in accordance with dashboard object . Job manager  identifies one or more filters associated with the user group using dashboard object  and compares the identified filters with the statistical information. As discussed above, the filters may include one or more tuples. For example, job manager  may determine whether a percentage of the failed job states exceed a specified value. In the event of a match, job manager  assigns a severity level in accordance with dashboard object . In the case when dashboard object includes a plurality of filters, dashboard object  may require that all filters or one or more filters be matched before the severity level can be assigned to the user group.",{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIGS. 2A-E","b":["100","106","130","137","106","135","130","135","137"]},"Each adapter  is an object or other module that encapsulates one or more types of job schedulers . Adapters  may be written or described in any particular format or programming language. For example, adapter  may be a Java object. Regardless of the particular format, adapter  is generally operable to provide APIs to job manager  for communication with each job scheduler  to manage and monitor job information. Put another way, adapter  may be logically located between job manager  and at least the associated job scheduler , thereby allowing job manager to be communicably coupled with the job scheduler . In certain embodiments, each adapter  may provide this compatibility by invoking, including, exposing, or executing one or more of the following example methods:",{"@attributes":{"id":"p-0036","num":"0035"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Name","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["List getJobStatus(List filters )","Returns the job status data according"]},{"entry":[{},"to the given filters"]},{"entry":["Job getJobDetails(Map params )","Returns the job details"]},{"entry":["void updateJobDetails(Job job )","Updates the job details"]},{"entry":["List getRunLog( RunLogFilter","Returns the run log data according to"]},{"entry":["filter )","the given filter"]},{"entry":["List getPriorRun( PriorRunFilter","Returns the prior run data according to"]},{"entry":["filter )","the given filter"]},{"entry":["void actionJob(Job job, Map","Perform action on the specified job"]},{"entry":"params )"},{"entry":["List getJobPreds(Job job, Map","Returns the job predecessors of the"]},{"entry":["params )","specified job"]},{"entry":["List getJobVRMs(Job job, Map","Returns the job VRMs of the specified"]},{"entry":["params )","job"]},{"entry":["void actionVRM(VRM vrm,","Perform action on the specified job"]},{"entry":["Map params )","VRM"]},{"entry":["void actionPred(Pred pred, Map","Perform action on the specified job"]},{"entry":["params )","predecessor"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"There may be any number of adapters , each compatible with any appropriate number of job schedulers . For example, system  may include a mainframe job adapter  that provides APIs to allow communication with a mainframe-based job scheduler . These APIs allow the caller to read and write to different objects that exist within the mainframe job scheduler . These objects may include jobs, calendars, datasets, ARFSets, ARFs, JCL, triggers and predecessors. In another example, system  may include a distributed job adapter  that provides APIs to allow communication with a distributed job scheduler . This example distributed job scheduler  may run on any distributed platform such as Windows and Unix-based operating systems. As with the mainframe adapter , the APIs allow the caller to read and write to different objects (such as jobs, calendars and global variables) that exist within the distributed job scheduler .","Job scheduler  is any executable, routine, service, daemon, or other module or process that is operable to execute, monitor, or otherwise manage jobs  in at least one operating environment . Typically, job scheduler  is associated with a particular type, format, or compatibility of job . But, as illustrated in the various embodiments, any job scheduler  may be also be configured to run as a more varied job scheduler or even a master job scheduler  managing a plurality of slave job schedulers . Moreover, while job scheduler  is illustrated as residing within a particular operating environment , it will be understood that is for example purposes only and merely illustrates that job scheduler  is associated with the particular environment . Indeed, job scheduler  may be distributed across a plurality of environments, computers, or data stores, without departing from the scope of the disclosure. Job scheduler  may be proprietary, off-the-shelf, customized, or any other type of job scheduler. Moreover, enterprise  may purchase, download, or otherwise obtain job scheduler  using any appropriate technique.","For example,  illustrates at least a portion of system  that includes server  communicably coupled to first and second operating environments . In this example, each operating environment  includes one job scheduler , each operable to manage jobs  for that particular operating environment . Job manager , illustrated as executing on server , is communicably coupled to first job scheduler through a first adapter and to second job scheduler through a second adapter . But, as illustrated in the respective figures, adapters  may reside on server  and\/or the associated operating environment  as appropriate. For example, as illustrated in , job manager  locally includes, loads, or otherwise invokes adapter for executing job , receiving or retrieving job status , or other communications, commands, instructions, and such to first job scheduler . In another example, as illustrated in , one or more of the adapters  may act as an agent, service, or daemon residing within the operating environment  for the appropriate job scheduler . In this example, job manager  may invoke or interact with remote adapter  using a particular port, socket, or method. In yet another embodiment, illustrated in , job manager  may include one of the job schedulers  operable to schedule heterogeneous jobs  to a plurality of operating environments . In this embodiment, job manager  may be considered a logical all-in-one module with internal job scheduling, adapting, and normalizing processes and capabilities.","As illustrated in , a particular job scheduler  or other application (job manager  or other non-illustrated application) may be designed or implemented as a \u201cmetascheduler\u201d () that caters to more than one type of job  or is compatible with more than one operating environment . In this scenario, job scheduler can manage heterogeneous jobs on different platforms, operating systems, or other environments . When job scheduler provides the information about such jobs, it may automatically normalize the properties of these jobs. As illustrated, the \u201cmetascheduler\u201d could also control subordinate schedulers and , respectively. \u201cMetascheduler\u201d may be operable to consolidate and normalize the information obtained from the subordinates and as appropriate.","In one aspect of operation, illustrated in example , when retrieving the details or properties of jobs, adapter  communicates with job scheduler  to get the raw values of these job properties. After adapter  receives the information, it then translates and normalizes certain properties into a common set of values. In particular, the status property of job  is mapped from the set of job scheduler-specific values into a common or customized set of values. In some cases, more than one raw value may be used to map to the common set of values. For example, a mainframe job may include three properties that determine the normalized job status value. These example properties are: queue name, status and specific status. In this example, the raw values are used in combination to map to a common normalized value.",{"@attributes":{"id":"p-0042","num":"0041"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Normalized","Mainframe Raw Value","Windows\/Unix Raw"]},{"entry":["Value","(Queue\/Status\/Specific Status)","Value"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Running","ACT\/any status except WARN\/any","Running"]},{"entry":[{},"specific status"]},{"entry":["Waiting","REQ\/any status except WARN or","Starting,"]},{"entry":[{},"ERRX\/any specific status except","Inactive, Activated,"]},{"entry":[{},"RESTART RDY\/any status except","Queue Wait"]},{"entry":[{},"WARN\/any specific status"]},{"entry":["Success","CMP\/any status except CANCEL\/any","Success"]},{"entry":[{},"specific status"]},{"entry":["Failure","REQ\/ERRX\/any specific status","Failure"]},{"entry":[{},"REQ\/any status\/RESTART"]},{"entry":["Cancel","CMP\/CANCEL\/any specific status","Terminated"]},{"entry":["Restart",{},"Late to Start"]},{"entry":["On Hold","REQ\/WARN\/HOLD","Hold"]},{"entry":["Late to","REQ\/WARN\/any specific status"]},{"entry":["Start","RDY\/WARN\/any specific status"]},{"entry":["Running","ACT\/WARN\/any specific status"]},{"entry":"Late"},{"entry":["Inactive","FOR\/any status\/any specific status"]},{"entry":["Unknown","other values or combinations","other values"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"In other words, the normalization of job properties can also be performed in job manager  instead of the associated adapter . Indeed, an example Job Status Console of GUI  may also be operable to normalize of the status property of the jobs. That is, adapter  may perform no normalizing translation when the raw data is retrieved from the job scheduler . This information is then returned to the caller, which is job manager  or GUI  as appropriate. The calling application then normalizes the job properties using, for example, a technique of mapping the raw values into a set of common values using normalization policies .",{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 3","b":["130","130","304","308","314","318","320","322","324","130"]},"Connection listener  is any module, library, object, or other process operable to listen (such as on a known port(s)) for connections from clients . For example, connection listener  may include or implement the following example properties:",{"@attributes":{"id":"p-0046","num":"0045"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Name","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"portList","List of server ports"]},{"entry":[{},"serverSocketList","List of server sockets"]},{"entry":[{},"connectionThreadManager","Connection thread manager"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"br":{},"b":"304"},{"@attributes":{"id":"p-0047","num":"0046"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Name","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"void init( )","Initialize the server listener"]},{"entry":[{},"void destroy( )","Destroy the server listener"]},{"entry":[{},"void addPort(int portNumber)","Add a listener port"]},{"entry":[{},"void removePort(int portNumber)","Remove a listener port"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"br":{},"b":["304","302","302","302","130","104","302"]},{"@attributes":{"id":"p-0048","num":"0047"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Name","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"threadList","List of connection threads"]},{"entry":[{},"workerPool","Worker pool"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"br":{}},{"@attributes":{"id":"p-0049","num":"0048"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Name","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["void init( )","Initialize the manager"]},{"entry":["void destroy( )","Destroy the manager"]},{"entry":["void addConnection(Socket","Add a new socket connection and instantiate"]},{"entry":["socket)","a connection thread to handle it"]},{"entry":["void","Destroy the socket connection thread"]},{"entry":"destroyConnection(Socket"},{"entry":"socket)"},{"entry":["void sendMessage","Send a message to the first available"]},{"entry":["(ResponseMessage msg)","connection"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":{},"b":["104","306"]},"Worker pool  is any object or data structure representing the pool of worker threads. Generally, each worker thread object represents a thread that can perform a particular task. For example, the worker thread may accept a unit of work and perform or execute it. When the task is completed, the worker is typically released back into worker pool . Worker threads are handed out to perform tasks on behalf of client . In certain embodiments, worker pool  can be configured to start with a particular number of threads and automatically grow to handle higher loads as necessary. Worker pool  may include the following example properties:",{"@attributes":{"id":"p-0051","num":"0050"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Name","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"workerThreadList","List of worker threads"]},{"entry":[{},"connectionPool","Connection pool"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"br":{}},{"@attributes":{"id":"p-0052","num":"0051"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Name","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["void process( RequestMessage","Process the given request message"]},{"entry":"message)"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":{},"b":["306","308"]},"Request controller  is any module, object, or other process operable to route incoming messages to the appropriate objects  and . For example, the message may first be sent to the appropriate parser object  so that the message may be parsed into a request object. There may be many kinds of request objects, such as one for each type of request. For example, the following table illustrates a number of example request objects:",{"@attributes":{"id":"p-0054","num":"0053"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"84pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Type","Parameter","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Server Connect","server","Name of server"]},{"entry":[{},"user","User name credential"]},{"entry":[{},"password","Password credential"]},{"entry":["Server Disconnect","server","Name of server"]},{"entry":["Get Job Status","server","Name of server"]},{"entry":[{},"view","Name of job status view"]},{"entry":["Scroll Job Status","view","Name of job status view"]},{"entry":[{},"scroll size","Scrolling size"]},{"entry":[{},"scroll direction","Direction (forward or back)"]},{"entry":["Sort Job Status","view","Name of job status view"]},{"entry":[{},"property","Which property to scroll by"]},{"entry":[{},"direction","Ascending or descending"]},{"entry":["Save Job Status","view","Name of job status view"]},{"entry":[{},"old view name","Previous name of job status"]},{"entry":[{},{},"view (if any)"]},{"entry":[{},"other parameters","Other configuration"]},{"entry":[{},{},"parameters"]},{"entry":["Delete Job Status","view","Name of job status view"]},{"entry":["Get Job Details","job name","Name of job"]},{"entry":[{},"server","Server name"]},{"entry":[{},"job number","Job number"]},{"entry":[{},"job properties","Other job parameters"]},{"entry":["Update Job Details","job name","Name of job"]},{"entry":[{},"server","Server name"]},{"entry":[{},"job number","Job number"]},{"entry":[{},"job properties","Other job parameters"]},{"entry":["Job Action","job name","Name of job"]},{"entry":[{},"server","Server name"]},{"entry":[{},"job number","Job number"]},{"entry":[{},"job properties","Other job parameters"]},{"entry":[{},"action properties","Action parameters"]},{"entry":["Get Run Log","server","Server name"]},{"entry":[{},"view","View name"]},{"entry":["Save Run Log","view","View name"]},{"entry":[{},"old view name","Previous name of run log"]},{"entry":[{},{},"view, if any"]},{"entry":["Delete Run Log","view","Delete the run log view"]},{"entry":["Get Prior Run","server","Server name"]},{"entry":[{},"view","View name"]},{"entry":["Save Prior Run","view","View name"]},{"entry":[{},"old view name","Previous name of prior run"]},{"entry":[{},{},"view, if any"]},{"entry":["Delete Prior Run","view","Delete the prior run view"]},{"entry":["Get Alerts","server","Server name"]},{"entry":[{},"view","View name"]},{"entry":["Update Alerts","server","Server name"]},{"entry":[{},"view","View name"]},{"entry":[{},"alert properties","Alert properties"]},{"entry":[{},"filter properties","Filter properties"]},{"entry":["Alert Action","alert properties","Alert properties"]},{"entry":[{},"action parameters","Parameters to alert action"]},{"entry":["Get Dashboard","server","Server name"]},{"entry":[{},"view","View name"]},{"entry":["Update Dashboard","server","Server name"]},{"entry":[{},"view","View name"]},{"entry":[{},"dashboard properties","Dashboard properties"]},{"entry":[{},"filter properties","Filter properties"]},{"entry":["Open session",{},"Create new session"]},{"entry":["Close session","session ID","Destroy session"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}},"br":{}},{"@attributes":{"id":"p-0055","num":"0054"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Name","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"requestId","Request ID"]},{"entry":[{},"session","Session"]},{"entry":[{},"response","Response to this request, if any"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"br":{}},{"@attributes":{"id":"p-0056","num":"0055"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Name","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["int getRequestId( )","Returns the request ID"]},{"entry":["void setRequestId( int id )","Sets the request ID"]},{"entry":["Session getSession( )","Returns the session"]},{"entry":["void setSession( Session","Sets the session"]},{"entry":"session )"},{"entry":["IResponse getResponse( )","Returns the response associated with this"]},{"entry":[{},"request, if any"]},{"entry":["void setResponse(","Sets the response"]},{"entry":"IResponse response )"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":{},"b":["310","310","310","310"]},{"@attributes":{"id":"p-0057","num":"0056"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Name","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["JobStatusParser","Parses requests pertaining to job status"]},{"entry":["JobDetailsParser","Parses requests pertaining to job details"]},{"entry":["JobActionsParser","Parses requests pertaining to job actions"]},{"entry":["ServerParser","Parses requests pertaining to server actions"]},{"entry":["OEParser","Parses requests pertaining to operating environment"]},{"entry":[{},"specific objects"]},{"entry":["AlertParser","Parses requests pertaining to alerts"]},{"entry":["DashboardParser","Parses requests pertaining to dashboard"]},{"entry":["SessionParser","Parses requests pertaining to session"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":{},"b":"310"},{"@attributes":{"id":"p-0058","num":"0057"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Parser","Request Message"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"JobStatusParser","Get Job Status"]},{"entry":[{},{},"Scroll Job Status"]},{"entry":[{},{},"Sort Job Status"]},{"entry":[{},{},"Save Job Status"]},{"entry":[{},{},"Delete Job Status"]},{"entry":[{},"JobDetailsParser","Get Job Details"]},{"entry":[{},{},"Update Job Details"]},{"entry":[{},"JobActionsParser","Job Action"]},{"entry":[{},"ServerParser","Server Connect"]},{"entry":[{},{},"Server Disconnect"]},{"entry":[{},"CA7Parser","Get Run Log"]},{"entry":[{},{},"Save Run Log"]},{"entry":[{},{},"Delete Run Log"]},{"entry":[{},{},"Get Prior Run"]},{"entry":[{},{},"Save Prior Run"]},{"entry":[{},{},"Delete Prior Run"]},{"entry":[{},"AlertParser","Get Alerts"]},{"entry":[{},{},"Update Alerts"]},{"entry":[{},{},"Alert Action"]},{"entry":[{},"DashboardParser","Get Dashboard"]},{"entry":[{},{},"Update Dashboard"]},{"entry":[{},"SessionParser","Open Session"]},{"entry":[{},{},"Close Session"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"After the request object is produced by parser object , the request is routed to one of the handler objects  for subsequent processing. The handler manager processes a request object, which often includes the object ID. Based on the request object ID and other information, the handler manager routes the request object to the correct handler object . Each handler  is responsible for processing the request using operating environment , adapters , and job schedulers  as appropriate. As with parser objects , there are typically many handler objects , such as one for each type of request. In certain embodiments, each handler  is responsible for performing or requesting the work that is requested. For example, each handler may be operable to load, invoke, or communicate with the appropriate adapter  based on the request object. As a result of its processing, a response object is produced. This response object is returned along with the request object, after processing (typically through adapter ). The following table shows an example list of handlers :",{"@attributes":{"id":"p-0060","num":"0059"},"tables":{"@attributes":{"id":"TABLE-US-00014","num":"00014"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Name","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["JobStatusHandler","Processes requests pertaining to job status"]},{"entry":["JobHandler","Processes requests pertaining to job details"]},{"entry":["JobHandler","Processes requests pertaining to job actions"]},{"entry":["ServerHandler","Processes requests pertaining to server actions"]},{"entry":["OEHandler","Processes requests pertaining to OE specific objects"]},{"entry":["AlertHandler","Processes requests pertaining to alerts"]},{"entry":["DashboardHandler","Processes requests pertaining to dashboard"]},{"entry":["SessionHandler","Processes requests pertaining to the session"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":{}},{"@attributes":{"id":"p-0061","num":"0060"},"tables":{"@attributes":{"id":"TABLE-US-00015","num":"00015"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Handler","Request"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"JobStatusHandler","Get Job Status"]},{"entry":[{},{},"Scroll Job Status"]},{"entry":[{},{},"Sort Job Status"]},{"entry":[{},{},"Save Job Status"]},{"entry":[{},{},"Delete Job Status"]},{"entry":[{},"JobHandler","Get Job Details"]},{"entry":[{},{},"Update Job Details"]},{"entry":[{},{},"Job Action"]},{"entry":[{},"OEHandler","Get Run Log"]},{"entry":[{},{},"Save Run Log"]},{"entry":[{},{},"Delete Run Log"]},{"entry":[{},{},"Get Prior Run"]},{"entry":[{},{},"Save Prior Run"]},{"entry":[{},{},"Delete Prior Run"]},{"entry":[{},"AlertHandler","Get Alerts"]},{"entry":[{},{},"Update Alerts"]},{"entry":[{},{},"Alert Action"]},{"entry":[{},"DashboardHandler","Get Dashboard"]},{"entry":[{},{},"Update Dashboard"]},{"entry":[{},"SessionHandler","Open session"]},{"entry":[{},{},"Close session"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"br":{},"b":["312","314","104"]},"View controller  routes a processed request object (along with its response object, if any) to the correct objects. First, the request is fed to a view manager, which is operable to generate a view for use by GUI . The view manager provides, calls, or other executes view handlers to process requests into views. For example, it may route the request to the correct view handler. There are any number of handler objects, such as one for each type of view.",{"@attributes":{"id":"p-0063","num":"0062"},"tables":{"@attributes":{"id":"TABLE-US-00016","num":"00016"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Name","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["JobStatusHandler","Processes responses pertaining to job status"]},{"entry":["JobDetailsHandler","Processes responses pertaining to job details"]},{"entry":["JobActionsHandler","Processes responses pertaining to job actions"]},{"entry":["ServerHandler","Processes responses pertaining to server actions"]},{"entry":["CA7Handler","Processes responses pertaining to CA-7 specific"]},{"entry":[{},"objects"]},{"entry":["AlertHandler","Processes responses pertaining to alerts"]},{"entry":["DashboardHandler","Processes responses pertaining to dashboard"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":{},"b":"104"},{"@attributes":{"id":"p-0064","num":"0063"},"tables":{"@attributes":{"id":"TABLE-US-00017","num":"00017"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"91pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Type","Property","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Server Connect",{},{}]},{"entry":["Server Disconnect",{},{}]},{"entry":["Get Job Status","jobStatus","Job Status object"]},{"entry":["Scroll Job Status","jobStatus","Job Status object"]},{"entry":["Sort Job Status","jobStatus","Job Status object"]},{"entry":["Save Job Status","jobStatus","Job Status object"]},{"entry":"Delete Job Status"},{"entry":["Get Job Details","job","Job object"]},{"entry":["Update Job Details","job","Job object"]},{"entry":["Job Action","job","Job object"]},{"entry":[{},"action returns","Other action return values"]},{"entry":["Get Run Log","RunLog","Run Log object"]},{"entry":["Save Run Log","RunLog","Run Log object"]},{"entry":"Delete Run Log"},{"entry":["Get Prior Run","PriorRun","Prior Run object"]},{"entry":["Save Prior Run","PriorRun","Prior Run object"]},{"entry":["Get Alerts","alerts","Alerts object"]},{"entry":["Update Alerts","alerts","Alerts object"]},{"entry":["Alert Action","alert","Alert object"]},{"entry":[{},"action returns","Other action return values"]},{"entry":["Get Dashboard","dashboard","Dashboard object"]},{"entry":["Update.Dashboard","dashboard","Dashboard object"]},{"entry":["Open session","session","Session object"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}},"br":{}},{"@attributes":{"id":"p-0065","num":"0064"},"tables":{"@attributes":{"id":"TABLE-US-00018","num":"00018"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Name","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"request","Request associated with this"]},{"entry":[{},{},"response, if any"]},{"entry":[{},"buffer","Buffer containing response"]},{"entry":[{},"exception","Exception, if any"]},{"entry":[{},"errorMessage","Error message, if any"]},{"entry":[{},"errorCode","Error code, if any"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"br":{}},{"@attributes":{"id":"p-0066","num":"0065"},"tables":{"@attributes":{"id":"TABLE-US-00019","num":"00019"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Name","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["IRequest getRequest( )","Returns the request associated with this"]},{"entry":[{},"response"]},{"entry":["void setRequest( IRequest","Sets the request"]},{"entry":"request )"},{"entry":["StringBuffer getBuffer( )","Returns the response buffer"]},{"entry":["void setBuffer( StringBuffer","Sets the response buffer"]},{"entry":"buffer )"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"Illustrated job manager  also includes session manager . In this embodiment, session manager  is any module generally responsible for handling sessions. In other words, it creates, stores, and destroys sessions that are assigned to each unique client , often utilizing a map of the current sessions. The session typically maintains persistent information for a unique client  for the lifetime of the connection. Certain back-end objects specific to client  are stored and reachable from the client's session. In certain embodiments, session manager  implements the following example methods:",{"@attributes":{"id":"p-0068","num":"0067"},"tables":{"@attributes":{"id":"TABLE-US-00020","num":"00020"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Name","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Session createSession( )","Creates a new session"]},{"entry":["void destroySession(","Destroy the given session"]},{"entry":"Session session )"},{"entry":["Session findSession( String","Return the session that matches the given"]},{"entry":["sessionId )","session ID, if any"]},{"entry":["void init( )","Initialize the session manager"]},{"entry":["void destroy( )","Destroy the session manager"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":{},"b":["318","318"]},"Template manager  may be any module operable to manage templates, which are generally stored as objects in HTML files with placeholder variables representing dynamic sections. But in certain circumstances, templates may not be complete <html> blocks. Some may represent small sections of a complete page such as a frame, table, graph, etc. At runtime, the component sections are typically replaced by the actual data. Template objects are identified by their file names. Since they are often uniquely named on the file system, there may be no need to invent a new tagging scheme to identify them. Once requested, executed, or otherwise located, a transformation of the template yields the output that is returned to the user through GUI . During startup, initialization, or at any other appropriate time, job manager  reads in or loads the desired templates. Templates are often preprocessed after they are read from the file system. Each template may be encapsulated inside an object that uses a vector. Each entry in the vector contains an internal object that is either a static portion of the template or a dynamic portion represented by a variable name. When the entries are traversed in order and printed out, the resulting output resembles the template file. This process may be called printing. The template object exposes the printing functionality with a parameter. The caller provides a map that contains variable names and values as its parameter. When the template object encounters a variable name in the vector while printing, it uses the map to resolve the variable name into a value. That value is then printed in lieu of the variable; otherwise, the variable may be deemed empty. Sometimes, template manager  executes code in response to a variable entry in the vector. The caller can register callbacks with the object for this scenario. Callbacks can be registered for specific variable name, index number, or all variables. Parameters to a callback include the current vector entry and working buffer of the printing process. Template manager  hands these objects out to transformers as necessary. Transformers can use the same template object simultaneously. In this scenario, the template object is responsible for safely supporting multiple callers.","Adapter manager  is responsible for handling adapter wrappers, often utilizing a map of adapters. The adapter wrapper encapsulates a local or back-end adapter . By providing a high-level interface layer on top of each adapter , the wrapper provides a consistent and semantic set of methods to each type of job scheduler. Typically, adapter manager  creates, stores, and destroys wrappers that are assigned to each unique back-end connection or environment . In certain embodiments, adapter manager  implements the following example methods:",{"@attributes":{"id":"p-0071","num":"0070"},"tables":{"@attributes":{"id":"TABLE-US-00021","num":"00021"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Name","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["AdapterWrapper","Creates or returns the adapter wrapper for"]},{"entry":["getAdapter( String server )","this server"]},{"entry":["void init( )","Initialize the adapter manager"]},{"entry":["void destroy( )","Destroy the adapter manager"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"Profile manager  is responsible for handling profile objects such as, for example, servers, users, groups and views. In this example, the server profile object encapsulates a configured server, the user profile object encapsulates a user record, the group profile object encapsulates a Portal group record, and the view profile object encapsulates a view record. The profile manager  communicates with configuration, Portal, and its own data store to create, update and delete these objects. In certain embodiments, profile manager  includes the following example methods:",{"@attributes":{"id":"p-0073","num":"0072"},"tables":{"@attributes":{"id":"TABLE-US-00022","num":"00022"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Name","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["ServerProfile getServer","Returns the server profile matching the given"]},{"entry":["(String serverName )","name"]},{"entry":["UserProfile getUser(String","Returns the user profile matching the given"]},{"entry":["userName )","name"]},{"entry":["GroupProfile getGroup","Returns the group profile matching the given"]},{"entry":["(String groupName )","name"]},{"entry":["ViewProfile getView","Returns the view profile matching the given"]},{"entry":["(String userName, String","name, that is accessible to the user"]},{"entry":"viewName )"},{"entry":["List getServers( )","Returns the list of servers"]},{"entry":["List getUsers( )","Returns the list of users"]},{"entry":["List getGroups( )","Returns the list of groups"]},{"entry":["List getViews(String","Returns the list of views that are accessible"]},{"entry":["username )","to the user"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"It will be understood that the foregoing sub-modules, properties, and methods are for illustration purposes only. Indeed, each of these sub-modules, properties, and methods may or may not be present in certain job managers . Put another way, job manager  includes any processes or data storage operable manage jobs  and may include none, some, or all of the foregoing example embodiments without departing from the scope of the disclosure.","In one aspect of operation, a flow describes a path of execution of a client request through job manager . The request typically originates from GUI  and results in a new or updated page that is returned to the browser. When the servlet receives a request, it is routed the request controller . This controller  produces a request object that encapsulates the HTTP request and response. Request controller  then forwards this object to parser manager . Parser manager  is comprised of one or more parsers. Each parser inspects the request and breaks it down into various pieces of information as appropriate. For example, the session ID and request ID are extracted. The parser may use this information to look up objects that are relevant to the request. For example, the session ID translates to a session object. When control returns to request controller  from the parser, the request object is forwarded to handler manager .","Handler manager  is comprised of one or more handlers. Based on information in the request object such as the request ID, handler manager  forwards the request to the corresponding handler. Each handler may be considered an \u201catomic\u201d piece of business logic dedicated to servicing a request. A handler often depends on other objects to accomplish its work. Some of these objects include adapters , model objects, and other manager objects. For example, when a job status handler executes, it uses the correct adapter instance  in conjunction with the job status model object to accomplish its work. When the handler finishes its work, it produces a response object. A response object can contain different pieces of information such as output data, error codes, and others. Handler manager  returns this response object to request controller .","Request controller  forwards the response object to view controller . View controller  is comprised of one or more view objects. Each object is dedicated to producing a specific view such as job status. The job status response object provides the information to the view to produce the output for the browser. Views are normally closely tied to templates. Template manager  provides HTML templates that form the basis for the output. The final output is a combination of data from a response object and a template. After the output is composed, view controller  sends it to client . Control then returns to request controller  and out of the servlet.",{"@attributes":{"id":"p-0078","num":"0077"},"figref":["FIGS. 4A-C","FIG. 1","FIG. 4A"],"b":["100","144","140","142","140","142","106","130","140","142","140","142","144","130"]},"Referring to , dashboard object  then processes the identified properties. In the illustrated embodiment, dashboard object  determines statistical information using the identified properties. Initially, dashboard object  determines a total number of jobs, a total number of alerts, a count of each job state, and a count of each alert state. As discussed above, system  may process identified properties in any other suitable manner in order to provide a summary of the user group. In the illustrated embodiment, dashboard object  determines a total of three jobs, a total of three alerts, a count of three success job states, a count of one failed job states, a count of one critical alert state, and a count of two open alert states. It will be understood that the illustrated properties are for illustration purposes only and system  may process some, none, all, or different properties without deviating from the scope of this disclosure. After determining these metrics, dashboard object  generates statistical information using the totals and counts. In the illustrated embodiment, dashboard object  determines a percentage of each job state in accordance with the total number of jobs and a percentage of each alert state in accordance with the total number of alerts. As a result, dashboard object  determines that 66.67% of the jobs were successful, 33.33% of the jobs failed, 33.33% of the alerts were critical, and 66.67% of the alerts were open. These results may then be presented to a user of system  thereby providing a summary of the user group.","Referring to , dashboard object  determines a severity level of a user group using the statistical information. Initially, dashboard object  identifies one or more filters in response to any appropriate event. Dashboard object  may identify filters i) periodically; ii) in response to a selection by a user of system ; iii) in response to determining statistical information; and\/or iv) based on any other event. As discussed above, the filter criteria may include one or more operators and one or more associated values that represent how dashboard object  is to compare the statistical information. In the illustrated example, portions of the statistical information will be compared with a value to determine if it is greater than that value. More particularly, the filters may be used to determine if one or more job states and\/or one or more alert states exceed a threshold such as a specified percentage. In the event that the statistical information matches the filter criteria, dashboard object  will assign a severity level in accordance with the filter. Continuing with the illustrated example, dashboard object  determines that the statistical information matches dashboard filter . The failed job states (33.33%) exceed the failed jobs threshold (25%) and the open alert state (66.67%) exceed the open alert threshold (60%) thus matching dashboard filter . As a result of this match, dashboard object  assigns or otherwise associates the severity level value \u201cWarning\u201d to the associated user group. The operational aspects of heterogeneous job dashboard system  illustrated in  are for illustration purposes only and merely represent an example of the various techniques. In other words, system  may perform some, none, or all operational aspects, as well as others, without departing from the scope of this disclosure.",{"@attributes":{"id":"p-0081","num":"0080"},"figref":"FIG. 5","b":["144","144","144","502","504","502","502","502","504","504","504","504","504","504","504","502"]},{"@attributes":{"id":"p-0082","num":"0081"},"figref":"FIGS. 6A-E","b":["116","116","100","116"],"i":["a","e"]},"Turning to the illustrated embodiments,  illustrates an example job requirements or job properties view . In this view , the user may be able to view or modify various properties of job  or jobset. In other words, job properties view is a graphical representation of the objects that can be included in the definition of the job. Job objects may include: job predecessor; job successor; triggers; calendar; VRM requirements; dataset predecessors; user requirements; and network predecessors. The dialog may be a modeless frame that contains a context sensitive panel for displaying the graphical view of the selected item's objects. This frame may contain a palette on the left side that has a list of objects that can be created for the selected object. On the right may be the graphical layout of the objects for the selected item. Users may have the option to drag items from the palette and drop them onto the graphical layout. Dragging and dropping an object may create a new object, but the user often fills in the properties for that object in the main view. Upon dropping the object, an icon may appear in the graphical layout. Also, the main view may select the new object and display its properties so the user may fill in any missing attributes. Until the user fills in required properties, all icons representing the new object may have a graphical design that alerts the user that the object is incomplete.","Accordingly, job properties view gives the user the ability to drag existing objects into the job properties view from the main panel's tree view. Job properties view may not allow invalid objects to be dropped and the cursor may change to a \u201cNo\u201d symbol to notify the user. When a valid object is dropped, an icon may appear in the job properties view  layout and the main view may select the dropped object and display its properties. Job properties view may always be locked onto the object that was selected when it was launched. Users may have the ability to select objects in the main view without job properties view changing. When the user is finished changing the requirements for job  or jobset, the applet may provide the option to either close the dialog or change the job properties view 's selection to edit another object's requirements. Job properties view may display a blank panel if the user deletes the selected job  or jobset from the view. When the user selects an object in job properties view , the main view may select the same object and display its properties.",{"@attributes":{"id":"p-0085","num":"0084"},"figref":"FIG. 6B","b":["116","116","116","116"],"i":["b","b ","b ","b "]},{"@attributes":{"id":"p-0086","num":"0085"},"figref":"FIG. 6C","b":["116","116","116"],"i":["c ","c ","c "]},{"@attributes":{"id":"p-0087","num":"0086"},"figref":"FIGS. 6D and 6E","b":["116","116","116","116"],"i":["d ","e","d ","e "]},{"@attributes":{"id":"p-0088","num":"0087"},"figref":"FIGS. 7A-7D","b":["100","116","116","116","116"],"i":["a","e","f","i "]},"Turning to the illustrated embodiments,  illustrates an example dashboard view . In this view , the user may be able to view statistical information and a severity level of jobs and alerts of a user group. In other words, dashboard view is a graphical representation of a summary of the user group in the enterprise. In the illustrate embodiments, dashboard view includes a job table and an alert table. Each table includes a spreadsheet with several columns and rows, with each intersection comprising a cell. Each cell is populated with information associated with jobs or alerts. The illustrated job table includes three columns: type, value, and percentage. The job table includes a row for each job type (success, failure, running, and other) and a row for total jobs. The illustrated alert table includes the same three columns: type, value, and percentage. The alert table includes a row for each alert type (critical, high, medium, low, open, acknowledged, and closed). In addition, dashboard view indicates a severity level value associated with a user group.",{"@attributes":{"id":"p-0090","num":"0089"},"figref":"FIGS. 7B-7D","b":["116","116","116","116","116","116","116","116","116"],"i":["g","i","f","g ","g ","g ","h ","h","i "]},{"@attributes":{"id":"p-0091","num":"0090"},"figref":"FIG. 8","b":["800","150","106","800","150","106","106","130","800","100"]},"Method  begins at step , where job manager  receives a job request from the user, typically using client . But, as described above, the user may submit job request directly to server  without departing from the scope of method . The job request may comprise one or more of the following types of jobs: an update job, a command, a task, or any other appropriate enterprise job or request. Next, at step , job manager  authenticates the user. This authentication may include verifying that the user can submit this particular type of job, can update the requested or associated data, or any other security or authentication procedure or technique. Of course, while not illustrated, modules other than job manager  may perform this authentication and communicate the results to job manager . Job manager  then identifies a job object  using the received job request at step . For example, the job request may include a job identifier or other pointer. In this example, job manager  queries the plurality of job objects  to determine the particular job object  associated with the request based on the pointer. Once the appropriate job object  is identified, Job manager  identifies operating environments  for the job at step . As described above, in the case of a distributed job, there may be more than one operating environment  associated with the job. Job manager  may identify the appropriate operating environment  using any suitable technique. For example, job manager  may determine the appropriate operating system to execute the job. In another example, job manager  may identify the location of the data storage associated with the job request. In yet another example, job manager  may identify the appropriate virtual location for executing the job request. Next, at step , job manager  invokes a job scheduler  in the identified operating environment . Once job manager  has invoked job scheduler, it may execute the job using the invoked job scheduler  at step . It will be understood that this execution may include an immediate submission, adding the job to queue associated with the invoked job scheduler, or any other appropriate technique.",{"@attributes":{"id":"p-0093","num":"0092"},"figref":"FIG. 9","b":["900","900","130","130","100"]},"Method  begins at step , where job manager  receives a status request from a user, typically a client . Next, at step , job manager  identifies a user group using the request. For example, job manager  may identify that a user group associated with print requests. At step , job manager  identifies a first dashboard object  associated with the user group. After identifying the first dashboard object , job manager  identifies job objects  and alert objects  associated using dashboard object . Returning to the print example, job manager  may identify job objects  that represent print request and alert objects  associated with printing. At decisional step , if the user group is associated with an additional dashboard object , then job manager  identifies the next dashboard object  at step . In the example, the first dashboard object  may be associated with print request in operating environment executing UNIX and the next dashboard object  may be associated with operating environment executing z\/OS. Otherwise, execution proceeds to step . Job manager  determines a total job count and a count for each job state associated with the user group at step . In the print example, job manager  may determine a total number of successful print jobs and failed print jobs in operating environments and . Next, at step , job manager  determines percentage of job states in accordance with dashboard object . At step , job manager  determines a total alert count and a count for each alert state associated with the user group. Again turning to the print example, alert objects  may represent specific print jobs and jobsets that were being monitored that entered the failure state, so job manager  may determine the number of monitored print request that failed and monitored jobsets that failed. Next, at step , job manager  determines percentages of alert states in accordance with dashboard object .","After determining the statistical information associated with the user group, job manager  identifies a dashboard filter associated with the user group at step . Job manager  then identifies first criteria at step . In the print example, the dashboard filter criteria may include a 75% threshold for failed jobs. Next, at step , job manager  compares the criteria to associated percentages in accordance with dashboard object . Turning to the example, job manager  determines whether the percentage of failed print request exceeds 75%. If job manager  determines a match at decisional step , then execution proceeds to decisional step . If additional criteria are included in the dashboard filter, then job manager  identifies the next criteria at step . In the example, the dashboard filter criteria may additional direct job manager  to determine whether the percentage of monitored jobsets that failed exceed 25%. If additional criteria are not included in the dashboard filter, then job manager  assigns a severity level value to the user group in accordance with the dashboard filter. Returning to the example, in the event that the dashboard criteria are matched, job manager  will assign a critical severity level to the print jobs in heterogeneous operating environments and . Returning to decisional step , if job manager  does not determine a match, then execution ends.","The preceding flowcharts and accompanying description illustrate exemplary methods  and . System  contemplates using any suitable technique for performing these and other tasks. It will be understood that method  and  are for illustration purposes only and that the described or similar techniques may be performed at any appropriate time, including concurrently, individually, or in combination. In addition, many of the steps in these flowcharts may take place simultaneously and\/or in different orders than as shown. Moreover, system  may use methods with additional steps, fewer steps, and\/or different steps, so long as the methods remain appropriate.","Although this disclosure has been described in terms of certain embodiments and generally associated methods, alterations and permutations of these embodiments and methods will be apparent to those skilled in the art. Accordingly, the above description of example embodiments does not define or constrain this disclosure. Other changes, substitutions, and alterations are also possible without departing from the spirit and scope of this disclosure."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF DRAWINGS","p":[{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIGS. 2A-E"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0010","num":"0009"},"figref":["FIGS. 4A-C","FIG. 1"]},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":["FIGS. 6A-E","FIG. 1"]},{"@attributes":{"id":"p-0013","num":"0012"},"figref":["FIGS. 7A-D","FIG. 1"]},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 9"}]},"DETDESC":[{},{}]}
