---
title: Service enabled network
abstract: In one embodiment, a service enabled network (SEN) controller receives, from a control plane of a network service device, service instructions for corresponding network services. The SEN controller may then distribute the service instructions for the network services to appropriate network access devices within the computer network, such that each of the network access devices may correspondingly implement the network services at their respective data planes, thus providing a distributed implementation of the network service within the computer network.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09531716&OS=09531716&RS=09531716
owner: Cisco Technology, Inc.
number: 09531716
owner_city: San Jose
owner_country: US
publication_date: 20090807
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","DESCRIPTION OF EXAMPLE EMBODIMENTS","Overview","DESCRIPTION"],"p":["The present disclosure relates generally to computer networks, and, more particularly, to administering network services within computer networks.","Network services, such as firewalls, server load balancing, etc., are value-added features that are commonly added to a computer network in the form of specialized appliances. These standalone appliances typically depend on the physical topology of the network and are not a fully integrated solution, have limited scalability, and add unnecessary complexity to network management. In addition, current network design is primarily ad-hoc, generally with no central control and management and no clear boundaries or admission control, often making it difficult to deploy new network services and security policies.","According to one or more embodiments of the disclosure, a network service device, which is configured to provide one or more network services for traffic in a computer network, transmits service instructions for the network services from its control plane to a service enabled network (SEN) controller (e.g., via an API). The SEN controller manages the service instructions and maintains a topology of network access devices, which are configured to control transmission of traffic between the computer network and devices attached to the network access devices. The SEN controller may then distribute the service instructions for the network services to the network access devices (e.g., via another API on the network access devices). Each of the network access devices may correspondingly implement the network services at their respective data planes, thus providing a distributed implementation of the network service.","A computer network is generally a geographically distributed collection of nodes interconnected by communication links and segments for transporting data between end nodes, such as personal computers and workstations. Many types of networks are available, with the types ranging from local area networks (LANs) to wide area networks (WANs). LANs typically connect the nodes over dedicated private communications links located in the same general physical location, such as a building or campus. WANs, on the other hand, typically connect geographically dispersed nodes over long-distance communications links, such as common carrier telephone lines, optical lightpaths, synchronous optical networks (SONET), or synchronous digital hierarchy (SDH) links. The Internet is an example of a WAN that connects disparate networks throughout the world, providing global communication between nodes on various networks. The nodes typically communicate over the network by exchanging discrete frames or packets of data according to predefined protocols, such as the Transmission Control Protocol\/Internet Protocol (TCP\/IP). In this context, a protocol consists of a set of rules defining how the nodes interact with each other. Computer networks may be further interconnected by an intermediate network node, such as a router or switch, to extend the effective \u201csize\u201d of each network. An enterprise network is a type of network that, as will be understood by those skilled in the art, has qualities of both a LAN and a WAN, interconnecting a single enterprise (LAN-like) over large distances (WAN-like).",{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1","b":["100","110","120","130","140","150","105","165","145","100"]},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2A","b":["200","120","130","150","110","210","220","240","250","210","100","210"]},"The memory  comprises a plurality of storage locations that are addressable by the processor(s)  and the network interfaces  for storing software programs and data structures associated with the embodiments described herein. The processor  may comprise necessary elements or logic adapted to execute the software programs and manipulate the data structures. An operating system  (e.g., the Internetworking Operating System, or IOS\u2122, of Cisco Systems, Inc., or any other suitable operating system), portions of which are typically resident in memory  and executed by the processor(s), functionally organizes the node by, inter alia, invoking network operations in support of software processes\/modules executing on the device. Generically, memory  may comprise various processes , application programming interfaces (APIs) , tables , cache entries , data , etc. It will be apparent to those skilled in the art that other types of processors and memory, including various computer-readable media, may be used to store and execute program instructions pertaining to the inventive techniques described herein.","As an example, for access devices such as routers, a routing process may contain computer executable instructions executed by processor  to perform functions provided by one or more routing protocols, such as the Interior Gateway Protocol (IGP) (e.g., Open Shortest Path First, \u201cOSPF,\u201d and Intermediate-System-to-Intermediate-System, \u201cIS-IS\u201d), the Border Gateway Protocol (BGP), etc., as will be understood by those skilled in the art. These functions may be configured to manage a forwarding information database (not shown) containing, e.g., data used to make forwarding decisions. In particular, changes in the network topology may be communicated among routers using routing protocols, such as the conventional OSPF and IS-IS link-state protocols (e.g., to \u201cconverge\u201d to an identical view of the network topology).",{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 2B","b":["200","210","220","240","270","290","280","244","270","270","270"]},"The data plane  (or forwarding plane or data path) defines the part of the device  that controls the handling of traffic\/packets arriving on an inbound interface (e.g., routing and\/or forwarding). For instance, the data plane may decide to forward the traffic on a particular outbound interface, drop the traffic, maintain time-to-live (TTL) functionality, etc. Generally, the passage from an input interface directly to an output interface (or dropped), through the data plane with minimum modification, is called a \u201cfast path\u201d of the device. If the packet needs significant processing, such as segmentation (or for a service device, performing a particular service), the traffic may use a \u201cslow path\u201d of the device traversing the control plane  for further processing (sometimes called a specific \u201cservices plane,\u201d though included herein generically within the control plane).","Communication between the control plane  and data plane  may be accomplished through the use of an application programming interface (API) . Specifically, an API in an interface that defines the ways by which an application program (process, module, etc.) may interact with other entities, such as libraries or the operating system . For instance, an API determines the conventions to employ, such as for routines, data structure access, protocols, etc., used to communicate from the requesting processes\/modules (e.g., remote procedure calls). That is, an API specifies an interface and controls the behavior of the objects specified in that interface.","As per the example shown in , assume further that the device shown is a network service device , such as a firewall. The control plane  of the firewall may receive a set of rules  (e.g., from an administrator), which may be converted into instructions  and transmitted by the internal API  for use by the data plane  in implementing the rules (e.g., dropping packets to\/from particular network addresses). The data plane  may then implement the rules during the processing of packets (e.g., the fast path) or may relay packets to the control plane (e.g., service plane) on the slow path for in-depth processing (e.g., behavioral monitoring, etc.).","Typically, network service devices are placed in-line of a data path in order to have their services rendered. For instance, a firewall would generally be placed at the entrance or exit of a LAN in order to control traffic flowing into and out of the particular LAN. The same would apply to server load balancers (SLBs), being placed between end users and the servers in order to direct the client-server traffic accordingly. A relatively recent movement in networks is to remove the necessity of having network service devices be located in-line of the data path. In particular, the Service Insertion Architecture (SIA) provides an architecture for creating service chains via traffic tagging and tunneling. That is, SIA enables the tunneling of traffic to an appropriate network service device (e.g., based on a service tag) in order to decouple enforcement of services from their physical location in the network, thus moving packet transmission from a physical topology to a logical topology.","Specifically, an illustrative SIA network provides a platform independent, consistent architecture for adding high touch services to a network without requiring topology changes. This architecture has several components. First, service nodes and service clients may \u201cregister\u201d with a \u201cservice directory\/broker\u201d (SDB), which is configured to store and provide a consistent domain-wide view of available services. For instance, a service node may register with the SDB that it is able to provide firewall services for the network, while a service client may register with the SDB that it desires firewall services. In response, the SDB returns a \u201cservice header\u201d to each of the service node and service client that is specific to the registered service. According to a second component of the architecture, traffic (packets) is redirected with a prepended service header from service clients to an appropriate service node in the network, independent of physical location, such that the service node may perform the services as requested by the service header (e.g., firewalling). In this manner, service clients need not perform the services desired\/required by the traffic, but may instead redirect the traffic to service nodes within the network that are specifically configured to provide such services. The traffic may then be forwarded from the service nodes toward its destination after the services have been performed.","While SIA has proven to be a useful network architecture, in its current form SIA does not scale well with increased use of network services. In particular, while SIA may ease the configuration burden of a network (e.g., offloading the placement and configuration of network services to a topology-independent service node), it does not ease the data path load on the service node itself. In other words, due to distributed service clients sending their service-oriented traffic to the service nodes for processing, the service nodes themselves may become overburdened, creating a bottleneck in the network. Additionally, as noted above, current network design is primarily ad-hoc, generally with no central control and management and no clear boundaries or admission control, also limiting the capability for straightforward traffic measurements.","Service Enabled Network (SEN)","According to one or more embodiments herein, a SEN provides an infrastructure through which network elements (switches, routers, bridges, hubs, service devices, etc.) can expose their service features and capabilities through a set of APIs. In particular, as described below, a central SEN controller  abstracts the complexity of the interrelated network elements and the network topology changes, and exposes these resources through abstract unified network-level APIs. In this manner, network service devices  can register with the SEN controller and leverage these APIs to expand and distribute their data path (data plane) instructions to the capable network access devices \/. SEN thus hides the churn and complexity of topology changes from the network service devices by caching the instructions and updating a newly joined access device with the up-to-date configuration. Accordingly, a SEN network goes beyond the basic transport of packets, and may be configured to recognize, monitor, scale, protect, and accelerate applications, blending services and networking as a single distributed (and reusable\/updateable) infrastructure with well defined interfaces\/boundaries.","At a basic level, then, a SEN comprises: i) a SEN controller; ii) a control plane for a network service device configured to provide one or more network services for traffic in the computer network and to receive service instructions for the network services; iii) a data plane for each of one or more network access devices configured to control transmission of traffic between the computer network and devices attached to the computer network via the network access devices; and iv) a way to distribute the service instructions for the network services from the control plane to the one or more data planes via the SEN controller for distributed implementation of the network services of the network service device control plane at the one or more data planes of the one or more network access devices.","A visual explanation of this may be found in , which each illustrate an example logical view of a SEN network. First, however, returning to , recall the arrangement of the example firewall, having a control plane  and data plane  interconnected via an internal API . Referring now to , the control plane (now ) of a network service (such as the firewall) is separated from the data plane (now ) via an externalized SEN API . As such, SEN separates the service device's data plane  (e.g., the packet handling, topology-oriented portion) from its control plane  (e.g., the service management portion). In other words, Service Enabled Networks introduce a service platform that provides a unified infrastructure on which to run network services by abstracting the platform and topology specific aspects away from the service applications (devices ) in order to decouple the service development from network infrastructure management. As shown in  below, now that the control and data planes have been separated by the SEN APIs  (e.g., and the SEN  itself), the services provided by the single network service device  may be distributed throughout the SEN.","While network access devices, such as switches and routers, provide the channel over which communication may take place, network service devices are enabled to add value in various levels of the communication. For instance, various packet processing functions may be capable of inspecting, transforming, and taking actions based on information carried on or across packets, flows, sessions, etc. at any appropriate network layer (Layer-2 through Layer-7, \u201cL2-L7\u201d based on the known OSI model, i.e., a data link layer (L2), a network layer (L3), a transport layer (L4), a session layer (L5), a presentation layer (L6), or an application layer (L7)). For example, various security based services and virtualization based services may be performed upon traffic as it flows through the network, such as in accordance with a particular service type (e.g., flow through or store and forward) and a particular integration mode (e.g., routed mode, transparent, or promiscuous). Illustrative services include, but are not limited to: firewall (FW) services; intrusion detection services (IDS); intrusion prevention (or protection) services (IPS); distributed measurement services; access control list (ACL) services; identity-based access services; server load balancing (SLB) services; file system virtualization (FSV) services; wide area application services (WAAS); content scan services; signature-based services; and anomaly detection services (each as will be understood by those skilled in the art).","Continuing the visual in detail with reference to , each network service device , which may simply consist of a framework (e.g., software, OS, etc.) that executes on standard PC platforms, comprises a control plane  that is configured to receive and manage service instructions (or \u201crules\u201d) for the network services provided by the particular device . For instance, one device may provide firewall services, another load balancing services, etc. These service instructions may then be passed to a SEN service device (SD) API  that is configured to transmit the service instructions for the network services to the SEN controller  (as instructions ). Notably, in certain scenarios, such as where the service instructions are proprietary, nonstandard, or otherwise, the SD API may also be configured to convert the service instructions to raw feature instructions prior to service instruction transmission to the SEN controller (e.g., to a raw feature instruction format used within the SEN  and\/or by the SEN controller , as may be appreciated by those skilled in the art).","The central SEN controller itself acts as a registry point for both network service devices and network access devices (e.g., switches\/routers). It keeps a registry of these elements and their topological attributes, and a list of their data-plane processing capabilities\/features. It also monitors their liveness status. Network service devices  may \u201cregister\u201d with SEN controller, such that the SEN controller receives the corresponding service instructions for a particular network service to be applied to traffic in the SEN computer network. In this manner, the network service devices  may leverage the unified network-level APIs to offload and distribute a portion of their functionalities (instructions) to the network access devices throughout the network (e.g., at the network perimeter, described below).","The SEN controller  is responsible for distributing the service instructions to the appropriate network access nodes. Accordingly, the controller effectively \u201chides\u201d the complexity of topology changes from the network service devices , since the network service devices are removed from the underlying topology via the SEN controller. Specifically, the SEN controller  may cache the full configuration instructions (rules) in a storage location  along with a stored topology of the SEN  (e.g., a database of registered access devices, described below) at location  (e.g., in a memory ).","Once the SEN controller determines a set of network access devices \/ that are able to implement (and interested in implementing) a particular set of network services, the SEN controller may distribute the service instructions () to those network access devices for distributed implementation of the network services. Illustratively, an API  of the access device is configured to communicate a registration with the SEN controller , where the registrations has an indication of network service capabilities (and desires) of the data plane of the access device. As such, the SEN controller may receive these registrations and may determine the one or more network access devices to which the service instructions should be distributed (e.g., multicast).","The network access devices \/, as they are referred to herein, generally comprise one or more network interfaces that are configured to allow access to the SEN computer network for one or more attached devices, such as computers, workstations, end stations, or, in the case of devices , network devices from other networks (e.g., WAN ). In particular, in accordance with one or more embodiments herein, a service enabled perimeter of the SEN computer network  is defined by the network access devices. In other words, the SEN  may be divided between a core (not shown) of network switching\/routing devices and a perimeter of network access devices \/ that have services enabled thereon. Accordingly, the services are distributed among (pushed to) the edge devices (access devices or perimeter switches\/routers) of a network, such that policies may be implemented to control traffic entering and exiting the SEN at its perimeter.","The network access devices \/ each have a corresponding SEN access device (AD) API  to receive the service instructions from the SEN controller , and to transmit those instructions (rules ) to the corresponding data plane of the access device (e.g., , , , etc., \u201c32X\u201d herein). Specifically, the SEN AD API is configured to configure the data plane 32X to implement the network services on the traffic as directed by the service instructions (which, as noted above, may first need to be translated into appropriately phrased \u201crules\u201d for the data plane). The data plane X, which is generally configured to control transmission of traffic between the attached devices  and the SEN computer network  (over network interfaces , and in conjunction with illustratively separated packed handling portion ), may then implement the network services as directed by the service instructions on traffic passing therethrough. Notably, added support may be configured for the services into the data planes X (e.g., and into the network infrastructure) to be able to control certain features appropriately, such as flow redirection, application classification, flexible header parsing, L7 inspection, flexible rewrites, etc., as may be appreciated by those skilled in the art.","Notably, the SEN controller  (as well as the network service devices ) may be configured to classify network access devices \/ into groups. For instance, groups may be based on service capabilities, topological attributes, or other attribute (e.g., discovered through registration of the network access devices or otherwise). For instance, network access devices  may be a first group of devices based on topology (e.g., access to user devices), while devices  may be another group (e.g., access to WAN ). The SEN controller may store the classifications (e.g., at registration time), and then the SEN controller or network service devices may specify a target group of network access devices to receive certain service instructions. For instance, a firewall may have different rules for access devices  than for devices , but may also have rules for both groups (e.g., a universal group, or a group in which both devices  and  belong, etc.).","As the difference between  and  illustrate, by abstracting the data planes from the control plane of a network service (via SEN controller ), the implementation of the network service may be distributed to a plurality of access devices (e.g., perimeter devices). Previously, each network service (e.g., firewall) was required to be placed strategically within the network in the data path, typically at the edge devices  connecting the LAN to a WAN . Now, however, each and every access point to the SEN may be protected with the illustrative firewall, and only one firewall control plane would be needed. In other words, SEN takes N data planes, and extracts those N data planes into a single data plane abstraction (via SEN controller ) for communication with the service control plane (that is, there are not N service devices, but instead only one service device having its service implemented on N access devices' data planes).","It is through this abstraction that the SEN controller separates the service aspects of the network from the topology aspects. Particularly, through the use of registrations, which could indicate topology changes (e.g., new access devices) service instruction updates (e.g., where an administrator changes a rule on a service device or where a new service is added to a network), heartbeats (e.g., a maintained keepalive protocol between the SEN controller and each of the network service device and the one or more network access devices), and other means for failure or disabling notifications (e.g., removing a service device from the network, and its associated service, an option), the SEN computer network dynamically adjusts the implementation of a service based on the topology of the SEN, without the service device needing to maintain an interest in the topology. Previous networks would be required to configure a service on each desired interface, such that in the event one of those interfaces failed and another took its place, the service would have to be configured on that new interface as well (e.g., manually). With SEN, however, the new interface (of an access device) would register with the SEN controller, and would receive the (cached) up-to-date service instructions, as necessary.","Accordingly, SEN provides an infrastructure through which the network access devices can expose available features (e.g., flow tables, traffic classification, grammar, measurements, etc.) as common resources of the network infrastructure through a set of APIs for network service devices (e.g., firewalls, Intrusion prevention, load balancing, etc.) to access the exposed resources. Network service devices can then distribute their data plane over the collection of access devices (e.g., perimeter switches\/routers) while they maintain their own central control plane. Note, however, that in certain embodiments, network services may be classified as fast path services or slow path services, as noted above. In such situations, the network service devices may still comprise a suitably configured data plane to receive traffic requiring slow path services from a network access device for performance of the corresponding slow path service (e.g., those for which the access device is not capable of implementing, or that require the actual service device to handle). For example, a fast path service may be to simply count packets at each access device interface, but a slow path service may be to generate traffic flow measurements and trend data based on the packet counts of hundreds of access device interfaces within the SEN .","By offloading the fast path operations to the network access devices, network services can exploit a vast number of processing units (network elements) for the common and less complex operations while retaining the sophisticated functionalities of the services on the standard platform for the service where deployment can be more efficient. This hybrid model provides high flexibility and extreme scalability for the services, while still hiding the complexity of managing each device individually, thus enabling services to view the network as a single platform. In addition, the hybrid nature of this arrangement allows SEN to be integrated with existing SIA networks. While SIA aims at creating service chains via tunneling, SEN allows services to extend and distribute their data path to the edge devices, achieving a highly scalable hybrid model. SIA infrastructure can leverage the SEN platform to let the service nodes offload their instructions to the network access devices, while SEN hides the churn and complexity of network topology changes and provides an abstract API with a logical network-level view to the services. Leveraging this API, an eco-system of established services as well as new and value-added services can be built by industry partners, being readily compatible with existing products in the network.",{"@attributes":{"id":"p-0040","num":"0039"},"figref":["FIGS. 4-6","FIG. 4"],"b":["400","405","410","440","480","242","410","120","130","150","415","420","410"]},"In step , the SEN controller  may also receive messages from either network service devices  or network access devices \/. In step , the SEN controller checks (determines) whether the received message is a registration message. If the message is a registration message, then the SEN controller updates the registration tables in step . Alternately, at step , if the received message is determined to be a service instruction from a network service device , then the SEN controller updates its cache of service instructions in step .","In step , the SEN controller  consults its databases of registered devices and the cache of service\/feature instructions updated in steps  and  to see if there are any network access devices \/ that need to receive service instructions . If it is determined that the service instructions need to be distributed to network access devices \/, then the SEN controller moves to step  in which it distributes (e.g. multicasts) service instruction to network access devices \/, illustratively hiding network topology changes (e.g., of the access devices or otherwise) from the network service devices, as described above. The procedure  continues until the SEN controller is disabled, at which point the network access devices are not able to receive new service instructions, but can still operate and apply the previously added service instructions to the network traffic.","Conversely,  illustrates a simplified example procedure for implementing a SEN from the perspective of a network service device in accordance with one or more embodiments described herein. The procedure  starts at step , and continues to step , where the control plane  of the network service device  is configured to provide network services for traffic in the computer network, such as by an administrator or manufacturer. In step  the network service device  may notify the SEN controller  of being online (e.g., by registering, initiating a keepalive protocol, simply allowing itself to be discovered, etc.). At this point the service device  may be required to maintain a keepalive protocol (go to step ) between itself and the SEN controller  (thus, in essence, executing in parallel to the rest of the procedure). In step , the device  may receive service instructions (e.g., new instructions or updated instructions) for the network services under the direction of the control plane . In step , the network service device (e.g., the SD-API ) may transmit the service instructions for the network services to the SEN controller  for distribution to data planes X of network access devices \/ for distributed implementation of the network services as described herein. Note that, as mentioned above, the SD-API  may first convert the service instructions, if necessary, in step .","Optionally, in step , according to certain implementations of the SEN, the network service device  may receive traffic (on its data plane) that requires network service (e.g., slow path services) from a network access device. If so, then in step , the network service device may perform the corresponding (slow path) service on the traffic, prior to forwarding the traffic toward its destination, as described above.","Regardless, in step , the service device  may be required to maintain a keepalive protocol between itself and the SEN controller , such that upon ceasing the keepalives (e.g., purposefully or in response to a failure), then in step  the procedure  ends for that network service device. Notably, the SEN controller may be configured to either remove the disabled service device's instructions from its storage, or even from the network access devices that have received them, or may maintain the instructions (e.g., until told otherwise) in order to maintain functionality of the data plane based implementation of the network services. On the other hand, should the network service device maintain the keepalive protocol in step , then the procedure  may return (if necessary) to either step  to receive incoming traffic for processing, or simply to  in the event new\/updated instructions are received.","Finally,  illustrates a simplified example procedure for implementing a SEN from the perspective of a network access device in accordance with one or more embodiments described herein. The procedure  starts at step , and continues to step , where the network access device \/ may notify the SEN controller  of being online (e.g., by registering, initiating a keepalive protocol, simply allowing itself to be discovered, etc.). At this point a keepalive protocol starts with the SEN controller (go to step ), which runs in parallel with the rest of the procedure. In time, at step , the access device may receive\/acquire service instructions for one or more particular network services from the SEN controller (e.g., by AD-API ), as described above (e.g., and may need to convert the instructions in step , also described above).","In step , the data plane X of the access device may be configured to implement the network services on traffic as directed by the service instructions, such that in step , the access device may control transmission of traffic between attached devices  (or WAN ) and the SEN (computer network ) based on those service instructions. (Alternatively, as mentioned herein, the access device may also send the traffic to an appropriate network service device if unable to implement a required service itself.) So long as the keepalives are maintained in step , then the procedure may continue to control the traffic in step , or may return to step  to receive updated service instructions for implementation. Otherwise, the access device may stop sending keepalives in step  (e.g., purposefully or due to failure), and the procedure  ends for that access device. Notably, as mentioned herein, should another access device take its place, or should the disabled access device return to service, then an updated set of service instructions may be received from the SEN controller (steps \/), accordingly.","Advantageously, the novel techniques described herein provide the framework for what is referred to herein as a \u201cservice enabled network\u201d or \u201cSEN.\u201d In particular, the novel techniques described above introduce a level of network abstraction (e.g., an abstracted API) that effectively hides the complexity of managing individual, potentially heterogeneous devices and changes in the network topology, and enables services to view the network as a single platform. SEN can hide the complexity of managing individual heterogeneous devices by exporting a unified abstract API to network service devices, while performing the necessary transformations to map the abstract API to individual network access devices. SEN hides the complexity of topology changes from the network service devices by maintaining (caching) the network configuration, as well as by updating a newly joined access device with the most updated configuration. By providing centralized management for automatic discovery, monitoring, and managing of the properties of the boundary (edge\/perimeter), SEN minimizes the infrastructure work required to introduce new network services into the computer network.","Additionally, the techniques above enable distribution of service instructions (or configuration rules) to the appropriate group of network elements (network access devices). By distributing the network services data plane over each port of the access devices, SEN enables a per-port service model, rather than a standalone appliance model (e.g., for subscription-based services). Leveraging this, a system of established services as well as new and value-added services can be built by a collection of industry partners. SEN is an organic support platform, allowing new services to easily phase into an existing network, thus providing a new architectural approach to networks and the tools made available therein.","Moreover, contrary to certain implementations of the service insertion architecture (SIA), network services are available regardless of user mobility within the network. Further, by pushing part of the service intelligence\/performance to the edge of the network, performance bottlenecks found in the network core and scalability problems are substantially alleviated. That is, another advantage of SEN is that it allows the service engines to scale. As noted, while SIA eases configuration burdens and makes service deployment independent of the network topology, it does not ease the data path load on the service engine (the service devices). With SEN the service engine (e.g., a firewall) can distribute its service to the access devices to stop redirecting certain flows (e.g., after seeing enough of the flow to make a classification or service decision), thus lessening the data path load on the firewall leaving it free to do work that only it is capable of performing (e.g., the \u201cslow path\u201d operations).","While there have been shown and described illustrative embodiments of a service enabled network, it is to be understood that various other adaptations and modifications may be made within the spirit and scope of the embodiments herein. In particular, while the foregoing description has been directed to specific embodiments, it will be apparent, however, that other variations and modifications may be made to the described embodiments, with the attainment of some or all of their advantages. For instance, it is expressly contemplated that the components and\/or elements described herein can be implemented as software being stored on a tangible computer-readable medium (e.g., disks\/CDs\/etc.) having program instructions executing on a computer, hardware, firmware, or a combination thereof. Further, certain known or future services and\/or features (such as those that may or may not use different protocols) may be used in a SEN without their specific mention herein, and those mentioned herein are examples. Accordingly this description is to be taken only by way of example and not to otherwise limit the scope of the embodiments herein. Therefore, it is the object of the appended claims to cover all such variations and modifications as come within the true spirit and scope of the embodiments herein."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The advantages of the embodiments herein may be better understood by referring to the following description in conjunction with the accompanying drawings in which like reference numerals indicate identically or functionally similar elements, of which:",{"@attributes":{"id":"p-0005","num":"0004"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIGS. 2A-B"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIGS. 3A-B"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
