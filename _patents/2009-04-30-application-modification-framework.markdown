---
title: Application modification framework
abstract: Methods and apparatus for an application modification framework used in an integrated technology platform are shown, which allows hot deployment of modifications, including a modification component, a hot deployment component, and a package manager component. The framework provides various editors to allow a developer of the base application or a custom client application to edit files and features associated with the application. Managers are provided to control each of the editors and for maintenance of historical information to allow auditing and modification monitoring. Hot deployment controls the ability of the user to implement modifications and changes, wherein changes are identified as to origin and purpose, allowing smart debug to identify if error(s) occurred during custom modification, base modification or otherwise.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08327351&OS=08327351&RS=08327351
owner: SAP AG
number: 08327351
owner_city: Walldorf
owner_country: DE
publication_date: 20090430
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","DETAILED DESCRIPTION"],"p":["Example embodiments relate to the field of electronic data processing and specifically to modification of applications, such as modifying a generic JAVA application.","As integrated technology platforms develop to provide coherency to business software applications, service-oriented applications and integration platforms have been introduced to provide development and runtime environments for applications allowing custom system development. Such an enterprise architecture platform is referred to as an \u201capplistructure.\u201d An example of an applistructure is NetWeaver\u00ae, by SAP corporation of Walldorf, Germany, which is an integrated technology platform, enabling enterprises to run a business on a single, integrated platform that includes both applications and technology. This enterprise architecture is flexible, easily integrated with applications, and built on open standards to ensure future interoperability and broad integration, specifically as this relates to Web services technology. An integrated technology platform combines interoperability and flexibility to support platform-independent Web services, business applications, and standards-based development.","Features and functions of an integrated technology platform may include an interactive development environment, a developer studio to build user interfaces for business applications, security support, persistent layer support, and integrated deployment capabilities. The platform provides software logistics and life-cycle management. Sophisticated change management and transport services support not only the first implementation of an application, but also the continuous changes that result from business or organizational changes, and\/or the implementation of additional functions. Comprehensive software logistics for the development, test, and production landscape are prerequisites for continuous enterprise operations.","For deployment, data is stored in a central application server, along with server-based components of the file store. Typically, modifications made to an application are done at the central application server and distributed to the individual clients, each having a resident file manager as well as client application software to interface with the central application running, on the central application server. In such an environment, modifications to the central application server are available to the distributed clients when accessed by the client application. Modifications to the client application are distributed and deployed by the central application server. Each client may create custom and local modifications to the client application software as well, wherein such custom modifications are not sent back to the central application server and are not implemented in the central application operation. When a modification is implemented in the central application server, and possibly also in, the client application, such modification may not be compatible with the custom modifications implemented by the client. In such case, the client is often required to rebuild the custom modifications to work with the modified central application and to work with the modified client application when necessary.","As the distribution of information and access to common information and applications of clustered computing devices increases, there is a need for application customization and modification of database schema. There is a need to streamline the process and avoid the redundant custom modifications, thereby increasing the flexibility and reliability of the integrated technology platform. In applications using high level languages and software packages, such as a JAVA dictionary, there is a need to allow modifications of database schema using a similar platform.","Methods and apparatus for application modification involve an application modification framework for an integrated technology platform, which allows hot deployment of modifications. In one embodiment, an application modification framework includes a modification component, a hot deployment component, and a package manager component. The framework provides various editors which allow a developer of the base application or a custom client application to edit files and features associated with the application. Managers are provided to control each of the editors and to allow auditing and modification monitoring for maintenance of historical information. Hot deployment controls the ability of the user to implement modifications and changes, wherein changes are identified as to origin and purpose, allowing smart debug to identify if error(s) occurred during custom modification, base modification or otherwise. Additionally, a modification package manager is an administrative tool that manages deployment of modifications. The package manager receives modifications to an application and provides these for deployment of the application with modifications. The package manager audits changes and modifications provided by a client and maintains versioning for these changes.",{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 1","FIG. 1"],"b":["10","12","14","16","18","22","19","17","11"]},"Turning specifically to the enterprise application platform , web servers  and Application Program Interface (API) servers  are coupled to, and provide web and programmatic interfaces to, application servers . The application servers  are, in turn, shown to be coupled to one or more database servers  that facilitate access to one or more databases . The web servers , API servers , application servers , and database servers  host cross-functional services . The application servers  further host domain applications .","The cross-functional services  provide services to users and processes that utilize the information enterprise application platform . For instance, the cross-functional services  provide portal services (e.g., web services), database services and connectivity to the domain applications  for users that operate the client machine , the client\/server machine , and the small device client machine . In addition, the cross-functional services  provide an environment for delivering enhancements to existing applications and for integrating third party and legacy applications with existing cross-functional services  and domain applications . Further, while the system  shown in  employs a client-server architecture but other architectures could equally well find application in a distributed, or peer-to-peer, architecture system.",{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 2","b":["12","12","32","34","32","40","42","44","46","48"]},"The portal modules  enable a single point of access to other cross-functional services , and domain applications  for the client machine , the small device client machine  and the client\/server machine . The portal modules  are utilized to process, author, and maintain web pages that present content (e.g., user interface elements and navigational controls) to the user. In addition, the portal modules  enable user roles, a construct that associates a role with a specialized environment that is utilized, within a defined scope, by a user to execute tasks, utilize services and exchange information with other users and. For example, the role determines the content that is available to the user and the activities that the user may perform. The portal modules  include a generation module, a communication module, a receiving module and a regenerating module (not shown). In addition, the portal modules  comply with web services standards and\/or utilize a variety of Internet technologies including JAVA, J2EE, SAP's Advanced Business Application Programming Language (JAVA) and Web Dynpro, Extensible Markup Language (XML), JAVA Cryptography Architecture (JCA), JAVA Authentication and Authorization Service (JAAS), a cryptographic standard for Public Key Infrastructure (PKI) such as X.509, Lightweight Directory Access Protocol (LDAP), Web Service Definition Language (WSDL), WebSphere Service Registry and Repository (WSRR), Simple Object Access Protocol (SOAP), Universal Description, Discovery and Integration (UDDI), and Microsoft .NET.","The relational database modules  provide support services for access to the database  that includes a user interface library . The relational database modules  provide support for object relational mapping, database independence and distributed computing. The relational database modules  are utilized to add, delete, update and manage database elements. In addition, the relational database modules  comply with database standards and\/or utilize a variety of database technologies including Structured Query Language (SQL), SQL DataBase Connectivity (SQLDBC), Oracle enterprise solutions, MySQL database solutions, Unicode standards for text representation, and JAVA Database Connectivity (JDBC).","The connector and messaging modules  enable communication across different types of messaging systems that are utilized by the cross-functional services  and the domain applications  by providing a common messaging application processing interface. The connector and messaging modules  enable asynchronous communication on the enterprise application platform .","The API modules  enable the development of service-based applications by exposing an interface to existing and new applications as services. Repositories are included in the platform as a central place to find available services when building applications.","The development modules  provide a development environment for the addition, integration, updating and extension of software components on the enterprise application platform  without impacting existing cross-functional services  and domain applications .","Turning to the domain applications , the customer relationship management applications  enable access to, and facilitate collecting and storing of relevant personalized information from, multiple data sources and business processes.","The third party applications , as well as legacy applications , may be integrated with domain applications  and utilize cross-functional services  on the enterprise application platform . The enterprise application platform includes application servers , , which store application software and applications used by client machines , ,  and others.",{"@attributes":{"id":"p-0043","num":"0042"},"figref":["FIG. 3","FIG. 1","FIG. 3"],"b":["10","26","100","12"]},"As illustrated in , system  is accessible by multiple users , which interface with presentation components of Graphical User Interface (GUI) , which communicate with JAVA workbench  and one or more JAVA applications . Further a kernel and administration services unit  communicates with the JAVA components , , as well as database management system . The database management system  is tasked with interfacing with and controlling database , in which application data and files are stored.","Various tasks are associated with the logical components , according to an example embodiment. The kernel and administration services component  is a runtime environment for applications, which is agnostic to hardware, operating system, and database type, organization and function. In the present example, the environment is a JAVA environment. A runtime environment may be written in a combination of languages. The kernel may be created from a low level language, C or C++. Functionality building upon this kernel is conveniently created in C, C++ or Java itself Kernel and administration services component  is responsible for running application, managing user and process administration, and accessing databases. Within components , applications run on software processors, referred to as virtual machines.","Component  is responsible for the tasks that are typically delegated to an operating system. JAVA is a multi-user environment, wherein each user is able to run several independent applications. For example, users log on to an application server to run applications. In this way, users do not directly contact the actual operating system of the host. In this way, an application server is the only user of a host operating system.","As illustrated in , logical components  are linked to a database system, consisting of a database management system (DBMS)  and a database . Rather than having applications communicate directly with database , applications, such as JAVA applications  to n, , use kernel and administration services component . Additionally, JAVA applications  to n, , are configured to communicate with and are accessible from external systems.","Kernel and administration services component  also provides control and administration of applications, specifically of the enterprise application platform . Component  includes programs that allow a user to monitor and control applications at runtime and that allow a user to change runtime parameters.","Logical components  further include a workbench component , such as a JAVA workbench, to enable a development environment for applications, such as development using the JAVA language. The workbench component  allows a user to create, edit, test, and organize application programs. In one example, the workbench component  is written in JAVA.","GUI presentation components of the GUI  are responsible for interaction between the applications and user input and output (I\/O), as well as for desktop component integration, such as word processing and spreadsheets, into the server application for the enterprise application platform .",{"@attributes":{"id":"p-0051","num":"0050"},"figref":["FIG. 4","FIG. 4"],"b":["10","100","104","107","100","12","113","112","114"]},"The database  stores master data and transaction data from client application programs, and data for the application server and JAVA as well. For example, database  contains application programs and the control and customizing data for such application programs. A special part of the database , referred to as the repository, stores objects including program texts, screen definitions, menus, function modules, and other elements. Repository objects are available in the JAVA workbench .","Various software components of the application layer  include one or more application servers  and a message server . Each application server  contains a set of services used to run applications within the enterprise application platform . While it is possible to use one application server  to run an enterprise application service, it is typical to have services are distributed across more than one application server . This means that not all application servers  will provide the full range of services. The message server  is responsible for communication between the application servers . It passes requests from one application server to another. The message server  also contains information about application server groups and the current load balancing within them. This information is used to choose an appropriate server when a user logs onto the system.","The presentation layer  is the interface between the system  and users or clients. Various GUI software components  provide intuitive graphical interface for entering and displaying data. Presentation layer  sends user inputs to the application server(s) , and receives display data from the application server(s) . While a GUI component  is running, it may remain linked to a user's terminal session. A software-oriented view, such as illustrated in , can be expanded to include further layers, such as an Internet Transaction Server (ITS).","The software-oriented view may be accomplished with various hardware configurations. There are many different hardware configuration possibilities for logical layers ,  and , as well as for the various components therein. In one example, distributed layers reside on a single host; in another example, the system  includes one host for each logical layer. Distribution of database components within database layer  may be configured according to the database  and the database management system  used. The application layer  and presentation layer  components can be distributed across any number of hosts. It is also possible to install more than one application server  on a single host. A common configuration is to run the database system  and a single application server , which may contain special database services, on one host, and to run each further application server  on a separate host. The presentation layer  includes components that may run on client machines, such as user desktop computers.",{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIG. 5","b":["100","102","105","109","113","120","122","102","102","102","105"]},"In one example, user  starts a GUI utility installed on the front end and then logs onto the system . During the start up and log on operations, user  chooses an available one of systems , . The systems ,  are shown for illustrative purposes, and there may be any number of systems accessible by user . Additionally, a system ,  may be accessed by multiple users  concurrently, and similarly, a user  may access multiple systems ,  concurrently. Also, systems ,  may interact with each other, and such interaction may be at the direction of or incurred by actions of user . The user  then connects to the message server  in the selected system ,  and obtains the address of an application server .","GUI component(s)  of presentation layer  create a logon screen for display by user  at a client machine. Once user  has successfully logged on, component(s)  initiate display of the initial system screen at the user  client machine. Each window is represented as a session. After logging on, the user can open multiple further sessions using a GUI component , wherein each session presents as an independent application. The various sessions allow user  to run different applications in parallel, independently of one another.","Within a session, user  may run applications which call further windows, such as dialog boxes and graphic windows. These windows are not independent as they belong to the session from which they were called and can be either modal (the original window is not ready for input) or amodal (both windows are ready for input and interact with each other).","User  is able to open other GUI component(s)  to log onto the same system, , , or another system, , . The individual GUI component(s) , as well as corresponding terminal session(s) of user , are independent, wherein user  may have GUI components  representing the presentation layers  of several systems, , , open on a user  desktop computer.",{"@attributes":{"id":"p-0061","num":"0060"},"figref":["FIG. 6","FIG. 1","FIG. 3","FIG. 6"],"b":["200","12","200","212","102","100","100","100","102","100"]},"In one example, a system configuration as in  may include client machine  accessed by a user , wherein the client machine  as illustrated in . The client machine  is a computer or other computing device. The client machine  includes a processor , a memory , a file manager , a client application  corresponding to a central server application, and a modification application  for implementing custom modifications and receiving modifications to client application . In one embodiment, modification application  is for implementing custom modifications, while client application  is tasked with receiving modifications from external systems, such as system ,  of . Additionally, client machine  includes user interface  for interaction with user . User interface  may be included within client machine  or may be a separate unit in communication with client machine . User interface  communicates with a display device (not shown), which is controlled by display control  to provide a visual or audio display of data and information, as well as reports and other information and statistics generated there from. User interface  may include software to communicate messages between system ,  and user . User  may interface with system ,  through client machine  to develop services, perform maintenance on services, obtain reports and accounting information, and otherwise interact with system , .","Continuing with , one or multiple client machine(s)  operate to interface with integrated technology platform , which further includes a central application server , a file store data dictionary , application , file store dictionary  and a central database . Application  includes software for one or more applications. In addition, application  includes central modification application , which includes instructions for implementing modifications to application . In one embodiment file store data dictionary  is a data dictionary describing the application schema. A data dictionary contains a description of how objects are stored in the central database . A file store table in the central database  stores the objects.","Application  enables user  to invoke and develop within a \u201csandbox\u201d environment, which involves fairly complex, free-form exploration and experimentation. A sandbox is a testing environment, which may be a virtual environment, to isolate untested modification, such as code changes, and to allow experimentation from a production environment or repository. A sandbox allows a user to access features, services and applications that are used in operation and modify or experiment without impacting live operation. A sandbox may be used for software development, web development, revision control, and development of services, including web-based editing environments such as wikis.","Sandboxing protects \u201clive\u201d servers and data, source code distributions and other collections of code, data and\/or content from changes that could be damaging or difficult to back out of. Sandboxes replicate at least the minimal functionality needed to test services and applications or other code under development. For example, a sandbox allows a user to access environment variables and databases used by a stable implementation.","Application  may be used to implement a Strategy Management (SM) application, or other application developed in a high level computing language, such as JAVA. Data for application  is stored in file store data dictionary  and central database . In this example, central database  is a relational database associated with application server(s)  of the deployment location. Modification application  is used to modify services, features and applications of application , and implements a modification environment. Modification application  may implement modifications made by a system administrator for integrated technology platform . Modifications are then delivered to client machine(s)  by a \u201chot fix\u201d or \u201cfix pack.\u201d A hot fix implements the modification into client application  by implementing the modifications into source code.","Modifications may impact components at integrated technology platform , client machine , or both. At client machine , modifications are implemented by modification application  for inclusion in source code, or otherwise, of client application . Application  uses a transport utility to deliver modifications to client machine . For custom modifications made by user  at client machine , client application  uses a corresponding transport utility for migrating modifications. A modification includes a software application change, and may include data moved from a development environment to a quality assurance and verification environment or to a production environment.","In one example, modifications to application  are delivered as a hot fix to a client machine  in the form of a hot fix package or fix pack. Client machine  installs the hot fix, or fix pack, in client application , such as a customer development module, using modification application , also referred to as a package manager.","The hot deployment process is a service which distributes client modifications to application deployment locations of an operating system. In one example, a computing device within a network provides modifications to a server-based operating system. The server-based operating system may be one such as a NetWeaver\u00ae system provided by SAP corp. The modifications are received and then implemented during operation of the server-based central operating system. Once received from the client, the modifications are stored in the internal file store data dictionary  as in . From the internal file store data dictionary  the modifications are provided to a central application server , application deployment locations on the operating system.","A hot deployment process may be implemented in an application server cluster environment, wherein a central operating system provides information and makes applications available to a cluster of distributed client devices. Client devices may include other application servers as well as databases and other enterprise components and processing devices. Hot deployment may be defined as a process of deploying at \u201cruntime\u201d any of various modifications to the application server programs. The modifications may come from a variety of sources, including client machines connected through a distributed network, or otherwise having access to the application server of the central operating system. Hot deployment allows such modifications to be made to the application program without requiring the application program to be reinstalled or the application server to be restarted. In this way, hot deployment avoids shutting down the application server; and does not require the application program to be rebuilt, recompiled, repackaged, reinstalled or otherwise redeployed.","Hot deployment allows a client to make modifications to the base application, as well as other modified versions of the application, and provide the modifications to the central operating system for implementation into the source code of the application. The client does this without having extensive access to the base application source code. The central operating system implements the modifications without interrupting the application program's current status, and thus avoid interrupting any of the distributed clients currently using or running the application program. In a business environment, many clients access common resources and applications, wherein interruptions to the common resources and applications can incur dramatic delays and latency to business operations. Hot deployment adds flexibility to business functions while avoiding such delays and latency.","Modifications may be audited by modification application  or other component within, in communication with, or having access to integrated technology platform . Auditing is also done for custom modifications implemented by modification application . In one example, the integrated technology platform  uses an auditing function to resolve customer problems and troubleshooting. The auditing function allows isolation of error location in either application  or client application , and specifically, whether the error occurred in modifications delivered to client machine  or in custom modifications made at client machine . An auditing module  is provided to implement auditing functions. In providing the auditing functions, the auditing module  accesses both a base application and a client application. The base application is the application as originally provided by a service from an integrated technology platform  to a client machine. The client application is a set of modifications provided to the service, and may be provided as the base application with client modifications. The auditing module  includes routines and rules for identifying how modifications are implemented in the base application.","In an example embodiment, such application modification and auditing involves an integrated technology platform running integration applications, a development utility and a file manager. In one example, the integrated technology platform is NetWeaver, the development utility is for developing a custom data dictionary, and the file manager is a tool for editing source code, such as an SM file manager plug-in.","Similarly, integrated technology platform  includes versioning unit  which records each modification received, such as a software patch, and each modified application program and assigns a version number. Versioning unit  allows each patch and each version of the application program to be retrieved and evaluated. In case a modification is recalled, and to be removed from the application program, the versioning allows the system to retrieve an earlier version of the application program which does not contain the modification. The earlier version is then hot deployed, or the modification is removed using a hot deployment process. The adaptation of the application program to resolved problems thus introduces little to no interruption to users of the application program. Similarly, versioning unit  works with auditing unit  in troubleshooting and problem solving. When problems are identified, the auditing unit  allows the client to identify a version or point of operation of an application program when the problem did not occur. The client is then able to return to that point and correct the problem.","Modifications may involve components, including but not limited to, data dictionary, strings, custom string translation, name queries, source code and binary code. User  is able to create a custom data dictionary and use the modification application  to implement modifications thereto. User  may further modify existing strings and create custom strings, as well as create custom named queries. A named query is a preprogrammed query to retrieve a specific type of information. For example, a query may search through a database to find records relating to a specific process or keyword. Boolean logic or natural language techniques may govern the way the search is performed as well as the interface for entering search terms. Named queries are identified by a name or other identifier for use. Clients may modify a named query to make the query specific to their application. Similarly, clients may add new named queries, which are then referred to as custom queries or custom named queries.","With respect to source code, user  is able to create or modify *.htm, *.js, *.css, *.jsp, *.<image> files, (the character \u201c*\u201d is used here as a wildcard). Application modification and auditing allows implementation of custom modifications to aspects of an integrated technology platform  or other service or application. The methods and apparatus disclosed herein enable efficient hot fixes to application components, including hot fixes to JAVA based components.","As discussed hereinabove, in conventional integrated enterprise systems, modifications required reinstalling the application or restarting the application server, or other interruption to the current status of the application. Such interruption disrupts the flow of information and communication among business clients. Hot deployment allows enterprise application platform  or integrated development platform  to make certain application modifications without redeploying an application. In one example, JAVA Platform, Enterprise Edition or JAVA EE modifications traditionally involve redeployment of the application. JAVA EE is a widely used platform for server programming in JAVA programming language, and includes libraries to provide functionality to deploy distributed, multi-tier JAVA software to run on an application server.","Redeployment is costly, both in time and resources, involving revising source code, distributing source code, recompiling source code and re-implementing custom modifications. As discussed herein, by providing modification applications  and , a modification framework is created to allow incremental patching or updating of application modules and  and , in real time operation eliminating the need to redeploy an entire application.","A modification framework for application  or client application  is illustrated in  and is made up of at least three components: modification module , transport module  and hot deployment module . Modification module  includes file store editor , named query editor , User Interface (UI) string editor , file store manager , named query manager , and UI strings manager . Additionally, modification module  uses a file store manager plug-in , such as an Eclipse plug-in. Transport module  implements change packaging and cross-server transport, including a modification package manager  (labeled MOD PKG MGR  in ) and a package manager . Hot deployment module  includes hot deployer  and hot deployment publisher . The modification module , transport module  and hot deployment module  are included within application server . In one example, an integrated enterprise solution NetWeaver an application server is implemented as NetWeaver Composition Environment (NWCE) for J2EE applications.","Package manager  and hot deployment module  may employ one of various techniques for implementing modifications and additions to an application operating at application servers . One example process replaces files and data related to the application program that are used during execution of the application program. For files and data, such as class files or *.jar files in Java, the new or modified files and data replace existing files and data. In this way, next time the files or data are accessed in execution of the application program, the application program uses the new files and data. When the existing files are currently in use in execution of the application program, the application program continues to use the existing files. This is the case where the files include code for routines, procedures, and so forth are running, but the client has sent modifications or additions in the form of new files. After completion of the routines, procedures, and so forth, the package manager  and the hot deployment module  replace the existing files with the new files. At next execution the new files are used. This does not require the application program to restart, reinitialize or otherwise change to incorporate the new files.","Additionally, in one embodiment, a position is marked in the execution code for the application program whereupon a new file or new data is implemented during execution of the application program. Further, there may be positions, such as breakpoints, which are included in the application program or files or data, whereupon at each breakpoint occurrence the package manager  or the hot deployment module  checks for modifications or additions. The breakpoint may be added by a developer, and allows adaptive application of modifications to operation of the application program.","In one embodiment, an integrated technology platform uses JAVA language for application development. JAVA is a programming language for creating applications on business and enterprise applications and systems. JAVA allows application deployment on a currently running system in real time. A Change and Transport System (CTS)  can move applications from a development environment to a quality assurance environment to production machines. While CTS  and such improvements have allowed the use of non-JAVA code, modification of specific components, such as JAVA EE code, is not straightforward. CTS  has a separate interface to receive information from client machines. CTS  receives modifications or other information as a package. CTS provides the received package to another system for processing. In the example illustrated, CTS  provides the package to package manager . CTS  acts as a selection mechanism or filter for changes to transport into the application as modifications, including additions to an application program.","As an example, a JAVA EE application is static, requiring standardized deployment format (*.ear or *.war), thereby creating a challenge in modifying such applications once deployed. Traditionally, an expertise and an in-depth knowledge of the specific application structure is required for continued development. Also, in a system requiring a standardized deployment format, it becomes difficult to incrementally patch or update application modules at real time without redeploying the entire application.","Application modification, as presented herein, provides a robust, generic application modification framework allowing customers to modify each application layer without in-depth understanding of application structure or accessing source code.","Still further, such application modification provides a real time solution to transport and deploy application changes with fine granularities without redeploying an entire application. A reduction in application maintenance and more time efficient upgrades result in improved productivity. The package manager  selects various criteria to store, including modification type, modification date range, file path pattern and owner of the modification. The modification type indicates what part of the application is modified, for example a named query, UI strings, web page information, JAVA classes, JAVA Archive, etc. This is a way to group resources or changes for implementation and later identification.","In one example, the client provides modifications as incremental patches. Hot deployment allows incremental upgrading and modifying of an application program using such incremental patches without disruption to, or interruption of, application program processing. As each patch or modification is received and implemented, the specifics are recorded, versioned and audited. When an issue or error arises after implementation of a patch or modification, the patches may be evaluated to identify a cause of the issue or error. For example, if multiple patches are implemented and then a system error occurs or the application fails to run as expected at the client machine, troubleshooting will first seek to identify a cause of the problem. The problem may result from a patch or modification, or the problem may result from a problem in the base application program. To troubleshoot, it is possible to consider each patch in isolation and as part of the application program. Each patch may be rolled back to resume a state of the application existing prior to implementation of the modification. In this way, a cause of the problem is better identified. A variety of techniques are possible for detecting and resolving problems in the application program. All of these are facilitated by auditing, versioning and the ability to recall hot deployed patches. When modifications are made incrementally, it is possible to roll back small changes and provide incremental or fine granularity insight into the problem. Auditing is therefore possible at a granularity introduced by the incremental modifications.","A sandbox development environment for applications, such as JAVA applications, allows development and experimentation without accessing operating file system storage, such as within file system . Many enterprise solutions do not support modification of applications by replacing files in an operating system file system, and therefore, any attempt to replace files results in lost modifications on redeployment. In the present example, a modification is \u201cmemorized\u201d meaning that the modification is retained in later releases. For example, in a NetWeaver application, modifications are memorized when the entire application is redeployed.","Incremental patching or updating of application modules is implemented without destruction of a base application previously deployed. A \u201cswitch\u201d mechanism is provided to switch back or revert to a base application. The base application may refer to any previous version of the application. For example, when a new program is first introduced, the program is the base application. The author of the base application later provides revisions and modified versions, wherein at a given point in time, one of these may now be considered the base application. Effectively, identification of a base application allows a reference point, or time at which performance and operation of the application program is understood. For example, NetWeaver Strategy Management, version 7.5. It may be desirable to return to the base application, for example when several modifications are provided after which a problem results. A base application may be the software purchased by a customer. This could provide great help in identifying a bug source for a customized application.","According to an example embodiment, a database repository, file store data dictionary  of , is created as a workaround to a standardized deployment archive, such as for a JAVA EE deployed version. Various application components, including SQL queries, resource bundles and web pages (including Java Server Page (JSP), HyperText Markup Language (HTML), JAVAscript, Cascading Style Sheets (CSSxs) and images), are externalized, uploaded into file store data dictionary  and then modified through modification module , which provides user  with a set of operating file system-like APIs to access, modify and upload content in file store data dictionary . In combination with a dictionary, modulation module  provides user  or other developer a framework to modify various layers of a web application without in-depth understanding of application structure.","Modifications in local file store data dictionary  are then packed by package manager module  with different granularities according to a broad range of selection criteria. The packed modifications are then transported into remote quality assurance or production file store data dictionary  for further deployment. Structured Query Language (SQL) queries and resource bundles are imported into database repository and are utilized by an application at a next request. Web page modifications in file store data dictionary  are \u201chot deployed\u201d to corresponding deployment locations in a server file system  by hot deploy module , and hot deployment publisher , specifically. Hot deployment publisher  allows finer granularity and operates to provide security to the cluster of client machines .","In one example, JAVA patches, including JAVA class files and JAVA ARchive files, can be packed by package manager , transported to remove file store data dictionary , and hot fixed or \u201chot patched\u201d to a deployment location in server file system  in a cluster safe manner.","Since modifications are persistent in a database repository, file store data dictionary , custom modification is implemented by hot deployment publisher . In this way, changes are \u201cmemorized.\u201d","By separating delivered modifications from a central server from custom modifications, a flexible mechanism enhances development. Base applications, as delivered to client machines , are persistent in file store data dictionary  and are not overwritten by custom changes and modifications. Application modification is then seamless, as is switching to a base application while debugging a custom modified application. Additionally, the present application modification techniques are applicable to custom web page versioning, modification, transport, deploy auditing and deploy security.","Application modification processes involve various system participants and users, including software developers, both at the central application server or enterprise system and at the client site. A client site is also referred to as a client machine or a node in an enterprise system. Other users include consultants, quality assurance engineers, software developers, release engineers, and application administrators.","A role-based authorization model is a pre-requirement for using an application modification framework. Such a model includes source modification permission processing, wherein users are preapproved for source modification permissions to gain access to modification module . Additionally, data transfer permission processing is established, wherein users are preapproved for package permissions to gain access to package manager  for building a modification transport package. Data transfer permissions may be required for access to package manager  to transfer modifications between development, quality assurance and production environments. Finally, hot deployment and hot patch permissions are used to access hot deploy module  to perform a hot fix, hot patch or \u201chot deploy\u201d of a software implementation. Alternate embodiments may employ one or all of these elements, as well as additional elements and procedures for implementing application modification.","A common requirement for application customization is to modify database schema, such as application database schema  of . The present application modification method and apparatus uses a dictionary to introduce database schema change. One example uses a JAVA dictionary for file store dictionary  of . A JAVA dictionary is a central repository for database objects. Alternate embodiments may employ other forms of dictionaries, libraries and support structure. A custom dictionary is created and deployed, along with an original application dictionary, to a database. For easier technical support and trouble shooting, such as by a software vendor, an original application dictionary is typically not modified.","On a request to change a relational database query, a user uses a named query modification utility to make query modifications. Custom dictionary and \u201cnamed query\u201d modifications are then packaged and transported to quality assurance or production servers using cross-server package manager .",{"@attributes":{"id":"p-0098","num":"0097"},"figref":"FIGS. 9A and 9B","b":["352","354","356","358","360","362","364"]},"Basically, the modifications framework handles multiple types of modifications. They are database, strings, named queries, or business logic (htm, javascript, css, images, java server page, java class file, java jar file). The process described is how the modification framework decides which modification to implement.","The process continues as illustrated in  to determine if business logic will change through JAVA Server Pages (JSP), at , in which case JSP modification and hot deployment processes are implemented, at . JSP is used to create web sites using dynamic generation and allows JAVA code and certain pre-defined actions to be embedded into static content. Note that business logic changes in other embodiments and examples may implement other software frameworks and constructs, which use alternate methods for modification according to the appropriate software specifics.","Processing continues to determine if there is to be a UI change, at , in which display and interface modifications are made and hot deployed, at . In the present example, JSP and static web files are modified and then hot deployed. Development tests are performed and bug fixes are implemented, at . When the application modifications are ready for quality assurance, at , the process changes packaging and cross-server transport processing, at . Quality assurance is performed, at , and a determination is made as to whether the modified application is ready for production, at . At this point, the process changes packaging and cross-server transport processing, at .","As illustrated in , a developer at a client machine , a consultant at a client machine , and an application administrator having access to a system, such as integration technology platform  as in , each access information within the system . The processing of information is presented in state diagram format, wherein a developer at a client machine , or a consultant, creates a custom application database schema, . Database schema refers to the organization of the database, including row and column definitions. The schema encompasses database structure described in a formal language supported by a DataBase Management System (DBMS). In a relational database, for example, the schema defines tables, fields within tables, and the relationships between fields and tables. A database schema is stored in a data dictionary. Database schema may also be used to refer to graphical depiction of the database structure. The custom application database schema is used to extend the functionality of the application. It is transported and deployed using traditional Application Server deployment. Modify named queries,  are named queries that are created which retrieve this extended data and possibly merge the results of this data with the data from the base application dictionary. These modify named queries are detailed herein below.","The transport described in , means that the modification is packaged for transport and use. This packaged modification is then transported to a target server, such as application server  of . The package manager  at the target server, application server , manages hot deployment of the received package, i.e. modification. While such a modification is originally made at a client machine by a developer, the client desires to include the modifications at the application program running on the application server , (e.g., production machine).",{"@attributes":{"id":"p-0104","num":"0103"},"figref":["FIG. 11","FIG. 10"],"b":["309","1"]},"Continuing with , the developer modifies a named query to make a relational database query change using named query editor , step , and notifies the application administrator. A named query is a technique for externalizing a relational database query and storing this information in a database table, such as in database . In this way, a relational database query can be modified without a software build and deploy process. An externalized named query is retrieved and executed by its unique name, such as in JAVA code given as:",{"@attributes":{"id":"p-0106","num":"0105"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"JAVA API"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003public void executeNamedQuery(Connection con,"},{"entry":"\u2003\u2003String_namedQueryName, String[ ] _parameterValues)"},{"entry":"\u2003\u2003JSP tag"},{"entry":"\u2003\u2003<strategy:strings queryName=\u2018getKPI\u2019 parameterValues=\u201c1\u201d \/>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"Continuing with , the application administrator initiates the transport and deployment of a custom dictionary to quality assurance or production using package manager  and deploys a custom dictionary to the package manager , step . Finally, the application administrator transports and imports named query changes to the package manager , step .","To improve performance, named query database tables are cached in the application server using a table buffer technique. A web based named query editor  is created for named query administration purposes. This utility provides named query database Create, Read, Update and Delete (CRUD) operations. Named query changes can be transported and imported into a quality assurance or production database using package manager .","A developer or consultant is able to create named queries,  or modify named queries, . Both are included in the transport and importation of named query changes, . In one embodiment a named query is a predefined relational query that is stored in a relational database associated with the application program. When accessed, a named query applies application parameters and then executes an SQL statement. Using this technique, it is possible to modify the SQL code for the named query and effect a change in the application without modifying the application program source code; and such modification is possible from the client machine.","As described in the present example, a named query is a SQL expression represented as a table, wherein a named query specifies an SQL expression to select rows and columns returned from one or more tables in one or more data sources. A named query is like any other table in a data source view with rows and relationships, except that the named query is based on an expression. A named query allows extension of the relational schema of existing tables in a data source view without modifying the underlying data source. For example, a series of named queries may be used to split up a complex dimension table into smaller, simpler dimension tables for use in database dimensions. A named query may also be used to join multiple database tables from one or more data sources into a single data source view table.","In an enterprise system, the named query is a saved, defined, business logic application query, or relational query in a relational database. When a client desires to retrieve additional data beyond the data retrieved by running a named query provided by the existing or current application program, the client is able to modify the named query or add a new named query. The modification or new query changes the relational query to satisfy the new relationship. The modification is then moved by a transport mechanism to a new system, which in this case is transported to the central application server. When a client builds a new query, the new query is assigned a new name.",{"@attributes":{"id":"p-0112","num":"0111"},"figref":["FIG. 13","FIG. 12","FIG. 8"],"b":["1","308","2","322","322"]},"In another aspect, UI textual information, or strings, are captured by locale-specific resource bundles and stored in a relational database. Each UI string is referenced from an application by its unique name. For example, a JSP string may be referenced by","<strategy:strings code=\u2018string00\u2019\/>\/.","To improve performance, UI string database tables are cached in an application server using a table buffer technique. In one example, a web based \u201cstrings editor\u201d is created for UI string administration purpose, providing UI string CRUD operations. UI string changes are transported and imported into a quality assurance or production database using change transport utility.","Consider the integrated technology platform  of , wherein strings are stored in the relational tables of the central database . It is possible to modify strings, wherein changes are implemented as changes to business logic. String modifications are exported from the client or development system and imported into the target application server, such as central application server  or a production system. As mentioned hereinabove, package manager as in  provides the transport mechanism for moving data, including importing into a target system, implementing the modification, managing change, and application program auditing.","The process is further illustrated in the state diagram of , wherein developers and consultants are able to create UI strings, , and modify UI strings, . Both result in transport and import of UI string changes, . The release engineer receives the changes.","The process is further detailed in , where the developer creates or modifies the UI strings, step , and sends to a string editor . The developer then notifies the application administrator, step ., and in response, the application administrator transports and imports UI string changes, step  to a change transport module . A user interface for a strings editor is illustrated in . User  enters an application name and database name, which in one embodiment are pull-down menus. Upon entry of a search query, search results are provided in a list organized by string text and other characteristics. User  is able to edit or delete entries in the search result list. Editing is provided at the bottom of the screen display. Additionally, such a user interface allows user  to add a new string. In another aspect, a \u201cfile store\u201d technique is used to store, customize and patch application source files, wherein a set of relational database tables provide storage for text and binary files. Using a file store technique, the application is not restricted to use of an operating system file system, thus solving file maintenance issues when in a clustered environment. Additionally, the file store technique is flexible for use with various operating system differences (e.g., Windows, UNIX, Linux).","The file store techniques provide a set of relational database tables storing text and binary files. Referring to , a file store is included in file system . File store Application Programming Interfaces (APIs) provide the client with various levels of abstraction. Different layers of abstraction are built into the APIs, wherein the APIs allow different inputs. File store APIs provide levels of abstraction, including: (i) stream based I\/O API for creating and retrieving files, (ii) character based I\/O API for creating and retrieving files, (iii) additional API for file CRUD and file metadata retrieval, (iv) HTTP Access (JSON Service) to File Store. Stream based Input\/Output (I\/O) API is for creating and retrieving files. Character based I\/O API is for creating and retrieving files. Additional APIs are used for file CRUD and file metadata retrieval. A HyperText Transfer Protocol (HTTP) Access API, such as JSON Service, is used to implement a file store technique.","A file store refers to a master table of file store data dictionary . This table contains file data, along with unique identifiers in the application and file origin information, such as client or other information.  illustrates an example of File Store , which is illustrated as a table having entries in rows  to , and with various information stored in columns for each entry. The columns include column name , type  and description . In a first example, entry  has a column name of ID, a type of long, and is described as a primary key. Each file store table  is associated with an object, data item or file stored in file store data dictionary .",{"@attributes":{"id":"p-0121","num":"0120"},"figref":"FIG. 17B","b":["550","500","560","568","552","554","556","550","500","550","204"]},{"@attributes":{"id":"p-0122","num":"0121"},"figref":"FIG. 18A","b":["600","102","102","600","622","624","626","600","630","640"]},{"@attributes":{"id":"p-0123","num":"0122"},"figref":"FIG. 18B","b":["660","500","660","500","660","660","662","664","666","660","660","670"]},{"@attributes":{"id":"p-0124","num":"0123"},"figref":"FIG. 19","b":["700","700","702","704","706","700","710","718"]},"As in , file store manager  provides high level access to file store data dictionary , including uploading files and database CRUD operations. As illustrated in system  of , two client interfaces are built for file store manager  including a web browser  and an Eclipse plug-in . Web browser  provides an interface to support searching, browsing, viewing and deleting of files, and is adapted to upload a single file or multiple files from an archive. Eclipse plug-in  supports file editing and other operations mentioned above. By using Eclipse plug-in , user  has access to features of Eclipse, such as a JSP editor and file compare utility. Alternate embodiments, however, may implement other software applications or plug-ins having functionality for software development. In the present example, Eclipse plug-in  provides a multi-language software development platform having an Integrated Development Environment (IDE) and a plug-in extension system, which is written in JAVA.","Within system  of , file manager  provides file versioning, wherein on updating a file, the file manager  saves a copy of the previous file prior to editing. The previous files are denoted with a #<n> suffix. For example,",{"@attributes":{"id":"p-0127","num":"0126"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"File name:","mycustomtable.jsp"]},{"entry":[{},"First Modification:","mycustomtable.jsp#1"]},{"entry":[{},"Second Modification:","mycustomtable.jsp#2"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"br":{},"b":["102","752","758"]},"Further within system  is network access, HTTP access , which is typically via the Internet, but may be provided as another type of network providing connectivity in a distributed environment. A request router  routes information to file manager , which includes a remote access servlet, as well as to application components . File manager  and application components  communicate with file store API , which enables an I\/O stream function as well as a read\/write function. File store API  interfaces with Data Access Object (DAO) , which is an object providing an interface to database , and may also interface with other persistence mechanisms. DAO  provides various specific operations without exposing details of database . DAO  enables isolation and separation of concerns regarding what type of data accesses a given application needs to function and how these needs can be satisfied with a specific DBMS, database schema, and so forth, such as related to an implementation of DAO. The DAO provides domain-specific objects and data types, such as related to a public interface of the DAO. The implementation of DAO  as an interface to database  is typical of those used with JAVA EE applications and with relational databases.","Toward modification of dynamic and static web page files, the user  is able to change the look and feel of the UI. Such changes are typical in application customization and incorporate consultants in the field to access and modify various types of web page files, including JSP, HTML, JAVAScript, CSS, and other visual and audio files and images. In one embodiment, \u201cmodifiable\u201d web page files are added to file store data dictionary  as part of an application bootstrap process, wherein the web page files are accessed and used as templates to create custom web pages using file manager  in combination with Eclipse plug-in  as an interface. As a result of this processing, pointers to original web pages are redirected to custom web pages.","In one example, a security scheme is also implemented to allow the user , such as a developer or consultant, to modify functions; such access is granted using \u201csource modification\u201d permissions, which allow user  to modify source code. Source code file changes are uploaded into file store data dictionary . From there, files changes are transported to quality assurance or production file stores using package manager  (). The changes are then hot deployed to an application server using a cluster safe hot deployment utility, such as implemented by hot deployment module  of .",{"@attributes":{"id":"p-0131","num":"0130"},"figref":"FIG. 21","b":["800","220","808","810","220","804","806"]},{"@attributes":{"id":"p-0132","num":"0131"},"figref":["FIG. 22","FIG. 6"],"b":["750","800","1","752","758","204","2","2","1","3","322","202","4","759"]},"Typically a client, such as a customer to the business application software and service, will have separate application server installs for development, quality assurance, and production environments. The application is installed on each of separate servers for each purpose. Each application then has a specific file store. When a software vendor provides a software patch to customers, such as to fix a mid-tier problem or to tailor business logic to satisfy customer's special requirement, it is difficult to apply the patch and enter production without implementing a software installation process. The ability to hot deploy such patches improves customer satisfaction and reduces software maintenance down time. In one example, a hot patch technique solves many of these issues and reduces implementation time to production for a mid-tier patch.","According to one example, during standard application deployment, an integrated technology platform  opens a Software Component Archive (e.g., *.SCA), and copies its contents to a local file system according to a pre-defined structure and file system path. Any compiled JAVA class files in a web component (e.g., *.war) are copied to a specific location, which by default is included in an application class path. Other development component libraries are copied to specific locations as well. JAVA Archive (*.jar) files are included in an application class path. The application hot patch utility is built based on such deployment feature. Compiled JAVA class files are packed in a software patch in a defined structure by package manager . The mid-tier hot patch utility analyzes the file structure of the software patch and copies JAVA class files to a corresponding deployment location in the file system. A hot patch utility is implemented using a message-driven bean to ensure cluster security. The application may be required to restart the application cluster after hot patch processing.",{"@attributes":{"id":"p-0135","num":"0134"},"figref":["FIG. 23","FIG. 24"],"b":["850","852","854","856","322","1","1","1","2","325","327","3"]},"In an example embodiment, a package manager  creates a transport package for modification of data with a definable structure. For example, the structure may include named query, UI strings and files in files store . Other functions include importing modifications into a target database, creating transport packages for JAVA patches, cross-server data transfer through web services, such as by use of a Change and Transport System (CTS), and transport auditing.","The package manager  allows a user , such as a developer, to create and import a change package with fine granularities based on a broad range of criteria, including modification type (e.g., named query, UI Strings, web pages, JAVA classes and JAVA ARchive), modification date range, file path pattern, and modification owner.","Application modification includes hot deployment of a web page or other UI images or files. During application deployment processing, an application server opens a delivery archive, such as an SAP Software Delivery Archive (.SCA) in NetWeaver, and copies the archive contents to a local file system according to a definable structure and file system path. A root location of web content is identified and web pages in a web component (e.g., *.war) are copied to a location within or under the root location of the web content.","For static web pages, a hot deployment utility analyzes a file path for static web pages in file store data dictionary  and copies the file to a location within identified for application deployment in the file system. A web container uses a modified web page for subsequent requests.","When an application servlet engine receives a first request for a JSP, the servlet engine compiles JSP into a servlet class. As in , a servlet engine manages steps  and , wherein the servlet engine is implemented as JAVA. In the sequence diagram of , the servlet engine code in the application server.","Similarly, if a JSP request is received after a modification, the servlet engine compiles the JSP into a servlet class. Servlets are used by JAVA programming language and represent classes for dynamically processing requests and constructing responses. The basic servlet package defines JAVA objects to represent servlet requests and responses, as well as objects to reflect the servlet's configuration parameters and execution environment. The JAVA Servlet API allows a developer to add dynamic content to a web server. The generated content is commonly HTML, but may be other data such as XML. A servlet defines interactions with a web container, wherein a web container is a web server component responsible for managing the lifecycle of servlets, mapping a URL to a particular servlet and ensuring that the URL requester has the correct access rights. Servlets are generated automatically by JSP compilers.","A JSP hot deployment utility is built based on a JSP compilation mechanism, and as discussed above, a JSP hot deployment utility analyzes a file path of a JSP in file store data dictionary , and copies the file to a determinable application deployment location in the file system. The JSP hot deployment utility is a hot deployment technique using JAVA code to provide updates to source code functionality by modifying operation of object code. Effectively, the changes are applied to the application program without requiring restart or reinstall.","For each modification, including additions, a timestamp is applied to the modification at the time of implementation. The change in timestamp is a concept that the application server uses to determine that a change has been made to the JSP file. The application server detects a change in a JSP file and automatically initiates deployment of these changes. A timestamp is applied at deployment.",{"@attributes":{"id":"p-0144","num":"0143"},"figref":"FIG. 25","b":["900","902","904","906","908","910","912","916","918","920","922","914"]},"A process for hot deployment is illustrated in . Starting with , the process  starts with hot deployment of dynamic and\/or static web pages, at . The web container then receives a new HTTP request for web pages, at , such as at the initiation of a session, or during a session. The process determines if the request is for a JSP, at , and if so, determines if the request is for a first time access, at . At , if the request is not for a JSP, processing continues to change database schema using a database modification processing, at . At , if the request is for a first time access, the process compiles the JSP and processes the request, at . If the request is not for a first time access, the process determines if the JSP has changed since the last access, at , thus identifying a need to implement modifications. If the JSP has changed, then processing continues to step . Otherwise, processing continues to use existing class information to process the request, at .",{"@attributes":{"id":"p-0146","num":"0145"},"figref":"FIG. 27","b":["1200","1202","1200","1200","102","204","312","1204","1206","1208","1210","1208","1212","1206"]},"Still further, a process , as illustrated in , begins by comparing a first timestamp in a table, referred to as HOT_DEPLOY_AUDIT table, to a second timestamp in a roll-back request, and finds all entries, at . A roll-back is a request to use a previous version of an application or a component of an application. At , the process uses a file path as a search criteria to traverse a table, referred to as FILE_STORE table, and returns a result set. At , if there is a next record, the process determines if the last modified data is later than the target timestamp, at . If the last modified date is later, the process replaces a current record with a new record in a table, referred to as a FS_SHOW table, at . The process then continues for a next record. If, at , there is no next record, processing continues to hot deploy (or hot patch) records in a file store, at . At , the process then determines if there is a need to restart the application cluster, and if so, restarts the application, at . Otherwise, the process ends.","In one example embodiment, an integrated technology platform enables audits for change transport and deploy operations. Additionally, the auditing applies to persistent change history in relational database. Shadow table techniques are used to keep a change history of file store, named query and UI Strings. The shadow table technique retains information, such as historical information, regarding files and applications. Key to the shadowing technique is versioning, wherein each version of a file is maintained. Auditing information is stored in tables, such as those illustrated in , B, A, B, and .",{"@attributes":{"id":"p-0149","num":"0148"},"figref":"FIG. 29","b":["1400","204","752","758","204"]},"Continuing with , in the process  it is first determined what type of switch is requested, at . For a switch to the application server system, processing continues to import system UI strings and named query information using package manager , at . At , the process traverses file store data dictionary  and hot deploys web pages according to the file path information and origin information. The hot deploy is for application server web pages associated with the base application, including JSP, HTML, JAVAScript, CSS, and images. At , the process traverses the file store data dictionary , and removes custom web pages, including JSP, HTML, JAVAScript, CSS, and images. The custom web pages are removed from the base application web page deployment location according to file path and origin information.","The package manager, such as package manager  of , during the process of implementing modifications, stores the modifications in the file store, such as file system  of  or file store data dictionary  of . If there is a modification in the file store with the same name, the prior file is not removed but archived and the modification is the new file. The stored new file retains the original file name with a new version identifier. This allows for incremental changes as well as a change history for auditing purposes. A switch is between a custom application (i.e., application version including client or customer modification) and system application (i.e., application including system modification). Here, a software vendor may create a modification, i.e., system modification.","If the client or customer creates a new version of the application, the package manager  will review the system modifications and may remove such information from the file store . The system modification may be removed from the file store  if the new version of the software as provided by the software vendor has these changes.","Continuing with , at  the process traverses the file store data dictionary  and hot patches a plurality of classes or all classes, as well as classes in jar files with an origin value for the base application. For switches from system to custom applications, processing imports custom UI strings and named query information using package manager , at . The process then traverses file store data dictionary , and hot deploys web pages, including JSP, HTML, JAVAScript, CSS and images, according to file path and origin information, at . The process continues to traverse file store data dictionary  to remove overwritten web pages, including JSP, HTML, JAVAScript, CSS and images, according to file path and origin. Once the switch is completed, a determination is made as to whether to restart the application, at , and if so the process restarts the application, at . Otherwise, the process ends.",{"@attributes":{"id":"p-0154","num":"0153"},"figref":["FIG. 30","FIG. 6","FIG. 1","FIGS. 2 and 3"],"b":["1500","200","12","1500","1512","1501","1507","1508","1509","1510","1500","1503","1504","1502","1505","1503","1507","1502","1504","1505","1504","1501","1500","1502","1503","1504","1505","1500","1500"]},{"@attributes":{"id":"p-0155","num":"0154"},"figref":"FIG. 31","b":["1600","1600","1600"]},"The example computer system  includes a processor , a main memory , and a static memory , which communicate with each other via a bus . The computer system  may further include a video display unit  (e.g., a Liquid Crystal Display (LCD) or a Cathode Ray Tube (CRT)). The computer system  also includes an alphanumeric input device  (e.g., a keyboard), a User Interface (UI) cursor control device  (e.g., a mouse), a drive unit , a signal generation device  (e.g., a speaker) and a network interface device (e.g., a transmitter) .","The disk drive unit  includes a machine-readable medium  on which is stored one or more sets of instructions and data structures (e.g., software ) embodying or used by any one or more of the methodologies or functions illustrated herein. The software instructions  may also reside, completely or at least partially, within the main memory  and\/or within the processor  during execution thereof by the computer system , with the main memory  and the processor  also constituting machine-readable media.","The instructions  may further be transmitted or received over a network  via the network interface device  using any one of a number of well-known transfer protocols (e.g., HTTP, Secure Hyper Text Transfer Protocol (HTTPS)).","Accounting infrastructure module  is communicatively coupled to bus . This filtering module implements the filtering and subset generation discussed in the examples provided herein. Specifically, accounting infrastructure module  controls function of the accounting modules of , including accounting engine , monitoring unit , reporting unit  and accounting data storage , and works with the services engine  and the composite service repository .","The term \u201cmachine-readable storage medium\u201d should be taken to include a single medium or multiple media (e.g., a centralized or distributed database, and\/or associated caches and servers) that store the one or more sets of instructions. The term \u201cmachine-readable storage medium\u201d shall also be taken to include any medium that is capable of storing, encoding, or carrying a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies illustrated herein. The term \u201cnon-transitory machine-readable storage medium\u201d shall accordingly be taken to include solid-state memories, optical and magnetic media.","The various operations of example methods described herein may be performed, at least partially, by one or more processors that are temporarily configured (e.g., by software) or permanently configured to perform the relevant operations. Whether temporarily or permanently configured, such processors may constitute processor-implemented modules that operate to perform one or more operations or functions. The modules referred to herein may, in some example embodiments, comprise processor-implemented modules.","Similarly, the methods described herein may be at least partially processor-implemented. For example, at least some of the operations of a method may be performed by one or more processors or processor-implemented modules. The performance of certain of the operations may be distributed among the one or more processors, not only residing within a single machine, but deployed across a number of machines. In some example embodiments, the processor or processors may be located in a single location (e.g., within a home environment, an office environment or as a server farm), while in other embodiments the processors may be distributed across a number of locations.","The one or more processors may also operate to support performance of the relevant operations in a \u201ccloud computing\u201d environment or as a \u201cSoftware as a Service\u201d (SaaS). For example, at least some of the operations may be performed by a group of computers (as examples of machines including processors), with these operations being accessible via a network (e.g., the Internet) and via one or more appropriate interfaces (e.g., APIs).","By way of example, such computer-readable media may include Random Access Memory (RAM), Read Only Memory (ROM), Erasable Programmable Read Only Memory (EPROM), Electrically Erasable Programmable Read Only Memory (EEPROM), Compact Disc-ROM (CD-ROM) or other optical disk storage, magnetic disk storage or other magnetic storage devices, or any other medium that may be used to carry or store desired program code in the form of computer-executable instructions or data structures and which can be accessed by a general purpose or special purpose computer. When information is transferred or provided over a network or another communications connection (either hardwired, wireless, or a combination of hardwired or wireless) to a computer, the computer properly views the connection as a computer-readable medium. Thus, any such connection is properly termed a computer-readable medium. Combinations of the above are also to be included within the scope of computer-readable media. Computer-executable instructions include, for example, instructions and data which cause a general purpose computer, a special purpose computer, or a special purpose processing device to perform a certain function or group of functions. Furthermore, computer-executable instructions include, for example, instructions that have to be processed by a computer to transform the instructions into a format that is executable by a computer. The computer-executable instructions may be in a source format that is compiled or interpreted to obtain the instructions in the executable format. In the case that the computer-executable instructions are transformed, a first computer may, for example, transform the computer-executable instructions into the executable format and a second computer may execute the transformed instructions.","One embodiment is described in a general context of method operations which may be implemented by a computer program product. The computer program product may include computer-executable instructions, such as program code, executed by computers in networked environments. Generally, program modules include, for example, routines, programs, objects, components, or data structures that perform particular tasks or implement particular abstract data types. Computer-executable instructions, associated data structures, and program modules represent examples of program code for executing operations of the methods disclosed herein. The particular sequence of such executable instructions or associated data structures represents examples of corresponding acts for implementing the functions described in such operations.","Embodiments of the invention may be operated in a networked environment using logical connections to one or more remote computers having processors. Logical connections may include, for example, a LAN and a Wide Area Network (WAN). The examples are presented here by way of example and not limitation. Such networking environments are commonplace in office-wide or enterprise-wide computer networks, intranets and the Internet. Those skilled in the art will appreciate that such network computing environments will typically encompass many types of computer system configurations, including PCs, hand-held devices, multi-processor systems, microprocessor-based or programmable consumer electronics, network PCs, minicomputers, mainframe computers, and the like. These concepts may also be practiced in distributed computing environments where tasks are performed by local and remote processing devices that are linked (either by hardwired links, wireless links, or by a combination of hardwired or wireless links) through a communications network. In a distributed computing environment, program modules may be located in both local and remote memory storage devices.","The Abstract of the Disclosure is provided to comply with 37 C.F.R. \u00a71.72(b), requiring an abstract that will allow the reader to quickly ascertain the nature of the technical disclosure. It is submitted with the understanding that it will not be used to interpret or limit the scope or meaning of the claims. In addition, in the foregoing Detailed Description, it can be seen that various features are grouped together in a single embodiment for the purpose of streamlining the disclosure. This method of disclosure is not to be interpreted as reflecting an intention that the claimed embodiments require more features than are expressly recited in each claim. Rather, as the following claims reflect, inventive subject matter lies in less than all features of a single disclosed embodiment. Thus the following claims are hereby incorporated into the Detailed Description, with each claim standing on its own as a separate embodiment."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF DRAWINGS","p":[{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 1","b":"10"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 2","b":"12"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 3","b":"10"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 4","b":"10"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIGS. 9A and 9B"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIGS. 10 and 11"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIGS. 12 and 13"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIGS. 14 and 15"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIGS. 17A","b":["17","18","18","19"]},{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 20","FIG. 8"],"b":["750","312"]},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIGS. 21 and 22","b":"800"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIGS. 23 and 24","b":"850"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 25","b":"900"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 26","b":"1000"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 27","b":"1200"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 28","b":"1300"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 29","b":"1400"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 30"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 31"}]},"DETDESC":[{},{}]}
