---
title: Optimistic transaction compiler
abstract: A method for updating Enterprise JavaBeans (EJB) classes is provided. Each EJB class is managed by an application server which maintains a database of active EJB classes. The method includes defining an update plug for an existing EJB class and assigning the update plug to the existing EJB. The method also includes compiling the existing EJB class using the update plug to generate a dependent EJB class. The dependent EJB class uses an adapter and a contract to gain access to methods of the dependent EJB class. Each method of the dependent EJB class is associated with an algorithm that defines a locking timestamp.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06892202&OS=06892202&RS=06892202
owner: Sun Microsystems, Inc.
number: 06892202
owner_city: Santa Clara
owner_country: US
publication_date: 20020417
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["COPYRIGHT AUTHORIZATION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS","Table 1\u2014Exemplary Timestamp Algorithm Implemented by the EJBTC","Table 2\u2014Exemplary Newly Added Business Methods","Table 3\u2014Exemplary EJBRuntimeApplier Class","Table 4\u2014Exemplary Methods Signature","Table 5\u2014Exemplary EJBTC Command Line","Table 6\u2014Exemplary EJBTC Command Options","Table 7\u2014Exemplary XML DTD the Input File","Table 8\u2014Exemplary EJBTC Compiler Code"],"p":["A portion of the disclosure of this patent document contains material, which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure, as it appears in the Patent and Trademark Office patent file or records, but otherwise reserves all copyright rights whatsoever.","1. Field of the Invention","The present invention relates generally to network of distributed computer systems, and more particularly, to methods and systems for improving the detection of conflicts resulting from data sharing in a network of distributed computer systems.","2. Description of the Related Art","As computers play a more and more significant role in our daily lives, users have been placing a greater emphasis in selecting software applications and computer system which would best serve the users' requirements. One of such widespread computer system designs is the network of distributed computer systems in which data is transferred between multiple clients (e.g., users) and servers in real time. Typically, the client makes a service request from the server program, which in turn fulfills the service request by providing the client with the service. The server is capable of providing services to a plurality of clients simultaneously as well as retrieving and storing data into a database. The network of the clients and server employs different software applications to enhance the performance of these tasks.","One of such software applications is the Enterprise JavaBeans (EJB) developed by Sun Microsystems, Inc. of Palo Alto, Calif. As is well known in the art, EJB implements usable components (i.e., EJB beans) which can be accessed by a plurality of clients using an application server.  is an illustration of a simplified EJB architecture , in accordance with the prior art. As shown in the EJB architecture  an application server  receives and processes a plurality of requests dispatched by a plurality of clients -using data stored in a database . As shown, the database  includes a plurality of rows -, each storing data for a corresponding EJB bean and EJB bean . For instance, the row includes a plurality of methods Ma-Mc corresponding to the methods Ma-Mc of the EJB bean . In a like manner, the row includes a plurality of methods Md-Mh, corresponding to the methods Md-Mh of the EJB2 . In this manner, methods Ma-Mc of the EJB bean and methods Md-Mh of the EJB bean can be accessed and shared by multiple clients -in real time using the application server .","Although beneficial, sharing data of different EJB beans -by the first and second client -in real time can create resource sharing conflicts. As a major shortcoming, resource sharing conflicts result from the first client modifying the method Mb of EJB bean . Specifically, the first client can modify the method Ma without considering the negative ramification on the second client who is simultaneously using the method Mb, as received in its original state. This conflict can further be exacerbated by both clients and modifying the method Ma from its original state without informing the other client of such modifications. Implementing inconsistent, conflicting, or stale methods is disfavored as it endangers the integrity of data shared by the network of computer systems.","Furthermore, where there is a need to update or modify the EJB bean , the clients -must be informed individually and manually of the necessity to make any modifications. That is, the clients must be given ample time to close their respective instances of the EJB beans in use prior to any updating. Thereafter, the clients must recompile the EJB beans prior to reusing the EJB bean. Simply stated, modifying or updating the EJB beans cause unnecessary system downtime.","In view of the foregoing, there is a need for a methodology and system for minimizing resource sharing conflicts using an improved detection mechanism. There is also a need to for a methodology and system for minimizing downtime during data updating.","Broadly speaking, the present invention fills these needs by providing a flexible method and system for improving detection of data sharing conflicts through implementing a transaction compiler. In one example, a transaction compiler is implemented to synchronize data used substantially simultaneously by a plurality of users. According to one aspect, in an Enterprise JavaBeans (EJB) environment, an Enterprise JavaBeans transaction compiler (EJBTC) compiler is used to update an EJB bean. It should be appreciated that the present invention can be implemented in numerous ways, including as a process, an apparatus, a system, a device, or a method. Several inventive embodiments of the present invention are described below.","In one embodiment, a method for updating Enterprise JavaBeans (EJB) classes is disclosed. Each EJB class is managed by an application server which maintains a database of active EJB classes. The method includes defining an update plug for an existing EJB class and assigning the update plug to the existing EJB. The method also includes compiling the existing EJB class using the update plug to generate a dependent EJB class. The dependent EJB class uses an adapter and a contract to gain access to methods of the dependent EJB class. Each method of the dependent EJB class is associated with an algorithm that defines a locking timestamp.","In another embodiment, a method for managing shared use of Enterprise JavaBeans (EJB) classes is disclosed. Each EJB class is managed by an application server which maintains a database of active EJB classes. The method includes assigning an update plug to an existing EJB and compiling the existing EJB class using the update plug to generate a dependent EJB class. The dependent EJB class uses an adapter and a contract to gain access to methods of the dependent EJB class. Each method is associated with an algorithm that defines a locking timestamp. The locking timestamp is used to notify whether the dependent EJB has been updated since a last access to the dependent EJB class.","In yet another embodiment, a computer program embodied on a computer readable medium for updating Enterprise JavaBeans (EJB) classes managed by an application server is disclosed. The computer program includes a code segment that defines an update plug for an existing EJB class and a code segment that assigns the update plug to the existing EJB class. The computer program also includes a code segment that compiles the existing EJB class using the code segment that defines the update plug to generate a dependent class. The dependent class uses an adapter code segment and a contract code segment to gain access to methods of the dependent EJB class. Each method is associated with an algorithm code segment that defines a locking timestamp.","Other aspects and advantages of the invention will become apparent from the following detailed description, taken in conjunction with the accompanying drawings, illustrating by way of example the principles of the invention.","Inventions for improving a detection of data sharing conflicts through implementing a transaction compiler to synchronize data used substantially simultaneously by a plurality of users. In one example, in an Enterprise JavaBeans (EJB) environment, an Enterprise JavaBeans transaction compiler (EJBTC) compiler uses an optimistic transaction algorithm to detect modifications to the EJB beans, thus eliminating any potential write-write conflicts to any of the EJB beans. In one embodiment, the EJBTC compiler implements an optimistic algorithm to detect and resolve the problems associated with optimistic data locking. In one implementation, optimistic data locking relies on maintaining data unmodified while data is away from the application server. In one example, the EJBTC uses a timestamp of the EJB bean to determine whether there has been any modification to the EJB bean.","In one embodiment, the EJBTC compiler automatically updates the EJB bean, thus creating a dependent EJB bean having a plurality of extra methods in addition to almost all of the initial methods of the EJB bean. In one instance, the dependent EJB bean includes a plug component configured to contain the plurality of extra methods in the dependent EJB bean.","It will be understood, however, to one skilled in the art, that the present invention may be practiced without some or all of these specific details. In other instances, well known process operations have not been described in detail in order not to unnecessarily obscure the present invention.","As embodiments of the present invention implement the Enterprise JavaBeans (EJB) application, a brief introduction to EJB architecture is provided below. EJB is part of a larger overall technology known as the Java 2 Platform, Enterprise Edition (J2EE) developed by Sun Microsystems, Inc. J2EE provides architecture for developing, deploying, and executing applications in a distributed-object environment.","Summarily, EJB architecture promotes the creation of re-usable server-side behaviors or instructions in the Java language, connectors to enable access to existing enterprise systems, and easy-to-deploy program modules. The EJB architecture creates a collaborative architecture to provide services virtually anywhere, and for a wide range of customers and devices.","The EJB architecture defines a model for the development and deployment of reusable Java server components called EJB components (i.e., EJB beans). As designed, the EJB component is a non-visible server component having methods that provide business logic in a distributed application. In one example, the EJB architecture includes the EJB client and the EJB server. The EJB client is configured to provide the user-interface logic on a client machine and to make calls to remote EJB components on a server. For instance, the EJB client is provided the information as to how to find the EJB server and how to interact with the EJB components.","In one example, the EJB client does not communicate directly with the EJB component. In one aspect, the EJB container provides the client proxy objects that implement the home and remote interfaces of the component. In one example, the remote interface is configured to define the business methods that can be called by the client. In another embodiment, the client is configured to invoke the methods resulting in the updating of the database. Thus, the EJB beans are reusable components that can be accessed by client programs. The application programmer codes the business logic into the EJBs and deploys them into a J2EE compliant server. In one example, the server complying with the J2EE specification provides the required system-level services, thus allowing the application programmer to concentrate on business logic.","The EJB server (i.e., the EJB application) includes an EJB container, which in one example provides the services required by the EJB component. For instance, the EJB container may be configured to include one of an EJB home interface or EJB Remote interface and EJB beans. In one embodiment, the EJB home interface and the EJB remote interface are defined in the same Java virtual machine. In a different embodiment, the EJB home interface and the EJB remote interface may be defined on different Java virtual machines or separate physical computers.","In one example, the EJB specification defines a container as the environment in which one or more EJB components execute. In accordance to one example, the EJB container provides the infrastructure required to run distributed components thus allowing the clients and component developers to focus on programming business logic. Simply stated, the container manages the low-level communications between the clients and the EJB beans. In one example, once an EJB bean is created by a client, the client invokes methods on the EJB bean as if the EJB bean were running in the same virtual machine as the client.","Furthermore, the clients are unaware of activities on the EJB bean, since the container is configured to sit between the clients and the EJB beans. For instance, if an EJB bean is passivated, its remote reference on the client remains intact. Thus, when the client later invokes a method on the remote reference, the container activates the EJB bean to service the request.","The EJB container encapsulates:\n\n","In one example, three types of EJB components can be enumerated.\n\n","Each EJB component further has a transaction attribute configured to determine the manner the instances of the component participate in transactions. As designed, the EJB container provides services which can include transaction and persistence support to the EJB components. As to the transaction support, the EJB container is configured to support transactions. In one example, when the bean is deployed, the EJB container provides the necessary transaction support. In regard to the persistence support, the EJB container is configured to provide support for persistence of the EJB components, which in one embodiment, is defined as the capability of the EJB component to save and retrieve its state. In this manner, the EJB component does not have to be re-created with each use.","In one example, the EJB architecture is a three-tiered architecture in which the clients reside on the first tier, the application server and the components (i.e., EJB beans) reside on the second tier, and the databases reside on the same host as the EJB server. In accordance to one implementation, the EJB server executes methods on a component from the client or another component, retrieves data from databases, and performs other communications. The EJB server further handles the details of transactions, threads, security, database connections, and network communication. Summarily, the EJB clients request business-logic services from EJB beans running on the second-tier. The EJB beans then use the system services provided by the second-tier server to access data from existing systems in the third tier. The EJB beans apply the business rules to the data, and return the results to the clients in the first-tier.","In one example, the client contains the user interface. The business logic is configured to be separate from both the clients and the databases and resides in the same tier (i.e., second tier) as components that analyze data, perform computations, or retrieve information from data sources and processes.","As EJB implements the Java\u2122 (hereinafter \u201cJava\u201d) programming language, in a like manner, an overview of Java is provided below. In operation, a user of a typical Java based system interacts with an application layer of a system generally written by a third party developer. The application layer generally provides the user interface for the system. A Java module is used to process commands received by the application layer. A Java virtual machine is used as an interpreter to provide portability to Java applications. In general, developers design Java applications as hardware independent software modules, which are executed Java virtual machines. The Java virtual machine layer is developed to operate in conjunction with the native operating system of a particular hardware, which represents the physical hardware on which the system operates or runs. In this manner, Java applications can be ported from one hardware device to another without requiring updating of the application code.","Unlike most programming languages, in which a program is compiled into machine-dependent, executable program code, Java classes are compiled into machine independent byte code class files which are executed by a machine-dependent virtual machine. The virtual machine provides a level of abstraction between the machine independence of the byte code classes and the machine-dependent instruction set of the underlying computer hardware. A class loader is responsible for loading the byte code class files as needed, and an interpreter or just-in-time compiler provides for the transformation of byte codes into machine code.","More specifically, Java is a programming language designed to generate applications that can run on all hardware platforms, small, medium and large, without modification. Developed by Sun, Java has been promoted and geared heavily for the Web, both for public Web sites and intranets. Generally, Java programs can be called from within HyperText Transport Protocol (HTML) documents or launched standalone. When a Java program runs from a Web page, it is called a \u201cJava applet,\u201d and when run on a Web server, the application is called a \u201cservlet.\u201d","Java is an interpreted language. The source code of a Java program is compiled into an intermediate language called \u201cbyte code\u201d. The byte code is then converted (interpreted) into machine code at runtime. Upon finding a Java applet, the Web browser invokes a Java interpreter (Java Virtual Machine), which translates the byte code into machine code and runs it. Thus, Java programs are not dependent on any specific hardware and will run in any computer with the Java Virtual Machine software. On the server side, Java programs can also be compiled into machine language for faster performance. However a compiled Java program loses hardware independence as a result.","Keeping the brief overviews of EJB and Java as they relate to the present invention in mind, reference is now made to a simplified illustration of  depicting the automatic updating of a plurality of beans -into a plurality of corresponding dependent beans -using an enterprise JavaBeans transaction compiler (EJBTC) , in accordance with one embodiment of the present invention. As shown, in the embodiment of , the clients -each dispatch separate requests to an interface  of an application server , requesting methods Ma, Me, and Mi, respectively. Upon receiving the requests, the application server  refers to a database , which in one embodiment, is a table including a plurality of rows -, each corresponding to an EJB bean -. As shown, each row -of the database  includes a plurality of columns, including a primary key column, and a column including each of the associated business methods. For instance, row includes business method Ma, Mb, and Mc, while rows and respectively include business methods Md, Me, and Mf, and Mg, Mn, Mi, and Mj.","In one example, upon locating of each method in the database , the respective EJB bean -is instantiated. In one aspect, each EJB bean -is a class each including the methods Ma, Mb, and Mc, Md, Me, and Mf, and Mg, Mn, Mi, and Mj, respectively.","Subsequent to being instantiated, each of the EJB beans -is compiled using the EJBTC compiler  of the present invention. In one aspect, the EJBTC compiler  is used to automatically update each of the EJB beans -by injecting a plurality of business methods M-M, M-M, and M-M, thus creating a plurality of respective dependent EJB beans -. As shown, each of the dependent EJB beans -includes a plug component -, each of which includes the respective extra methods M-M, M-M, and M-M configured to be injected into each of the EJB beans -. Accordingly, as depicted, the new dependent EJB beans -each includes both the respective initial business methods as well as the extra injected methods shown in the plug component -","By way of example, the EJB bean includes a plurality of methods Ma-Mc (business methods identical to the business method of EJB bean ) and a plurality of extra business method M and M as included in the plug component of the dependent EJB bean . In a like manner, the EJB bean has been compiled into the dependent EJB bean having a plug component . As shown, the dependent EJB bean includes the business methods identical to those of the EJB bean further including a plurality of methods M-M of plug . Likewise, the dependent EJB bean formed as a result of compilation of the EJB bean includes the business methods Mg-Mi (methods identical to those of the EJB bean ) further including the methods M-M defined in the plug ","In one aspect of the present invention, the plug components -are pluggable and easy to configure. Each of the plug components -calls the respective adapter -. Each of the adapters -is configured to know of the business methods in each of the respective plug component -and is configured to perform the transaction and the updating of the dependent EJB bean . Each of the adapters -then refers to the respective contract -, with each contract -having knowledge of each of the methods in each of the respective plug components -. As used herein, the contracts -are the application programming interfaces which allow the algorithms to be pluggable.","At this point, each of the contracts -is implemented to map each of the business methods Ma-Mc, Md-Mf, Mg-Mj, M-M, M-M, and M-M, to a respective algorithm A-A, as defined in the algorithm component  . As shown, the algorithm component  includes the code for each of the business methods. In one instance, the adapters -are configured to substantially perform the same type of task. As such, the EJB beans -need not be aware as to the manner the selected algorithm is configured to perform. In this manner, beneficially, any time any of the business methods of any of the EJB beans required to be updated is called, the EJBTC compiler of the present invention can automatically update the EJB bean into a new EJB bean, which includes the updated methods. Furthermore, the pluggable characteristic of the plug component of the present invention allows different algorithms to be implemented.","As shown, in one aspect, each dependent EJB bean -creates a respective local companion component -. In one example, each companion component includes a corresponding business method M, M, and M, with the business method M including methods Ma-Mc and M-M, the business method M including methods Md-Mf and M-M, and M including methods Mg-Mj and M-M, respectively (i.e., the initial business methods for each EJB bean as well as the extra methods of each of the plug components). Once the companion components -have been created, the application server  can be designed to communicate to the local companion components -, substantially reducing the communication time as well as communication cost. In this manner, the clients -can implement the companion components -to communicate with the corresponding dependent EJB bean -, locally.","The capability to synchronize the EJB beans persistent state when used simultaneously by a plurality of clients can further be understood with respect to the illustrations of , in accordance with one embodiment of the present invention. As shown in the embodiment of , the client communicates to the application server  using the interface , requesting the method Ma. In one implementation, the application server  is configured to manage the updating of the database  and manage the EJB bean . For instance, the application server  is configured to interpose between the communication between the client and the EJB bean . In one aspect, the application server  uses the interface  to achieve this task.","Upon receiving the request for Ma the client , the application server  refers to the row of the database . In one implementation, the database  is a table, which includes the persistent state of the EJB bean . By way of example, the client submits the primary key of the EJB bean to the application server , requesting the method Ma. Upon receiving the request, the application server  searches the database  attempting to find the EJB bean having the primary key submitted by the client . In this scenario, the EJB bean exists as the respective primary key can be retrieved from the database . In a different embodiment, if the application server  cannot locate the primary key of a requested bean, the requested primary bean is created by the application server.","Upon locating the business method Ma in the row of the database , the EJB bean is instantiated. As shown, the EJB bean includes the plurality of methods Ma-Mc. Thereafter, the EJB bean is compiled by the EJBTC compiler  of the present invention, creating the dependent EJB bean . As shown, the dependent EJB bean includes the extra methods M-M in addition to the initial methods Ma-Mc of the EJB bean . The extra methods M-M are defined in the plug component . In this manner, the EJBTC compiler  is implemented to automatically inject the methods M-M into the EJB bean , creating a dependent EJB bean ","As discussed in further detail with respect to , the plug component of the dependent EJB bean  a calls the adapter . According to one aspect of the present invention, the adapter  is created when the dependent EJB bean is instantiated. As designed, using the adapter  enables the EJBTC compiler to include the selected algorithm into the dependent EJB bean . For instance, the adapter  can be configured to receive the request for a method Ma and delegates the request to the contract , which locates a selected algorithm.","Once the contract  is delegated the method Ma by the adapter , the contract  uses a mapping component of the algorithm component  in search of the appropriate algorithm. Upon finding the suitable algorithm, a flag is marked to include the calling of the method Ma by the client . Next, the algorithm  returns the called method Ma to the contract  and then to the adapter , which in turn communicates the called method Ma to the client by using the dependent EJB bean and the interface  of the application server .","As shown, according to one aspect of the present invention, the plug component includes a timestamp component (i.e., update timestamp) , which value in this embodiment is t. That is, in one example, the dependent EJB bean was updated at a time t. As shown, the code component of the method Ma includes a locking timestamp \u2032, which in this embodiment reflects the last time the dependent EJB bean was modified using the method Ma.","In one embodiment, to eliminate the necessity to make additional non-local connections, upon being instantiated, the dependent EJB bean creates a companion component . The companion component includes the method M, which is configured to include a set of the methods Ma-Mc and the extra methods M-M. In this manner, the client can locally find any of the methods in the EJB bean using the companion component, substantially eliminating the cost and time necessary to communicate with the non-local components.","Referring to , the capability of the EJBTC compiler  of the present invention to allow multiple clients -to request copies of the method Ma of the EJB bean can further be understood, in accordance with one embodiment of the present invention. As shown, the client has requested the method Ma. In one instance, the client communicates with the interface  of the application server . In one example, rather than the application server  attempting to use the database  to locate the method Ma, the application server  communicates the request for the method Ma to the local companion component , thus reducing cost and time. Thereafter, the companion component communicates with the dependent EJB , which then communicates with the adapter , requesting the method Ma. The adapter  in turn delegates the request for the method Ma to the contract , which uses the mapping component  of the algorithm component  to locate the method Ma. At this point, a flag in the code for the method Ma is marked, indicating the calling of the method Ma by the client . As shown, in this embodiment, the code for the method Ma includes two flags, flag and , revealing the calling of the method by two different clients and ","Upon mapping the method Ma in the algorithm component  and flagging its code to indicate the calling of the method by the client , the method Ma is sent to the contract , and thereafter, to the dependent EJB and then the client ","As shown, the timestamp  in the companion component is still set to the time t. That is, the method Ma of the EJB bean was last updated at the time t. As further shown, the locking timestamp \u2032 in the code for the method Ma is also shown to have the value of t.","The updating of the method Ma by the client using the interface component  of the application server  can further be understood with respect to the simplified block diagram of , in accordance to one embodiment of the present invention. As shown, the update request for the method Ma is communicated to the companion component , which in turn communicates to the adapter  and then the dependent EJB . The contract  is then delegated the update request for the method Ma which uses the mapping component  of the algorithm component  to locate the code for the method Ma.","In one embodiment, to update the method Ma of the dependent EJB bean , the dependent EJB bean is first read by the adapter so as to verify that the locking timestamp is identical to the timestamp  of the dependent EJB bean . In this manner, prior to modifying the method Ma of the dependent EJB bean , the adapter confirms that the method Ma has not been modified by any of the other clients. As in this implementation the method Ma of dependent EJB bean has not been modified by the client , the timestamp  of the dependent EJB bean and the timestamp of the locking timestamp \u2032 of the algorithm component are identical. Upon confirming this data, the timestamp  of the method Ma of the dependent EJB bean is changed to the time of modification, t. In a like manner, the locking timestamp \u2032 of the method Ma of the algorithm component  is changed to the time t.","Once the updating of the method Ma has concluded, the application server  updates the row of the database , ensuring that the database  includes the updated information regarding the dependent EJB bean ","The capability of the EJBTC compiler  of the present invention to detect potential modification conflicts when clients and have simultaneous access to an EJB bean can further be understood with respect to the simplified block diagram D, in accordance with one embodiment of the present invention. As shown, a request to update the method Ma by the client is communicated to the dependent EJB bean using the interface component  of the application server  and the companion component ","At this point, the dependent EJB bean is read to compare the time t of the locking timestamp \u2032 of the method Ma with the time t of the timestamp  in the plug component of the dependent EJB bean . As depicted, the timestamps \u2032 and  are not identical. Specifically, this is due to the last updating of the method Ma by the client , as discussed in the embodiment of FIG. C. Thus, having different timestamps is configured to inform the client of the different state of the method Ma of the dependent EJB bean , thus eliminating the write-write conflict shortcomings associated with the prior art. As such, as shown, in this embodiment, the code for the method Ma includes an exception \u201cThe Object Has Changed\u201d configured to be dispatched to the client . In one example, at this point, the clients may be given an option to obtain a copy of the state of the dependent EJB bean so as to determine their next course of action.","One exemplary code fragment describing the manner the EJBTC compiler implements the timestamp algorithm is shown in Table 1.",{"@attributes":{"id":"p-0069","num":"0074"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Exemplary timestamp algorithm implemented by the EJBTC"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/Automatically generated by the EJBTC compiler"},{"entry":"\/\/Mon Jan 07 18:50:10 PST 2002"},{"entry":"package ejbtc;"},{"entry":"import util.*;"},{"entry":"public class DatabaseProxyBean extends util.JavaBeanDataObject"},{"entry":"implements"},{"entry":"java.io.Serializable{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"private java.lang.String_Permission;"]},{"entry":[{},"private java.lang.String_TableName;"]},{"entry":[{},"public DatabaseProxyBean( ) {"]},{"entry":[{},"}"]},{"entry":[{},"public java.lang.String getPermission( ) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return_Permission;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"public void setPermission(java.lang.String"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"ejbtc_java_lang_String) {"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"_Permission=ejbtc_java_lang_String;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"public java.lang.String getTableName( ) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return_TableName;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"public void setTableName(java.lang.String"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"ejbtc_java_lang_String) {"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"_TableName=ejbtc_java_lang_String;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"public void setEntityContext(javax.ejb.EntityContext"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"ejbtc_javax_ejb_EntityContext) {"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"_EntityContext=ejbtc_javax_ejb_EntityContext;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"private javax.ejb.EntityContext_EntityContext;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"\/\/ Optimistic Transaction Algorithm"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"private String_ejbtcTimestamp;"]},{"entry":[{},"public String getEJBTCTimestamp( ){"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return_ejbtcTimestamp;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"public void setTimeStamp(String s){"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"_ejbtcTimestamp = s;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},{"@attributes":{"id":"p-0070","num":"0075"},"figref":["FIG. 4","FIG. 4","FIG. 3A","FIG. 4"],"b":["106","108"],"i":["a ","a "]},"Reference is made to  depicting a flowchart diagram  illustrating the method operations performed by an exemplary EJBTC compiler, in accordance with one embodiment of the present invention. The method begins in operation  in which an application server is provided. The application server is configured to enable a first client that is connected to the application server to request a business method to communicate to a first EJB beam. The first EJB bean includes a plurality of methods and interfaces. Next, in operation , the EJB bean is compiled using the Enterprise JavaBeans optimistic transaction compiler (EJBOTC) compiler. Then, in operation , a second EJB bean is created. The second EJB bean has the methods and interfaces of the first EJB bean as well as a plug component (i.e., an update plug), which includes a plurality of additional business methods (e.g., update methods).","Proceeding to operation , the requested business method is communicated to an adapter. The adapter is configured to find an optimistic algorithm that includes the business method. The adapter is further configured to delegate the requested business method to the selected algorithm. At this point, the method  points to a pointer A.","Referring to , when the method  creates the second EJB bean, the method continues from pointer A to the operation  in which a determination is made as to whether the requested method is an update request. If the requested method is an update request, the business method is marked in the algorithm to show the time of the update by the client. In one example, the timestamp including the time of update is defined in the plug component. In another example, the timestamp may be included in the database.","If it is determined that the requested method is not an update request, the method continues to operation , in which the requested business method is provided to the client using the application server. In one example, the requested method has a timestamp. Next, in operation  it is determined whether a different client is requesting the same business method. If the requested method is not the same business method, the method continues to operation , in which it is determined whether the requested method is an update request.","If in operation  it is determined that a different client is requesting the same business method, the method continues to operation  in which it is determined whether the requested method is an update request. If the requested method is an update request, the method continues to operation  in which the update time of the requested business method is compared with the timestamp of the different client. Then, in operation  it is determined whether they are the same. If they are the same, the method continues to operation , in which it is determined that a write-write conflict does not exists. Thereafter, the method continues to operation  in which a determination is made as to whether another request for a business method has been received. If another request has not been received, the method continues to operation  in which the method awaits receiving another request, otherwise, the method ends. If in operation  it is determined that another request for a business method has been received, the method continues to operation  in which it is determined whether the requested method is an update request.","If in operation  it is determined that the update time of the requested business method with the timestamp of the different client are not the same, the method continues to operation  in which it is determined that a write-write conflict exists. Upon making such determination, the method continues to operation  in which it is communicated to the different client that \u201cthe business method has been updated.\u201d Thereafter, the method continues to operation  in which it is determined whether another request for a business method has been received.","If in operation  it is determined that the requested method is not an update method, the method continues to operation  in which the requested business method is provided to the different client using the application server. The requested business method is configured to have a timestamp. Thereafter, the method continues to operation  in which it is determined whether another request for a business method has been received.",{"@attributes":{"id":"p-0078","num":"0083"},"figref":"FIG. 6","b":["600","602","604","606"]},"Proceeding to operation , the EJBTC compiler generates a new EJB bean Java class (e.g., companion component), which contains a plurality of new business methods. In one embodiment, the new EJB bean Java class includes four additional methods. In one instance, the four additional methods are shown in Table 2.",{"@attributes":{"id":"p-0080","num":"0085"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 2"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Exemplary Newly Added Business Methods"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"private util.EJBRuntimeApplier_ejbRuntimeApplier = new"},{"entry":"util.EJBRuntimeApplier( );"},{"entry":"private String_updatedTime = \u201c\u201d;"},{"entry":"private util.JavaBeanDataObject_javaBeanDataObject = new"},{"entry":"ejbtc.DatabaseProxyBean( );"},{"entry":"public void ejbUpdate( util.JavaBeanDataObject o) throws"},{"entry":"java.rmi.RemoteException{"},{"entry":"if (_updatedTime.compareTo(o.getOptimisticComparator( ).toString( ))"},{"entry":"!= 0 &&"},{"entry":"_updatedTime != \u201c\u201d){"},{"entry":"throw new java.rmi.RemoteException(\u201c The object have changed\u201d);"},{"entry":"} else {"},{"entry":"_updatedTime = java.util.Calendar.getInstance( ).getTime( ).toString( );"},{"entry":"try{"},{"entry":"_ejbRuntimeApplier.update(this, o);"},{"entry":"} catch (util.EJBRuntimeApplierException ex){"},{"entry":"ex.printStackTrace( );"},{"entry":"}"},{"entry":"}"},{"entry":"}"},{"entry":"public util.JavaBeanDataObject getJavaBeanDataObject( ){"},{"entry":"_updatedTime = java.util.Calendar.getInstance( ).getTime( ).toString( );"},{"entry":"_javaBeanDataObject.setOptimisticComparator(_updatedTime);"},{"entry":"return_javaBeanDataObject;"},{"entry":"}"},{"entry":"public void ejbUpdate( org.w3c.dom.Document) throws"},{"entry":"java.rmi.RemoteException{"},{"entry":"_ejbRuntimeApplier.update( this, org.w3c.dom.Document );"},{"entry":"}"},{"entry":"public Document getEJBXMLSchemaObject( ) throws"},{"entry":"java.rmi.RemoteException{"},{"entry":"return_ejbXMLSchema;"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0081","num":"0086"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 3"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Exemplary EJBRuntimeApplier Class"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"import java.lang.reflect.*;"},{"entry":"public class EJBRuntimeApplier {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public final static String DEFAULT_SETTER = \u201cset\u201d;"]},{"entry":[{},"public final static String DEFAULT_GETTER = \u201cget\u201d;"]},{"entry":[{},"public EJBRuntimeApplier( ) {"]},{"entry":[{},"}"]},{"entry":[{},"public void update( Object ejbBean, Object bean) throws"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"EJBRuntimeApplierException {"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"update(ejbBean, bean, DEFAULT_SETTER,"]},{"entry":[{},"DEFAULT_GETTER);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"public void update( Object ejbBean, Object bean, String setter,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"String getter) throws EJBRuntimeApplierException{"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Method beanMethods[] = bean.getClass( ).getMethods( );"]},{"entry":[{},"Method ejbMethod;"]},{"entry":[{},"Method beanMethod;"]},{"entry":[{},"String ejbMethodName;"]},{"entry":[{},"String beanMethodName;"]},{"entry":[{},"Object beanArgument;"]},{"entry":[{},"try{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"for (int i=0; i < beanMethods.length; i++){"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"beanMethod = beanMethods[i];"]},{"entry":[{},"beanMethodName = beanMethod.getName( );"]},{"entry":[{},"if (beanMethodName.startsWith(getter) ){"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"ejbMethodName = setter"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"+ beanMethodName.substring("]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"beanMethodName.indexOf(getter)"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"+ getter.length( ));"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ejbMethod ="]},{"entry":[{},"ejbBean.getClass( ).getMethod(ejbMethodName,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"new Class[]{ beanMethod.getReturnType( ) });"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"beanArgument = beanMethod.invoke(bean, null);"]},{"entry":[{},"ejbMethod.invoke(ejbBean, new Object[]"]},{"entry":[{},"{ beanArgument });"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"} catch( java.lang.IllegalAccessException ex){"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"throw new EJBRuntimeApplierException(ex);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"} catch ( java.lang.NoSuchMethodException ex){"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"throw new EJBRuntimeApplierException(ex);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"} catch (java.lang.reflect.InvocationTargetException ex){"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"throw new EJBRuntimeApplierException(ex);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Next, in operation , a new interface component is generated containing a new method signatures. Table 4 includes a plurality of exemplary method signature.",{"@attributes":{"id":"p-0083","num":"0088"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 4"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Exemplary Methods Signature"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"public void ejbUpdate( JavaBeanDataObject) throws"},{"entry":"java.rmi.RemoteException;"},{"entry":"public void ejbUpdate( org.w3c.dom.Document) throws"},{"entry":"java.rmi.RemoteException;"},{"entry":"public JavaBeanDataObject getEJBDataObject( ) throws"},{"entry":"java.rmi.RemoteException;"},{"entry":"public Document getEJBXMLSchemaObject( ) throws"},{"entry":"java.rmi.RemoteException;"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"Moving to operation , the EJB Java class is updated by implementing an optimistic transaction manager. Next, in operation , the EJB bean, the EJB bean interface components, and the EJB data object are recompiled. Then, in operation , an EjbtcClient.java class skeleton is generated, which can be used as a skeleton for testing.","By way of example, a plurality of EJBTC compiler command line options is shown in Table 5.",{"@attributes":{"id":"p-0086","num":"0091"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 5"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Exemplary EJBTC Command Line"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"java ejbtc [options] <XML file> <output folder>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"In one instance, the options are shown in Table 6.",{"@attributes":{"id":"p-0088","num":"0093"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 6"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Exemplary EJBTC Command Options"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["keep","In one example, means keep intermediary Java files"]},{"entry":["noXMLSchema","In one aspect, means not to generate XML Schema file"]},{"entry":["noJavaBean","In one embodiment, means not to generate JavaBean"]},{"entry":[{},"Data Object"]},{"entry":["noTransaction","In one instance, means generate the EJB without a"]},{"entry":[{},"transaction algorithm"]},{"entry":["verbose","In one aspect, means enable verbose output"]},{"entry":["help","In one implementation, means display the options."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"In another embodiment, Table 7 shows exemplary XML DTD for the input file.",{"@attributes":{"id":"p-0090","num":"0095"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 7"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Exemplary XML DTD the Input File"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<?xml encoding=\u201cUTF-8\u201d ?>"},{"entry":"<!ELEMENT ejbtcInput (EntityBean)+>"},{"entry":"<!ELEMENT EntityBean (EntityBean-Class?, RemoteInterface-Class?,"},{"entry":"LocalInterface-Class?)>"},{"entry":"<!ATTLIST EntityBean type (java | class) \u201cjava\u201d>"},{"entry":"<!ELEMENT EntityBean-Class (#PCDATA)>"},{"entry":"<!ELEMENT RemoteInterface-Class (#PCDATA>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"In accordance with one embodiment, the EJBTC compiler generates a new class implementing the code shown in Table b .",{"@attributes":{"id":"p-0092","num":"0097"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 8"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Exemplary EJBTC Compiler Code"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"root[csh] @ ganna[250] java -classpath"},{"entry":"\/opt\/java\/lib\/tools.jar:\/opt\/ejb\/lib\/j2ee.jar:\/"},{"entry":"workspace:util: EJBTCCompiler"},{"entry":"\/home\/ja120114\/compiler\/ConfExample.xml \/"},{"entry":"home\/ja120114\/compiler\/tmp"},{"entry":"[Deserialize XML file]"},{"entry":"[Generating Java Bean file:"},{"entry":"\/export\/home\/workspace\/test\/security\/runAs\/proxy\/"},{"entry":"DatabaseProxyBean.java ]"},{"entry":"[method name: hashCode]"},{"entry":"[method name: wait]"},{"entry":"[method name: wait]"},{"entry":"[method name: wait]"},{"entry":"[method name: getClass]"},{"entry":"[Excluded method: getClass ]"},{"entry":"[method name: equals]"},{"entry":"[method name: toString]"},{"entry":"[method name: notify]"},{"entry":"[method name: notifyAll]"},{"entry":"[method name: getPermission]"},{"entry":"[method name: setPermission]"},{"entry":"[method name: getTableName]"},{"entry":"[method name: setTableName]"},{"entry":"[method name: ejbCreate]"},{"entry":"[method name: ejbCreate]"},{"entry":"[method name: ejbCreate]"},{"entry":"[method name: ejbPostCreate]"},{"entry":"[method name: ejbPostCreate]"},{"entry":"[method name: ejbPostCreate]"},{"entry":"[method name: processCachedResults]"},{"entry":"[method name: processStatement]"},{"entry":"[method name: setEntityContext]"},{"entry":"[method name: unsetEntityContext]"},{"entry":"[method name: ejbRemove]"},{"entry":"[method name: ejbActivate]"},{"entry":"[method name: ejbPassivate]"},{"entry":"[method name: ejbLoad]"},{"entry":"[method name: ejbStore]"},{"entry":"[method name: ejbFindByPrimaryKey]"},{"entry":"[method name: toXML]"},{"entry":"[method name: toXML]"},{"entry":"[Saving file: \/home\/ja120114\/compiler\/tmp\/ejbtc\/DatabaseProxyBean ]"},{"entry":"[Compile Java Bean file: \/ejbtc\/DatabaseProxyBean ]"},{"entry":"[Read EJB file:"},{"entry":"\/export\/home\/workspace\/test\/security\/runAs\/proxy\/"},{"entry":"DatabaseProxyBean.java ]"},{"entry":"[Generate EJB file:"},{"entry":"\/export\/home\/workspace\/test\/security\/runAs\/proxy\/"},{"entry":"DatabaseProxyBean.java ]"},{"entry":"[Saving EJB file: \/home\/ja120114\/compiler\/tmp\/DatabaseProxyBean.java]"},{"entry":"[Compile EJB file:"},{"entry":"\/export\/home\/workspace\/test\/security\/runAs\/proxy\/"},{"entry":"DatabaseProxyBean.java ]"},{"entry":"[Read local interface file:"},{"entry":"\/export\/home\/workspace\/test\/security\/runAs\/proxy\/DatabaseProxy.java ]"},{"entry":"[Generate local interface file:"},{"entry":"\/export\/home\/workspace\/test\/security\/runAs\/proxy\/DatabaseProxy.java ]"},{"entry":"[Saving file : \/home\/ja120114\/compiler\/tmp\/DatabaseProxy.java ]"},{"entry":"[Compile remote interface file:"},{"entry":"\/export\/home\/workspace\/test\/security\/runAs\/proxy\/DatabaseProxy.java ]"},{"entry":"[Read remote interface file:"},{"entry":"\/export\/home\/workspace\/test\/security\/runAs\/proxy\/DatabaseProxy.java ]"},{"entry":"[Generate remote interface file:"},{"entry":"\/export\/home\/workspace\/test\/security\/runAs\/proxy\/DatabaseProxy.java ]"},{"entry":"[Saving file : \/home\/ja120114\/compiler\/tmp\/DatabaseProxy.java ]"},{"entry":"[Compile remote interface file:"},{"entry":"\/export\/home\/workspace\/test\/security\/runAs\/proxy\/DatabaseProxy.java ]"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"Flowchart  depicted in  illustrates the method operations performed by an EJBTC compiler implementing an XML schema file companion component, in accordance with another embodiment of the present invention. The method beings in operation  in which the EJBTC compiler takes an XML file containing information about and EJB bean and the EJB bean interface components as parameters. Next, in operation , the EJBTC compiler discovers the business method of the EJB bean and the EJB bean interface components. Thereafter, in operation , the EJBTC compiler generates an XML schema file containing almost all the business methods defined in the EJB bean and the interface components. The business methods are represented using the XML schema element.","Proceeding to operation , the EJBTC compiler generates a new EJB bean Java class (e.g., companion component), which contains a plurality of new business methods. In one embodiment, the new EJB bean Java class includes four additional methods. Next, in operation , a new interface component is generated containing a new method signatures.","Moving to operation , the EJB Java class is updated by implementing an optimistic transaction manager. Next, in operation , the EJB bean, the EJB bean interface components, and the EJB data object are recompiled. Then, in operation , an EjbtcClient.java class skeleton is generated, which can be used as a skeleton for testing.","The advantages of the present invention are numerous. Most notably, in the embodiments of the present invention, substantially all EJB beans can be simultaneously updated simultaneously using the EJBTC compiler substantially eliminating the computer system downtime associated with updating of the EJB beans. Another advantage of the present invention is that conflicts in state of the EJB beans as read by the clients can be detected prior to performing of any modifications by any of the clients, substantially maintaining a quality of data. Yet another advantage of the present invention is that the clients can programmatically select and implement a workaround option when conflicts occur.","With the above embodiments in mind, it should be understood that although the present invention mainly describes exemplary embodiments implementing XML schema file, in another embodiment any file suitable file format may be implemented.","Additionally, it should be understood that the invention may employ various computer-implemented operations involving data stored in computer systems. These operations are those requiring physical manipulation of physical quantities. Usually, though not necessarily, these quantities take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared, and otherwise manipulated. Further, the manipulations performed are often referred to in terms, such as producing, identifying, determining, or comparing.","Any of the operations described herein that form part of the invention are useful machine operations. The invention also relates to a device or an apparatus for performing these operations. The apparatus may be specially constructed for the required purposes, or it may be a general purpose computer selectively activated or configured by a computer program stored in the computer. In particular, various general purpose machines may be used with computer programs written in accordance with the teachings herein, or it may be more convenient to construct a more specialized apparatus to perform the required operations.","The invention can also be embodied as computer readable code on a computer readable medium. The computer readable medium is any data storage device that can store data, which can be thereafter, be read by a computer system. Examples of the computer readable medium include hard drives, network attached storage (NAS), read-only memory, random-access memory, CD-ROMs, CD-Rs, CD-RWs, magnetic tapes, and other optical and non-optical data storage devices. The computer readable medium can also be distributed over a network coupled computer systems so that the computer readable code is stored and executed in a distributed fashion.","Furthermore, although the present invention implements Enterprise JavaBeans and Java programming languages, other programming languages may be used to implement the embodiments of the present invention (e.g., C, C, any object oriented programming language, etc.).","Although the foregoing invention has been described in some detail for purposes of clarity of understanding, it will be apparent that certain changes and modifications may be practiced within the scope of the appended claims. Accordingly, the present embodiments are to be considered as illustrative and not restrictive, and the invention is not to be limited to the details given herein, but may be modified within the scope and equivalents of the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention will be readily understood by the following detailed description in conjunction with the accompanying drawings, and like reference numerals designate like structural elements.",{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 3A"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 3B"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 3C"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 3D"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIGS. 5A and 5B"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
