---
title: Prioritizing asset loading in multimedia application
abstract: Exemplary embodiments involve an application receiving an instruction to load assets, determining a priority of each of the assets, and loading at least some of the assets based on the priority. In one embodiment, the application prioritizes the loading of assets based on the accessibility of the views in which the assets are used and the resource requirements for loading the assets. In another embodiment, the application prioritizes the loading of assets based on determining a location at which each asset is stored. In another embodiment, the application prioritizes the loading of assets based on an attribute associated with rendering each of the assets for display. In another embodiment, the application prioritizes the loading of assets on which of the assets are used in one or more related views associated with the currently displayed view.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09037957&OS=09037957&RS=09037957
owner: Adobe Systems Incorporated
number: 09037957
owner_city: San Jose
owner_country: US
publication_date: 20110729
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION","General"],"p":["This disclosure relates generally to computer software and more particularly relates to prioritizing the loading of assets in a multimedia application.","Multimedia applications executed at computing devices can simultaneously integrate multiple types of content into a single view. To do so, multimedia applications load and render content items, referred to herein as \u201cassets.\u201d Assets can include, but are not limited to, images, videos, audio files, text, and animation files. An example of a multimedia application is a digital magazine application that displays a view corresponding to each page of an issue of a digital magazine. When a user views a page in an article, image files, video files, and text files may be simultaneously rendered in the displayed view.","Simultaneously rendering multiple assets in a view of a multimedia application requires the allocation of computing resources, such as processing time and memory, to load the assets. Allocating computing resources can present challenges, particularly with respect to multimedia applications for mobile devices, such as smart phones or personal digital assistants. Mobile devices loading a mobile version of a multimedia application may have fewer processing and memory resources available to render the assets used in a view as compared to a desktop computer loading the same multimedia application.","One solution for resource-allocation problems is to use clipping algorithms when displaying multimedia assets on a resource-limited platform. Multimedia applications using clipping algorithms may load into memory only those assets or portions of an asset being displayed. For example, if a user of an image editing program has zoomed in to view only the top half of the image, the image editing program can use a clipping algorithm to allocate resources to loading and rendering only the top half of the image rather than allocating resources needed to render the lower half of the image. \u201cClipping\u201d the lower half of the image thereby conserves resources.","Clipping algorithms can sacrifice responsiveness. For example, the user of digital magazine application may wish to access content included in pages accessible from the currently displayed page. The digital magazine application may conserve resources by only loading and rendering assets used in the currently displayed page and subsequently loading assets used in a second page accessible from the currently displayed page upon receiving a command to display the second page. Consequently, upon selecting the second page, the user must wait for the application to allocate resources for the loading and rendering of the assets used in the selected page view.","Systems and methods for prioritizing the loading of assets based on various criteria are disclosed. One embodiment involves an application executed by a processor receiving an instruction to load assets. The application can determine a priority of each of the assets based on determining whether each of the assets is used in one or more accessible views that are directly accessible from a view currently displayed by the application. The application loads at least some of the assets into a memory based on the priority of the assets.","Another embodiment involves an application executed by a processor receiving an instruction to load assets. The application can determine a priority of each of the assets based on determining a resource requirement for loading each of the assets. The application loads at least some of the assets into a memory based on the priority of each of the assets.","Another exemplary embodiment involves an application executed by a processor receiving an instruction to load assets. The application can determine a priority of each of the assets based on determining an attribute associated with rendering each of the assets for display. The application loads at least some of the assets into a memory based on the priority of each of the assets.","These illustrative features are mentioned not to limit or define the disclosure, but to provide examples to aid understanding thereof. Additional embodiments are discussed in the Detailed Description, and further description is provided there. Advantages offered by one or more of the various embodiments may be further understood by examining this specification or by practicing one or more embodiments presented.","Computer-implemented systems and methods are disclosed for loading assets of an application, such as a multimedia application, based on a priority of each asset. Upon receiving an instruction to load assets included in a view, a prioritization module of an application can determine a priority, based on various criteria, for each of the assets. The various criteria can include the accessibility of an asset, a computing resource requirement for loading the asset, and an attribute associated with rendering the asset for display. The application can load each of the assets based on the priority determined by the prioritization module.","As used herein, the term \u201casset\u201d is used to refer to a content item included in a multimedia object, such as text, images, videos, or audio files. As used herein, the term \u201cimage asset\u201d is used to refer to a digital image included in a multimedia object. As used herein, the term \u201cvideo asset\u201d is used to refer to a video file included in a multimedia object. As used herein, the term \u201ctext asset\u201d is used to refer to text included in a multimedia object.","As used herein, the term \u201cloading\u201d an asset is used to refer to copying or transferring an asset from a data source to a physical memory in a computing system. As used herein, the term \u201cpriority\u201d of loading an asset is used to refer to an order in which computing resources, such as physical memory or processing time, are used for rendering the asset.","As used herein, the term \u201cview\u201d is used to refer to a layout that can include multiple assets simultaneously displayed or otherwise used at a given time or in a given state on a display screen of a computing device. For example, each article in a multi-article electronic article may be provided for display in one or more different views, e.g. a first article may be provided for display in a horizontal view and a vertical view while a second article is available for display only in a view that is the same for both horizontal and vertical viewing. As another example, each page of an article can be provided as an individual view. As yet another example, different portions of a document can be separated into separate views.","The following example illustrates how a prioritization module of an application prioritizes asset loading, thereby balancing conservation of computing resources with responsiveness of the application. A developer may design a multimedia application for displaying an issue of a digital magazine. Each page of the digital magazine may correspond to a view in the multimedia application. The developer may include a prioritization module in the multimedia application configured to prioritize the loading of assets based on what content a reader of the magazine is expected to access. For example, if a first page of an article is displayed, the reader may be expected to navigate to adjacent pages of the same article. In addition, the reader may also be expected to navigate to pages that are immediately accessible from the currently displayed page, such as related articles linked to the currently displayed page or other articles in the same section of the digital magazines, such as articles in the \u201cTechnology\u201d section of a news magazine. Assets used in adjacent or immediately accessible pages may be assigned a higher loading priority.","Accordingly, a multimedia application can load prioritized assets associated with views accessible from a currently displayed view while a user is accessing the content of the currently displayed view (e.g., reading a page of an article in a digital magazine). If the user navigates to views accessible from the currently displayed view, the accessible views can be displayed more quickly than if the multimedia application had loaded the assets associated with those pages only after receiving the command to navigate to those pages.","As discussed in the above example, an application can prioritize an asset based on whether the asset is used in a view that is accessible from a currently displayed view. The prioritization module of an application can assign a higher priority to assets used in views accessible from the currently displayed view as compared to a priority assigned to assets not used in views accessible from the currently displayed view.","The determining of whether an asset is accessible from a currently displayed view can include determining whether an asset is included in a view adjacent to a currently displayed view. As used herein, the term \u201cadjacent view\u201d is used to refer to a view accessible by using a command in the currently displayed view to navigate to a view immediately following or preceding the currently displayed view in a series of views. For example, if a page of an article in a digital magazine is currently displayed, adjacent views would include the page immediately preceding and the page immediately following the currently displayed page. In an exemplary embodiment, a prioritization module can prioritize the loading of assets included in adjacent views.","The determining of whether an asset is accessible from a currently displayed view can additionally or alternatively include determining whether the currently displayed view includes a navigation object for accessing or navigating to a view including the asset. As used herein, the term \u201cnavigation object\u201d is used to refer to an object configured to access or navigate to another view from one of the views -currently being displayed in response to receiving user input. One example of a navigation object is a link to a related article in a digital magazine. Another example of a navigation object is a \u201chome\u201d button in an application allowing a user to return to the first view displayed when opening the application.","The determining of whether an asset is accessible from a currently displayed view can additionally or alternatively include determining whether the asset is used in a view accessible via a touch screen navigation gesture command received in the currently displayed view. As used herein, the term \u201ctouch screen navigation gesture command\u201d is used to refer to input received by a multimedia application via a touch screen interface and representing a command to access or navigate to another view from one of the views -","In one embodiment, assets included in views accessible from the currently displayed view are identified as prioritized assets, while assets not included in views accessible from the currently displayed view are identified as non-prioritized assets. In another embodiment, assets are assigned tiers of priorities based on how many views removed the assets are from a currently displayed view. For example, assets used in primary views, which may be those views that are accessible from a currently displayed view, may be assigned a primary priority. Assets used in secondary views, defined as those views accessible from a primary view but not the currently displayed view, may be assigned a secondary priority that is lower than a primary priority.","A prioritization module can additionally or alternatively prioritize assets included in views accessible from the currently displayed view based on the available computing resources in a computing device. The prioritization module may determine the available computing resources in the computing device. Based on the available computing resources of the computing device, the prioritization module may only prioritize assets capable of being loaded. For example, a prioritization module may determine that a computing device has a specific amount of physical memory or processing time available for loading assets other than those included in a currently displayed view. The available physical memory or processing time may support loading only assets used in primary views. The prioritization module can therefore assign priorities to assets included in primary views and not assign priorities to assets included in secondary views.","The determining of whether an asset is accessible from a currently displayed view can additionally or alternatively include determining a location at which the asset is stored. For example, an application may receive an instruction to load assets stored in memory at a computing device executing the application and assets stored at a remote location accessible through a network. Assets stored in memory at the computing device may require fewer computing resources to load than assets accessed through the network. Assets stored in memory may be assigned a lower priority than assets accessed through the network.","The determining of a priority for an asset can additionally or alternatively be based on a resource requirement for use of the asset. A resource requirement can include an amount of memory for loading each of the assets. A resource requirement can additionally or alternatively include a processing time required for loading the asset on a particular device. For example, an application may receive an instruction to load multiple assets. One asset may require more processing time to load than the second asset. A prioritization module of the application can assign a higher priority to the asset requiring more processing time, or vice versa.","The determining of a priority for an asset can additionally or alternatively be based on an attribute associated with rendering the asset for display at a computing device. As used herein, the term \u201cattribute associated with rendering the asset\u201d is used to refer to an attribute of an asset or multimedia object or an instruction in a multimedia application determining how the asset is rendered for display.","In one embodiment, an attribute associated with rendering the asset can include a scaling factor for the asset. As used herein, the term \u201cscaling factor\u201d is used to refer to the magnification or zoom of an asset when rendered for display. For example, the application can receive an instruction to load certain assets in a subsequent view as thumbnail images (i.e., to \u201czoom out\u201d from those assets) and to load other assets as full-size images (i.e., to \u201czoom in\u201d on those images). The application can assign a higher priority to the zoomed-in assets than the zoomed-out assets.","In another embodiment, an attribute associated with rendering the asset identifies whether the asset is static or dynamic. Static assets can include assets that do not change when rendered for display. Examples of static assets can include text or images. Dynamic assets include assets that change when rendered for display. An example of a dynamic asset is a video, which includes a series of changing images that each persist for less than a second, or an animated slide show, which includes a series of changing images that persist for several seconds. In additional or alternative embodiments, a dynamic asset can include multiple related assets associated with the dynamic asset. For example, a dynamic asset that is a slide show can include related static assets that are text assets and image assets associated with the slide show, such as a series of images with captions.","The determining of a priority for an asset can additionally or alternatively be based on which of the assets are used in one or more related views corresponding to the currently displayed view. Related views can be defined by an application-specific rule. An application-specific rule can be used to identify other views that meet one or more criteria common to the currently displayed view. For example, a digital magazine application may be used to read a digital magazine with several articles. Each of the articles may include metadata, such as tags, identifying subject matter in the article. Several articles may have tags identifying subject matter common to the articles. For each page of an article, an application-specific rule for the digital magazine application may identify all views corresponding to the first page of articles with subject matter common to the currently displayed article as related views corresponding to the currently displayed view.","Various methods for prioritizing assets can be applied in any order. For example, a multimedia application can prioritize the loading of assets based on whether the assets are used in one or more related views. The multimedia application can further prioritize the assets based on the resource requirements for loading the assets. The multimedia application can further determine whether to prioritize assets with higher resource requirements over those with lower resource requirements based on, for example, whether the assets are stored at a remote location accessible through a network. For example, if a digital magazine application is accessing views over a low-speed data connection, a prioritization module of the digital magazine application can assign a higher priority to assets requiring fewer resources, such as text and low resolution graphics of a magazine article, than to assets requiring more resources that may be of less interest to a reader, such as a video embedded in the magazine article. Prioritizing the text of an article and low resolution graphics can allow the digital magazine application to display content of greater interest to a reader, such as the text of the article, while supplemental content of less interest to the reader, such as an embedded video, continues to load.","These illustrative examples are given to introduce the reader to the general subject matter discussed here and are not intended to limit the scope of the disclosed concepts. The following sections describe various additional embodiments and examples with reference to the drawings in which like numerals indicate like elements.","The features discussed herein are not limited to any particular hardware architecture or configuration. A computing device can include any suitable arrangement of components that provide a result conditioned on one or more inputs. Suitable computing devices include multipurpose microprocessor-based computer systems accessing stored software that programs or configures the computing system from a general purpose computing apparatus to a specialized computing apparatus implementing one or more embodiments of the present subject matter. Any suitable programming, scripting, or other type of language or combinations of languages may be used to implement the teachings contained herein in software to be used in programming or configuring a computing device.","Referring now to the drawings,  is a block diagram depicting an exemplary multimedia object. A multimedia object  can be a multimedia file used by a multimedia application. An example of a multimedia object  is an issue of a digital magazine displayed by a digital magazine application.","A multimedia object  can include several views -. A view can be a layout including multiple assets rendered simultaneously at a given time or state. For example, views -of a multimedia object  that is a digital magazine issue can include pages of an article, wherein each page corresponds to a different view -","The assets included in a view can include image assets -, video assets -, and text assets -. Examples of image assets -include, but are not limited to, Joint Photographic Experts Group (JPEG) files, Exchangeable image file format (Exif) files, Tagged Image File Format (TIFF) files, Portable Network Graphics (PNG) files, GIF (Graphics Interchange Format) files, bitmap (BMP) files, etc. In a view corresponding to a page of a digital magazine issue, the image assets -can include, for example, a logo for the digital magazine at the top of each view -as well as pictures accompanying the text of an article. Examples of video assets -can include Moving Picture Experts Group (MPEG) files, Audio Video Interleave (AVI) files, Windows\u00ae Media Video (WMV) files, etc. In some embodiments, one or more of image assets -and video assets -can be delivered via a Small Web Format (SWF) file. In a view corresponding to a page of a digital magazine issue, the video assets -can be, for example, a news video related to the content of the article. Examples of text assets -can include HTML files, rich text format files, plain text files, etc. In a view corresponding to a page of a digital magazine issue, the text assets -can include, for example, text displayed on a page of an article.","The views -can also include navigation objects -. In one embodiment, a navigation object included in one view can be a link to another view. For example, if a view corresponds to a page of an article in a digital magazine issue, a user may immediately navigate to a view , corresponding to a page of a related article, using a navigation object that is a link referencing the related article. In another embodiment, a navigation object can be a button, such as a \u201chome\u201d button, configured to access one of the views -. For example, if a view corresponds to a page of an article in a digital magazine issue, a user may immediately navigate to a view , corresponding to a table of contents for an issue of a digital magazine, using a navigation object that is a button for accessing the table of contents for the issue.",{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 2","b":["108","102"]},"For example, as shown, an exemplary computing device  can include a non-transitory computer-readable medium, such as a random access memory (RAM) , coupled to a processor  that executes computer-executable program instructions and\/or accesses information stored in a memory . Such a processor  may include a microprocessor, an application-specific integrated circuit (ASIC), a state machine, or other processor, and can be any of a number of computer processors. Such a processor can include, or may be in communication with a non-transitory computer-readable medium which stores instructions that, when executed by the processor , cause the processor  to perform the steps described herein.","A non-transitory computer-readable medium may include, but is not limited to, an electronic, optical, magnetic, or other storage device capable of providing a processor with computer-readable instructions. Other examples include, but are not limited to, a floppy disk, CD-ROM, DVD, magnetic disk, memory chip, ROM, RAM, an ASIC, a configured processor, optical storage, magnetic tape or other magnetic storage, or any other medium from which a computer processor can read instructions. The instructions may comprise processor-specific instructions generated by a compiler and\/or an interpreter from code written in any suitable computer-programming language, including, for example, C, C++, C#, Visual Basic, Java, Python, Perl, JavaScript, and ActionScript.","The computing device  may also comprise a number of external or internal devices such as a mouse, a CD-ROM, DVD, a keyboard, a display, audio speakers, one or more microphones, or any other input or output devices. A user can use the external devices to provide input to and receive output from the computing device  via input\/output (I\/O) interface . For example, computing device  is shown with a display . A bus, such as bus , is included in the computing device . Computing device  could be a personal computing device, a mobile device, or any other type of electronic device appropriate for providing one or more of the features described herein. In one exemplary embodiment, computing device  is a mobile device such as a smart phone or personal digital assistant.",{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 2","b":["102","104","108","10","108","106","116","10","114","116","104","116","116","14","16","18","114","104","114","108","114"],"i":["a","c","a","c","a","e"]},"As depicted in , the multimedia application  includes an Application Programming Interface (API) module , a prioritization module , a rendering module , and a layout module . The API module  can include one or more modules for coordinating communication between the prioritization module , the rendering module , and the layout module . The API module  can also receive and process data generated from user input received via I\/O interface . The API module  can also retrieve assets  from data source  and load the assets  into the memory . The prioritization module  can include one or more modules for assigning priorities to assets.","The rendering module  can include one or more software modules configured for managing renderers for assets . As used herein, the term \u201crenderer\u201d is used to refer to a software module that can generate a visual representation of a specific data item for display at an output device.","The layout module  can include one or more modules for combining assets  in a view. Combining assets  in a view can include positioning the assets  in the view and rendering the assets  using the renderers assigned by the rendering module .",{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 3","b":["300","300","116","310","110","108","109","109","12","109","110","116","12","12","109","116","109","110"],"i":["a","a","a"]},"The exemplary method  further involves determining a priority of each of the assets  based on determining whether each of the assets is used in an accessible view that is directly accessible from a currently displayed view, as shown in block . The prioritization module  of the multimedia application  can determine the priority of the assets . In an exemplary embodiment, a current view may be currently displayed, a view may be accessible from the current view , and a view may not be accessible from the current view . The prioritization module  can assign a higher priority to assets  used in a view than assets  used in a view not accessible from the current view ","In one embodiment, the prioritization module  can identify assets  as either prioritized assets or non-prioritized assets. The prioritization module  can identify as prioritized assets the assets  used in the view , where the view is accessible from the currently displayed view . The prioritization module  can identify as non-prioritized assets the assets  used in the view , where the view is not accessible from the currently displayed view ","In another embodiment, the prioritization module  may assign different tiers of priorities, such as a primary and secondary priority, based on the accessibility of a given asset. For example, a view may be accessible from a currently displayed view and a view , while not accessible from the currently displayed view , may be accessible from the view . A primary view can be a view that is accessible from a currently displayed view . A secondary view can be a view that is directly accessible from a primary view . The prioritization module  can assign a primary priority to the assets  used in a primary view . The prioritization module  can assign a secondary priority to the assets  used in a secondary view ","The determining of whether an asset  is used in a view that is directly accessible from the currently displayed view can include determining whether a respective asset  is used in a view adjacent to the currently displayed view . An adjacent view can include a view either immediately preceding or immediately following a view . A view can be adjacent from a currently displayed view when the user can navigate directly to a view from currently displayed view by paging or scrolling.","For example, in a multimedia object  that is a digital magazine issue, a currently displayed view can be a page of an article currently being displayed to a reader. An adjacent view can be a page of the article immediately following or preceding the page that is view . A prioritization module  of a multimedia application  for using the digital magazine can determine that the view is adjacent to view . The prioritization module  can therefore prioritize the assets  used in the view ","The determining of whether an asset  is used in a view that is directly accessible from a currently displayed view can additionally or alternatively include determining whether the currently displayed view includes a navigation object  associated an accessible view. The prioritization module  can identify views -to which a user can navigate using navigation objects -. The prioritization module  can therefore prioritize the assets  used in the views -","For example, a multimedia object  can be an issue of a digital magazine. A currently displayed view can be a page of an article. A navigation object can include a link allowing a user to navigate to a related article in the issue, where the first page of the article is view . A navigation object can be a \u201chome\u201d button allowing a user to navigate to a table of contents for the issue of the digital magazine, where the table of contents is view . A prioritization module  can determine that the views -are directly accessible from the currently displayed view using navigation objects -. The prioritization module  can prioritize the assets  used in the views -","The determining of whether an asset  is accessible from a currently displayed view can additionally or alternatively include determining whether the asset is used in a view accessible via a touch screen navigation gesture command received in the currently displayed view . The prioritization module  can identify the views -to which a user can navigate via a touch screen navigation gesture command. For example, the views -may be accessible in response to a user swiping a finger across a touch screen, where the swiping of the finger represents a command to scroll to the views -. The prioritization module  can therefore prioritize the assets  used in the views -","The exemplary method  further involves determining a priority of each of the assets based on a resource requirement for loading each of the assets , as shown in block . The prioritization module  of the multimedia application  can determine the priority based on the resource requirement for loading each of the assets . A resource requirement can include an amount of memory for loading each of the assets. A resource requirement can additionally or alternatively include processing time required for loading the asset.","For example, the prioritization module  may receive an instruction to load a view including multiple assets . One asset may be a video asset . Other assets may be text assets , . The video asset may require more memory or processing time to load than the text assets , . The prioritization module  may assign a higher priority to the video asset than the text asset , . The prioritization module  may also determine that the text asset is included in the currently displayed view and is therefore already loaded. Accordingly, the prioritization module may identify the text asset as a non-prioritized asset.","In an exemplary embodiment, assets  may be prioritized based on the accessibility of the view in which the assets  are used and be further prioritized based on the resource requirements required for loading the assets . The prioritization module  can assign a primary priority to assets  used in a primary view and a secondary priority to assets  used in a secondary view. The prioritization module  can further prioritize all assets  with a primary priority based on a resource requirement for loading each of the assets . In additional or alternative embodiments, a first prioritization module may prioritize assets based on the accessibility of the view in which the assets are used and a second prioritization module may further prioritize assets based on the resource requirements required for loading the assets.","In one embodiment, priorities assigned based on a resource requirement may determine the order in which each asset  included in a primary view is loaded. One asset  with a primary priority may have a higher priority based on a resource requirement than another asset  with a primary priority, but any asset  with a primary priority would be prioritized over an asset  with a secondary priority. In another embodiment, a prioritization module  may initially assign a higher priority to an asset  included in a primary view than an asset  included in a secondary view. The prioritization module  may then determine that the asset  included in the secondary view has a resource requirement that necessitates increasing the priority for the asset. The prioritization module  may therefore assign a higher priority to the asset  included in the secondary view than the asset  included in the primary view.","In additional or alternative embodiments, the prioritization module  can assign tiers of priorities based on the accessibility of the view in which the assets  are used and can determine how many tiers of priorities to assign based on the resource requirements for loading the assets . The prioritization module  may only assign priorities to those assets  capable of being loaded based on the resource requirement for loading the assets. In one example, a prioritization module  may determine that a computing device  has sufficient physical memory or processing time available to load assets used in both a primary view and a secondary view . Accordingly, the prioritization module  may assign both primary and secondary priorities to assets included in primary view and secondary view , respectively. In another example, a prioritization module  may determine that a computing device  only has sufficient physical memory or processing time available to load assets used in a view accessible from a currently displayed view , but not assets used in a view accessible from a view . Accordingly, the prioritization module  may identify assets used in the view , but not assets used in the view , as prioritized assets.","The exemplary method  further involves loading at least some of the assets  into the memory  based on the priority of the assets , as shown in block . To load the assets , the prioritization module  can provide a prioritized list of assets to the API module . The API module  can retrieve the assets  from the data source . The API module  can load the assets  into the memory  for use by the multimedia application .","In additional or alternative embodiments, the method  can further involve rendering at least some of the assets  for display at the computing device . To render the assets , the API module  can provide the prioritized list of assets to the rendering module . The rendering module  can determine the renderers required to render the assets  included in the prioritized list of assets. The rendering module  can provide a list of required renderers to the layout module  of the multimedia application . If the required renderers are not already loaded, the layout module  can load into the memory  the required renderers. The layout module  can render the prioritized assets  loaded in the memory  using the renderers.",{"@attributes":{"id":"p-0067","num":"0066"},"figref":"FIG. 4","b":["400","400","116","410","110","108","310","300"]},"The exemplary method  further involves prioritizing an asset  based on determining a location at which the asset  is stored, as shown in block . Different assets  can be stored at multiple data sources . A first data source  may be a local file stored in a memory . A second data source  may be remote server accessible via a network that streams or otherwise provides data. The prioritization module  can determine whether an asset  is remotely accessible or locally accessible. For example, a multimedia object  may include one or more XML files. The XML files may reference assets . A prioritization module  can determine whether a reference to an asset  in an XML file describes a local data source , such as a directory in a memory  of a computing device , or a remote data source , such as a server providing streaming media.","In one embodiment, the prioritization module  is configured to assign a higher priority to remotely accessible assets than to locally accessible assets. Accessing remote assets may require a computing device  to allocate memory and processing time to a network interface device and other services for communicating through a network, while accessing local assets may only require accessing a memory . A prioritization module  may be configured to detect the location at which the asset is stored and assign a lower priority to the local assets than to the remote assets accessed through the network. In another embodiment, the prioritization module  can be configured to assign a higher priority to locally accessible assets than to remotely accessible assets. For example, the prioritization module  can be configured to prioritize locally accessible assets over remotely accessible assets to avoid degrading the responsiveness of the multimedia application  executed at a resource-limited computing device .","The exemplary method  further involves loading at least some of the assets  into a memory  based on the priority of each of the assets , as shown in block . The API module  of the multimedia application  can load the assets into the memory , as shown in block  of the method .",{"@attributes":{"id":"p-0071","num":"0070"},"figref":"FIG. 5","b":["500","500","116","510","110","108","310","300"]},"The exemplary method  further involves determining a priority of each of the assets  based on determining an attribute associated with rendering each of the assets  for display, as shown in block . The prioritization module  of the multimedia application  can determine the priority based on the attributes associated with rendering the assets .","In one embodiment, an attribute associated with rendering the asset can be a scaling factor associated with the asset. A scaling factor can indicate a level of magnification at which to display an asset. For example, a view can include one asset displayed as a thumbnail (i.e., a \u201czoomed out\u201d asset) and another asset displayed at its full size (i.e., a \u201czoomed-in\u201d asset). An asset with a lower scaling factor, such as a thumbnail image, may have fewer details to render as compared to an asset with a higher scaling factor, such as a full-size image. More computing resources may be required to render assets with higher scaling factors, thereby increasing the time required to render the assets. A prioritization module  of a multimedia application  can be configured to assign a higher priority to the assets with a higher scaling factor.","In another embodiment, an attribute associated with rendering the asset can identify whether an asset  is static or dynamic. Static assets can include assets that do not change when rendered for display. Examples of static assets can include image assets -or text assets -. Dynamic assets include assets that change when rendered for display. An example of a dynamic asset is a video asset -, which includes a series of images that each persist for less than a second, or an animated slide show, which includes a series of images that persist for several seconds. Because the display of dynamic assets will change rapidly, loading dynamic assets may be an inefficient use of computing resources as opposed to loading static assets. A prioritization module  of a multimedia application  can therefore be configured to assign a higher priority to static assets than to dynamic assets.","The exemplary method  further involves loading at least some of the assets  into a memory  based on the priority of each of the assets , as shown in block . The API module  of the multimedia application  can load the assets into the memory , as shown in block  of the method .",{"@attributes":{"id":"p-0076","num":"0075"},"figref":"FIG. 6","b":["600","600","116","610","110","108","310","300"]},"The exemplary method  further involves determining a priority of each of the assets  based on whether the assets  are used in one or more related views associated with a currently displayed view, as shown in block . The prioritization module  of the multimedia application  can identify the related views using an application-specific rule. An application-specific rule can identify, for a currently displayed view, other views that meet one or more criteria common to both the currently displayed view and the related view. The prioritization module  can prioritize the assets  used in the related views.","Both the criteria and the conditions satisfying the criteria can be specified during the development of a multimedia application , and can therefore vary between different multimedia applications. In one example, a multimedia application  may be a digital magazine application for accessing a multimedia object  that is a digital magazine. The digital magazine application may provide for navigation to adjacent pages of an article by scrolling along a vertical axis and provide for navigation to adjacent articles by scrolling along a horizontal access. For a currently displayed page in an article, an application-specific rule may identify that other pages in the article, accessible via vertical scrolling, are related to the currently displayed page. Accordingly, the prioritization module  may prioritize assets used in views accessible via vertical scrolling, which correspond to pages related to the currently page based on their inclusion in a common magazine article, over views accessible via horizontal scrolling, which correspond to pages in adjacent articles.","In another example, a digital magazine application may be used to read a digital magazine with several articles. Each of the articles may include metadata, such as tags, identifying subject matter in the article. Several articles may have tags identifying subject matter common to the articles. For each page of an article, an application-specific rule for the digital magazine application may identify the first pages of articles with subject matter common to the currently displayed article as views related to the currently displayed view. The prioritization module  can therefore prioritize assets  used in the related views.","In another example, a digital magazine application may include a software module for tracking how frequently a method of accessing pages in a digital magazine is used. The software module can track how frequently pages are accessed via scrolling and how frequently views are accessed via navigation objects such as links. An application-specific rule can require that pages accessible via the most frequently used method of access be prioritized over other views. For example, the software module may determine that of the last twenty pages viewed, fifteen were accessed via scrolling and five were accessed via links from other pages. If pages are accessed via scrolling more frequently than pages are accessed via links, the higher frequency of scrolling can indicate that pages accessible via scrolling (e.g., the pages in a current article) should be prioritized over pages accessible via links. The prioritization module  can therefore prioritize assets used in views accessible via scrolling over assets used in views accessible via links.","The exemplary method  further involves loading at least some of the assets  into a memory  based on the priority of each of the assets , as shown in block . The API module  of the multimedia application  can load the assets into the memory , as shown in block  of the method .","While the  depict distinct methods for prioritizing assets, a prioritization module  can execute these methods in combination to prioritize assets . A prioritization module  can be configured to execute the various methods for determining a priority for an asset in any order. For example, a prioritization module  can prioritize the loading of assets  based on whether the assets are used in one or more related views. The prioritization module  can further prioritize the assets  based on their accessibility. The prioritization module  can further prioritize the assets  based on the resource requirements for loading the assets.","For example, a multimedia application may be a digital magazine application displaying a multimedia object that is an issue of the digital magazine. The digital magazine issue can include a plurality of articles. Each article can include a plurality of views associated with the article that are the pages of the article. Each article can include static assets, such as text, and dynamic assets, such as embedded videos or slide shows containing a series of sequentially displayed images.","The digital magazine application can include a prioritization module. If a page of an article in the digital magazine includes a slide show, the prioritization module can assign the highest priority to all images included in the slide show. The priority of the images associated with the slide show can be based on, for example, the slide show being a dynamic asset with a lower resource requirement. The prioritization module can assign the next highest priority to the text in a subsequent page in the currently displayed article of the digital magazine, a first page of a subsequent article in the digital magazine, and a first page of a previous article in the digital magazine. The priority of the text and image assets in the respective pages can be based on the text and images being included in pages accessible from the currently displayed page, the text and images being static assets, and the text and image assets having low resource requirements. The prioritization module can assign the next highest priority to a video used in one of the pages of the current article. The priority of the video can be based on the video being included in a page accessible from a currently displayed page, the video being a dynamic asset, and the video having a greater resource requirement than, for example, the slide show.","Numerous specific details are set forth herein to provide a thorough understanding of the claimed subject matter. However, those skilled in the art will understand that the claimed subject matter may be practiced without these specific details. In other instances, methods, apparatuses or systems that would be known by one of ordinary skill have not been described in detail so as not to obscure claimed subject matter.","Some portions are presented in terms of algorithms or symbolic representations of operations on data bits or binary digital signals stored within a computing system memory, such as a computer memory. These algorithmic descriptions or representations are examples of techniques used by those of ordinary skill in the data processing arts to convey the substance of their work to others skilled in the art. An algorithm is a self-consistent sequence of operations or similar processing leading to a desired result. In this context, operations or processing involves physical manipulation of physical quantities. Typically, although not necessarily, such quantities may take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared or otherwise manipulated. It has proven convenient at times, principally for reasons of common usage, to refer to such signals as bits, data, values, elements, symbols, characters, terms, numbers, numerals or the like. It should be understood, however, that all of these and similar terms are to be associated with appropriate physical quantities and are merely convenient labels. Unless specifically stated otherwise, it is appreciated that throughout this specification discussions utilizing terms such as \u201cprocessing,\u201d \u201ccomputing,\u201d \u201ccalculating,\u201d \u201cdetermining,\u201d and \u201cidentifying\u201d or the like refer to actions or processes of a computing device, such as one or more computers or a similar electronic computing device or devices, that manipulate or transform data represented as physical electronic or magnetic quantities within memories, registers, or other information storage devices, transmission devices, or display devices of the computing platform.","The system or systems discussed herein are not limited to any particular hardware architecture or configuration. A computing device can include any suitable arrangement of components that provide a result conditioned on one or more inputs. Suitable computing devices include multipurpose microprocessor-based computer systems accessing stored software that programs or configures the computing system from a general purpose computing apparatus to a specialized computing apparatus implementing one or more embodiments of the present subject matter. Any suitable programming, scripting, or other type of language or combinations of languages may be used to implement the teachings contained herein in software to be used in programming or configuring a computing device.","Embodiments of the methods disclosed herein may be performed in the operation of such computing devices. The order of the blocks presented in the examples above can be varied\u2014for example, blocks can be re-ordered, combined, and\/or broken into sub-blocks. Certain blocks or processes can be performed in parallel.","The use of \u201cadapted to\u201d or \u201cconfigured to\u201d herein is meant as open and inclusive language that does not foreclose devices adapted to or configured to perform additional tasks or steps. Additionally, the use of \u201cbased on\u201d is meant to be open and inclusive, in that a process, step, calculation, or other action \u201cbased on\u201d one or more recited conditions or values may, in practice, be based on additional conditions or values beyond those recited. Headings, lists, and numbering included herein are for ease of explanation only and are not meant to be limiting.","While the present subject matter has been described in detail with respect to specific embodiments thereof, it will be appreciated that those skilled in the art, upon attaining an understanding of the foregoing may readily produce alterations to, variations of, and equivalents to such embodiments. Accordingly, it should be understood that the present disclosure has been presented for purposes of example rather than limitation, and does not preclude inclusion of such modifications, variations and\/or additions to the present subject matter as would be readily apparent to one of ordinary skill in the art."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE FIGURES","p":["These and other features, aspects, and advantages of the present disclosure are better understood when the following Detailed Description is read with reference to the accompanying drawings, where:",{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
