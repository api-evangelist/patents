---
title: Systems and methods of providing image copy and modify commands to a receiver with an associated display
abstract: A method comprises providing image copy and modify commands to a receiver. Each copy command causes pixel values in an area of a display associated with the receiver to be copied to another area of the display and each modify command causes at least one pixel value in an area of the display to be modified. The method further comprises generating a future copy region if a future copy command that is providable to the receiver is encountered. The future copy region defines one or more rectangles of pixels on the display that are copyable in the future on the display associated with the receiver. The method also comprises using the future copy region to avoid sending a future copy command to the receiver that will copy pixel values that are to be modified on a display associated with a sending system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07450128&OS=07450128&RS=07450128
owner: Hewlett-Packard Development Company, L.P.
number: 07450128
owner_city: Houston
owner_country: US
publication_date: 20041115
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","BRIEF SUMMARY","NOTATION AND NOMENCLATURE","DETAILED DESCRIPTION"],"p":["Some electronic systems permit a user of one computer to view on his or her display images (graphics and text) that are generated on another computer remotely located from the user's computer. In some such systems, the computer where the graphics data is generated transmits commands to the user's computer that causes the user's computer to copy or move pixel data around on the user's display to replicate the images on the computer where the images originated. In some situations, a conflict can arise that causes the user's display to show inaccurate information.","In accordance with at least some embodiments of the invention, a method comprises providing image copy and modify commands to a receiver. Each copy command causes pixel values in an area of a display associated with the receiver to be copied to another area of the display and each modify command causes at least one pixel value in an area of the display to be modified. The method further comprises generating a future copy region if a future copy command that is providable to the receiver is encountered. The future copy region defines one or more rectangles of pixels on the display that are copyable in the future on the display associated with the receiver. The method also comprises using the future copy region to avoid sending a future copy command to the receiver that will copy pixel values that are to be modified on a display associated with a sending system.","In another embodiment, a system comprises a mirror driver and a sender. The mirror driver receives graphics commands and, based on the graphics commands, generates a copy region and a modify region. The sender transmits copy commands and modify commands to a receiving system. The sender determines whether any copy commands exist to be implemented in the future on a receiving system's display and, if a future copy command exists, the sender generates a modify region based on a comparison of the future copy command with a current modify region.","Certain terms are used throughout the following description and claims to refer to particular system components. As one skilled in the art will appreciate, computer companies may refer to a component by different names. This document does not intend to distinguish between components that differ in name but not function. In the following discussion and in the claims, the terms \u201cincluding\u201d and \u201ccomprising\u201d are used in an open-ended fashion, and thus should be interpreted to mean \u201cincluding, but not limited to . . . .\u201d Also, the term \u201ccouple\u201d or \u201ccouples\u201d is intended to mean either an indirect or direct electrical connection. Thus, if a first device couples to a second device, that connection may be through a direct electrical connection, or through an indirect electrical connection via other devices and connections. The term \u201csystem\u201d is used in a broad sense to refer to a collection of two or more components. By way of example, the term \u201csystem\u201d may refer to a computer system, a collection of computers, or a subsystem of a computer.",{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 1","FIG. 2","FIG. 1"],"b":["10","10","12","30","25","25","12","14","16","18","20","22","18","20","22","30","32","34","36","36","12","30","40","42","14","32","16","34","18","20","22","36","40","42","42","14","32"]},"Referring to , sending system  executes a graphics application  that causes images (e.g., text, lines, fills) to be shown by the graphics subsystem  on the display . Via network , the sending system  also sends image update commands to the receiving system . The image update commands generally dictate to the receiving system how to alter the information shown on display  so as to replicate that which is being shown on display . In some embodiments, image update commands are sent to the receiving system  while image data is generated by graphics subsystem , but without a display  attached to the sending system . The receiving system  may include an input device , such as a keyboard or mouse, which permits a user of the receiving system to effectively interact with the graphics application  as if the graphics application were being executed on the receiving system .","The image update commands operate on groups of pixels on the display. Any one of a plurality of color values can be applied to each pixel. In the embodiments, the pixel groupings are in the form of rectangles, but other pixel groupings (e.g., triangles) can be implemented as well. The image update commands include copy commands and modify commands. A copy command causes the color values of the pixels in a source rectangle to be copied to a target rectangle located at another location on the display. The source rectangle is defined in the copy command by an initial coordinate, such as the coordinate of the upper left-most pixel in the rectangle, and the width and height of the rectangle.  illustrates the results of the execution of two exemplary copy commands. One copy command causes the pixel color values of the pixels in rectangle  to be copied to rectangle . Another copy command copies rectangle  to rectangle  even though rectangle  overlaps rectangle . The lower left portion  of rectangle  is overwritten by a portion in the upper right of rectangle . A modify command alters one or more pixels within a given rectangle. For example, a modify command can be executed to modify rectangle  in some manner.","A copy command has relatively few values associated with it, namely, the identifying coordinate of a pixel in the source rectangle, the height and width of the original rectangle (measured in units of pixels), an identifying coordinate of a pixel in the target rectangle, and the height and width of the target rectangle. In the example of , the source rectangle  is defined by the coordinate of pixel  and height H and width W. The target rectangle  is defined by the coordinate of pixel  and height H and width W. A modify command, however, generally has more data included with the command, for example, the color values of each of the pixels contained within the rectangle to be modified. In some embodiments, the pixel data in the modify command may be compressed by the sending system (e.g., the sender ). If the pixel data is compressed, the receiving system (e.g., the receiver ) decompresses the compressed data to execute the modify command.","Referring again to , in operation, the sending system  determines changes that occur to the images on the graphics subsystem  and forms copy and modify commands, stores such copy and modify commands in a plurality of command buffers, and transmits the commands from the command buffers to the receiving system  when appropriate. The receiving system  executes the received copy and modify commands, and implements the changes defined by the commands on the display . A copy command is received and executed by the receiving system's processor  to copy a rectangle of pixels already rendered in graphics subsystem  of the receiving system to another location in graphics subsystem . Similarly, a modify command is received and executed by the receiving system to modify a rectangle of pixels already rendered in graphics subsystem  in accordance with the pixel data included with the modify command. Once the receiving system  has executed all of the copy and modify commands provided to it by the sending system , the receiving system submits an Image Update Request (IUR) across the network  to the sending system to indicate that the receiving system is ready to process additional image update commands, if any. In response, the sending system  sends more copy and modify commands to the receiving system . This process repeats as the receiving system  implements changes to the images shown on display  to replicate the images generated by the sending system's graphics subsystem  as shown on display . The receiver  formulates IURs to be sent to the sending system  in response, at least in part, on user input via the input device .","The graphics application  running on the sending system  comprises any one or more of a plurality of executable programs that use a graphics API. The APIs used by the graphics application are implemented by the graphics subsystem . The graphics application causes images to be shown on display  by providing graphics commands to the graphics subsystem . The mirror driver  receives a copy, or otherwise becomes aware, of all graphics commands that are provided to the graphics driver within the graphics subsystem . Whereas the graphics driver responds to the graphics commands by sending commands to the graphics adapter to cause pixels to be shown on the display , the mirror driver  does not send graphics commands to a graphics adapter. Instead, the mirror driver  tracks all of the regions of the display \u201csurface\u201d that have been drawn on, and the type of graphics commands (copy, modify) along with any attributes of the graphics commands that are drawn in each region. The mirror driver  formulates rectangle copy and modify commands and loads them into at least one command buffer for subsequent use by the sender  as explained below.","In the illustrated embodiment, the sender  is a software application that runs on the sending system's processor  and that communicates with the mirror driver . The sender  receives the IURs from the receiver  over network . In response, the sender  requests regions to be modified or copied from the mirror driver . For those regions that are to be modified, the sender  obtains the pixel data associated with the images from the graphics subsystem . Obtaining a modify region from the graphics subsystem entails reading a graphics frame buffer in the graphics subsystem . The graphics frame buffer in the sender's graphics subsystem includes pixel values that are to be applied to pixels on a display. The sender's display , however, may not be included as desired. Nevertheless, the sender's frame buffer will still be loaded with pixel data. If compression is implemented, the sender  compresses the images obtained from graphics subsystem .","The sender  requests \u201ccopy regions\u201d and \u201cmodify regions\u201d from the mirror driver  in response to receiving an IUR from the receiver . A copy region comprises one or more rectangles of pixels that are to be copied to other areas of a display. A modify region comprises one or more rectangles of pixels that are to be modified in some way as noted above. Although at least one rectangle is included in a copy region or a modify region, in some situations, no rectangles of pixels need to be copied or modified. Accordingly, broadly stated, each copy and modify region is defined as comprising zero or more rectangles.","The sending system  uses a plurality of command buffers to transmit copy and modify commands to the receiving system .  illustrates that the storage  in the sending system  comprising storage  for data. The data storage  is used for the command buffers and, if desired, for other reasons.  illustrates an embodiment of the use of two command buffers\u2014command buffer  and command buffer . Copy and modify commands are loaded into the command buffers by the mirror driver . Although two command buffers are shown, some embodiments may use a single command buffer or more than two command buffers, if desired.","In accordance with an embodiment of the invention, the sender  examines the contents of the command buffers to determine the areas of the screen that should be obtained for modify commands and the part of the screen that should be copied for copy commands. Obtaining an area of the screen for a modify command entails reading the frame buffer in the graphics subsystem to obtain the pixel color values of the pixels being modified. The sender  and mirror  driver are generally separately executing processes of the sending system  and, as such, the sender does not read commands from one command buffer while the mirror driver is adding copy and modify commands to the same buffer. Instead, while the mirror driver  is loading copy and modify commands into one of the command buffers, the sender  reads commands from the other buffer.","When the sender  receives an IUR from receiver , the sender inquires of the mirror driver  as to which command buffer to use to provide copy and modify commands to the receiver , and the mirror driver  informs the sender  as to which buffer to use. In some embodiments, that buffer will be the buffer that the mirror driver is currently using to load commands. The mirror driver will begin loading commands into the other buffer while the sender  is reading the command buffer that the sender was told to use. As the sender  reads the copy and modify commands from the appropriate command buffer, the sender reads the frame buffer in the graphics subsystem as needed upon encountering a modify command. The sender may compress the pixel data for a modify command and transmit modify and copy commands to the receiver over the network . In conjunction with the graphics subsystem , the receiver  then the commands provided to it by the sender .","Between the time that the mirror driver  detects that a modification is being made to a rectangle of pixels on graphics subsystem  and loads a corresponding modify command into a command buffer and the time that the sender  reads that modify command from the buffer and obtains the modified pixels from the frame buffer, those very same pixels may have been further modified by the normal execution of the graphics application . A disconnect thus occurs in that the pixel data obtained from the frame buffer by the sender  may not be the same pixel data that corresponded to the modify command in the first place. This disconnect can have a rippling effect, particularly as copy commands are executed that involve the same pixels. The following example illustrates this problem.",{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIGS. 5","FIG. 5","FIG. 5","FIG. 5","FIG. 5","FIG. 5","FIG. 5","FIG. 5"],"i":["a","e ","a","b","c ","d ","e ","e ","a ","e. "],"b":["5","16","65","65","18","30","65","65","66","67","5","66","34"]},{"@attributes":{"id":"p-0030","num":"0029"},"figref":["FIG. 6","FIGS. 5","FIG. 5","FIG. 5"],"i":["a","e ","b","c"],"b":["5","0","1","20","65","70","0","65","66","20","71","0"]},"As noted above, the sender  generates modify regions and copy regions based on the commands in the applicable command buffer. In accordance with embodiments of the invention, the sender  employs the following two properties:\n\n",{"@attributes":{"id":"p-0032","num":"0033"},"figref":["FIGS. 7","FIG. 7","FIG. 7","FIG. 7"],"i":["a","e ","a ","b","c. "],"b":["7","36","36","22","70","71","0","65","1","66","78","33","36","70","76","77","1"]},"After the receiver has executed those commands, as shown in -, the receiver  transmits another IUR to sender . This time, the sender  switches over to command buffer , at the direction of mirror driver , which contains copy and modify commands ,  to effectuate the remaining alterations of and . The copy region  includes a rectangle  which corresponds to the copy of rectangle  to rectangle  (). The modify region  includes a rectangle  which corresponds to center portion of rectangle  into which the \u201cZ\u201d is to be drawn ().","As noted above, shows the receiving system's display surface after applying modify region . Two rectangles were obtained from the sending system's frame buffer by the sender , compressed, sent as modify commands to the receiver , and then applied to the receiver's display surface. A \u201cZ\u201d was displayed in rectangle  in instead of an \u201cX.\u201d This occurred because by the time the sender  obtained the pixel data from the frame buffer that corresponds to rectangle  in modify region , the \u201cZ\u201d had already been drawn by the graphics subsystem . Thus, as copy region  is implemented on the receiving system, the rectangle  on the receiving system's display , which already has a \u201cZ\u201d contained in it, is copied, \u201cZ\u201d and all, to rectangle . Finally, modify region  is implemented which draws a \u201cZ\u201d into rectangle , which has no noticeable effect since the \u201cZ\u201d is already there. Comparing to the desired , however, illustrates the scenario that rectangle  on the receiving system contains a \u201cZ\u201d instead of the correct \u201cX.\u201d","Referring now to , a method embodiment  is shown to correct for the scenario noted above. The method comprises actions -. At , the method  comprises receiving an IUR from receiver . In response to the receipt of the IUR, the sender  asks the mirror driver  which command buffer to use (action ). The mirror driver  identifies the command buffer that the sender is to use and the sender then \u201ccoalesces\u201d the commands from the specified command buffer into a modify region and a copy region (action ). Coalescing commands from the command buffer into a modify region and a copy region entails applying a geometric union of each rectangle associated with each modify command in the command buffer to form a modify region, and applying a geometric union of each rectangle associated with each copy command in the command buffer to form a copy region. At , method  comprises obtaining the contents of the display surface for each rectangle in the modify region. This action includes the sender  reading a portion of the frame buffer in the graphics subsystem  as explained above.","Referring still to , method  comprises at  the sender  examining the other command buffer for copy commands and creating a \u201cfuture copy region\u201d if such copy commands exist. Such other command buffer is the buffer into which copy and modify commands are being stored by the mirror driver  for execution by the receiving system in the future. Such copy commands are copy commands that are potentially to be completed at a future point in time from the commands in the current command buffer. Not all of these \u201cfuture\u201d commands are submitted to the receiver  due to the actions described herein. At , for each rectangle in the current copy region, the sender  sends a copy command to the receiver . At , for each rectangle in the modify region, the sender  sends a modify command to the receiver .","Method  continues by the sender  clearing out the copy region to prepare for the next image update request made the receiver . At decision action , the sender  determines whether the future copy region is empty or contains at least one rectangle. If the future copy region is empty (i.e., no future copy commands were found in the other command buffer), then at action  the sender  clears out the modify region. If, however, the future copy region is not empty, then control passes to action  in which the geometric intersection between the current modify region and the future copy region is computed and the results are stored back in the modify region. The results of the intersection represent those rectangles of pixels that are common to the current modify region and the future copy region and thus those rectangle pixels that are currently to be modified and later to be copied.",{"@attributes":{"id":"p-0038","num":"0039"},"figref":["FIG. 9","FIG. 9","FIG. 9","FIG. 6","FIG. 6","FIG. 9","FIG. 6"],"b":["1","1","130","132","2","2","2","2","2","82","2","134","136","138","140","142","142","2","146","2","83","146","2","83"]},{"@attributes":{"id":"p-0039","num":"0040"},"figref":["FIGS. 10","FIGS. 10","FIG. 7","FIG. 10","FIG. 9","FIG. 9","FIG. 10","FIG. 10","FIG. 5"],"i":["a","e ","a","c ","a","c","d","e","e ","e "],"b":["10","30","10","7","36","2","67","142","142","67","134","136","138","142","83","146","2","66","67"]}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["For a detailed description of exemplary embodiments of the invention, reference will now be made to the accompanying drawings in which:",{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIGS. 5","i":["a","e "],"b":"5"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":["FIG. 6","FIGS. 5"],"i":["a","e; "],"b":"5"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":["FIGS. 7","FIG. 6"],"i":["a","e "],"b":"7"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIGS. 10","i":["a","e "],"b":"10"}]},"DETDESC":[{},{}]}
