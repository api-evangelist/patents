---
title: Translating programming language patterns into database schema patterns
abstract: Techniques are described herein that are capable of translating programming language patterns into database schema patterns. Examples of a programming language pattern include but are not limited to a source code pattern, an intermediate language code pattern, metadata associated with a source code pattern, metadata associated with an intermediate language code pattern, or any combination thereof. The programming language patterns may define objects that are included in an object model. Database schema patterns that define a database are automatically (e.g., inferentially) created based on respective programming language patterns that define objects of an object model. The programming language patterns are automatically mapped to the respective database schema patterns.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09274773&OS=09274773&RS=09274773
owner: Microsoft Technology Licensing, LLC
number: 09274773
owner_city: Redmond
owner_country: US
publication_date: 20110711
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND","SUMMARY","DETAILED DESCRIPTION","I. Introduction","II. Example Embodiments","III. Conclusion"],"p":["This application is related to the following applications: U.S. patent application Ser. No. 13\/166,825 filed 23 Jun. 2011 entitled \u201cConventions for Inferring Data Models\u201d, as well as the following applications co-filed with the present application: U.S. patent application Ser. No. 13\/179,598 filed 11 Jul. 2011 entitled \u201cObject-Relational Mapped Database Initialization\u201d, U.S. patent application Ser. No. 13\/179,601 filed 11 Jul. 2011 entitled \u201cFluent API Patterns for Managing Object Persistence\u201d, and U.S. patent application Ser. No. 13\/179,629 filed 11 Jul. 2011 entitled \u201cIncremental Inference for Developing Data Models\u201d.","Creating an application in a general-purpose programming language that maps to a relational database for data storage traditionally involves substantial manual effort by a human developer. For example, conventional techniques for creating a database for use with regard to an application typically involve the human developer explicitly setting up the database and manually ensuring mapping of the database with regard to the application and other configuration of the database. For instance, the human developer may explicitly draft code to map relational schema that is associated with the database to constructs of the programming language. Accordingly, these conventional techniques may place a substantial burden on the human developer to understand the mapping and configuration to be used for creating the database, to make appropriate choices with respect to creating the database, and\/or to be capable of implementing the mapping and configuration so that the database functions as intended.","Various approaches are described herein for, among other things, translating programming language patterns into database schema patterns. Examples of a programming language pattern include but are not limited to a source code pattern, an intermediate language code pattern, metadata associated with a source code pattern, metadata associated with an intermediate language code pattern, or any combination thereof. The programming language patterns may define objects that are included in an object model.","An example method is described in which database schema patterns that define a database are automatically (e.g., inferentially) created based on respective programming language patterns that define objects of an object model. For instance, the database schema patterns may be automatically created at runtime of an application having intermediate code that includes the programming language patterns. The programming language patterns are automatically mapped to the respective database schema patterns.","An example system is described that includes creation logic and mapping logic. The creation logic is configured to automatically (e.g., inferentially) create database schema patterns that define a database based on respective programming language patterns that define objects of an object model. The mapping logic is configured to automatically map the programming language patterns to the respective database schema patterns.","An example computer program product is described that comprises a computer-readable medium having computer program logic recorded thereon for enabling a processor-based system to translate programming language patterns into database schema patterns. The computer program product comprises a first program logic module and a second program logic module. The first program logic module is for enabling the processor-based system to automatically (e.g., inferentially) create database schema patterns that define a database based on respective programming language patterns that define objects of an object model. The second program logic module is for enabling the processor-based system to automatically map the programming language patterns to the respective database schema patterns.","This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended to be used to limit the scope of the claimed subject matter. Moreover, it is noted that the invention is not limited to the specific embodiments described in the Detailed Description and\/or other sections of this document. Such embodiments are presented herein for illustrative purposes only. Additional embodiments will be apparent to persons skilled in the relevant art(s) based on the teachings contained herein.","The features and advantages of the disclosed technologies will become more apparent from the detailed description set forth below when taken in conjunction with the drawings, in which like reference characters identify corresponding elements throughout. In the drawings, like reference numbers generally indicate identical, functionally similar, and\/or structurally similar elements. The drawing in which an element first appears is indicated by the leftmost digit(s) in the corresponding reference number.","The following detailed description refers to the accompanying drawings that illustrate exemplary embodiments of the present invention. However, the scope of the present invention is not limited to these embodiments, but is instead defined by the appended claims. Thus, embodiments beyond those shown in the accompanying drawings, such as modified versions of the illustrated embodiments, may nevertheless be encompassed by the present invention.","References in the specification to \u201cone embodiment,\u201d \u201can embodiment,\u201d \u201can example embodiment,\u201d or the like, indicate that the embodiment described may include a particular feature, structure, or characteristic, but every embodiment may not necessarily include the particular feature, structure, or characteristic. Moreover, such phrases are not necessarily referring to the same embodiment. Furthermore, when a particular feature, structure, or characteristic is described in connection with an embodiment, it is submitted that it is within the knowledge of one skilled in the relevant art(s) to implement such feature, structure, or characteristic in connection with other embodiments whether or not explicitly described.","Example embodiments described herein are capable of translating programming language patterns into database schema patterns. Examples of a programming language pattern include but are not limited to a source code pattern, an intermediate language code pattern, metadata associated with a source code pattern, metadata associated with an intermediate language code pattern, or any combination thereof. The programming language patterns may define objects that are included in an object model. In accordance with example embodiments, database schema patterns that define a database are automatically created based on respective programming language patterns that define objects of an object model. In further accordance with the example embodiments, the programming language patterns are automatically mapped to the respective database schema patterns.","In accordance with some example embodiments, the schema patterns that define the database are inferentially created based on the respective programming language patterns. As used herein, the term \u201cinferential\u201d may mean \u201cpartially inferential\u201d or \u201centirely inferential\u201d. It will be recognized that \u201cpartially inferential\u201d may mean partially inferential and partially explicit. Accordingly, the schema patterns may be said to be inferentially created based on the respective programming language patterns even if a portion (but less than all) of the schema patterns is explicitly created. In some example embodiments, conventions are used for inferring the schema patterns based on the programming language patterns. Some example techniques for using conventions to infer data models are described in U.S. patent application Ser. No. 13\/166,825 filed on Jun. 23, 2011 and titled \u201cConventions for Inferring Data Models\u201d, the entirety of which is incorporated herein by reference.","Example techniques described herein have a variety of benefits as compared to conventional techniques for creating a database. For instance, the techniques may enable creation of database structures by inferring those structures from programming language constructs. Some of the techniques may enable selective overriding of default database creation conventions. For instance, some portions of a database may be created and\/or edited automatically based on the programming language constructs (e.g., by convention), and other portions may be created explicitly. The techniques described herein may reduce (e.g., eliminate) manual effort of a human developer in order to create a database for an application. For instance, a human developer need not necessarily be capable of understanding and\/or implementing the mapping and configuration to be used for creating the database. A human developer need not necessarily make choices with respect to creating the database. Moreover, the techniques described herein may consume less time than the conventional techniques.",{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 1","FIG. 1"],"b":["100","100","100","102","104","102","104","106","106"]},"Development system  is a processing system that is capable of translating programming language patterns into database schema patterns. An example of a processing system is a system that includes at least one processor that is capable of manipulating data in accordance with a set of instructions. For instance, a processing system may be a computer (e.g., a desktop computer, laptop computer, tablet computer, netbook, etc.), a personal digital assistant, etc.","Development system  includes a programming editor , an intermediate code compiler , an automated database creator , a relational database management system (RDMS) module , an execution module , an operating system (OS) module , and an application programming interface (API) module . Programming editor  is configured to generate source code, which includes source code patterns , of an application based on programming instructions  that are received from a user (e.g., an application developer). For example, the source code may be uncompiled code. The source code may define an object model that includes code constructs, which may include but are not limited to classes, attributes, inheritance, etc. The source code may be any suitable type of source code (e.g., visual basic, C++, C#, etc.). Using C# for illustrative purposes, classes may appear as follows:",{"@attributes":{"id":"p-0025","num":"0024"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public class Product"]},{"entry":[{},"{"]},{"entry":[{},"\u2003public int Id { get; set; }"]},{"entry":[{},"\u2003public string Name { get; set; }"]},{"entry":[{},"\u2003public Category Category { get; set; }"]},{"entry":[{},"}"]},{"entry":[{},"public class Category"]},{"entry":[{},"{"]},{"entry":[{},"\u2003public string Id { get; set; }"]},{"entry":[{},"\u2003public ICollection<Product> Products { get; set; }"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"Intermediate code compiler  is configured to compile the source code to provide intermediate language code that includes intermediate language (IL) code patterns . The intermediate language code may include mappings and other metadata that relate back to names used in the source code. The IL code patterns  may define objects that are included in an object model.","Automated database creator  is configured to automatically (e.g., inferentially) create database schema patterns  that define a database based on respective programming language patterns, such as the source code patterns , the IL code patterns , metadata associated with the source code patterns , metadata associated with the IL code patterns, etc. For example, automated database creator  may automatically infer the database schema patterns  based on the respective programming language patterns. In another example, automated database creator  may automatically create the database schema patterns  at runtime of an application having intermediate code that includes the IL code patterns . Automated database creator  is further configured to automatically map the programming language patterns to the respective database schema patterns . Automated database creator  provides mapping , which indicates the mapping of the programming language patterns to the respective database schema patterns .","For example, when classes are used with an Entity Framework\u2122 (EF) context at runtime, automated database creator  may execute a runtime process that maps the database to the IL code patterns . In accordance with this example, the runtime process may use the IL code patterns  to infer an appropriate database schema. An example of an EF context is as follows:",{"@attributes":{"id":"p-0029","num":"0028"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public class MyContext : DbContext"]},{"entry":[{},"{"]},{"entry":[{},"\u2003public DbSet<Product> Products { get; set; }"]},{"entry":[{},"\u2003public DbSet<Category> Categories { get; set; }"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The programming language constructs may use annotations, inheritance, or other programming language constructs to influence the database. Following are some examples of programming language constructs:",{"@attributes":{"id":"p-0031","num":"0030"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"public class Product"},{"entry":"{"},{"entry":"\/\/the Key attribute will be used to determine the primary key for the table"},{"entry":"[Key]"},{"entry":"\u2003public int MyPkey { get; set; }"},{"entry":"\/\/the StringLength attribute will be used to set the length of the column in"},{"entry":"\/\/the database."},{"entry":"[StringLength(25)]"},{"entry":"\u2003public string Name { get; set; }"},{"entry":"\u2003public Category Category { get; set; }"},{"entry":"}"},{"entry":"\/\/inheritance is used to setup a TPH hierarchy for the Food and Product"},{"entry":"\/\/classes (instances of these classes will be stored in the same table."},{"entry":"public class Food : Product"},{"entry":"{"},{"entry":"\u2003public int Id { get; set; }"},{"entry":"[Required]"},{"entry":"\u2003public string Name { get; set; }"},{"entry":"\u2003public Category Category { get; set; }"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Automated database creator  may use the programming language constructs to influence or control the database structures. This coupled with a runtime that understands the conventions and \u201coverrides\u201d for database control may be helpful to users building applications.","Automated database creator  is shown in  to receive the IL code patterns  from intermediate code compiler  for illustrative purposes and is not intended to be limiting. It will be recognized that automated database creator  may receive metadata associated with the IL code patterns  from intermediate code compiler  in addition to or in lieu of the IL code patterns . Moreover, automated database creator  may receive the source code patterns  and\/or metadata associated therewith from programming editor  in addition to or in lieu of receiving the IL code patterns  and\/or metadata associated therewith from intermediate code compiler .","RDMS module  executes a relational database management system, which controls maintenance and use of the database that is defined by database schema patterns . Controlling maintenance and use of the database may involve translating the database schema patterns  back into the programming language patterns. The relational database management system may use the mapping  received from automated database creator  to translate the database schema patterns  back into the programming language patterns.","It will be recognized that RDMS module  may include automated database creator , though the scope of the example embodiments is not limited in this respect.","Execution module  is configured to execute the intermediate code, including the IL code patterns , or a compiled version thereof. For example, execution module  may compile the intermediate code at runtime into machine code that is executable. In accordance with this example, execution module  may execute the machine code. Execution module  may be implemented as a debugger or as an instruction set simulator to execute the intermediate code in a debug mode for purposes of testing and\/or debugging the application. In accordance with this example, execution module  may monitor performance of the application during its execution in order to identify and\/or resolve programming bugs that hinder the performance. In another example, execution module  may execute the intermediate code in a production mode, as opposed to a debug mode.","OS module  executes an operating system, which performs operations that may include but are not limited to managing computer hardware resources, providing services for execution of applications, etc. on development system . Examples of an operating system include but are not limited to Berkeley Software Distribution\u2122 (BSD), developed and distributed by the Computer Systems Research Group (CSRG) of the University of California, Berkeley, or descendants thereof; Linux developed and distributed under the GNU Project; Mac OS\u00ae developed and distributed by Apple Inc., Microsoft Windows\u00ae developed and distributed by Microsoft Corporation; and UNIX\u2122 developed and distributed by AT&T.","API module  is configured to provide API calls, such as API call , to automated database creator  based on overriding instructions  that are received from a user. Each API call may include information regarding an override mapping between one or more of the programming language patterns and one or more of the database schema patterns . Override mapping specifies a mapping that overrides or takes precedence over the mapping that is automatically performed by automated database creator  in response to creation of the database. Accordingly, mapping , which is provided by automated database creator , may be based on one or more of such API calls.","API calls may include any suitable type of information, including but not limited to names of foreign keys and\/or candidate keys for a designated table in the database, indications of whether relationships are optional or required, indications of nullability of foreign keys, etc.","It will be recognized that any one or more of programming editor , intermediate code compiler , automated database creator , RDMS module , execution module , and\/or API module  may be cloud-based. For instance, any one or more of the aforementioned elements of development system  may be accessible to a user via a network, such as network .","It will be further recognized that development system  may not include one or more of programming editor , intermediate code compiler , automated database creator , RDMS module , execution module , OS module , and\/or API module . Furthermore, development system  may include modules in addition to or in lieu of programming editor , intermediate code compiler , automated database creator , RDMS module , execution module , OS module , and\/or API module .","Execution system  is shown in  to illustrate that the IL code patterns  may be executed by a system in addition to or in lieu of development system . Execution system  is a processing system that is capable of executing IL code patterns, such as IL code patterns . Execution system  receives the IL code patterns , the database schema patterns , and the mapping  via network . Execution system  includes RDMS module , execution module , and OS module . RDMS module , execution module , and OS module  operate similarly to RDMS module , execution module , and OS module , respectively, as described above with reference to development system . Persons skilled in the relevant art(s) will recognize that database creation system  need not necessarily include execution system .","It will be recognized that automated database creator  may be implemented in various ways to translate programming language patterns into database schema patterns, including being implemented in hardware, software, firmware, or any combination thereof. For example, automated database creator  may be implemented as computer program code configured to be executed in one or more processors. In another example, automated database creator  may be implemented as hardware logic\/electrical circuitry. In an embodiment, automated database creator  may be implemented in a system-on-chip (SoC). Each SoC may include an integrated circuit chip that includes one or more of a processor (e.g., a microcontroller, microprocessor, digital signal processor (DSP), etc.), memory, one or more communication interfaces, and\/or further circuits and\/or embedded firmware to perform its functions.",{"@attributes":{"id":"p-0044","num":"0043"},"figref":["FIG. 2","FIG. 1","FIG. 4","FIG. 4"],"b":["200","200","112","100","200","400","112","400","402","404","406","408","200"]},"As shown in , the method of flowchart  begins at step . In step , database schema patterns that define a database are automatically created based on respective programming language patterns that define objects of an object model. For instance, the database schema patterns may be automatically inferentially created based on the respective programming language patterns. The database schema patterns may be automatically created at runtime of an application having intermediate code that includes the programming language patterns. In an example implementation, creation logic  automatically creates database schema patterns  based on respective programming language patterns .","In an example embodiment, automatically creating the database schema patterns at step  includes automatically (e.g., inferentially) generating a script (e.g., a data definition language (DDL) script) based on the programming language patterns. In accordance with this embodiment, the script is executed to generate the database schema patterns. The database schema patterns may be automatically created based on information in addition to the programming language patterns. For instance, the database schema patterns may be automatically created further based on loading configuration data from a configuration file or any other suitable information.","At step , the programming language patterns are automatically mapped to the respective database schema patterns. In an example implementation, mapping logic  automatically maps the programming language patterns  to the respective database schema patterns . Mapping logic  provides mapping , which includes information regarding the mapping of the programming language patterns  to the respective database schema patterns .","At step , a determination is made whether API call(s) that include information indicating override mapping regarding designated programming language pattern(s) are received. If API call(s) that include information indicating override mapping regarding designated programming language pattern(s) are received, flow continues to step . Otherwise, flowchart  ends. In an example implementation, determination logic  determines whether API call(s)  that include information indicating override mapping regarding designated programming language pattern(s) of the programming language patterns  are received. In accordance with this example implementation, if determination logic  receives API call(s) , determination logic  provides revision instructions  to revision logic , so that revised mapping  may be provided as an output of automated database creator . Revision instructions  include the information indicating the override mapping. If determination logic  does not receive API call(s) , determination logic  does not provide revision instructions  to revision logic , so that mapping  may be provided as an output of automated database creator .","At step , mapping of the designated programming language pattern(s) with respect to corresponding database schema pattern(s) is revised in accordance with the information regarding the override mapping.","In an example implementation, if revision logic  receives revision instructions , revision logic  revises the mapping regarding the designated programming language pattern(s) and provides revised mapping  in lieu of mapping  as an output of automated database creator . Revised mapping  includes information regarding the revised mapping of the designated programming language pattern(s). Revision logic  is shown to include a switch  for illustrative purposes. Revision logic  may cause switch  to select revised mapping  and not mapping  to be provided as an output. In one example, revised mapping  may indicate that the designated programming language pattern(s) are to be mapped to respective replacement database schema pattern(s). In accordance with this example, revision logic  may modify the database schema patterns  to include the replacement database schema pattern(s) in lieu of the corresponding database schema patterns that were automatically created at step  to provide database schema patterns . In another example, revised mapping  may indicate that the designated programming language pattern(s) are to be mapped to respective revised data schema pattern(s), which are revised versions of the corresponding database schema patterns that were automatically created at step . In accordance with this example, revision logic  may modify the database schema patterns  to include the revised versions of the database schema patterns that correspond to the designated programming language pattern(s) to provide the database schema patterns . The replacement database schema pattern(s) and\/or the revised database schema pattern(s) may be generated and\/or provided in accordance with revision instructions .","In accordance with this example implementation, if revision logic  does not receive revision instructions , revision logic  does not revise the mapping of the programming language patterns . Accordingly, revision logic  provides mapping  as an output of automated database creator . For instance, revision logic  may cause switch  to select mapping  to be provided as an output. If revision logic  does not receive revision instructions , database schema patterns  are unchanged from database schema patterns .","In an example embodiment, automatically creating the database schema patterns at step  may include automatically creating table(s) in the database based on respective class(es) that are defined by the programming language patterns. For instance, the table(s) may be automatically inferentially created based on the respective class(es). In an aspect of this embodiment, automatically creating the database schema patterns at step  may further include automatically identifying a reference from a first class that is defined by a first programming language pattern to a second class that is defined by a second programming language pattern. In accordance with this aspect, a foreign key may be automatically generated in a first table that corresponds to the first class based on the reference. The foreign key corresponds to a candidate key in a second table that corresponds to the second class. The foreign key may be automatically generated inferentially, though the scope of the embodiments is not limited in this respect.","In another aspect of the aforementioned embodiment, automatically creating the database schema patterns at step  may further include automatically identifying a many-to-many relationship between first properties of a first class that is defined by a first programming language pattern and second properties of a second class that is defined by a second programming language pattern. In accordance with this aspect, a join table that includes fields that are in common with respect to a first table that corresponds to the first class and a second table that corresponds to the second class is automatically created based on the many-to-many relationship. For instance, the join table may be automatically inferentially created based on the many-to-many relationship.","In one example implementation of this aspect, the first class may be an Employee class and the second class may be a Territory class. Each employee in the Employee class may be assigned to one or more territories in the Territory class. Each territory in the Territory class may be supported by one or more employees. Accordingly, the Employee class has a collection of territories for each employee, and the Territory class has a collection of employees that support each territory. Such a relationship between the employees in the Employee class and the territories in the Territory class may be automatically identified as a many-to-many relationship at step . For instance, the many-to-many relationship may be determined based on a convention.","In yet another aspect of the aforementioned embodiment, automatically creating the tables in the database may include determining table names for the respective tables based on class names for the respective classes. For example, the table names may be determined inferentially based on the class names of the respective classes. In another example, a table name may be determined to be a plural of a class name for the respective class. For instance, if the class has a class name of Customer, the corresponding table name may be determined to be Customers; if the class has a class name of Territory, the corresponding table name may be determined to be Territories, etc.","In still another aspect of the aforementioned embodiment, automatically creating the tables in the database may include automatically creating columns in a designated table of the database based on properties regarding a designated class. For instance, the columns may be automatically inferentially created in the designated table based on the properties. Each of the columns of the designated table corresponds to a respective property regarding the designated class. In accordance with this aspect, automatically creating the tables may further include automatically determining column names for the respective columns based on property names for the respective properties. For instance, the column names may be automatically determined inferentially based on the property names. In further accordance with this aspect, automatically creating the tables may further include automatically assigning a column name to a designated column in the designated table based on the column name being specified by a data annotation that is associated with a designated property regarding the designated class. A data annotation is a declarative representation of explicit information that is associated with a class or a property thereof. The designated property corresponds to the designated column. In yet further accordance with this aspect, an API call that specifies a column name to be assigned to a designated column in the designated table that corresponds to a designated property regarding the designated class may be received in response to automatically creating the columns in the designated table. The column name may be assigned to the designated column in response to receiving the API call.","In some example embodiments, one or more steps , , , and\/or  of flowchart  may not be performed. Moreover, steps in addition to or in lieu of steps , , , and\/or  may be performed. For example, a data annotation that is associated with a property that is defined by a designated programming language pattern may be received. For instance, creation logic  may receive the data annotation. The data annotation may include information regarding a relationship between the property and a column of a table in the database. In accordance with this example, automatically mapping the programming language patterns to the respective database schema patterns at step  may include automatically mapping the property to the column based on the information.","In another example, the steps shown in flowchart  of  may be incorporated into flowchart . For instance, steps , , , and  may be performed in response to performance of the steps shown in . Flowchart  is described with reference to automated database creator  for illustrative purposes. Further structural and operational embodiments will be apparent to persons skilled in the relevant art(s) based on the discussion regarding flowchart .","As shown in , the method of flowchart  begins at step . In step , a determination is made that a user attempts to perform an operation with respect to the database. In an example implementation, determination module  determines that the user attempts to perform an operation with respect to the database.","At step , a determination is made that the database does not exist. In an example implementation, determination module  determines that the database does not exist.","The steps shown in  describe one example trigger for automatically creating the database schema patterns based on the respective programming language patterns. It will be recognized that other events and\/or operations may trigger the automatic creation of the database based on the respective programming language patterns. For example, a determination may be made that a user attempts to use the object model that includes the object defined by the programming language patterns. In accordance with this example, the user may attempt to access an object, modify an object, etc. In further accordance with this example, the user may attempt to add an entity to a context class that defines a relationship between the programming language patterns and the database schema patterns. Some example techniques for triggering automatic creation of database schema patterns based on programming language patterns are described in U.S. patent application Ser. No. 13\/179,598 entitled \u201cObject-Relational Mapped Database Initialization\u201d filed on even date herewith, the entirety of which is incorporated herein by reference.","It will be recognized that automated database creator  may not include one or more of creation logic , mapping logic , and\/or determination logic . Furthermore, automated database creator  may include modules in addition to or in lieu of creation logic , mapping logic , and\/or determination logic .",{"@attributes":{"id":"p-0063","num":"0062"},"figref":["FIGS. 5 and 6","FIG. 2","FIG. 4","FIG. 7","FIG. 7"],"b":["500","600","202","500","600","402","400","500","600","700","402","700","702","704","706","708","710","712","500","600"]},"As shown in , the method of flowchart  begins at step . In step , a reference is automatically identified from a first class to a second class. The first class is defined by a first programming language pattern. The second class is defined by a second programming language pattern. In an example implementation, identification logic  automatically identifies the reference from the first class to the second class.","At step , a determination that the second class is a complex type that includes multiple properties is automatically made. For instance, the determination that the second class is a complex type may be automatically made based on a data annotation that indicates that the second class is a complex type. In an example implementation, determination logic  automatically determines that the second class is a complex type that includes multiple properties.","At step , a table is automatically created in the database. For instance, the table may be automatically inferentially created in the database. The table corresponds to the first class and includes at least columns that correspond to the respective properties of the second class. In an example implementation, table creation logic  automatically creates the table in the database.","In one example embodiment, the first class is a Customer class and the second class is an Address class. The Customer class includes a reference to the Address class. For instance, each customer of the Customer class may have a corresponding address in the Address class. A determination may be made at step  that the Address class is a complex type based on the Address class having a street property, a city property, and a zip code property. A Customer table may be automatically created in the database at step , such that the Customer table includes at least a street column, a city column, and a zip code column.","As shown in , the method of flowchart  begins at step . In step , a determination is made that the programming language patterns include a type hierarchy pattern. In an example implementation, determination logic  determines that the programming language patterns include a type hierarchy pattern.","At step , the type hierarchy pattern is automatically translated into a table per hierarchy pattern that defines an entity set. An entity set is a logical container for instances of an entity type and instances of any type derived from that entity type. For instance, properties of the type hierarchy pattern may be converted from a hierarchical arrangement to a linear arrangement so that they fit into one table. The entity set includes a base entity type and at least one derived type. In an example implementation, translation logic  automatically translates the type hierarchy pattern into the table per hierarchy pattern.","At step , a discriminator column is automatically added to a table that is included in the database. In an example implementation, discriminator logic  automatically adds the discriminator column to a table that is included in the database.","At step , a discriminator value is automatically selected to be associated with the discriminator column. The discriminator value indicates a distinction between the base type and the at least one derived type. In an example implementation, selection logic  automatically selects the discriminator value to be associated with the discriminator column.","In an example embodiment, the table per hierarchy pattern defines an entity set to include a base class of Customer and a derived class of SpecialCustomer. A Customer table is to include the properties of the Customer class and the properties of the SpecialCustomer class. A discriminator column may be automatically added to the Customer table at step . A discriminator value of SpecialCustomer may be automatically selected to be associated with the discriminator column at step . For instance, if a query were performed with respect to the table, a determination may be made that a column of the table corresponds to a customer, and the type SpecialCustomer may be created in response to the discriminator value being selected to be SpecialCustomer.","It will be recognized that the type hierarchy pattern may be automatically translated into an inheritance type hierarchy pattern other than the table per hierarchy pattern. Examples of other types of patterns include but are not limited to a table per type pattern, a table per concrete pattern, etc. A type hierarchy pattern may be automatically translated into another type of pattern based on data annotations and\/or APIs. Moreover, such data annotations and\/or APIs may be used to specify the discriminator value to be associated with the discriminator column.","It will be recognized that creation logic  may not include one or more of identification logic , determination logic , table creation logic , translation logic , discriminator logic , and\/or selection logic . Furthermore, creation logic  may include modules in addition to or in lieu of identification logic , determination logic , table creation logic , translation logic , discriminator logic , and\/or selection logic .","Programming editor , intermediate code compiler , automated database creator , RDMS module , execution module , OS module , API module , RDMS module , execution module , OS module , creation logic , mapping logic , determination logic , revision logic , switch , identification logic , determination logic , table creation logic , translation logic , discriminator logic , selection logic , and flowcharts , , , and  may be implemented in hardware, software, firmware, or any combination thereof.","For example, programming editor , intermediate code compiler , automated database creator , RDMS module , execution module , OS module , API module , RDMS module , execution module , OS module , creation logic , mapping logic , determination logic , revision logic , switch , identification logic , determination logic , table creation logic , translation logic , discriminator logic , selection logic , flowchart , flowchart , flowchart , and\/or flowchart  may be implemented as computer program code configured to be executed in one or more processors.","In another example, programming editor , intermediate code compiler , automated database creator , RDMS module , execution module , OS module , API module , RDMS module , execution module , OS module , creation logic , mapping logic , determination logic , revision logic , switch , identification logic , determination logic , table creation logic , translation logic , discriminator logic , selection logic , flowchart , flowchart , flowchart , and\/or flowchart  may be implemented as hardware logic\/electrical circuitry. For instance, in an embodiment, one or more of programming editor , intermediate code compiler , automated database creator , RDMS module , execution module , OS module , API module , RDMS module , execution module , OS module , creation logic , mapping logic , determination logic , revision logic , switch , identification logic , determination logic , table creation logic , translation logic , discriminator logic , selection logic , flowchart , flowchart , flowchart , and\/or flowchart  may be implemented in a system-on-chip (SoC). The SoC may include an integrated circuit chip that includes one or more of a processor (e.g., a microcontroller, microprocessor, digital signal processor (DSP), etc.), memory, one or more communication interfaces, and\/or further circuits and\/or embedded firmware to perform its functions.",{"@attributes":{"id":"p-0078","num":"0077"},"figref":["FIG. 8","FIG. 1","FIGS. 4 and 7"],"b":["800","104","102","800","800","800","800","800"]},"As shown in , computer  includes a processing unit , a system memory , and a bus  that couples various system components including system memory  to processing unit . Bus  represents one or more of any of several types of bus structures, including a memory bus or memory controller, a peripheral bus, an accelerated graphics port, and a processor or local bus using any of a variety of bus architectures. System memory  includes read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS) is stored in ROM .","Computer  also has one or more of the following drives: a hard disk drive  for reading from and writing to a hard disk, a magnetic disk drive  for reading from or writing to a removable magnetic disk , and an optical disk drive  for reading from or writing to a removable optical disk  such as a CD ROM, DVD ROM, or other optical media. Hard disk drive , magnetic disk drive , and optical disk drive  are connected to bus  by a hard disk drive interface , a magnetic disk drive interface , and an optical drive interface , respectively. The drives and their associated computer-readable storage media provide nonvolatile storage of computer-readable instructions, data structures, program modules and other data for the computer. Although a hard disk, a removable magnetic disk and a removable optical disk are described, other types of computer-readable storage media can be used to store data, such as flash memory cards, digital video disks, random access memories (RAMs), read only memories (ROM), and the like.","A number of program modules may be stored on the hard disk, magnetic disk, optical disk, ROM, or RAM. These programs include an operating system , one or more application programs , other program modules , and program data . Application programs  or program modules  may include, for example, computer program logic for implementing programming editor , intermediate code compiler , automated database creator , RDMS module , execution module , OS module , API module , RDMS module , execution module , OS module , creation logic , mapping logic , determination logic , revision logic , switch , identification logic , determination logic , table creation logic , translation logic , discriminator logic , selection logic , flowchart  (including any step of flowchart ), flowchart  (including any step of flowchart ), flowchart  (including any step of flowchart ), and\/or flowchart  (including any step of flowchart ), as described herein.","A user may enter commands and information into the computer  through input devices such as keyboard  and pointing device . Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a serial port interface  that is coupled to bus , but may be connected by other interfaces, such as a parallel port, game port, or a universal serial bus (USB).","A display device  (e.g., a monitor) is also connected to bus  via an interface, such as a video adapter . In addition to display device , computer  may include other peripheral output devices (not shown) such as speakers and printers.","Computer  is connected to a network  (e.g., the Internet) through a network interface or adapter , a modem , or other means for establishing communications over the network. Modem , which may be internal or external, is connected to bus  via serial port interface .","As used herein, the terms \u201ccomputer program medium\u201d and \u201ccomputer-readable medium\u201d are used to generally refer to media such as the hard disk associated with hard disk drive , removable magnetic disk , removable optical disk , as well as other media such as flash memory cards, digital video disks, random access memories (RAMs), read only memories (ROM), and the like. Such computer-readable storage media are distinguished from and non-overlapping with communication media. Communication media typically embodies computer-readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wireless media such as acoustic, RF, infrared and other wireless media. Example embodiments are also directed to such communication media.","As noted above, computer programs and modules (including application programs  and other program modules ) may be stored on the hard disk, magnetic disk, optical disk, ROM, or RAM. Such computer programs may also be received via network interface  or serial port interface . Such computer programs, when executed or loaded by an application, enable computer  to implement features of embodiments discussed herein. Accordingly, such computer programs represent controllers of the computer .","Example embodiments are also directed to computer program products comprising software (e.g., computer-readable instructions) stored on any computer useable medium. Such software, when executed in one or more data processing devices, causes a data processing device(s) to operate as described herein. Embodiments may employ any computer-useable or computer-readable medium, known now or in the future. Examples of computer-readable mediums include, but are not limited to storage devices such as RAM, hard drives, floppy disks, CD ROMs, DVD ROMs, zip disks, tapes, magnetic storage devices, optical storage devices, MEMS-based storage devices, nanotechnology-based storage devices, and the like.","While various embodiments have been described above, it should be understood that they have been presented by way of example only, and not limitation. It will be apparent to persons skilled in the relevant art(s) that various changes in form and details can be made therein without departing from the spirit and scope of the invention. Thus, the breadth and scope of the present invention should not be limited by any of the above-described example embodiments, but should be defined only in accordance with the following claims and their equivalents."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS\/FIGURES","p":["The accompanying drawings, which are incorporated herein and form part of the specification, illustrate embodiments of the present invention and, together with the description, further serve to explain the principles involved and to enable a person skilled in the relevant art(s) to make and use the disclosed technologies.",{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIGS. 2 and 3"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":["FIG. 4","FIG. 1"]},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIGS. 5 and 6"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 7","FIG. 4"]},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
