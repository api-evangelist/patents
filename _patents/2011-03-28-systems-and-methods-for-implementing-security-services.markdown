---
title: Systems and methods for implementing security services
abstract: Systems and methods for providing a login context operate a virtual machine, wherein the virtual machine includes an open services platform and an authentication service, wherein the authentication service includes a classloader, and an initial classloader is designated as the classloader of the authentication service, register a login module, receive an authentication request from a first application, and responsive to receiving the authentication request designate a classloader associated with the login module as the classloader of the authentication service, generate a login context of the login module, and provide the login context of the login module to the first application, whereby the first application uses the login context to perform an authentication.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08631480&OS=08631480&RS=08631480
owner: Canon Kabushiki Kaisha
number: 08631480
owner_city: Tokyo
owner_country: JP
publication_date: 20110328
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["1. Field of the Disclosure","The present disclosure relates generally to authentication.","2. Description of the Related Art","It is often desirable to make computing resources available to only authorized users, for instance to protect against malicious users and programs and to prevent overutilization of the resources. However, the computing resources should be available to authorized users and programs, and different computing resources may need different levels of security. Making the resources available to different users and programs is made more complicated because the resources may need to be accessed across multiple security domains, different security services may be used to secure the resources, and different software platforms may be used to interface with the security services.","Computing environments provide some standardized tools to help solve these issues. In a Java\u00ae environment, the Java Authentication and Authorization Service (JAAS) provides a security framework that enables developers to authenticate users and enforce access controls upon users. JAAS also standardizes interfaces and abstracts underlying authentication and authorization mechanisms. JAAS login modules do the actual authentication and authorization. However, login modules need to be determined before or at the time the virtual machine is started because login modules cannot be added or removed dynamically while the virtual machine is running. For example, OSGi platforms require the login modules provided by JAAS to be in the classpath of JAAS. Thus, the login modules must be added to the classpath before the JAVA Virtual Machine is started, which in turn prevents the dynamic addition and removal of login modules.","In one embodiment, a method for providing a login context comprises starting a virtual machine, wherein the virtual machine includes an open services platform and an authentication service, wherein the authentication service includes a classloader, and an initial classloader is designated as the classloader of the authentication service, registering a login module, receiving an authentication request from a first application, and responsive to receiving the authentication request designating a classloader associated with the login module as the classloader of the authentication service, generating a login context of the login module, and providing the login context of the login module to the first application, whereby the first application uses the login context to perform an authentication.","In one embodiment, a computing device for creating a login context comprises a computer-readable storage device, and one or more processors configured to cause the computing device to perform operations including operating a virtual machine that includes a security platform, registering a first login module while the virtual machine is operating, assigning a first classloader associated with the first login module as a classloader of the security platform, generating a login context of the first login module, and providing the login context of the first login module to a first client application.","In one embodiment, one or more computer-readable media store instructions that, when executed by one or more computing devices, cause the one or more computing devices to perform operations comprising registering a security service while operating a virtual machine, the virtual machine including a security platform, designating a classloader associated with the security service as a classloader of the security platform, generating a context of the security service responsive to receiving a request for a context of the security service from a first application, wherein generating the context of the security service includes invoking the designated security platform classloader, and providing the context of the security service to the first application.","The following description is of certain illustrative embodiments, and the disclosure is not limited to these embodiments, but includes alternatives, equivalents, and modifications such as are included within the scope of the claims. Additionally, the illustrative embodiments may include several novel features, and a particular feature may not be essential to practice the systems and methods described herein.",{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1","b":["100","100","140","130","135","120","110","100","170","1","150","1","150","140","130","135","135"]},"The OSGi platform  provides a module system and service platform for JAVA and an execution environment that can install, start, stop, update, and uninstall applications and components (also collectively referred to herein as \u201cbundles\u201d) without requiring a reboot of the JVM . Bundles can make services available to other bundles. A bundle's services are added to a services registry so that other bundles can detect and use them, and the removal of a service from the registry can be used to detect the removal of the service.","The system  also includes security providers that make security services available to other applications, modules, bundles, components, etc.  illustrates security providers -N (-, - . . . -N, also referred to herein as \u201csecurity providers \u201d) where N represents any positive integer such that the system is capable of operating with the total number of security providers. The security providers  may be implemented in bundles and make their services available as OSGi services (including adding the services to the OSGi services registry). The service providers  may include login modules and\/or provide services that include JAAS authentication and authorization services. The client application  may also be a bundle, and the client application  may request one or more services (e.g., authentication, authorization) from the security providers .","The system  also includes a context factory  in the OSGi platform . The context factory  registers new security providers  and facilitates the access of the security services by the client application . When a security provider  is loaded onto the OSGi platform and started, the context factory  registers the security provider , including registering any service(s) provided by the security provider , and registers a classloader for the service provider and\/or service(s). The context factory  receives requests for the security service(s) from the client application  and returns an interface (e.g., a login context) of the security services to the client application . The client application  may then interact with the security service(s) and the security provider  without the involvement of the context factory  (e.g., without the context factory  acting as a proxy). Thus, the client application  can use the normal API of JAAS  to communicate with the security service(s), which simplifies the design of the client application and\/or the use of the security service(s).",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 2","b":["200","200","240","230","235","220","270","250","210","215","215","250","215","217","250","250","217","210","215","215","220","200","210","215"]},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 3","b":["300","300","1","380","2","390","370","370","300","1","380"]},"The security device  includes one or more processors  (also referred to herein as \u201cCPU \u201d), which may be a conventional or customized microprocessor(s). The CPU  is configured to read and execute computer readable instructions, and the CPU  may command\/and or control other components of the security device . The security device  also includes I\/O interfaces , which provide communication interfaces to other devices, including a keyboard, a display device, a mouse, a printing device, a touch screen, a light pen, an optical storage device, a scanner, a microphone, a camera, etc. The security device  also includes a memory , which may be volatile or non-volatile, such as ROM, RAM, and flash memory. The security device  further includes a network interface  that allows the security device  to communicate with the network . The storage device  stores data or modules and may include, for example, a hard drive, an optical storage device, a diskette, and\/or a solid state drive. The components of the security device  are connected via a bus. The security device  includes an operating system, which manages the hardware, the processes, the interrupts, the memory, and\/or the file system of the security device .","The security device  also includes a context factory , a custom configuration unit , and a security provider . The context factory , the custom configuration unit , and the security provider  may be implemented in computer-executable instructions. Computer-executable instructions may be executed by the security device  to cause the security device  to perform certain operations, including the methods described herein, though for ease of description a member of the security device  may be described as performing the operations. Computer-executable instructions may include logic and may be implemented in software, firmware, and\/or hardware. In other embodiments, the context factory  and the custom configuration unit  may be combined into a single member or further divided into more members.",{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 4","FIGS. 1-3","FIG. 4"],"b":["110","215"]},"Beginning in block , a virtual machine is started, such as a JAVA virtual machine. Next, in block , a classloader for a security module is obtained. For example, a security module that includes an associated classloader may be installed as part of a bundle on a virtual machine that includes an OSGi platform, and the security module may provide the classloader to a custom configuration unit as a parameter passed in a method call. Moving to block , a configuration entry is generated for the security module. The configuration entry indicates the classloader and associates the classloader with the security module and\/or any login contexts that can be provided by the security module. Finally, in block , the configuration entry is stored, for example in a configuration table in a memory.",{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 5","b":["500","510","520","530","540"]},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 6","b":["600","699","693","699","693","605","693"]},"Next, in stage , a client application  requests a login context from the context factory . In stage , the context factory  retrieves the classloader for the requested login context from the custom configuration unit . Proceeding to stage , the context factory  performs a thread switch, and then in stage  requests the login context from JAAS . In stage , JAAS invokes the login module  to generate the login context, using the classloader and classpath associated with the login module . During the thread switch, the context factory  and\/or JAAS  are blocked from attempting to generate additional login contexts. Moving to stage , the thread is restored, which permits the context factory  and\/or JAAS  to attempt to generate additional login contexts, and the generated login context is returned to the client application . Finally, in stage  the client application  requests a login from the login module  using the returned login context. Using the returned login context, the client application  can communicate with the login module and\/or JAAS without the use of a proxy. Thus, the client application  may use standard JAAS interfaces to perform JAAS authentication.","The above described systems and methods can be achieved by supplying one or more storage media having computer-executable instructions for realizing the above described operations to one or more computing devices (e.g., CPU, MPU) that may read the computer-executable instructions stored in the storage media and execute them. In this case, the computer-executable instructions when read from the storage media and performed by the one or more computing devices execute the operations of the above described embodiments. Thus, the computer-executable instructions or the one or more storage media storing the computer-executable instructions therein constitute an embodiment.","Any applicable computer-readable storage medium (e.g., a floppy disk, a hard disk, an optical disk, a magneto-optical disk, a CD-ROM, a CD-R, a magnetic tape, a non-volatile memory card, semiconductor memory) can be employed as a storage medium for supplying the computer-executable instructions. The computer-executable instructions may be stored in a memory provided on a function-extension board inserted into the computing device or on a function-extension unit connected to the computing device, and a CPU provided on the function-extension board or unit may carry out part or all of the actual processing that realizes the operations of the above-described embodiments. Furthermore, when the computer-executable instructions are executed by the one or more computing devices, an operating system working on the computing system may carry out part or all of the actual processing that realizes the operations of the above described embodiments.","While the above disclosure describes illustrative embodiments, it is to be understood that the invention is not limited to the above embodiments. To the contrary, the invention covers various modifications and equivalent arrangements within the spirit and scope of the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
