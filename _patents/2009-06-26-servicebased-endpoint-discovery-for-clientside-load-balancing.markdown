---
title: Service-based endpoint discovery for client-side load balancing
abstract: A server farm includes a plurality of server devices. The plurality of server devices includes a plurality of topology service endpoints and a plurality of target service endpoints. A client computing system sends a topology service request to one of the topology service endpoints. In response, the topology service endpoint sends target service endpoint Uniform Resource Identifiers (URIs) to the client computing system. When a client application at the client computing system needs to send a target service request to one of the target service endpoints, the client computing system applies a load balancing algorithm to select one of the target service endpoint URIs. The client computing system then sends a target service request to the target service endpoint identified by the selected one of the target service endpoint URIs. In this way, the client computing system may use a load balancing algorithm appropriate for the client application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08296774&OS=08296774&RS=08296774
owner: Microsoft Corporation
number: 08296774
owner_city: Redmond
owner_country: US
publication_date: 20090626
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The performance of a server device can degrade when the server device receives too many service requests in a given period of time. Accordingly, a server farm may include a plurality of server devices that provide the same service. The server farm may also include a load balancing device. When a client device sends a service request to a server farm, the load balancing device forwards the request to one of the server devices. In this way, no single one of the server devices in the server farm receives so many requests that the performance of the server farm is degraded.","A server farm includes a plurality of server devices. The plurality of server devices includes a plurality of topology service endpoints and a plurality of target service endpoints. A client computing system sends a topology service request to one of the topology service endpoints. In response, the topology service endpoint sends target service endpoint resource identifiers to the client computing system. The target service endpoint resource identifiers identify the target service endpoints. When a client application at the client computing system needs to send a target service request to one of the target service endpoints, the client computing system applies a load balancing algorithm to select one of the target service endpoint resource identifiers. The client computing system then sends a target service request to the target service endpoint identified by the selected one of the target service endpoint resource identifiers. In this way, the client computing system may use a load balancing algorithm appropriate for the client application.","This summary is provided to introduce a selection of concepts in a simplified form. These concepts are further described below in the Detailed Description. This summary is not intended to identify key features or essential features of the claimed subject matter, nor is this summary intended as an aid in determining the scope of the claimed subject matter.","As briefly described above, a server farm includes a plurality of topology service endpoints and a plurality of target service endpoints. A client computing system receives a plurality of target service endpoint URIs from one of the topology service endpoints, uses a load balancing algorithm to select one of the target service endpoint URIs, and sends a target service request to the target service endpoint identified by the selected target service endpoint URI. The techniques of this disclosure are described with reference to the attached figures. It should be appreciated that the attached figures are provided for purposes of explanation only and should not be understood as representing a sole way of implementing the techniques of this disclosure.",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1","b":["100","100"]},"As illustrated in the example of , the load balancing system  comprises a server farm . As used in this disclosure, a server farm is a plurality of physical computing devices that provides one or more services to client computing systems. A physical computing device is a physical machine that comprises physical electronic components. Electronic components are physical entities that affect electrons or fields of electrons in a desired manner consistent with the intended function of a physical computing device. Example types of electronic components include capacitors, resistors, diodes, transistors, and other types of physical entities that affect electrons or fields of electrons in a manner consistent with the intended function of a physical computing device. An example physical computing device is described below with reference to .","In some implementations, one or more of the physical computing devices in the server farm  host one or more virtual machines. As used in this disclosure, a virtual machine is a software application that emulates a physical computing device. Consequently, a single one of the physical computing devices in the server farm  may behave like two or more separate physical computing devices. As used in this disclosure, the term \u201ccomputing device\u201d encompasses physical computing devices and virtual machines.","Furthermore, as used in this disclosure, a computing device provides a service when the computing device performs an action specified by the service definition of the service for each allowable input to the service. Furthermore, as used in this disclosure, a service definition is a set of allowable inputs and a set of mappings from each of the allowable inputs to an action.","The server farm  includes server devices A-N (collectively, \u201cserver devices \u201d). Each of the server devices  is a computing device. The server devices  include target service endpoints A-N (collectively, \u201ctarget service endpoints \u201d). Although not illustrated in the example of  for the sake of simplicity, the server farm  may include server devices that do not include the target service endpoints. As used in this disclosure, a computing device includes an endpoint of a service when the computing device provides the service. For instance, a target service endpoint is a computing device that provides the target service.","In different instances, the target service is a variety of different types of services. In a first example, the target service receives search queries, identifies web pages in a website that satisfy the search query, and returns lists of the web pages in the website that satisfy the search query. In a second example, the target service receives requests for video streams and responds to the requests by sending the video streams. In a third example, the target service validates digital certificates provided by client computing systems.","Furthermore, the server devices  include topology service endpoints A-N (collectively, \u201ctopology service endpoints \u201d). Although not illustrated in the example of  for the sake of simplicity, the server farm  may include server devices that do not include the topology service endpoints. Furthermore, although not illustrated in the example of  for the sake of simplicity, the server farm  may include server devices that include target service endpoints, but not the topology service endpoint. The server farm  may also include server devices that include topology service endpoints, but not target service endpoints.","The server farm  also includes a data storage device . The data storage device  is a computing device. The data storage device  stores a plurality of target service endpoint resource identifiers. A target service endpoint resource identifier is a resource identifier that identifies a target service endpoint (i.e., a server device that provides the target service). For instance, a first target service endpoint resource identifier identifies the target service endpoint A and a second target service endpoint resource identifier identifies the target service endpoint N. In some implementations, the data storage device  is one of the server devices . In different implementations, the target service endpoint resource identifiers conform to different addressing schemes. For instance, in a first example implementation, the target service endpoint resource identifiers conform to the Uniform Resource Identifier (URI) addressing scheme. In other words, the target service endpoint resource identifiers are URIs. In a second example implementation, the target service endpoint resource identifiers conform to a file system addressing scheme. However, for ease of explanation, this disclosure assumes that the target service endpoint resource identifiers are URIs.","In addition, the data storage device  stores a plurality of topology service endpoint resource identifiers. A topology service endpoint resource identifier is a resource identifier that identifies a topology service endpoint (i.e., a server device that provides the topology service). In different implementations, the topology service endpoint resource identifiers conform to different addressing schemes. For instance, in a first example implementation, the topology service endpoint resource identifiers are URIs. In a second example implementation, the topology service endpoint resource identifiers conform to a file system addressing scheme. However, for ease of explanation, this disclosure assumes that the topology service endpoint resource identifiers are URIs.","In one example implementation, a target service endpoint URI comprises a first part that identifies a server device and a second part that identifies the target service. For example, the following may be a target service endpoint URI: \u201chttp:\/\/device1\/targetservice\u201d. In this example, \u201cdevice1\u201d identifies a server device and \u201ctargetservice\u201d identifies the target service. It should be appreciated that in other instances, the target service URIs may be differently formatted and may not specify Hypertext Transfer Protocol (HTTP) as a URI scheme.","The target service endpoint URIs and the topology service endpoint URIs in the data storage device  may be updated in response to a variety of events. For instance, the target service endpoints URIs in the data storage device  may be automatically updated when a target service endpoint stops working or when a new target service endpoint comes online. In different implementations, the target service endpoint URIs and the topology service endpoint URIs in the data storage device  may be updated automatically and\/or manually by an administrator.","The load balancing system  also comprises a client computing system . The client computing system  is a set of one or more physical computing devices. As used in this disclosure, a computing system is a set of one or more physical computing devices. Furthermore, in some instances, the client computing system  hosts one or more virtual machines. Although not illustrated in the example of  for the sake of simplicity, the load balancing system  may include many other client computing systems.","The load balancing system  also comprises a network . The network  facilitates communication between the server farm  and the client computing system . The network  may be a wide variety of different types of electronic communication networks. For example, the network  may be a wide-area network, such as the Internet, a local-area network, a metropolitan-area network, or another type of electronic communication network. The network  may include wired and\/or wireless data links. A variety of communications protocols may be used in the network  including, but not limited to, Ethernet, Transport Control Protocol (TCP), Internet Protocol (IP), Hypertext Transfer Protocol (HTTP), SOAP, remote procedure call protocols, and\/or other types of communications protocols. In instances where the load balancing system  comprises a plurality of other client computing systems, the network  facilitates communication between the server farm  and the other client computing systems.","As illustrated in the example of , the client computing system  comprises a URI request module . The URI request module  is a functional component of the client computing system . As used in this disclosure, a functional component is a sub-part of a system, the sub-part having a well-defined purpose and functionality. The URI request module  may be implemented in a variety of ways. For instance, in some example implementations, the URI request module  comprises a set of software instructions that, when executed by a processing unit of the client computing system , causes the client computing system  to perform specific actions. As used in this disclosure, a processing unit is a set of one or more physical integrated circuits capable of executing software instructions. In some implementations, the set of integrated circuits is a set of microprocessors. As used in this disclosure, a software instruction is a data structure that represents an operation of a processing unit. For example, a software instruction may be a data structure comprising an operation code and zero or more operand specifiers. In this example, the operand specifiers may specify registers, memory addresses, or literal data.","The URI request module  sends a topology service request to a given one of the topology service endpoints  in the server farm  via the network . For instance, the URI request module  may send the topology service request to one of the server devices . The topology service request specifies a topology service endpoint URI that identifies the given topology service endpoint.","In response to the topology service request, the given topology service endpoint sends a topology service response to the client computing system  via the network . The topology service response conforms to the service definition of the topology service. In other words, the topology service definition maps the topology service request to the topology service response. The topology service response comprises the plurality of target service endpoint URIs. When the client computing system  receives the topology service response, the URI request module  stores the plurality of target service endpoint URIs at the client computing system .","As illustrated in the example of , the client computing system  also comprises a client application . The client application  is another functional component of the client computing system . The client application  may be implemented in a variety of ways. For instance, in some example implementations, the client application  comprises a set of software instructions that, when executed by the processing unit of the client computing system , causes the client computing system  to perform specific actions. In different instances, the client application  may or may not be a software application that provides a tool directly to a human user.","As illustrated in the example of , the client computing system  comprises a load balancing module . The load balancing module  is a functional component of the client computing system . The load balancing module  may be implemented in a variety of ways. For instance, in some example implementations, the load balancing module  comprises a set of software instructions that, when executed by a processing unit of the client computing system , causes the client computing system  to perform specific actions.","The client application  is a client of the target service. In other words, the client application  uses the target service to perform some functionality. To use the target service , the client application  sends target service requests to individual ones of the target service endpoints  in the server farm  and receives target service responses from individual ones of the target service endpoints  in the server farm . It should be appreciated that, in some instances, the client computing system  comprises a plurality of client applications that are clients of the target service.","To send a target service request to one of target service endpoints , the client application  sends a request for a target service endpoint URI to the load balancing module . In response to the request for a target service endpoint URI, the load balancing module  uses a load balancing algorithm to select a given target service endpoint URI from among the plurality of target service endpoint URIs received from one of topology service endpoints . After selecting the given target service endpoint URI, the load balancing module  passes the given target service endpoint URI back to the client application  as a response to the request for a target service endpoint URI. Upon receiving the given target service endpoint URI from the load balancing module , the client application  sends a target service request to the one of the target service endpoints  identified by the given target service endpoint URI. In some implementations, the target service request specifies the given target service endpoint URI.","In some implementations, the target service request specifies information in addition to the target service endpoint URI. For example, the target service request may specify a method of an application programming interface (API) implemented by the target service and parameters of the method. In another example, the target service request specifies data defining a word processor document.","In different implementations, the target service request is formatted in different ways. For instance, in a first example implementation, the target service request conforms to the SOAP protocol. In a second example implementation, the target service request conforms to the HTTP protocol.","Furthermore, in some implementations, the client application  receives a target service response in response to the target service request. In different instances, the target service response may contain a wide variety of different types of data.",{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIG. 2","FIG. 1","FIG. 1"],"b":["200","116","200","200","200"]},"As illustrated in the example of , the operation  starts when the URI request module  sends a topology service request to a given one of the topology service endpoints  in the server farm  via the network  (). In some implementations, the topology service request specifies a topology service endpoint URI that identifies the given topology service endpoint. Furthermore, in various implementations, the topology service request specifies other data. For instance, in one example implementation, the topology service request specifies a maximum number of target service endpoint URIs to return. In another instance, the topology service request specifies a method of an API implemented by the topology service.","In different implementations, the topology service request is implemented in various ways. For example, in a first implementation, the topology service request conforms to the SOAP protocol. In another implementation, the topology service request conforms to the HTTP protocol. Furthermore, in another implementation, the URI request module  is able to send topology service requests that conform to different protocols. For instance, the URI request module  may be able to send topology service requests that conform to the SOAP protocol and topology service requests that conform to the binary TCP protocol.","After the URI request module  sends the topology service request to the given topology endpoint, the URI request module  receives a topology service response from the given topology endpoint via the network  (). The topology service response is in response to the topology service request. The topology service response specifies a plurality of target service endpoint URIs. The topology service response conforms to the service definition of the topology service. The topology service response may be formatted in a variety of ways. For example, the topology service response may conform to the SOAP protocol.","In addition to the plurality of target service endpoint URIs, the URI request module  receives a plurality of topology service endpoint URIs (). The topology service endpoint URIs identify topology service endpoints in the server farm . In response to receiving the topology service endpoint URIs, the URI request module  stores the topology service endpoint URIs (). In some implementations, prior to receiving the topology service endpoint URIs in the topology service response, the client computing system  only stores the topology service endpoint URI of the given topology service endpoint.","In some implementations, the URI request module  receives the topology service endpoint URIs in the topology service response. In a first example, the topology service response may comprise an Extensible Markup Language (XML) document containing XML elements that specify the target service endpoint URIs and XML elements that specify the topology service endpoint URIs. In a second example, the URI request module  receives the topology service endpoint URIs separately from the topology service response. For instance, the URI request module  may send a second topology service request to one of the topology service endpoints . In this second example, the second topology service request specifies a topology service endpoint URI that identifies the given topology service endpoint. The topology service endpoint URI also includes a parameter that generically identifies the topology service. In other words, the parameter indicates the topology service without indicating one of topology service endpoints . In various implementations, the parameter may generically identify the topology service in different ways. For instance, the parameter may specify a URI that generically identifies the topology service. In another instance, the parameter specifies a globally unique identifier (GUID) that generically identifies the topology service. In this second example, the URI request module  receives the topology service endpoint URIs in response to the second topology service request.","Furthermore, in some example implementations, the URI request module  does not receive or store topology service endpoint URIs. In such implementations, the topology service may be externally load balanced. In other words, a load balancer device automatically distributes topology service requests among the topology service endpoints .","After the URI request module  receives the target service endpoint URIs in the topology service response, the URI request module  stores the target service endpoint URIs (). In different implementations, the URI request module  stores the target service endpoint URIs in different ways. For instance, the URI request module  may store all or some of the target service endpoint URIs as one or more variables in random access memory. In another instance, the URI request module  stores all or some of the target service endpoint URIs to a hard disk drive.","At some time after the URI request module  stores the target service endpoint URIs, the URI request module  loops back and again sends a new topology service request to the given topology service endpoint, thereby repeating the operation  (). Thus, the URI request module  automatically receives new topology service responses containing updated target service endpoint URIs that identify target service endpoints currently in the server farm . Consequently, the load balancing module  knows not to select target service endpoint URIs identifying target service endpoints that have stopped working. Similarly, the load balancing module  is able to select target service endpoint URIs identifying target service endpoints that have been added to the server farm . In various implementations, the URI request module  may send new topology service requests at regular or irregular intervals. For example, in one example implementation, the URI request module  sends a new topology service request every fifteen minutes. In another example implementation, the URI request module  sends a new topology service request at random intervals. In a third example implementation, the URI request module  sends a new topology service request in response to an event directly or indirectly generated by a user of the client computing system . In a fourth example implementation, the URI request module  sends a new topology service request whenever the load balancing module  receives a request for a target service endpoint URI.","In some implementations where the URI request module  obtains topology service endpoint URIs, the URI request module  sends a request to the load balancing module  for a topology service endpoint URI prior to sending the new topology service request. In such implementations, the load balancing module  responds to the request by selecting a given topology service endpoint URI from among the topology service endpoint URIs obtained by the URI request module . The load balancing module  uses a load balancing algorithm to select the given topology service endpoint URI from among the topology service endpoint URIs obtained by the URI request module . In different implementations, the load balancing algorithm to select the given topology service endpoint URI may be the same or different form a load balancing algorithm to select a given target service endpoint URI from the plurality of target service endpoint URIs. After selecting the given topology service endpoint URI, the load balancing module  returns the given topology service endpoint URI to the URI request module . The URI request module  the constructs the new topology service request such that the new topology service request specifies the given topology service endpoint URI. In this way, topology service requests are load balanced across topology service endpoints in the server farm .",{"@attributes":{"id":"p-0044","num":"0043"},"figref":["FIG. 3","FIG. 1","FIG. 1"],"b":["300","120","118","300","118","300","300","118"]},"As illustrated in the example of , the operation  begins when the load balancing module  receives a request for a target service endpoint URI from the client application  (). In different implementations, the load balancing module  receives the request for a target service endpoint URI from the client application  in a variety of ways. For instance, in a first example implementation, the load balancing module  implements an API. In this first example implementation, the load balancing module  receives the request for a target service endpoint URI from the client application  when the client application  invokes a method of the API. In a second example implementation, the load balancing module  receives the request for a target service endpoint URI from the client application  when the load balancing module  receives an inter-process communication message from the client application .","In response to receiving the request for a target service endpoint URI from the client application , the load balancing module  selects a given target service endpoint URI from among the target service endpoint URIs obtained by the URI request module  (). The load balancing module  applies a load balancing algorithm to select the given target service endpoint URI from among the target service endpoint URIs obtained by the URI request module . After the load balancing module  selects the given target service endpoint URI, the load balancing module  returns the given target service endpoint URI to the client application  as a response to the request for a target service endpoint URI ().","In different instances, the load balancing module  applies different load balancing algorithms to select the given target service endpoint URI from among the target service endpoint URIs obtained by the URI request module . For instance, in a first example implementation, the load balancing module  uses a round-robin load balancing algorithm to select the given target service endpoint URI from among the target service endpoint URIs obtained by the URI request module . In a second example implementation, the load balancing module  randomly selects the given target service endpoint URI from among the target service endpoint URIs obtained by the URI request module . In a third example implementation, the load balancing module  uses a load balancing algorithm that tracks the processing loads on each of the target service endpoints  and selects a target service endpoint URI of a target service endpoint having a lowest processing load.","In some instances, the load balancing module  is a load balancing object that is an instantiation of a load balancing class. As used in this disclosure, a class is an object-oriented programming language construct that is used as blueprint to create objects. Furthermore, as used in this disclosure, an object is a data structure in object-oriented programming languages consisting of data fields and methods that are able manipulate the data fields. In such instances, a default implementation of a method of the load balancing class uses a first load balancing algorithm to select the given target service endpoint URI from among the target service endpoint URIs obtained by the URI request module . For example, the default implementation of the method may use a round-robin load balancing algorithm. Furthermore, in such instances, a programmer of the client application  is able to create a new load balancing class that extends the load balancing class. In the new load balancing class, a new implementation of the method overrides the default implementation of the method. The new implementation of the method uses a second load balancing algorithm to select the given target service endpoint URI from among the target service endpoint URIs obtained by the URI request module . For example, the new implementation of the method may use a load balancing algorithm that tracks load on the target service endpoints . In this way, the programmer is able to customize which load balancing algorithm is used to select the given target service endpoint URI from among the target service endpoint URIs obtained by the URI request module .","Furthermore, in some instances, a plurality of client applications execute at the client computing system . In such instances, the load balancing module  may use different load balancing algorithms to provide target service endpoint URIs to different ones of the client applications. Continuing the example of the previous paragraph, a second client application at the client computing system  may use a second load balancing object to obtain a target service endpoint URI. The second load balancing object is an instantiation of the un-extended load balancing class. Hence, when the second client application invokes the method of the second load balancing object, the client computing system  uses the default version of the method to select a given target service endpoint URI from the plurality of target service endpoint URIs.","The programmer of the client application  may choose to override the default load balancing algorithm for a variety of reasons. For example, the client application  may use the target service to process data in a spreadsheet stored at the server farm . In this example, it may be computationally expensive for an individual one of the target service endpoints  to load the spreadsheet, but it may be relatively inexpensive to process the data in the spreadsheet after the spreadsheet is loaded. Furthermore, in this example, the target service endpoints  are able to temporarily cache the spreadsheet after loading the spreadsheet. If the load balancing module  uses a round-robin load balancing algorithm, the load balancing module  would provide a different target service endpoint URI to the client application  each time the client application  needs to use the target service to process data in the spreadsheet. Consequently, the client application  would send target service requests to different ones of the target service endpoints  and the target service endpoints  would have to load the spreadsheet in response to each of the target service requests. This would be wasteful because the target service endpoints  would not take advantage of caching the spreadsheet. However, suppose the programmer of the client application  overrides the default load balancing algorithm with a new load balancing algorithm that randomly selects one of the target service endpoint URIs. After initially selecting one of the target service endpoint URIs, the new load balancing algorithm selects the same target service endpoint URI in response to any request from the client application  for a target service endpoint URI received during the next fifteen minutes. In this way, the client application  would continue to send target service requests to the same one of the target service endpoints  and the target service endpoint would be able to use the cached spreadsheet. As a result, performance of the target service endpoint and the client application  may be improved. It should be appreciated that for other client applications, other load balancing algorithms may be more advantageous.","Furthermore, in some implementations, the load balancing module  only selects the given target service endpoint URI from among those target service endpoint URIs obtained by the URI request module  that are not blacklisted. In such implementations, the load balancing module  receives a request from the client application  to blacklist a particular target service endpoint URI when a target service endpoint identified by the particular target service endpoint URI failed to respond to a target service request sent to the target service endpoint.","In different implementations, the load balancing module  receives a request to blacklist a particular target service endpoint URI in different ways. For instance, in the example implementation where the load balancing module  is an object that is an instantiation of a class, the load balancing module  includes a blacklisting method. In this instance, the load balancing module  receives the request to blacklist the particular target service endpoint URI when the client application  invokes the blacklisting method.",{"@attributes":{"id":"p-0053","num":"0052"},"figref":["FIG. 4","FIG. 1","FIG. 1"],"b":["400","400","400","400"]},"The example of  is described with reference to a generic topology service endpoint. It should be appreciated that this topology service endpoint may be any of the topology service endpoints  illustrated in the example of .","As illustrated in the example of , the operation  begins when a topology service endpoint receives a topology service request via the network  (). As described above, in some instances, the topology service request includes data indicating the target service. Furthermore, as described above, the topology service request may, in some instances, include additional data.","In response to receiving the topology service request, the topology service endpoint determines whether the topology service request is a request for resource identifiers that generically identify services available at the server farm  (). In different implementations, the topology service endpoint determines whether the topology service request is a request for resource identifiers that generically identify services available at the server farm  in different ways. For instance, the topology service request may be a SOAP document and the topology service endpoint determines that the topology service request is a request for resource identifiers that generically identify services available at the server farm  when the SOAP document includes an element indicating this.","If the topology service endpoint determines that the topology service request is a request for resource identifiers that generically identify services available at the server farm  (\u201cYES\u201d of ), the topology service endpoint sends a topology service response (). The topology service response includes resource identifiers that generically identify services available at the server farm . The resource identifiers include a resource identifier that generically identifies the target service. In this way, the client computing system  may be able to discover a resource identifier that generically identifies the target service.","On the other hand, if the topology service endpoint determines that the topology service request is not a request for resource identifiers that generically identify services available at the server farm  (\u201cNO\u201d of ), the topology service endpoint determines whether the topology service request is a request for URIs associated with the target service (). In various implementations, the topology service endpoint determines whether the topology service request is a request for URIs associated with the target service in different ways. In one example, the topology service endpoint determines that the topology service request is a request for URIs associated with the target service endpoint when the topology service request includes data indicating the target service.","In various implementations, the topology service request includes data that identifies the target service in various ways. For instance, in one example implementation, the topology service endpoint URI includes a parameter that identifies the target service. In some instances, the parameter that identifies the target service is a target service URI that is not specific to a particular one of the target service endpoints . In other words, the target service URI generically identifies the target service. For example, the topology service endpoint URI may appear as follows: \u201chttp:\/\/device1\/topologyservice?target-service-uri=http:\/\/targetservice\u201d. In this example, \u201cdevice1\u201d indicates a server device that provides the topology service, \u201ctopologyservice\u201d indicates the topology service, the \u201c?\u201d indicates that text following the \u201c?\u201d represents one or more parameters, the \u201ctarget-service-uri\u201d is a parameter name, and the \u201chttp:\/\/targetservice\u201d is a target service URI that generically identifies the target service.","If the topology service endpoint determines that the topology service request is not a request for URIs associated with the target service (\u201cNO\u201d of ), the topology service endpoint generates another type of topology service response (). Such other types of topology service responses may contain a wide variety of different types of information depending on the service definition of the topology service.","If the topology service endpoint determines that the topology service request is a request for URIs associated with the target service (\u201cYES\u201d of ), the topology service endpoint obtains resource identifiers associated with the target service (). In some instances, the resource identifiers associated with the target service are target service endpoint URIs. As explained below, in other instances, the resource identifiers associated with the target service are load balancer resource identifiers.","In different implementations, the topology service endpoint obtains resource identifiers associated with the target service in different ways. For instance, in a first example implementation, the topology service endpoint obtains the resource identifiers associated with the target service by requesting resource identifiers associated with the target service from the data storage device . In a second example implementation, the topology service endpoint obtains the resource identifiers associated with the target service from messages containing the resource identifiers associated with the target service. In this second example, the messages are broadcasted to server devices in the server farm . In this second example implementation, the topology service endpoint does not need to send requests for the resource identifiers associated with target service. In a third example implementation, the topology service endpoint broadcasts requests for resource identifiers associated with the target service to other server devices in the server farm . In this third example, the other server devices in the server farm  respond to the request by sending resource identifiers associated with the target service to the topology service endpoint.","In a fourth example implementation, the topology service endpoint stores the resource identifiers associated with the target service in a cache after obtaining the resource identifiers associated with the target service. In this fourth example implementation, the topology service endpoint responds to the topology service request by determining whether the cache stores the resource identifiers associated with the target service and by retrieving the resource identifiers associated with the target service from the cache when the cache stores the resource identifiers associated with the target service. If the cache does not store the resource identifiers associated with the target service or if the resource identifiers associated with the target service in the cache have expired, the topology service endpoint obtains updated resource identifiers associated with the target service from the data storage device . In instances where the resource identifiers associated with the target service are target service endpoint URIs, the updated target resource endpoint URIs identify target service endpoints currently in the server farm . When the topology service endpoint receives the updated resource identifiers associated with the target service, the topology service endpoint stores the updated resource identifiers associated with the target service in the cache. The topology service endpoint responds to topology service requests by retrieving the updated resource identifiers associated with the target service from the cache and sending the updated resource identifiers associated with the target service. In this way, the topology service endpoint is able to retrieve resource identifiers associated with the target service that are at least relatively current.","After the topology service endpoint obtains the resource identifiers associated with the target service, the topology service endpoint sends a topology service response to the client computing system  via the network  (). The topology service response specifies the resource identifiers associated with the target service. For instance, where the resource identifiers associated with the target service are target service endpoint URIs, the topology service response includes the topology service endpoint URIs. The topology service response conforms to the service definition of the topology service. In some implementations, the topology service endpoint repeats the operation  each time the topology service endpoint receives a topology service request.","As discussed above, in some example implementations, the topology service endpoint also sends topology service endpoint URIs to the client computing system . In various implementations, the topology service endpoint may send the topology service endpoint URIs to the client computing system  in response to the topology service request or in response to a topology service request that specifically requests the topology service endpoint URIs. In such implementations, the topology service endpoint may send the topology service endpoint URIs to the client computing system  in the topology service response or separately. Furthermore, in such implementations, the topology service endpoint may retrieve the topology service endpoint URIs from the data storage device  and\/or from the cache.","Furthermore, in some implementations, the resource identifiers associated with the target service include one or more load balancer resource identifiers instead of topology service endpoint URIs. The load balancer resource identifier identifies a load balancer device in the server farm . A load balancer device is a computing device. The load balancer device is configured to receive target service requests and to distribute the target service requests among the target service endpoints . In different implementations, the topology service endpoint is configured to obtain the load balancer resource identifier is different ways. For example, the topology service endpoint obtains the load balancer resource identifier by sending a request to the data storage device  for resource identifiers associated with the target service. In this example, the topology service endpoint may start sending the load balancer resource identifier instead of the target service endpoint URIs when an administrator updates the data storage device  such that the load balancer resource identifier is associated with the target service instead of the target service endpoint URIs. Thus, in this example, the topology service endpoint does not need to be re-configured for the topology server endpoint to start obtaining the load balancer resource identifier instead of the target service endpoint URIs.","In implementations where the topology service endpoint obtains a load balancer resource identifier instead of topology service endpoint URIs, the topology service endpoint includes the load balancer resource identifier in the topology service response instead of including the topology service endpoint URIs. The client computing system  uses the load balancer resource identifier in the same way that the client computing system  would use a topology service endpoint URI. That is, the URI request module  stores the load balancer resource identifier and the load balancing module  provides the load balancer resource identifier to the client application  when the client application  requests a target service endpoint URI from the load balancing module . In this way, the load balancing system  may be transitioned from a system where load balancing occurs at the client computing system  to a system where load balancing occurs at the server farm  without modifying software on the client computing system .",{"@attributes":{"id":"p-0068","num":"0067"},"figref":["FIG. 5","FIG. 5","FIG. 5","FIG. 5","FIG. 5"],"b":["500","104","112","104","112","104","112"]},"As illustrated in the example of , the physical computing device  comprises a memory unit . The memory unit  is a computer-readable data storage medium capable of storing data and\/or instructions. The memory unit  may be a variety of different types of computer-readable storage media including, but not limited to, dynamic random access memory (DRAM), double data rate synchronous dynamic random access memory (DDR SDRAM), reduced latency DRAM, DDR2 SDRAM, DDR3 SDRAM, Rambus RAM, or other types of computer-readable storage media.","In addition, the physical computing device  comprises a processing unit . As mentioned above, a processing unit is a set of one or more physical electronic integrated circuits that are capable of executing instructions. In a first example, the processing unit  may execute software instructions that cause the physical computing device  to provide specific functionality. In this first example, the processing unit  may be implemented as one or more processing cores and\/or as one or more separate microprocessors. For instance, in this first example, the processing unit  may be implemented as one or more Intel Core 2 microprocessors. The processing unit  may be capable of executing instructions in an instruction set, such as the x86 instruction set, the POWER instruction set, a RISC instruction set, the SPARC instruction set, the IA-64 instruction set, the MIPS instruction set, or another instruction set. In a second example, the processing unit  may be implemented as an ASIC that provides specific functionality. In a third example, the processing unit  may provide specific functionality by using an ASIC and by executing software instructions.","The physical computing device  also comprises a video interface . The video interface  enables the physical computing device  to output video information to a display device . The display device  may be a variety of different types of display devices. For instance, the display device  may be a cathode-ray tube display, an LCD display panel, a plasma screen display panel, a touch-sensitive display panel, a LED array, or another type of display device.","In addition, the physical computing device  includes a non-volatile storage device . The non-volatile storage device  is a computer-readable data storage medium that is capable of storing data and\/or instructions. The non-volatile storage device  may be a variety of different types of non-volatile storage devices. For example, the non-volatile storage device  may be one or more hard disk drives, magnetic tape drives, CD-ROM drives, DVD-ROM drives, Blu-Ray disc drives, or other types of non-volatile storage devices.","The physical computing device  also includes an external component interface  that enables the physical computing device  to communicate with external components. As illustrated in the example of , the external component interface  enables the physical computing device  to communicate with an input device  and an external storage device . In one implementation of the physical computing device , the external component interface  is a Universal Serial Bus (USB) interface. In other implementations of the physical computing device , the physical computing device  may include another type of interface that enables the physical computing device  to communicate with input devices and\/or output devices. For instance, the physical computing device  may include a PS\/2 interface. The input device  may be a variety of different types of devices including, but not limited to, keyboards, mice, trackballs, stylus input devices, touch pads, touch-sensitive display screens, or other types of input devices. The external storage device  may be a variety of different types of computer-readable data storage media including magnetic tape, flash memory modules, magnetic disk drives, optical disc drives, and other computer-readable data storage media.","In addition, the physical computing device  includes a network interface card  that enables the physical computing device  to send data to and receive data from an electronic communication network. The network interface card  may be a variety of different types of network interface. For example, the network interface card  may be an Ethernet interface, a token-ring network interface, a fiber optic network interface, a wireless network interface (e.g., WiFi, WiMax, etc.), or another type of network interface.","The physical computing device  also includes a communications medium . The communications medium  facilitates communication among the various components of the physical computing device . The communications medium  may comprise one or more different types of communications media including, but not limited to, a PCI bus, a PCI Express bus, an accelerated graphics port (AGP) bus, an Infiniband interconnect, a serial Advanced Technology Attachment (ATA) interconnect, a parallel ATA interconnect, a Fiber Channel interconnect, a USB bus, a Small Computer System Interface (SCSI) interface, or another type of communications medium.","The physical computing device  includes several computer-readable data storage media (i.e., the memory unit , the non-volatile storage device , and the external storage device ). Together, these computer-readable storage media may constitute a single data storage system. As discussed above, a data storage system is a set of one or more computer-readable data storage mediums. This data storage system may store instructions executable by the processing unit . Activities described in the above description may result from the execution of the instructions stored on this data storage system. Thus, when this description says that a particular logical module performs a particular activity, such a statement may be interpreted to mean that instructions of the logical module, when executed by the processing unit , cause the physical computing device  to perform the activity. In other words, when this description says that a particular logical module performs a particular activity, a reader may interpret such a statement to mean that the instructions configure the physical computing device  such that the physical computing device  performs the particular activity.","The techniques of this disclosure may be realized in a variety of ways. For example, the techniques of this disclosure may be realized as a method for load balancing requests for a target service. The method comprises receiving, at a server device in a server farm, a topology service request via an electronic communications network. The server farm comprises a plurality of topology service endpoints. Each topology service endpoint in the plurality of topology service endpoints is a computing device that provides a topology service. The plurality of topology service endpoints include the server device. The server farm comprises a plurality of target service endpoints. Each target service endpoint in the plurality of target service endpoints is a computing device that provides the target service. The method also comprises in response to the topology service request, automatically sending, by the server device, a topology service response to a client computing system via the electronic communications network. The topology service response conforms to a service definition of the topology service. The topology service response comprises a plurality of target service endpoint resource identifiers. Each target service endpoint resource identifier in the plurality of target service endpoint resource identifiers identifies a different target service endpoint in the plurality of target service endpoints. The client computing system is configured to use a load-balancing algorithm to select a given target service endpoint resource identifier in the plurality of target service endpoint resource identifiers. The client computing system is further configured to send a target service request to a given target service endpoint in the plurality of target service endpoints. The given target service endpoint is identified by the given target service endpoint resource identifier.","In another example, the techniques of this disclosure may be realized as a client computing system comprising a data storage system storing a set of software instructions. The client computing system also comprises a set of microprocessors. The set of microprocessors comprises at least one microprocessor. The software instructions, when executed by the set of microprocessors, cause the client computing system to send a topology service request to a topology service endpoint in a server farm. The topology service request specifying a topology service endpoint resource identifier. The topology service endpoint resource identifier identifies the topology service endpoint. The server farm comprises a plurality of topology service endpoints. Each topology service endpoint in the plurality of topology service endpoints is a computing device that provides the topology service. The server farm comprises a plurality of target service endpoints. Each target service endpoint in the plurality of target service endpoints is a computing device that provides a target service. The software instructions, when executed by the set of microprocessors, cause the client computing system to receive a topology service response from the topology service endpoint. The topology service response is responsive to the topology service request. The topology service response conforms to a service definition of the topology service. The topology service response comprises a plurality of target service endpoint resource identifiers. Each target service endpoint resource identifier in the plurality of target service endpoint resource identifiers identifies a different target service endpoint in the plurality of target service endpoints. In addition, the software instructions, when executed by the set of microprocessors, cause the client computing system to after receiving the topology service response, select a given target service endpoint resource identifier from the plurality of target service endpoint resource identifiers using a load balancing algorithm. Furthermore, the software instructions, when executed by the set of microprocessors, cause the client computing system to after selecting the given target service endpoint resource identifier, send a target service request to a given target service endpoint in the plurality of target service endpoints. The given target service endpoint resource identifier identifies the given target service endpoint. The target service request specifies the given target service endpoint resource identifier.","In another example, the techniques of this disclosure may be realized as a load balancing system comprising a server farm. The server farm comprising a data storage device that stores a plurality of target service endpoint URIs and a plurality of topology service endpoint URIs. The server farm also comprises a plurality of server devices. Each server device in the plurality of server devices is a physical computing device. The plurality of server devices includes a plurality of target service endpoints and a plurality of topology service endpoints. Each target service endpoint URI in the plurality of target service endpoint URIs identifies a different target service endpoint in the plurality of target service endpoints. Each topology service endpoint URI in the plurality of topology service endpoint URIs identifies a different topology service endpoint in the plurality of topology service endpoints. Each target service endpoint in the plurality of target service endpoints provides a target service. Each topology service endpoint in the plurality of topology service endpoints provides a topology service. The load balancing system also comprises a client computing system comprising a data storage system and a processing unit. Furthermore, the load balancing system comprises an electronic communications network that facilitates electronic communication between the plurality of server devices in the server farm and the client computing system. The data storage system of the client computing system comprising software instructions that, when executed by the processing unit of the client computing system, cause the client computing system to automatically send a first topology service request to a first topology service endpoint in the plurality of topology service endpoints via the electronic communications network. The first topology service request specifies a first topology service endpoint URI. The first topology service endpoint URI identifies the first topology service endpoint. The first topology service endpoint URI comprises a URI that generically identifies the topology service. The first topology service endpoint is configured to retrieve, in response to the first topology service request, the plurality of topology service endpoint URIs from the data storage device when the first topology service endpoint does not store the plurality of topology service endpoint URIs in a first cache at the first topology service endpoint. The first topology service endpoint is also configured to send, in response to the first topology service request via the electronic communications network, a first topology service response. The first topology service response conforms to a service definition of the topology service. The first topology service response specifies the plurality of topology service endpoint URIs. The data storage system of the client computing system further comprises software instructions that, when executed by the processing unit, further cause the client computing system to automatically receive the first topology service response. The software instructions, when executed by the processing unit, further cause the client computing system to automatically store the plurality of topology service endpoint URIs. The client computing system only stores the first topology service endpoint URI prior to receiving the first topology service response. In addition, the software instructions, when executed by the processing unit, further cause the client computing system to automatically use a first load balancing method to select a second topology service endpoint URI from the plurality of topology service endpoint URIs. Furthermore, the software instructions, when executed by the processing unit, further cause the client computing system to automatically send a second topology service request to a second topology service endpoint in the plurality of topology service endpoints via the electronic communications network. The second topology service endpoint URI identifies the second topology service endpoint. The second topology service request specifies the second topology service endpoint URI. The second topology service endpoint URI comprises a parameter that specifies a URI that generically identifies the target service. The second topology service endpoint is further configured to receive the second topology service request via the electronic communications network. The second topology service endpoint also configured to retrieve, in response to receiving the second topology service request, the plurality of target service endpoint URIs from the data storage device when a second cache at the second topology service endpoint does not store the plurality of target service endpoint URIs. In addition, the second topology service endpoint is configured to send, in response to receiving the second topology service request, a second topology service response to the client computing system via the electronic communications network. The second topology service response specifies the plurality of target service endpoint URIs. The second topology service response conforms to the service definition of the topology service. The data storage system of the client computing system further comprising software instructions that, when executed by the processing unit of the client computing system, further cause the client computing system to receive the second topology service response via the electronic communications network. In addition, the software instructions, when executed by the processing unit, further cause the client computing system to store the plurality of target service endpoint URIs. The software instructions, when executed by the processing unit, further cause the client computing system to receive an invocation by a first client application of a first method of a first load balancing object. The first load balancing object is an instantiation of a first load balancing class. The first load balancing class extends a second load balancing class. The first method overrides a second method. The second method, when invoked, causes the client computing system to use a third load balancing algorithm to select target service endpoint URIs from the plurality of target service endpoint URIs. Furthermore, in response to receiving the invocation of the first method, the software instructions, when executed by the processing unit, cause the client computing system to use a second load balancing algorithm to select a first target service endpoint URI from the plurality of target service endpoint URIs. The first target service endpoint URI identifies a first target service endpoint in the plurality of target service endpoints. The software instructions, when executed by the processing unit, further cause the client computing system to send, after using the second load balancing algorithm to select the first target service endpoint URI, a first target service request to the first target service endpoint via the electronic communications network. The first target service request specifies the first target service endpoint URI. Furthermore, the software instructions, when executed by the processing unit, further cause the client computing system to receive a first target service response. The first target service response conforms to a service definition of the target service. In addition, the software instructions, when executed by the processing unit, further cause the client computing system to receive an invocation by a second client application of the second method of a second load balancing object. The second load balancing object is an instantiation of the second load balancing class. In response to receiving the invocation of the second method, the software instructions, when executed by the processing unit, cause the client computing system to use the third load balancing algorithm to select a second target service endpoint URI from the plurality of target service endpoint URIs. The second target service endpoint URI identifies a second target service endpoint in the plurality of target service endpoints. The third load balancing algorithm is different than the second load balancing algorithm. Furthermore, the software instructions, when executed by the processing unit, cause the client computing system to send, after using the third load balancing algorithm to select the second target service endpoint URI, a second target service request to the second target service endpoint via the electronic communications network. The second target service request specifies the second target service endpoint URI. The software instructions, when executed by the processing unit, further cause the client computing system to receive a second target service response, the second target service response conforming to the service definition of the target service.","Although the subject matter has been described in language specific to structural features and\/or methodological acts, it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather, the specific features and acts described above are disclosed as example forms of implementing the claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0005","num":"0004"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
