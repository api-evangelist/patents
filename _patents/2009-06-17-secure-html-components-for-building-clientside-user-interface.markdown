---
title: Secure HTML components for building client-side user interface
abstract: A method performed by a server device includes receiving a request from a client, the request including data to identify a component of a graphical user interface (GUI) application; and determining that an updated version of the component is available. The method also includes retrieving, from a memory associated with the server device, the updated version of the component and providing the updated version of the component to the client.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08839126&OS=08839126&RS=08839126
owner: Google Inc.
number: 08839126
owner_city: Mountain View
owner_country: US
publication_date: 20090617
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION","Overview","Exemplary Network Configuration","Exemplary Client\/Server Architecture","Exemplary Processing","EXAMPLE","CONCLUSION"],"p":["Many companies currently offer graphical user interface (GUI) applications. GUI applications may include add-on applications, such as toolbars, to improve the user interface for an application, such as a web browser. Oftentimes, these add-on applications provide functionality that is not available in existing applications. For example, an add-on toolbar for a web browser may permit a user to perform a search right from the toolbar, permit terms to be highlighted on a web page, provide pop-up protection, and do other things to assist the user in finding information of interest.","Users currently download add-on applications to a user device as a complete binary code package that may be designated by a version number (e.g., version \u201c1.0\u201d). When updates to the add-on application are necessary, the add-on application provider may compile one or more improvements as a version upgrade (e.g., version \u201c1.1\u201d) that can be downloaded by users to replace the previous version of the add-on application.","According to one aspect, a method, performed by a server device, may include receiving, at the server device, a request from a client, the request including data to identify a component of a GUI application; and determining, by a processor of the server device, that an updated version of the component is available. The method may also include retrieving, from a memory associated with the server device, the updated version of the component and providing the updated version of the component to the client.","According to another aspect, a system may include a memory to store instructions and multiple components for a GUI application and a processor. The processor may execute instructions in the memory to receive a request ping from a client, the request ping including data to identify a particular component of the GUI application; determine that an updated version of the particular component is available in the multiple components; retrieve, from the multiple components, the updated version of the particular component; append a cryptographic signature to the updated version of the particular component; and provide, to the client, the updated version of the particular component with the cryptographic signature.","According to yet another aspect, a method, performed by a server device, may include receiving, at the server device, a request from a client, the request including data to identify a component of a GUI application rendered from binary code; retrieving, from a memory associated with the server device, an updated version of the component, the updated version of the component including mark-up language code that can be rendered at the client to incorporate the updated version of the component into the GUI application; and sending the updated version of the component to the client.","According to a further aspect, a system may include means for receiving a request from a client, the request including data to identify a particular component from a set of components of a GUI application; means for determining that an updated version of the particular component is available; means for retrieving, from the set of components, the updated version of the particular component; means for appending security information to the updated version of the particular component; and means for providing the updated version of the particular component with the security information to the client.","The following detailed description refers to the accompanying drawings. The same reference numbers in different drawings may identify the same or similar elements. Also, the following detailed description does not limit the invention.","Systems and\/or methods described herein may update features of a client-side GUI application without requiring a download of a complete new version of the GUI application. A web-service may provide individual components that include mark-up defined content (e.g., Hypertext Mark-up Language (HTML)) for the GUI application that invokes additional functionality exposed by a base application. Authenticity of the mark-up defined content can be ensured via a cryptographic signature associated with the GUI application. Thus, implementations described herein may provide secure, web-based methods for updating a user interface of a client-side GUI application without redistributing the application's binary code.","A \u201cGUI application\u201d as the term is used herein, may be broadly interpreted to include application software with a graphical user interface. A GUI application may be a stand-alone application or an add-on application that may be integrated with base application software to enhance the base application software. For example, a GUI application may provide increased specialization or customization for a particular use. A \u201ccomponent,\u201d as the term is used herein, may be broadly construed to include a feature of a GUI application. A \u201cbase application,\u201d as the term is used herein, may be broadly construed to include an application into which an add-on application is integrated.",{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 1","FIG. 1"],"b":["110","112","112","114","112","114","114","114"]},"A user may install toolbar  in browser , for example, by downloading a binary code package from a server  to computing device . Computing device  may then perform installation functions to integrate toolbar  into browser . When subsequent upgrades or new features of toolbar  are developed, the upgrades and\/or new features may be made available at server . In implementations described herein, the upgrades and\/or new features may be requested by computing device  and provided by server  in a manner that is transparent to the user. The upgrades and\/or new features may be provided as secure HTML components that can be downloaded and integrated individually into toolbar , without the need for a complete binary code download. The secure HTML components may be a mixture of code using mark-up language (e.g., HTML), style sheet language (e.g., cascading style sheets (CSS)) and\/or scripting language (e.g., JavaScript\u2122) that defines both functionality and the look-and-feel of certain parts of a GUI application. In other implementations, the secure HTML components may also include other programming architectures, such as Netscape\u2122 Plugin Application Programming Interface (NPAPI) plug-ins, ActiveX\u2122 plug-ins, Native Client code modules, plain text configuration files, image files and\/or sound files. In an exemplary implementation, the components may be rendered via a native renderer in browser .","The implementation of a toolbar in a browser, shown in , is an illustrative example. In other implementations, systems and\/or methods described herein may be used to provide updates to a wide variety of add-applications using secure HTML components. In still other implementations, systems and\/or methods described herein may provide updates to non-GUI applications using, for example, a scripting language (e.g., JavaScript\u2122) without the need for mark-up language (e.g., HTML).",{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 2","b":["200","200","210","220","230","240","210","220","230","240"]},"Clients  may include client entities. An entity may be defined as a device, such as a personal computer, a wireless telephone, a personal digital assistant (PDA), a lap top, or another type of computation or communication device. In one implementation, a client  may include a browser . Browser  may permit a user to access documents and may provide an interface to servers  and . Browser  may include a GUI application that may take the form of a toolbar or some other functionality that may operate separate from or in conjunction with browser . In another implementation, the GUI application may be integrated as part of browser . In some situations, the GUI application may operate as an interface between browser  and network .","Servers  and  may include server entities that store, retrieve, and\/or provide applications and\/or application components available for downloading to clients . In one implementation, server  may receive, interpret, and\/or redirect requests, from clients , for upgrades to applications. Server  may store or maintain applications and\/or application components that may be provided to clients  in response to upgrade requests. Such application components may include new and\/or improved features for GUI applications currently residing on clients .","While servers  and  are shown as separate entities, it may be possible for one of server  or  to perform one or more of the functions of the other one of server  or . For example, it may be possible for both servers  and  to be implemented as a single server. It may also be possible for a single one of server  or  to be implemented as two or more separate (and possibly distributed) devices.","Network  may include a local area network (LAN), a wide area network (WAN), a telephone network, such as the Public Switched Telephone Network (PSTN) or a cellular network, an intranet, the Internet, or a combination of networks. Clients  and servers  and  may connect to network  via wired and\/or wireless connections.",{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 3","b":["210","220","230","310","320","330","340","350","360","370","380","310"]},"Processor  may include a processor, microprocessor, or processing logic that may interpret and execute instructions. Main memory  may include a random access memory (RAM) or another type of dynamic storage device that may store information and instructions for execution by processor . ROM  may include a ROM device or another type of static storage device that may store static information and instructions for use by processor . Storage device  may include a magnetic and\/or optical recording medium and its corresponding drive.","Input device  may include a mechanism that permits an operator to input information to the client\/server entity, such as a keyboard, a mouse, a pen, voice recognition and\/or biometric mechanisms, etc. Output device  may include a mechanism that outputs information to the operator, including a display, a printer, a speaker, etc. Communication interface  may include any transceiver-like mechanism that enables the client\/server entity to communicate with other devices and\/or systems. For example, communication interface  may include mechanisms for communicating with another device or system via a network, such as network .","As will be described in detail below, the client\/server entity, as described herein, may perform certain operations relating to providing updated components for GUI applications. The client\/server entity may perform these operations in response to processor  executing software instructions contained in a computer-readable medium, such as memory . A computer-readable medium may be defined as a physical or logical memory device. A logical memory device may include memory space within a single physical memory device or spread across multiple physical memory devices.","The software instructions may be read into memory  from another computer-readable medium, such as data storage device , or from another device via communication interface . The software instructions contained in memory  may cause processor  to perform processes that will be described later. Alternatively, hardwired circuitry may be used in place of or in combination with software instructions to implement processes described herein. Thus, implementations described herein are not limited to any specific combination of hardware circuitry and software.",{"@attributes":{"id":"p-0033","num":"0032"},"figref":["FIG. 4","FIG. 4"],"b":["210","210","210","210","210"]},"As shown in , client  may include secure component updater , local component cache , renderer , and GUI application . Although one secure component updater, one local component cache, one renderer, and one application are shown in , in other implementations, more or fewer secure component updaters, local component caches, renderers, or application may be included.","Secure component updater  may manage the retrieval of static component updates from an update server, such as server . Secure component updater  may request component updates and send received component updates to local component cache . Secure component updater  may request (e.g., using communication interface ) component updates via a request ping to determine if there is an update for a requested component. A request ping may use hypertext transfer protocol secure (HTTPS) and may be provided, for example, to server  at regular intervals (e.g., once a day) or when instructed (e.g., by a user). The request ping may include information such as a name (or other identifier) and version indicator of a component file, a version indicator of the related application (e.g., a GUI application, such as a toolbar), the locale (e.g., an associated geographical region\/language) of the related application, a unique identifier for the related application, etc.","When a component update is provided (in response to a request ping), secure component updater  may verify the electronic signature of the received component before sending the component to local component cache . In another implementation, instead of using a cryptographic signature, secure HTML components may be entirely encrypted with asymmetric or symmetric encryption algorithms. In one implementation, secure component updater  may be included in processor .","Local component cache  may store verified component uploads received from secure component updater . Local component cache  may also provide the verified component uploads to renderer  for building features of the GUI application into a base application. In one implementation, local component cache  may be included in main memory .","Renderer  may include a layout engine or rendering engine that incorporates a verified component from local component cache . Renderer  may use information from a downloaded version of the GUI application (e.g., binary code of a full version of application) and supplement the binary code with verified components from local component cache . For example, renderer  may incorporate HTML, CSS and\/or JavaScript\u2122 information from a component to present formatted content on a display (e.g., output device ). In one implementation, render  may be included in an application (e.g., a browser) that is separate from the GUI application. Examples of renderer  may include ActiveX\u2122 and GECKO\u2122.","In an exemplary implementation, application logic in the updated component may interact with the rest of the GUI application exclusively though a JavaScript\u2122 application programming interface (API). The GUI application's functionality may be exposed to the component's JavaScript via function extensions within JavaScript\u2122 (e.g., \u201cwindows.external\u201d functions). The GUI application may also implement certain JavaScript\u2122 functions within the HTML component (e.g., to pass events from the GUI application to the HTML component). Thus, the interaction between the GUI application and the component happens via particular, function-specific API. In other implementations, the HTML component may include plug-ins that use direct communications to the rest of the GUI application instead of going exclusively through JavaScript\u2122.","GUI application  may include a full-downloaded version of the GUI application (e.g., an add-on toolbar) in, for example, binary code. Renderer  may use GUI application  along with component upgrades from local component cache  to assemble an updated version of GUI application .","Although  shows exemplary functional components of client , in other implementations, client  may contain fewer, different, differently arranged, and\/or additional functional components than depicted in . In still other implementations, one or more functional components of client  may perform one or more of the tasks described below as performed by one or more other functional components of client .",{"@attributes":{"id":"p-0042","num":"0041"},"figref":["FIG. 5","FIG. 5"],"b":["220","230","220","220","220","230","220","230"]},"As shown in , server  may include several static component repositories - and distribution manager . Although three static component repositories and one distribution component are shown in , in other implementations, more or fewer distribution managers and\/or static component repositories may be included.","Static component repositories - may each include secure HTML components for GUI applications. Secure HTML components may include upgraded components for particular aspects of a GUI application. The components may be developed, for example, to address certain features of the GUI application that may be compartmentalized and, thus, upgraded without requiring a complete binary code rebuild. The components may be developed separately, finalized, and uploaded to one of static component repositories - for eventual retrieval in response to a request from distribution manager .","In one implementation, components within static component repositories - may be grouped according to functionality. Development teams may be responsible for separate functionalities and may be responsible only for a particular one or more of static component repositories - related to their functionalities. Thus, for example, static component repository  may include components related to search quality (e.g., search suggestion boxes); static component repository  may include components related to security (e.g., pop-up blockers); and static component repository  may include components related to translations (e.g., Chinese-to-English conversions). In one implementation, static component repositories - may be included in a memory (e.g., main memory  and\/or one or more storage devices ) of server . In another implementation, each of static component repositories - may be included in (or associated with) a memory of one or more separate servers.","Distribution manager  may receive a request ping from client  and, based on information in the request ping, determine whether an updated component is available. In one implementation, distribution manger  may maintain a directory of component updates from static component repositories - that may be used to compare information in a request ping with currently available components. Distribution manager  may send a reply to client  to provide an updated component or to indicate that no further updates are available for the component that is the subject of the request ping. For example, distribution manager  may review information in the request ping (e.g., the name and version of the component file, the version of the related GUI application, the locale of the client, etc.) and initiate delivery of an updated secure HTML component to client . In one implementation, distribution manager  may retrieve a component from one of static component repositories -. In other implementations, distribution manager  may direct the request ping to a separate server that includes the static component repository - corresponding to the functionality defined in the request ping.","Distribution manager  may help to ensure that an HTML component is secure (not tampered) by, for example, conducting communication between server  and client  using HTTPS, encrypting the HTML component with a private\/public key pair, and\/or attaching a cryptographic signature in a comment section of the HTML component.","Although  shows exemplary functional components of server , in other implementations, server  may contain fewer, different, differently arranged, and\/or additional functional components than depicted in . In still other implementations, one or more functional components of server  may perform one or more of the tasks described above as performed by one or more components of client .",{"@attributes":{"id":"p-0049","num":"0048"},"figref":["FIG. 6","FIG. 6","FIG. 6"],"b":["600","220","230","220","230","210"]},"Process  may begin with receiving a request ping from a client that has a GUI application (block ). The client's GUI application may be, for example, a toolbar, a widget, or another application that includes features that can later be upgraded as distinct components. The GUI application file may include an identifier that is unique to the particular file. In one implementation, server  may send the GUI application (e.g., via network ) to client  in response to a download request from a user of client . In one implementation, server  (e.g., distribution manager ) may receive a request ping from client  via network . The request ping may serve as a trigger to check for updates of a particular component or multiple components associated with the previously provided GUI application. For example, in one implementation, the request ping may include information to identify a particular component for which the update is requested and the current version being used by client . In another implementation, the request ping may include an aggregated request for multiple components associated with a particular GUI application (or multiple GUI applications). If requests for multiple components are included in a single request ping, server  may process the request for each component individually, as described in the following blocks of process .","It may be determined if a component update is available (block ). In one implementation, server  may compare information in the version of the component identified in the request ping with a directory of updates for the component. If the version of the component identified in the request ping is older than the version of the component in the directory of updates, then server  may determine that an update is required for the component at client .","If a component update is unavailable (block \u2014NO), a \u201cno update\u201d response may be sent to the client (block ). For example, if the version of the component identified in the request ping is the same as the version of the component in server 's directory of updates, then server  may determine that no update is available and may send a response message to client  indicating that no update is available for the particular component. In another implementation, server  may aggregate \u201cno update\u201d responses or piggy-back \u201cno update\u201d responses with other messages to reduce network traffic. Sending a \u201cno update\u201d response may be optional. In another implementation, server  may not reply to a request ping for which updates are unavailable. In this case, client  may determine that no updates are available when no response to the request ping is received within a particular amount of time of sending the request ping.","If a component update is available (block \u2014YES), a current static component file for the component may be retrieved (block ). For example, if the version of the component identified in the request ping is older than the version of the component in server 's directory of updates, server  (e.g., distribution manager ) may retrieve (e.g., from one of static component repositories -) a current version of the component for the GUI application.","A signature may be appended to the current static component file (block ). For example, server  (e.g., distribution manager ) may attach a signature to the original HTML content of the component as an HTML comment. The signature may include, for example, the unique identifier of the GUI application that was part of the request ping from client . In other implementations, other security and\/or authentication measures may be used to allow client  to verify the origin of the component.","The current static component file may be sent to the client (block ). For example, server  (e.g., distribution manager ) may send the current static component file with the appended signature to client . The current static component file may include a single file or multiple associated files. In an exemplary implementation, the current static component file may be sent over network  using HTTPS or another secure transport protocol. In the event the request ping from client  included information for multiple components, process  may return to block  to process component updates for another component until all component information included in the request ping has been addressed.","While  provides an exemplary process for providing component updates to a client, other processes may be used to provide component updates. For example, in another implementation, server  may actively push updated HTML component updates to all known clients  (e.g., via network ) and force\/trigger each client  to install the updated components. For example, if client  is a mobile phone, the push could be initiated by server  using a data sort message service (SMS) message. As another example, client  may be a computer with a persistent Extensible Messaging and Presence Protocol (XMPP) connection over which server  can initiate the HTML component update process. Thus, component updates may be initiated by a server instead of a by a request ping from individual clients.",{"@attributes":{"id":"p-0057","num":"0056"},"figref":["FIG. 7","FIG. 7","FIG. 7"],"b":["210","210","220","230"]},"Processing may begin with receiving a complete GUI application (block ). The particular GUI application may include any type or form of GUI application selected in any manner by the user. For example, the user might select an add-on application (using e.g., browser ) from a web site. The selection may cause a server associated with the web site to push a current version of the complete add-on application to client . In another example, client  may receive the complete GUI application as part of a software package for a separate program or as pre-loaded system software with the purchase of a computing device. The received GUI application may include features that can later be updated as distinct components.","A request ping may be sent to a server (block ). For example, client  may send a request ping to server . The request ping may include information to identify one or more components for which updates are requested and the current version of each component being used by client  (e.g., in local component cache ). In one implementation, client  may send a request ping at regular intervals (e.g., once a day, every other day, etc.). In another implementation, in addition to (or instead of) automatic request pings, a request ping may be initiated by a user of client device  whenever the user may be interested in checking for component updates.","It may be determined if a component update is available (block ). In one implementation, client  may receive a response from server  indicating whether an update for the component is available. If a component update is not available (block \u2014NO), the component may be loaded from the application file or the local cache (block ). For example, upon a subsequent opening of the GUI application, client  (e.g., renderer ) may load a previously stored version of the component. In one implementation, if there is no component update, client  (e.g., renderer ) can pull the component content from either the built-in resource data (e.g., from binary code of GUI application ) or a previously stored component version (e.g., stored in local component cache ).","If a component update is available (block \u2014YES), a static component file for the updated component may be downloaded (block ). For example, client  may receive, from server , an updated static component file with an appended signature. The updated static component file with the appended signature may be downloaded in the background (e.g., transparent to the user) to avoid disruption of the user's activity with client . In one implementation, the appended signature may be included as an HTML comment that may be used by secure component updater  but ignored by renderer  when generating the component. The updated static component file with the appended signature may be received via network  using, for example, HTTPS.","The signature in the updated component may be verified (block ). For example, client  (e.g., secure component updater) may verify that the signature in the HTML comment section matches a private key for the GUI application. If the signature is verified by client , the updated static component file may be stored locally in client  (e.g., stored in local component cache ). If the signature cannot be verified by client , the updated static component file may be rejected (e.g., not stored in local component cache ).","The local component cache directory may be updated (block ). For example, assuming the signature of the static component file is verified, client  may update a directory for the local component cache to indicate the new component version.","The component may be loaded from the local cache (block ). For example, upon a subsequent opening of the GUI application, client  (e.g., renderer ) may load the most recent version of the component. The file signature of the component (e.g., the signature in the HTML comment) may also be checked when the static component update is loaded from the local disk (e.g., local component cache ).","While  provides an exemplary process for receiving component updates from a server, other processes may be used to receive component updates. For example, in another implementation, a client  may receive (e.g., via network ) an unsolicited update pushed from server .",{"@attributes":{"id":"p-0066","num":"0065"},"figref":["FIGS. 8A and 8B","FIGS. 8A and 8B","FIG. 8A","FIG. 8B"],"b":["810","112","820","830"]},"Referring to , add-on application  may include multiple features to improve the user interface for browser , including search suggestion window . For example, search suggestion window  may appear when a user enters a search term (e.g., \u201cfinch\u201d) in toolbar . Based on the user input, search suggestion window  may provide multiple other search terms that a user may select to initiate a search. The contents of search suggestion window  may be defined based on binary code for the add-on application.","Assume for the example of , that an updated component for the search suggestion window is provided during the search operation of  and that a user then closes browser . The updated component may be provided as a new rendering model using HTML and JavaScript. The updated component may be provided for example, using the processes described above with respect to  and\/or .","As shown in , when browser  is opened, browser  may build add-on application  using the new component file. Thus, when the user enters the same search term (e.g., \u201cfinch\u201d) in toolbar , search suggestion window  may appear. Based on new information from the updated component file, suggestion window  may provide a different user interface than was provided in suggestion window . For example, as shown in , suggestion window  may include additional information (e.g., a number of search results associated with each search suggestion) that was not included in suggestion window . The update of the suggestion window feature of add-on application , thus, can be accomplished using a web-based interface without redistributing the binary code for the add-on application.","Systems and\/or methods described herein may receive a request ping from a client, the request ping including data to identify a component of a GUI application, and determine if an updated version of the component is available. The systems and\/or methods may also retrieve, from a memory, the updated version of the component and provide the updated version of the component to the client.","The foregoing description of implementations provides illustration and description, but is not intended to be exhaustive or to limit the invention to the precise form disclosed. Modifications and variations are possible in light of the above teachings or may be acquired from practice of the invention.","For example, another implementation may not include a local cache of component updates at a client (e.g., client ), but instead provide updated components directly from a server (e.g., server ). Thus, in this implementation, the server may provide real-time updates for components rather than updates in response to a request ping from a client.","Also, while series of blocks have been described with regard to , the order of the blocks may be modified in other implementations. Further, non-dependent blocks may be performed in parallel.","It will be apparent that embodiments, as described herein, may be implemented in many different forms of software, firmware, and hardware in the implementations illustrated in the figures. The actual software code or specialized control hardware used to implement embodiments described herein is not limiting of the invention. Thus, the operation and behavior of the embodiments were described without reference to the specific software code\u2014it being understood that software and control hardware may be designed to implement the embodiments based on the description herein.","Further, certain implementations described herein may be implemented as \u201clogic\u201d or a \u201ccomponent\u201d that performs one or more functions. This logic or component may include hardware, such as a processor, microprocessor, an application specific integrated circuit or a field programmable gate array, or a combination of hardware and software (e.g., software executed by a processor).","It should be emphasized that the term \u201ccomprises\u201d and\/or \u201ccomprising\u201d when used in this specification is taken to specify the presence of stated features, integers, steps, or components, but does not preclude the presence or addition of one or more other features, integers, steps, components, or groups thereof.","Even though particular combinations of features are recited in the claims and\/or disclosed in the specification, these combinations are not intended to limit the disclosure of the invention. In fact, many of these features may be combined in ways not specifically recited in the claims and\/or disclosed in the specification.","No element, act, or instruction used in the description of the present application should be construed as critical or essential to the invention unless explicitly described as such. Also, as used herein, the article \u201ca\u201d is intended to include one or more items. Where only one item is intended, the term \u201cone\u201d or similar language is used. Further, the phrase \u201cbased on,\u201d as used herein is intended to mean \u201cbased, at least in part, on\u201d unless explicitly stated otherwise."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The accompanying drawings, which are incorporated in and constitute a part of this specification, illustrate one or more embodiments described herein and, together with the description, explain the these embodiments. In the drawings:",{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0012","num":"0011"},"figref":["FIG. 4","FIG. 2"]},{"@attributes":{"id":"p-0013","num":"0012"},"figref":["FIG. 5","FIG. 2"]},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIGS. 8A-8B"}]},"DETDESC":[{},{}]}
