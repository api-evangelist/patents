---
title: Method and apparatus for managing related drivers associated with a virtual bus driver
abstract: Provided are an apparatus and method for managing related drivers associated with a bus driver. In one embodiment, the apparatus may comprise a physical device object table configured to contain a plurality of entries, a child device associated with each of the plurality of entries, each of the child devices configured to have a name associated therewith, the name configured to provide information about the child device sufficient to allow user environment applications an doperating system drivers to directly access the child device, and a virtual bus driver configured to interface between the child devices and an adapter.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08966506&OS=08966506&RS=08966506
owner: Hewlett-Packard Development Company, L.P.
number: 08966506
owner_city: Houston
owner_country: US
publication_date: 20040423
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE RELATED ART","DESCRIPTION OF SPECIFIC EMBODIMENTS"],"p":["This section is intended to introduce the reader to various aspects of art, which may be related to various aspects of the present invention that are described and\/or claimed below. This discussion is believed to be helpful in providing the reader with background information to facilitate a better understanding of the various aspects of the present invention. Accordingly, it should be understood that these statements are to be read in this light, and not as admissions of prior art.","In the field of computer systems, an operating system typically is utilized to perform different software programs or applications. The operating system and applications may communicate with peripheral devices and networks through adapters to input and output data. Each of the adapters associated with a peripheral device or network access point may have a specific object name that represents the particular adapter based upon, for example, a slot that the adapter is attached to in the computer system or a name created by another managing component. The operating system may invoke different drivers that manage the interaction between the adapter and its device and other components, such as applications and\/or the operating system.","However, if multiple devices are associated with a single slot in the computer system, each of the adapters or devices may be referenced by the same name or may not be identifiable to other system components because the adapters are associated with same slot. This may also occur if a single adapter can provide the functionality of multiple adapters or devices. Furthermore, the association might not be visible to software components, which are designed to exploit the association. Accordingly, if a device or software component receives a notification from a device that does not have a unique or identifiable object name, the receiving device or software component may be unable to directly use the notification because of the resulting ambiguity. As a result, the computer system may not operate as efficiently and system performance is degraded.","One or more specific embodiments of the present invention will be described below. In an effort to provide a concise description of these embodiments, not all features of an actual implementation are described in the specification. It should be appreciated that in the development of any such actual implementation, as in any engineering or design project, numerous implementation-specific decisions may be made to achieve the developers' specific goals, such as compliance with system-related and business-related constraints, which may vary from one implementation to another. Moreover, it should be appreciated that such a development effort might be complex and time consuming, but would nevertheless be a routine undertaking of design, fabrication, and manufacture for those of ordinary skill having the benefit of this disclosure.","Embodiments of the present invention may provide a methodology for managing related drivers associated with a bus driver. The bus driver may be a physical bus driver that is responsible for managing physically separate adapters connected to a bus it manages or a virtual bus driver that is responsible for managing multiple capabilities offered by a single adapter. The bus driver may utilize a naming mechanism to identify the child devices that are initiated by the bus driver. The naming mechanism may utilize the class or type of a child device along with the object name of the bus driver to create a unique and identifiable object name that identifies the child device. By utilizing this unique object name, another device may utilize the object name of the child device to directly access the child device. As a result, each child device of a bus driver, such as a physical or virtual bus driver, may have a unique object name that identifies the bus driver and the class of the child device.","Referring initially to , a block diagram illustrating an exemplary computer system in accordance with embodiments of the present invention is shown. The computer system is generally referred to by the reference numeral . The architecture of the computer system  is given for purposes of illustration only, as one example of a computer system in which embodiments of the present invention may be employed.","The computer system  may comprise a processor complex , which may include one or more central processing units (\u201cCPUs\u201d). A core logic chipset , which may manage a variety of functions on behalf of the processor complex , may be connected to the processor complex via a processor interface point-to-point link or a processor bus .","The core logic chipset  may be connected via memory bus  to a system random access memory , which may comprise static random access memory (\u201cSRAM\u201d), dynamic random access memory (\u201cDRAM\u201d) or other suitable memories. The memory  may be a shared system memory to hold memory resident files or information. Within the memory  may be an operating system  that may be utilized to manage the interaction between the different hardware and software components to enable the components to work together. The operating system  may be MS-DOS, Unix, Windows, Mac OS, and other platform specific operating systems. A video graphics controller  may be connected to the core logic chipset  via a video bus  to provide a signal that produces a display image on a video display .","A bus , such as a peripheral component interface (\u201cPCI\u201d) bus or the like, may connect the core logic chipset  to a variety of system devices, such as a network interface card  and a PCI\/PCI bridge . The network interface card  may provide communication capability to the computer system  via a communication bus . The communication bus , which may be a physical or wireless connection, may be connected to other computer systems. The PCI\/PCI bridge  may provide capacity for additional PCI devices on a PCI bus .","A PCI\/SCSI bus adapter  may provide access to SCSI devices such as a disk drive  and a tape drive  via a SCSI bus . A PCI\/ATA controller  may provide access to additional devices, such as a disk drive  and a CD ROM drive  via a bus . A PCI\/EISA\/LPC bridge  may provide access to system devices, such as a read only memory basic input\/output system (\u201cROM BIOS\u201d) , a non-volatile memory (\u201cNVRAM\u201d) , a modem  or the like via a bus . The NVRAM  may include flash memory or the like, while the modem  may provide communication access via a phone line . The BIOS  may be system firmware that is stored in ROM and utilized to load the operating system . An input\/output controller , which may be connected to the bus , may provide access to system devices such as a CD ROM drive , a keyboard , a mouse , a floppy disk drive , a serial port , a real time clock (\u201cRTC\u201d) , and the like via a bus .","To provide access to the peripheral devices, such as the network interface card , the disk drives  and , the tape drive , and the CD ROM , for example, named objects are created and associated with different hardware and software components, which may be managed by the operating system . For instance, each peripheral device may include an adapter or be coupled to an adapter, which may be a hardware or software component associated with drivers that are utilized to interface with a specific bus , , ,  or , and\/or applications. The adapter may be coupled into a slot to form an electrical connection with the specific bus. Each adapter may be represented as a named object to the operating system  and other devices within the computer system . The hardware and software components utilized to provide the interaction to the peripheral devices is shown in greater detail in .","Turning now to , a block diagram  depicting an exemplary embodiment of hardware and software components of the computer system of  in accordance with embodiments of the present invention is illustrated.  shows the processor complex  of  and the structure of one of the memory devices of the computer system . For purposes of illustration, the memory device is the RAM memory  of . Additionally, other relevant structures, such as an adapter , may correspond to the network interface card  or part of the disk drive  from . Those of ordinary skill appreciate that the present technique may not be limited to a computer system, but may applicable to other devices, such as handhelds devices, personal organizers, cellular telephones, network equipment, or other similar processor based units which may benefit from improved management of physical device objects.","The computer system  may include one or more processors, such as the processor complex  of , which is utilized to operate the computer system . The processor complex  may communicate with memory  and PCI slots -over a bus . The bus  may provide an interconnection between various system components, such as the core logic , the PCI\/PCI Bridge , the PCI\/SCSI Bus Adapter , the PCI\/EISA\/LPC Bridge , and\/or the PCI\/ATA Controller  of , and the like.","The processor complex  accesses peripheral devices, such as the other computer systems that may be coupled to the network interface card  via the communication bus  and the disk drive , through the PCI slots -. The PCI slots -may provide an electrical path for power and\/or signals to be exchanged between the various components of the computer system , such as the processor complex  and the memory . These signals may be exchanged with an adapter , such as the network interface card , which is a part of the peripheral device  or connected to the peripheral device . For instance, the adapter  may be the network interface card  or may be part of the disk drive , which is accessible through the PCI slot . The adapter  may include hardware information, such as a hardware identification, which is utilized to load appropriate software components or drivers, as discussed below.","Because the processor complex  controls the functioning of the device or the computer system , which is generally under the control of software programming, memory  is coupled to the processor complex  to store and facilitate the execution of software programs. For instance, the memory  may include the system RAM  or the NVRAM  of . The memory  may be used to store instructions, drivers -, applications -, PDO table , and\/or data that may be utilized to facilitate control or manage the operation of the computer system . Within the memory , a user environment  and an operating (\u201cOS\u201d) environment  may be utilized to manage the operation of the computer system.","In the user environment , applications, such as storage applications , network applications , and\/or installation programs , perform specific functions or operations for the computer system . For instance, the storage applications  may provide storage capabilities to tape drives, while network applications  may provide networking capabilities or access through the network interface card . Also, the installation programs  may be utilized to load drivers and install adapters for the peripheral devices. Further, the applications - may utilize application programming interfaces (\u201cAPIs\u201d), such as a storage API  and a network API , for example, to interact with the OS environment . The APIs  and  are sets of rules for calling other software programs, applications, or drivers to facilitate the exchange of information. As an example, the network application  may include Windows Sockets Applications and\/or Windows Sockets, while the network API  may include Windows Sockets Direct (\u201cWSD\u201d) or a portion of WSD, such as the Windows Sockets Switch. Accordingly, through the APIs  and  or directly, the applications - may interact with other components or devices as directed by the operating system  to perform specific functions or operations for the computer system .","In the OS environment , the operating system  may be utilized to interact with the different hardware and software components, which enables the components to work together. Within the OS environment , the operating system  may include a kernel that provides basic services to other parts of the operating system  to operate several programs or applications (multi-tasking) and to provide the interconnection between other networks and\/or peripheral devices. As such, in the OS environment , the operating system  may manage the access to data, software components, and\/or hardware components, which are discussed below.","As part of the OS environment , the operating system  may include a physical bus driver , plug-and-play (\u201cPNP\u201d) logic  and a registry  to maintain the associations of applications -, APIs - and drivers -. The physical bus driver  may detect the presence of adapters and devices attached to the any of the buses that the physical bus driver  manages, and report the presence of the adapters and devices to the PNP logic . The physical bus driver  may create named objects to represent each device reported to the PNP logic . The PNP logic  may manage the addition or installation of peripheral devices and the allocation of resources to the peripheral devices based on the plug-and-play rules. Through the use of the PNP logic , resources may be allocated to peripheral devices coupled to the PCI slots -. In addition, the PNP logic  may notify the operating system  of installed devices and handle queries from the operating system . Furthermore, a registry  may be utilized to store relationships between the applications -, APIs  and , and the associated drivers -, which are discussed below. The registry  may provide access for adapter management graphical user interfaces through APIs (not shown), Simple Network Management Protocol\/Insight Management agents through APIs (not shown), storage APIs , network APIs , and other applications or system utilities to access the drivers being utilized to perform input\/output functions with adapters on behalf of the operating system .","Further, adapter drivers, such as the virtual bus driver (\u201cVBD\u201d) , may be utilized to manage the adapters, such as adapter , that are coupled to the PCI slots -. The VBD  may be an adapter driver that manages the communication between the adapter  and the operating system  through the bus . The VBD  may create named objects for child devices and report the presence of child devices to the PNP logic . The child devices, which are represented as named objects, may be utilized to interact with different drivers - or applications -, as discussed below. Through the use of the VBD  or the PNP logic , resources, such as memory space, input\/output (\u201cI\/O\u201d) addresses, and interrupts are allocated to the adapter  coupled to the PCI slot -. In addition, the VBD  may notify the operating system  and\/or the PNP logic  of child devices and process queries from the operating system  and\/or the PNP logic .","To maintain the relationships between devices, the operating system  may utilize a physical device object (\u201cPDO\u201d) table . For each device, a PDO entry may be created in the PDO table , which is a data structure that represents the device. The PDO table  may include information about each of the devices, such as a name of the object that represents the device, address information, the class information, object type information, and\/or other information, which is discussed further in . This information may be stored within the adapter , the peripheral device  and\/or within the memory . The object name of the device may be created by the VBD  or the PNP logic . Once the object name of the device is determined, it is reported to the operating system  and a PDO entry is created in the PDO table  for use by other software and hardware components in the computer system .","Accordingly, additional drivers, such as drivers -, may be utilized to manage and facilitate the communication and interaction between the VBD  in the OS environment  and applications - or APIs  and  in the user environment . Each of these drivers - may be associated with other drivers - through stacks - that are utilized to manage the operations between hardware components, drivers -, or the user environment  for the operating system . For instance, the storage applications  may interact with a storage stack  that includes an Internet small computer system interface (\u201ciSCSI\u201d) driver , a small computer system interface (\u201cSCSI\u201d) driver , a class driver , and\/or a file system driver  to provide access to the disk drive  through the VBD . Similarly, the network applications  may interact with a remote data memory access (\u201cRDMA\u201d) stack  that includes an iWARP driver  along with a WSD driver  to provide RDMA services and a network device interface specification (\u201cNDIS\u201d) stack  that includes an NDIS driver  along with a transmission control protocol\/Internet protocol (\u201cTCP\/IP\u201d) driver  to provide TCP\/IP services to the network interface card  through the VBD . In addition, it should be noted that the VBD  may provide access to the individual stacks -, or a combination of the stacks - depending on the configuration. As a result, by utilizing these various drivers -, the operating system  may facilitate communication between user environment  and the OS environment  to provide access to the peripheral devices attached to the PCI slots -through adapters, such as the adapter .","Because the VBD  may create separate functional device stacks - for the adapter  coupled to one of the PCI slots -, the VBD  may form multiple child devices that are associated with the VBD . As an example, the network interface card  may be coupled to the PCI slot , which interacts with the VBD . The VBD  may provide storage services through the iSCSI driver , SCSI driver , class driver , and file system driver , RDMA services through the iWARP driver  and WSD driver , and TCP\/IP services through the NDIS driver  and TCP\/IP driver . In this configuration, the child devices of the VBD  are the iSCSI driver , the iWARP driver  and the NDIS driver . Accordingly, the VBD  may manage three different child devices that each provides a different service to the computer system .","In providing these different services, named objects are created for each of the child devices, and associated with entries into the PDO table . As noted above, the child devices, which may comprise the drivers , , and , may be named by the VBD  with the same object name in the PDO table  or may be named with a general name that is not descriptive of the service or function provided by the driver. This creates confusion for other devices, such as drivers -, applications -, and APIs  and , because the named objects in the PDO table  are the same for each child device. For example, if a device, such as drivers -, applications -, and APIs  and , is notified of a child device in a type or class that is of interest to the device, then the device may not be able to access the information associated with the child device because the named object is associated with multiple entries in the PDO table . As another example, the NDIS driver  is a child device of the VBD  along with the iSCSI driver  and the iWARP driver . The TCP\/IP driver , which is associated with the NDIS driver , may include a notification function that informs any interested drivers - about the IP address associated with the NDIS stack . The notification may include the IP address, the object name of the device, and\/or the PDO. The WSD driver , which may be associated with the RDMA stack , may not be able to directly use the information provided by the TCP\/IP driver  in the notification. This problem may be further compounded through the use of NDIS load balancing drivers, or other similar components.","However, the VBD  may utilize a naming mechanism to create a unique or identifiable object name for each child device associated with the VBD . The naming mechanism may rely on the fact that each child device is categorized based on the device class, which is represented by a name and an identification value called a globally unique identifier (\u201cGUID\u201d). The device class is identified during installation and utilized for installation purposes. When a new member of the device class has been added or the operating system  has been queried, the devices, such as applications -, APIs  and , and\/or drivers -, may be notified or provided a list of PDO entries in a specific device class along with the associated object name. The object name of the child device may include the object name of the VBD  along with a value or indicator that relates to the child device created by the VBD . The indicator may include the value of the class identifier for the child device, which is appended to the end of the object name of the VBD . For example, if the VBD  has an object name of \u201cPCI_DEVICE008,\u201d then a NDIS driver  may have an object name of \u201cPCI_DEVICE008-net12345\u201d an iSCSI driver  may have an object name of \u201cPCI_DEVICE008-scsi23232,\u201d and an iWARP driver  may have an object name of \u201cPCI_DEVICE008-rdma76985.\u201d","Advantageously, if the VBD  utilized the naming mechanism to create named objects for the child devices, then other devices, such as applications -, APIs  and , and\/or drivers -, may utilize the object name of the child device to directly access the child device, which enhances the operation of the computer system . For instance, the WSD driver  may determine the IP address and\/or the associated VBD  from a TCP\/IP notification or from querying the operating system  for a list of named objects in the TCP\/IP class. In addition, a storage component may utilize TCP\/IP to gain access to the network to provide storage for the computer system . If the storage component, such as the iSCSI driver , supports TCP\/IP Offload or other similar features, the storage component may utilize the object name of the child device to directly gain access to the NDIS driver . Accordingly, an exemplary embodiment of the utilization of the naming mechanism for entries in the PDO table  to facilitate this access between device objects is discussed below in .",{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 3","FIG. 3","FIG. 3","FIG. 2","FIG. 2"],"b":["300","302","306","204","204","100","107","301","216","220","222","224","226","107","308","312","314","320","322","326","328","334","336","344","302","306","302","306","208"],"i":["a","c "]},"The adapters - may be coupled to the PCI slots -to provide access to the respective peripheral device. Within the OS environment , the adapters - may be associated with adapter objects -, which represent the adapter drivers -, in the PDO table . The adapter objects - may be created by the operating system  when the operating system  receives notification about the presence of the adapters - from the adapter drivers - or the other devices . The adapter objects - may be represented by entries - in the PDO table . Similarly, child devices, such as the drivers , , and  (), may be represented by child device objects - defined by entries - in the PDO table . The entries - may be provided by the operating system  when the operating system  receives notification about the presence of the adapters - from the adapter drivers - or the other devices . The object names for the child device objects - may be created by the adapter drivers  and , which may be embodiments of the VBD  (). With each of the adapter objects - and child device objects - created, the operating system  may start the associated adapter drivers - and child device drivers -. The drivers - may provide interaction between the objects - and the functional drivers - or may operate as a virtual bus driver (\u201cVBD\u201d), which creates child devices, such as the child device objects -. The functional drivers - provide the interaction between the drivers - and the other devices , which is shown in the dashed lines from functional drivers -. It should be appreciated that each of the functional drivers - may interact with the other devices .","To manage the objects -, the PDO table  includes different entries -, which are associated with the objects -. The entries - in the PDO table  may include a PDO column A, a class column B, a name column C, an address column D, and an additional information column E. The PDO column A may include a data structure reference for the objects -, while the class column B may include the type or class of the device associated with the objects -. The name column C may include the object name of the device for the objects -, while the address column D may include any IP addresses, or other related address information for the objects -. The additional information column E may include other information about the objects -. Through the use of the PDO table , the operating system  may maintain a list of the information referenced through the PDO and the associated object names.","An example of the two exemplary layered structures that may be formed in the computer system  are shown through interactions of the first adapter  or third adapter  along with the second adapter . With the first adapter , an adapter object  is created and associated with an adapter driver . The adapter driver  may be an exemplary embodiment of the VBD  (). The adapter driver  causes the creation of the child device object  that is associated with the child device driver  and functional driver  and the child device object  that is associated with the child device driver  and the functional driver . The functional drivers  and  manage the interaction with the application for the respective adapter drivers  and . Alternatively, with the second adapter  the adapter object  is created and associated with an adapter driver . The adapter driver  is associated with the functional driver , which may manage the interaction with the application for the adapter drivers .","The VBD, which may comprise the adapter drivers  and , utilizes a naming mechanism to create a unique or identifiable object name for each of the PDO entries -, which may represent the drivers -. For instance, in the name column C of the PDO table , the entry  may have an object name of \u201cNAME1B,\u201d which is the object name of the adapter object  (\u201cNAME1\u201d) along with the class type (\u201cB\u201d) appended to the end of the object name of the adapter object . Similarly, the entry  may have a name of \u201cNAME1C,\u201d which is the object name of the adapter object  (\u201cNAME1\u201d) with the type of the object (\u201cC\u201d) appended to the object name of the adapter object . Without this naming mechanism, the entry  of the adapter object  and the entries  and  of the child device objects may have the same object name in the name column C, which would be \u201cNAME1,\u201d or may be given a name that is not identifiable with the function or service provided by of the driver. Accordingly, the naming mechanism differentiates the object names in the PDO table  from each other to clarify the associations in the PDO table  and for referencing the object names directly.","In accordance with embodiments of the present invention, devices, such as applications -, APIs  and , and\/or drivers -, may be allowed to access the PDO entries - based on the object name and to identify related drivers based on the object name. For instance, if a device is able to match drivers - based on the object name, then the device may directly match an underlying driver - or adapter - based on the object name. Also, the device may track the arrival of adapters - or adapter drivers - of a specific class and identify the associated VBD, such as drivers  and , associated with that specific class.","Turning to , a process flow diagram is illustrated to describe a process in accordance with embodiments of the present invention. In the diagram, generally referred to by reference numeral , a child device, such as the child device drivers - (), may be implemented with a unique object name associated with the respective VBD, such as adapter drivers  and . By creating a unique object name for the child device and accessing devices, such as other drivers -, applications -, APIs  and , or the operating system , may identify the child device from the object name of the child device. As such, the accessing device may obtain information about a specific child device or VBD. Also, the accessing device may notify and\/or configure other devices to access the VBD or child device based on the object name of the child device.","The process begins at block . At block , a VBD may create an object name for a child device. The child device may be iWARP driver, an NDIS driver, and\/or an iSCSI driver associated with the VBD. The object name of the child device may be a combination of the object name for the VBD along with an attribute, which may be the class identification or type of child device, for example. Then, the VBD may report the presence of the child device to the operating system, which may be the operating system  () or managing processor, as shown in block . At block , the operating system may create an entry into a PDO table, such as the PDO table  (), for the child device, which includes the object name, the class type, the PDO identifier, and\/or other associated information, such as the IP address for the child device, for example.","The accessing device may be notified or informed of the object name for the child device at block . The accessing device may be informed through a query of the PDO table or from a driver or application that monitors the arrival of certain types of devices in a specific class. At block , the accessing device may match the object name of the child device to another device by comparing the object names or a portion of the object names. The matching of the object names may include comparing the object name of the child device with the object name of another device or the object name of the VBD. From the matching of the object names, the accessing device may utilize the object name of the child device for further processing at block . The further processing may include accessing information from the PDO table, and\/or notifying another device of the information determined from the object name of the child device. Accordingly, the process ends, as shown at block .","Alternatively, it should be appreciated that the naming mechanism may also be applied to the child devices associated with a physical bus driver, such as the physical bus driver  (), along with other components. For example, the adapters on a particular bus may be managed by a physical bus driver. Accordingly, the child devices associated with that physical bus driver may be named utilizing the physical bus driver name along with a naming identifier, such as the type or class of the child device. As a result, a software component may identify the child devices that are on the same bus and other relationships from the object name of the child device. This may be advantageous for fault tolerant software on a server that includes multiple buses to map the traffic on different failure domains (i.e. different buses).","While the invention may be susceptible to various modifications and alternative forms, specific embodiments have been shown by way of example in the drawings and will be described in detail herein. However, it should be understood that the invention is not intended to be limited to the particular forms disclosed. Rather, the invention is to cover all modifications, equivalents and alternatives falling within the spirit and scope of the invention as defined by the following appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Exemplary embodiments of the present invention may be apparent upon reading of the following detailed description with reference to the drawings in which:",{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
