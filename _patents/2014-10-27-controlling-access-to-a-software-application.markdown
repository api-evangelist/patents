---
title: Controlling access to a software application
abstract: A method for controlling access to a software application includes generating a policy machine template based on at least one role and at least one permission for an operator, generating a policy machine based on the operator and at least one object associated with the operator, and maintaining at least one logical link between the policy machine template and the policy machine. The policy machine is an access control framework permitting directed acyclic graph relationships between objects, and the policy machine controls access to the software application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09467472&OS=09467472&RS=09467472
owner: Medidata Solutions, Inc.
number: 09467472
owner_city: New York
owner_country: US
publication_date: 20141027
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATION","BACKGROUND","DETAILED DESCRIPTION"],"p":["This application is a continuation of and claims priority from U.S. application Ser. No. 14\/134,019, filed Dec. 19, 2013, now U.S. Pat. No. 8,875,230, the entirety of which is hereby incorporated by reference.","Software applications may be provided to users via a network. A networked application may be accessed by a user via a website over the Internet or other distributed network. Because the network over which communication with a networked application may occur may be public, proper access control is often needed, requiring a user in some cases to enter a username and password or other form of authentication and\/or authorization.","Distributed computing often involves a collection of RESTful web services. (REST is an architectural standard for distributed systems. In REST, interactions between components are conceptualized as a series of stateless requests from a client to a server, each of which concerns a specific resource.) Each service may make a variety of authentication (who am I?) and authorization (what am I allowed to do?) determinations. Despite their various and distributed nature, these determinations should be made in a consistent manner across the entire distributed platform. If individual services implement access control independently, an oversight may occur, and one or more communication routes that are exposed may be insufficiently protected. One way of mitigating this problem is to use OWASP ASVS Access Control Requirements (see code.google.com\/p\/owasp-asys\/wiki\/Verification_V4), which suggest using a centralized mechanism (including libraries that call external authorization services) to protect access to each type of protected resource.","Where considered appropriate, reference numerals may be repeated among the drawings to indicate corresponding or analogous elements. Moreover, some of the blocks depicted in the drawings may be combined into a single function.","In the following detailed description, numerous specific details are set forth in order to provide a thorough understanding of embodiments of the invention. However, it will be understood by those of ordinary skill in the art that the embodiments of the present invention may be practiced without these specific details. In other instances, well-known methods, procedures, components, and circuits have not been described in detail so as not to obscure the present invention.","One approach to controlling access in a distributed network may include using several services as part of a role-based access control system, which may comprise mapping of roles to permissions. A \u201cpolicy machine\u201d may be used to authorize a request in such a system.","A policy machine is an access control framework that rigorously describes the set of authorized capabilities on a platform. In a policy machine, a \u201cprivilege\u201d or capability may be defined by a triad consisting of <user, operation, object>. There is a finite list of operations such as \u201cread,\u201d \u201cwrite,\u201d or \u201cdelete\u201d; an object is a protected item such as a medical record. For example, Bob Smith is authorized to delete medical_record_ if and only if the capability <Bob Smith, delete, medical_record_> can be derived from the policy machine. Operations may be organized into operation sets, overlapping collections of operations organized according to authorization rules.","This access control architecture has been described in a U.S. National Institute of Standards and Technology (\u201cNIST\u201d) Interagency Report (IR) called, \u201cPolicy Machine: Features, Architecture, and Specification,\u201d authored by David Ferraiolo, Serban Gavrila, and Wayne Jansen in December 2012. It is also being incorporated into a specification for using a policy machine approach developed by the NIST and other members of an ad hoc International Committee for Information Technology Standards (INCITS), proposed to be adopted by the American National Standards Institute.","The NIST Policy Machine specification does not specify how to generate a policy machine, nor is it sufficient for use in a highly configurable implementation. The formalism in the NIST specification is intended to be applied to a broad variety of systems, and the specification provides only brief summaries of \u201cadministrative commands,\u201d which are pieces of business logic surrounding administrative operations. The specification does not express any particular constraints on this logic, and the logic is not represented within the policy state.","In contrast to the NIST specification, the present invention generates a policy machine, for use in a highly configurable implementation, that expresses how different users may need different policies. It represents these policies using a type of formalism introduced by the NIST specification, which allows for easier code reuse and policy interoperability.","Reference is now made to , which is a system  for generating a policy machine. System  includes template generator  that takes as inputs roles and permissions  and produces policy machine template . Policy machine template  is input to policy machine generator  along with users and objects  to generate policy machine .","Roles and permissions  may be expressed as in Table 1:",{"@attributes":{"id":"p-0026","num":"0025"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"center"}}],"thead":{"row":{"entry":[{},"TABLE 1"]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]},{"entry":[{},"Permission"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"49pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Role","Read Study","Read Site","Read Depot"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["Study Site Manager","Yes","Yes","No"]},{"entry":["Study Depot Manager","Yes","No","Yes"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},"This policy describes which of three possible permissions is granted by each of two possible roles. Both a Study Site Manager and a Study Depot Manager can read information about a study, but only a Study Site Manager can read information about the sites involved in that study.",{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 2","b":["103","210","215","220","225","230","232","234"]},"The entity represented in Table 1 is a tabular example of policy machine template , but it is not a policy machine because it cannot in itself answer the question \u201cCan Bob Smith delete medical_record_ in (site) Bethlehem Medical in Study QRX?\u201d It does not contain information about any of those three real-world entities, user, operation, and object. However, a policy machine template can be queried like a policy machine to retrieve policy configuration information. \u201cStudy Site Manager\u201d can be treated as a user, and \u201cStudy,\u201d \u201cSite,\u201d and \u201cDepot\u201d can be treated as objects. According to the formalism, the question can be asked, \u201cCan a Study Site Manager read information on a Site in a Study?\u201d and the reply may be \u201cyes,\u201d while the question, \u201cCan a Study Depot Manager read information on a Site in a Study?\u201d can be answered \u201cno.\u201d","Policy machine template  can then be used to build an actual policy machine. The policy machine starts out empty because there is no real-world data. Then, the process governing the policy machine may receive information about users and objects  that a user, \u201cBob Smith,\u201d has been granted the Study Site Manager role for a study named \u201cStudy QRX.\u201d Policy machine template  is then used as a reference to add this information to the policy machine. Because Study Site Manager  can perform the operations in operation set  ({read_study, read_site}) on studies, that operation set can be copied into the policy machine, as shown in .",{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 3A","FIG. 2","FIG. 3A","FIG. 3A"],"b":["306","310","210","210","103","330","215"],"i":"a "},"Next, the process governing the policy machine may receive information about users and objects  that a site, \u201cBethlehem Medical,\u201d has been added to Study QRX. The policy machine template shows that this relationship has relevance to the policy, so that relationship can now be incorporated into the policy machine.",{"@attributes":{"id":"p-0033","num":"0032"},"figref":["FIG. 3B","FIGS. 3A and 3B","FIG. 2"],"b":["306","332","103"],"i":"b "},"As more users, studies, sites, and depots are added, this process is repeated and the policy machine may grow into a large graph. If a user or role assignment is removed, the node may simply be deleted from the graph\u2014there is no need to reference the policy machine template in that case.","For ease of understanding, the policy machine will remain the same for now, and consider the case where, due to a change in policy, the policy machine template is changed, such that a Study Site Manager also has an update_site privilege. The relevant operation set  in the template  in  is altered as shown in .","This change in policy machine template  triggers a change in policy machine itself. All operation sets that are derived from altered operation set  are then automatically altered to match, as shown in .","To make this update happen, the logical links between the corresponding elements in policy machine template  and the policy machine should be maintained. These could be represented via dashed\/dotted lines - on a graph as shown in , although they are not connections in the sense of the policy machine formalism. That is, they are not assignments, or anything else with meaning within the policy machine.","To make the graph in  as simple as possible, only one user is included. If more elements are added to policy machine on the right side of , more dotted lines would need to come from the policy machine template on the left side. For example, if multiple users existed with the Study Site Manager role, each would have a separate role node, each of which would be connected by a dotted line to Study Site Manager  in policy machine template .",{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 6","b":"605"},"In operation , a policy machine template may be generated, such as policy machine template , shown in . In operation , the preliminary actions for a clinical trial may begin, such as signing up sites and principal investigators, enrolling patients, purchasing access to and integrating with software, defining a randomization and blinding scheme, and others. In operation , users may be assigned to roles and objects, such as Study Site Manager and Study QRX (\u201cobjects\u201d can be sites, studies, depots, etc.), and, as illustrated in , one or more policy machines may be generated as in operation .","It is envisioned that there will be updates to the roles and permissions as well as to the users and objects, such that the policy machine may not remain the same for the duration of a project, such as a clinical trial. In that case, logical links should be maintained in operation  between corresponding elements in the policy machine template and the policy machine, as illustrated in . If roles and\/or permissions are updated in operation , such as illustrated in , then policy machine template should be updated as in operation , as illustrated in , and the policy machine should be updated as in operation , as illustrated in . Similarly, users and objects may be updated in operation , then assignments of users to roles and objects may be performed in operation , and the policy machine should be updated as in operation . Such updates may occur recursively, as shown by arrows  and .","Besides the operations shown in , other operations or series of operations may be used to generate policy machine templates and policy machines. Moreover, the actual order of the operations in the flowchart may not be critical.","The graphs in , i.e., the policy machine templates and policy machines, may be represented using a directed acyclic graph. A directed graph is a set of nodes and edges, with each edge corresponding to an ordered pair of nodes. As shown in , two nodes A and B are considered \u201cconnected\u201d if there exists a sequence of at least two nodes, starting with A and ending with B, such that each consecutive pair corresponds to an edge. This sequence is called a \u201cpath.\u201d A directed graph is acyclic when there is no node that is connected to itself. In , nodes A and C are connected to node B directly, and to node D through a path that includes B. Node C is also connected directly to node D, so that if node B were removed, node C would remain connected. This is a directed acyclic graph. The graph in  contains a cycle from node A to node B to node C to node A, and thus is not acyclic.","In the policy machine formalism, users, objects, and operation sets may be nodes on a directed acyclic graph, as are two types of mediating nodes: user attributes, which correspond conceptually to roles, and object attributes, which can reflect any property of an object that is relevant to authorization, such as a unique identifier, a classification, or an association with another object. In a basic version of a policy machine, a capability <user, operation, object> can be derived if and only if an operation set ops exists such that:\n\n","The graph in  represents one possible access state for a policy machine. In this access state, user \u201cu,\u201d represented by node , is connected to the <Division, Projects> operation set (node ), which contains the \u201cr\u201d (\u201cread\u201d) operation. This same operation set is connected to all three objects o, o, and o, represented by nodes , , . User u thus has the capability to read each of those three objects. The path from u to the <Division, Project> operation set may be read as \u201cu is part of Group 1, which is part of the Division, which is allowed to read each object belonging to any project.\u201d The path from the operation set (node ) to object o (node ) may be read (working backwards) as \u201co is part of Project  (node ), which is a Project, so o is subject to the <Division, Project> operation set.\u201d The \u201cw\u201d (\u201cwrite\u201d) operation on an object is limited to users who are part of the Group that owns the Project that owns the object. User u (node ) is connected to <Group, Project> (node ), but not <Group, Project> (node ), which authorizes u to write to o, but not to either of the other objects. User u's write permissions are the inverse of u's. User u (node ) is not connected to any operation set containing \u201cw,\u201d and thus has no write capability on any object.","The policy machine state may be adjusted using \u201cadministrative operations.\u201d Access control for administrative operations may be represented using the same formalism as for other operations. This allows the policy machine to govern its own authorization.","The present invention goes beyond the NIST specification to represent an abstract business rule (also called an abstract privilege, a role permission, or a configuration) of the form, \u201cIf a user has the role <role> on a resource of type <resource type>, that user can perform the operation <operation> on that resource's<resource association>.\u201d For example, a client may wish to configure a study such that a user with the role \u201csite inventory manager\u201d for one of that study's study-sites can reorder any inventory item for that study-site. Such configuration option can be represented in an intuitive, accessible way, and may be honored within the policy machine whenever such a role assignment is made, or whenever an inventory item becomes associated with a study-site.","The directed acyclic graph concept may not be sufficient in this situation. In a policy graph, the way to represent that a role assignment is subject to a particular rule is by connecting an element in it to a global object attribute shared by all such assignments. But this creates too much connectivity in the graph\u2014it does not allow a distinction to be made between similar role assignments between different users to different objects.","An embodiment of the present invention resolves this issue. In this implementation, a configuration may be represented using a policy machine template that is not a part of the NIST policy machine. Borrowing terminology from object-oriented programming, the nodes in the policy machine may be instances of the nodes in the policy machine template.",{"@attributes":{"id":"p-0050","num":"0052"},"figref":["FIG. 9","FIG. 9"],"b":"903"},"When a user is assigned a study administrator role, instances of these nodes may be added to the policy machine. Their connections may be inferred programmatically from the connections in the policy machine template. Every node added to the policy machine is given a tag that matches it to a node in the template. If two nodes are connected in the template, the nodes with corresponding tags are connected in the policy machine. The coupling between a class and its instance may be persisted within the system, so that if the configuration changes, the policy machine state changes to match the configuration.","This is shown in , which illustrates a policy state honoring a sample configuration of policy machine template  and its relation to policy machine , according to an embodiment of the invention. This shows how a template may be used to generate a policy machine, providing functionality that goes beyond that which can be represented with a single directed acyclic graph.","For both the policy machine template and the policy machine itself, several persistence (non-volatile storage) options are available. A graph database may be used, because of the policy machine formalism, using a NoSQL database for scalability. A directed acyclic graph can also be represented in a traditional relational database. These choices may be made independently for the template and the machine, but it will likely be more expedient to re-use the same infrastructure for each.","Various bulk query requirements may be conceptualized as representing \u201csubtrees\u201d of the runtime policy graph, created by picking a single node as the root and traversing all paths, stopping on nodes of a specified type, which are treated as leaves. This can be explained with reference to , which contains only the policy machine. In , the question, \u201cWhat objects does User  have access to?\u201d can be answered by starting at the \u201cu\u201d node  and following all of the outgoing arrows, collecting every node with the \u201c:object\u201d label. Erasing every node that is not accessible by following outgoing arrows this way, results in a \u201csubgraph\u201d or \u201csubtree\u201d containing only the items of interest. There has been extensive work on making such operations performant, i.e., there are many published algorithms and open-source software for finding these subgraphs quickly.","The policy machine formalism is beneficial because users have the option to specify a single role on which to base access control decisions. Since each instance of a role assignment may be represented in the policy machine as its own node, the same capability determination may be made on it that would be made for a user node, in effect \u201cchopping off\u201d the root node of the user-permissions subtree and descending one level. An example of this is shown in , which illustrates a simple case of subtrees being extracted from an authorization graph. In this figure, a user Alice, via her \u201cManager\u201d and \u201cDepartment Head\u201d roles, has access to three hierarchically arranged objects, Team , Team , and Bob. To answer the question, \u201cWhich objects does Alice have access to in her Department Head role?,\u201d we look at the subtree descending from the node representing that role (subtree ). Because \u201cTeam \u201d is not accessible via the Department Head node, it is not part of subtree  and should not be visible to Alice when she is acting in her capacity as Department Head. Team  and its member Bob are accessible, and thus are part of subtree . This illustrates that the policy machine formalism is sufficient to address a requirement that users with multiple roles be able to restrict their views to those granted by one role.","As part of the user experience for creating and managing configuration types, the policy machine template may be configured through a user interface that may involve visualizations such as those in . This interface may be aware of what operations are supported for each resource, the possible relations between each resource, and a default set of recommended operation sets for each of the roles. This configuration may be viewed or edited at any time, and may be \u201ccloned\u201d for new studies. Users may then be granted role assignments to objects via a user interface or service. The details of how these assignments \u201ccascade\u201d to child objects do not necessarily need to be exposed during this process. Generally, only one role assignment will be necessary at a time.","The present invention fulfills the access control requirements for each element of a distributed network, including client libraries that are compatible with all distributed network services. Embodiments of the present invention are role-based, because customers may define their authorization requirements by assigning roles to their users and permissions to those roles. Embodiments may incorporate both human and automated users by allowing some applications to take a restricted set of actions independently of users, and others to act on behalf of humans.","The present invention has other attributes. It may allow users to be assigned different roles for different instances of the same resource type. A typical case is that a user is a principal investigator for one or more studies, but has no roles for other studies. In many cases, a user may also have a different role for another study. Embodiments of the invention maintain separate access control lists for different objects, which is known as horizontal access control. Embodiments of the invention may allow a single role assignment to be inherited by associated resources, such that a study-site can authorize based on a rule such as \u201ca clinical study manager for a study-site's study can see attributes for that study-site.\u201d Embodiments may support arbitrary levels of nesting for these associations with a scalable and extensible implementation.","The present invention may be configurable on a resource-to-resource basis, by being able to provide a default configuration type that can be modified for different client divisions or different studies. A client may be able to configure access control through a web-based user interface without needing detailed information about the working of the underlying software application. Changes to the configuration of a live resource may take automatic effect on that resource, as was shown in .","The present invention may allow a user with multiple roles to limit the user's authorizations to those granted by one role. For example, a user with both the Principal Investigator and Clinical Research Associate roles may be able to choose to \u201cact as\u201d a Clinical Research Associate only, hiding actions that are granted to the user only via the Principal Investigator role.","The present invention may allow bulk queries. Thus, it may be possible to efficiently generate a list of resources to which a given operator (user, role, or app) has access, a list of operators who have access to a resource, and a list of permitted operations for a given operator\/resource pair. The present invention may also be multi-tenant compatible in that no application is needed to grant unconditional trust to anything other than the central access control service.","Although embodiments of the present invention have been described in terms of networked software applications, other embodiments of the present invention may involve standalone, single use, and\/or single tenant software packages that may be presented to a user on a CD, a DVD, or a floppy disk, or via download to a standalone computer. In addition, users may be able to sign on to a kiosk that many users with various roles and permissions can access, and the access control policies of this invention may be used in this situation.","Aspects of the present invention may be embodied in the form of a system, a computer program product, or a method. Similarly, aspects of the present invention may be embodied as hardware, software or a combination of both. Aspects of the present invention may be embodied as a computer program product saved on one or more computer-readable media in the form of computer-readable program code embodied thereon.","For example, the computer-readable medium may be a computer-readable signal medium or a computer-readable storage medium. A computer-readable storage medium may be, for example, an electronic, optical, magnetic, electromagnetic, infrared, or semiconductor system, apparatus, or device, or any combination thereof.","A computer-readable signal medium may include a propagated data signal with computer-readable program code embodied therein, for example, in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms, including, but not limited to, electromagnetic, optical, or any suitable combination thereof. A computer-readable signal medium may be any computer-readable medium that is not a computer-readable storage medium and that can communicate, propagate, or transport a program for use by or in connection with an instruction execution system, apparatus, or device.","Computer program code in embodiments of the present invention may be written in any suitable programming language. The program code may execute on a single computer, or on a plurality of computers. The computer may include a processing unit in communication with a computer-usable medium, wherein the computer-usable medium contains a set of instructions, and wherein the processing unit is designed to carry out the set of instructions.","The above discussion is meant to be illustrative of the principles and various embodiments of the present invention. Numerous variations and modifications will become apparent to those skilled in the art once the above disclosure is fully appreciated. It is intended that the following claims be interpreted to embrace all such variations and modifications."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0005","num":"0004"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIGS. 3A and 3B"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 4A"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 4B"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIGS. 7A and 7B"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 11"}]},"DETDESC":[{},{}]}
