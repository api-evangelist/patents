---
title: Online monitoring for customer service
abstract: A system can monitor online services based on conditions that can be selected by an administrator. The system can identify and select messages from within the online services. The system can then transform the selected messages into a specific format and forward the transformed messages to an agent console application. The agent console application can be located, for example, at a call center. Within the agent console application, an agent can respond to the forwarded messages using a single unified interface that an agent uses to respond to a chat session request, or telephone call, for customer service. Thus, the specific communication details of the online services can be abstracted by the system, so that the agent can respond to the forwarded messages of different online services using the single unified interface.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08832210&OS=08832210&RS=08832210
owner: Oracle International Corporation
number: 08832210
owner_city: Redwood Shores
owner_country: US
publication_date: 20110830
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["One embodiment is directed to a computer system, and more particularly, to a computer system that manages customer service.","Today, there are many online services, such as social networking services, that focus on building and reflecting social networks or social relations among people, where people may share interests and\/or activities. In today's world of social networking, voluminous amounts of information are available on Internet web pages, electronic bulletin boards, and other electronic displays that are provided by these social networking services. This information can allow a company to build vast repositories of information. However, the transparency and openness of the social networking world also means that this information is available to everyone else, or to at least a large community, where the large community may include customers or potential customers of the company. This means that a derogatory message that is broadcast within a social networking service can potentially be very damaging to the company, as the derogatory message may be viewed by hundreds or thousands of individuals. Thus, companies can be required to dedicate significant manpower to query the various social networking services in order to capture and answer derogatory messages that are broadcast within the social networking services, in order to defuse these potential customer service nightmares.","One embodiment is directed to a computer-readable medium having instructions stored thereon that, when executed by a processor, cause the processor to monitor, and respond to, one or more online service messages. The instructions include monitoring an online service based on a rule that comprises one or more conditions. The instructions further include selecting an online service message that has been broadcast within the online service that satisfies at least one condition of the rule. The instructions further include assigning the online service message to a logical grouping of one or more agents based on the rule. The instructions further include creating a chat session. The instructions further include transforming the online service message into a chat session message. The instructions further include transmitting the chat session message within the chat session to an agent console associated with the logical grouping of one or more agents.","According to an embodiment, a system can monitor online services based on conditions that can be selected by an administrator. The system can identify and select messages from within the online services. The system can then transform the selected messages into a specific format and forward the transformed messages to an agent console application. The agent console application can be located, for example, at a call center. Within the agent console application, an agent can respond to the forwarded messages using a single unified interface that an agent uses to respond to a chat session request, or telephone call, for customer service. Thus, the specific communication details of the online services can be abstracted by the system, so that the agent can respond to the forwarded messages of different online services using the single unified interface. A response by the agent can take the form of a chat offer, a call offer, an email offer, or an offer for another type of resource. Furthermore, the system can monitor any type of online service. For example, the system can monitor a social networking service, such as Twitter\u00ae, Facebook\u00ae, and LinkedIn\u00ae. As additional examples, the system can monitor a text messaging service, such as Short Message Service (\u201cSMS\u201d), or an instant messaging service, such as America Online\u00ae Instant Messenger (\u201cAIM\u201d).",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1","b":["10","10","12","10","10","22","12","22","10","14","22","14","10","20","10"]},"A computer-readable medium may be any available medium that can be accessed by processor . A computer-readable medium may include both a volatile and nonvolatile medium, a removable and non-removable medium, a communication medium, and a storage medium. A communication medium may include computer readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism, and may include any other form of information delivery medium known in the art. A storage medium may include RAM, flash memory, ROM, erasable programmable read-only memory (\u201cEPROM\u201d), electrically erasable programmable read-only memory (\u201cEEPROM\u201d), registers, hard disk, a removable disk, a compact disk read-only memory (\u201cCD-ROM\u201d), or any other form of storage medium known in the art.","Processor  can also be operatively coupled via bus  to a display , such as a Liquid Crystal Display (\u201cLCD\u201d). Display  can display information to the user. A keyboard  and a cursor control device , such as a computer mouse, can also be operatively coupled to bus  to enable the user to interface with system .","According to one embodiment, memory  can store software modules that may provide functionality when executed by processor . The modules can include an operating system , an online service monitoring module , as well as other functional modules . Operating system  can provide an operating system functionality for system . Online service monitoring module  can provide functionality for monitoring, and responding to, one or more online service messages, as will be described in more detail below. System  can also be part of a larger system. Thus, system  can include one or more additional functional modules  to include the additional functionality. For example, functional modules  may include modules that are part of an \u201cATG Optimization\u201d product from Oracle Corp.","In one embodiment, functional modules  include an agent console module. An agent console module can provide functionality for displaying the one or more online service messages within a user interface, and can also provide functionality for generating a response to the one or more online service messages, as will be described in more detail below. In alternate embodiments, functional modules  do not include an agent console module, and instead, the functionality of an agent console module can be provided by one or more additional systems that are operatively coupled to system . In one alternate embodiment, the functionality of an agent console module is provided by online service monitoring module , rather than a separate agent console module.","Processor  can also be operatively coupled via bus  to a database . Database  can store data in an integrated collection of logically-related records or files. Database  can be an operational database, an analytical database, a data warehouse, a distributed database, an end-user database, an external database, a navigational database, an in-memory database, a document-oriented database, a real-time database, a relational database, an object-oriented database, or any other database known in the art.",{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 2","FIG. 1"],"b":["10","210","220","230","240","210","220","230","220","230","240","220","230","240","230","220","230","230","220","230","240","240","220","240","230","210","220","230","240"]},"In one embodiment, rules engine , service dispatcher , agent console , and chat session  are separate processes that interact with one another in order to provide the functionality described below in greater detail. Also, in one embodiment, the functionality of rules engine , service dispatcher , agent console , and chat session  can be provided by online service monitoring module  of , when executed by processor  of .","An example of a flow between the functional components illustrated in  will now be described. In the example, an administrator of the system utilizes rule engine  to create a rule for monitoring an online service. For example, the administrator accesses a user interface displayed by rules engine , and selects an online service, such as Twitter\u00ae, that the rule will apply to. As is further described in greater detail below, Twitter\u00ae is only an example of an online service, and a rule can be applied to many other types of online services. The user further defines a condition for the rule, such as entering one or more keywords (for example, \u201cATG,\u201d \u201cOptimization\u201d and \u201cRocks\u201d). The user further defines the condition by selecting an operator to describe the relationship between the keywords (for example, selecting the \u201cAND\u201d operator). A keyword is only one type of condition, and a user can define many other types of conditions. The user then saves the rule using the user interface displayed by rules engine . The rule is subsequently published (i.e., enabled) by rules engine .","Upon saving the rule, according to the example, rules engine  transmits a provisioning message to service dispatcher  that includes data associated with the rule. Upon receiving the data within the provisioning message transmitted by rules engine , service dispatcher  creates a \u201cline driver\u201d process (or thread) that corresponds to an online service the rule was defined for. The line driver process monitors the online service for messages that satisfy the condition of the rule. Upon identifying a message that satisfies the condition of the rule, the line driver process selects the message and retrieves data from the message. When the line driver process receives data from the message that satisfies the condition of the rule, the line driver process transforms the message into a format appropriate for chat session , and service dispatcher  transmits the formatted message to agent console  using chat session , where chat session  is based on a chat protocol that itself is based on an application programming interface (\u201cAPI\u201d).","According to the example, when chat session  is created for agent console , chat session  is associated with a particular user of agent console . For example, each user may be associated with a department, and, based on a department that is associated with the rule that created the message, chat session  is associated with a user that is also associated with the same department. Furthermore, when chat session  is created for a particular user of agent console , an integration panel is displayed within a user interface of agent console . This integration panel displays the formatted message that is transmitted by service dispatcher  to a user, where the formatted message includes message data.","In this integration panel, a user can enter data for a responding message, such as text. The integration panel can validate the responding message based on criteria of the online service (for example, validate that the length of the entered text does not exceed a predetermined length). Upon completion of the responding message, agent console  then places the responding message within chat session . Upon placing the responding message within chat session , agent console  then transmits the responding message to service dispatcher  utilizing chat session , which is based on the API.","Subsequently, service dispatcher  transmits the responding message to the corresponding line driver process for transmission to an author of the original message within the online service. The corresponding line driver process then transforms the responding message into a format appropriate for the online service, and transmits the formatted responding message to the author of the original message within the online service. Furthermore, using the integration panel of agent console , a user can also transmit to the author of the original message an offer to initiate a chat session, a telephone session, or other type of session. This offer can be a component of the responding message, or can be a component of a separate message.","As previously described, in one embodiment, a system can include a rules engine (such as rules engine  of ). A rules engine provides functionality that allows an administrator of the system to define one or more rules for monitoring online services, where each rule includes one or more conditions. The rules can then be used to select one or more messages that are broadcast within the online services. Specifics of a rule engine, and a rule for monitoring online services, are now described in greater detail.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 3","b":["300","300"]},"In one embodiment, a rule includes one or more attributes. An attribute is data associated with the rule that defines a characteristic of the rule. Examples of attributes include a name attribute, a group attribute, an enabled attribute, an online service attribute, a department attribute, and a search time attribute. A name attribute defines a relevant name for the rule. The name for the rule can be displayed within user interface  illustrated in . A group attribute defines a group for the rule. The group can be used to facilitate sorting of one or more rules. An enabled attribute defines whether the rule is enabled or disabled (i.e., whether the rule is executed after it is defined). An online service attribute defines which online service the rule is to be applied to. In one embodiment, an online service can be a social networking service, such as Twitter\u00ae, Facebook\u00ae, and LinkedIn\u00ae. In an alternate embodiment, an online service can be a text messaging service, such as SMS. In yet another alternate embodiment, an online service can be an instant messaging service, such as AIM\u00ae. A department attribute defines a routing configuration for messages broadcast within the online service that are selected based on the rule. The routing configuration can be used to select an agent console. Once an agent console is selected, the selected messages broadcast within the online service can be routed to the selected agent console. For example, each user of an agent console can be associated with a department, and the department attribute defines which department that the messages broadcast within the online service should be routed to. A search time attribute defines how far back in time an online service should be monitored. A duration in time can be defined using a default period of time, such as days. For example, a search time attribute with a value of 5 indicates that an online service should be monitored for one or more messages that are broadcast within the last five days of the execution of the rule.","Furthermore, in one embodiment, a rule also includes one or more conditions. A condition is business logic associated with the rule that defines which messages broadcast within the online service are to be identified and selected. One example of a condition is a keyword condition. A keyword condition includes one or more keywords (e.g., \u201cOracle,\u201d and \u201cOptimization\u201d) that can be used to identify and select one or more messages broadcast within the online service. In other words, messages broadcast within the online service that contain one or more of the keywords of the keyword condition can be identified and selected. A keyword condition can also include one or more logical operators (e.g., \u201cAND\u201d, \u201cOR\u201d, \u201cNOT\u201d, and \u201cNULL\u201d) that can be used to combine multiple keywords and modify single keywords. For example, the logical operator \u201cAND\u201d can be used so that only messages with all of the multiple keywords are identified and selected, the logical operator \u201cOR\u201d can be used so that messages with any of the multiple keywords are identified and selected, the logical operator \u201cNOT\u201d can be used so that messages that do not include the single keyword are identified and selected, and the logical operator \u201cNULL\u201d can be used to negate a condition based on a single or multiple keywords. Thus, an example keyword condition is (\u201cATG\u201d OR \u201cCommerce\u201d) AND (NOT \u201cPlatform\u201d) AND (NOT \u201cBest\u201d) AND (\u201cSuck\u201d).","Another example of a condition is a sentiment condition. A sentiment condition includes one or more sentiments (e.g. positive, negative, happy, sad, angry, etc.) that can be used to identify and select one or more messages broadcast within the online service. In other words, text contained within messages broadcast within an online service can be analyzed to determine if the text contains a sentiment that matches the one or more sentiments of the sentiment condition. A sentiment condition can also include one or more logical operators (e.g., AND, OR, NOT, and NULL) that can be used to combine multiple sentiments or modify single sentiments, as described above with respect to keywords. Furthermore, other types of conditions can be created for a rule, in addition to keyword conditions and sentiment conditions. For example, a condition can be created for a rule based on social status of an author of a message. For example, a condition can be created so that only messages where the message author has a certain number of followers is identified and selected.","According to an embodiment, user interface , illustrated in , allows an administrator of a system to define a rule. More specifically, user interface  allows an administrator to create a new rule, or modify an existing rule. By creating a rule, or modifying an existing rule, an administrator can define one or more attributes, and one or more conditions, for the rule, using user interface . In one embodiment, a rules engine uses a unified language to express the rule. Thus, an administrator does not need to know any specific implementation details of an online service in order to define a rule for the online service.","According to the embodiment, user interface  displays name attribute , group attribute , enabled attribute , online service attribute , department attribute , and search time attribute . Name attribute  allows an administrator to enter a value that identifies a name for the rule. Group attribute  allows an administrator to enter a value that identifies a group for the rule. Enabled attribute  allows a user to select a value that indicates whether the rule is enabled or disabled. Online service attribute  allows a user to select a value that indicates which online service the rule is to be applied to. Department attribute  allows a user to select a value that identifies a department that any messages identified and selected by the rule should be forwarded to. Search time attribute  allows a user to enter a value that indicates how far back in time an online service should be monitored. Furthermore, user interface  also displays condition window  which allows a user to define one or more conditions for the rule. Condition window  is described in greater detail in relation to . In addition, user interface  also displays publish button . By clicking on publish button , a user can publish (i.e., enable) the rule. Upon publishing of the rule, the system monitors the online service based on the service rule. The system continues to monitor the online service until the rule is unpublished (i.e., disabled). A system can have any number of published (i.e., enabled) rules at any time.",{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 4","b":["300","300","370","370","370"]},"Furthermore, for the condition entitled \u201cCondition #2,\u201d condition window  includes keyword\/previous condition  and keyword\/previous condition . Keyword\/previous condition  and keyword\/previous condition  each allow an administrator to either define a keyword, or reference a previously defined condition. While condition window  includes two keywords\/previous conditions, as illustrated in , one of ordinary skill in the relevant art would readily appreciate that this is merely an example, and that condition window  can include any number of keywords\/previous conditions. Furthermore, for the condition entitled \u201cCondition #2,\u201d condition window  also includes logical operator . Logical operator  allows an administrator to define a logical operator that combines keyword\/previous condition  and keyword\/previous condition . As one of ordinary skill in the relevant art would readily appreciate, an administrator can make similar configurations for the other conditions associated with the rule.","While in the illustrated embodiment of , each condition displayed within condition window  includes one or more keywords, one of ordinary skill in the relevant art would appreciate that this is only an example embodiment implementing keyword conditions. In alternate embodiments, other types of conditions could be implemented. For example, in an embodiment implementing sentiment conditions, each condition displayed within condition window can include one or more sentiments, rather than keywords.","According to an embodiment, when a rule is defined for a rules engine by an administrator, a corresponding rule object is created that represents the rule, where an object is an entity created by a programming language that comprises one or more attributes and one or more methods, as understood by one of ordinary skill in the relevant art. The corresponding rule object is subsequently stored in a database of the system (such as database  of ). Furthermore, according to the embodiment, when the rule is defined for the rules engine, and the corresponding rule object is stored in the database, a provisioning message is formed and transmitted to a service dispatcher of the system. Furthermore in one embodiment, when a rule is defined for a rules engine, the rule is validated. Examples of rule validation can include: (1) a rule only can only include one condition that is a parent condition (i.e., does not reference any previous conditions); (2) a rule cannot include a plurality of conditions, where the plurality of conditions reference each other in a loop format (e.g., condition 3=condition 1 and condition 2; condition 2=condition 3 or condition 4); (3) the \u201cAND\u201d and \u201cOR\u201d logical operators require two conditions; and (4) the \u201cNOT\u201d and \u201cNULL logical operators require one condition.","In one embodiment, when a rule is defined for a rules engine by an administrator, a corresponding rule object is created that represents the rule. The rule object is based on the following object model. A rule object is comprised of one or more attributes. In one example, a rule object comprises the following attributes: a rule identity; an online service account identity; a last retrieved message identity; an online service name; a rule name; a group name; a department name, and an enabled\/disabled value. According to the example, a rule identity is an identity value for the rule object. An online service account identity is an identity value for an online service account object that corresponds to the rule object, where the online service account object defines one or more attributes that identify account information for an online service associated with the rule. An online service name is a value that identifies a name of the online service associated with the rule. A rule name is a value that identifies a name of the rule. A group name is a value that identifies a group associated with the rule. A department name is a value that identifies a name of the department associated with the rule. An enabled\/disabled value is a value that identified whether the rule is enabled or disabled.","According to the embodiment, the rule object can be referenced by one or more condition objects, where a condition object represents a condition of the corresponding rule. A condition object is comprised of one or more attributes. In one example, a condition object comprises the following attributes: a condition identity; a rule identity; a parent condition identity; an operand; an operator; and a published value. According to the example, a condition identity is an identity value for the condition object. A rule identity is an identity value for a rule object that the condition object references. A parent condition identity is an identity value for a parent condition object that the condition object references, if any. An operand is a value that identifies one or more keywords, and\/or one or more condition identities (in the case where the operand references one or more conditions). An operator is a value that identifies a logical operator for the condition. A published value is a value that identifies whether the referenced rule (and thus, the condition) has been published.","In accordance with the embodiment, the rule object can reference an online service account object, where an online service account object represents an account for an online service of the corresponding rule. An online service account object is comprised of one or more attributes. In one example, an online service account object comprises the following attributes: an online service account identity, an online service identity, a username, an API key, an application name, and an authentication identity. According to the example, an online service account identity is an identity value for the online service account object. An online service identity is an identity value for an online service object that corresponds to the online service account object, where the online service object defines one or more attributes that identify an online service associated with the rule. A user name is a value that identifies a user name associated with the online service account. An API key is a value that identifies an API secret key associated with the online service account. An application name is a value that identifies a name of an application associated with the online service account. An authorization identity is an identity value for an authorization object that corresponds to the online service account object, where the authorization object defines one or more attributes that identify an authorization protocol associated with the online service account, if any.","According to the embodiment, the online service account object can reference an online service object, where an online service object represents an online service of the corresponding rule. An online service object is comprised of one or more attributes. In one example, an online service object comprises the following attributes: an online service identity; an online service name; a logo; an online service uniform resource locator (\u201cURL\u201d); a character limit; and a user profile URL. An online service identity is an identity value for the online service object. An online service name is a value that identifies a name of the online service. A logo is a value that identifies a URL of a logo, where the logo can be displayed within a user interface to represent the online service. An online service URL is a value that identifies a URL of the online service. A character limit is a value that identifies a character limit associated with the online service. A user profile URL is a value that identifies a URL of a user profile that is associated with the online service.","In accordance with the embodiment, the online service account object can also reference an authorization object, where an authorization object represents an authorization protocol that can be utilized by the online service. An example of an authorization protocol is the Open Authorization (\u201cOAuth\u201d) protocol. An authorization object is comprised of one or more attributes. In one example, an authorization object comprises the following attributes: an authorization identity; a consumer public key, a consumer secret, an online service key, and an online service secret. An authentication identity is an identity value for the authentication object. A consumer public key is a value that identifies a public key that is assigned to a consumer of an online service. A consumer secret is a value that identifies a secret that is assigned to the consumer of the online service. An online service key is a value that identifies a service key that is assigned by the online service. An online secret is a value that identifies a secret that is assigned by the online service.","A rule object, and any corresponding objects (such as a condition object, an online service account object, an online service object, an authorization object, or a combination therein), can be stored in a database of the system. In one example embodiment, the tables of the database are as follows:",{"@attributes":{"id":"p-0046","num":"0045"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Database Table for Rule Object: Rule"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Key","Name","Type","Size","Comment"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["YES","rid","BIGINT",{},"Rule identity"]},{"entry":[{},"uoid","BIGINT",{},"Online service account"]},{"entry":[{},{},{},{},"identity"]},{"entry":[{},"Since_id","BIGINT",{},"Message identity of last"]},{"entry":[{},{},{},{},"retrieved message"]},{"entry":[{},"Network","varchar",{},"Online service name"]},{"entry":[{},"Name","varchar","20","Rule name"]},{"entry":[{},"groupname","varchar","20","Group name"]},{"entry":[{},"department","int",{},"Department name"]},{"entry":[{},"Enabled","Boolean",{},"Rule enabled\/disabled"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0047","num":"0046"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Database Table for Condition Object: Condition"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Key","Name","Type","Size","Comment"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"28pt","align":"char","char":"."}},{"@attributes":{"colname":"5","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["YES","cid","Double",{},"Condition identity"]},{"entry":[{},"rid","Double",{},"Rule identity"]},{"entry":[{},"Parent_cid","uInt",{},"Parent condition identity"]},{"entry":[{},{},{},{},"(value of 0 if root"]},{"entry":[{},{},{},{},"condition)"]},{"entry":[{},"operand","varchar","255","List of keywords or"]},{"entry":[{},{},{},{},"condition identities"]},{"entry":[{},{},{},{},"separated by \u2018|\u2019"]},{"entry":[{},"operator","varchar","5","\u201cAND\u201d or \u201cOR\u201d or \u201cNOT\u201d"]},{"entry":[{},{},{},{},"or \u201cNULL\u201d"]},{"entry":[{},"Published","Boolean",{},"True if rule has been"]},{"entry":[{},{},{},{},"published"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0048","num":"0047"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Database Table for Online Service Account Object: OnlineServiceAccount"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"6"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Key","Name","Type","Size","Comment"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"5","align":"center","rowsep":"1"}}]},{"entry":[{},"YES","uoid","BIGINT",{},"Online service account"]},{"entry":[{},{},{},{},{},"identity"]},{"entry":[{},"YES","nid","INT",{},"Online service identity"]},{"entry":[{},{},"username","varchar","20","Username"]},{"entry":[{},{},"apiKey","varchar","50","API secret key"]},{"entry":[{},{},"appId","varchar","20","Application identity"]},{"entry":[{},{},"authId","INT",{},"Authentication identity"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"5","align":"center","rowsep":"1"}}]}]}}]}}},{"@attributes":{"id":"p-0049","num":"0048"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Database Table for Online Service Object: OnlineService"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Key","Name","Type","Size","Comment"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"28pt","align":"char","char":"."}},{"@attributes":{"colname":"5","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["YES","Nid","INT",{},"Online service identity"]},{"entry":[{},"Name","Varchar","15","Online service name"]},{"entry":[{},"Logo","Varchar","100","Logo URL"]},{"entry":[{},"serviceUrl","Varchar","100","Online service URL"]},{"entry":[{},"charLimit","Int","10","Character limit for online"]},{"entry":[{},{},{},{},"service (value of 0 if no"]},{"entry":[{},{},{},{},"limit)"]},{"entry":[{},"UserProfileUrl","Varchar","100","Base URL to access a"]},{"entry":[{},{},{},{},"user profile for online"]},{"entry":[{},{},{},{},"service"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0050","num":"0049"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Database Table for Authorization Object: Authorization"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Key","Name","Type","Size","Comment"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["YES","authId","BIGINT",{},"Authorization identity"]},{"entry":[{},"Consumer_key","Varchar","132","Public consumer key"]},{"entry":[{},"Consumer_secret","Varchar","132","Secret assigned to"]},{"entry":[{},{},{},{},"consumer"]},{"entry":[{},"Access_key","Varchar","132","Key assigned by online"]},{"entry":[{},{},{},{},"service"]},{"entry":[{},"Access_secret","Varchar","132","Secret assigned by"]},{"entry":[{},{},{},{},"online service"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 5","b":["500","500","500"]},"In one embodiment, when an administrator creates a rule, a user interface is displayed that is similar to user interface  of . Furthermore, when an administrator edits a rule, a user interface that is similar to user interface  of  is also displayed, but user interface  is pre-populated with the attributes and the conditions defined for the rule. The user interface allows for the creating and modifying of the attributes and the conditions of the rule, as previously described. When a rule is created or modified, the rule is saved, a corresponding rule object is saved to a database, and a provisioning message is transmitted to a service dispatcher as previously described. When a condition is created or modified, the condition is saved, and a corresponding condition object is saved to the database, as previously described. In one embodiment, any condition that is saved is not published until the rule is also saved and published.","Furthermore, when a rule is enabled, a provisioning message that includes a start operation is transmitted to a service dispatcher. Likewise, when a rule is disabled, a provisioning message that includes a stop operation is transmitted to the service dispatcher. When a rule is copied, the existing rule, along with its one or more conditions, is duplicated, and the duplicate rule is disabled. Furthermore, when a rule is deleted, the rule, along with its one or more conditions, is erased, and a provisioning message that includes a stop operation is transmitted to the service dispatcher. Provisioning messages that can be transmitted to the service dispatcher by the rules engine are described below in greater detail.","In one embodiment, a system can include a service dispatcher (such as service dispatcher  of ). The service dispatcher performs the monitoring of the online services based on one or more rules defined by a rules engine, and provides an interface between the online services and an agent console, where the service dispatcher retrieves messages broadcast within the online services, and provides them to the agent console utilizing a chat session that is based on a chat protocol. The service dispatcher can also receive messages created by the agent console utilizing the chat session and transmit them to users of the online services. Specifics of a service dispatcher are now described in greater detail.","According to an embodiment, when a service dispatcher is initiated, the service dispatcher can query a database of the system for all rules that have been defined by a rules engine. For example, the service dispatcher can query the Rule database table previously described and identify one or more rules stored within the Rule database table. For each rule that has been defined, the service dispatcher can monitor an online service based on the rule.","Furthermore, according to the embodiment, when a rules engine creates or modifies a rule after the service dispatcher has initiated, the rules engine transmits a provisioning message to the service dispatcher. In one embodiment, the provisioning message includes a start or stop operation that can be used to create or delete an instance of a line driver process associated with an online service. Furthermore, in one embodiment, the start or stop operation is an American Standard Code for Information Interchange (\u201cASCII\u201d) string, where the ASCII string can be used to create or delete an instance of a line driver process. A line driver process is described below in greater detail.","According to the embodiment, the service dispatcher can listen for a provisioning message on a port. As an example, a provisioning message may include an ASCII string using a format: <rid>|<operation>, where rid represents a rule identity for a rule that is being operated on, and operation represents either \u201cSTART\u201d or \u201cSTOP.\u201d For example, a provisioning message may include the string \u201c12345|START,\u201d where 12345 is the rule identity, and START is the operation. When the service dispatcher receives the ASCII string, the service dispatcher can take appropriate action based on the operation in the ASCII string. This appropriate action can include creating an instance of a line driver process if the operation in the ASCII string is \u201cSTART,\u201d or deleting an instance of a line driver process if the operation in the ASCII string is \u201cSTOP.\u201d A line driver process is described below in greater detail.","According to the embodiment, the service dispatcher can monitor an online service for one or more messages broadcast within the online service that satisfy the one or more conditions of the rule. When the service dispatcher identifies and selects a message broadcast within the online service, the service dispatcher can transform the message into a format appropriate for a chat session based on a chat protocol that itself is based on an API. The service dispatcher can then subsequently transmit the transformed message to an agent console using the chat session. Furthermore, the service dispatcher can receive a responding message from the agent console using the chat session. The service dispatcher can transform the responding message into a format appropriate for the online service, and can transmit the responding message within the online service. In one embodiment, the service dispatcher can transform the message into an XML format, where the XML format is used by a chat session. An example XML format is shown below:",{"@attributes":{"id":"p-0059","num":"0058"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Message>"]},{"entry":[{},"\u2003\u2003\u2003<OnlineService><\/OnlineService>"]},{"entry":[{},"\u2003\u2003\u2003<ID><\/ID>"]},{"entry":[{},"\u2003\u2003\u2003<Length><\/Length>"]},{"entry":[{},"\u2003\u2003\u2003<Contributor><\/Contributor>"]},{"entry":[{},"\u2003\u2003\u2003<Subject><\/Subject>"]},{"entry":[{},"\u2003\u2003\u2003<Content><\/Content>"]},{"entry":[{},"\u2003\u2003\u2003<Tags><\/Tags>"]},{"entry":[{},"<\/Message>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},{"@attributes":{"id":"p-0060","num":"0059"},"figref":["FIG. 6","FIG. 2","FIG. 6"],"b":["600","600","220","600","610","610","600","610","610","600","610","610"]},"In one embodiment, abstraction layer  includes a Send( ) interface that formats and sends a message to a specific online service, and a Crawler( ) interface that takes a rule as an input, builds one or more conditions for that rule, and initiates a monitoring of the online service based on the rule, and the one or more conditions, using a line driver process. According to the embodiment, the monitoring continues until the rule is deleted or disabled.","In the embodiment, abstraction layer  creates and manages one or more processes to perform various functionality. Such processes are now described in greater detail.","According to the embodiment, abstraction layer  creates and manages one or more monitoring registration processes. In the illustrated embodiment of , the one or more monitoring registration processes are represented by monitoring registration process . However, one of ordinary skill in the relevant art would readily appreciate that the number of monitoring registration processes illustrated in  is merely an example number of monitoring registration processes, and that abstraction layer  can create and manage any number of monitoring registration processes.","In one embodiment, monitoring registration process  queries a database of the system for all rules that have been defined by a rules engine. For example, monitoring registration process  can query the Rule database table previously described and identify one or more rules stored within the Rule database table. For each rule that has been defined, monitoring registration process  causes abstraction layer  to create an instance of a line driver process. The instance of the line driver process then monitors an online service based on the rule.","Furthermore, according to the embodiment, when a rules engine creates or modifies a rule after monitoring registration process  has been created, monitoring registration process  listens for a provisioning message on a port. As previously described, in an example, a provisioning message may include an ASCII string using a format: <rid>|<operation>, where rid represents a rule identity for a rule that is being operated on, and operation represents either \u201cSTART\u201d or \u201cSTOP.\u201d When monitoring registration process  receives the ASCII string, monitoring registration process  causes abstraction layer  to take appropriate action based on the operation in the ASCII string. This appropriate action can include creating an instance of a line driver process if the operation in the ASCII string is \u201cSTART,\u201d or deleting an instance of a line driver process if the operation in the ASCII string is \u201cSTOP.\u201d","Abstraction layer  also creates and manages one or more line driver processes. In the illustrated embodiment of , the one or more line driver processes are represented by line driver processes , , , and .","According to an embodiment, line driver processes , , , and  are each instances of a line driver class, running in a process, that include program code that provides an implementation of the Send( ) interface and the Crawler( ) interface defined by abstraction layer . Each line driver process of line driver processes , , , and  are associated with an online service, and each line driver process can interface with an API of the online service. Thus, each line driver process can receive a rule that corresponds to the associated online service from monitoring registration process , and can monitor the online service based on the rule. Once each line driver process identifies and selects a message broadcast within the online service based on the rule, each line driver process forwards the message to abstraction layer . In addition, upon receiving a response message from abstraction layer , one line driver process of line driver processes , , , and  transforms the response message into a response message with a format appropriate for the corresponding online service, and broadcasts the formatted response message within the online service.","Furthermore, according to the embodiment, abstraction layer  creates and manages one or more agent console processes. In the illustrated embodiment of , the one or more agent console processes are represented by agent console transmission process , agent console reception process , and agent console URL shortening process . In one embodiment, a single process performs the functionality performed by transmission process , agent console reception process , and agent console URL shortening process , where the functionality is described below in greater detail.","According to an embodiment, when a line driver process (such as line driver processes , , , and ) transmits a message that has been broadcast within an online service to abstraction layer , abstraction layer  creates agent console transmission process  to interface with an agent console, and transmits the message to agent console transmission process . Agent console transmission process  receives the message, establishes a chat session with the agent console based on a chat protocol that itself is based on an API, and transforms the message into a message with a format appropriate for the chat session with the agent console. Agent console transmission  subsequently transmits the formatted message within the chat session to the agent console.","In the embodiment, when the agent console transmits a response message, agent console reception process  receives the response message and transmits the response message to abstraction layer , where abstraction layer  forwards the response message to the appropriate line driver process (i.e., one of line driver processes , , , or ) for formatting and transmission.","In one embodiment, where the response message includes one or more URLs, the response message is also forwarded to agent console URL shortening process . Agent console URL shortening process  shortens the one or more URLs within the response message using a URL shortening service. In an embodiment, the URL shortening service is a bit.ly URL shortening service.","Thus, in one embodiment, service dispatcher  establishes a bidirectional communication channel between an author of a message broadcast within an online service, and a user of the system that utilizes an agent console of the system, where messages can be transmitted and received. This bidirectional communication is described in greater detail in relation to .",{"@attributes":{"id":"p-0073","num":"0072"},"figref":["FIG. 7","FIG. 7"],"b":["700","710","720","730","740"]},"According to an embodiment, online service layer  represents an online service that is monitored by the service dispatcher. A message that is broadcast within online service layer  can be forwarded to abstract layer  using the bidirectional communication channel.","In the embodiment, abstraction layer  represents a process that abstracts the implementation details of one or more online services, so that other layers do not require knowledge of the implementation details. In one embodiment, abstraction layer  is identical to abstraction layer  of . A message that is forwarded to abstraction layer  from online service layer  can be transformed into a message with a format that is recognizable by abstraction layer , so that the message can be understood by other layers. Subsequently, the formatted message can be forwarded to client interface API layer  using the bidirectional communication channel.","In the embodiment, client interface API layer  represents an API that can be used to create a chat session. The formatted message can be further transformed into a formatted message with a format that is recognizable by chat protocol layer . Subsequently, the formatted message can be forwarded to chat protocol layer  using the bidirectional communication channel.","In the embodiment, chat protocol layer  represents a chat protocol that can be used to create a chat session. The formatted message can be further transformed into a formatted message with a format that is recognizable by integration panel layer . Subsequently, the formatted message can be forwarded to integration panel layer  using the bidirectional communication channel.","In the embodiment, integration panel layer  represents an integration panel, which is a component of an agent console. The formatted message can be displayed to a user within a user interface of the integration panel.","As the communication channel is bidirectional, a user can create a response message within a user interface of the integration panel to an author of the original message broadcast within online service layer . According to the embodiment, the response message can be forwarded from integration panel layer  to chat protocol layer , to client interface API layer , to abstraction layer , and to online service layer , in an order that is reversed from the order previously described. In this embodiment, the response message can be formatted as appropriate. Thus, chat protocol layer  can transform the response message into a response message with a format recognizable by client interface API layer , client interface API layer  can transform the formatted response message into a formatted response message with a format recognizable by abstraction layer , and abstraction layer  can transform the formatted response message into a formatted response message with a format recognizable by online service layer .","In one embodiment, a system can include an agent console (such as agent console  of ), where the agent console can establish a chat session (such as chat session  of ). An agent console allows a user of the system to receive the messages broadcast within the online services that are retrieved by a service dispatcher. In one embodiment, the agent console can perform this function by displaying the messages broadcast within the online services in a user interface. The agent console also allows a user of the system to transmit response messages that can be broadcast within the online services by the service dispatcher. In one embodiment, the agent console can perform this function by displaying a chat session within the user interface. The chat session can be established by the service dispatcher, based on a chat protocol, where the chat session can be utilized to transmit messages to and from the agent console.",{"@attributes":{"id":"p-0081","num":"0080"},"figref":"FIG. 8","b":["800","800","810","810","800","810","810","810"]},"Integration panel  also includes chat window , in accordance with the embodiment. Chat window  displays a chat session that has been established, where the message broadcast within the online service is transmitted within the chat session, and displayed within chat window . In an embodiment, chat window  displays the message broadcast within the online service as an initial message of the displayed chat session. In one embodiment, chat window  also displays a handle of the author of the message broadcast within the online service, as the handle is displayed within the online service. According to an embodiment, the chat session is established for a dedicated department that is set as an attribute of the rule that the message is based upon.","In one embodiment, chat window  also displays the following data: a handle of the author of the message broadcast within the online service; a name of the online service; a rule identity of the rule that the message is based upon; and the message broadcast within the online service.","In one embodiment, chat window  can also transmit a response message to an author of the message broadcast within the online service. Integration panel  can be used to create the response message, as is now described in greater detail.","According to the embodiment, integration panel  includes text field . Text field  allows a user to enter text for a response message. As the text is entered, the text is displayed within text field . In the embodiment, the text can be inserted into the response message that is transmitted to an author of the message displayed within integration panel . According to the embodiment, text field  can also display a numeric value. The numeric value serves as a counter that can be established depending on whether a character limitation exists for the corresponding online service.","Integration panel  also includes URL shortening field , in accordance with the embodiment. URL shortening field  allows a user to enter a URL for a response message. The URL is then shortened using a URL shortening service, such as the bit.ly URL shortening service. The shortened URL is then inserted into text field , as part of the text that is eventually inserted into the response message.","According to the embodiment, integration panel  also includes escalation field . Escalation field  can be used when the user wishes to establish an external communication between the author of the message broadcast within the online service and either the user, or a different department. Examples of external communications include an Internet chat communication, a telephone communication, and an email communication. In the embodiment, if the user wishes to establish an external communication with an author of a message broadcast within an online service, the user can select a communication type within escalation field . This can cause a URL to be inserted into the response message that is transmitted to an author of the message displayed within integration panel . The URL can be a link that establishes an Internet chat communication, a link that establishes a telephone communication, a link that establishes an email communication, or a link that establishes another type of communication, depending on the communication type selected. In an embodiment, when the author of the message accesses the URL, integration panel  can receive the following data: a handle of the author of the message; an indication that an external communication is requested; an online service name; an identity of the user who originally responded to the message; a user name of the user who originally responded to the message, an incident number associated with the message; and the message.","Furthermore, according to the embodiment, the user can determine whether the URL that establishes an external communication should be routed to the user, or routed to a different department, by selecting a destination type within escalation field . The URL is then inserted into text field , as part of the text that is eventually inserted into the response message. In one embodiment, in addition to inserting the URL into the response message, a timestamp is also inserted into the response message. This effectively allows the URL to expire if the URL is not accessed within a predefined time duration subsequent to the timestamp.","According to the embodiment, once a user has created a response message using text field , URL shortening field , escalation field , or a combination therein, a user can click on a send button displayed within integration panel  using a cursor control device, such as a computer mouse. Upon the user clicking on the send button displayed within integration panel , the response message is displayed within chat window . Once the response message is displayed within chat window , a user can click on a send button displayed within chat window . Upon the user clicking on the send button displayed within chat window , the response message is transmitted to a service dispatcher by the agent console, where the service dispatcher transmits the response message with the online service to the author of the original message, as previously described.",{"@attributes":{"id":"p-0090","num":"0089"},"figref":["FIG. 9","FIG. 9"]},"At , an online service is monitored based on a rule that includes one or more conditions. In one embodiment, the rule is defined by a rules engine and stored within a database. According to an embodiment, the one or more conditions are keyword conditions. In an alternate embodiment, the one or more conditions are sentiment conditions. In yet another alternate embodiment, the one or more conditions are a combination of keyword conditions and sentiment conditions. In one embodiment, the online service is a social networking service. In an alternate embodiment, the online service is a text messaging service. In yet another embodiment, the online service is an instant messaging service. In one embodiment, a line driver process, that is created by an abstraction layer, performs the monitoring of the online service, while a monitoring registration process, also created by the abstraction layer, receives a provisioning message that includes the rule.","At , an online service message that has been broadcast within the online service, and that satisfies at least one condition of the rule, is selected. In one embodiment, the business logic of the at least one condition defines which online service messages broadcast within the online service are to be identified and selected. In an embodiment where the at least one condition is a keyword condition, an online service message that includes text that satisfies the at least one keyword condition is selected. In an embodiment where the at least one condition is a sentiment condition, an online service message that includes text that satisfies the at least one sentiment condition is selected. In an embodiment, the line driver process, created by the abstraction layer, performs the selection of the online service message.","At , the online service message is assigned to a logical grouping of one or more agents based on the rule. In one embodiment, an agent within the logical grouping of one or more agents manually selects the online service message. In an alternate embodiment, the online service message is automatically assigned to an agent within the logical grouping of one or more agents.","At , a chat session is created. In one embodiment, the chat session is created based on a chat protocol. According to the embodiment, the chat session is displayed within a chat window that is displayed within a user interface of an agent console. In an embodiment, the abstraction layer creates the chat session.","At , the online service message is transformed into a chat session message. In one embodiment, this transformation includes transforming a format of the online service message into a format that is appropriate for the chat session. In an embodiment, the abstraction layer transforms the chat session message.","At , the chat session message is transmitted within the chat session to an agent console associated with the logical grouping of one or more agents. In one embodiment, the chat session message is displayed within a chat window that is displayed within a user interface of the agent console. In an embodiment, an agent console transmission process, created by the abstraction layer, transmits the chat session message within the chat session to the agent console.","In one embodiment, a second chat message is received within the chat session. This second chat message can be created at the agent console. In an embodiment, an agent console reception process, created by the abstraction layer, receives the second chat message within the chat session. The second chat message is then transformed into a second online service message. In one embodiment, this transformation includes transforming a format of the second chat message into a format that is appropriate for the online service. In an embodiment, a line driver process, created by the abstraction layer, transforms the second chat message into the second online service message. The second online service message is then broadcast within the online service. In an embodiment, the line driver process, created by the abstraction layer, broadcasts the second online service message within the online service.","In accordance with an embodiment, a computer-readable medium, computer-implemented method, and system is provided for automatically monitoring online services and responding to messages broadcast within the online services. Thus, according to the embodiment, users of the system, such as call center agents, do not need to be trained regarding the specific implementation details of various online services, such as social networking services. Rather, the process of monitoring online services is automated, and users of the system can focus on providing substantive responses to vocal dissatisfied customers. Additionally, the system can target specific messages based on rules, and users of the system can avoid wading through a staggering amount of irrelevant noise broadcast within the online services. By giving control of how the rules are defined to administrators of the system, a systematic monitoring strategy can be applied, rather than various ad-hoc monitoring techniques performed at the user level. Furthermore, the system can be updated for new online services, without changing how the users interact with the system. This allows the system to scale as new online services are created, and an increasing number of messages are monitored. Finally, the system can leverage a chat session platform, and thus, provide a streamlined, controlled, and efficient response mechanism to messages broadcast within the online services.","The features, structures, or characteristics of the invention described throughout this specification may be combined in any suitable manner in one or more embodiments. For example, the usage of \u201cone embodiment,\u201d \u201csome embodiments,\u201d \u201ccertain embodiment,\u201d \u201ccertain embodiments,\u201d or other similar language, throughout this specification refers to the fact that a particular feature, structure, or characteristic described in connection with the embodiment may be included in at least one embodiment of the present invention. Thus, appearances of the phrases \u201cone embodiment,\u201d \u201csome embodiments,\u201d \u201ca certain embodiment,\u201d \u201ccertain embodiments,\u201d or other similar language, throughout this specification do not necessarily all refer to the same group of embodiments, and the described features, structures, or characteristics may be combined in any suitable manner in one or more embodiments.","One having ordinary skill in the art will readily understand that the invention as discussed above may be practiced with steps in a different order, and\/or with elements in configurations which are different than those which are disclosed. Therefore, although the invention has been described based upon these preferred embodiments, it would be apparent to those of skill in the art that certain modifications, variations, and alternative constructions would be apparent, while remaining within the spirit and scope of the invention. In order to determine the metes and bounds of the invention, therefore, reference should be made to the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Further embodiments, details, advantages, and modifications will become apparent from the following detailed description of the preferred embodiments, which is to be taken in conjunction with the accompanying drawings.",{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 9"}]},"DETDESC":[{},{}]}
