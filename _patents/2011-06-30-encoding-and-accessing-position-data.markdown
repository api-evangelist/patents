---
title: Encoding and accessing position data
abstract: In one embodiment, a data structure comprises: a primary index comprising one or more position-block references; and one or more position blocks sequentially following the primary index, wherein: each one of the position-block references corresponds to one of the position blocks; and each one of the position blocks comprises: a secondary index comprising one or more position-data references; and one or more sets of positions sequentially following the secondary index, wherein each one of the position-data references corresponds to of one of the sets of positions in the position block. In one embodiment, an instance of the data structure is stored in a computer-readable memory and accessible by an application executed by a process.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09507827&OS=09507827&RS=09507827
owner: EXCALIBUR IP, LLC
number: 09507827
owner_city: Sunnyvale
owner_country: US
publication_date: 20110630
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATION DATA","TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This application is a continuation of U.S. patent application Ser. No. 12\/731,458 filed Mar. 25, 2010, the entirety of which is incorporated herein by reference to the extent permitted by law.","The present disclosure generally relates to encoding and accessing token position data in an inverted index.","In the context of computer science, an inverted index, also referred to as postings file or inverted file, is an index data structure for storing a mapping from content (e.g., words or numbers) to its locations or positions in a database file, a document, or a set of documents. The purpose of an inverted index is to allow fast full text searches, albeit at a cost of increased processing when a document is added to the database. It is the most popular data structure used in document retrieval systems.","One of the applications for an inverted index is in the field of network search engines. The Internet provides a vast amount of information. The individual pieces of information are often referred to as \u201cnetwork resources\u201d or \u201cnetwork content\u201d and may have various formats, such as, for example and without limitation, texts, audios, videos, images, web pages, documents, executables, etc. The network resources are stored at many different sites, such as on computers and servers, in databases, etc., around the world. These different sites are communicatively linked to the Internet through various network infrastructures. Any person may access the publicly available network resources via a suitable network device (e.g., a computer, a smart mobile telephone, etc.) connected to the Internet.","However, due to the sheer amount of information available on the Internet, it is impractical as well as impossible for a person to manually search throughout the Internet for specific pieces of information. Instead, most people rely on different types of computer-implemented tools to help them locate the desired network resources. One of the most commonly and widely used computer-implemented tools is a search engine, such as the search engines provided by Microsoft\u00ae Inc. (http:\/\/www.bing.com), Yahoo!\u00ae Inc. (http:\/\/search.yahoo.com), and Google\u2122 Inc. (http:\/\/www.google.com). To search for information relating to a specific subject matter or topic on the Internet, a person typically issues a short phrase or a few keywords, which may be words or numbers, describing the subject matter, often referred to as a \u201csearch query\u201d or simply \u201cquery\u201d, to a search engine. The search engine conducts a search based on the search query using various search algorithms and generates a search result that identifies network resources that are most likely to be related to the search query. The network resources are presented to the person, often in the form of a list of links, each link being associated with a different network document (e.g., a web page) that contains some of the identified network resources.","The network documents may each include any number of words or numbers or symbols, and each word or number or symbol may be referred to as a token. An inverted index may be used to store a mapping from the tokens in the network documents to their positions in the network documents. Upon receiving a search query from a person, a search engine uses an inverted index to determine which network documents contain all or most or some of the query keywords. This improves the speed of the search process. Typically, about two-thirds of an inverted index are the position data of the tokens in the documents (i.e., the individual positions of the tokens in the documents).","Sophisticated search engines implement many other functionalities in addition to merely identifying the network resources as a part of the search process. For example, a search engine usually ranks the identified network resources according to their relative degrees of relevance with respect to the search query, such that the network resources that are relatively more relevant to the search query are ranked higher and consequently are presented to a person requesting a search before the network resources that are relatively less relevant to the search query. The search engine may also provide a short summary of each of the identified network resources. There are continuous efforts to improve the qualities of the search results generated by the search engines. Accuracy, completeness, presentation order, and speed are but a few of the performance aspects of the search engines for improvement.","The present disclosure generally relates to encoding and accessing token position data in an inverted index.","In particular embodiments, a data structure comprises: a primary index comprising one or more position-block references, and one or more position blocks sequentially following the primary index. Each one of the position-block references corresponds to one of the position blocks. Each one of the position blocks comprises: a secondary index comprising one or more position-data references; and one or more sets of positions sequentially following the secondary index. Each one of the position-data references corresponds to one of the sets of positions in the position block. In particular embodiments, an instance of the data structure is used to encode the position data of a token. In particular embodiments, one or more instances of the data structure are stored in a computer-readable memory and accessible by an application executed by a process.","In particular embodiments, a method for encoding the position data of a token using an instance of the data structure comprises: accessing position data of a token for one or more documents, wherein the token appears in each one of the documents at one or more positions in the document, and the position data comprises one or more sets of positions of the token appearing in the documents; dividing the sets of positions into one or more position blocks; storing one or more position-block offsets referencing the position blocks in a primary index in the instance of the data structure; and storing the position blocks sequentially following the primary index in the instance of the data structure, wherein storing one of the position blocks comprises: storing one or more position-data lengths a secondary index of the position block, wherein each one of the position-data lengths equals a total size of one of the sets of positions in the position block; and storing the sets of positions in the position block sequentially following the secondary index.","In particular embodiments, a method for accessing the position data of a token encoded in an instance of the data structure comprises: accessing the instance of the data structure used to encode the position data of the token; and accessing one of the sets of positions corresponding to one of the documents, comprising: determining in which one of the position blocks the set of positions is stored based on an index of the document among the documents; decoding the primary index to obtain one of the position-block offsets corresponding to the position block in which the set of positions is stored; determining a first memory location at the beginning of the position block in which the set of positions is stored using the corresponding one of the position-block offsets in the primary index; decoding the secondary index of the position block to obtain one or more of the position-data lengths corresponding to one or more of the sets of positions within the position block from the first one of the sets of positions to the set of positions; determining a second memory location at the beginning of the set of positions using the one or more of the position-data lengths; and decoding the set of positions starting at the second memory location to obtain the positions at which the token appears in the document.","These and other features, aspects, and advantages of the disclosure are described in more detail below in the detailed description and in conjunction with the following figures.","The present disclosure is now described in detail with reference to a few embodiments thereof as illustrated in the accompanying drawings. In the following description, numerous specific details are set forth in order to provide a thorough understanding of the present disclosure. It is apparent, however, to one skilled in the art, that the present disclosure may be practiced without some or all of these specific details. In other instances, well known process steps and\/or structures have not been described in detail in order not to unnecessarily obscure the present disclosure. In addition, while the disclosure is described in conjunction with the particular embodiments, it should be understood that this description is not intended to limit the disclosure to the described embodiments. To the contrary, the description is intended to cover alternatives, modifications, and equivalents as may be included within the spirit and scope of the disclosure as defined by the appended claims.","A document may include any number of words or numbers, and each word or number may be referred to as a \u201ctoken\u201d. Thus, a document may include any number of tokens. In general, an inverted index is a data structure that may be used to map individual tokens in a set of documents to their positions in the set of documents. Let D={d, . . . , d} denote a set of documents, where nis the total number of documents in D such that n\u22671, and d\u03b5D. Each document, d, contains a set of tokens. In particular embodiments, a token may be alphanumerical and may include any number of alphabetical letters or numerical digits or a combination of both. In particular embodiments, each document, d, may be assigned a unique identifier within the set, with which the document may be identified or referenced. Let W={w, . . . , w} denote a set of distinct tokens that appear in all of the documents in D, where nis the total number of distinct tokens contained in all of the documents in D such that n\u22671, and w\u03b5W. Note that a given token, w, may appear in any number of documents and within a given document, d, wmay appear any number of times.","For a token wthat appears in a document d, the positions of wwithin dmay be determined. In particular embodiments, for a given token, its positions in a given document is the number of tokens at which it appears in the document counting from the beginning (i.e., the first token) of the document. For example, the position of the first token in a document is one; the position of the second token in a document is two; and the position of the nth token in a document is n. Consequently, for each token in W that appears in any number of the documents in D, its positions in each one of the documents in which it appears may be determined. An inverted index may be used to record the positions of all of the tokens in all of the documents in which they appear respectively.","With software programming convention, indexing often begins with 0 instead of 1. Following this convention, the first element in a set or an array has index 0; the second element has index 1; and so on. If the software programming convention is applied to referencing the positions of the tokens in a document, then the position of the first token in the document is 0; the position of the second token in the document is 1; and so on. However, although particular embodiments of the present disclosure may be implemented as computer software, these embodiments are described without following the software programming convention with respect to the indexing scheme. That is, in the present disclosure, all indexing beings with 1, not 0.","Applying the inverted index to network search, suppose the set of documents, D, includes various types of documents on a network (e.g., the Internet), such as, for example and without limitation, web pages, Microsoft Token documents, text documents, or Adobe Portable Document Format (PDF) documents. Each network document includes a set of tokens. An inverted index may be used to record the positions of all the distinct tokens within all of the network documents in which they appear.","For example, suppose a particular token, w, appears in four documents, d, d, d, and d, in D. Further suppose that wappears twice in dat positions 13 and 92, once in dat position 6, three times in dat positions 55, 67, and 201, and twice in dat positions 41 and 137. Note that only four documents and small numbers of positions are used to simplify the discussion. In practice, a token may appear in any number of documents and any number of times in each document. Then for w, its positions in the four documents in which it appears are: 13, 92, 6, 55, 67, 201, 41, 137. In particular embodiments, the positions of a token in all the documents in which it appears are ordered according to the document order within the document set and the appearance order within each document. For example, because dhas a smaller index than din D, the positions of win d(i.e., 13 and 92) are placed in front of the positions of win d(i.e., 6).","In particular embodiments, for a given token, all the positions of the token from all the documents in which the token appears (e.g., positions 13, 92, 6, 55, 67, 201, 41, and 137 for w) is called the \u201cposition data\u201d of that token. Similarly, for a given token and a given document in which the token appears, all the positions of the token in that document (e.g., positions 13 and 92 for wand d) is called the position data of the token for that document. In particular embodiments, the position data of all the distinct tokens in a set of documents form the inverted index for the set of documents.","By examining and comparing the position data of the individual tokens, particular embodiments may determine, within each document, which tokens are located relatively closely to each other and which tokens are located relatively far apart from each other. In other words, the position data of the tokens indicate, within a document, which tokens are adjacent to each other. For example, suppose another token, w, appears in three documents, d, dand d. Further suppose that wappears twice in dat positions 202 and 359, three times in dat position 43, 55, and 172, and twice in dat positions 56 and 64. The position data of wthus includes 202, 359, 43, 55, 172, 56, and 64. By examining and comparing the documents in which wand weach appear and the position data of wand w, particular embodiments may determine that: (1) wand wboth appear in dand d; (2) in d, wand ware located relatively far apart from each other (wappears at position 6, but wappears at positions 202 and 359); and (3) in d, wand ware located relatively closely to each other in two instances (wappears at positions 55 and 67, and wappears at positions 56 and 64, respectively).","In the context of network search, given a search query that includes any number of tokens, a search engine may examine the position data of each or some of the query tokens to determine which network documents contain all or most or some of the query tokens. For example, if a network document contains all or most of the query tokens, then the search engine may consider that network document to be relatively more relevant to the search query. On the other hand, if a network document contains only some or a few of the query tokens, then the search engine may consider that network document to be relatively less relevant to the search query. In addition, the search engine may examine the proximity of the query tokens within a network document. For example, if a network document contains all of the query tokens and they are located relatively closely to each other within the network document, then the search engine may consider that network document to be relatively more relevant to the search query. On the other hand, if a network document contains all of the query tokens but they are located relatively far apart from each other within the network document, then the search engine may consider that network document to be relatively less relevant to the search query.","In practice, there are billions of network documents on the Internet, and each network document may contain hundreds or thousands of tokens. More and more new network documents become available as time passes. A particular token, especially a commonly used token, may appear in thousands or millions of different network documents and many times within each network document, which means the position data of the token may be very large and contain many positions in many network documents. An inverted index may include at least the position data of most of the distinct tokens contained in most of the network documents. Needless to say, storing such a large amount of position data takes a large amount of storage space. A search query often includes multiple query tokens, causing a search engine to access and process the position data of multiple tokens. Consequently, it is important to determine efficient means to store and access an inverted index (i.e., the position data of the tokens).",{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 1","b":["100","100"],"sub":["j","j "]},{"@attributes":{"id":"p-0030","num":"0029"},"maths":{"@attributes":{"id":"MATH-US-00001","num":"00001"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":{"msup":{"mi":["D","j"]},"mo":"=","mrow":{"mo":["{","}"],"mrow":{"msubsup":[{"mi":["d","j"],"mn":"1"},{"mi":["d","j"],"msup":{"mi":"n","msup":{"mi":["D","j"]}}}],"mo":[",","\u2062",","],"mi":"\u2026","mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}}}},"mo":","}}},"br":{},"sup":["D",{"sup2":"j "},"j ","D",{"sup2":"j"},"D","j ","j","j","j","j ","j"],"u":"\u2282","sub":["i","j ","j ","i","j ","i"]},{"@attributes":{"id":"p-0031","num":"0030"},"maths":{"@attributes":{"id":"MATH-US-00002","num":"00002"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"msup":{"mi":"P","mrow":{"mi":["j","i"],"mo":","}},"mo":"=","mrow":{"mo":["{","}"],"mrow":{"msubsup":[{"mi":"p","mn":"1","mrow":{"mi":["j","i"],"mo":","}},{"mi":"p","msup":{"mi":"n","msup":{"mi":"P","mrow":{"mi":["j","i"],"mo":","}}},"mrow":{"mi":["j","i"],"mo":","}}],"mo":[",","\u2062",","],"mi":"\u2026","mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}}}}}},"br":{},"sub":["1 ","i","j ","i","j ","i","j ","j "],"sup":["j","j ","P",{"sup2":"j,i"},"j,i ","j","j","j,1"]},{"@attributes":{"id":"p-0032","num":"0031"},"maths":{"@attributes":{"id":"MATH-US-00003","num":"00003"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"msup":{"mi":"P","mrow":{"mi":"j","mo":",","msup":{"mi":"n","msup":{"mi":["D","j"]}}}},"mo":"."}}},"br":{},"sup":["D",{"sup2":"j "},"j","D",{"sup2":"j "}],"sub":"j "},"In particular embodiments, the position data of w(i.e., the nsets of positions) are divided into a number of blocks, where each block includes the same number of sets of positions, with the exception of the last block possibly including less number of sets of positions. The blocks may each include any number of sets of positions (e.g., 8, 16, or 24 sets of positions per block). In particular embodiments, each block may include sixteen sets of positions corresponding to sixteen of the documents in D. That is, the first block includes the first sixteen sets of positions corresponding to documents one to sixteen from D(i.e., the first sixteen documents in which wappears); the second group includes the second sixteen sets of positions corresponding to documents seventeen to thirty-two from D(i.e., the second sixteen documents in which wappears); and so on. Thus, there are a total of \u250cn\/16\u2510 blocks, with each block including sixteen sets of positions. Note that if nis not divisible by 16, the last group may have less than sixteen sets of positions. Furthermore, although the present disclosure describes data structure  where each position block field  includes sixteen sets of positions, the same concept may be applied to, with appropriate computational adjustments, alternative cases where each position block field  includes different numbers of sets of positions.","In particular embodiments, data structure  may include the following fields: a \u201ctoken\u201d field , followed by a \u201cprimary index\u201d field , and followed by \u250cn\/16\u2510 number of \u201cposition block\u201d fields . In particular embodiments, token field  is for storing the token itself; that is, the token (e.g., w) for which the position data are to be encoded in the instance of data structure  is stored in token field  of the instance.","The position data of whas been divided into \u250c\/16\u2510 blocks, where nis the total number of documents in which wappears. Each block includes the position data for sixteen of the documents in which wappears (i.e., sixteen sets of positions corresponding to the sixteen documents), with the exception of the last block that may include less than sixteen sets of positions if nis not divisible by 16. Each block may be referred to as a \u201cposition block\u201d. In particular embodiments, each block of the position data of wis contained in one of position block fields . More specifically, position block  includes the position data for the first sixteen documents in which wappears; position block  includes the position data for the second sixteen documents in which wappears; and so on. Note that different instances of data structure  may have different number of position block fields , because different tokens may appear in different number of documents and thus have different number of sets of positions in their respective position data.","In particular embodiments, storing the sixteen sets of positions of each position block requires a certain amount of storage space (e.g., some number of bits). Thus, each position block field  requires a certain amount of storage space. Similarly, storing win token field  and the position-block offsets (described below) in primary index field  also requires a certain amount of storage space. In order to quickly access a particular block of position data, it may be convenient to record the beginning location (e.g., memory location) of each position block field  within an instance of data structure .","In particular embodiments, each position block field  is byte aligned. In particular embodiments, the beginning memory location of each position block field  in an instance of data structure  may be referenced as an absolute offset (e.g., in number of bytes) from the beginning memory location of the instance of data structure  to the beginning memory location of that position block field . Since each position block field  is byte aligned, the beginning memory location of each position block field  is always at a byte boundary in memory. These offsets may be referred to as \u201cposition-block\u201d offsets. In particular embodiments, primary index field  is for storing all of the position-block offsets. In the case of w, since there are a total of \u250cn\/16\u2510 position block fields , there are a total of \u250cn\/16\u2510 position-block offsets contained in primary index field . In particular embodiments, the position-block offsets may be stored as a lookup table in primary index field , with each table entry corresponding to one of the position-block offsets.","To describe data structure  more clearly, consider the token, w, that appears in D. Using an instance of data structure  to encode the position data of w, in particular embodiments, witself is stored in token field . The positions of win documents dto dare encoded in position block ; the positions of win documents dto dare encoded in position block ; and so on. Suppose it takes 6 bytes to encode w, 24 bytes to encode the position-block offsets (i.e., the primary indices), 46 bytes to encode the position block of win documents dto d, and 36 bytes to encode the position block of win documents dto d. Then, in primary index field , the first position-block offset is the absolute byte offset for position block  from the beginning memory location of the instance of data structure , which is 6+24=30; the second position-block offset is the absolute byte offset for position block , which is 6+24+46=76; the third position-block offset is the absolute byte offset for position block ; which is 6+24+46+36=112; and so on.","In particular embodiments, the position-block offsets contained in primary index field  for position block fields  may be encoded using a minimum constant-bit encoding scheme. Particular embodiments may examine all of the position-block offsets contained in primary index field  and determine the minimum number of bits necessary to represent (i.e., encode) the largest position-block offset. Then, particular embodiments may encode all of the position-block offsets in primary index field  using this same number of bits. Since this number of bits are sufficient to represent the largest position-block offset, they are also sufficient to represent the smaller position-block offsets in primary index field . With the above example for w, suppose there are three position-block offsets in primary index field : 30, 76, and 112. The largest position-block offset of the three is 112. It takes at least seven bits to represent the number 112, because the number 112 in binary form is 1110000. Thus, all three position-block offsets, 30, 76, and 112, are each encoded using seven bits. If position_len is the size, in number of bits, of the position data of a token, with the minimum constant-bit encoding scheme, each position-block offset in primary index field  may be encoded using 1+log(position_len) number of bits. Other suitable encoding schemes may be used to encode the position-block offsets in primary index field  in alternative embodiments, and the present disclosure contemplates any suitable encoding schemes.","In particular embodiments, each one of position block fields  is for storing the position data of sixteen of the documents in which the token appears. In particular embodiments, each one of position block fields  may include the following fields: a \u201csecondary index\u201d field , followed by sixteen position data fields , where each position data field  includes one set of positions of the token appearing in one of the sixteen documents within that position block field . More specifically, position data  is the positions of the token appearing in the first document within an position block field ; position data  is the positions of the token appearing in the second document within the position block field ; and so on; and position data  is the positions of the token appearing in the sixteenth document within the position block field . Note that the last position block field  (e.g., position block \u250cn\/16\u2510 in the case of w) in an instance of data structure  may not always have exactly sixteen (i.e., may have less than sixteen) position data fields .","In particular embodiments, storing a set of positions requires a certain amount of storage space (e.g., some number of bits). Thus, each position data field  requires a certain amount of storage space. The size of each position data field  may be referred to as the \u201cposition-data length\u201d of that position data field . In particular embodiments, the position-data length of each position data field  may be measured in number of bits. Similarly, storing the position-data lengths (described below) in secondary index field  also requires a certain amount of storage space. In particular embodiments, the beginning memory location of each position data field  within an position block field  may be referenced as an absolute offset (e.g., in number of bits) from the beginning memory location of that position block field  to the beginning memory location of that position data field . These offsets may be referred to as \u201cposition-data offsets\u201d. Note that in particular embodiments, each position block field  is byte aligned, and thus, the beginning memory location of a position block field  is always at a byte boundary.","In particular embodiments, information used to reference each of the position data fields  within a position block field  is stored in secondary index field  of that position block field . There are different ways to store such information in a secondary index field  of a position block field .","In particular embodiments, the position-data lengths of all of the position data fields  in a position block field  may be stored in secondary index field  of that position block field . Since there are a total of sixteen position data fields  within each position block field , with the possible exception of the last position block field , there are a total of sixteen position-data lengths contained in secondary index field . Each position-data length may be encoded using any number of bits or bytes. In particular embodiments, each position-data length contained in secondary index field  may be encoded using one byte. Thus, secondary index field  includes sixteen bytes representing sixteen position-data lengths. If there are less than sixteen position data fields  in the last position block field  in an instance of data structure , then the position-data lengths for the unused position data fields  may be set to a default number (e.g., 0) in secondary index field . In this case, secondary index field  itself requires 128 bits of storage space.","Alternatively, in other embodiments, the position-data offsets of all of the position data fields  in a position block field  may be stored in secondary index field  of that position block field . Again, since there are a total of sixteen position data fields  within each position block field , with the possible exception of the last position block field , there are a total of sixteen position-data offsets contained in secondary index field . Each position-data offset may be encoded using any number of bits or bytes. In particular embodiments, each position-data offset contained in secondary index field  is encoded using one byte. Thus, secondary index field  includes sixteen bytes representing sixteen position-data offsets. If there are less than sixteen position data fields  in the last position block field  in an instance of data structure , then the position-data offsets for the unused position data fields  may be set to a default number (e.g., 0) in secondary index field . Secondary index field  itself requires 128 bits of storage space.","For example, suppose within position block  of w, it takes a total of 16 bits to encode the position numbers of win the first document in position block  (i.e., d), 14 bits to encode the position numbers of win the second document in position block  (i.e., d), 28 bits to encode the position numbers of win the third document in position block  (i.e., d), and so on.","Suppose the position-data lengths are stored in secondary index field  of position block . Then, in secondary index field  of position block , the first position-data length is 16; the second position-data length is 14; the third position-data length is 28; and so on. The beginning memory location (i.e., the position-data offset) of each position data field  within position block  may be computed based on these position-data lengths. For position data  of position block , its position-data offset equals 128 bits, which is the storage space needed for secondary index . For position data  of position block , its position-data offset equals 128+16=144 bits, which is the storage space needed for secondary index  plus the storage space needed for position data . For position data  of position block , its position-data offset equals 128+16+14=158 bits, which is the storage space needed for secondary index  plus the storage space needed for position data  plus the storage space needed for position data . For position data  of position block , its position-data offset equals 128+16+14+28=186 bits, which is the storage space needed for secondary index  plus the storage space needed for position data  plus the storage space needed for position data  plus the storage space needed for position data . The position-data offsets for subsequent position data fields  may be similarly computed.","Alternatively, suppose the position-data offsets are stored in secondary index field  of position block . Then, in secondary index field  of position block , the first position-data offset is the offset in bits, from the beginning memory location of position block  to the beginning memory location of position data  of position block , which is 128 (secondary index field  itself takes 16 bytes, which is 128 bits); the second position-data offset is the offset in bits, from the beginning memory location of position block , to the beginning memory location of position data  of position block , which is 128+16=144; the third position-data offset is the offset in bits, from the beginning memory location of position block , to the beginning memory location of position data  of position block , which is 128+16+14=158; the fourth position-data offset is the offset in bits, from the beginning memory location of position block , to the beginning memory location of position data  of position block , which is 128+16+14+28=186; and so on.","In particular embodiments, since in secondary index field , each position-data length is represented using one byte, the largest length number that may be represented using one byte is 255. Sometimes, however, a token, especially a commonly used token (e.g., the token \u201cthe\u201d) may appear a large number of times in a single document. As a result, the position data of the token for this document may include a large number of positions and require many bits to encode. If the position data of the token for a document requires more than 255 bits to encode, then the position-data length in secondary index  for this document cannot be represented using a single byte. In this case, particular embodiments may store a default number (e.g., 0) as the position-data length for this document in secondary index field . Moreover, the actual position data of the token for this document is stored at the end of the corresponding position block field  (i.e., in position data ), even though the document may not be the last document (i.e., the sixteenth document) within that position block. Particular embodiments may optionally store the actual position-data length, in number of bits, of the position data together with the position data at the end of position block field , although it is not absolutely necessary to store the length of the position data when there is only one set of positions that requires more than 255 bits to encode within an position block.","On the other hand, if, within the same position block, there are multiple sets of positions for multiple documents that each require more than 255 bits to encode, then the position-data length for all such sets of positions in secondary index field  may be set to the same default number (e.g., 0). Theses sets of positions may all be stored at the end of the corresponding position block field  (e.g., sequentially). Furthermore, in particular embodiments, for each set of positions that requires more than 255 bits to encode and is stored at the end of a position block field , the actual position-data length (e.g., in number of bits) of the set of positions is stored together with the set of positions, and this length may be used to determine the beginning and the end memory locations of each set of positions when needed (e.g., when accessing the position data).","In particular embodiments, within a position block field , each position data field  is for storing the positions of the token appearing in a particular document in that position block field . A token may appear one or more times in a document; thus, there may be one or more positions of the token for the document. Consider token wthat appears in document dhas positions P. In particular embodiments,",{"@attributes":{"id":"p-0051","num":"0050"},"maths":{"@attributes":{"id":"MATH-US-00004","num":"00004"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"msubsup":{"mi":"p","mn":"1","mrow":{"mi":["j","i"],"mo":","}},"mo":","}}},"br":{}},{"@attributes":{"id":"p-0052","num":"0051"},"maths":{"@attributes":{"id":"MATH-US-00005","num":"00005"},"math":{"@attributes":{"overflow":"scroll"},"msubsup":{"mi":"p","msup":{"mi":"n","msup":{"mi":"P","mrow":{"mi":["j","i"],"mo":","}}},"mrow":{"mi":["j","i"],"mo":","}}}},"br":{},"b":["134","130"],"sub":["i","k","j ","i","i","1","j ","i","2","j ","i"],"sup":["j ","j","j,i","j,i","j ","j","j,i ","j","j,i ","j"]},"In the former case with the absolute position numbers, for each token appearance in a document, the absolute position of the token appearance is the number of tokens counted from the first token of the document to that token appearance. In the case of wand d, the position data field  associated with dcontains",{"@attributes":{"id":"p-0054","num":"0053"},"maths":{"@attributes":{"id":"MATH-US-00006","num":"00006"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"msubsup":{"mi":"p","mn":"1","mrow":{"mi":["j","i"],"mo":","}},"mo":","}}},"br":{}},{"@attributes":{"id":"p-0055","num":"0054"},"maths":{"@attributes":{"id":"MATH-US-00007","num":"00007"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"msubsup":{"mi":"p","msup":{"mi":"n","msup":{"mi":"P","mrow":{"mi":["j","i"],"mo":","}}},"mrow":{"mi":["j","i"],"mo":","}},"mo":"."}}}},"In the later case with the relative position numbers, the first token appearance has an absolute position number, counting from the first token of the document to the first appearance of the token in the document. For all subsequent appearances of the token in the document, the difference in positions between each appearance and its previous appearance is stored. In the case of wand d, the position data field  associated with dcontains",{"@attributes":{"id":"p-0057","num":"0056"},"maths":{"@attributes":{"id":"MATH-US-00008","num":"00008"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"msubsup":{"mi":"p","mn":"1","mrow":{"mi":["j","i"],"mo":","}},"mo":","}}}},{"@attributes":{"id":"p-0058","num":"0057"},"maths":{"@attributes":{"id":"MATH-US-00009","num":"00009"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":{"msubsup":[{"mi":"p","mn":"2","mrow":{"mi":["j","i"],"mo":","}},{"mi":"p","mn":"1","mrow":{"mi":["j","i"],"mo":","}}],"mo":"-"},"mo":","}}},"br":{}},{"@attributes":{"id":"p-0059","num":"0058"},"maths":{"@attributes":{"id":"MATH-US-00010","num":"00010"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"msubsup":{"mi":"p","msup":{"mi":"n","msup":{"mi":"P","mrow":{"mi":["j","i"],"mo":","}}},"mrow":{"mi":["j","i"],"mo":","}},"mo":"-","mrow":{"msubsup":{"mi":"p","mrow":[{"msup":{"mi":"n","msup":{"mi":"P","mrow":{"mi":["j","i"],"mo":","}}},"mo":"-","mn":"1"},{"mi":["j","i"],"mo":","}]},"mo":"."}}}}},"In particular embodiments, the positions, either absolute or relative, in each position data field  may be encoded using a minimum constant-bit encoding scheme, similar to encoding the position-block offsets contained in primary index field . For each set of positions, particular embodiments may examine the position numbers, absolute or relative, and determine the minimum number of bits necessary to encode the largest absolute or relative position in the set. Then, particular embodiments may encode all of the positions in the set using this same number of bits. Since this number of bits is sufficient to encode the largest position number in the set, it is also sufficient to encode the smaller position numbers in the set. Other suitable types of encoding schemes may be used to encode the position numbers in alternative embodiments, and the present disclosure contemplates any suitable encoding schemes. If position_delta is the set of relative position values, the set of positions may be encoded using 1+\u2514 log(max(position_delta))\u2518 number of bits.","In particular embodiments, if the position data for a document requires more than 255 bits to encode, then that position data are placed at the end of the corresponding position block. Instead of using the minimum constant-bit encoding scheme described above to encode the large position data, particular embodiments may encode the position data that is greater than 255 bits using the exponential-Golomb (exp-Golomb) code. Briefly, to encode a non-negative integer in an order-k exponential-Golomb code, particular embodiments may (1) take the integer number in binary format except for the last k bits and add 1 to it (arithmetically), and write down the result; (2) count the digits written, subtract one, and write that number of starting zero bits preceding the previous bit string; and (3) write the last k bits in binary.","In particular embodiments, within each position block field , secondary index field  contains sixteen position-data lengths, measured in bits, for the sixteen position data fields  included in that position block field . For example, suppose token wappears three times in document dat positions 100, 250, and 270. Using the relative positions, the position data of wfor dto be encoded are 100, 150 (i.e., 250\u2212100=150), and 20 (i.e., 270\u2212250=20). Using the minimum constant-bit encoding scheme, the largest absolute or relative position number is 150, which requires 8 bits to encode because the number 150 in binary form is 10010110. Thus, for d, all three positions are each encoded using 8 bits, which takes a total of 24 bits. In secondary index field  of position block  for w(dbelongs to the second position block for w), the position-data length of position data , which corresponds to d, is thus 24 bits, because it takes 24 bits to encode the position data for dand so position data  requires 24 bits of storage space.","On the other hand, if the position-data offsets are stored in secondary index field , then in particular embodiments, when parsing secondary index field  to retrieve the position data for the individual documents within an position block field , particular embodiments may examine the difference between two adjacent position-data offsets in secondary index field  to determine the total number of bits used to encode the position data for a particular document (i.e., the length of the position data for the document).","In the above example, the position data of wfor dare encoded using a total of 24 bits; thus, the length of the position data of wfor dis 24 bits. However, this number alone, without any other information, does not indicate whether the 24 bits is: (1) one position number encoded using 24 bits, (2) two position numbers encoded using 12 bits each, (3) three position numbers encoded using 8 bits each, (4) four position numbers encoded using 6 bits each, (5) six position numbers encoded using 4 bits each, (6) eight position numbers encoded using 3 bits each, (7) twelve position numbers encoded using 2 bits each, or (8) twenty-four position numbers encoded using 1 bit each. This ambiguity may cause problems when accessing the position data encoded in an instance of data structure .","To resolve this ambiguity, when encoding the position data using the minimum constant-bit encoding scheme, particular embodiments may use a table to convert between (1) the actual number of bits used to encode a set of positions, and (2) the number of positions in the set (i.e., the number of times a token appears in a document) and the number of bits used to encode each position. Appendix A includes an example conversion table, TABLE 1. Particular embodiments may further restrict that each and every position being encoded using anywhere between 7 bits to 16 bits. If all of the positions of a token in a document require less than 7 bits to encode each, these positions are still encoded using 7 bits each. On the other hand, if some of the positions of a token in a document require more than 16 bits to encode each, particular embodiments encode all of the positions in this document using the exponential-Golomb encoding scheme, not the minimum constant-bit encoding scheme. In the example case of wand d, the restriction eliminates cases (1), (4), (5), (6), (7), and (8) as described above and only leaves cases (2) two position numbers encoded using 12 bits each, and (3) three position numbers encoded using 8 bits each, if a total of 24 bits are used to encode the positions of wappearing in d.","However, the restriction does not resolve all ambiguities. As may be seen in the example case of wand d, there are still two possibilities remaining. In particular embodiments, when the restriction does not resolve all ambiguities, the most probable case is encoded using the number of bits that equals the actual length of the position data, while the less probable cases are each encoded using the number of bits that equals the actual length of the position data plus one or more padding bits. If adding padding bits to an actual length of the position data results in it conflicting with another case, again, the more probable case is encoded using that number of bits and more padding bits may be added to the less probable case.","For example, for 24 bits of position data, there are two possibilities: two position numbers encoded using 12 bits each, and three position numbers encoded using 8 bits each. The second case (i.e., three position numbers encoded using 8 bits each) is more probable among the two cases. Thus, this case is encoded using 24 bits (i.e., the actual length of the position data). The first case (i.e., two position numbers encoded using 12 bits each) is less probable among the two cases. Thus, this case is encoded using 25 bits, with 1 bit padding added (i.e., the actual length of the position data plus 1 bit of padding). In other words, if a token appears in a document at three positions, and these positions may be encoded using 8 bits each, then the position data of the token for this document is encoded using 24 bits without any padding (8 bits for the first position, 8 bits for the second position, and 8 bits for the third position) in an instance of data structure . On the other hand, if a token appears in a document at two positions, and these positions may be encoded using 12 bits each, then the position data of the token for this document is encoded using 25 bits with 1 bit as padding (12 bits for the first position, 12 bits for the second position, and 1 bit for padding) in an instance of data structure . Note that the padding bits may each have a default value (e.g., 0).","In TABLE 1, the first column represents the number of bits actually used to encode the position data for a document, which may be different from the actual length of the position data because it may includes padding bits. The second column represents the number of times (i.e., positions) the token appears in the document. The third column represents the number of bits used to encode each position. And the fourth column represents the number of bits padded to the position data for a document. For example, if the position data for a document is encoded using a total of 244 bits, based on TABLE 1, the 244 bits include 20 positions encoded at 12 bits each plus 4 bits of padding. That is, the token appears in the document twenty times, and the position of each appearance is encoded using twelve bits. When accessing the position data for the document, the four padding bits may be ignored. If the position data for a document is encoded using a total of 213 bits, based on TABLE 1, the 213 bits include 15 positions encoded at 14 bits each plus 3 bits of padding. If the position data for a document is encoded using a total of 180 bits, based on TABLE 1, the 180 bits include 20 positions encoded at 9 bits each without any padding.","The following example code illustrates the function of TABLE 1. The example code and TABLE 1 are just one example derivation of such a table that assumes that shorter differences between token positions (i.e., position deltas) are more common than longer position deltas. Alternative embodiments may derive different versions of the table differently. For example, a table may be derived statistically based on the inverted index.",{"@attributes":{"id":"p-0070","num":"0069"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"for (i=255; i>0; i--) {"},{"entry":"\u2003for (j=POSN_MIN_DELTA_BITS;j<=POSN_MAX_DELTA_BITS &&"},{"entry":"i*j<DECODETABLE_MAX_POS_LEN; j++) {"},{"entry":"\u2003\u2003if (!PositionDecodeTable.nTokens[i*j]) {"},{"entry":"\u2003\u2003\u2003PositionDecodeTable.nTokens[i*j] = i;"},{"entry":"\u2003\u2003\u2003PositionDecodeTable.nBits[i*j] = j;"},{"entry":"\u2003\u2003\u2003PositionDecodeTable.nPadding[i] [j] = 0;"},{"entry":"\u2003\u2003} else { "},{"entry":"\u2003\u2003\u2003for (t=0; i*j+t<DECODETABLE_MAX_POS_LEN; t++) {"},{"entry":"\u2003\u2003\u2003\u2003if (!PositionDecodeTable_nTokens[i*j+t]) {"},{"entry":"\u2003\u2003\u2003\u2003\u2003PositionDecodeTable.nTokens[i*j+t] = i;"},{"entry":"\u2003\u2003\u2003\u2003\u2003PositionDecodeTable.nBits[i*j+t] = j;"},{"entry":"\u2003\u2003\u2003\u2003\u2003PositionDecodeTable.nPadding[i] [j] = t;"},{"entry":"\u2003\u2003\u2003\u2003\u2003break;"},{"entry":"\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003}"},{"entry":"\u2003\u2003}"},{"entry":"\u2003}"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},{"@attributes":{"id":"p-0071","num":"0070"},"figref":"FIG. 2","b":["100","210","220","230"]},"In particular embodiments, the position data of the individual tokens, as stored, for example, in instances of data structure , may be use during a search process. Suppose a search query, q, includes a number of tokens, q={w, . . . , w}, where nis the total number of tokens in q and n\u22671. In particular embodiments, to determine which network documents are relevant to the search query, q, the search engine may first determine which of the network documents contain all or most of the tokens in q, and then determine, among the documents that contain all or most of the tokens in q, within which of the documents the tokens in q are located relatively closely to each other. The positions of a token within a document may be represented as the position data of the token for that document and stored in an instance of data structure .","For example, suppose the search query, q, includes two tokens, wand w. By examining the documents that contain wand the documents that contain w, a search engine may determine those documents that contain both wand w. Suppose wappears in three documents: d, dand d; and wappears in four documents: d, d, d, and d. Then two documents, dand d, contain both tokens, wand w, of q.","For each of the two documents, dand d, to determine whether wand ware located relatively closely to each other within the document, the search engine may examine the position data of and wfor dand d, respectively, to find the positions of wand win dand d, respectively, and then compare these positions.","Suppose the position data of wand ware stored in two different instances of data structure . To access the positions of win d, dis the second document in the set of documents in which wappears. Thus, the position data of wfor dis located in position block  at position data . The first position-block offset in primary index field  points to the beginning memory location of position block . If the position-data lengths are stored in secondary index field , then within position block , the second position-data length in secondary index field  corresponds to position data . The position-data offset to the beginning memory location of position data  equals 128 bits (i.e., the length of secondary index field ) plus the position-data length corresponding to position data  (i.e., the first position-data length in secondary index field ). Thus, decoding primary index field  provides the position-block offset to position block , and decoding secondary index field  of position block  provides the position-data offset to position data  of position block . Decoding position data  of position block  provides the positions of win d. The position data of wfor dand the position data of wfor dand dmay be similarly accessed.","In particular embodiments, since each position-block offset in primary index field  is encoded using the same number of bits (i.e., constant-bit encoding) and this bit number is known, the position-block offsets may be decoded with a few bit operations.","In particular embodiments, within each position block field , there are sixteen position-data lengths in secondary index field , and each position-data length is encoded using one byte. For example, the first position-data length, corresponding to position data  within the position block, is the first byte in secondary index field  of the position block; the second position-data length, corresponding to position data  within the position block, is the second byte in secondary index field  of the position block; and so on. In particular embodiments, operations performed on the sixteen bytes of position-data lengths may be done using Single Instruction, Multiple Data (SIMD) processing. In general, with SIMD, the same operation may be performed on multiple data (e.g.,  data) simultaneously.","For example, to calculate the offset from the memory location at the end of secondary index field  to the beginning memory location of the tenth set of positions (i.e., position data ) in a position block field , three operations are needed: (1) load the secondary index (i.e., sixteen bytes corresponding to sixteen position-data lengths) into a SIMD register; (2) zero out bytes  through , which correspond to position-data lengths  through ; and (3) sum the remaining bytes  through , which correspond to position-data lengths  through . To calculate the position-data offset for position data , 128 bits (i.e., the memory space needed for secondary index field ) may then be added to the previous result. The position-data offset, thus computed, indicates the beginning memory location of position data  within position block field .","By referencing to TABLE 1, the number of positions in each set of positions and the number of bits used to encode each position in the set may be determined based on the number of bits actually used to encode the set of positions. In addition, TABLE 1 also indicates if there is any padding, in bits, added to the end of a set of positions. The padding, if any, may be discarded or ignored when accessing the position data of a token.","The actual token positions in a document may be obtained by performing various bit operations on the corresponding position data field . Note that in the case that the differences between the token positions and their proceeding positions are stored as the position data (i.e., the relative positions are stored as the position data), the values decoded from position data fields  may need to be adjusted accordingly. In addition, large position data (e.g., position data that require more than 255 bits to encode) may have been relocated to the end of position data block fields  and encoded using exponential-Golomb code. These position data may require special handling.",{"@attributes":{"id":"p-0081","num":"0080"},"figref":"FIG. 3","b":["100","100","120","120","120","120","130","120","130","132","130","134","134"]},"Particular embodiments may be implemented in a network environment.  illustrates an example network environment  suitable for providing software validation as a service. Network environment  includes a network  coupling one or more servers  and one or more clients  to each other. In particular embodiments, network  is an intranet, an extranet, a virtual private network (VPN), a local area network (LAN), a wireless LAN (WLAN), a wide area network (WAN), a metropolitan area network (MAN), a portion of the Internet, or another network  or a combination of two or more such networks . The present disclosure contemplates any suitable network .","One or more links  couple a server  or a client  to network . In particular embodiments, one or more links  each includes one or more wireline, wireless, or optical links . In particular embodiments, one or more links  each includes an intranet, an extranet, a VPN, a LAN, a WLAN, a WAN, a MAN, a portion of the Internet, or another link  or a combination of two or more such links . The present disclosure contemplates any suitable links  coupling servers  and clients  to network .","In particular embodiments, each server  may be a unitary server or may be a distributed server spanning multiple computers or multiple datacenters. Servers  may be of various types, such as, for example and without limitation, web server, news server, mail server, message server, advertising server, file server, application server, exchange server, database server, or proxy server. In particular embodiments, each server  may include hardware, software, or embedded logic components or a combination of two or more such components for carrying out the appropriate functionalities implemented or supported by server . For example, a web server is generally capable of hosting websites containing web pages or particular elements of web pages. More specifically, a web server may host HTML files or other file types, or may dynamically create or constitute files upon a request, and communicate them to clients  in response to HTTP or other requests from clients . A mail server is generally capable of providing electronic mail services to various clients . A database server is generally capable of providing an interface for managing data stored in one or more data stores.","In particular embodiments, a server  may include a search engine . Search engine  may include hardware, software, or embedded logic components or a combination of two or more such components for carrying out the appropriate functionalities implemented or supported by search engine . For example and without limitation, search engine  may implement one or more search algorithms that may be used to identify network resources in response to the search queries received at search engine , one or more ranking algorithms that may be used to rank the identified network resources, one or more summarization algorithms that may be used to summarize the identified network resources, and so on. The ranking algorithms implemented by search engine  may be trained using the set of the training data constructed from pairs of search query and clicked URL.","In particular embodiments, one or more data storages  may be communicatively linked to one or more severs  via one or more links . In particular embodiments, data storages  may be used to store various types of information. In particular embodiments, the information stored in data storages  may be organized according to specific data structures. In particular embodiments, each data storage  may be a relational database. Particular embodiments may provide interfaces that enable servers  or clients  to manage, e.g., retrieve, modify, add, or delete, the information stored in data storage .","In particular embodiments, each client  may be an electronic device including hardware, software, or embedded logic components or a combination of two or more such components and capable of carrying out the appropriate functionalities implemented or supported by client . For example and without limitation, a client  may be a desktop computer system, a notebook computer system, a netbook computer system, a handheld electronic device, or a mobile telephone. The present disclosure contemplates any suitable clients . A client  may enable a network user at client  to access network . A client  may enable its user to communicate with other users at other clients .","A client  may have a web browser , such as MICROSOFT INTERNET EXPLORER, GOOGLE CHROME or MOZILLA FIREFOX, and may have one or more add-ons, plug-ins, or other extensions, such as TOOLBAR or YAHOO TOOLBAR. A user at client  may enter a Uniform Resource Locator (URL) or other address directing the web browser  to a server , and the web browser  may generate a Hyper Text Transfer Protocol (HTTP) request and communicate the HTTP request to server . Server  may accept the HTTP request and communicate to client  one or more Hyper Text Markup Language (HTML) files responsive to the HTTP request. Client  may render a web page based on the HTML files from server  for presentation to the user. The present disclosure contemplates any suitable web page files. As an example and not by way of limitation, web pages may render from HTML files, Extensible Hyper Text Markup Language (XHTML) files, or Extensible Markup Language (XML) files, according to particular needs. Such pages may also execute scripts such as, for example and without limitation, those written in JAVASCRIPT, JAVA, MICROSOFT SILVERLIGHT, combinations of markup language and scripts such as AJAX (Asynchronous JAVASCRIPT and XML), and the like. Herein, reference to a web page encompasses one or more corresponding web page files (which a browser may use to render the web page) and vice versa, where appropriate.","Particular embodiments may be implemented on one or more computer systems.  illustrates an example computer system . In particular embodiments, one or more computer systems  perform one or more steps of one or more methods described or illustrated herein. In particular embodiments, one or more computer systems  provide functionality described or illustrated herein. In particular embodiments, software running on one or more computer systems  performs one or more steps of one or more methods described or illustrated herein or provides functionality described or illustrated herein. Particular embodiments include one or more portions of one or more computer systems .","This disclosure contemplates any suitable number of computer systems . This disclosure contemplates computer system  taking any suitable physical form. As example and not by way of limitation, computer system  may be an embedded computer system, a system-on-chip (SOC), a single-board computer system (SBC) (such as, for example, a computer-on-module (COM) or system-on-module (SOM)), a desktop computer system, a laptop or notebook computer system, an interactive kiosk, a mainframe, a mesh of computer systems, a mobile telephone, a personal digital assistant (PDA), a server, or a combination of two or more of these. Where appropriate, computer system  may include one or more computer systems ; be unitary or distributed; span multiple locations; span multiple machines; or reside in a cloud, which may include one or more cloud components in one or more networks. Where appropriate, one or more computer systems  may perform without substantial spatial or temporal limitation one or more steps of one or more methods described or illustrated herein. As an example and not by way of limitation, one or more computer systems  may perform in real time or in batch mode one or more steps of one or more methods described or illustrated herein. One or more computer systems  may perform at different times or at different locations one or more steps of one or more methods described or illustrated herein, where appropriate.","In particular embodiments, computer system  includes a processor , memory , storage , an input\/output (I\/O) interface , a communication interface , and a bus . Although this disclosure describes and illustrates a particular computer system having a particular number of particular components in a particular arrangement, this disclosure contemplates any suitable computer system having any suitable number of any suitable components in any suitable arrangement.","In particular embodiments, processor  includes hardware for executing instructions, such as those making up a computer program. As an example and not by way of limitation, to execute instructions, processor  may retrieve (or fetch) the instructions from an internal register, an internal cache, memory , or storage ; decode and execute them; and then write one or more results to an internal register, an internal cache, memory , or storage . In particular embodiments, processor  may include one or more internal caches for data, instructions, or addresses. The present disclosure contemplates processor  including any suitable number of any suitable internal caches, where appropriate. As an example and not by way of limitation, processor  may include one or more instruction caches, one or more data caches, and one or more translation look-aside buffers (TLBs). Instructions in the instruction caches may be copies of instructions in memory  or storage , and the instruction caches may speed up retrieval of those instructions by processor . Data in the data caches may be copies of data in memory  or storage  for instructions executing at processor  to operate on; the results of previous instructions executed at processor  for access by subsequent instructions executing at processor  or for writing to memory  or storage ; or other suitable data. The data caches may speed up read or write operations by processor . The TLBs may speed up virtual-address translation for processor . In particular embodiments, processor  may include one or more internal registers for data, instructions, or addresses. The present disclosure contemplates processor  including any suitable number of any suitable internal registers, where appropriate. Where appropriate, processor  may include one or more arithmetic logic units (ALUs); be a multi-core processor; or include one or more processors . Although this disclosure describes and illustrates a particular processor, this disclosure contemplates any suitable processor.","In particular embodiments, memory  includes main memory for storing instructions for processor  to execute or data for processor  to operate on. As an example and not by way of limitation, computer system  may load instructions from storage  or another source (such as, for example, another computer system ) to memory . Processor  may then load the instructions from memory  to an internal register or internal cache. To execute the instructions, processor  may retrieve the instructions from the internal register or internal cache and decode them. During or after execution of the instructions, processor  may write one or more results (which may be intermediate or final results) to the internal register or internal cache. Processor  may then write one or more of those results to memory . In particular embodiments, processor  executes only instructions in one or more internal registers or internal caches or in memory  (as opposed to storage  or elsewhere) and operates only on data in one or more internal registers or internal caches or in memory  (as opposed to storage  or elsewhere). One or more memory buses (which may each include an address bus and a data bus) may couple processor  to memory . Bus  may include one or more memory buses, as described below. In particular embodiments, one or more memory management units (MMUs) reside between processor  and memory  and facilitate accesses to memory  requested by processor . In particular embodiments, memory  includes random access memory (RAM). This RAM may be volatile memory, where appropriate Where appropriate, this RAM may be dynamic RAM (DRAM) or static RAM (SRAM). Moreover, where appropriate, this RAM may be single-ported or multi-ported RAM. The present disclosure contemplates any suitable RAM. Memory  may include one or more memories , where appropriate. Although this disclosure describes and illustrates particular memory, this disclosure contemplates any suitable memory.","In particular embodiments, storage  includes mass storage for data or instructions. As an example and not by way of limitation, storage  may include an HDD, a floppy disk drive, flash memory, an optical disc, a magneto-optical disc, magnetic tape, or a Universal Serial Bus (USB) drive or a combination of two or more of these. Storage  may include removable or non-removable (or fixed) media, where appropriate. Storage  may be internal or external to computer system , where appropriate. In particular embodiments, storage  is non-volatile, solid-state memory. In particular embodiments, storage  includes read-only memory (ROM). Where appropriate, this ROM may be mask-programmed ROM, programmable ROM (PROM), erasable PROM (EPROM), electrically erasable PROM (EEPROM), electrically alterable ROM (EAROM), or flash memory or a combination of two or more of these. This disclosure contemplates mass storage  taking any suitable physical form. Storage  may include one or more storage control units facilitating communication between processor  and storage , where appropriate. Where appropriate, storage  may include one or more storages . Although this disclosure describes and illustrates particular storage, this disclosure contemplates any suitable storage.","In particular embodiments, I\/O interface  includes hardware, software, or both providing one or more interfaces for communication between computer system  and one or more I\/O devices. Computer system  may include one or more of these I\/O devices, where appropriate. One or more of these I\/O devices may enable communication between a person and computer system . As an example and not by way of limitation, an I\/O device may include a keyboard, keypad, microphone, monitor, mouse, printer, scanner, speaker, still camera, stylus, tablet, touch screen, trackball, video camera, another suitable I\/O device or a combination of two or more of these. An I\/O device may include one or more sensors. This disclosure contemplates any suitable I\/O devices and any suitable I\/O interfaces  for them. Where appropriate, I\/O interface  may include one or more device or software drivers enabling processor  to drive one or more of these I\/O devices. I\/O interface  may include one or more I\/O interfaces , where appropriate. Although this disclosure describes and illustrates a particular I\/O interface, this disclosure contemplates any suitable I\/O interface.","In particular embodiments, communication interface  includes hardware, software, or both providing one or more interfaces for communication (such as, for example, packet-based communication) between computer system  and one or more other computer systems  or one or more networks. As an example and not by way of limitation, communication interface  may include a network interface controller (NIC) or network adapter for communicating with an Ethernet or other wire-based network or a wireless NIC (WNIC) or wireless adapter for communicating with a wireless network, such as a WI-FI network. This disclosure contemplates any suitable network and any suitable communication interface  for it. As an example and not by way of limitation, computer system  may communicate with an ad hoc network, a personal area network (PAN), a local area network (LAN), a wide area network (WAN), a metropolitan area network (MAN), or one or more portions of the Internet or a combination of two or more of these. One or more portions of one or more of these networks may be wired or wireless. As an example, computer system  may communicate with a wireless PAN (WPAN) (such as, for example, a BLUETOOTH WPAN), a WI-FI network, a WI-MAX network, a cellular telephone network (such as, for example, a Global System for Mobile Communications (GSM) network), or other suitable wireless network or a combination of two or more of these. Computer system  may include any suitable communication interface  for any of these networks, where appropriate. Communication interface  may include one or more communication interfaces , where appropriate. Although this disclosure describes and illustrates a particular communication interface, this disclosure contemplates any suitable communication interface.","In particular embodiments, bus  includes hardware, software, or both coupling components of computer system  to each other. As an example and not by way of limitation, bus  may include an Accelerated Graphics Port (AGP) or other graphics bus, an Enhanced Industry Standard Architecture (EISA) bus, a front-side bus (FSB), a HYPERTRANSPORT (HT) interconnect, an Industry Standard Architecture (ISA) bus, an INFINIBAND interconnect, a low-pin-count (LPC) bus, a memory bus, a Micro Channel Architecture (MCA) bus, a Peripheral Component Interconnect (PCI) bus, a PCI-Express (PCI-X) bus, a serial advanced technology attachment (SATA) bus, a Video Electronics Standards Association local (VLB) bus, or another suitable bus or a combination of two or more of these. Bus  may include one or more buses , where appropriate. Although this disclosure describes and illustrates a particular bus, this disclosure contemplates any suitable bus or interconnect.","Herein, reference to a computer-readable storage medium encompasses one or more non-transitory, tangible computer-readable storage media possessing structure. As an example and not by way of limitation, a computer-readable storage medium may include a semiconductor-based or other integrated circuit (IC) (such, as for example, a field-programmable gate array (FPGA) or an application-specific IC (ASIC)), a hard disk, an HDD, a hybrid hard drive (HHD), an optical disc, an optical disc drive (ODD), a magneto-optical disc, a magneto-optical drive, a floppy disk, a floppy disk drive (FDD), magnetic tape, a holographic storage medium, a solid-state drive (SSD), a RAM-drive, a SECURE DIGITAL card, a SECURE DIGITAL drive, or another suitable computer-readable storage medium or a combination of two or more of these, where appropriate. Herein, reference to a computer-readable storage medium excludes any medium that is not eligible for patent protection under 35 U.S.C. \u00a7101. Herein, reference to a computer-readable storage medium excludes transitory forms of signal transmission (such as a propagating electrical or electromagnetic signal per se) to the extent that they are not eligible for patent protection under 35 U.S.C. \u00a7101.","This disclosure contemplates one or more computer-readable storage media implementing any suitable storage. In particular embodiments, a computer-readable storage medium implements one or more portions of processor  (such as, for example, one or more internal registers or caches), one or more portions of memory , one or more portions of storage , or a combination of these, where appropriate. In particular embodiments, a computer-readable storage medium implements RAM or ROM. In particular embodiments, a computer-readable storage medium implements volatile or persistent memory. In particular embodiments, one or more computer-readable storage media embody software. Herein, reference to software may encompass one or more applications, bytecode, one or more computer programs, one or more executables, one or more instructions, logic, machine code, one or more scripts, or source code, and vice versa, where appropriate. In particular embodiments, software includes one or more application programming interfaces (APIs). This disclosure contemplates any suitable software written or otherwise expressed in any suitable programming language or combination of programming languages. In particular embodiments, software is expressed as source code or object code. In particular embodiments, software is expressed in a higher-level programming language, such as, for example, C, Perl, or a suitable extension thereof. In particular embodiments, software is expressed in a lower-level programming language, such as assembly language (or machine code). In particular embodiments, software is expressed in JAVA. In particular embodiments, software is expressed in Hyper Text Markup Language (HTML), Extensible Markup Language (XML), or other suitable markup language.","The present disclosure encompasses all changes, substitutions, variations, alterations, and modifications to the example embodiments herein that a person having ordinary skill in the art would comprehend. Similarly, where appropriate, the appended claims encompass all changes, substitutions, variations, alterations, and modifications to the example embodiments herein that a person having ordinary skill in the art would comprehend.",{"@attributes":{"id":"p-0101","num":"0100"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"7pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"center"}}],"thead":{"row":[{"entry":[{},"TABLE 1"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},{},"APPENDIX A"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"7pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},"0: nTokens = 1, nBits = 0, nPadding = 0"]},{"entry":[{},{},"1: nTokens = 1, nBits = 1, nPadding = 0"]},{"entry":[{},{},"2: nTokens = 1, nBits = 2, nPadding = 0"]},{"entry":[{},{},"3: nTokens = 1, nBits = 3, nPadding = 0"]},{"entry":[{},{},"4: nTokens = 1, nBits = 4, nPadding = 0"]},{"entry":[{},{},"5: nTokens = 1, nBits = 5, nPadding = 0"]},{"entry":[{},{},"6: nTokens = 1, nBits = 6, nPadding = 0"]},{"entry":[{},{},"7: nTokens = 1, nBits = 7, nPadding = 0"]},{"entry":[{},{},"8: nTokens = 1, nBits = 8, nPadding = 0"]},{"entry":[{},{},"9: nTokens = 1, nBits = 9, nPadding = 0"]},{"entry":[{},{},"10: nTokens = 1, nBits = 10, nPadding = 0"]},{"entry":[{},{},"11: nTokens = 1, nBits = 11, nPadding = 0"]},{"entry":[{},{},"12: nTokens = 1, nBits = 12, nPadding = 0"]},{"entry":[{},{},"13: nTokens = 1, nBits = 13, nPadding = 0"]},{"entry":[{},{},"14: nTokens = 2, nBits = 7, nPadding = 0"]},{"entry":[{},{},"15: nTokens = 1, nBits = 14, nPadding = 1"]},{"entry":[{},{},"16: nTokens = 2, nBits = 8, nPadding = 0"]},{"entry":[{},{},"17: nTokens = 1, nBits = 15, nPadding = 2"]},{"entry":[{},{},"18: nTokens = 2, nBits = 9, nPadding = 0"]},{"entry":[{},{},"19: nTokens = 1, nBits = 16, nPadding = 3"]},{"entry":[{},{},"20: nTokens = 2, nBits = 10, nPadding = 0"]},{"entry":[{},{},"21: nTokens = 3, nBits = 7, nPadding = 0"]},{"entry":[{},{},"22: nTokens = 2, nBits = 11, nPadding = 0"]},{"entry":[{},{},"23: nTokens = 0, nBits = 0, nPadding = 0"]},{"entry":[{},{},"24: nTokens = 3, nBits = 8, nPadding = 0"]},{"entry":[{},{},"25: nTokens = 2, nBits = 12, nPadding = 1"]},{"entry":[{},{},"26: nTokens = 2, nBits = 13, nPadding = 0"]},{"entry":[{},{},"27: nTokens = 3, nBits = 9, nPadding = 0"]},{"entry":[{},{},"28: nTokens = 4, nBits = 7, nPadding = 0"]},{"entry":[{},{},"29: nTokens = 2, nBits = 14, nPadding = 1"]},{"entry":[{},{},"30: nTokens = 3, nBits = 10, nPadding = 0"]},{"entry":[{},{},"31: nTokens = 2, nBits = 15, nPadding = 1"]},{"entry":[{},{},"32: nTokens = 4, nBits = 8, nPadding = 0"]},{"entry":[{},{},"33: nTokens = 3, nBits = 11, nPadding = 0"]},{"entry":[{},{},"34: nTokens = 2, nBits = 16, nPadding = 2"]},{"entry":[{},{},"35: nTokens = 5, nBits = 7, nPadding = 0"]},{"entry":[{},{},"36: nTokens = 4, nBits = 9, nPadding = 0"]},{"entry":[{},{},"37: nTokens = 3, nBits = 12, nPadding = 1"]},{"entry":[{},{},"38: nTokens = 0, nBits = 0, nPadding = 0"]},{"entry":[{},{},"39: nTokens = 3, nBits = 13, nPadding = 0"]},{"entry":[{},{},"40: nTokens = 5, nBits = 8, nPadding = 0"]},{"entry":[{},{},"41: nTokens = 4, nBits = 10, nPadding = 1"]},{"entry":[{},{},"42: nTokens = 6, nBits = 7, nPadding = 0"]},{"entry":[{},{},"43: nTokens = 3, nBits = 14, nPadding = 1"]},{"entry":[{},{},"44: nTokens = 4, nBits = 11, nPadding = 0"]},{"entry":[{},{},"45: nTokens = 5, nBits = 9, nPadding = 0"]},{"entry":[{},{},"46: nTokens = 3, nBits = 15, nPadding = 1"]},{"entry":[{},{},"47: nTokens = 0, nBits = 0, nPadding = 0"]},{"entry":[{},{},"48: nTokens = 6, nBits = 8, nPadding = 0"]},{"entry":[{},{},"49: nTokens = 7, nBits = 7, nPadding = 0"]},{"entry":[{},{},"50: nTokens = 5, nBits = 10, nPadding = 0"]},{"entry":[{},{},"51: nTokens = 4, nBits = 12, nPadding = 3"]},{"entry":[{},{},"52: nTokens = 4, nBits = 13, nPadding = 0"]},{"entry":[{},{},"53: nTokens = 3, nBits = 16, nPadding = 5"]},{"entry":[{},{},"54: nTokens = 6, nBits = 9, nPadding = 0"]},{"entry":[{},{},"55: nTokens = 5, nBits = 11, nPadding = 0"]},{"entry":[{},{},"56: nTokens = 8, nBits = 7, nPadding = 0"]},{"entry":[{},{},"57: nTokens = 7, nBits = 8, nPadding = 1"]},{"entry":[{},{},"58: nTokens = 4, nBits = 14, nPadding = 2"]},{"entry":[{},{},"59: nTokens = 0, nBits = 0, nPadding = 0"]},{"entry":[{},{},"60: nTokens = 6, nBits = 10, nPadding = 0"]},{"entry":[{},{},"61: nTokens = 5, nBits = 12, nPadding = 1"]},{"entry":[{},{},"62: nTokens = 4, nBits = 15, nPadding = 2"]},{"entry":[{},{},"63: nTokens = 9, nBits = 7, nPadding = 0"]},{"entry":[{},{},"64: nTokens = 8, nBits = 8, nPadding = 0"]},{"entry":[{},{},"65: nTokens = 7, nBits = 9, nPadding = 2"]},{"entry":[{},{},"66: nTokens = 6, nBits = 11, nPadding = 0"]},{"entry":[{},{},"67: nTokens = 5, nBits = 13, nPadding = 2"]},{"entry":[{},{},"68: nTokens = 4, nBits = 16, nPadding = 4"]},{"entry":[{},{},"69: nTokens = 0, nBits = 0, nPadding = 0"]},{"entry":[{},{},"70: nTokens = 10, nBits = 7, nPadding = 0"]},{"entry":[{},{},"71: nTokens = 7, nBits = 10, nPadding = 1"]},{"entry":[{},{},"72: nTokens = 9, nBits = 8, nPadding = 0"]},{"entry":[{},{},"73: nTokens = 8, nBits = 9, nPadding = 1"]},{"entry":[{},{},"74: nTokens = 6, nBits = 12, nPadding = 2"]},{"entry":[{},{},"75: nTokens = 5, nBits = 14, nPadding = 5"]},{"entry":[{},{},"76: nTokens = 5, nBits = 15, nPadding = 1"]},{"entry":[{},{},"77: nTokens = 11, nBits = 7, nPadding = 0"]},{"entry":[{},{},"78: nTokens = 7, nBits = 11, nPadding = 1"]},{"entry":[{},{},"79: nTokens = 6, nBits = 13, nPadding = 1"]},{"entry":[{},{},"80: nTokens = 10, nBits = 8, nPadding = 0"]},{"entry":[{},{},"81: nTokens = 9, nBits = 9, nPadding = 0"]},{"entry":[{},{},"82: nTokens = 8, nBits = 10, nPadding = 2"]},{"entry":[{},{},"83: nTokens = 5, nBits = 16, nPadding = 3"]},{"entry":[{},{},"84: nTokens = 12, nBits = 7, nPadding = 0"]},{"entry":[{},{},"85: nTokens = 7, nBits = 12, nPadding = 1"]},{"entry":[{},{},"86: nTokens = 6, nBits = 14, nPadding = 2"]},{"entry":[{},{},"87: nTokens = 0, nBits = 0, nPadding = 0"]},{"entry":[{},{},"88: nTokens = 11, nBits = 8, nPadding = 0"]},{"entry":[{},{},"89: nTokens = 8, nBits = 11, nPadding = 1"]},{"entry":[{},{},"90: nTokens = 10, nBits = 9, nPadding = 0"]},{"entry":[{},{},"91: nTokens = 13, nBits = 7, nPadding = 0"]},{"entry":[{},{},"92: nTokens = 9, nBits = 10, nPadding = 2"]},{"entry":[{},{},"93: nTokens = 7, nBits = 13, nPadding = 2"]},{"entry":[{},{},"94: nTokens = 6, nBits = 15, nPadding = 4"]},{"entry":[{},{},"95: nTokens = 0, nBits = 0, nPadding = 0"]},{"entry":[{},{},"96: nTokens = 12, nBits = 8, nPadding = 0"]},{"entry":[{},{},"97: nTokens = 8, nBits = 12, nPadding = 1"]},{"entry":[{},{},"98: nTokens = 14, nBits = 7, nPadding = 0"]},{"entry":[{},{},"99: nTokens = 11, nBits = 9, nPadding = 0"]},{"entry":[{},{},"100: nTokens = 10, nBits = 10, nPadding = 0"]},{"entry":[{},{},"101: nTokens = 9, nBits = 11, nPadding = 2"]},{"entry":[{},{},"102: nTokens = 7, nBits = 14, nPadding = 4"]},{"entry":[{},{},"103: nTokens = 6, nBits = 16, nPadding = 7"]},{"entry":[{},{},"104: nTokens = 13, nBits = 8, nPadding = 0"]},{"entry":[{},{},"105: nTokens = 15, nBits = 7, nPadding = 0"]},{"entry":[{},{},"106: nTokens = 8, nBits = 13, nPadding = 2"]},{"entry":[{},{},"107: nTokens = 7, nBits = 15, nPadding = 2"]},{"entry":[{},{},"108: nTokens = 12, nBits = 9, nPadding = 0"]},{"entry":[{},{},"109: nTokens = 9, nBits = 12, nPadding = 1"]},{"entry":[{},{},"110: nTokens = 11, nBits = 10, nPadding = 0"]},{"entry":[{},{},"111: nTokens = 10, nBits = 11, nPadding = 1"]},{"entry":[{},{},"112: nTokens = 16, nBits = 7, nPadding = 0"]},{"entry":[{},{},"113: nTokens = 14, nBits = 8, nPadding = 1"]},{"entry":[{},{},"114: nTokens = 8, nBits = 14, nPadding = 2"]},{"entry":[{},{},"115: nTokens = 7, nBits = 16, nPadding = 3"]},{"entry":[{},{},"116: nTokens = 0, nBits = 0, nPadding = 0"]},{"entry":[{},{},"117: nTokens = 13, nBits = 9, nPadding = 0"]},{"entry":[{},{},"118: nTokens = 9, nBits = 13, nPadding = 1"]},{"entry":[{},{},"119: nTokens = 17, nBits = 7, nPadding = 0"]},{"entry":[{},{},"120: nTokens = 15, nBits = 8, nPadding = 0"]},{"entry":[{},{},"121: nTokens = 12, nBits = 10, nPadding = 1"]},{"entry":[{},{},"122: nTokens = 11, nBits = 11, nPadding = 1"]},{"entry":[{},{},"123: nTokens = 10, nBits = 12, nPadding = 3"]},{"entry":[{},{},"124: nTokens = 8, nBits = 15, nPadding = 4"]},{"entry":[{},{},"125: nTokens = 0, nBits = 0, nPadding = 0"]},{"entry":[{},{},"126: nTokens = 18, nBits = 7, nPadding = 0"]},{"entry":[{},{},"127: nTokens = 14, nBits = 9, nPadding = 1"]},{"entry":[{},{},"128: nTokens = 16, nBits = 8, nPadding = 0"]},{"entry":[{},{},"129: nTokens = 9, nBits = 14, nPadding = 3"]},{"entry":[{},{},"130: nTokens = 13, nBits = 10, nPadding = 0"]},{"entry":[{},{},"131: nTokens = 10, nBits = 13, nPadding = 1"]},{"entry":[{},{},"132: nTokens = 12, nBits = 11, nPadding = 0"]},{"entry":[{},{},"133: nTokens = 19, nBits = 7, nPadding = 0"]},{"entry":[{},{},"134: nTokens = 11, nBits = 12, nPadding = 2"]},{"entry":[{},{},"135: nTokens = 15, nBits = 9, nPadding = 0"]},{"entry":[{},{},"136: nTokens = 17, nBits = 8, nPadding = 0"]},{"entry":[{},{},"137: nTokens = 9, nBits = 15, nPadding = 2"]},{"entry":[{},{},"138: nTokens = 8, nBits = 16, nPadding = 10"]},{"entry":[{},{},"139: nTokens = 0, nBits = 0, nPadding = 0"]},{"entry":[{},{},"140: nTokens = 20, nBits = 7, nPadding = 0"]},{"entry":[{},{},"141: nTokens = 14, nBits = 10, nPadding = 1"]},{"entry":[{},{},"142: nTokens = 10, nBits = 14, nPadding = 2"]},{"entry":[{},{},"143: nTokens = 13, nBits = 11, nPadding = 0"]},{"entry":[{},{},"144: nTokens = 18, nBits = 8, nPadding = 0"]},{"entry":[{},{},"145: nTokens = 16, nBits = 9, nPadding = 1"]},{"entry":[{},{},"146: nTokens = 12, nBits = 12, nPadding = 2"]},{"entry":[{},{},"147: nTokens = 21, nBits = 7, nPadding = 0"]},{"entry":[{},{},"148: nTokens = 11, nBits = 13, nPadding = 5"]},{"entry":[{},{},"149: nTokens = 9, nBits = 16, nPadding = 5"]},{"entry":[{},{},"150: nTokens = 15, nBits = 10, nPadding = 0"]},{"entry":[{},{},"151: nTokens = 10, nBits = 15, nPadding = 1"]},{"entry":[{},{},"152: nTokens = 19, nBits = 8, nPadding = 0"]},{"entry":[{},{},"153: nTokens = 17, nBits = 9, nPadding = 0"]},{"entry":[{},{},"154: nTokens = 22, nBits = 7, nPadding = 0"]},{"entry":[{},{},"155: nTokens = 14, nBits = 11, nPadding = 1"]},{"entry":[{},{},"156: nTokens = 13, nBits = 12, nPadding = 0"]},{"entry":[{},{},"157: nTokens = 12, nBits = 13, nPadding = 1"]},{"entry":[{},{},"158: nTokens = 11, nBits = 14, nPadding = 4"]},{"entry":[{},{},"159: nTokens = 0, nBits = 0, nPadding = 0"]},{"entry":[{},{},"160: nTokens = 20, nBits = 8, nPadding = 0"]},{"entry":[{},{},"161: nTokens = 23, nBits = 7, nPadding = 0"]},{"entry":[{},{},"162: nTokens = 18, nBits = 9, nPadding = 0"]},{"entry":[{},{},"163: nTokens = 16, nBits = 10, nPadding = 3"]},{"entry":[{},{},"164: nTokens = 10, nBits = 16, nPadding = 4"]},{"entry":[{},{},"165: nTokens = 15, nBits = 11, nPadding = 0"]},{"entry":[{},{},"166: nTokens = 11, nBits = 15, nPadding = 1"]},{"entry":[{},{},"167: nTokens = 0, nBits = 0, nPadding = 0"]},{"entry":[{},{},"168: nTokens = 24, nBits = 7, nPadding = 0"]},{"entry":[{},{},"169: nTokens = 21, nBits = 8, nPadding = 1"]},{"entry":[{},{},"170: nTokens = 17, nBits = 10, nPadding = 0"]},{"entry":[{},{},"171: nTokens = 19, nBits = 9, nPadding = 0"]},{"entry":[{},{},"172: nTokens = 14, nBits = 12, nPadding = 4"]},{"entry":[{},{},"173: nTokens = 13, nBits = 13, nPadding = 4"]},{"entry":[{},{},"174: nTokens = 12, nBits = 14, nPadding = 6"]},{"entry":[{},{},"175: nTokens = 25, nBits = 7, nPadding = 0"]},{"entry":[{},{},"176: nTokens = 22, nBits = 8, nPadding = 0"]},{"entry":[{},{},"177: nTokens = 16, nBits = 11, nPadding = 1"]},{"entry":[{},{},"178: nTokens = 11, nBits = 16, nPadding = 2"]},{"entry":[{},{},"179: nTokens = 0, nBits = 0, nPadding = 0"]},{"entry":[{},{},"180: nTokens = 20, nBits = 9, nPadding = 0"]},{"entry":[{},{},"181: nTokens = 18, nBits = 10, nPadding = 1"]},{"entry":[{},{},"182: nTokens = 26, nBits = 7, nPadding = 0"]},{"entry":[{},{},"183: nTokens = 15, nBits = 12, nPadding = 3"]},{"entry":[{},{},"184: nTokens = 23, nBits = 8, nPadding = 0"]},{"entry":[{},{},"185: nTokens = 14, nBits = 13, nPadding = 3"]},{"entry":[{},{},"186: nTokens = 13, nBits = 14, nPadding = 4"]},{"entry":[{},{},"187: nTokens = 17, nBits = 11, nPadding = 0"]},{"entry":[{},{},"188: nTokens = 12, nBits = 15, nPadding = 8"]},{"entry":[{},{},"189: nTokens = 27, nBits = 7, nPadding = 0"]},{"entry":[{},{},"190: nTokens = 21, nBits = 9, nPadding = 1"]},{"entry":[{},{},"191: nTokens = 19, nBits = 10, nPadding = 1"]},{"entry":[{},{},"192: nTokens = 24, nBits = 8, nPadding = 0"]},{"entry":[{},{},"193: nTokens = 16, nBits = 12, nPadding = 1"]},{"entry":[{},{},"194: nTokens = 12, nBits = 16, nPadding = 2"]},{"entry":[{},{},"195: nTokens = 15, nBits = 13, nPadding = 0"]},{"entry":[{},{},"196: nTokens = 28, nBits = 7, nPadding = 0"]},{"entry":[{},{},"197: nTokens = 14, nBits = 14, nPadding = 1"]},{"entry":[{},{},"198: nTokens = 22, nBits = 9, nPadding = 0"]},{"entry":[{},{},"199: nTokens = 18, nBits = 11, nPadding = 1"]},{"entry":[{},{},"200: nTokens = 25, nBits = 8, nPadding = 0"]},{"entry":[{},{},"201: nTokens = 20, nBits = 10, nPadding = 1"]},{"entry":[{},{},"202: nTokens = 13, nBits = 15, nPadding = 7"]},{"entry":[{},{},"203: nTokens = 29, nBits = 7, nPadding = 0"]},{"entry":[{},{},"204: nTokens = 17, nBits = 12, nPadding = 0"]},{"entry":[{},{},"205: nTokens = 0, nBits = 0, nPadding = 0"]},{"entry":[{},{},"206: nTokens = 0, nBits = 0, nPadding = 0"]},{"entry":[{},{},"207: nTokens = 23, nBits = 9, nPadding = 0"]},{"entry":[{},{},"208: nTokens = 26, nBits = 8, nPadding = 0"]},{"entry":[{},{},"209: nTokens = 19, nBits = 11, nPadding = 0"]},{"entry":[{},{},"210: nTokens = 30, nBits = 7, nPadding = 0"]},{"entry":[{},{},"211: nTokens = 21, nBits = 10, nPadding = 1"]},{"entry":[{},{},"212: nTokens = 16, nBits = 13, nPadding = 4"]},{"entry":[{},{},"213: nTokens = 15, nBits = 14, nPadding = 3"]},{"entry":[{},{},"214: nTokens = 14, nBits = 15, nPadding = 4"]},{"entry":[{},{},"215: nTokens = 13, nBits = 16, nPadding = 7"]},{"entry":[{},{},"216: nTokens = 27, nBits = 8, nPadding = 0"]},{"entry":[{},{},"217: nTokens = 31, nBits = 7, nPadding = 0"]},{"entry":[{},{},"218: nTokens = 24, nBits = 9, nPadding = 2"]},{"entry":[{},{},"219: nTokens = 18, nBits = 12, nPadding = 3"]},{"entry":[{},{},"220: nTokens = 22, nBits = 10, nPadding = 0"]},{"entry":[{},{},"221: nTokens = 20, nBits = 11, nPadding = 1"]},{"entry":[{},{},"222: nTokens = 17, nBits = 13, nPadding = 1"]},{"entry":[{},{},"223: nTokens = 0, nBits = 0, nPadding = 0"]},{"entry":[{},{},"224: nTokens = 32, nBits = 7, nPadding = 0"]},{"entry":[{},{},"225: nTokens = 28, nBits = 8, nPadding = 1"]},{"entry":[{},{},"226: nTokens = 25, nBits = 9, nPadding = 1"]},{"entry":[{},{},"227: nTokens = 16, nBits = 14, nPadding = 3"]},{"entry":[{},{},"228: nTokens = 19, nBits = 12, nPadding = 0"]},{"entry":[{},{},"229: nTokens = 15, nBits = 15, nPadding = 4"]},{"entry":[{},{},"230: nTokens = 23, nBits = 10, nPadding = 0"]},{"entry":[{},{},"231: nTokens = 33, nBits = 7, nPadding = 0"]},{"entry":[{},{},"232: nTokens = 29, nBits = 8, nPadding = 0"]},{"entry":[{},{},"233: nTokens = 21, nBits = 11, nPadding = 2"]},{"entry":[{},{},"234: nTokens = 26, nBits = 9, nPadding = 0"]},{"entry":[{},{},"235: nTokens = 18, nBits = 13, nPadding = 1"]},{"entry":[{},{},"236: nTokens = 14, nBits = 16, nPadding = 12"]},{"entry":[{},{},"237: nTokens = 0, nBits = 0, nPadding = 0"]},{"entry":[{},{},"238: nTokens = 34, nBits = 7, nPadding = 0"]},{"entry":[{},{},"239: nTokens = 17, nBits = 14, nPadding = 1"]},{"entry":[{},{},"240: nTokens = 30, nBits = 8, nPadding = 0"]},{"entry":[{},{},"241: nTokens = 24, nBits = 10, nPadding = 1"]},{"entry":[{},{},"242: nTokens = 22, nBits = 11, nPadding = 0"]},{"entry":[{},{},"243: nTokens = 27, nBits = 9, nPadding = 0"]},{"entry":[{},{},"244: nTokens = 20, nBits = 12, nPadding = 4"]},{"entry":[{},{},"245: nTokens = 35, nBits = 7, nPadding = 0"]},{"entry":[{},{},"246: nTokens = 16, nBits = 15, nPadding = 6"]},{"entry":[{},{},"247: nTokens = 19, nBits = 13, nPadding = 0"]},{"entry":[{},{},"248: nTokens = 31, nBits = 8, nPadding = 0"]},{"entry":[{},{},"249: nTokens = 15, nBits = 16, nPadding = 9"]},{"entry":[{},{},"250: nTokens = 25, nBits = 10, nPadding = 0"]},{"entry":[{},{},"251: nTokens = 0, nBits = 0, nPadding = 0"]},{"entry":[{},{},"252: nTokens = 36, nBits = 7, nPadding = 0"]},{"entry":[{},{},"253: nTokens = 28, nBits = 9, nPadding = 1"]},{"entry":[{},{},"254: nTokens = 23, nBits = 11, nPadding = 1"]},{"entry":[{},{},"255: nTokens = 21, nBits = 12, nPadding = 3"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}}],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
