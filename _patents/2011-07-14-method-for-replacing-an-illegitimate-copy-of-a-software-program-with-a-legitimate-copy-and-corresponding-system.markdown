---
title: Method for replacing an illegitimate copy of a software program with a legitimate copy and corresponding system
abstract: A method for replacing an illegitimate copy of a software program with a legitimate copy is provided, the method including: determining metadata of a first software program running on a computer; transmitting a patch from a first server to the computer, if the metadata does not correspond to metadata of a legitimate copy of the software program; generating a second software program by replacing at least a part of the first software program with the patch; displaying a graphical user interface using code components of the patch and asking a user for an authentication token; acquiring the authentication token from a second server; verifying the authentication token; and labeling the second software program as a legitimate copy if the authentication token is verified. A corresponding system is also provided.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09038057&OS=09038057&RS=09038057
owner: SONY DADC Austria AG
number: 09038057
owner_city: Anif
owner_country: AT
publication_date: 20110714
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"p":["The invention relates to a method for replacing an illegitimate copy of a software program with a legitimate copy, a corresponding system and a software patch stored on a non-transitory medium","The use of illegitimate copies of software programs is not only a copyright infringement but also a severe concern of software producers and software developers, since they loose a lot of money due to the un-authorized distribution of their intellectual property. Therefore, a plurality of techniques have been developed, which identify illegitimate copies of software programs and, afterwards, disallowing certain features of the software program, for instance update functionality or online play or preventing the overall usage of the software program. However, with these known techniques it is only possible to hinder a user of an illegitimate copy of the software program to use it or at least to decrease the usability of the software program.","Thus, there is a need for providing a method and a system for changing a user of an illegitimate copy of the software program into a user of a legitimate copy of the software program.","The object is solved by a method for replacing an illegitimate copy of the software program with a legitimate copy according to claim 1, a corresponding system according to claim 13 and a software patch according to claim 15.","Further embodiments are defined in the dependent claims.","Further details of the invention will become apparent from the consideration of the drawings and ensuing description.","In the following, embodiments of the invention are described. It is important to note that all described embodiments in the following and their properties and technical features may be combined in any way, i.e. there is no limitation that certain described embodiments, properties and technical features may not be combined than others.","In  method steps according to an embodiment of the invention are depicted which might be understood more easily when described in combination with an embodiment of the system shown in .","In step S metadata from characteristics of a first software program  stored on a storage medium of a computer  is determined, e.g. by a metadata determination unit . Metadata might be determined by determining hash values of the first software program  files, or for instance taking into account a version number of the software program, a language, a digital signature or a build time-stamp of the first software program. The term \u201ccomputer\u201d shall refer as well to devices including micro-processors, e.g. consoles, hand-helds, cellular phones or personal computers for which illegitimate copies of software programs might be distributed. The storage medium might be a local drive, a network drive, a disc or a memory drive.","A hash function is any well-defined procedure or mathematical function that converts a large, possibly variable-sized amount of data into a small datum, usually a single integer. The values returned by a hash function are called hash values, hash codes, hash sums, checksums or simply hashes. This function might be implemented in the software program  to calculate the hash values of the main executable or any other file(s) from the software program .","The used metadata should reflect features of the software program that are changed when an illegitimate copy of the software program is produced. For instance, when an illegitimate copy is generated, copy protection parts of the software program might be removed so that the illegitimate software program can be distributed freely. Copy protection parts may be copy protection or digital rights management modules, envelopes or layers. Beside this, illegitimate copies of software programs often have files removed or compressed and digital signatures are removed or further files are added.","For instance, the copy protection parts might include an individual customer project application (CPA) number for a respective software program. In order to identify different versions of the software program intended for different territories or languages a transaction number may also be used. In some embodiments of the invention, both, the CPA and the transaction number are available by using an application programming interface (API) when the copy protection is still present, i.e. a legitimate copy or version of the software program is used. However, when the copy protection is removed, the corresponding API would return a different number or no value at all. Consequently, the CPA together with the transaction number might be used as the metadata to distinguish between an illegitimate copy and a legitimate copy.","For instance, the software program comes with intro movies stored in a lossless video format, often for the illegitimate copy of the software program such video files are re-encoded with a video format allowing higher compression to reduce the size of the software program for easier online distribution. The size as well as the changed hash value of such multimedia files (i.e. movie, audio, textures) can be used as metadata to distinguish between the legitimate copy of the software program and the illegitimate copy of the software program.","For instance, the software program comes with files like readme text files, etc. Often such files are completely removed for the illegitimate copy of the software program, but other files are added. These changes in the file structure in an installation folder of the software program can also be considered as metadata.","For instance, the executable of a software program as well as software libraries (i.e. dll files) have data embedded called resources, which are read-only and usually set during compilation of the software program. Each resource has a type and a name, both being either numeric identifiers or strings. These values are often changed for the illegitimate copy of the software program. The values of the resources of the software program can also be considered as metadata.","For instance, the executable of a software program as well as software libraries (i.e. dll files) might be digitally signed. The signature is applied by the developer or the publisher of a software program. A signature is a mathematical scheme for demonstrating the authenticity of a digital message or document. A valid digital signature gives a recipient reason to believe that the message or content was created by a known sender, and that it was not altered in transit. It is comparable to a seal and is destroyed if the executable of a software program or a software library is altered for the illegitimate copy of the software program. The existence and integrity of such a signature can also be considered as metadata.","The software program might be a software application, like e.g. a word processing program, a table sheet calculation program, or a game application. The metadata determination unit  might be a separate unit or might be included in the first software program .","It is also possible to determine metadata of the first software program  by a third party software application , for instance, a games platform, an antivirus software or an operating system software or a software library.","In a step S it is checked whether the determined metadata of the first software program  corresponds to metadata of a legitimate copy, e.g. is equal to metadata of a legitimate copy. Metadata of the legitimate copy might be stored in the first software program  or might be provided as a service stored in a local or remote database table. For instance, it is possible that the metadata of the legitimate copy is stored in a first server  to which the determined metadata of the first software program  is transmitted.","If the metadata determined from characteristics of the first software program  does not correspond to the metadata of a legitimate copy in a step S a patch or software patch  is transmitted to the computer . The term patch or software patch  is used to describe a piece of software for updating a computer program or its supporting data. For instance, the patch can contain an updated legitimate executable, software libraries and data files.","The patch  includes a first patch component  and a second patch component . The first patch component  is used to replace at least a part of the illegitimate copy with a legitimate software component  and the second patch component  provides for instance a graphical user interface  (GUI) like an authentication dialog, authentication email, short message service (SMS) or multimedia message service (MMS) for submitting information to a user of the software program.","The patch  might be configured as an archive. Then, the archive has to be unpacked into the software's installation directory on a writable medium used by the computer, e.g. a hard disc, memory stick, USE stick and overwrites the files of the illegitimate copy with genuine files of the legitimate copy. Unpacking and execution (including overwriting such files) of the patch may be performed automatically by the first software program  or by the third party software application  as explained in more detail with regard to first to fourth scenarios below.","In a first scenario, the first software program  downloads the patch , for instance from a webserver, a local drive, a network drive, a disc or a memory drive and stores it on the computer , wherein the patch  is configured as a setup\/installer program. Afterwards, the first software program  executes the patch , for instance with the windows API (application program interface): ShellExecute. While executed, the patch  copies (and might overwrite) files to a software program installation directory and generates a second software program  including the legitimate software component .","In a second scenario, the first software program  downloads the patch , for instance from a webserver, a local drive, a network drive, a disc or a memory drive and stores it on the computer , wherein the patch  is configured as an archive. Afterwards the first software program  extracts (e.g. un-zips) files from the archive (and might overwrite existing files) to the first software program installation directory and generates the second software program  including the legitimate software component .","In a third and fourth scenario, the patch is downloaded via the third party software application , for instance from a webserver, a local drive, a network drive, a disc or a memory drive and stored on the computer .","In the third scenario, the patch  is configured as a setup\/installer program and after being stored on the computer , it is executed by the third party software application , for instance with the windows API: ShellExecute. While executed, the patch  copies (and might overwrite) files to the first software program installation directory and generates the second software program  including the legitimate software component .","In the fourth scenario, the patch  is configured as an archive, and after being stored on the computer , it is extracted (unzipped) by the third party software application  (and might overwrite existing files) to the first software program installation directory and generates the second software program  including the legitimate software component .","Consequently, the second software program  is generated by applying the patch  to the first software program .","It is also possible that after detecting an illegitimate copy on the computer , information about an update for the software program is transmitted to the computer  and displayed to the user. If the user requests the download and installation of the update, the patch  is delivered to the user and either installed automatically or after confirmation by the user.","The use of the first patch component  when replacing at least a part of the illegitimate copy results in the second software program  with the corresponding metadata of a legitimate copy. In addition the graphical user interface  is provided. The graphical user interface , for instance can show a dialog offering a trial period for testing the legitimate copy of the software program and provide the possibility to acquire (i.e. purchase) an authentication token (i.e. serial number). Software programs using this feature are also called \u201ctry and buy\u201d software. In S the graphical user interface  is displayed and the user is asked for an authentication token. If no correct authentication token is inputted, the second software program  can not be used.","The display of the graphical user interface  might be started not immediately after the second software program  has been generated, but only after a predetermined amount of time, e.g. use time of the legitimate copy has been elapsed. Thereby, there is a higher likelihood that a user will get accustomed to the software and, therefore, the user is interested in paying for using it further.","By displaying the graphical user interface  to the user, the user might be informed that he can buy a legitimate copy of the software program or unlock the software program, if the user already owns a legitimate authentication token for the respective software program. The second patch component  can e.g. show a link to an online shop or can describe any other way of acquiring a legitimate authentication token.","The user may acquire the authentication token in S from a second server . Afterwards, the authentication token is verified in S. The authentication token might be a serial number, alphanumeric key, purchase bound to a user account, license file or a similar authentication code.","If the authentication token is positively verified, the second software program  is labeled as a legitimate copy of the software program in S. The verification may be performed by a third server  or by a verification software component implemented in the second software program . The labeling might include ensuring that the metadata of the second software program  corresponds to the metadata of the legitimate copy. It might further include an additional information based on the positive verification.","In order to transmit the patch  to the computer  in the embodiment of the system according to  the first server  includes an address, e.g. a URL\/URI (Uniform Resource Locator\/Uniform Resource Identifier) of a separate archive , through which for instance a server or local program is adapted to transmit the patch  to the computer  (i.e. download from server or copy from software program installation device like a DVD).","In accordance to a further embodiment, depicted in , the illegitimate copy  of the software program includes an archive  which is adapted to provide the patch  including the first patch component  and the second patch component . The archive  might be referred to by providing a respective address, e.g. a URL\/URI  to data stored in the first server . According to the embodiment depicted in  the authentication token is also acquired from a second server  and verified thereafter.","With this embodiment less data has to be transmitted from a distant server to the computer , because it is not necessary to transmit the whole patch  to the computer , since it is already present in the illegitimate copy . Therefore, the download time is reduced and the publisher or online retailer of the software program may have reduced or no costs for hosting the archive and for downloading.","However, in accordance to the further embodiment depicted in  it might also be possible that the first server  includes an authentication token providing unit  that might be addressed by the second software program  of the computer  and might provide an authentication token to it.","With the proposed method and system it is possible to implement the following embodiments.","In an embodiment the original version of a game application is installed to the hard disk drive of a computer . A user may download an illegitimate (cracked or pirated) executable file(s), libraries and other files and replaces the original, genuine files with the illegitimate copy. This action might circumvent the protection scheme of the original version of the personal computer game. After two hours of game play the game application launches a software component  which calculates the metadata of the game application (including the illegitimate executable) and sends it to the server  which recognizes the running game application as a \u201ccracked\u201d version, i.e. an illegitimate copy. The software component  stops the actual game application and replaces the illegitimate copy with a genuine one located in the installation folder of the game application and adds a dynamic link library (DLL) which shows a dialog through the GUI upon the next start of the game application indicating where to acquire an authentication token e.g. a serial number for the game application and which also performs an online activation (authentication for a serial number or alphanumeric key on a remote server, this may be performed by using a secure channel between the client personal computer and the activation server transferring xml-based requests and responses).","A further example is that the original version of a software program is installed to the hard disc drive of a computer . A user may download an illegitimate (cracked or pirated) executable and replaces the original, genuine executable with the illegitimate copy. This action also circumvents the protection scheme of the original version of the software. Afterwards, the user downloads and runs auto-patching software (provided by the publisher\/developer or distributor of the software or by any authorized third party company). The auto-patching software calculates metadata of the application (including the illegitimate executable copy) and transmits it to a server  which recognizes the installed software as a cracked version, i.e. an illegitimate copy. The auto-patching software replaces the illegitimate copy with a genuine copy downloaded from a given URL (web server)  and adds a dynamic link library (DLL) to the installation folder of the software which might show a dialog on the next game start where to create and buy a user account for the personal computer game and which also performs an online activation (authentication for given credentials of a user account). For instance, this involves a user account server where the user of the personal computer creates a user account and procedure to purchase software and bind it to this user account.","It is also possible to store user data that has been acquired while running the illegitimate copy and allowing the use of the stored user data when later running the legitimate copy. With this embodiment it is possible to provide a user with added value when he changes from the illegitimate copy to the legitimate copy, because e.g. user setting might be re-used or levels in an adventure game that have been solved when running the illegitimate copy might be considered to be solved when running the legitimate copy, too, so that the user does not have to replay the levels again. The patch may execute code components that identify and extract user data acquired while running an illegitimate copy. The extracted user data may then be inserted or compiled into code components of the generated legitimate copy and stored in the computer.","With the proposed method and system nonpaying customers can be turned easily into paying customers. It is easy to prevent unauthorized usage of the metadata, because it is easy to change the metadata and\/or the hash function that is used for checking whether a legitimate copy is present and in addition, it is also possible to easily change the archive location of the genuine files of the legitimate copy. For instance, said metadata and\/or hash function may be changed upon every execution of the check by metadata determination unit ,  or after the version of the metadata determination unit ,  is changed.","The metadata values for both the original version of a software program as well as illegitimate copies are stored on the server  and can be updated after new illegitimate copies are distributed. This ensures complete coverage and individual patching possibilities for each illegitimate copy."],"heading":["BACKGROUND","DETAILED DESCRIPTION"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
