---
title: Protecting archive structure with directory verifiers
abstract: An archive of an object set may include various security features that enable a detection of alterations of the contents of the objects. However, the security measures of an archive may fail to detect an inadvertent or intentional alteration of the structure of the object set, including the addition of new objects, changes to the metadata (e.g., the name, position within the object set, and location and size within the archive) of respective objects of the object set, and the deletion of directory entries for the objects. Therefore, an archive may be generated with verifiers (e.g., hashcodes) calculated not only for the contents of objects, but for the directory of the archive, and may be included in the signature of the archive. This verification may extend the detecting of alteration of the archive to include the structure of the archive as well as the contents of the objects contained therein.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08839446&OS=08839446&RS=08839446
owner: Microsoft Corporation
number: 08839446
owner_city: Redmond
owner_country: US
publication_date: 20110912
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["Within the field of computing, many scenarios involve an archive comprising a set of one or more objects (e.g., files, media objects, database records, or email messages), possibly including other features, such as compression, encryption, random accessibility, revision tracking, and a hierarchical organization. In many such scenarios, the archive includes security verifiers that may be used to verify the contents of the archive. As a first example, a hashing algorithm may enable a hashcode to be calculated as a value derived from the contents of the stored data at the time that the archive was created. At a later time, the contents of the archive may be tested for consistency by using the same hashing algorithm to calculate a current hashcode value for the archive and comparing the two values. Because any change in the data comprising the archive results in a different calculated hashcode, a failed comparison indicates a change somewhere in the data, while a successful comparison indicates a consistent object. In some cases, a change in the object may occur in an arbitrary manner (e.g., data corruption, damage to the physical medium containing the object, or an error in the reading or writing of the object), but in other cases, the change may be caused by a second user who has maliciously changed the object. Therefore, it may be desirable to design the archive to render changes unavoidably detectable. For example, the hashcode may be cryptographically signed with a self-authenticating signature, and the signature may be added to the archive. A user who receives the archive may verify the integrity of the signature (e.g., against a public key corresponding to a private key with which the archive was signed), the integrity of the hashcode signature, and the correspondence of the hashcode with the contents of the archive. The failure of any of these verifications or the absence of these authentication items may indicate an intended or inadvertent alteration of the archive, while a success of these verifications may verify the integrity of the archive with a high degree of confidence.","This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key factors or essential features of the claimed subject matter, nor is it intended to be used to limit the scope of the claimed subject matter.","While many archives feature security mechanisms that enable the protection and verification of particular objects of an archive, such security mechanisms may fail to protect the structure of the archive. In particular, the archive may include a directory that indicates the names, starting locations, and destination locations of respective objects, and that may be vulnerable to many types of alterations. As a first example, various forms of data corruption (e.g., damage to the physical medium containing the archive, or an error in the reading or writing of the archive) may result in damage to the directory that may result in an alteration of the extracted object set. It may be advantageous to detect this data corruption in order to initiate a repair the archive. As a second example, apart from tampering with the objects of the archive, an interfering user may alter the archive to remove objects from the directory; while the data comprising the objects remains in the archive, the objects cannot be located or extracted, and indeed may not even be included in an enumeration of the objects of the object set. Additionally, objects may be inserted in the archive and added to the directory, or the entries for objects may be altered (e.g., altering the name or location to be applied to an extracted object, or altering the size of an object to cause a truncation, padding, or an error during extraction). Many such alterations, both intentional and inadvertent, may be made to the structure of an archive, but the security mechanisms applied to the archive may not enable a detection of such alterations, and may therefore expose the archive to corruption and\/or manipulation.","Presented herein are techniques for protecting the structure of an archive. Such mechanisms may be provided in the absence of security measures protecting the content of the archive, in addition to different security content-based security measures, and\/or invoking similar security mechanisms in order to achieve the protection of the structure of the archive as well as the content. In accordance with these techniques, while generating the archive, a verifier algorithm may be applied to a directory of an archive in order to compute a directory verifier (e.g., a hashing algorithm applied to generate a hashcode of the directory). A self-authenticated signature of the archive may be generated that includes the directory verifier, and the signature may be stored in the archive.","Upon extracting the archive, an embodiment may authenticate the signature, and may then verify the directory with the directory verifier (e.g., by using the verifier algorithm to calculate a current verifier, such as a current hashcode, of the directory of the archive, which may be compared with the directory verifier included in the signature). A missing signature or directory verifier, a failure of the authentication of the signature, or a mismatch between the stored directory verifier and the current directory verifier may indicate an alteration of the structure of the archive, while a successful authentication of the signature and matching of the stored directory verifier with the current directory verifier may indicate, with a high degree of confidence, a preservation of the integrity of the structure of the archive (e.g., that the structure of the archive has not changed since the archive was generated and signed).","To the accomplishment of the foregoing and related ends, the following description and annexed drawings set forth certain illustrative aspects and implementations. These are indicative of but a few of the various ways in which one or more aspects may be employed. Other aspects, advantages, and novel features of the disclosure will become apparent from the following detailed description when considered in conjunction with the annexed drawings.","The claimed subject matter is now described with reference to the drawings, wherein like reference numerals are used to refer to like elements throughout. In the following description, for purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of the claimed subject matter. It may be evident, however, that the claimed subject matter may be practiced without these specific details. In other instances, structures and devices are shown in block diagram form in order to facilitate describing the claimed subject matter.","A. Introduction","Within the field of computing, many scenarios involve the generation of an archive comprising a set of objects. The archive may comprise a single object, a set of objects, or a collection of objects having a structure, such as a hierarchy, and may comprise a variety of objects such as files, database records, media objects, or email messages. The archive may comprise a simple encapsulation of a single object, an aggregation of a set of objects, or an interactive archive, such as a deployment package for the resources of an application, and may also provide other features such as compression, encryption (such that only trusted processes and individuals may examine or access the contents of the archive), random accessibility, the including of metadata, archive update capabilities, and version tracking.","In many such scenarios, it may be desirable to verify that the contents of the archive have not been changed since the archive was generated. Such changes may be inadvertent, e.g., by a failure of the physical medium storing the archive, an error during a read or write to or from the physical medium, or an error during a transmission of the archive over a network or bus. Alternatively, the change may have been intentional; e.g., a malicious process or individual may have changed the contents of the archive, and moreover may endeavor to conceal the change. Therefore, mechanisms may be devised to detect inadvertent and intentional changes to the contents of an archive after generation, and particularly in an unavoidable manner (e.g., such that changes to the archive result in an unavoidable indication of the change, and a preservation of the archive results in an indication of authenticity).",{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 1","b":["100","102","104","106","106","104","108","110","102","112","110","114","106","104","116","106","104","118","106","104","110","102","110","120","102","102","104"]},"In order to facilitate a detection of such corruption of the objects  of an object set , an archive  may include various security measures. As one example, an archive  may include a signature  generated with a signing algorithm  that may be used to authenticate the objects  of the archive , such as an implementation of the Rivest-Shamir-Adleman (RSA) encryption algorithm and an asymmetric key pair, where a private key accessible only to the individual generating the archive may be used to sign generate a signature for a data set that may be verified using the public key of the key pair, and that may be difficult to forge without access to the private key. Moreover, the signature may be self-authenticating; e.g., the (freely distributable) public key may enable a verification that the signature is intact and was generated by an individual or process having access to the private key. The signing algorithm may enable a signing of the archive  that may facilitate a later determination of the integrity of the archive . For example, while generating the archive , a device may use a verifier algorithm to generate object verifiers (e.g., hashcodes) of respective objects  of the object set  stored in the archive , such as a hashing algorithm used to generate a hashcode the contents of each object . Moreover, the object verifiers may be (individually or collectively) signed with the signing algorithm, and the object verifiers and the signature may both be included in a reserved portion of the archive . At a later time, the integrity of the archive  may be tested. For example, the signature may first be extracted from the reserved portion of the archive  and may be authenticated using the signing algorithm (e.g., with a public key separately provided by the preparer of the archive ). Next, the object verifiers may be extracted from the reserved portion of the archive , and verified with the signature. The verifier algorithm may then be used to generate current object verifiers of the objects  of the archive , and may be compared with the object verifiers extracted from the archive . If the signature is authenticated, and the object verifiers are verified using the signature , and the object verifiers match the respective recalculated and current verifiers of the objects  of the object set , the objects  stored in the archive  may be presumed to be consistent and unmodified since the generation of the archive . However, the absence of the signature  or object verifiers, or the failure of any of the authentication and\/or verifications, may indicate that the archive  has been compromised in some manner.","In this manner, the contents of the objects  stored in many archives are protected by a signing mechanism. However, the coverage of protection provided by this mechanism may be limited to the contents of the objects  stored in the archive  at the time of generation, and may not cover other aspects of the object set . In particular, the archive  may include a directory that indicates, within the archive , the names of respective objects  stored in the archive , the relationships of the objects  to the object set  (e.g., a relative position of the object  within a hierarchical structure of the object set ), and the start locations (e.g., offsets) of the objects  within the archive . If the archive  does not protect the directory, many alterations may be inadvertently or intentionally made to the archive , and may be difficult to detect using the security mechanisms included in the archive . As a first example, the entry for an object  may be removed from the directory. While the contents of the object  may remain fully stored in the archive , if the extraction of the object set  involves enumerating the objects  listed in the directory and iteratively extracting each object , then the removal of the directory entry for the object  may result in an omission of the object  from the extracted object set . Moreover, if the metadata describing the object  is not redundantly stored in the archive  (e.g., in a local header preceding the object ), it may be difficult to recover the object  or repair the removal of the entry; indeed, the block of the archive  storing the data for the object  may appear unrecognizable as an object. As a second example, the entry in the directory for an object  may be edited, e.g., to change the name or location of the object  when extracted, or to cause one object  of the object set  to be extracted from the archive  with the contents of another object  of the object set . Indeed, changing the size or offset entry in the directory entry for the object  may result in an incorrect reading of the object, such as a truncation, an appending to an extracted object  of the data following the object  in the archive , or an error while extracting the object . For example, editing the directory entry for an object  may result in a mismatch of an object  and the verifier calculated for an object , even if neither item has changed since the archive  was generated. As a third example, additional entries may be added to the object set  in order to create duplicates of objects  existing in the archive , or to add objects  to the object set  that are appended to the archive . These alterations may be achieved without changing the contents of the objects  of the archive  or of the signature or verifiers stored in the archive , and may not be detectable through the verification of the security mechanisms included in the archive .","B. Presented Techniques","The techniques presented herein relate to security mechanisms generated and utilized to protect the structure of an archive  (e.g., the inclusion of authorized objects  in the archive ; the exclusion of unauthorized objects from the archive ; and the metadata of such objects , such as the names and locations of such objects  in a hierarchical or other structure of the object set ). In such archives , the contents of the object set  (e.g., the contents of the objects  of the object set ) may already be protected, e.g., through the generation and inclusion of object verifiers (such as a hashcode) for respective objects  of the object set , as well as a signature that may be authenticated and used to verify the object verifiers. In accordance with these techniques, the archive  may include a directory for which a directory verifier may be generated with a verifier algorithm, and may also be signed with the signing algorithm. The signature may be specific to the directory verifier of the directory, or may include one or more object verifiers of objects  of the object set . The directory verifier may be included in the archive , and a later verification of the structure of the archive  by be performed by extracting and authenticating the signature, extracting the directory, calculating a current directory verifier (using the same verifier algorithm), and comparing the current directory verifier with the directory verifier stored in the signature. A missing signature or the directory verifier, a failure to authenticate the signature, or a mismatch of the directory verifier stored in the signature with the current directory verifier of the directory may be presumed as an indication that the structure of the archive  has been altered (inadvertently or intentionally) since the archive  was generated. Conversely, an authentication of the signature and a matching of the current directory verifier and the directory verifier stored in the signature may indicate, with a high degree of confidence, a preservation of the integrity of the archive  since the generation and signature thereof. In this manner, both the content of the archive  (e.g., the contents of the objects ) and the structure of the archive  (e.g., the enumeration, names, locations, sizes, and offsets within the archive  of the objects ) may be verified according to the techniques presented herein.",{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 2","b":["200","102","200","104","106","102","202","206","102","206","208","106","104","106","104","102","210","106","104","102","210","106","106","106","108","104","106","102","106","102","106","206","212","210","202","208","212","204","208","212","204","102","204","106","104","106","104"]},{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 3","FIG. 2"],"b":["300","102","102","102","200","106","210","204","212","202","206","102","102","204","202","208","212","204","208","206","304","104","102","308","304","208","204","308","106","104","102","212","206","304","210","102","308","304","212","204","304","204","306","204","104","102","212","204","308","104","106","104","102","102","204","102"]},"C. Exemplary Embodiments",{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 4","b":["400","102","104","400","206","202","400","402","404","406","102","106","104","210","106","106","104","106","106","108","104","408","206","410","208","106","412","212","210","202","414","204","208","212","416","204","102","102","418"]},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 5","b":["500","102","104","106","210","104","500","206","202","500","502","504","102","506","204","208","212","202","508","204","206","510","210","212","206","512","104","208","500","102","514"]},"Still another embodiment involves a computer-readable medium comprising processor-executable instructions configured to apply the techniques presented herein. Such computer-readable media may include, e.g., computer-readable storage media involving a tangible device, such as a memory semiconductor (e.g., a semiconductor utilizing static random access memory (SRAM), dynamic random access memory (DRAM), and\/or synchronous dynamic random access memory (SDRAM) technologies), a platter of a hard disk drive, a flash memory device, or a magnetic or optical disc (such as a CD-R, DVD-R, or floppy disc), encoding a set of computer-readable instructions that, when executed by a processor of a device, cause the device to implement the techniques presented herein. Such computer-readable media may also include (as a class of technologies that are distinct from computer-readable storage media) various types of communications media, such as a signal that may be propagated through various physical phenomena (e.g., an electromagnetic signal, a sound wave signal, or an optical signal) and in various wired scenarios (e.g., via an Ethernet or fiber optic cable) and\/or wireless scenarios (e.g., a wireless local area network (WLAN) such as WiFi, a personal area network (PAN) such as Bluetooth, or a cellular or radio network), and which encodes a set of computer-readable instructions that, when executed by a processor of a device, cause the device to implement the techniques presented herein.","An exemplary computer-readable medium that may be devised in these ways is illustrated in , wherein the implementation  comprises a computer-readable medium  (e.g., a CD-R, DVD-R, or a platter of a hard disk drive), on which is encoded computer-readable data . This computer-readable data  in turn comprises a set of computer instructions  configured to, when executed by a processor  of a device , cause the device  to operate according to the principles set forth herein. In one such embodiment, the processor-executable instructions  may be configured to perform a method of generating an archive , such as the exemplary method  of . In another such embodiment, the processor-executable instructions  may be configured to cause the device  to perform a method of verifying the content and the structure of an archive , such as the exemplary method  of . Some embodiments of this computer-readable medium may comprise a nontransitory computer-readable storage medium (e.g., a hard disk drive, an optical disc, or a flash memory device) that is configured to store processor-executable instructions configured in this manner. Many such computer-readable media may be devised by those of ordinary skill in the art that are configured to operate in accordance with the techniques presented herein.","D. Variations","The techniques discussed herein may be devised with variations in many aspects, and some variations may present additional advantages and\/or reduce disadvantages with respect to other variations of these and other techniques. Moreover, some variations may be implemented in combination, and some combinations may feature additional advantages and\/or reduced disadvantages through synergistic cooperation. The variations may be incorporated in various embodiments (e.g., the exemplary method  of  and the exemplary method  of ) to confer individual and\/or synergistic advantages upon such embodiments.","D1. Scenarios","A first aspect that may vary among embodiments of these techniques relates to the scenarios wherein such techniques may be utilized. As a first variation of this first aspect, these techniques may be implemented in many types of archive generators and\/or archive extractors, including standalone executable binaries invoked by users and\/or automated processes, an executable binary included with a self-extracting archive , a storage system such as a file system or a database system, a server such as a webserver or file server, a media rendering application, and an operating system component configured to compress objects  stored on storage devices.","As a second variation of this first aspect, the archives  may include many types of objects , including media objects such as text, pictures, audio and\/or video recordings, applications, databases, and email stores. Additionally, such objects  may be stored in volatile memory; on locally accessible nonvolatile media (e.g., a hard disk drive, a solid-state storage device, a magnetic or optical disk, or tape media); or remotely accessed (e.g., via a network). In particular, the techniques presented herein may be useful for accessing objects  of archives  in scenarios wherein the reduction of seeks and reads within the archive  may considerably improve the performance of the accessing. As a first example, where the objects  are stored in archives  accessed over a network, the latency and comparatively low throughput of the network (particularly low-bandwidth networks) may noticeably improve the performance of the accessing. As a second example, the accessing of objects  within archives  on a device having limited computational resources (e.g., a portable device having a comparatively limited processor) may be noticeably improved through the use of the techniques presented herein.","As a third variation of this first aspect, these techniques may be used with archives  of many different types and specifications, including a uuencode\/uudecode format, a tape archive (tar) format, a GNU Zip (gzip) archive format, a CAB archive format, and a ZIP archive format, and a Roshal Archive (RAR) format, or any variant thereof.","As a fourth variation of this first aspect, these techniques may be utilized to compress many types of objects  in an archive , including text documents, web documents, images, audio and video recordings, interpretable scripts, executable binaries, data objects, databases and database components, and other compressed archives. A particular type of object  that may be advantageously stored according to the techniques presented herein is a media object that is to be rendered in a streaming manner. In such scenarios, a user or application may often utilize seek operations to access different portions of the object ; and as compared with sequential-access techniques, the random access enabled by the techniques presented herein may considerably improve the access rate for various portions (particularly latter portions) of an object . Those of ordinary skill in the art may devise many such scenarios wherein the techniques presented herein may be advantageously utilized.","D2. Generating an Archive","A second aspect that may vary among embodiments of these techniques relates to manner of generating an archive . As a first variation of this second aspect, many types of signing algorithms  may be utilized to generate and\/or authenticate many types of signatures , including a variant of the Rivest-Shamir-Adleman (RSA) algorithm or a Rabin signature algorithm. Such algorithms may also generate the signature as many types of certifying credentials, such as asymmetric key pairs and digital certificates. Some embodiments of these techniques may support several signing algorithms , and a user generating the archive  may be permitted to specify, or even provide, a selected signing algorithm  and\/or signature , and the identity of the selected signing algorithm  may be recorded in the archive . Additionally, the signature  may be generated to include one or more verifiers. For example, the signature  may include a protected data region, and the object set verifier  and\/or directory verifier  may be included therein. Alternatively, the signature  may be packaged, associated, or loosely aggregated with such verifiers.","As a second variation of this second aspect, many types of verifier algorithms  may be utilized to generate many types of verifiers, including many types of hashing algorithms (e.g., MD5, RIPEMD, and SHA-256) generating cryptographic hashcodes. Additionally, an embodiment of these techniques may support several verifier algorithms , and a user generating the archive  may be permitted to specify, or even provide, a selected verifier algorithm . The identity of the selected verifier algorithm  may be recorded in the archive . As another variation, different verifier algorithms  may be used to calculate different verifiers (e.g., a first verifier algorithm  calculating the directory verifier  of the directory  and a second verifier algorithm  calculating the object set verifier  of the object set  and\/or the). Moreover, it may be advantageous to utilize two or more verifier algorithms  to generate two or more object set verifiers  for the object set . As a first example, the verification of any particular data set may be performed using several verifiers; e.g., a verifier of a data set may comprise a combination of a first data set verifier calculated for the data set with a first verifier algorithm  and a second data set verifier calculated for the same data set with a second, different verifier algorithm , and the verification of the verifier may be performed by verifying the first data set verifier with the first verifier algorithm  and the second data set verifier with the second verifier algorithm . As a second example, verifiers may be calculated for sets of blocks of different granularities (e.g., a first hashcode for a set of ten objects , and a second hashcode for respective single objects  of the object set ), thereby enabling a rapid initial identification of the general areas of an object  that have been altered, with a zeroing-in on a changed portion of an object  by comparing hashcodes of finer granularities of the blocks  of the object . As a third example, if one verifier algorithm  becomes untrusted (e.g., if an exploit is identified whereby verifiers may be forged, or where changes to data sets may be engineered that do not change the verifier computed by the verifier algorithm ), the verification may be performed by relying on the verifiers computed by other verifier algorithms.","As a third variation of this second aspect, the many techniques may be utilized to organize the objects  of the object set  within the archive . As a first example, the object set  may be organized within the archive  in many ways, such as a single block of data for a single object , an unordered set of objects , a sequence of objects , or a hierarchical structure  of objects . Moreover, the structure within the archive  may match the structure of the objects  when extracted from the archive , or may differ from the structure outside of the archive , optionally including or omitting information about such structure in order to enable or disable, respectively, the restoration of this structure when the object set  is extracted from the archive . As a second example, the structure may be implied, or may be expressed in various aspects of the archive , such as a central directory stored in a particular location of the archive , and\/or a set of local headers preceding the respective objects  of the archive . Moreover, the structure of the archive  may store various types of metadata about the objects  stored therein, such as a distinctive identifier such as a name, a location outside of the archive , a location of the object  within the archive  (e.g., start address or offset within the archive  of the object  and\/or the local header thereof), and the size and dates of creation and modification of the object .","As a fourth variation of this second aspect, the object set verifier  of the object set  may be generated in various ways. As a first example, one object set verifier  may be calculated for the entire object set . As a second example, a set of object verifiers may be calculated for respective objects  of the object set , or for respective subsets of objects  of the object set . As a third example, the archive  and\/or object set  may be segmented into blocks of particular sizes, and a block verifier may be calculated for each block of the archive . Many variations in the segmentation of the object set  into blocks may be utilized. As a first such example, the data comprising the archive  may be apportioned into blocks at regular intervals, such as 64 kb blocks, in a flexible manner (e.g., using Rabin fingerprints), or according to a structure of the archive . Alternatively, the archive  may comprise discrete units, such an object set  including objects  organized according to a hierarchical structure , and each discrete unit may be segmented into blocks (e.g., each object  of the object set  may be segmented into a sequence of blocks). Moreover, where the data is transformable (e.g., where the data of an archive  is compressed and may be transformed into an uncompressed version, or where the data of an archive  is encrypted and may be decrypted into a plaintext version), the segmentation into blocks may be applied to either the version of the data included in the archive  (e.g., to each compressed and\/or encrypted object ) or to the transformed data (e.g., to each uncompressed and\/or decrypted object ). In these and other examples, the block verifiers may be included in the archive  in various ways; e.g., in the signature  or individually recorded in the archive . In one such embodiment, the block verifiers may be stored in a block map, which may be added to the archive  as an object  of the object set , and a block map verifier may be calculated (using the verifier algorithm ) and stored in the signature .","As a fifth variation of this second aspect, the signature  may be included in an archive  in many ways. For example, the format of the archive  may include a reserved portion that is specially allocated for a signature , and the signature  (and optionally other items, such as a block map) may be encoded in the reserved portion of the archive . Alternatively, the signature  (and\/or the block map) may be added to the archive  as objects  of the object set  (e.g., indexed in a central directory of the archive  in a similar manner as other objects  of the object set ). This variation may enable the generation of an archive  according to the techniques presented herein even if the archiving utility is not compatible with such techniques; e.g., the signature  and block map may be generated by a separate utility as separate objects , and the archiving utility may be invoked to add these additional objects  to the archive .","As a sixth variation of this second aspect, the archive  may be generated with additional features. As a first such example, the archive  may be designed to facilitate random access to the objects  of the object set , including random access within such objects  of the object set , while reducing the amount of extraneous reads and seeks involved in achieving such random access. As a second such example, the archive  may be designed to support updating and\/or versioning, e.g., the addition of objects  or the replacement of objects  with updated objects . As a third such example, the archive  may include an object set verifier , e.g., a hashcode or other verifier computed for the entire object set  (including the object set  and the directory ), which may enable a determination of whether any portion of the archive  has been altered.",{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 7","b":["700","102","700","104","106","102","206","202","102","106","104","702","206","704","702","706","704","702","706","102","106","104","210","102","106","706","102","206","708","706","207","710","102","702","106","706","21","202","204","212","708","710","102","106","104","204","104","102","204","210","212","210","204","210","204","210","102","102","102","102"]},"D3. Verifying Archives and Objects","A third aspect that may vary among embodiments of these techniques relates to the verification of archives  and objects . As a first variation of this third aspect, the verification may be requested by a user to verify the objects  of the archive  in many circumstances. As a first such circumstance, a device may store a first version of a particular data set, and the archive  may comprise a second version of the data set that including a data set update that may be applied over the first version of the data set to achieve the update. The verification may therefore be requested while extracting (only) the objects  and\/or blocks  of the archive  comprising the data set update. As a third such circumstance, verification may be requested for verification of data extracted from an archive  that is streamed over a network. For example, upon receiving a request to extract an object  from an archive  accessible over a network, an embodiment may be configured to extract the directory  of the archive , the signature , and the object set verifier , and to first authenticate the signature  and verify the object set . The embodiment may then initiate a data stream of the objects  and\/or blocks  of the archive , and may verify respective objects  and\/or blocks  of the data stream upon receipt over the network. In the particular scenario of verifying streaming data, it may be advantageous to calculate separate verifiers for the directory  and the objects  and\/or blocks  of the archive , because data sets may be incrementally verified upon receipt (e.g., upon receiving each item from the data stream, an embodiment may promptly authenticate the signature  and verify data sets with a corresponding verifier).","As a second variation of this third aspect, failures of the verification of an archive  may be handled in various ways. As one such example, a failure of a verification requested by a user may result in a generation and delivery of a notification of the failure, possibly including an identification of the failed verification (e.g., whether the failure was caused by an absence of the signature , a failure to authenticate the signature , an absence of the object set verifier , or a failure to verify the object set  of the archive  with the object set verifier ). The identification of the particular failure may enable the user to determine the type, nature, and extent of the alteration of the data. Those of ordinary skill in the art may devise many variations in the verification of objects  and directory  according to the techniques presented herein.","E. Computing Environment",{"@attributes":{"id":"p-0051","num":"0050"},"figref":["FIG. 8","FIG. 8"]},"Although not required, embodiments are described in the general context of \u201ccomputer readable instructions\u201d being executed by one or more computing devices. Computer readable instructions may be distributed via computer readable media (discussed below). Computer readable instructions may be implemented as program modules, such as functions, objects, Application Programming Interfaces (APIs), data structures, and the like, that perform particular tasks or implement particular abstract data types. Typically, the functionality of the computer readable instructions may be combined or distributed as desired in various environments.",{"@attributes":{"id":"p-0053","num":"0052"},"figref":["FIG. 8","FIG. 8"],"b":["800","802","802","806","808","808","804"]},"In other embodiments, device  may include additional features and\/or functionality. For example, device  may also include additional storage (e.g., removable and\/or non-removable) including, but not limited to, magnetic storage, optical storage, and the like. Such additional storage is illustrated in  by storage . In one embodiment, computer readable instructions to implement one or more embodiments provided herein may be in storage . Storage  may also store other computer readable instructions to implement an operating system, an application program, and the like. Computer readable instructions may be loaded in memory  for execution by processing unit , for example.","The term \u201ccomputer readable media\u201d as used herein includes computer storage media. Computer storage media includes volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions or other data. Memory  and storage  are examples of computer storage media. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, Digital Versatile Disks (DVDs) or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by device . Any such computer storage media may be part of device .","Device  may also include communication connection(s)  that allows device  to communicate with other devices. Communication connection(s)  may include, but is not limited to, a modem, a Network Interface Card (NIC), an integrated network interface, a radio frequency transmitter\/receiver, an infrared port, a USB connection, or other interfaces for connecting computing device  to other computing devices. Communication connection(s)  may include a wired connection or a wireless connection. Communication connection(s)  may transmit and\/or receive communication media.","The term \u201ccomputer readable media\u201d may include communication media. Communication media typically embodies computer readable instructions or other data in a \u201cmodulated data signal\u201d such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d may include a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal.","Device  may include input device(s)  such as keyboard, mouse, pen, voice input device, touch input device, infrared cameras, video input devices, and\/or any other input device. Output device(s)  such as one or more displays, speakers, printers, and\/or any other output device may also be included in device . Input device(s)  and output device(s)  may be connected to device  via a wired connection, wireless connection, or any combination thereof. In one embodiment, an input device or an output device from another computing device may be used as input device(s)  or output device(s)  for computing device .","Components of computing device  may be connected by various interconnects, such as a bus. Such interconnects may include a Peripheral Component Interconnect (PCI), such as PCI Express, a Universal Serial Bus (USB), firewire (IEEE 1394), an optical bus structure, and the like. In another embodiment, components of computing device  may be interconnected by a network. For example, memory  may be comprised of multiple physical memory units located in different physical locations interconnected by a network.","Those skilled in the art will realize that storage devices utilized to store computer readable instructions may be distributed across a network. For example, a computing device  accessible via network  may store computer readable instructions to implement one or more embodiments provided herein. Computing device  may access computing device  and download a part or all of the computer readable instructions for execution. Alternatively, computing device  may download pieces of the computer readable instructions, as needed, or some instructions may be executed at computing device  and some at computing device .","F. Usage of Terms","Although the subject matter has been described in language specific to structural features and\/or methodological acts, it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather, the specific features and acts described above are disclosed as example forms of implementing the claims.","As used in this application, the terms \u201ccomponent,\u201d \u201cmodule,\u201d \u201csystem\u201d, \u201cinterface\u201d, and the like are generally intended to refer to a computer-related entity, either hardware, a combination of hardware and software, software, or software in execution. For example, a component may be, but is not limited to being, a process running on a processor, a processor, an object, an executable, a thread of execution, a program, and\/or a computer. By way of illustration, both an application running on a controller and the controller can be a component. One or more components may reside within a process and\/or thread of execution and a component may be localized on one computer and\/or distributed between two or more computers.","Furthermore, the claimed subject matter may be implemented as a method, apparatus, or article of manufacture using standard programming and\/or engineering techniques to produce software, firmware, hardware, or any combination thereof to control a computer to implement the disclosed subject matter. The term \u201carticle of manufacture\u201d as used herein is intended to encompass a computer program accessible from any computer-readable device, carrier, or media. Of course, those skilled in the art will recognize many modifications may be made to this configuration without departing from the scope or spirit of the claimed subject matter.","Various operations of embodiments are provided herein. In one embodiment, one or more of the operations described may constitute computer readable instructions stored on one or more computer readable media, which if executed by a computing device, will cause the computing device to perform the operations described. The order in which some or all of the operations are described should not be construed as to imply that these operations are necessarily order dependent. Alternative ordering will be appreciated by one skilled in the art having the benefit of this description. Further, it will be understood that not all operations are necessarily present in each embodiment provided herein.","Moreover, the word \u201cexemplary\u201d is used herein to mean serving as an example, instance, or illustration. Any aspect or design described herein as \u201cexemplary\u201d is not necessarily to be construed as advantageous over other aspects or designs. Rather, use of the word exemplary is intended to present concepts in a concrete fashion. As used in this application, the term \u201cor\u201d is intended to mean an inclusive \u201cor\u201d rather than an exclusive \u201cor\u201d. That is, unless specified otherwise, or clear from context, \u201cX employs A or B\u201d is intended to mean any of the natural inclusive permutations. That is, if X employs A; X employs B; or X employs both A and B, then \u201cX employs A or B\u201d is satisfied under any of the foregoing instances. In addition, the articles \u201ca\u201d and \u201can\u201d as used in this application and the appended claims may generally be construed to mean \u201cone or more\u201d unless specified otherwise or clear from context to be directed to a singular form.","Also, although the disclosure has been shown and described with respect to one or more implementations, equivalent alterations and modifications will occur to others skilled in the art based upon a reading and understanding of this specification and the annexed drawings. The disclosure includes all such modifications and alterations and is limited only by the scope of the following claims. In particular regard to the various functions performed by the above described components (e.g., elements, resources, etc.), the terms used to describe such components are intended to correspond, unless otherwise indicated, to any component which performs the specified function of the described component (e.g., that is functionally equivalent), even though not structurally equivalent to the disclosed structure which performs the function in the herein illustrated exemplary implementations of the disclosure. In addition, while a particular feature of the disclosure may have been disclosed with respect to only one of several implementations, such feature may be combined with one or more other features of the other implementations as may be desired and advantageous for any given or particular application. Furthermore, to the extent that the terms \u201cincludes\u201d, \u201chaving\u201d, \u201chas\u201d, \u201cwith\u201d, or variants thereof are used in either the detailed description or the claims, such terms are intended to be inclusive in a manner similar to the term \u201ccomprising.\u201d"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
