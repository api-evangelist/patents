---
title: Apparatus, systems and methods for layout of scene graphs using node bounding areas
abstract: A value is assigned to a layout bound of a first node in a scene graph. The layout bound constitutes a bounding volume for the object corresponding to the node and may be the display properties of the object and a first set of display modifiers for the node but not a second set. A display layout is calculated for a second node in the scene graph based on the value of the layout bound. Then, nodes of the scene graph are rendered to generate a display on a display device according to the calculated display layout. The value of the layout bound may be assignable, creating greater flexibility in controlling layout. Additionally, the value assigned to the layout bound may be changed. In this way, layout of nodes with respect to each other is flexible and visual effects and animations can either be factored into that layout or not.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09142044&OS=09142044&RS=09142044
owner: Oracle International Corporation
number: 09142044
owner_city: Redwood City
owner_country: US
publication_date: 20090526
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["Aspects of this invention relate generally to computer systems, and more specifically to displays.","A scene graph is a data structure commonly used by vector-based display applications. The scene graph is typically a collection of nodes in a graph or tree structure. A node typically include display properties for an object associated with the node and one or more sets of display modifiers such that rendering the node includes applying the display modifiers to the display properties to display the object. A node may have children but often only a single parent. A parent node may render its children nodes and may propagate properties or modifiers to its children. Additionally, nodes in a scene graph may be grouped such that an operation applied to a group automatically propagates to its members. In some scene graphs, a node can have a relation to other nodes, perhaps even itself.","When creating rich displays using a scene graph, such as visual interfaces, it is often desirable to support the ability to lay out nodes with respect to each other, as well as define visual effects and animations that are either factored into that layout or are not. Typically, scene graph systems struggle to support both of these concepts. This is further complicated when the displays are dynamic rather than merely static.","Aspects of the present disclosure provide apparatus, systems and methods for layout of scene graphs for generating displays using node bounding areas. A value is assigned to a layout bound of a first node in a scene graph. The layout bound of the first node may constitute a bounding volume for the object corresponding to the node. A display layout is calculated for a second node in the scene graph based on the value of the layout bound. Then, at least the first node and second node are rendered to generate a display on a display device according to the calculated display layout. Thus, lay out of nodes is based on layout bounds of nodes rather than physical display properties of the objects.","The value of the layout bound may be assignable, creating greater flexibility in controlling layout. In one or more embodiments, the value assigned to the layout bound for the first node may be the display properties of the object corresponding to the node and a first set of display modifiers for the node, but not a second set of display modifiers for the node. In this way, layout of nodes with respect to each other is flexible and visual effects and animations can either be factored into that layout or not.","Additionally, the value assigned to the layout bound may be changed. This provides much greater flexibility in layout than scene graphs systems that lay out nodes with respect to each other based on the physical display properties of the objects corresponding to the nodes.","It is to be understood that both the foregoing general description and the following detailed description are exemplary and explanatory only and are not necessarily restrictive of the present disclosure. The accompanying drawings, which are incorporated in and constitute a part of the specification, illustrate subject matter of the disclosure. Together, the descriptions and the drawings serve to explain the principles of the disclosure.","Aspects of the present disclosure provide apparatus, systems and methods for layout of scene graphs for generating displays using node bounding areas. A value is assigned to a layout bound of a first node in a scene graph. A display layout is calculated for a second node in the scene graph based on the value of the layout bound. Then, at least the first node and second node are rendered to generate a display on a display device according to the calculated display layout. Thus, lay out of nodes is based on layout bounds of nodes, which may constitute a bounding volume for the objects corresponding to the nodes, rather than physical display properties of the objects. The value of these layout bounds are assignable, creating greater flexibility in controlling layout. The value assigned to the layout bound for a node may be the display properties of the object corresponding to the node and a first set of display modifiers for the node, but, in one example, not a second set of display modifiers for the node. In this way, layout of nodes with respect to each other is flexible and visual effects and animations can either be factored into that layout or not. Additionally, the value assigned to the layout bound may be changed, providing much greater flexibility in layout than scene graphs systems that lay out nodes with respect to each other based on the physical display properties of the objects corresponding to the nodes.","Typically, scene graphs systems lay out nodes with respect to each other based on the physical display properties of the objects corresponding to the nodes. These conventional scene graph systems are typically unable to support both the ability to lay out nodes with respect to each other and define visual effects and animations that are either factored into that layout or are not.",{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1","b":["100","100","101","102","101","103","105","103","101","104","103","106","104"]},"The computing device  may include any kind of computing device such as a personal computer, a server computer, a laptop computer, a personal digital assistant, or a cellular telephone. The computing device  may also include (not shown) one or more input and\/or output devices (including, but not limited to keyboards, mice, printers, scanners, and so forth), one or more busses (including, but not limited to, universal serial bus, small computer system interface, and so forth), and\/or one or more communication components (including, but not limited to, modems, Ethernet adapters, wireless Ethernet adapters, and so forth). The display device  may include any kind of display device such as a cathode ray-tube display, a liquid crystal display, or a plasma screen display.","It is understood that the system  is merely an example, and that the system  may include more than one computing device , display device , processing unit , and\/or tangible machine-readable media  without departing from the scope of the present disclosure. Additionally, though the computing device  and the display device  are shown as separate devices, it is understood that the computing device  and the display device  may be integrated into a single device without departing from the scope of the present disclosure. Moreover, although the processing unit  and the machine-readable media  are illustrated as separate components of the computing device , they may be incorporated into a single component of the computing device , such as a graphics card, a video card, or a motherboard with on-board video or on-board graphics.","The display generator , operating on the processing unit , is configured to generate a display on the display device  by rendering the scene graph  stored in the tangible machine-readable media . The display generator  may be configured to render the scene graph  by rendering one or more nodes included in the scene graph . The display may constitute a user interface, such as a graphical user interface. The display may also constitute a vector graphics display.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 2","b":["200","100","200","103","104"]},"In a first operation , the display generator  may assign a value to a layout bound to a first node in a plurality of nodes in the scene graph . The first node may include display properties of an object corresponding to the first node and one or more sets of display modifiers. The object may include any kind of object corresponding to the first node, such as a window, a toolbar, a rectangle, a circle, a triangle, and\/or a polygon. The display properties of the object may include specifications as to how the object is to be displayed, such as a specified area (i.e., height and width of the object), position, color, opacity, or fill. The one or more sets of display modifiers may include mathematical transformations configured to modify the display properties. For example, the one or more sets of display modifiers may include mathematical transformations to scale, skew, translate, reflect, or shear the specified area of the object. By way of another example, the one or more sets of display modifiers may include mathematical transformations to apply a visual effect or animation to the display properties of the object. The visual effects or animations may include visual effects or animations to apply a pulsating glow to the object, apply a zoom-fade to the object, apply a fade in to the object, apply a fade out to the object, cause the object to wiggle, apply a drop shadow to the object, applying a zoom-out to the object, applying a slide to the object, and etc. Rendering the first node may include applying the one or more sets of display modifiers to the display properties.","The layout bound may constitute a bounding volume for the object corresponding to the first node. A bounding volume for an object is a closed volume that completely contains the object. The layout bound may constitute any kind of bounding volume, such as a bounding sphere, a bounding cylinder, a bounding capsule, a bounding box, a minimum bounding rectangle, a discrete oriented polytope, and\/or a convex hull. The layout bound may encompass the specified area of the object.","The one or more sets of display modifiers may include a first set of display modifiers and a second set of display modifiers. The value assigned to the layout bound may include the display properties of the object and the first set of display modifiers but not the second set of display modifiers. Hence, if a display modifier in the first set of display modifiers is altered, the display layout may change because the layout bound has changed. Further, if a display modifier in the second set of display modifiers is altered, the display layout may not change because the layout bound has not changed. Alternatively, the value assigned to the layout bound may include a value or expression other than the display properties of the object and the first set of display modifiers but not the second set of display modifiers.","In a second operation , the display generator  may calculate a display layout for at least a second node in the plurality of nodes relative to the first node based on the value of the layout bound. The scene graph may include specifications as to render the second node relative to the first node such as a distance and\/or position from the first node, at least a distance and\/or position from the first node, or within a distance and\/or position from the first node. For example, the scene graph  may include a specification that the second node be rendered on the display ten pixels to the right and ten pixels above the first node. In this case, the display generator  may calculate the display layout to render the second node ten pixels to the right and ten pixels above the layout bound of the first node. The display generator  may include a layout manager component  and may calculate the display layout utilizing the layout manager . The layout manager  may read the specifications included in the scene graph as to render the second node relative to the first node and may calculate a display layout for the second node that complies with the specifications.","In a third operation , the display generator  may render at least the first node and the second node to generate a display on the display device  according to the calculated display layout. The display may constitute a user interface, such as a graphical user interface. The display may also constitute a vector graphics display.","In some embodiments, the method  may include operations -. In the fourth operation , the display generator  may assign a new value to the layout bound. If the value assigned to the layout bound was the display properties of the object and the first set of display modifiers but not the second set of display modifiers, the new value assigned to the layout bound may include a value or expression other than the display properties of the object and the first set of display modifiers but not the second set of display modifiers. For example the new value assigned to the layout bound may include the display properties of the object and the second set of display modifiers but not the first set of display modifiers. By way of another example, the new value may include the display properties of the object and the second set of display modifiers and the first set of display modifiers. By way of yet another example, the new value may include the display properties and one or more of the first set of display modifiers and\/or one or more of the second set of display modifiers. By way of still another example, the new value may include a constant or one or more of the first set of display modifiers and\/or the second set of display modifiers but not the display properties of the object.","In the fifth operation , the display generator  may calculate a new display layout for the second node relative to the first node based on the new value of the layout bound.","In the sixth operation , the display generator  may render at least the first node and the second node to generate the display on the display device  according to the calculated new display layout.","By way of example, with reference to , performance of an example implementation of method  is illustrated. In , a two-dimensional graphical user interface  is illustrated as displayed, having been rendered from a scene graph utilizing the scene graph application programming interface (API) of JavaFX\u2122. The user interface  includes a number of picture thumbnails , each corresponding to a node in the scene graph. The user interface , including the picture thumbnails , was generated when the nodes of the scene graph were rendered.","In the scene graph API of JavaFX\u2122, nodes in a scene graph include a local bound variable and a transforms [ ] variable. The local bound variable specifies the area (such as the height, width, and\/or position) of the object corresponding to the node. The transforms[ ] variable specifies mathematical transformations that will be applied to modify the object when the node is rendered, such as mathematical transformations to scale, skew, translate, reflect, shear, and\/or apply a visual effect or animation to the object. The nodes in the scene graph in the JavaFX\u2122 scene graph API also include other variables (such as scaleX, scaleY, rotate, etc.), which specify mathematical transformations that will be applied to modify the object when the node is rendered. The transforms [ ] variable and the other variables may be utilized to apply the same mathematical transformations to modify the object when the node is rendered. Thus, either the transforms [ ] variable or the other variables may be utilized in a particular instance to apply a mathematical transformation to modify the object when the node is rendered. However, the JavaFX\u2122 scene graph API applies the mathematical transformations specified in the other variables in a pre-determined order, but applies the mathematical transformations specified in the transformations [ ] variable in whatever order they are specified in the node. Thus, mathematical transformations may be specified using the transformations [ ] variable, rather than the other variables, when it is desired to apply mathematical transformations in a particular order contrary to the pre-determined order of the other variables.","In the present example, each of the nodes in the scene graph includes a layoutBounds variable. The layoutBounds variable is assigned a default value of the local bound variable and the transforms [ ] variable, but not the other variables. Also in the present example, the scene graph includes a specification to lay out each of the nodes at least a certain distance away from the surrounding nodes. Thus, the layout is calculated for each of the nodes based on the layoutBounds of the surrounding nodes and the user interface  is rendered based on the calculated layout, resulting in the space between the picture thumbnails  in the user interface .","In this example, when a user selects one of the picture thumbnails A, a mathematical scale transformation is set using the scaleX and scale Y variables of the node in the scene graph corresponding to that particular picture thumbnail. As a result, the particular picture thumbnail B is scaled larger to illustrate that the particular picture thumbnail A has been selected by the user.  illustrates the user interface  where a user has selected the center picture thumbnail A. As a result, the mathematical scale transformation was set using the scaleX and scaleY variables of the node corresponding to the center picture thumbnail A and the center picture thumbnail B is rendered as scaled larger. However, the layout of the other picture thumbnails  have not changed. This is because the layoutBounds variable does not include mathematical transformations set in the other variables in the nodes, including the scaleX and scaleY variables. Although the present example illustrates the scaled larger center picture thumbnail B as blocking view of the other picture thumbnails, in some implementations other mathematical transformations may be applied when the user selected the center picture thumbnail  to reduce the opacity of the center picture thumbnail  such that the other picture thumbnails  are visible behind the scaled larger center picture thumbnail  without departing from the scope of the present disclosure.","By way of contrast, when a user utilizes a zoom function of the user interface , a mathematical transformation is set in each of the nodes using the transforms [ ] variable of each node. As a result, each of the picture thumbnails  is scaled larger to illustrate that the user has zoomed in.  illustrates the user interface  where a user has zoomed in. As a result, the mathematical scale transformation was set using the transforms [ ] variable of each node and each of the picture thumbnails  is rendered as scaled larger. Further, the layout of the picture thumbnails  have changed. This is because the layoutBounds variable for each node includes mathematical transformations set in the transforms [ ] variable of each node.","However, the layoutBounds for each node in the scene graph in this example may be assigned to a value other than the local bound variable and the transforms [ ] variable but not the other variables. The layoutBounds may be set to a constant, in which case the layout of the picture thumbnails  would not change regardless what mathematical transformations were set in each of the nodes, whether utilizing the transforms [ ] variable or the other variables. Alternatively, the layoutBounds may be set to the local bound variable and the other variables but not the transforms [ ] variable. In that case, if a user selected a particular picture thumbnail  the layout of the other picture thumbnails  would change (similar to ) and if the user zoomed in the layout of the other picture thumbnails  would not change (similar to ).","It is understood that the above example is merely exemplary. The display may be a display other than a two-dimensional graphical user interface, or the user interface may include objects other than picture thumbnails without departing from the scope of the present disclosure. Additionally, though the above example refers to specific technologies such as JavaFX\u2122, it is understood that other technologies could be utilized without departing from the scope of the present disclosure.","The present disclosure may provide apparatus, systems and methods for layout of scene graphs for generating displays using node bounding areas. These various features enable layout of nodes in scene graphs with respect to each other that is flexible and allows visual effects and animations to either be factored into that layout or not.","The description above includes example systems, methods, techniques, instruction sequences, and\/or computer program products that embody techniques of the present disclosure. However, it is understood that the described disclosure may be practiced without these specific details.","In the present disclosure, the methods disclosed may be implemented as sets of instructions or software readable by a device. Further, it is understood that the specific order or hierarchy of steps in the methods disclosed are examples of exemplary approaches. Based upon design preferences, it is understood that the specific order or hierarchy of steps in the method can be rearranged while remaining within the disclosed subject matter. The accompanying method claims present elements of the various steps in a sample order, and are not necessarily meant to be limited to the specific order or hierarchy presented.","The described disclosure may be provided as a computer program product, or software, that may include a machine-readable medium having stored thereon instructions, which may be used to program a computer system (or other electronic devices) to perform a process according to the present disclosure. A machine-readable medium includes any mechanism for storing information in a form (e.g., software, processing application) readably by a machine (e.g., a computer). The machine-readable medium may include, but is not limited to, magnetic storage medium (e.g., floppy diskette), optical storage medium (e.g., CD-ROM); magneto-optical storage medium, read only memory (ROM); random access memory (RAM); erasable programmable memory (e.g., EPROM and EEPROM); flash memory; or other types of medium suitable for storing electronic instructions.","It is believed that the present disclosure and many of its attendant advantages will be understood by the foregoing description, and it will be apparent that various changes may be made in the form, construction and arrangement of the components without departing from the disclosed subject matter or without sacrificing all of its material advantages. The form described is merely explanatory, and it is the intention of the following claims to encompass and include such changes.","While the present disclosure has been described with reference to various embodiments, it will be understood that these embodiments are illustrative and that the scope of the disclosure is not limited to them. Many variations, modifications, additions, and improvements are possible. More generally, embodiments in accordance with the present disclosure have been described in the context or particular embodiments. Functionality may be separated or combined in blocks differently in various embodiments of the disclosure or described with different terminology. These and other variations, modifications, additions, and improvements may fall within the scope of the disclosure as defined in the claims that follow."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present disclosure may be better understood, and its numerous features made apparent to those skilled in the art by referencing the accompanying drawings.",{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1","b":"100"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":["FIG. 2","FIG. 1"],"b":["200","100"]},{"@attributes":{"id":"p-0012","num":"0011"},"figref":["FIG. 3A","FIG. 2"]},{"@attributes":{"id":"p-0013","num":"0012"},"figref":["FIG. 3B","FIG. 2"]},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 3C","FIG. 2"]}]},"DETDESC":[{},{}]}
