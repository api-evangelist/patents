---
title: Content management system and methodology for implementing a complex object using nested/recursive structures
abstract: A content management system is provided including a plurality of tables forming a tree-based storage hierarchy. The system includes a library server having a stored procedure which creates a hierarchical tree-based storage structure having any number of child components horizontally and any number of component types vertically thus specifying a tree topology. Advantageously, a single invocation of the stored procedure will create the specified tree-based data storage structure which is stored in the library server.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06999966&OS=06999966&RS=06999966
owner: International Business Machines Corporation
number: 06999966
owner_city: Armonk
owner_country: US
publication_date: 20020423
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The disclosures herein relate generally to databases and more particularly to methods and apparatus for storing and accessing information in content management systems.","Conventional content management systems, such as that shown in , typically include a Library Server (LS), one or more Resource Managers (RMs) and a client access application program interface (API). A client is coupled by a network to the API and seeks information stored in the Resource Manager. The Library Server stores metadata relating to all objects or data stored in the Resource Manager. The Library Server also controls the particular objects that a particular client user can access. Client users can submit requests known as queries through the API to search or retrieve metadata stored in the Library Server or objects stored in the Resource Manager.","One approach employed to store items in a content management system is to model an item in a single table. Unfortunately, such a single table approach results in many fields among the rows and columns of the table being unused. Such an approach is inefficient from the storage viewpoint. In the past, flat data models have been used to store data in a content management system. For example,  shows an Item Type which is represented by a single table to form such a flat data storage model.","What is needed is a methodology and apparatus for providing a superior manner of storing and retrieving information in a content management system through the use of improved table structures.","The disclosure herein involves a content management system which employs a hierarchical item type tree-based structure including tables at different levels to store metadata for items. A principal advantage of the embodiment disclosed herein is the ability to create an item as a complex tree-based hierarchical data structure wherein the number of child table component types horizontally and the number of child table component types vertically are initially unknown. Advantageously, multiple levels of components in a tree-based hierarchical structure for an item may be created by a single application programming interface (API) invocation, as opposed to multiple invocations which require substantially more user effort.","In one embodiment of the disclosed technology, a method is provided for organizing information in a content management system. The system includes a stored procedure which receives a first input that indicates a number of tables to be created horizontally in a tree-based data storage hierarchy. The stored procedure receives a second input which indicates a number of tables to be created vertically in the tree-based data storage hierarchy. The system then creates the specified the tree-based data storage hierarchy including a root table and at least one child table. The tree-based data storage hierarchy thus created includes the number of tables previously indicated horizontally and vertically.",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 2","b":["10","15","17","10","20","25","20","17","15","25","30","25","30","30","30"]},"Content management system  employs a hierarchical \u201citem type\u201d tree structure including a group of component tables at different levels to store metadata for items. A \u201cCreate Tree Hierarchy\u201d stored procedure  in library server  is used to build a tree-based data storage hierarchy of tables according to input provided by client . Significant flexibility is provided to the client user in terms of the number of horizontal child tables or vertical child tables (or levels) for which creation can be requested. A single invocation of this stored procedure will create the entire requested tree hierarchy saving a substantial amount of network communication time.","The library server data model employed in content management system  is shown in FIG. A and FIG. B. More particularly,  shows the hierarchy of an \u201cItem Type\u201d as including a root component table  having two child table component tables  and . Child component table  two child component tables of its own, namely child component tables  and .",{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 3B","FIG. 3B"],"b":["3","100","100","3","105","110","115","120","105","110","115","120"]},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 4A","b":["200","200","200","200","4","200","205","210","210","215","220","205","210","215","220","210","210","205","215","220","200","205","210","215","220"]},{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 4B","FIG. 4B"],"b":["4","4","200","205","210","215","220"]},"A tree hierarchy having a number of child component types horizontally and a number of child component types vertically has been described above. A child table may be connected to a parent or root table above by a component ID that points back to the parent or root. Such a component ID is referred to as a foreign key in this tree structure.","To recapitulate, an item in the data model employed in content management system  includes a tree-based hierarchical structure of components. The relationship among the components within an item is established by a root component type and zero (or multiple) child component types in the tree structure. In this particular embodiment, each component is implemented by a DB2 relational database table. An item identified by an item ID has its attribute value stored in a root component table and in zero to multiple child component tables. In this embodiment, one and only one root component instance is created at the time the item is created. Child component instances may be required depending on a cardinality range predefined by a system administrator who provides this cardinality range information as input to system  from client . Each child component may itself be a parent component for other child component instances.","Stored procedure  operates in response to client input to create an item of a complex object, namely a tree-based hierarchy in library server . Stored procedure  allows the creation of a tree structure including any number of child component types in a tree horizontally. Stored procedure  also allows the creation of a tree structure including any number of child component types in a tree vertically. The topology of the tree structure is thus specified. Advantageously, stored procedure  can achieve creation of the described tree structure in one API invocation.","As a prelude to a later presented flowchart and representative stored procedure source code, it is noted that the disclosed methodology provides nested and recursive data structures starting from the root component. The root component structure includes the attribute values, the number of child types and a pointer to an array of the child type structures. Each child type structure includes the component type ID, the number of component structures in array, as well as a pointer to the array of the child component structures. Each child component structure is an instance of a component and it contains the attribute values, the number of the next level of child types in array and a pointer to the array of the next level of child type structures using a recursive mechanism. When the number of child types is zero, this implies that this component instance is an end node of the tree and processing of the tree structure is complete.","The nested and recursive data structures employed to create an item exhibiting the above described tree-based data hierachry are now discussed with reference to the flow chart of FIG. . This flow chart describes the operation of the CreateItem stored procedure . The names of the functions, variables and operations in the flow chart are selected to coincide with their individual purposes and functions in C language to facilitate understanding. Process flow starts at block  where creation of a hierarchical structure item commences. The system, by the action of stored procedure , then gets or fetches the ItemTypeID, the CompTypeID and a RootComponentStruct. It is noted that there is one ComponentStruct in Array.","Process flow then continues to a loop established by block  which loops through all ComponentStructs in Array. For each of these ComponentStructs the stored procedure gets the #OfAttributes (i.e. the number of attributes) and AtttributeValueStruct. A row is then inserted into Component Table. The stored procedure then gets or fetches the #OfChildTypes in Array and gets Array of ChildTypeStruct. A determination is then made at decision block  to see if the #OfChildTypes has reached zero as we proceed through loop . If the #OfChildTypes has reached zero then process flow stops as per block  and the creation of the Item with its hierarchical tree structure is now complete. However, if the #OfChildTypes is not zero, then process flow contiuues to another loop .","Loop  loops through all ChildTypes in Array. Within the ChildType Struct, the stored procedure gets or fetches the CompTypeID, the ParentCompTypeID, the #OfComponentStruct in Array and also fetches Array of ComponentStruct. Process flow then continues back to loop  after which the test at block  is again conducted. Once the #OfChildTypes=0, process flow stops and creation of the Item in its tree-based hierarchical form is complete.","Representative commented C language source code for performing the operations described generally in the flow chart of  is listed below:",{"@attributes":{"id":"p-0030","num":"0029"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/*----------------------------------------------*\/"},{"entry":"\/* ICM Create Item Data Structure *\/"},{"entry":"\/*----------------------------------------------*\/"},{"entry":"typedef struct_ICMCREATEITEMSTRUCT"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"long ItemTypeID; \u2003\u2003 \/\/ Item Type identifier"]},{"entry":[{},"long CompTypeID;\u2003\u2003 \/\/ Component Type identifier"]},{"entry":[{},"ICMCOMPONENT_STRUCT"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"* pComponentStruct; \/\/ the Root Component Instance data struct"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"} ICMCREATEITEM_STRUCT;"},{"entry":"\/*-------------------------------------*\/"},{"entry":"\/* Component Structure\u2003\u2003\u2003*\/"},{"entry":"\/*-------------------------------------*\/"},{"entry":"typedef struct _ICMCOMPONENTSTRUCT"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"char ComponentID\u2003\u2003\/\/ Component Instance identifier"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[ICM_COMPONENTID_LENGTH+1];"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"char ParentComponentID\u2003\/\/ Parent Component"]},{"entry":[{},"Instance identifier (it is null for Root)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[ICM_COMPONENTID_LENGTH+1];"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"short NumOfAttributes;\u2003\u2003\/\/ # of Attributes for this"]},{"entry":[{},"Component Instance"]},{"entry":[{},"ICMATTRIBUTEVALUE_STRUCT"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"* pAttributeValueStruct; \/\/ an array of"]},{"entry":[{},"ICMATTRIBUTEVALUE_STRUCT"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"short NumOfChildTypes; \/\/\u2003\u2002# of Child Types in array"]},{"entry":[{},"ICMCHILDTYPE_STRUCT"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"* pChildTypeStruct;\u2003\u2003\/\/the array of"]},{"entry":[{},"ICMCHILDTYPE_STRUCT"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"} ICMCOMPONENT_STRUCT;"},{"entry":"\/*-----------------------------------*\/"},{"entry":"\/* Child Type Structure\u2003\u2003\u2003*\/"},{"entry":"\/*-----------------------------------*\/"},{"entry":"typedef struct _ICMCHILDTYPESTRUCT"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"long CompTypeID;\u2003\u2003\u2003\u2003\/\/ Component Type identifier"]},{"entry":[{},"long ParentCompTypeID;\u2003\u2003\/\/ Parent Component Type identifier"]},{"entry":[{},"short NumOfComponents;\u2003 \/\/ # of Component Instances in array"]},{"entry":[{},"ICMCOMPONENT_STRUCT"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"* pComponentStruct;\u2003\u2003\/\/the array of Component Instance"]},{"entry":[{},"data struct"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"} ICMCHILDTYPE_STRUCT;"},{"entry":"\/*-----------------------------------*\/"},{"entry":"\/*\u2003Attribute Value Struct\u2003*\/"},{"entry":"\/*-----------------------------------*\/"},{"entry":"typedef struct _ICMATTRIBUTEVALUE_STRUCT"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"long AttributeID;\u2003\u2003\u2003\/\/ Attribute identifier"]},{"entry":[{},"long AttributeLength;\u2003\/\/ Attribute Length (for CHAR data type)"]},{"entry":[{},"union { \u2003\u2003\u2003\u2003\u2003\/\/ Attribute Value"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"short sValue;"]},{"entry":[{},"long lValue;"]},{"entry":[{},"char *pszValue;"]},{"entry":[{},"double dValue;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"} AttributeValue;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"} ICMATTRIBUTEVALUE_STRUCT;"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"The above nested and recursive data structures are implemented by stored procedure  in library server  to permit a client application  to be able to create a content management system \u201citem\u201d with any number of the component instances in a tree structure hierarchy of component tables horizontally and vertically by a single API invocation. This provides a very significant convenience for the user in constructing a complex tree-based hierarchy for storing data.","From a root component instance or any parent component instances, specifying the number of child types and providing an array of child type structures, library server  will loop through the child type structures specified in the array to process the insertion of the component instances into the corresponding component tables. This nested data structure allows any number of child component tables to be processed horizontally.","For each child table, specifying the number of the components to be created and providing an array of component structures, the library server will loop through the number of components, using the attribute values in each structure of the array to create a component instance. Multiple child component instances can be inserted based on the number of components specified for each child type. After each child component is inserted, the next level of child types can be repeated and recursively specified. The implementation of the repetitive and recursive data structures will be able to achieve the creation of any number of the component instances within a child type and any number of next level child types within a component vertically.","The disclosed content management methodology and apparatus advantageously solves the problem of creating a complex tree-based table data hierarchy with horizontal and vertical dimensions by a single invocation of a stored procedure by the client. The content management system can be stored on virtually any computer-readable storage media, such as CD, DVD and other magnetic and optical media in either compressed or non-compressed form. Of course, it can also be stored on a server computer system or other information handling system.","Although illustrative embodiments have been shown and described, a wide range of modification, change and substitution is contemplated in the foregoing disclosure and in some instances, some features of an embodiment may be employed without a corresponding use of other features. Accordingly, it is appropriate that the appended claims be construed broadly and in a manner consistent with the scope of the embodiments disclosed herein."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1B"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 3A"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3B","b":"3"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4A"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4B","b":"4"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
