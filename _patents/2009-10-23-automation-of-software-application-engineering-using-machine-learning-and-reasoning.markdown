---
title: Automation of software application engineering using machine learning and reasoning
abstract: A system for automatically creating a desired software application design. In response to an input to create a desired software application design, functional requirements for the desired software application design are retrieved. Then, non-functional requirements associated with each retrieved functional requirement are retrieved. In addition, software models associated with the retrieved functional requirements are retrieved. Further, software patterns associated with the retrieved non-functional requirements are retrieved. Then, the retrieved software models are transformed into software code for the desired software application design. Also, the retrieved software patterns are applied to associated code sequences in the software code to automatically create an architecture for the desired software application design. Finally, the architecture for the desired software application design is outputted for use by a user. The decisions made during the software application design process are also captured for analysis for future improvement of the desired software application design.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08607190&OS=08607190&RS=08607190
owner: International Business Machines Corporation
number: 08607190
owner_city: Armonk
owner_country: US
publication_date: 20091023
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","BRIEF SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["1. Field of the Invention","The present invention relates generally to an improved data processing system and more specifically to a computer implemented method, system, and computer usable program code for automatically creating a software application design utilizing reusable software assets based on machine learning and reasoning.","2. Description of the Related Art","The use of service-oriented architecture (SOA) environments and information services is fast becoming the preferred implementation for enterprise systems. Using SOA, an enterprise may be visualized as a collection of loosely coupled building blocks, called information services or business services. Information services provide a discrete business function, such as, for example, checking credit, opening an account, and so on, that can be adapted to a particular business context. As a business expands its enterprise capabilities, more information services are added to the network to accommodate the expansion. However, the design and development of information services is an error-prone, manual process, which relies heavily upon the skill and experience of a designer known as a solution architect. Because this software design process depends upon a human element, the information services within an enterprise system may lack consistency.","In addition, many enterprises are very good at producing, developing, and harvesting information technology (IT) assets, but are very poor and unsuccessful at consuming or reusing these IT assets. Two of the potentially most useful types of IT assets in software development are software models and software patterns. A key to successful software engineering when architecting, designing, and building software applications, such as, for example, SOA solutions, lies in developing a robust and appropriate architecture for the information services and applications that comprise a business solution. Primarily due to the inherent complexity involved in understanding the specific requirements and fit for a given software architecture, this long and difficult process of engineering software architectures has seen little application of reusable IT assets and instead has been uniquely developed for each new business scenario.","According to one embodiment of the present invention, a desired software application design is automatically created. In response to an input to create the desired software application design, functional requirements for the desired software application design are retrieved. Then, non-functional requirements associated with each retrieved functional requirement are retrieved. In addition, software models associated with the retrieved functional requirements are retrieved. Further, software patterns associated with the retrieved non-functional requirements are retrieved. Then, the retrieved software models are transformed into software code for the desired software application design. Also, the retrieved software patterns are applied to associated code sequences in the software code to automatically create an architecture for the desired software application design. Finally, the architecture for the desired software application design is outputted for use by a user. The decisions made during the software application design process are also captured for analysis for future improvement of the desired software application design.","As will be appreciated by one skilled in the art, the present invention may be embodied as a system, method or computer program product. Accordingly, the present invention may take the form of an entirely hardware embodiment, a software embodiment (including firmware, resident software, micro-code, etc.) stored in a storage device, or an embodiment combining software and hardware aspects that may all generally be referred to herein as a \u201ccircuit,\u201d \u201cmodule,\u201d or \u201csystem.\u201d Furthermore, the present invention may take the form of a computer program product embodied in any storage device having computer readable program code embodied in the medium. A storage device for storing computer readable program code does not encompass a signal propagation media such as copper cable, optical fiber or wireless transmission media.","Any combination of one or more computer-readable storage device may be utilized. The computer-readable storage device may be, for example but not limited to, an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system, apparatus, or device. More specific examples (a non-exhaustive list) of the computer-readable storage device would include the following: a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), a portable compact disc read-only memory (CDROM), an optical storage device, or a magnetic storage device. processed in a suitable manner, if necessary, and then stored in a computer memory. In the context of this document, a computer-usable or computer-readable medium may be any medium that can contain, store, communicate, propagate, or transport the program for use by or in connection with the instruction execution system, apparatus, or device. The computer-usable medium may include a propagated data signal with the computer-usable program code embodied therewith, either in baseband or as part of a carrier wave. The computer-usable program code may be transmitted using any appropriate medium, including but not limited to wireless, wireline, optical fiber cable, RF, etc.","Computer program code for carrying out operations of the present invention may be written in any combination of one or more programming languages, including an object oriented programming language such as Java\u2122, Smalltalk, C++ or the like and conventional procedural programming languages, such as the \u201cC\u201d programming language or similar programming languages. The program code may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider).","The present invention is described below with reference to flowchart illustrations and\/or block diagrams of methods, apparatus (systems), and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and\/or block diagrams, and combinations of blocks in the flowchart illustrations and\/or block diagrams, can be implemented by computer program instructions.","These computer program instructions may be provided to a processor of a general purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks. These computer program instructions may also be stored in a computer-readable medium that can direct a computer or other programmable data processing apparatus to function in a particular manner, such that the instructions stored in the computer-readable medium produce an article of manufacture including instruction means which implement the function\/act specified in the flowchart and\/or block diagram block or blocks.","The computer program instructions may also be loaded onto a computer or other programmable data processing apparatus to cause a series of operational steps to be performed on the computer or other programmable apparatus to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","With reference now to the figures and in particular with reference to , exemplary diagrams of data processing environments are provided in which illustrative embodiments may be implemented. It should be appreciated that  are only exemplary and are not intended to assert or imply any limitation with regard to data processing environments in which different illustrative embodiments may be implemented. Many modifications to the depicted environments may be made.",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1","b":["100","100","102","102","100","102"]},"In the depicted example, server  and server  connect to network , along with storage unit . Storage  represents any type of storage device that is capable of storing data in a structured or unstructured format. Also, storage  may represent a plurality of storage units coupled to network . Storage  may, for example, be any database within an enterprise that stores and manages reusable software assets and any other data related to these reusable software assets. In addition, storage  may be a standards-based business service repository that captures information regarding business services, business policies, and service subscribers.","Client devices , , and  also connect to network . Client devices , , and  may, for example, be personal computers, network computers, laptop computers, handheld computers, personal digital assistants (PDAs), or smart cellular telephones. Users, such as solution architects, may utilize client devices , , and  to automatically create software application designs for an enterprise using the reusable software assets stored in storage . Client devices , , and  are clients to server  and\/or server  in this example. In addition, server  and\/or server  may provide data, such as, for example, boot files, operating system images, and applications to client devices , , and . Moreover, network data processing system  may include additional servers, clients, and other devices not shown to implement processes of illustrative embodiments.","Of course, network data processing system  may be implemented as a number of different types of networks, such as, for example, an intranet, a local area network (LAN), a wide area network (WAN), or the Internet. Also, is should be noted that  is only intended as an example and not as an architectural limitation for the different illustrative embodiments. For example, illustrative embodiments may be implemented within a single data processing system instead of within a network data processing system.","With reference now to , a block diagram of a data processing system is shown in which illustrative embodiments may be implemented. Data processing system  is an example of a computer, such as server  or client  in , in which computer-usable program code or instructions implementing processes of illustrative embodiments may be located. In this illustrative example, data processing system  includes communications fabric , which provides communications between processor unit , memory , persistent storage , communications unit , input\/output (I\/O) unit , and display unit .","Processor unit  serves to execute instructions for software that may be loaded into memory . Processor unit  may be a set of one or more processors or may be a multi-processor core, depending on the particular implementation. Further, processor unit  may be implemented using one or more heterogeneous processor systems in which a main processor is present with secondary processors on a single chip. As another illustrative example, processor unit  may be a symmetric multi-processor system containing multiple processors of the same type.","Memory , in these examples, may be, for example, a random access memory (RAM) or any other suitable volatile or non-volatile storage device. Persistent storage  may take various forms depending on the particular implementation. For example, persistent storage  may contain one or more components or devices. For example, persistent storage  may be a hard drive, a flash memory, a rewritable optical disk, a rewritable magnetic tape, or some combination of the above. The media used by persistent storage  also may be removable. For example, a removable hard drive may be used for persistent storage . In addition, persistent storage  may represent a plurality of persistent storage units.","Communications unit , in these examples, provides for communications with other data processing systems or devices, such as, for example, server  in . In these examples, communications unit  is a network interface card. Communications unit  may provide communications through the use of either, or both, physical and wireless communications links.","Input\/output unit  allows for input and output of data with other devices that may be connected to data processing system . For example, input\/output unit  may provide a connection for user input through a keyboard. Display unit  provides a mechanism to display information to a user of data processing system .","Instructions for the operating system and applications or programs are located on persistent storage . The instructions for the operating system and applications or programs may be loaded into memory  for execution by processor unit . The processes of the different embodiments may be performed by processor unit  using computer implemented instructions, which may be located in a memory, such as memory . These instructions are referred to as program code, computer-usable program code, or computer-readable program code that may be read and executed by a processor in processor unit . The program code in the different illustrative embodiments may be embodied on different physical or tangible computer-readable media, such as memory  or persistent storage .","Program code  is located in a functional form on computer-readable media  and may be loaded onto or transferred to data processing system  for execution by processor unit . Program code  and computer-readable media  form computer program product  in these examples. In one example, computer-readable media  may be in a tangible form, such as, for example, an optical or magnetic disc that is inserted or placed into a drive or other device that is part of persistent storage  for transfer onto a storage device, such as a hard drive that is part of persistent storage . In a tangible form, computer-readable media  also may take the form of a persistent storage, such as a hard drive or a flash memory that is connected to data processing system . The tangible form of computer-readable media  is also referred to as computer-recordable storage media.","Alternatively, program code  may be transferred to data processing system  from computer-readable media  through a communications link to communications unit  and\/or through a connection to input\/output unit . The communications link and\/or the connection may be physical or wireless in the illustrative examples. The computer-readable media also may take the form of non-tangible media, such as communication links or wireless transmissions containing the program code.","The different components illustrated for data processing system  are not meant to provide architectural limitations to the manner in which different illustrative embodiments may be implemented. The different illustrative embodiments may be implemented in a data processing system including components in addition to, or in place of, those illustrated for data processing system . Other components shown in  may be varied from the illustrative examples shown.","For example, a bus system may be used to implement communications fabric  and may be comprised of one or more buses, such as a system bus or an input\/output bus. Of course, the bus system may be implemented using any suitable type of architecture that provides for a transfer of data between different components or devices attached to the bus system. Additionally, a communications unit may include one or more devices used to transmit and receive data, such as a modem or a network adapter. Further, a memory may be, for example, memory  or a cache, such as found in an interface and memory controller hub, which may be present in communications fabric .","Illustrative embodiments provide a computer implemented method, system, and computer usable program code for automatically creating an optimized architecture for a software application design by using reusable software assets. Thus, illustrative embodiments by automating the selection and integration of reusable software assets into the software engineering process, leverage and increase the level of software asset consumption, while at the same time, provide improved architectural consistency, traceability, and accountability. In addition, illustrative embodiments provide improved architectural quality of the resulting software applications. This improved architectural consistency, traceability, accountability, and quality of resulting software applications is achieved by mapping functional requirements for software application designs to reusable software model assets and mapping non-functional requirements for those software application designs to reusable software pattern assets. Then, the appropriate transformations are applied to the selected software model assets and software pattern assets for the software application designs to create architecturally sound and consistent business services and applications. Decisions made during the software application design process are captured for future improvement analysis of software application designs.","Illustrative embodiments provide the right software assets, which is the content, to help solve the problem at hand, which is the context. The context is provided by the scope of the software project and by the functional and non-functional requirements for that software project. The scope of a software project may be determined by the industry, such as, for example, the insurance industry, financial industry, healthcare industry, retail industry, and so on, selected for the software project. In addition, the scope of the software project may be determined by the architectural style, such as, for example, an SOA architectural style, a client\/server architectural style, distributed computing architectural style, and so on, selected for the software project.","Illustrative embodiments automatically select the content, or software assets, which is relevant to the context or problem to be solved by the software application design project. For example, on an insurance industry software project, illustrative embodiments map a functional requirement of creating a claims system to a reusable software asset, such as a software model previously designed for a claims system. The software model may, for example, be written in a formal modeling language, such as Unified Modeling Language (UML), which describes in detail all aspects of the context.","A specific example of an insurance industry model is Insurance Application Architecture (IAA), a product developed by the International Business Machines Corporation. IAA is a set of information, process, and integration models that represent leading practice systems development in the insurance industry. IAA is an architectural blueprint with detailed insurance business content that can be applied to initiatives on an enterprise-wide or specific project basis.","In addition, illustrative embodiments map a non-functional requirement, such as a transactional claims process, to another type of reusable software asset, a software pattern, to provide a consistent architecture for the software application design. Thus, illustrative embodiments automate a context-to-content mapping to provide the best available software assets for a software application design.","With reference now to , an exemplary illustration of a software application design system is depicted in accordance with an illustrative embodiment. Software application design system  may be implemented in a network of data processing systems, such as network data processing system  in . Alternatively, software application design system  may be implemented in a single data processing system, such as data processing system  in .","Software application design system  is a data processing system that includes a plurality of software components or modules that software application design system  uses to automatically create an optimized architecture for a software application design by using reusable software assets. Software application design system  includes requirement module , context related content module , industry model repository (IMR) , pattern asset adviser , and transformation, learning, and reasoning engine . However, it should be noted that software application design system  is only meant as an example and not intended as a limitation on different illustrative embodiments. In other words, software application design system  may include more or fewer components as necessary to accomplish processes of the different illustrative embodiments.","Requirement module  is a software application designed to capture and store design requirements, such as functional requirements and non-functional requirements, for one or more software application architectures. A requirement is a capability that a software application design must provide. Conformance to some set of requirements defines the success of a software application design project.","Requirement module  may capture and store published standards-based service components and composite business services, which customers and business partners may discover and use in their own business processes. Businesses may build on each other's services, creating new loosely coupled, process-centric and industry-centric business service ecosystems. As a result, requirement module  may significantly reduce the complexity, cost, and risk associated with traditional, large-scale enterprise software projects.","Requirement module  may, for example, be a commercially available system, such as Rational\u00ae RequisitePro\u00ae, a product available from the International Business Machines Corporation. Rational\u00ae RequisitePro\u00ae is a requirements management tool that organizes and documents project requirements so that an enterprise can manage software application design change and provides for collaborative development of software application design.","Requirement module  includes industry type , architectural style , functional requirements , and non-functional requirements . Industry type  defines the type of industry, such as, for example, the insurance, financial, healthcare, or retail industry, associated with a particular software application design project. Industry type  may represent one or more industry types that a solution architect may select from to start a particular software application design project.","Architectural style  defines the architectural style, such as, for example, an SOA, client\/server, or distributed computing architectural style, for the particular software application design project. Architectural style  may represent one or more architectural styles that the solution architect may select from after selecting the industry type for the software application design project.","Software application frameworks offer sets of reusable and adaptable components embedded within an architecture optimized for a given target domain. A software asset is a collection of artifacts that provide a solution to a problem in a particular context, such as a requirement, a design model, implementation code, or a test case. A software asset generally refers to a set of one or more related artifacts that have been created or harvested for the purpose of applying the asset repeatedly in subsequent software development environments. Source code and binary code are examples of artifacts adapted for use with the software assets. Other examples of artifacts include related documentation, such as requirement specifications, design documents, operation manuals, and the like. Additional examples of artifacts include models, such as process models, structural models, resource models, implementation models, and so forth, which may additionally include object models, collaboration diagrams, deployment models, etc.","Reusable software assets may be utilized to address both functional and nonfunctional requirements of a software application design. Functional requirements  define what a particular piece of software can be expected to accomplish within a particular context. Functional requirements  may represent a set of one or more functional requirements for a particular software application design. In addition, functional requirements  may represent a plurality of functional requirements for a plurality of software application designs.","Non-functional requirements  define global constraints that must be satisfied by the software application design. These global constraints, also known as software global attributes, typically include performance, fault-tolerance, availability, scalability, transactionality, and security constraints. In other words, non-functional requirements  define how the software application design is built within a particular context.","During a software development process, functional requirements  are incorporated into software artifacts and are implemented in such a manner that the software satisfies the functional requirements for the software application design. However, non-functional requirements  are not implemented in the same manner as functional requirements . Non-functional requirements  are more complex to deal with and are usually very abstract. In addition, non-functional requirements  may conflict with each other.","Context related content module  is the software component that relates the context of a software application design to the appropriate content. For example, the context of a software application design may be driving a car. As a result, the related content may, for example, be maps, destination, driving conditions, weather, points of interest, etc., for that particular context. Context related content module  receives industry type , architectural style , functional requirements , and non-functional requirements  for a desired optimal software application design. Then, context related content module  sends functional requirements  to IMR  and non-functional requirements  to pattern asset adviser .","Industry model repository (IMR)  provides the ability to automatically select software models  based on functional requirements  for the desired software application design. For example, based on an input requirement for a reservation service for a car rental company, IMR  automatically selects relevant software models , such as a use case model for a reservation, a business process model, a service model, a domain model, and a data model, all related to creating the reservation system. Consequently, IMR  must manage and maintain complex associations between functional requirements and the reusable software models.","It should be noted that IMR  may be implemented as a relational database. Moreover, IMR  includes topic maps . IMR  may use topic maps , for example, to maintain the complex associations between functional requirements and the reusable software models needed to satisfy those functional requirements. Topic maps are an ISO standard for the representation and interchange of knowledge, with an emphasis on the findability of information. The ISO standard is formally known as ISO\/IEC 13250:2003. Topic maps are a way to build standard indexes.","A topic map represents information using topics that may represent any concept from people, countries, and organizations to software modules, individual files, and events. In this case, a topic may be a functional requirement, a non-functional requirement, a software model, or a software pattern. In other words, illustrative embodiments may use a topic map to model relationships between software requirements, which include functional and non-functional requirements, and necessary reusable software assets, which include software models and patterns, needed to satisfy those software requirements.","Associations between the topics within the topic map represent how topics relate to one another. In addition, the topic map maintains occurrences of the topics that represent where the topics may be found, such as a Webpage, a uniform resource locator (URL), or a reference within a book. Thus, topic maps are similar to semantic networks, concept maps, and mind maps.","Pattern asset adviser  provides the ability to automatically select software patterns  or combinations of software patterns based on non-functional requirements  for the desired software application design. Using the car rental company example above, the functional requirement to create a reservation service will have a corresponding non-functional requirement that the reservation service meet specific performance levels. Thus, pattern asset adviser  maps the performance non-functional requirement to an associated software pattern.","In general, a software pattern refers to a set of related artifacts that have been created or harvested for the purpose of applying that software pattern repeatedly in subsequent development environments. A software pattern represents a repeatable solution to a problem in a particular context. As a result, software patterns , which are selected by pattern asset adviser  based on non-functional requirements  for the desired software application design, determine how the software application design solves the problem within the particular context.","Software pattern assets are often represented by a pattern specification and\/or pattern implementation. Hence, consistency, traceability, and accountability may be achieved by mapping non-functional requirements  to the software patterns . Pattern asset adviser  may utilize topic maps  to maintain the complex associations between non-functional requirements and the reusable software patterns needed to satisfy those non-functional requirements.","Transformation, learning, and reasoning engine  receives industry type , architectural style , software models , and software patterns  for the desired software application design from context related content module . Transformation, learning, and reasoning engine  provides the ability to automatically apply a series of rules to selected software models  and selected software patterns  for the context to drive development transformations in a correct sequence and iteration to obtain an optimal end software application design, such as optimized architecture for software application design , by leveraging machine learning and reasoning. An example of a development transformation rule may, for example, be as follows: reusable assets A, which are utilized to satisfy requirement type A, may be used together with reusable assets B, which are utilized to satisfy requirement type B. After development transformation when requirement type A and B exist, then a relationship now exists linking reusable assets A to reusable assets B to denote that reusable assets A and B should be used together. Transformation, learning, and reasoning engine  may, for example, be a commercially available product, such as Agent Building and Learning Environment (ABLE), which is available from the International Business Machines Corporation.","ABLE is a Java\u2122 framework, component library, and productivity tool kit for building intelligent agents using machine learning and reasoning. The ABLE framework provides a set of Java\u2122 interfaces and base classes used to build a library of JavaBeans\u2122 called AbleBeans. Java and all Java-based trademarks and logos are trademarks of Sun Microsystems, Inc. in the United States, other countries, or both. The library includes AbleBeans for reading and writing text and database data, for data transformation and scaling, for rule-based inferencing using Boolean and fuzzy logic, and for machine learning techniques, such as neural networks, Bayesian classifiers, and decision trees. Rule sets created using the ABLE Rule Language may be used by any of the provided inferencing engines, which range from simple if-then scripting to light-weight inferencing to heavy-weight artificial intelligence (AI) algorithms using pattern matching and unification.","With reference now to , a flowchart illustrating an exemplary process for automatically creating a software application design is shown in accordance with an illustrative embodiment. The process shown in  may be implemented in a software application design system, such as software application design system  in .","The process begins when the software application design system uses a requirement module, such as requirement module  in , to receive an input from a user, such as a solution architect, to create a software application design utilizing reusable software assets (step ). After receiving the input to create a desired optimal software application design in step , the requirement module then receives a selection by the user of an industry type, such as industry type  in , for the desired software application design (step ). In addition, the requirement module also receives a selection by the user of an architectural style, such as architectural style  in , for the desired software application design (step ).","Then, the requirement module retrieves any functional requirements, such as functional requirements  in , required for the desired software application design based on the selected industry type (step ). Subsequent to retrieving the functional requirements for the software application design in step , the requirement module retrieves a set of one or more non-functional requirements, such as non-functional requirements  in , associated with each of the retrieved functional requirements (step ). Then, the software application design system utilizes an IMR, such as IMR  in , to automatically retrieve software models, such as software models  in , which are associated with the retrieved functional requirements for the software application design (step ).","Then, the software application design system utilizes a pattern asset adviser, such as pattern asset adviser  in , to automatically retrieve software patterns, such as software patterns  in , which are associated with the retrieved non-functional requirements (step ). Then, the software application design system utilizes a transformation, learning, and reasoning engine, such as transformation, learning, and reasoning engine  in , to transform the retrieved software model into software code for the desired software application design (step ). In addition, the transformation, learning, and reasoning engine applies the retrieved software patterns to their respective associated code sequences in the software code based on the selected architectural style to automatically create an optimized architecture for the desired software application design, such as optimized architecture for the software application design  in  (step ).","Afterward, the software application design system records the industry type, the architectural style, the functional requirements, the non-functional requirements, the software model, the software patterns, the process of transforming the software model into the software code, and the process of applying the software patterns to the associated code sequences used to automatically create the optimized architecture for the desired software application design in the requirement module for future reference (step ). Subsequently, the software application design system outputs the optimized architecture for the desired software application design for use by the user (step ). Thereafter, the process terminates.","Thus, illustrative embodiments of the present invention provide a computer implemented method, system, and computer program product for automatically creating an optimized architecture for a software application design using reusable software assets based on machine learning and reasoning. The flowchart and block diagrams in the Figures illustrate the architecture, functionality, and operation of possible implementations of systems, methods, and computer program products according to various embodiments of the present invention. In this regard, each block in the flowchart or block diagrams may represent a module, segment, or portion of code, which comprises one or more executable instructions for implementing the specified logical function(s). It should also be noted that, in some alternative implementations, the functions noted in the block may occur out of the order noted in the figures. For example, two blocks shown in succession may, in fact, be executed substantially concurrently, or the blocks may sometimes be executed in the reverse order, depending upon the functionality involved. It will also be noted that each block of the block diagrams and\/or flowchart illustration, and combinations of blocks in the block diagrams and\/or flowchart illustration, can be implemented by special purpose hardware-based systems that perform the specified functions or acts, or combinations of special purpose hardware and computer instructions.","The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein, the singular forms \u201ca\u201d, \u201can\u201d and \u201cthe\u201d are intended to include the plural forms as well, unless the context clearly indicates otherwise. It will be further understood that the terms \u201ccomprises\u201d and\/or \u201ccomprising,\u201d when used in this specification, specify the presence of stated features, integers, steps, operations, elements, and\/or components, but do not preclude the presence or addition of one or more other features, integers, steps, operations, elements, components, and\/or groups thereof.","The corresponding structures, materials, acts, and equivalents of all means or step plus function elements in the claims below are intended to include any structure, material, or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description, but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application, and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.","The invention can take the form of an entirely hardware embodiment, an entirely software embodiment, or an embodiment containing both hardware and software elements. In a preferred embodiment, the invention is implemented in software, which includes but is not limited to firmware, resident software, microcode, etc.","Furthermore, the invention can take the form of a computer program product accessible from a computer-usable or computer-readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description, a computer-usable or computer readable medium can be any tangible apparatus that can contain, store, communicate, propagate, or transport the program for use by or in connection with the instruction execution system, apparatus, or device.","The medium can be an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system (or apparatus or device) or a propagation medium. Examples of a computer-readable medium include a semiconductor or solid state memory, magnetic tape, a removable computer diskette, a random access memory (RAM), a read-only memory (ROM), a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk-read only memory (CD-ROM), compact disk-read\/write (CD-R\/W) and DVD.","A data processing system suitable for storing and\/or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code, bulk storage, and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.","Input\/output or I\/O devices (including but not limited to keyboards, displays, pointing devices, etc.) can be coupled to the system either directly or through intervening I\/O controllers.","Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems, cable modems, and Ethernet cards are just a few of the currently available types of network adapters.","The description of the present invention has been presented for purposes of illustration and description, and is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiment was chosen and described in order to best explain the principles of the invention, the practical application, and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
