---
title: Test entities for evaluation and validation of a model
abstract: Methods, mediums, and systems are presented herein for evaluating points of observation in a model by validating conditions in the model. A condition is a location in a model which may be either satisfied or unsatisfied by underlying data associated with the condition. Conditions may be placed in an enforced satisfied status or enforced unsatisfied status in order to instruct a verification tool to assume that the condition is satisfied regardless of whether the condition would actually be satisfied by underlying data. A first condition in an enforced satisfied status or an enforced unsatisfied status may be used to determine whether a second condition is satisfied, or whether a second condition satisfiable.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08903688&OS=08903688&RS=08903688
owner: The MathWorks, Inc.
number: 08903688
owner_city: Natick
owner_country: US
publication_date: 20110401
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATIONS","BACKGROUND INFORMATION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["This application is a continuation-in-part of U.S. patent application Ser. No. 12\/684,500, entitled \u201cTEST PRECONDITION ITEMS FOR AUTOMATED ANALYSIS AND TEST GENERATION,\u201d filed on Jan. 8, 2010, which is a continuation of co-pending U.S. patent application Ser. No. 11\/096,528, filed Mar. 31, 2005. The disclosure of said applications are hereby incorporated by reference herein in their entirety.","Graphical modeling environments, such as the technical computing and block diagram modeling environment of MATLAB\u00ae and Simulink\u00ae from the MathWorks, Inc. of Natick, Mass., can provide a \u201cmodel-based design\u201d approach to designing an implementation, such as for embedded computational hardware. The term \u201cmodel-based design\u201d is used to refer to a graphical model acting as a design or a specification for implementation. A model-based design may be used as a design specification for an implementation, such as an implementation of an algorithm in hardware circuitry, the implementation of code to run on a microprocessor, or software to run in a network environment.","A graphical modeling environment can produce model-based designs in graphical form, such as a block diagram model, to specify computations, operations, or functionality that can be performed on computational hardware such as a general purpose processor, microcontroller, DSP, FPGA, PLD, or an ASIC. As a design specification, a model-based design can drive the building process of an implementation of the design. For instance, the model-based design can act as a specification from which to automatically generate code from a block diagram model to provide an executable for testing and verification on a target system.","Model-based designs represented by graphical models can be tested using simulation. The simulation may be provided by the modeling environment. For example, Simulink\u00ae from The MathWorks, Inc. of Natick, Mass., provides an environment for simulating graphical models to test the model-based design. Simulation may be used by a model designer to identify design issues during the design stage at the system level. Although simulation may be used to functionally verify some behavior of the design, simulation may not be exhaustive or deterministic such that it covers all desired or unwanted circumstances and occurrences of design behavior.","Verification tools can be used to provide a more formal and comprehensive approach to testing and verifying a model-based design. Verification tools are available that apply various formal methods and techniques for providing comprehensive coverage and verifying the behavior of a model-based design under test. The verification tool may run a multitude of combinations of scenarios with a significant portion or all of the possible input values. Running comprehensive or multiple verification scenarios in a verification tool may be time consuming and resource intensive. The techniques and methods used by the verification tool may exercise behavior or functionality that is not of concern to the model-based designer or that is not practical or realistic in the intended application of the implementation of the model-based design. Therefore, it may be time consuming, resource intensive or inconvenient to obtain or review the results of the portion of the verification that is of interest to the designer or realistic for the design.","Typically, the configuration of the verification may be performed in the verification tool to run certain tests or verification scenarios desired for the design. The verification tool may be configured to limit the verification scenarios or to cover only a certain combination of occurrences. Setting up and generating verification scenarios in a verification tool may consume significant time and resources. The verification tool may have its own configuration environment and language different than the graphical modeling environment. As such, any verification scenario configuration and verification results may be described in terms of the form, language, and context of the verification tool. Thus, it may be challenging to relate the verification scenario configuration and verification results to the model-based design represented by the graphical model.","Methods, mediums, and systems are described herein for using a design element in a graphical model to represent and identify a condition for use by a verification tool in verifying an executable form of the design represented by the graphical model. A condition is a location in a model which may be either satisfied or unsatisfied by underlying data associated with the condition. Conditions may be placed in an enforced satisfied status or enforced unsatisfied status in order to instruct a verification tool to assume that the condition is satisfied regardless of whether the condition would actually be satisfied by underlying data. A first condition in an enforced satisfied status or an enforced unsatisfied status may be used to determine whether a second condition is satisfied, or whether a second condition satisfiable.","According to one exemplary embodiment, a model is provided in a graphical modeling environment. The model may include a plurality of points of observation related to data in a dynamic model. For example, if the model is a block diagram model of a system, the points of observation may be blocks, subsystems including blocks, or a mixture of blocks and subsystems. At least a first point of observation may be provided.","A plurality of conditions may be identified in the model. The conditions may include at least a first condition and a second condition. The first condition may be located in the graphical model, and the second condition may be associated with an output of the first point of observation. The first condition and second condition may be associated with at least one of a value or a range of values for one or more of the following: an output, a signal, an attribute of a signal, a state, a data element, a parameter, and a property of an object. The first and second points of observation may be graphically or textually indicated on the model.","A second point of observation may also be provided, the second point of observation being associated with output information that is used as input information into the first point of observation.","At least a portion of the model may be validated. Validating the portion may involve placing the first condition in an enforced satisfied status, verifying that the second condition is in a satisfied status based at least in part on the enforced satisfied status of the first condition, and, after verifying that the second condition is in a satisfied status, verifying that the first condition is in an unenforced satisfied status. The second condition may be used as a precondition to validate another portion of the model including a third condition.","Placing the first condition in an enforced satisfied status may include causing the second point of observation to output a value satisfying the first condition. Alternatively, placing the first condition in an enforced satisfied status may involve instructing the modeling environment that the input information to the first point of observation satisfies the first condition.","Validating the model may be done in response to an instruction, such as a user instruction. The instruction may identify one or more conditions which are indicated to be in an enforced satisfied status, and one or more conditions to be evaluated based at least in part on the one or more conditions indicated to be in an enforced satisfied status.","The validating may be performed during a simulation of the model, or during a design of the model. The first condition and second condition may be identified during a design of the model, for example using a verification tool displayed in a graphical user interface on a display device. The first condition and\/or second condition may be associated with an element external to the model, such as an input source or output source. The first condition and\/or the second condition may be activated or deactivated based on a state of the model during an execution of the model.","In another embodiment, validating the portion may involve placing the first condition in an enforced unsatisfied status, and determining whether it is possible to satisfy the second condition while the first condition is unsatisfied.","Methods, mediums, and systems are presented herein for evaluating points of observation in a model by validating conditions in the model. A condition is a location in a model which may be either satisfied or unsatisfied by underlying data associated with the condition. Conditions may be placed in an enforced satisfied status or enforced unsatisfied status in order to instruct a verification tool to assume that the condition is satisfied regardless of whether the condition would actually be satisfied by underlying data. A first condition in an enforced satisfied status or an enforced unsatisfied status may be used to determine whether a second condition is satisfied, or whether a second condition satisfiable. The second condition may be used to verify a third condition in the same or another portion of the model.","The embodiments described herein will be described solely for illustrative purposes relative to a graphical modeling and verification environment provided by the software products from The MathWorks, Inc. of Natick, Mass. Although the illustrative embodiments will be described relative to a MATLAB\u00ae and\/or Simulink\u00ae-based application, including the use of Stateflow\u00ae, one of ordinary skill in the art will appreciate that the present invention may be applied to other graphical modeling and\/or verification environments, such as (but not limited to) any environments using software products of SimMechanics, SimPowerSystems or SimDriveLine from The MathWorks, Inc. of Natick, Mass., LabVIEW\u00ae or MATRIXx from National Instruments, Inc., MSC.Adams\u00ae from MSC.Software Corporation of Santa Ana, Calif., Virtuoso from Cadence of San Jose, Calif., Dymola from Dynasim AB of Lund, Sweden, or Rational Rose from IBM of White Plains, N.Y.","Exemplary Environments",{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 1","b":["102","106","104","106","106","106","102","114"]},"The computing device  may include other I\/O devices such a keyboard  and a pointing device , for example a mouse, for receiving input from a user. Optionally, the keyboard  and the pointing device  may be connected to the visual display device . Additionally, the computing device  may include any type of input device for receiving user input, such as a joystick. In other embodiments, the computing device  may include any type of haptic or tactile feedback device, such as a vibration generating mouse, or a force feedback device such as a force feedback joystick. Also, the computing device  may include any type of sound producing I\/O device such as any suitable sound card. The computing device  may include other suitable conventional I\/O peripherals.","For installing software programs, the computing device  may support any suitable device readable medium , such as a CD-ROM, DVD-ROM floppy disks, tape device, USB device, hard-drive, or any other suitable device. The computing device  may further comprise a storage device , such as a hard-drive or CD-ROM, for storing an operating system and other related software. A graphical modeling and verification environment  may comprise software that is installed via a device readable medium  and stored in the storage device . Additionally, the operating system and graphical modeling and verification environment  may be run from a bootable CD, such as, for example, KNOPPIX\u00ae, a bootable CD for GNU\/Linux.","Additionally, the computing device  may include a network interface  to interface to a Local Area Network (LAN), Wide Area Network (WAN) or the Internet through a variety of connections including, but not limited to, standard telephone lines, LAN or WAN links (e.g., 802.11, T1, T3, 56 kb, X.25), broadband connections (e.g., ISDN, Frame Relay, ATM), cluster interconnection (Myrinet), peripheral component interconnections (PCI, PCI-X), wireless connections, or some combination of any or all of the above. The network interface  may comprise a built-in network adapter, network interface card, PCMCIA network card, card bus network adapter, wireless network adapter, USB network adapter, modem or any other device suitable for interfacing the computing device  to any type of network capable of communication and performing the operations described herein. Moreover, the computing device  may be any computer system such as a workstation, desktop computer, server, laptop, handheld computer or other form of computing or telecommunications device that is capable of communication and that has sufficient processor power and memory capacity to perform the operations described herein.","Exemplary embodiments may provide a graphical modeling and verification environment  as illustrated in . In brief overview, the illustrative graphical modeling and verification environment  includes a graphical modeling tool  and a verification tool . The graphical modeling tool  provides an environment for the design and development of a model-based design represented by a graphical model . The verification tool  provides an environment for the test, analysis, and verification of an executable form  of the model-based design represented by the graphical model . The verification tool  may be in communication with or have any suitable type and\/or form of interface to the graphical modeling tool .","The graphical modeling tool  comprises an environment for creating, editing, designing, simulating, testing, or otherwise providing any type and\/or form of graphical model , such as block diagram model. In an exemplary embodiment and by way of example, the graphical modeling tool  may comprise Simulink\u00ae, Stateflow\u00ae, and\/or SimMechanics manufactured by The MathWorks, Inc. of Natick, Mass. In the graphical modeling tool , configurable and customizable functional blocks are used to create block diagram models that may represent a design, or algorithm, for a control system, a signal processing system, a communication system, any other time-varying or dynamic system, any computational hardware device, or any software implementation. The graphical modeling tool  can be used to provide a model-based design approach to implementation of an item or system under design. A model-based design may be used as a design specification for an implementation, such as an implementation of an algorithm in hardware circuitry or the implementation of code or software to run on a processor.","Additionally, the graphical modeling tool  may comprise an automatic code generation application, such as the automatic code generator of Real-Time Workshop\u00ae from The MathWorks, Inc. of Natick, Mass., to generate source code from a graphical model  to translate the functionality of the graphical model  into an executable form, such as a program, that may be designed to run on any microprocessor, real-time operating system, or otherwise customized to run on a specific target hardware platform or for use by a verification tool .","The graphical model  can comprise any type and\/or form of graphical model . The graphical modeling tool  may provide any type of tools, libraries, and\/or configuration mechanisms to graphically create and\/or edit a graphical model . The graphical model  may comprise a block diagram model provided by the Simulink\u00ae environment of The MathWorks, Inc. For example, the block diagram model  may comprise a series of different type of blocks arranged in a desired manner and connected via connection lines to represent signal values traversing the blocks. The graphical model  may comprise any type of element or construct to form a graphical model, such as connectors, blocks, or any other graphical form and representation of functionality supported by the graphical modeling tool . One ordinarily skilled in the art will recognize and appreciate the various forms of graphical models, and the elements and content thereof.","Additionally, the graphical modeling tool  may comprise a design and development environment for creating a state machine diagram representation in the graphical model . By way of example, the graphical modeling tool  may comprise Stateflow\u00ae, an interactive design and simulation tool for event-driven systems manufactured by The MathWorks, Inc. of Natick, Mass. The graphical modeling tool , such as Stateflow\u00ae, provides elements to describe a language, logic, and systems in a visual form, such as a form that is readable, and understandable by a human user, such as a designer. The graphical modeling tool  may provide a visual formalism of the item under design as represented by the graphical model .","The graphical modeling tool  may be able to execute the graphical model . For example, in the exemplary case using Simulink\u00ae, the graphical modeling tool  has an environment that provides for the simulation and debugging of the graphical model . Additionally, in other embodiments, the graphical modeling tool  may generate code of executable instructions representing the graphical model  to compile and build for executing on a target hardware platform and\/or operating system. The graphical modeling tool  may comprise an automatic code generation application, such as the automatic code generator of Real-Time Workshop\u00ae from The MathWorks, Inc. of Natick, Mass., to generate source code from a graphical model  to translate the functionality of the graphical model  into an executable form, such as a program, that may be designed to run on any microprocessor, real-time operating system, or otherwise customized to run on a specific target hardware platform or for use by a verification tool .","Furthermore, the graphical modeling tool  may provide for implementation of any portion or any functionality of the graphical model  via instructions in any type of programming language, text-based, high-level, interpretative, or otherwise. With a MATLAB\u00ae and Simulink\u00ae based environment , the graphical modeling tool  may provide for or use executable instructions in the form of the textual programming language of MATLAB\u00ae. Any type and\/or form of executable instructions, including interpretive programming languages, markup languages such as the HyperText Markup Language, scripting languages, and any code, such as libraries, executables, or scripts, may be used in providing the graphical model .","The verification tool  comprises a testing and verification environment for testing and verifying an executable form  of a design, such as a model-based-design represented by a graphical model  provided by the graphical modeling tool . The executable form  of the design under test may be provided by the automated code generator of the graphical modeling tool  as will be described in further detail later. The verification tool  may provide for the testing and verification of an executable  by any technique known to those ordinarily skilled in the art, such as, but not limited to, bounded model techniques, symbolic model techniques, test generation techniques, solving techniques, theorem proving techniques, temporal logic, exhaustive or deterministic techniques, or other mathematical or algorithm based techniques. In one aspect, the verification tool  may be described or referred to as using formal methods to perform formal verification of the executable  in comparison to simulating the graphical model  or corresponding executable form .","The verification tool  may be any type and\/or form of verification tool . In some embodiments, the verification tool  may comprise any of the model-based test and verification related software products manufactured by Prover Technology AB of Stockholm, Sweden, Prover Technology, Inc. of San Mateo, Calif., Reactive Systems, Inc. of Falls Church, Va., or TNI-Software, part of the Valiosys Group with offices in Paris, France. In other embodiments, the verification tool  may comprise any custom verification tool  software or any portions of software that may be available to perform testing and verification. One ordinarily skilled in the art will recognize that the verification tool  may be any type and\/or form of verification tool  and may use any type and\/or form of testing or verification techniques, formal or otherwise.","The graphical modeling tool  and verification tool , and any portion thereof, can comprise an application, module, service, computer program, software component, web service, web component, library, or any other type and\/or form of executable instruction which is designed to and capable of executing the functionality as described herein. Additionally, the graphical modeling tool  and verification tool  may be configured to and capable of running any of the modules, libraries or software components of the MATLAB\u00ae and\/or Simulink\u00ae product family. As such, the graphical modeling and verification environment  may have all or a portion of the software components of MATLAB\u00ae and\/or Simulink\u00ae installed on the computing device , or alternatively, accessible from another computing device on a network.","In , although the graphical modeling tool  and verification tool  are illustrated as separate tools, one ordinarily skilled in the art will recognize and appreciate that these tools  and  may be combined into a single application, or otherwise tightly integrated to present a single application in performing the operations of the present invention as described. Additionally, although the executable form  is illustrated as external to the graphical modeling tool  and the verification tool  in , the executable form  may also reside in and\/or execute in the environments of either the graphical modeling tool  and\/or the verification tool . For example, the executable form  may comprise an interpretative programming language that is executed in a run-time environment of either the graphical modeling tool  and\/or the verification tool ",{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 2B","b":["200","204","120","102","102","200","102","102","204","204","204","204","102","102","102","204","204"]},"The computing devices  and \u2032 can connect to the network  through a variety of connections including standard telephone lines, LAN or WAN links (e.g., T1, T3, 56 kb, X.25, SNA, DECNET), broadband connections (ISDN, Frame Relay, ATM, Gigabit Ethernet, Ethernet-over-SONET), cluster interconnections (Myrinet), peripheral component interconnections (PCI, PCI-X), and wireless connections, or some combination of any or all of the above. Connections can be established using a variety of communication protocols (e.g., TCP\/IP, IPX, SPX, NetBIOS, Ethernet, ARCNET, Fiber Distributed Data Interface (FDDI), RS232, IEEE 802.11, IEEE 802.11a, IEEE 802.11b, IEEE 802.11g, and direct asynchronous connections).","The network  and network connections may include any transmission medium between any of the computing devices  and \u2032 such as electrical wiring or cabling, fiber optics, electromagnetic radiation or via any other form of transmission medium capable of supporting the operations of the present invention described herein.","Each of the computing devices  and \u2032 may be configured to and capable of running any portion of the graphical modeling and verification environment . The graphical modeling and verification environment  and\/or any portion thereof, such as the graphical modeling tool  and the verification tool , can be capable of and configured to operate on the operating system that may be running on any of the computing devices  and \u2032. Each computing device  and \u2032 can be running the same or different operating systems. Additionally, the graphical modeling tool  and the verification tool  can be capable of and configured to operate on and take advantage of different processors of any of the computing devices  and \u2032. Various combinations of operating systems and processors can be running on any of the computing devices.",{"@attributes":{"id":"p-0057","num":"0056"},"figref":"FIG. 2C","b":["120","102","102","204","210","220","102","102","210","102","210","210","210","102","215","210","102","215","220","220","220","210","220"]},"Additionally, the graphical modeling tool  and\/or verification tool  may be deployed such that portions of the graphical model  and\/or the executable  may execute on certain portions of the network  and\/or on certain computing devices  or \u2032. For example, some functionality of the graphical model  may be time critical or sensitive, and therefore may be targeted to execute on a computing device  and \u2032 and a segment or portion of the network  with desired performance and\/or operating characteristics. Other functionality of the graphical model  may be less time-sensitive and may be targeted to be deployed to any computing device , \u2032 available on the network .","In summary, the graphical modeling tool  and verification tool  may be deployed across a wide range of different computing devices, different operating systems, and different processors. Furthermore, the graphical modeling tool  and verification tool  may be deployed in various distributed and\/or client\/server environments in various network topologies and configurations.","Preconditions and Postconditions","A design element in the graphical model may be provided to represent a precondition for testing or verification of the model-based design represented by the graphical model .  depicts an illustrative graphical model  having a model-based design  and an element  in the graphical model  representing and identifying a precondition. The element  may also be referred to as a precondition element, a precondition design element, a test precondition item, or a verification precondition item. The model-based design  portion of the graphical model  represents a design of a system, or other item or entity, which may be under design, test, or verification. For example, the model-based design  may be a block diagram model provided by the graphical modeling tool  of Simulink\u00ae. The model-based design  may also be referred to as the design. From another perspective, the model-based design  portion of the graphical model  is the content of the graphical model  prior to adding any precondition element .","The precondition design element  provides a design mechanism and formalism for identifying and specifying a precondition associated with the model-based design  of the graphical model . The precondition design element  is directed towards indicating to a testing or verification tool, or any other system, a precondition for executing a test, verification, or simulation of the model-based design , such as via an executable form . In one aspect, a precondition may not be intended to affect the behavior of the design  of the graphical model  but to provide limits or constraints to the inputs of executing the design, or to provide limits or constraints to the execution space of the design under test or verification. The precondition design element  is depicted in  as separate and external to the model-based design  to illustrate that the precondition design element  is a design element used to associate a precondition with a model-based design  without affecting, altering, or otherwise being intrusive to the behavior of the model-based design . Although shown external to the model-based design  for illustrative purposes, as will be discussed later, the precondition design element  may be incorporated into the model-based design , or any element thereof, in a manner that does not affect the behavior of the model-based design . For example, the graphical modeling tool  may provide a simulation environment for simulating the graphical model . When simulating the graphical model , the graphical modeling tool  may ignore or otherwise not consider or use the precondition design element  for simulating the graphical model .","A precondition may be considered a condition or a constraint that should be established during or prior to invoking execution of the executable form  of the design . That is, the condition or constraint of the precondition provides a limit to the design and verification process by restricting possible occurrences or allowable combinations of execution scenarios. In another aspect, a precondition may also be considered a business rule or a caveat that places a condition or a constraint on inputs, actions, decisions variables, and scenarios to be executed in verification of the design . Additionally, a precondition may be considered from a mathematics perspective. As such, a precondition may provide a constraint which restricts the possible, feasible, or more realistic solutions in an optimization problem. In a further aspect, the precondition may be considered from a theory of constraints perspective in that a precondition provides any factor that limits the performance or behavior of a system, such as one modeled by the design , with respect to the system's goal or intended use. The precondition design element  of the present invention generally provides an instruction or directive for a test or verification system, such as the verification tool , for performing a test or verification on the executable form  of the design .","The precondition design element  may comprise any type and\/or form of a textual or graphical element that can be associated with a graphical model  or any portion of the model-based design . The precondition design element  may be a graphical element or construct, such as a precondition block of a block diagram model, or an icon, image, or other graphical form. The precondition design element  may provide a visual cue and comprise a highlight, a border, an animation, a change in color or font, an asterisk, an element shimmer, or any other type and\/or form of a visual cue. By way of example, the precondition design element  associated with graphical model  of  illustrates a visual cue such as a board or highlight. The precondition design element  for graphical model  may be any type and\/or form of visual cue","The precondition design element  may also be associated with any auditory, tactile or force-feedback cues, such as any sound produce-able from the computing device  or any sensory output produce-able from a haptic or touch feedback device of the computing device . For example, the precondition design element \u2032 for graphical model  of  may include an auditory, tactile, and\/or force feedback cue either alone or in combination with the precondition design element  that may be provided in a visual cue, graphical, or textual form. Additionally, the precondition design element  like the precondition design element  may be associated with a model element, such as the signal input  of the model-based design  as illustrated in the graphical model  of .","Referring still to , the precondition design element \u2032 may comprise a textual representation, such as illustrated with graphical model . In one case, the precondition design element  may comprise and be identified by any alphanumeric characters associated with an element of the model-based design . By way of example, the precondition design element \u2032 for graphical model \u2032 is illustrated as text \u201c<*precondition>\u201d associated with the signal input  of the model-based design \u2032. In other cases, the precondition design element  may be represented and comprise a portion of an element of the model-based design , such as a textual representation, indicator or configuration of the element of the model-based design. For example, a signal line in a block diagram model  may be configured to include a precondition. As such, the signal line may include textual information in the signal's configuration that represents or identifies the precondition as discussed in more detail in conjunction with  below. Additionally, a textual indicator associated with an element of the model-based design , such as the signal line, may be visually depicted in the graphical model . Furthermore, the precondition design element  may comprise any combination of textual or graphical representation that may or may not be visible in the graphical model .","The precondition design element  may also include or be associated with information of logic or a constraint  to identify, define, specify, reference, or otherwise provide the definition, specification, or instruction of the precondition. The constraint  may be created, defined, specified, or otherwise provided by any type and\/or form of graphical or textual expression. The precondition design element  may provide pre-determined or fixed set of constraint  information. For example, the graphical modeling tool  may provide a library of precondition design elements  that provide one or more constraints based on any operating, performance, modeling, system, environment, or other constraints known for a specific domain or system or for a component of the design  under consideration. In another example, the precondition design element  may provide a pre-determined or fixed constraint  that is further configurable or changeable. In this manner, the precondition design element  may provide a template for a constraint  to be used as is or to be further modified for the desired use.","The precondition design element  may be configurable to allow the constraint  to be defined or provided either programmatically via any application programming interface (API) or by a user via an input device. In one embodiment, the precondition design element  may provide or include a configuration mechanism, such as graphical user interface or command line interface, for receiving user input or selections for defining the constraint of the precondition. For example, the user interface may provide a list of one or more business rules for selection in defining the precondition of the precondition design element . Additionally, in some embodiments, the precondition design element  may be configurable to be set to or changed to an active or inactive state. Instead of removing precondition design elements  that may not be desired to be used in certain cases, the precondition design element  may remain associated with the model-based design  but not used.","The constraint  of the precondition design element  may be expressed or specified in any type and\/or form of graphical or textual language. In embodiments employing Simulink\u00ae and Stateflow\u00ae, the constraint  may be defined using any function, API, language statement, block, state diagram element, graphical construct, and\/or graphical function provided by the graphical modeling tool . The constraint  may be specified using the high-level textual programming language of MATLAB\u00ae. In another embodiment, the constraint  may be specified in a language or in a format used by the verification tool . For example, the constraint  may be specified textually as a string to include text in a format or syntax known by or understandable by the verification tool . Any type and\/or form of graphical or textual instruction, including interpretive or non-interpretive programming languages, markup languages such as the HyperText Markup Language, scripting languages, or a custom syntax and language may be used in providing the constraint  of the present invention.","Additionally, the constraint  may be expressed as any type and\/or form of logic or conditional to provide the desired precondition constraint. The constraint  may be specified as a value or range of values to set an input, parameter, argument, variable, property, attribute, or other settable data element related to the model-based design  or the execution of the model-based design  in execution form . The value or range of values may include any data type, such as a Boolean, string, integer, binary, array, real or complex number, data structure, object, scalar and\/or vector, of any size and\/or dimension. Also, the value or range of values may be specified in an inclusive or exclusive manner. For example, a constraint  for a signal input of a block diagram model  may be specified that it should be equal to a value or range of values, e.g., inclusive manner, or should not be set to a value or range of values, e.g., an exclusive manner. The constraint  may also be expressed as conditional logic where a value of a data element of the model-based design  is set or changed based on the state, status, or value of another data element of the model-based design . For example, the constraint  may be expressed as an if-then, if-then-else, or any other type of if, case, select or logic conditional statement.","Referring now to , an illustrative precondition design element  is depicted with an illustrative model-based design  of a graphical model . The model-based design  of  depicts a graphical model  in the form of a block diagram model, such as a model provided by Simulink\u00ae, including multiple functional blocks connected together via signal lines as known by those ordinarily skilled in the art. A precondition design element  and constraint  may be associated with an element of the model-based design . In the illustrated example, the precondition is associated with the initial input signal  of the design . The constraint  of \u201c<=3\u201d indicates a precondition that the design  is to be constrained or concerned with only values of the input signal  less than or equal to 3 in whatever units are relevant to the input  or the design . The precondition  and constraint  provide an instruction to a verification tool  that may execute an executable form  of the design  to perform verification executions only with input values of less than or equal to 3. In this manner, the verification of the design  would be constrained to the possible occurrences of input values of less than or equal to three instead of all possible combinations of input values. Also, in some embodiments, if the graphical modeling tool  performs simulation of the design , the graphical modeling tool  may ignore the precondition and allow or simulate with any value for the input signal .","As illustrated in , the precondition design element  may be separated into multiple elements or constructs, graphical or textual, having a portion representing an identifier of a precondition  and a portion specifying the constraint . Additionally, one or more constraints  may be specified for a single precondition element . The one or more constraints  may be applied in combination as a logical conditional for the precondition element  by, for example, via a logical OR or AND function. For example, one constraint  may be exclusively OR'd with another constraint  to provide a resulting constraint for the precondition. A constraint  may be associated or used with multiple precondition elements . Although  illustrates separated parts of the precondition design element , one or more constraints  may form and be included or otherwise incorporated in a single precondition design element . The precondition design element  and constraint  may take many visual, textual and\/or configurable forms in practicing the operations of the present invention as described herein.","Although the precondition design element  is depicted in  as associated with a signal input  of the design , the precondition design element  may be associated with any portion or element of the design . The precondition design element  may be associated with or provide a precondition for any element of the graphical model  in the terms and granularity of the graphical model  as may be provided by the graphical modeling tool . For example, in the exemplary case of Simulink\u00ae and\/or Stateflow\u00ae, the precondition design element  may be provided for any signal, block, state, object, and any other element used to provide a design . Likewise, the constraint  of the precondition design element  may use or reference any data element accessible via the graphical model  or graphical modeling tool . For example, in the exemplary case of Simulink\u00ae and\/or Stateflow\u00ae, the constraint  may use or reference any signal value, signal attribute, MATLAB\u00ae workspace variable, function, parameter, argument, application programming interface (API), object property, block data element, state diagram element, or any other data element available in Simulink\u00ae and\/or Stateflow\u00ae. The precondition design element  and constraint  may be applied in a manner relevant to the context, terms, elements, design, and environment provided by the graphical model  and\/or graphical modeling tool .",{"@attributes":{"id":"p-0073","num":"0072"},"figref":["FIG. 3D","FIG. 3D"],"b":["350","315","215","315","215","350","355","315","350","340","355","340","340","350","220","315","340","315","315"]},{"@attributes":{"id":"p-0074","num":"0073"},"figref":["FIG. 3E","FIG. 3E"],"b":["350","350","315","215","350","330","215","350","215","360","350","355","350","355"]},"By way of example, the configuration mechanism  of a user interface illustrated in  may provide any suitable means and\/or mechanisms for identifying a precondition  and\/or specifying a constraint . For example, the user interface  may provide a text field , or any other suitable user interface element, for specifying a name or identifier of the precondition . For specifying the constraint , the user interface  may provide an input element , such as a text field or edit box, to allow a user to enter in free form any expression of the constraint . In one embodiment, the user interface  may provide a slider element \u2032 for selecting a value for the signal . The slider element \u2032 may allow a single value to be selected or a range of values to be selected. In another embodiment, the user interface  may provide user interface elements \u2033 to present a dial mechanism to select one or more values for a precondition constraint of the signal . For example, a first dial may be used to select or provide a low limit and a second dial may be used to select or provide a high limit for a range of values for the constraint . Although the configuration mechanism  is illustrated with a certain set of user interface element , , \u2032 and \u2033, any type and\/or form of user interface elements, graphical or textual, may be used to configure a precondition  and constraint .","Referring now to , a hierarchical graphical model  with multiple precondition design elements  is depicted in another exemplary embodiment. A precondition design element  may be associated with different elements or portions of the design  and at different hierarchical levels of the design . The illustrative graphical model  of  is a multiple-block block diagram model with one of the blocks B providing or referencing a sub-system or another graphical model \u2032. At the first level of the graphical model , a first precondition design element  is provided for the input signal  and a second precondition design element  is provided for the block B of the design . As illustrated in , the first precondition design element  may be a single construct while the second precondition design element \u2032 is a multiple element construct. The second precondition design element \u2032 may include multiple constraints \u2032 logically combined to provide a constraint for the precondition design element \u2032. For example, the value range for a data element of block B may be specified as a value greater than 0 logically AND'd with a value less than 10. At the second hierarchical level of the graphical model , the graphical model \u2032provides a sub-system of the design  via block B, and a third precondition design element \u2033 is provided for the input signal \u2032 of the design \u2032.","Although not illustrated in , the precondition design element  of  may also be deployed in the multiple precondition design element and hierarchical graphical model embodiment of . Additionally, any one or more of the precondition design elements , \u2032, and \u2033 may be configured to be active or inactive. This provides the designer the configurability to provide and use different precondition design elements , \u2032 and \u2032 in combination or alone. For example, the designer may not be concerned with the verification of the sub-system or second hierarchy of graphical model  and therefore set the third precondition design element \u2033 to an inactive or off state. In this manner, a verification tool  may not consider the third precondition design element \u2033 when performing verification.","Although in , the precondition design element  is illustrated as part of and included in the graphical model , the precondition design element  may be provided external to but in association with the graphical model  or the design  of the graphical model . In some embodiments, the precondition design element  may be identified and\/or the constraint  specified in an external storage location, such as a file, a library, another software program or set of executable instructions, or any other computer readable medium or storage location. In other embodiments, the precondition design element  may be defined in an input file for a code generation process so that the precondition design element  may be provided in association with the executable form  of the design. The precondition design element  of the present invention may be specified externally to the graphical model  by other suitable means and\/or mechanisms and in other environments.",{"@attributes":{"id":"p-0079","num":"0078"},"figref":["FIG. 4","FIG. 3A-3F"],"b":["400","350","405","400","215","215","215","210"]},"At step  of illustrative method , a portion of the design  of the graphical model  is identified for associating a precondition. For example, a designer or modeler of the design  may determine which elements and functionality of the system under test to provide a precondition. A precondition may be associated with the design  for a variety of reasons and purposes as one ordinarily skilled in the art would appreciate. Additionally, the portion of the graphical model  associated with a precondition may be based on the context and environment of the system, the desired behavior, the intended use or goal of the system, and the desire of the designer. In some embodiments, the precondition design element may be used to 1) constrain the behavior of a design under test or verification to those patterns that may be more meaningful in the larger context of the design being analyzed, 2) force execution patterns to be more realistic in the context of the system and the system's environment, 3) improve the performance of automated verification techniques by reducing the execution space that must be explored or executed, and\/or 4) perform guided design exploration through the use of formal analysis or test generation. The precondition design element  may be used to provide any type and\/or form of condition, instruction, command, or directive to a testing or verification tool, or to another system or environment, to use or execute the design  in executable form  in a desired manner.","At step  of illustrative method , a precondition design element  is provided and associated with the identified or otherwise desired portion of the design  represented by the graphical model . The graphical modeling tool  provides any type and\/or form of suitable means and\/or mechanism for creating, identifying, designing, configuring, specifying, or otherwise providing a precondition design element . In some embodiments, the graphical modeling tool  provides a toolbox or palette for dragging and dropping or otherwise placing a precondition design element  in the design layout area for the graphical model . A precondition design element  may be associated with a portion of the design by either a physical connection in the design  or by a logical or virtual association. In some embodiments, the precondition design element  is connected via a line or other suitable connector or graphical element to the identified portion of the design . For example, a precondition design element  may be connected to a signal line, a block, or a state of a block diagram model . In other embodiments, the association between the precondition design element  and the portion of the design  may be formed via a reference or identifier in the configuration of the precondition design element  to the desired portion of the design . Various means and\/or mechanisms may be used to associate a precondition design element  with a portion of the design .","Additionally, illustrative steps  and  may be repeated as desired to associate one or more precondition design elements  with different portions of the design  of the graphical model . Furthermore, steps  and  may be performed at one or more levels of hierarchy that may be provided by the graphical model .","At step  of illustrative method , the precondition design element  may be configured to provide the desired precondition. The graphical modeling tool  may provide any type and\/or form of suitable configuration mechanism, such as the user interface  illustrated in , to configure the precondition design element . In other embodiments, a pre-configured or fixed-functionality precondition design element  may be used. A template or pre-configured precondition design element  may be provided and further configured or modified as desired using any suitable configuration mechanism. In configuring the precondition design element  at illustrative step , the constraint  may be defined or specified to provide the desired constraint using any graphical or textual form, syntax, or language as previously discussed in connection with . Additionally, in practicing the operations of the present invention and illustrative method  as described herein, any one or more precondition design elements  may be configured to be active or inactive as may be desired during the design, test, and verification process.","An illustrative method  of  and system  of  of the present invention will be used to discuss the operations, functions, and structure of the code generation techniques. Referring to , in brief overview, the code generating system  comprises a code building tool  having a code generator . The code building tool  may comprise the Stateflow\u00ae Coder and Real-Time Workshop\u00ae products both manufactured by The MathWorks, Inc.","Referring to , the illustrative method  obtains a graphical model . The graphical model  may include one or more precondition design elements . In some embodiments, the graphical model  may be obtained via a file. The graphical model  may comprise a file in a format that the code building tool  or code generator  can read and that follows a file specification for defining precondition design elements  or for otherwise referencing a precondition design element . In some embodiments, the precondition design element  is included with or is a part of the graphical model . In other embodiments, the precondition design element  may be referenced by or associated with the graphical model  but provided by a file or medium external or separate from the graphical model . In these cases, in providing the graphical model  at illustrative step , any other files or resources needed to perform the code generation process as described herein may also be provided.","The code building tool  and\/or code generator  may obtain either the graphical model  from an application programming interface (API) call to another application or via an interface to another environment, such as the graphical modeling tool . In yet a further embodiment, the graphical modeling tool  or another computer program saves and converts the graphical model  into a format readable by the code building tool . For example, a graphical model  produced with Simulink\u00ae and Stateflow\u00ae may be converted into an intermediate model file representation such as an .rtw type file readable by the automatic code generator of Real-Time Workshop\u00ae.","At step  of illustrative method , an executable or simulateable form  of the model-based design  of the graphical model  is provided or generated and built for verification by a verification tool . The code building tool , such as Stateflow\u00ae Coder and\/or Real-Time Workshop\u00ae, may generate code for the graphical model . The code building tool  and code generator  use one or more input files  in conjunction with reading and processing the graphical model .","The one or more input files  may comprise files including templates, commands, input parameters, configuration data, source code, data and class definitions, component configuration, device driver or any other information that may be used by the code generator  to generate code for the graphical model . The input files  may include files to provide input to and configure the code generator  to generate source code files  for a specific target hardware platform, for example, a specific processor. In an exemplary embodiment of Real-Time Workshop\u00ae as the code generator , Real-Time Workshop\u00ae uses target language compiler script files, with a .tlc file extension, as input files  to the code generation process. The .tlc files provide sections of programming instructions to be implemented for block and element references as they may be found in the graphical model  during the code generation process. The .tlc files also can provide data and class definitions for data element references found in the graphical model . Furthermore, the .tlc files may provide data and other information to translate precondition design elements  associated with the graphical model  into precondition specifications  to be used by the verification tool  or the target system. Additionally, the .tlc files also comprise compiler directives, built-in functions, and other code generation commands to direct Real-Time Workshop\u00ae during the code generation process.","In operation, the code generator  reads in information regarding or a representation of the graphical model  and uses the input files  to generate code by translating the graphical model  into one or more source code files . By way of example, the automatic code generation can be discussed in terms of generating code with Real-Time Workshop\u00ae from a block model diagram  generated with Simulink\u00ae. Simulink\u00ae creates and stores block diagram models  into model files with an .mdl file extension. As part of the code generation process, Real-Time Workshop\u00ae reads in an .mdl model file and analyzes the model to generate an intermediate model file with an .rtw extension. This intermediate .rtw model file comprises a hierarchical structure of records describing systems and their blocks and connections analyzed from a block diagram model  of the .mdl file.","A language compiler called the target language compiler of Real-Time Workshop\u00ae works with .tlc files and .rtw files to produce code. The target language compiler interprets a program that reads the intermediate model file description of an .rtw file. As the target language compiler encounter a record in the .rtw file, it uses directives in the .tlc files corresponding to the record to direct the code generation process for the specific record. As such, the target language compiler works much like a text processor. For example, the target language compiler uses block .tlc files, which specify the particular code for a block, to transform each block into code. When it reads a record in the .rtw file that references a block, the target language compiler applies code from the corresponding block .tlc file to generate code for the block in source code files . Additionally, model wide .tlc files are also used to provide input to the target language compiler for global customization of the code. Model wide .tlc files may direct the target language compiler to generate main routines to provide entry points into the program, source code header files to setup data structures, and utility functions to support code for particular blocks. The block and model wide .tlc files can be modified to generate customized code for blocks and to generate any desired global customizations to the code.","The source code files  generated from the code generator , such as Real-Time Workshop\u00ae, may comprise program instructions of a programming language, such as C, which may further be in a format and style following the ANSI\/ISO C standard. Additionally, the source code files  may be generated to comprise fixed-point or floating-point source code. The programming instructions of the source code files  may be generated to run on any real-time operating system or for a specific processor. In a further embodiment, the programming instructions of the source code files  may be optimized for performance or versatility, and\/or for a specific target hardware platform. In another embodiment, the code generator  can be configured via the input files  to generate custom source code comprising a style and format as directed by the input files . The code generator  can be also configured via the input files  to provide customized source code to support such customizations as error handling, optimization, code and data reduction, code reusability, scoping of variables, and other characteristics of the source code that may be modified during the source code generation process.","A portion of the source code  or object code  generated or provided by illustrative method  may be targeted to run on a specific computational hardware device, such as an embedded hardware platform, or a specific processor of a computing device  and another portion may be targeted to run on a personal computer, such as a desktop or notebook. For example, a portion of the design  of the graphical model  may process data or perform loops that are time critical. In comparison, the display may not need to be updated in a time critical manner as the viewer's eyes may only perceive updates at a certain rate. The time critical data processing or loops may be embodied in source code  and\/or object code  targeted for a specific processor of a certain speed or capability and the non-time critical code ,  may be targeted for any general computing device. Various ways to process and target various portions of code may be employed to meet the desired functionality and\/or execution of the design  represented by the graphical model .","At step  of illustrative method , one or more programs may be built from the automatically generated code to provide an executable form  to execute the design  represented by the graphical model . The code building tool  also provides for the building of the source code files  into object code  to generate one or more programs to run on a target platform and\/or operating system or to be executed or use by a target verification tool . As depicted in , the executable  provides an executable form of the design  represented by the graphical model .","The build process of illustrative step  may include compiling the code and linking libraries, drivers, and other programs via a make program or some other compiling utility. The code building tool  may invoke a compiler provided by software available with the operating system, such as a make utility on a UNIX operating system. The compiler may be provided from a software development package such as Visual C\/C++ from Microsoft Corporation of Redmond, Wash. One ordinarily skilled in the art will recognize the code building tool  may invoke any type of compiler that is configured to and capable of translating the source code  into object code  to be executed by the target computing device .","Although the code generator  is generally discussed in terms of generating source code, the code generator  may provide code in any other form, such as object code, pre-existing source code, or other programmable instructions suitable for representing the functionality of the design  represented by the graphical model . Additionally, although the discussion herein is in terms of source code files  and object code  from a programming language like C, the code generator  may generate any type of programming related output, such as an interpreted programming language and\/or scripting language. For example, the code generator  may generate code for perl, awk, VBscript, Javascript, tcl, or the technical computing programming language of MATLAB\u00ae. In other cases, the code generator  may generate output in other types of languages, such as the hardware description language of HDL or a custom or specific language of a verification tool . the code building tool may apply various types of languages in different ways in generating code and the code generator may build the code based on the type of language.","In other embodiments of step  of illustrative method , the executable form  of the model-based design  may not need to be generated, such as from an automatic code generation system. The graphical model  may already be in a form that is executable by either the graphical modeling tool  or the verification tool . In this manner, the graphical model  may provide the executable form  for testing or verification by the verification tool . Although generally discussed as an executable form  of the model-based design , the executable form  may also be referred to as a simulation form or as being simulateable in that the graphical model  can be executed, simulated, tested, or verified.","At step  of the illustrative method , the precondition design element  associated with the graphical model  is provided in a form applicable by the verification tool  or target system in testing or verifying the executable form  of the design . For example, the code generation process may provide a precondition specification  for a verification tool by processing or translating the precondition design element  into a desired or suitable form. The precondition design element  may be considered separate from the design  and therefore may not be included or incorporated in the executable form  of the design . For example, the precondition design element  may be intended and configured not to affect the behavior of the system design . In these cases, code may not be generated for the precondition design element .","In some embodiments, the code generation process described above may be used to provide a precondition specification  having a desired form and content for use by the target system, such as the verification tool . For example, the precondition specification  may be processed by illustrative step  to be provided in the same language as the code of the executable . In other embodiments, the precondition design element  and\/or constraint  may be configured or defined to already have a form to be used and processed by a target verification tool . As such, the precondition specification  may be formed or provided by extracting, parsing, or otherwise using content from the configuration or definition of the precondition design element . In yet a further embodiment, the executable form  may be generated at illustrative step  to incorporate any type and\/or form of mechanisms to provide for or apply the precondition design element  and\/or precondition specification .","In view of steps ,  and , it will be appreciated that the illustrative method  is directed towards providing an executable form  and a precondition specification  of the design  such that a verification tool  or other target system may execute testing or verification of the design  in a desired manner by applying the preconditions according to the precondition design element . At step  of illustrative method , the design  represented by the graphical model  is verified by the verification tool  by executing the executable form  and applying the preconditions according to the precondition specification . The manner and techniques used for performing verification and applying the preconditions will be based on the verification tool . Furthermore, the design and verification process may be interactive and illustrative methods  and  may be performed multiple times with different or modified designs  and\/or precondition design elements  to reach or otherwise provide for the desired result or to otherwise finalize a design .","Conditions and Points of Observation","In further exemplary embodiments, the aforementioned preconditions and postconditions may be replaced by a single entity that can be referred to a condition. A condition can be a location in a model which may be either satisfied or unsatisfied by underlying data associated with the condition. A condition may serve as a precondition or a postcondition, and the same condition may serve as both a precondition and a postcondition. That is, a condition which serves as a precondition in one context may serve as a postcondition in another context, and vice versa.","Conditions may be placed in an \u201cenforced satisfied status\u201d or \u201cenforced unsatisfied status.\u201d When placing the condition in an enforced satisfied status (for example), a computer may be instructed to assume that the condition is satisfied regardless of whether the condition would actually be satisfied by underlying data.","A condition may be used to validate the behavior of points of observation in a model. Points of observation may include locations in a model which are related to data. The points of observation may receive data, manipulate data, and\/or output data. For example, points of observation may include blocks in a block diagram model of a dynamic system.","By combining enforced statuses with conditions, it becomes possible to evaluate points of observation in a model in a robust and efficient way. Postconditions which might not have been otherwise verifiable may be verified through the use of conditions and enforced statuses. Further, conditions may be evaluated even in the absence of underlying data which would otherwise be required in order to determine if the condition is satisfied (or not satisfied).",{"@attributes":{"id":"p-0104","num":"0103"},"figref":"FIG. 6A","b":["600","600"]},"The model  includes two input source blocks, a first input  (In1), and a second input  (In2). An output block  (Out1) is also provided.","The model  further includes a number of points of observation , , , represented by blocks. A point of observation can represent an entity in the model, which may be associated with data, having some observable characteristic which may influence the behavior of the model. For example, in a block diagram, a point of observation may be a block or a subsystem having multiple blocks. The points of observation may include input ports for receiving information and output ports for transmitting information. The points of observation may manipulate data to generate outputs values.","The input source blocks  and , the output block , and the points of observation , ,  are connected by signals. In the model , each signal is associated with a condition , , , , , . However, in other embodiments conditions need not be placed on every signal, and need not be associated with signals specifically. Conditions may also be associated with, for example, input and\/or output ports of the points of observation , , .","The portion of the model  surrounded by the dashed border is an example of a portion  of the model containing a condition  which may be subject to evaluation. There are a number of ways to validate the condition . For example, as shown in , the value (and therefore satisfied or unsatisfied status) of condition  may be dependent on the first output (Outl) of the point of observation . The first output (Outl) of the point of observation  may in turn be dependent on the data passing through the condition , which may be dependent on the output (Outl) of the point of observation . Accordingly, in one embodiment, the validation tool may issue an Assumption. An Assumption instructs a point of observation associated with a condition to emit a value satisfying the condition. An Assumption may be represented using an Assume command. An Assume command may take as an argument the name of the condition to be assumed as valid. For example, when used to obtain a value associated with a condition named \u201cC,\u201d an exemplary Assume command might be:","Assume (C)",{"@attributes":{"id":"p-0109","num":"0108"},"figref":"FIG. 6B","b":["618","628","628","628","616","628"]},"A stub  may be created by the validation tool in response to a user command. A stub  may be represented as a block in a block diagram model. The stub  may replace any points of interest used to determine whether a given condition is valid, and also may replace any points of interest which are not necessary in order to determine whether the condition is valid.","A stubAssumption is more robust than an Assumption. A condition may be satisfied by an Assumption but not satisfied by a stubAssumption, because an Assumption of a condition represents only a subset of values that satisfy the condition, while a stubAssumption represents all values that satisfy the condition. However, a stubAssumption may be more complicated to implement in code and more time-consuming to validate the additional values. Thus, if a programmer merely wishes to know if a condition is satisfiable, rather than if a condition is always satisfied by a particular point of observation, the programmer may rely on an Assumption. The Assumption may force a point of observation to emit a small range of values that are possible outputs of the point of observation. If a value satisfies the condition, then it is known that the condition is satisfiable.","An Assumption or stubAssumption may be used in conjunction with a Prove command in order to evaluate a condition. For example, if the condition  of the model  is named \u201cP3,\u201d and the condition  is named \u201cP,\u201d then a user wishing to validate that the output at the condition  (P) is valid may issue a command such as:","Prove (stubAssume (P3), P)","This command may instruct the validation tool to prove whether condition  (P) is satisfied, given the assumption that the output at condition  (P3) is valid. The stubAssume (P3) command may cause the validation tool to generate a stub encapsulating any necessary information about the model  preceding the condition  (P3).","In one embodiment, the Prove( ) command may take two arguments. The first argument may represent the conditions in the model which are to be placed in an enforced satisfied condition (i.e., these conditions are assumed to be valid). The first argument may include a plurality of conditions. For example, as shown in  a portion  of the model  may include several inputs for which the stubAssume( ) command may be called. In the example depicted in , a user may wish to validate the condition . If the condition  is named \u201cA1\u201d and the condition  is named \u201cP4,\u201d then the first argument to the Prove( ) command may be a set of conditions which should be assumed.","A stub typically abstracts away a portion of the model. Therefore, a stubAssume is typically used in conjunction with a condition which may serve as either a precondition or a postcondition. When the portion of the model preceding a condition in question is very limited (such as when a condition can serve as only a precondition and not a postcondition), it may be unnecessary to create a stub. For example, if the condition represents an input data source, such as condition  in  (representing input data source  (In1)), it may be unnecessary to create a full stub for the condition.","Accordingly, in some embodiments, a user may specify that the validation tool may recognize when it is unnecessary to create a full stub, such as when a condition is connected to an input data source. If a user specifies that such a condition, such as the condition , should be the subject of an Assumption, then the validation tool may use an Assume command as described above. However, if the user does not specify an Assumption or a stubAssumption for a condition  attached to an input source block , the validation tool may rely on the input source block  to obtain suitable values in the same manner as with a stub. An exemplary command showing the use of a stubAssumption for the condition  (P4) and an input source block  for the condition  (A1) in order to evaluate a condition  (P3) may be:","Prove ({A1, stubAssume (P4)}, P3)","Based on this command, as shown in  the validation tool may create a stub  for the condition  (P4), which represents all valid values which satisfy the condition  (P4). The validation tool may rely on the input source block  for values which satisfy the condition  (A1). In effect, the condition  (A1) and the condition  (P4) may be treated as preconditions in order to determine whether the condition  (P3) is valid. In this example, the condition  (P3) may be treated as a postcondition. The validation tool may analyze the preconditions and postconditions in the manner described above in order to determine whether the condition  (P3) is satisfied.","The second argument for the Prove( ) command may be the condition which is to be evaluated.","Based on the conditions that are placed in an enforced satisfied condition as described by the first argument for the Prove( ) command, the validation tool may determine whether the condition described in the second argument is satisfied.","In some embodiments, the system may verify multiple conditions at once. For example, the second argument to the Prove( ) command may represent a set of conditions to be verified, as in the example below:","Prove ({A1, A2}, {P1, P2})","Techniques for verifying one or more conditions in a model will be described below with reference to the model  of  and the portion  of the model  shown in .",{"@attributes":{"id":"p-0122","num":"0121"},"figref":["FIG. 7","FIG. 7"]},"At step , a graphical model is provided, as described in steps  and , above. The graphical model may be a graphical block diagram model, and may include a plurality of points of observation, such as blocks or subsystems which represent one or more blocks. The model may be provided in a graphical modeling environment, such as Simulink of the MathWorks, Inc.","The points of observation may be related to data in the model. For example, the points of observation may manipulate data, may receive data at one or more input ports, and may output data at one or more output ports.","At step , a plurality of conditions are identified. The conditions may include a first condition and a second condition. The first condition and second condition may be in the model, for example at an input or output of a point of observation. In one embodiment, the second condition may be associated with an output of a first point of observation from among the plurality of points of observation. The first and second conditions may be associated with a portion of the model that is subject to evaluation. The first condition and\/or second condition may be associated with an element external to the model, such as an input source or output source, or another model such as a state diagram model.","The model may also be analyzed to determine which conditions are not necessary in order to evaluate the first and second condition, and may disable any conditions which are not used in the validation process. For example, the conditions may be evaluated during a simulation of the model, or during a design phase of the model. The first condition and\/or the second condition may be activated or deactivated based on a state of the model during an execution or simulation of the model. If it is determined that a particular subsystem will not be reached during the current phase of execution, conditions associated with the subsystem may be deactivated. The conditions may be reactivated when the subsystem becomes reachable.","At step , the first condition may be placed in an enforced satisfied status. The enforced satisfied status indicates that the first condition is presumed to be in a satisfied status. For example, an Assume or stubAssume command may be issued for the first condition to place the first condition in a satisfied status.","At step , the second condition may be evaluated by the verification tool to determine whether the second condition is satisfied. For example, the verification tool may process a Prove command as described above.","If an Assume command was used at step  in order to force a point of observation to emit a value which satisfies the first condition, the value may be carried through one or more points of observation which intervene in a data path between the first condition and the second condition. This may cause further values to be generated, as when the values are received as an input at a point of observation such as a block or a subsystem. The point of observation may use the values to manipulate information, and may cause output values to be generated and forwarded through the data path. At some point, the data path crosses the second condition, and a value for the data at the second condition is analyzed to determine whether the second condition is satisfied. If so, the validation tool may return \u201ctrue\u201d as the output of the Prove command. If not, the validation tool may return \u201cfalse\u201d as the output of the Prove command.","If a stubAssume command was used at step , then a range of values representing the values which will satisfy the first condition may be output. The range of values may be carried through the data path, as described above, and the second condition may be analyzed for each of the values in the range in order to determine whether the second condition is satisfied for each of the values. If so, the validation tool may return \u201ctrue\u201d as the output of the Prove command. If not, the validation tool may return \u201cfalse\u201d as the output of the Prove command.","In many situations, there are a limited number of values which satisfy the first condition (and which therefore need to be tested). For example, the first condition may be satisfied only with respect to integers in the range [\u221210, 10]. Accordingly, in such a situation there are a limited number of values which need to be tested to verify the second condition.","There may be an infinite or extremely large number of values which satisfy a particular condition. In this case, the validation tool may apply one or more principles to determine whether the second condition will always be satisfied by the first condition. For example, if the second condition may be satisfied by any value over \u201c100\u201d and any value of the first condition will cause a value of 100 or greater to reach the second condition, the validation tool may determine that the second condition is satisfied for every value of the first condition without testing each value individually.","At step , after the second condition is determined to be satisfied, the verification tool may verify that the first condition is in an unenforced satisfied status. For example, the verification tool may reverse the assumptions: if the first condition was assumed to be satisfied in order to evaluate whether the second condition was satisfied, the validation tool may, at step , assume that the second condition is in an enforced satisfied status and verify that the first condition is satisfied. This may involve repeating steps - while reversing the roles of the first condition and the second condition.","At step , if the first condition and second condition are determined to be satisfied, the first condition and\/or the second condition may be used as preconditions in the model. Accordingly, if a Prove( ) command was issued at step  to verify the second condition (\u201cC2\u201d), the Prove( ) command may be changed to an Assume (C2) command and the validation tool may proceed to use the second condition (which served as a postcondition in steps -) as a precondition to evaluate another portion of the model.","The techniques described above can be used with multiple conditions serving as preconditions, and\/or multiple conditions serving as postconditions. For example, rather than using a first condition as a precondition and second condition as a postcondition, the validation tool may use first and second conditions as preconditions in order to verify a third condition as a postcondition. Alternatively, the validation tool may be capable of using a first condition as a precondition to verify second and third conditions as postconditions.","The technique described in  assumes that a condition is satisfied and uses the enforced satisfied status of the condition to evaluate another condition. However, it is also possible to assume that a condition is not satisfied, or can never be satisfied, and use the enforced unsatisfied status of the condition to determine whether another condition is satisfiable. Such a technique is described below with reference to .",{"@attributes":{"id":"p-0137","num":"0136"},"figref":"FIG. 8"},"At step , a graphical model is provided. At step , a plurality of conditions are identified. The conditions may include a first condition and a second condition. Steps  and  therefore generally correspond to steps  and , above.","At step , the first condition may be placed in an enforced unsatisfied status. That is, instead of assuming that the first condition is satisfied, it is assumed that the first condition is not satisfied. This may be accomplished for example, by using an Assume or stubAssume command for a first condition (\u201cC1\u201d), but instructing the command to assume that the first condition (C1) is not valid. For example:","Assume (!C1)","or","stubAssume (\u02dcC1)","If the Assume command is used to place the first condition in an enforced unsatisfied status, the validation tool may cause a point of observation to emit a value which does not satisfy the first condition. If the stubAssume command is used to place the first condition in an enforced unsatisfied status, the validation tool may test the values which cause the first condition to be unsatisfied. As noted above with respect to step , although the first condition may be in an unsatisfied state with respect to an infinite number of possible values the validation tool may apply general principles instead of evaluating every possible value that does not satisfy the first condition.","At step , a first point of observation may be evaluated, at least in part based on the unsatisfied status of the first condition. The first point of observation may, for example, receive input data through a signal affiliated with the first condition and output data through a signal affiliated with the second condition. Accordingly, the first point of observation may accept a value that does not satisfy the first condition, process the value to generate an output value, and forward the output value to the second condition.","At step , the verification tool may determine whether it is possible to satisfy the second condition. For example, if the value generated at step  satisfies the second condition, then the validation tool determines that the second condition is satisfiable (whether or not the first condition is satisfied). If no value generated at step  can satisfy the second condition, then the validation tool determines that the second condition is unsatisfiable unless the first condition is satisfied (and perhaps not even in that case, as when the second condition is unsatisfiable for all possible values).","If it is determined that the second condition is satisfiable regardless of the satisfaction status of the first condition, then it is known that the first condition is not required to be satisfied in order for the second condition to be satisfied. Accordingly, in future evaluations, the validation tool may eliminate the first condition from evaluation when called upon to evaluate the second condition as a post condition, as described in step , above.","In view of the structure, functions and operations of the systems and methods as described herein, the present invention provides a design technique and mechanism for specifying preconditions for the test, analysis, and\/or verification of a model-based design.","The precondition\/condition design element of the present invention can be used in a model-based design approach in such a manner as to not affect or alter the behavior of the system but at the same time provide constraints for the verification of the system. The system design represented by the graphical model may be used as a design specification for an implementation, and associated with or in the same graphical model the precondition design element may be used as a design specification for verification. Instead of using the configuration or development environment of the verification tool to specify preconditions, the designer may specify preconditions in the graphical modeling environment in the same modeling language and format as the design specification for implementation. This enables the designer to more easily and efficiently associate results from verification and corresponding preconditions with the design specification provided by the graphical model.","Many alterations and modifications may be made by those having ordinary skill in the art without departing from the spirit and scope of the invention. Therefore, it must be expressly understood that the illustrated embodiments have been shown only for the purposes of example and should not be taken as limiting the invention, which is defined by the following claims. These claims are to be read as including what they set forth literally and also those equivalent elements which are insubstantially different, even though not identical in other respects to what is shown and described in the above illustrations."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 2A"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 2B"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 2C"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 3A"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 3B"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 3C"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 3D"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 3E"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 3F"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 5A"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 5B"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 6A","b":"600"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 6B","FIG. 6A"],"b":["626","600","628","626"]},{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 6C","FIG. 6A"],"b":["630","600"]},{"@attributes":{"id":"p-0033","num":"0032"},"figref":["FIG. 6D","FIG. 6C"],"b":["632","630"]},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
