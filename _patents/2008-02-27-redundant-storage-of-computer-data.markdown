---
title: Redundant storage of computer data
abstract: Redundant storage of computer data including encoding N data values through M linear expressions into M encoded data values and storing each encoded data value separately on one of M redundant storage devices where M is greater than N and none of the linear expressions is linearly dependent upon any group of Nâˆ’1 of the M linear expression.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07865798&OS=07865798&RS=07865798
owner: International Business Machines Corporation
number: 07865798
owner_city: Armonk
owner_country: US
publication_date: 20080227
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF EXEMPLARY EMBODIMENTS"],"p":["This application is a continuation application of and claims priority from U.S. patent application Ser. No. 11\/136,660, filed on May 24, 2005.","1. Field of the Invention","The field of the invention is data processing, or, more specifically, methods, systems, and products for redundant storage of computer data.","2. Description of Related Art","Retrieving computer data from tape backup is an expensive process, often requiring human intervention. It is more efficient to retrieve computer data from a storage device available across a local network or a local data communication connection. A corporate desktop computer today may be provided with 80 or more gigabytes of hard disk space, much of which may be unused. On a local area network with a few dozen such machines there may be huge amounts of unused storage space from which data could be retrieved much more efficiently than from a tape drive, for example. In prior art, however, there is no efficient way to access such storage. Moreover, the storage space involved is unreliable. Individual users on desktop computers may reinstall an operating system without notice, install and remove disks, reformat a disk, and, of course, simply turn off the computer.","Methods, systems, and products are disclosed for storage of computer data on unreliable media where the risk of unreliability is reduced with redundancy. More particularly, methods, systems, and products are disclosed for redundant storage of computer data that include encoding N data values through M linear expressions into M encoded data values and storing each encoded data value separately on one of M redundant storage devices where M is greater than N and none of the linear expressions is linearly dependent upon any group of N=1 of the M linear expressions.","The foregoing and other objects, features and advantages of the invention will be apparent from the following more particular descriptions of exemplary embodiments of the invention as illustrated in the accompanying drawings wherein like reference numbers generally represent like parts of exemplary embodiments of the invention.","Exemplary methods, systems, and products for redundant storage of computer data according to embodiments of the present invention are described with reference to the accompanying drawings, beginning with .  sets forth a network diagram illustrating an exemplary system for redundant storage of computer data according to embodiments of the present invention. As explained in more detail below, the system of  operates generally to carry out redundant storage of computer data according to embodiments of the present invention by encoding N data values through M linear expressions into M encoded data values, storing each encoded data value separately on one of M redundant storage devices, where M is greater than N and none of the linear expressions is linearly dependent upon any group of N\u22121 of the M linear expressions.","Data for redundant storage is any computer data that may usefully be stored, for backup purposes, for example, on unreliable media. Unreliable media are any storage media from which stored data is not guaranteed to be completely recoverable. Encoding N data values through M linear expressions into M encoded data values, one data value for each linear expression, when repeated for many data values, may be viewed as producing M streams of encoded data for storage on M redundant storage devices. Each of the N data values can be recovered from storage, so long as at least N of the encoded values can be recovered. In an example where N=2 and M=7, the encoded data is stored on 7 redundant storage devices, and all the data is recoverable if the encoded data is recoverable from only two of the redundant storage devices. The other 5 redundant storage device may be off-line, damaged, or even destroyed. The data is still recoverable if two of them are available. That is how the risk of using unreliable media is reduced with redundancy.","The system of  includes a source of data for redundant storage () represented as a database server () that implements persistent data storage with storage device (). Database server () is coupled for data communications to other computers through network (). Also coupled to network () for data communications are several other computers including desktop computer (), RAID (Redundant Array of Independent Disks) controller (), personal computer (), and mainframe computer (). The system of  also includes redundant storage devices (-). The redundant storage devices are not redundant as devices. The redundant storage devices are \u2018redundant storage devices\u2019 in the sense that portions of their storage media are made available for redundant storage of data from source () through improvements according to embodiments of the present invention in desktop computer (), RAID controller (), personal computer (), and mainframe computer ().","The arrangement of servers and other devices making up the exemplary system illustrated in  are for explanation, not for limitation. Data processing systems useful according to various embodiments of the present invention may include additional servers, routers, other devices, and peer-to-peer architectures, not shown in , as will occur to those of skill in the art. Networks in such data processing systems may support many data communications protocols, including for example TCP\/IP, HTTP, WAP, HDTP, and others as will occur to those of skill in the art. Various embodiments of the present invention may be implemented on a variety of hardware platforms in addition to those illustrated in .","For further explanation,  sets forth a block diagram illustrating an exemplary system for redundant storage of computer data according to embodiments of the present invention. The system of  includes a redundant storage controller (), a software module programmed to carry out redundant storage of computer data according to embodiments of the present invention. Redundant storage controller () operates generally to carry out redundant storage of computer data according to embodiments of the present invention by encoding N data values through M linear expressions into M encoded data values, storing each encoded data value separately on one of M redundant storage devices, where M is greater than N and none of the linear expressions is linearly dependent upon any group of N\u22121 of the M linear expressions. A linear expression is an expression of the form xa+yb+z where a and b are variables and x, y, and z are constants. In the example of , M is set to 7, and N is set to 2. With M=7 and N=2, data values for redundant storage () from storage device () are encoded in this example using the 7 linear expressions () A, B, A+B, 2A+B, 3A+B, A+2B, and A+3B, each of which is formed with two variables, A and B. (The linear expression A is formed from A and B with B multiplied by zero; the linear expression B is formed from A and B with A multiplied by zero.)","Redundant storage controller (), by encoding a stream of N data values from storage device () through M linear expressions into M encoded data values and storing each encoded data value separately on one of M redundant storage devices produces, in this example because M=7, 7 streams of encoded data, one for each of the 7 linear expressions. The redundant storage controller directs each stream of encoded data to a separate redundant storage device. That is:\n\n","Redundant storage controller () encodes the data values () through M linear expressions () into M encoded data values by calculating values for the expressions. Given data values A=5 and B=6 with N=2 and M=7, for example, redundant storage controller () encodes the data values by calculating values for each of the 7 expressions:\n\nA=5\n\nB=6\n\n11\n\n216\n\n321\n\n217\n\n323\n","In this example, redundant storage controller () stores the encoded value for A on storage device (), the encoded value for B on storage device (), the encoded value for A+B on storage device (), and so on, storing each encoded data value separately on one of M redundant storage devices (). Then redundant storage controller () repeats the encoding process for the next N data values in the stream of data for redundant storage from storage device (), and then repeats again for the next N data values, and again, and again, creating M streams of encoded values for redundant storage on M redundant storage devices according to M linear expressions.","All the data is recoverable so long as at least N of the redundant storage devices remain operable. In the example, of , if storage devices (, , , , and ) are all unavailable, off-line, damaged, for any reason, and only storage devices () and () remain to support recovery of redundant data storage, all the data can be recovered. Recovering the encoded data from storage devices () and () in this example recovers the data encoded as A+2B and A+3B. Continuing with the example of two data values A=5 and B=6, both can be recovered by linear algebra. Recover B by subtracting the two expressions:\n\n323\n\n217\n\nto obtain B=6, and then substitute B=6 into A+2B=17 as A+2(6)=17 to obtain A=17\u221212=5. Encoded data from any 2 of the 7 storage devices in the particular example of  can be recovered by linear algebra, and in the general case, encoded data from any N of M storage devices in the particular can be recovered by application of linear algebra\u2014so long as N is less than M and, as explained in more detail below, none of the linear expressions used for encoding is linearly dependent upon any group of N\u22121 of the M linear expressions.\n","Redundant storage of computer data in accordance with embodiments of the present invention is generally implemented with computers, that is, with automated computing machinery. In the system of , for example, all the nodes, the database server, the storage devices, the RAID controller, and so on, are implemented to some extent at least as computers. For further explanation, therefore,  sets forth a block diagram of automated computing machinery comprising an exemplary computer () useful in redundant storage of computer data according to embodiments of the present invention. The computer () of  includes at least one computer processor () or \u2018CPU\u2019 as well as random access memory () (\u2018RAM\u2019) which is connected through a system bus () to processor () and to other components of the computer.","Stored in RAM () is a database management system (\u2018DBMS\u2019) () of a kind that may serve as a source of data for redundant storage by operating a database through a database server such as the one illustrated at reference () on . Also stored in RAM are data values for redundant storage (). Also stored in RAM is a redundant storage controller, a set of computer program instructions that implement redundant storage of computer data according to embodiments of the present invention by encoding data values through linear expressions and storing the encoded data values on redundant storage devices according to embodiments of the present invention. Also stored in RAM () is a redundant storage daemon, a set of computer program instructions that implement redundant storage of computer data according to embodiments of the present invention by monitoring and indicating the unused portion of storage space on a redundant storage device, writing encoded data to an unused portion of storage space on a redundant storage device, and reducing encoded storage on the redundant storage device when free storage space is less than a predetermined threshold amount.","Also stored in RAM () is an operating system (). Operating systems useful in computers according to embodiments of the present invention include UNIX\u2122, Linux\u2122, Microsoft NT\u2122, AIX\u2122, IBM's i5\/OS\u2122, and others as will occur to those of skill in the art. Operating system (), DBMS (), data values for redundant storage (), redundant storage controller (), and redundant storage daemon () in the example of  are shown in RAM (), but many components of such software typically are stored in non-volatile memory () also.","Computer () of  includes non-volatile computer memory () coupled through a system bus () to processor () and to other components of the computer (). Non-volatile computer memory () may be implemented as a hard disk drive (), optical disk drive (), electrically erasable programmable read-only memory space (so-called \u2018EEPROM\u2019 or \u2018Flash\u2019 memory) (), RAM drives (not shown), or as any other kind of computer memory as will occur to those of skill in the art.","The example computer of  includes one or more input\/output interface adapters (). Input\/output interface adapters in computers implement user-oriented input\/output through, for example, software drivers and computer hardware for controlling output to display devices () such as computer display screens, as well as user input from user input devices () such as keyboards and mice.","The exemplary computer () of  includes a communications adapter () for implementing data communications () with other computers (), including, for example, redundant storage devices. Such data communications may be carried out through serially through RS-232 connections, through external buses such as USB, through data communications networks such as IP networks, and in other ways as will occur to those of skill in the art. Communications adapters implement the hardware level of data communications through which one computer sends data communications to another computer, directly or through a network. Examples of communications adapters useful for determining availability of a destination according to embodiments of the present invention include modems for wired dial-up communications, Ethernet (IEEE 802.3) adapters for wired network communications, and 802.11b adapters for wireless network communications.","For further explanation,  sets forth a flow chart illustrating an exemplary method for redundant storage of computer data according to embodiments of the present invention that includes encoding () N data values () through M linear expressions () into M encoded data values () and storing () each encoded data value separately on one of M redundant storage devices (). In the method of , M is greater than N, and none of the linear expressions is linearly dependent upon any group of N\u22121 of the M linear expressions.","Encoding with standard arithmetic results in values for linear expressions that vary in their storage requirements. Recall from the example above that data values A=5 and B=6 with N=2 and M=7 may be encoded with the 7 linear expressions A, B, A+B, 2A+B, 3A+B, A+2B, and A+3B as:\n\nA=5\n\nB=6\n\n11\n\n216\n\n321\n\n217\n\n323\n\nReaders will observe that the value of the expression A=5 can be stored in four binary bits as 0101, and the value of the expression B=6 can be stored in four binary bits as 0110. The binary value of A+B=11 fits in four bits: 1011. The binary value of the expression 2A+B=16, however, requires more than four bits of storage: 10000. It is more difficult to synchronize streams of recovery data from redundant storage devices if the encoded values are of various sizes.\n","In the method of , encoding () N data values () through M linear expressions () into M encoded data values () may be carried out by calculating values for the expressions with Galois arithmetic. Galois arithmetic is an arithmetic whose values always fit into the same quantity of binary storage. The quantity of storage may be varied according to the application, 4 bits, 8 bits, 24 bits, and so on, as will occur to those of skill in the art. That is, in the method of , encoding () data values () may be carried out by encoding data values in units of four bits per value, the advantages of which are clarified in the description set forth below in this specification.","Galois addition is defined as a Boolean exclusive-OR operation, \u2018XOR.\u2019 Galois subtraction also is defined as a Boolean exclusive-OR operation, \u2018XOR.\u2019 That is, Galois addition and Galois subtraction are the same operation. In Galois math, A+B=B+A=A\u2212B=B\u2212A. XORing values expressed in the same number of binary bits always yields a value that can be expressed in the same number of binary bits. Examples include:",{"@attributes":{"id":"p-0038","num":"0044"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"7"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"6","colwidth":"42pt","align":"center"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"6","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},"0001",{},"0001",{},"1010"]},{"entry":[{},"XOR",{"u":"0001"},"XOR",{"u":"0010"},"XOR",{"u":"0101"}]},{"entry":[{},{},"0000",{},"0011",{},"1111"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"6","align":"center","rowsep":"1"}}]}]}}}}},"There are only 16 possible values that can be expressed in 4 binary bits, 0-15. The table in  therefore sets forth the entire Galois addition function and the entire Galois subtraction function for values that fit into 4 bits of binary storage. In the table of , values in the top row represent addends, minuends, or subtrahends, and values in the leftmost column also represent addends, minuends, or subtrahends. Sums and differences are represented in the other rows and columns. Each sum of two addends is at the intersection of a row and column identified by the addends. Each difference of a minuend and subtrahend is at the intersection of a row and column identified by the minuend and subtrahend. From the table of , therefore, in Galois addition: 6+4=2, 2+10=8, 7+13=10, 11+7=12, 15+14=1, and so on. From the table of , in Galois subtraction: 6\u22124=2, 4\u22126=2, 7\u221212=11, 4\u221210=14, 14\u22123=13, and so on.","Just as the table in  sets forth the entire Galois addition function for all 4-bit values, so the table in  sets forth the entire Galois multiplication function for all 4-bit values. The values in the topmost row of the table in  and the values in the leftmost column are multipliers or multiplicands. The values in the other rows and columns are products. Each product of a multiplicand and a multiplier is at the intersection of a row and column identified by the multiplicand and a multiplier. From the table of , therefore, in Galois multiplication: 6\u00d74=7, 2\u00d710=11, 7\u00d713=2, 11\u00d77=15, 15\u00d714=7, and so on.","The multiplication table of  is created by use of multiplication with a \u2018generator.\u2019 A generator is a quantity chosen so that multiplication is reversible. That is, when doing Galois multiplication on values of k bits, the generator is a 1+k bit number (a number equal to or larger than 2and smaller than 2chosen so that multiplication is reversible. Reversible multiplication is multiplication so that if ab=ac then either a=0 or b=c. The table of  was created with a generator of value 31.","According to the table of , decimal 10\u00d710=7. The following demonstrates how to multiply 10\u00d710 in Galois arithmetic and therefore how to create the table of . First, express the values to be multiplied in binary, then multiply, using XOR instead of addition:",{"@attributes":{"id":"p-0043","num":"0049"},"maths":{"@attributes":{"id":"MATH-US-00001","num":"00001"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":[{"mtd":{"mn":"1010"}},{"mtd":{"mrow":{"mo":"\u00d7","munder":{"mn":"1010","mi":"_"}}}},{"mtd":{"mn":"1010000"}},{"mtd":{"mrow":{"mi":"xor","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},"munder":{"mn":"10100","mi":"_"}}}},{"mtd":{"mn":"1000100"}}]}}}},"The result is a 7-bit value, which is reduced to a 4-bit value by XORing the result with the value of the generator multiplied by 2, where k is the appropriate value to zero out the multiplication result:",{"@attributes":{"id":"p-0045","num":"0051"},"maths":{"@attributes":{"id":"MATH-US-00002","num":"00002"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":{"mtable":{"mtr":[{"mtd":{"mn":"1000100"}},{"mtd":{"mrow":{"mi":"xor","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},"munder":{"mn":"1111100","mi":"_"}}}},{"mtd":{"mn":"0111000"}}]},"mo":"=","mrow":{"mi":"generator","mo":"\u00d7","msup":{"mn":["2","2"]}}},"mo":"\u2062","mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}}}}},"This result, 111100, is a 6-bit value, still not a 4-bit value. The size of the value is again reduced, this time by XORing the result with the value of the generator multiplied by 2:",{"@attributes":{"id":"p-0047","num":"0053"},"maths":{"@attributes":{"id":"MATH-US-00003","num":"00003"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mtable":{"mtr":[{"mtd":{"mn":"0111000"}},{"mtd":{"mrow":{"mi":"xor","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},"munder":{"mn":"111110","mi":"_"}}}},{"mtd":{"mn":"000110"}}]},"mo":"=","mrow":{"mi":"generator","mo":"\u00d7","msup":{"mn":["2","1"]}}}}}},"Which is six, a value that fits into 4-bits. In Galois arithmetic, therefore, 10\u00d710=6. All the other products in the table of  are created by the same use of the generator, 2\u00d72=4 . . . 2\u00d715=1, 3\u00d72=6 . . . 3\u00d715=14, and so on. Readers will recognize in view of this explanation, that Galois multiplication by use of a table makes more efficient use of computer resources because calculating a product of a multiplier and a multiplicand in Galois arithmetic typically will take much longer than a table lookup.","Galois division is a true inverse of Galois multiplication. It is therefore possible to use the multiplication table of  for division. For convenience of reference, however, the Galois division table of  is created by rearranging the values in the table of  so that values for dividends and divisors are located in the leftmost column and the top row respectively. The values in the other rows and columns are quotients. Each quotient of a dividend divided by a divisor is at the intersection of a row and column identified by the dividend and the divisor. The table in  sets forth the entire Galois division function for all values that can be represented with 4 binary bits. From the table of , therefore, in Galois division: 6\u00f74=14, 2\u00f710=6, 7\u00f713=5, 11\u00f77=14, 15\u00f714=10, and so on.","Because calculations can be performed in Galois arithmetic with values that never exceed 4 binary bits in size, efficient lookup tables may be constructed. Each of the addition, multiplication, and division tables in , , and  contains only about 256 values each of which is expressed in only 4 bits\u2014so that a complete Galois math may be expressed in less than half a kilobyte. In addition to the arithmetic tables, efficient tables for encoding and decoding through linear expressions also may be constructed.",{"@attributes":{"id":"p-0051","num":"0057"},"figref":"FIG. 9","ul":{"@attributes":{"id":"ul0003","list-style":"none"},"li":{"@attributes":{"id":"ul0003-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0004","list-style":"none"},"li":["the encoded value for the data values A=3 and B=15 encoded through A+2B is 2,","the encoded value for the data values A=0 and B=2 encoded through A+3B is 6,","the encoded value for the data values A=14 and B=15 encoded through 2A+B is 12,","the encoded value for the data values A=15 and B=2 encoded through A+B is 13,","the encoded value for the data values A=15 and B=14 encoded through 3A+B is 1,","and so on."]}}}},{"@attributes":{"id":"p-0052","num":"0064"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0053","num":"0065"},"maths":{"@attributes":{"id":"MATH-US-00004","num":"00004"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mfrac":{"mrow":[{"mi":"M","mo":"!"},{"mrow":[{"mi":"N","mo":"!"},{"mrow":{"mo":["(",")"],"mrow":{"mi":["M","N"],"mo":"-"}},"mo":"!"}],"mo":"\u2062"}]},"mo":"=","mrow":{"mfrac":{"mrow":[{"mn":"7","mo":"!"},{"mrow":[{"mn":"2","mo":"!"},{"mo":["(",")"],"mrow":{"mn":"5","mo":"!"}}],"mo":"\u2062"}]},"mo":"=","mrow":{"mfrac":{"mrow":{"mn":"7","mo":"\u2062","mrow":{"mo":["(",")"],"mn":"6"}},"mn":"2"},"mo":"=","mn":"21"}}}}}},"At 512 bytes per table, therefore, all the decoding for the case of N=2, M=7, can be done with tables occupying less than 11 kilobytes of memory.","Decoding is carried out with such a table by a lookup on encoded values. In the table of , the encoded values are in the columns labeled 2A+B and A+2B. Decoding with the table in  yields, for example:\n\n","Again with reference to : The method of  also includes retrieving () encoded data values () from storage in redundant storage devices () and decoding () the encoded data values (), thereby producing N decoded data values () that are the same N data values () that were earlier encoded and stored on M redundant storage devices. As explained above, encoded values need be retrieved from only N of the M redundant storage devices for all of the original data values to be recovered. The encoded data may be decoded by techniques of linear algebra as explained above or by table lookups on tables generated as described above.","As mentioned above, in the method of , none of the linear expressions is linearly dependent upon any group of N\u22121 of the M linear expressions. The method of  therefore also includes testing () each of the M linear expressions () for linear dependence () upon each group of N\u22121 of the M linear expressions and excluding () from the M linear expressions any expression found to be linearly dependent upon any group of N\u22121 of the M linear expressions. In the method of , one of the M linear expressions e* is linearly dependent upon a group of N\u22121 of the M linear expressions if:",{"@attributes":{"id":"p-0058","num":"0076"},"maths":{"@attributes":{"id":"MATH-US-00005","num":"00005"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":{"msup":{"mi":"e","mo":"*"},"mo":"=","mrow":{"munderover":{"mo":"\u2211","mrow":[{"mi":"i","mo":"=","mn":"1"},{"mi":"n","mo":"-","mn":"1"}]},"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mrow":{"msub":[{"mi":["a","i"]},{"mi":["e","i"]}],"mo":"\u2062"}}},"mo":","}}},"br":{},"sub":["i ","i "],"figref":"FIG. 9"},"For further explanation, here is an example of linear dependence for the case of N=3:",{"@attributes":{"id":"p-0060","num":"0078"},"maths":{"@attributes":{"id":"MATH-US-00006","num":"00006"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":[{"mtd":[{"mi":"A"},{"mi":"B"},{"mi":"C"},{"mrow":{"mi":["A","B","C"],"mo":["+","+"]}},{"mrow":{"mi":"A","mo":["+","+"],"mrow":[{"mn":"2","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mi":"B"},{"mn":"2","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mi":"C"}]}}]},{"mtd":[{"mn":"0"},{"mn":"1"},{"mn":"0"},{"mn":"1"},{"mn":"2"}]},{"mtd":[{"mn":"0"},{"mn":"0"},{"mn":"1"},{"mn":"1"},{"mn":"2"}]}]}}}},"The subset (A, A+B+C, A+2B+2C) encodes both of the lines above (0, 1, 0) and (o, 0, 1) into the same values: (0, 1, 2). In other words, taking e=A, e=A+B+C, and e*=A+2B+2C, then e*=e+2E. The subset (A, A+B+C, A+2B+2C) therefore is linearly dependent, and one of the expressions in the subset needs to be removed.","For further explanation,  sets forth a flow chart illustrating a further exemplary method for redundant storage of computer data according to embodiments of the present invention that includes storing () encoded data () by a redundant storage controller () to a redundant storage device () in a computer () coupled for data communications through a network () to the redundant storage controller (). In this example, database server () serves as a source of data values for redundant storage, and computer () serves as a redundant storage resource. Database server () is coupled for data communications with computer () through data communications network (). Redundant storage controller () is installed on database server (). Redundant storage controller () is a software module containing computer program instructions for redundant storage of computer data according to embodiments of the present invention. Computer () includes a redundant storage daemon (), a software module that carries out data communications with redundant storage controller () and other functions also, described in more detail below. Computer () also includes redundant storage device () and operating system ().","The method of  also includes receiving () in a redundant storage controller () from a communicatively coupled computer () an indication () of a portion of unused storage space () on a redundant storage device (). In this example, the redundant storage daemon () monitors the portion of unused storage space on redundant storage device () and periodically reports the portion of unused storage space to redundant storage controller () on database server ().","In the example of , a redundant storage controller () stores () encoded data by writing () the encoded data () to an unused portion () of storage media on redundant storage device (). Redundant storage device () is controlled by an operating system (), including recording in the operating system that the portion of storage media is now in use for storage of encoded data (). In the example of , the redundant storage daemon may monitor () the amount of free storage space on the redundant storage device () and reduce () encoded storage on the redundant storage device when free storage space () is less than a predetermined threshold amount (). Monitoring () the amount of free storage space on the redundant storage device () may be carried out by calls to operating system (), and reducing () encoded storage on the redundant storage device when free storage space () is less than a predetermined threshold amount () may be carried out by calling the operating system to delete data in encoded storage (). In such a case, encoded storage () is in standard operating system file structures known to the operating system, but the redundant storage daemon reduces encoded storage without informing the redundant storage controller of the reduction, thereby implementing unreliable storage. Reliability is improved according to embodiments of the present invention with redundancy.","Alternatively in the example of , storing () encoded data may be carried out by writing () the encoded data () to an unused portion () of storage media on a redundant storage device (), where the redundant storage device is controlled by an operating system (), and the writing of the encoded data is implemented without recording in the operating system the fact that the portion of storage media now has encoded data stored upon the portion of storage media (). Writing encoded data without recording storage media usage in the operating system may be carried out, for example, in hardware by a disk drive controller (not shown) which is controlled directly by a software module such as the redundant storage daemon () programmed to call the controller directly without calling the operating system, so that the operating system remains unaware of the encoded storage. Alternatively, the operating system may be provided with additional API (\u2018Application Programming Interface\u2019) functions, or improved versions of current functions, that write encoded data to unused portions of storage media without recording the usage in the usual data structures of the operating system. Readers will recognize that encoded data written to unused portion of storage media risk being overwritten by the operating system's standard writing functions because the standard writing functions have no way of knowing that unused portions have in fact been \u2018used\u2019 to store encoded data. Again, this implements unreliable media with reliability improved with redundancy according to embodiments of the present invention.","Exemplary embodiments of the present invention are described largely in the context of a fully functional computer system for redundant storage of computer data. Readers of skill in the art will recognize, however, that the present invention also may be embodied in a computer program product disposed on signal bearing media for use with any suitable data processing system. Such signal bearing media may be transmission media or recordable media for machine-readable information, including magnetic media, optical media, or other suitable media. Examples of recordable media include magnetic disks in hard drives or diskettes, compact disks for optical drives, magnetic tape, and others as will occur to those of skill in the art. Examples of transmission media include telephone networks for voice communications and digital data communications networks such as, for example, Ethernets\u2122 and networks that communicate with the Internet Protocol and the World Wide Web. Persons skilled in the art will immediately recognize that any computer system having suitable programming means will be capable of executing the steps of the method of the invention as embodied in a program product. Persons skilled in the art will recognize immediately that, although some of the exemplary embodiments described in this specification are oriented to software installed and executing on computer hardware, nevertheless, alternative embodiments implemented as firmware or as hardware are well within the scope of the present invention.","It will be understood from the foregoing description that modifications and changes may be made in various embodiments of the present invention without departing from its true spirit. The descriptions in this specification are for purposes of illustration only and are not to be construed in a limiting sense. The scope of the present invention is limited only by the language of the following claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
