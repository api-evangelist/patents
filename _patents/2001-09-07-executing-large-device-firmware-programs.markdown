---
title: Executing large device firmware programs
abstract: A processor-based system includes a system firmware program (e.g., the system basic input/output system (BIOS)) to execute a device firmware program (e.g., a device driver) stored on a storage device (e.g., an expansion read-only-memory (ROM)). For execution, the processor-based system uses a system memory including a designated region intended for storing the device firmware program. The system firmware program determines whether the device firmware program exceeds the capacity of the designated region. And, if so, the system firmware program stores the device firmware program in the designated region and at least one another location in the system memory thus supporting larger expansion ROMs on some platforms.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06910113&OS=06910113&RS=06910113
owner: Intel Corporation
number: 06910113
owner_city: Santa Clara
owner_country: US
publication_date: 20010907
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","DETAILED DESCRIPTION"],"p":["This invention relates to Basic Input\/Output System (BIOS) operations and, more particularly, to executing large device firmware programs including device drivers, such as those stored in a read-only memory (ROM).","The BIOS is a firmware-resident program that initializes a platform following power-on or reset operations. Various components of the platform are initialized, one by one, after which the operating system is booted. The BIOS is stored on a firmware device such as a read-only memory (ROM), erasable program ROM (EPROM), or a flash memory device.","Some components of the system may not be recognized by the BIOS. Some hardware devices, for example, are controlled by a non-BIOS program stored on an expansion ROM, also known as an option ROM.","For some platforms, i.e., those which support Intel architecture processors, or those which are advanced-technology (AT)- or extended-technology (XT)-compatible, the BIOS is addressed at a memory region between 0xe0000 and Oxfffff. Likewise, expansion ROMs are addressed somewhere between 0xc0000 and 0xe0000, a 128K \u201ccompatibility\u201d region. Regardless of the architecture, however, the expansion ROMs must be located in certain designated memory range or region due to compatibility reasons.","Typically, such platforms include a 32K expansion ROM dedicated wholly to supporting a video card. Of the original 128K, just 96K of the expansion ROM space is available for other expansion ROMs.","As new hardware features are supported or as hardware devices become more complex, the size of expansion ROMs tend to increase. For example, a single expansion ROM image may be expected to support many variations of the hardware. Therefore, an expansion ROM image may ideally implement a variety of desired new hardware features that take advantage of the latest hardware without needing removal of existing or older versions of code. In addition, the expansion ROM is desired to be backward compatible and platform independent.","In recognition of the limited space available for expansion ROMs, the Peripheral Component Interconnect (PCI) Bus Specification, Version 2.0, for one, introduced a mechanism for maximizing the use of space. The PCI Specification is available from The PCI Special Interest Group, Portland, Oreg. 97214. Under PCI 2.0, expansion ROMs are divided into initialization and runtime portions, although packaged into a single binary image. The initialization portion is executed, and subsequently discarded, while the runtime portion is maintained in the 128K expansion ROM region. In essence, the size of the expansion ROM stored in the expansion ROM region shrinks following initialization. However, increasingly enhanced expansion ROM support within the BIOS is desired.","Unfortunately, expansion ROMs have attained sizes of 80K to 90K and higher. Further, the ratio of initialization code to runtime code has increased, rendering the above solution impractical, in some environments. Where the initialization portion of the expansion ROM cannot be loaded into the designated expansion ROM memory, the fact that the expansion ROM shrinks following initialization is irrelevant.","Thus, there is a continuing need to support larger expansion ROMs on some platforms.","In , an expansion ROM  includes a primary module  and one or more secondary modules . The primary module  includes executable code that initializes or otherwise prepares the device supported by the expansion ROM . At power on of a processor-based system, a system BIOS will pass control to the primary module , as if the primary module were the entire expansion ROM.","The secondary modules  include code and\/or data that support the primary module during initialization. For example, one secondary module may include code such as a configuration utility. Another secondary module may, for example, include data such as error message strings. In one embodiment, the secondary modules will not be loaded into the expansion ROM region of memory.","A memory map for systems that use Intel architecture processors is depicted in  region below 640K is known as regular memory . At the bottom of regular memory is a system configuration region. The system configuration region includes pointers to interrupt addresses and configuration variables. Executable programs or data may be loaded into the regular memory .","Between 640K and 1M are regions reserved for various system functions. The first 128K is a display region , to which video data is sent such that the data may be viewable on a monitor. The next 128K region is an expansion ROM region . This region is addressed between 0xc000h and 0xe000h. Any expansion ROMs that are supported by the system may be stored in the expansion ROM region . The remaining 128K, just below 1M, is a system BIOS region . It is here that the processor begins executing instructions when power is received to the system.","The remaining region of the memory map is known as extended memory .","Typically, the extended memory  comprises the majority of memory in this system. Although programs may be loaded into the regular memory , more typically, such programs are loaded into extended memory .","Returning to , the primary module  is loaded into the expansion ROM region  in one embodiment. Recall that the expansion ROM region  also is reserved for a 32K video ROM. That leaves 96K available for expansion ROMs to be loaded in that embodiment. Increasingly, the expansion ROM region  is insufficient in size to support many expansion ROMs.","However, according to one embodiment, the entire expansion ROM  of  is not stored in the expansion ROM region . Instead, only the primary module  is stored in the expansion ROM region . The secondary modules  may be stored either in the regular memory  or the extended memory . These operations may be performed by a system BIOS on system ROM  (see ) in one embodiment.","In one embodiment, each of the secondary modules  in the expansion ROM is identified by type. For example, one secondary module A may be of type data while a second secondary module B may be of type code. In one embodiment, the system BIOS on system ROM  copies secondary modules of type data into the extended memory  while copying secondary modules of type code into the regular memory . While the primary module  is executing from the expansion ROM region , it may access the secondary modules stored in either the regular memory  or in the extended memory .","Normally, extended memory  may not be accessed by the system BIOS on system ROM  during power-on. Instead, the extended memory  is accessible once the operating system has been loaded and run. The extended memory  may be accessed during power-on if the system BIOS on system ROM  goes into protected mode. Once in protected mode, code that is stored in the extended memory  may be executed. Once the execution is complete, control returns to the system BIOS on system ROM  and the system ROM returns to real mode.","Alternatively, the system BIOS on system ROM  may enter \u201cbig real mode.\u201dBig real mode allows the system BIOS on system ROM  to access data in the extended memory  without having to go into protected mode. Accordingly, by storing secondary modules , which contain data, in the extended memory , the primary module  in the expansion ROM region  still has access to the secondary modules .","In one embodiment, a program or an executable code unit (e.g., a system firmware program  of  or a system BIOS  of ) creates a base post memory management (PMM) handle for all the secondary modules  of the expansion ROM . PMM means post memory management where POST means power-on self-test.","A PMM block  according to one embodiment is depicted in FIG. A. The PMM block  includes a plurality of PMM handles, coupled with pointers (PTRs)  to a location in memory. In one embodiment, the system firmware program  () or the system BIOS  () uses the PMM handle  to pass addresses of the secondary modules  to the primary module . The PMM handle , according to one embodiment, is depicted in FIG. B. The upper two bytes of the PMM handle may store a vendor identifier (ID)  in one embodiment. The vendor ID  is the identifier of the controller that is supported by the expansion ROM . Accordingly, both primary module  and the secondary modules  ideally may have the same vendor ID . The lower two bytes  are unique for each module. The unique bytes  may be chosen either by the system firmware program  () or the system BIOS  () and insure that the unique bytes  do not conflict with another PMM handle. In one embodiment, the primary module  knows the vendor ID  of a controller () and therefore, searches for a PMM handle for each of the secondary modules .","The PMM handle  is but one of many possible ways to identify where the secondary modules  are stored in memory. Those of ordinary skill in the art will recognize a number of ways in which the secondary modules  may be kept track of by the primary module  and either by the system firmware program  () or the system BIOS  (FIG. B).","One operation for executing the expansion ROM of  is depicted in  according to one embodiment. At some point during initialization, the system firmware program  (e.g., system BIOS) detects a storage (e.g., a flash device) (block ). A device firmware program, (e.g., code and\/or data on the expansion ROM  (FIG. )) intended for storage in a designated region, such as the expansion ROM region  () of a system memory may be identified (block ). In one embodiment, the storage may be located on a hardware device such as, a card or a controller coupled to a motherboard. The hardware device may not be able to initialize independently. To this end, the hardware device includes the storage that, in turn, contains the device firmware program associated with the hardware device. In this way, the system firmware program  for appropriate initialization of the hardware device may invoke the device firmware program. For instance, in embedded devices (e.g., a small computer systems interface (SCSI) controller () on a motherboard), the expansion ROM  code may be located in the same ROM chip, i.e., with the system BIOS on the system ROM  (FIG. ).","In operation, the system firmware program  may compare the size of the device firmware program against the size or capacity of the designated region (block ). Essentially, the system firmware program  determines whether the expansion ROM  includes multiple modules (diamond ). A check at the diamond  indicates whether the size of the device firmware program is less than the size of the designated region. If the check is affirmative, independently executable portions (e.g., the primary module  and the secondary modules  of ) of the device firmware program may be partially stored in the designated region of the system memory and the rest of the device firmware program may be stored at another location in the system memory (block ). Conversely, if the check fails, the whole device firmware program would have been loaded into the designated region of the system memory (block ).","In one embodiment, the system firmware program  may automatically determine whether the storage (e.g., expansion ROM  of ) includes at least two modules associated with the device firmware program. The two modules may include a first module (e.g., primary module  of ) and one or more second modules (e.g., secondary module  of FIG. ), according to one embodiment of the present invention. In such case, only the first module may be loaded in the designated region of the system memory while at least one second module may be copied to the another location in the system memory when initializing a processor-based system from the system firmware program .","In one embodiment, a computer system includes a basic input\/output system (BIOS), a term that refers to firmware that, when executed, controls various functions (keyboard, disk drives and display screen functions, for example) of the computer system at a basic level. Due to its ability to control the disk drives when the computer system \u201cboots up,\u201d the BIOS is responsible for loading the device firmware program (an expansion ROM image, i.e., the program code and parameter space that define the device firmware program) and the operating system. In this manner, the computer system boots up by executing BIOS instructions that cause a loader program to be loaded from a disk drive into system memory. The BIOS may then cause the computer system to execute the loader program that, in turn, causes the computer system to load particular portions of the device firmware program and the operating system into the system memory. Subsequently, the operating system may execute one or more program(s) to initialize and start execution of the operating system.","Furthermore, the expansion ROM image may be stored in a memory that does not lose its stored contents when power to the computer system is removed. For example, the expansion ROM image may be stored in a FLASH memory, an erasable electrically programmable read only memory (EEPROM) that may be rapidly updated. Thus, due to its storage in the FLASH memory, the existing expansion ROM image may be replaced to upgrade the older versions of the expansion ROM image.","Upon booting, the BIOS may detect the expansion ROM image. However, a difficulty with detecting the expansion ROM image is that for some BIOS versions (an older version, for example), the existing expansion ROM image that is stored in the FLASH memory may contain configuration data (boot options and other configuration data, for example) that are specific to a particular BIOS version which may be relatively newer than the existing BIOS version.","According to one embodiment, an expansion ROM image either may be partitioned into multiple modules that are independently identifiable and executable modules (e.g., three modules) or contained in one such single module. However, both types of the expansion ROM images may be included in the expansion ROM  as modules one through four. Besides providing for the executability, to independently identify the modules, a configuration indication may be associated with each of the modules of the expansion ROM image including, the primary module  and each module of the secondary modules . Therefore, when the expansion ROM image is to be loaded into the system memory, for a compatibility check, the configuration indications associated with all of the modules of the expansion ROM image may be checked.","More particularly, while loading the expansion ROM image, in one case where an older version of the BIOS that is unaware of multi-module type of the expansion ROM image, the older version of the BIOS may skip the modules one through three and use the fourth module. Otherwise, for a newer version of the BIOS that allows loading for the expansion ROM image of the multi-module type, modules one through three may be loaded accordingly.","Thus, regardless of the version of the BIOS, both the multi-module and the single module type expansion ROM images may be readily handled. In this manner, a backward compatibility for the expansion ROM images that may have different structures and are governed by different standards may be provided, in one embodiment. As an example, The Peripheral Component Interconnect (PCI) Bus Specification, Version 2.0, available from The PCI Special Interest Group, Portland, Oreg. 97214 provides a standardized approach to an expansion ROM image.","In one embodiment, the system firmware program  may partition the device firmware program into the first module and one second module in order to avoid modifications to a standard interface, such as standard application programming interfaces (APIs). Such standard interface may provide communication between the device firmware program and the system firmware program . Accordingly, the ability to use the standard interface may provide a platform independent initialization of the processor-based system, in one embodiment. For example, a first image type may be used to describe the secondary modules  () of the expansion ROM  () that comprise code. Likewise, a second image type may be used to describe the secondary modules  of the expansion ROM  that comprise data. This way, either the system firmware program  () or the system BIOS  () may identify these modules and dispatch them to the correct locations in a platform independent manner.","Moreover, based on a location indication, as an example, the PMM handle  (FIG. B), at least one second module may be loaded into an another location within the system memory. In addition, using the location indication, the processor-based system may dynamically identify the second module to the first module. The location indication may be derived from vendor-identifying information (e.g., vendor ID ) and module-specific information (e.g., unique bytes ) that are associated with each of the second module. In this way, the second modules may be tracked based on the location indication.","In one embodiment, the storage (e.g., expansion ROM  of ) may be scanned to detect a programmed option indicative of one or more expansion read-only-memories  (FIG. ). Each expansion ROM  may be scanned to determine whether the first module and one or more second modules are indicated. Then, the control may be passed from the system firmware program  to the device firmware program. One or more second modules may be located to initialize the processor-based system based on the one or more expansion read-only-memories detected earlier. Finally, the control may be returned to the system firmware program  to boot the processor-based system.","Another operation for executing the expansion ROM of  is depicted in  according to one embodiment. At some point during initialization, the system BIOS  identifies the expansion ROM  (block ). The BIOS  determines whether the expansion ROM  includes multiple modules (diamond ). If not, the whole expansion ROM  would have been loaded into the expansion ROM region . Accordingly, the expansion ROM  is scanned using legacy methods (block ). If multiple modules are identified, however, the BIOS  copies the primary module  to the expansion ROM region  (block ). The BIOS  also copies the secondary modules  to either the regular memory  or the extended memory  (block ). In one embodiment, secondary modules containing data are sent to the extended memory region  while secondary modules  containing code are copied to the regular memory .","In one embodiment, the BIOS  creates a PMM block  to keep track of where in memory the secondary modules  have been loaded (block ). The BIOS  also passes control to the primary module  (block ). Typically, the BIOS  passes control to an expansion ROM by jumping to the address where the expansion ROM is located at offset , although other mechanisms for passing control to the primary module  may be employed. The primary module  performs its initialization (block ). Where the primary module  needs access to the secondary modules , in one embodiment, the primary module  scans the PMM block , determines where the needed module  is located, and either retrieves data or executes code. For example, where the secondary module  is a data module, the primary module  may retrieve a string, such as an error message, from the secondary modules  stored in the extended memory  in one embodiment. Or, where the primary module  needs to execute a secondary module  containing code, a routine call may be made to this secondary module  in the regular memory . Upon completion of its operation, the primary module  returns control to the BIOS  (block ). After the expansion ROM  has been executed, the BIOS  deallocates the PMM block  as well as the other blocks holding the secondary modules  (block ).","The above operations may be repeated if other expansion ROMs are found in the expansion ROM region , whether they be multi-module expansion ROMs, such as the expansion ROM  of , or legacy expansion ROMs (diamond ).","In , a component diagram of a processor-based system is depicted. In this example, the controller is a small computer systems interface (SCSI) controller  including the expansion ROM . The SCSI controller  is coupled to the processor-based system by a secondary bus . A processor  and a memory  are coupled to one another on a primary bus . In between the buses  and  is a bridge chip . In one embodiment, the bridge chip  is a multi-function chip, which, in this case, includes support for the system BIOS .","While the present invention has been described with respect to a limited number of embodiments, those skilled in the art will appreciate numerous modifications and variations therefrom. It is intended that the appended claims cover all such modifications and variations as fall within the true spirit and scope of this present invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIGS. 3A and 3B"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4A"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4B"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIG. 5","FIG. 1"]}]},"DETDESC":[{},{}]}
