---
title: Database system, method of managing database, and computer-readable storage medium
abstract: Disclosed is a database system capable of effectively updating data in a database at a high speed. The database system includes: a storage unit that stores a database including an entity data group and at least one identifier table having only a plurality of fixed-length data; and a data processing unit that receives a query and performs data processing on the database on the basis of the received query. The identifier table has a plurality of data identifiers that uniquely indicates the plurality of entity data as the fixed-length data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09104711&OS=09104711&RS=09104711
owner: NEC CORPORATION
number: 09104711
owner_city: Tokyo
owner_country: JP
publication_date: 20090528
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND ART","DISCLOSURE OF THE INVENTION","BEST MODE FOR CARRYING OUT THE INVENTION"],"p":["The present invention relates to a database structure and a technique for processing data in a database.","A relational database management system (RDBMS) is based on a relational model theory proposed by Edgar Frank Codd (E. F. Codd) in 1970 and has been widely used. A relational database (RDB) is an aggregate of a plurality of tables (that is, relations), and each table includes at least one row (tuple) and at least one column (attribute field). For example, there is Patent Document 1 (Japanese Laid-Open Patent Publication No. 2005-208757) as a related art document about RDBMS.","However, in a general RDBMS, when a data processing amount increases and a processing load increases, a reduction in the processing speed of transactions is noticeable. One of the causes of the reduction in the processing speed is that, when a search is performed for the table forming the RDB for each row having a variable data length, it takes a long time to calculate a data reading position, as compared to when the data length of each row is fixed.","In addition, RDBMS manages data for each row using a unique key. Therefore, it is possible to effectively perform a large number of processes for each row at the high speed, but it is difficult to effectively perform a large number of processes for each column. For example, when processing data for each column, RDBMS needs to read a plurality of rows of data corresponding to a column required by a query, which causes a reduction in the processing speed. RDBMS can write each row of data to continuous storage areas of a memory. Therefore, it is possible to access each row of data at a high speed. However, when RDBMS performs a transaction related to, for example, a search process for each column, a comparison operation, or an aggregate calculation, access to data stored in a plurality of discontinuous memory areas is likely to occur frequently, which results in a reduction in the processing speed.","A system called a data warehouse (DWH) has been used as a database system that effectively performs a search process or an aggregate process on a large amount of data. However, DWH is a system that is constructed independently from basic business systems and does not update data (add new data, change the existing data, or remove the existing data) in principle. Therefore, DWH does not have a database structure capable of effectively updating data.","In order to solve the problems of RDBMS or DWH according to the related art, for example, Patent Document 2 (Japanese Laid-Open Patent Publication No. 2000-339390) and Patent Document 3 (Pamphlet of International Publication No. WO 00\/10103) disclose database systems. The database systems disclosed in Patent Document 2 and Patent Document 3 use a database structure obtained by converting logical tabular data into a plurality of information blocks corresponding to items, for example, sex, age, height, and weight. Each of the information blocks includes a value management table (value list) and an array of pointers to the value management table. The array of the pointers to the value management table means an array in which item value numbers (that is, the pointers to the value management table) in a certain column of tabular data are stored in a predetermined order (the order of record numbers) of the tabular data.","However, in the database structure disclosed in Patent Document 2 and Patent Document 3, the item value numbers in the value management table need to be arranged in a predetermined order. Therefore, when a new item value number is inserted into the value management table during the update of data (for example, the update, insertion, or removal of records), it is necessary to rearrange other existing item value numbers. In addition, the array of the pointers to the value management table needs to be updated such that the pointers are matched with the rearranged item value numbers. Therefore, in the database structure disclosed in Patent Document 2 and Patent Document 3, it is impossible to effectively update data at a high speed. In particular, when data is frequently updated, a processing load is very large and the processing speed is significantly reduced.","[Patent Document 1] Japanese Laid-Open Patent Publication No. 2005-208757","[Patent Document 2] Japanese Laid-Open Patent Publication No. 2000-339390","[Patent Document 3] Pamphlet of International Publication No. WO 00\/10103","The invention has been made in view of the above-mentioned problems and an object of the invention is to provide a database system, a method of managing a database, a database structure, and a computer program capable of effectively updating data in a database at a high speed.","According to the present invention, there is provided a database system including: a storage unit that stores a database including an entity data group containing a plurality of entity data and at least one identifier table containing only a plurality of fixed-length data; and a data processing unit that receives a query and performs data processing on the database on the basis of the received query. The identifier table has a plurality of data identifiers that uniquely indicates the plurality of entity data as the fixed-length data.","According to the present invention, there is provided a method of managing a database including: a step of receiving a query for a database including an entity data group of a plurality of entity data and at least one identifier table having only a plurality of fixed-length data; and a step of performing data processing on the database on the basis of the received query. In the method of managing the database, the identifier table also has a plurality of data identifiers that uniquely indicates the plurality of entity data as the fixed-length data.","According to the present invention, there is provided a database structure including: an entity data group that includes a plurality of entity data; and at least one identifier table that has only a plurality of fixed-length data. In the database structure, the identifier table also has a plurality of data identifiers that uniquely indicates the plurality of entity data as the fixed-length data.","According to the present invention, there is provided a computer program that causes a computer to execute a database management process. The database management process includes: receiving a query for a database including an entity data group of a plurality of entity data and at least one identifier table having only a plurality of fixed-length data; and performing data processing on the database on the basis of the received query. The identifier table has a plurality of data identifiers that uniquely indicates the plurality of entity data as the fixed-length data.","The database structure according to the invention can be applied to the database incorporated into the database system. In addition, the database structure can be applied to the database used in the database management method or the computer.","It is possible to effectively update a database at a high speed.","Hereinafter, various exemplary embodiments of the invention will be described with reference to the accompanying drawings. In all of the drawings, components having the same structure or function are denoted by the same reference numerals and a detailed description thereof will not be arbitrarily omitted with no overlapping description.","(Basic Structure of Database System )",{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 1","b":["10","10","20","30","31","32","40","41","42","40","20","21","22","23","24"]},"The database system  and a plurality of client terminals  and  are connected to a network NW. A general small network (for example, a wired or wireless LAN) is given as an example of the network NW, but the network is not particularly limited. The network NW may be a large network, such as the Internet.","Each of the client terminals  and  has a function of transmitting a query described with a query language (database language), such as a structured query language (SQL) or an XML query language (XQuery), for the database  to the database system .","The hardware structure of the database system  may be a general-purpose structure, and includes, for example, a processor, such as a central processing unit (CPU), and hardware resources, such as a main memory, a cache memory, a bus for transmitting signals, a timer circuit, an input device (for example, a keyboard), and an output device (for example, a display or a printer). However, the hardware structure of the database system  is not particularly limited.","All or some of the structures of the database system  may be implemented by hardware or a computer program (or a program code) that causes a processor to perform processes. When the functions of the components  to , , , and  of the database system  are implemented by the computer program, the processor reads the computer program from a storage medium, such as anon-volatile memory, and executes the read computer program. The components  to , , , , and  of the database system  may be incorporated into one apparatus, or they may be dispersed and incorporated into a plurality of apparatuses that is operated in cooperation with each other.",{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 2","b":["10","20","21","501","502","11","22","22","23","12","23","41","13","41","14","15"]},"The transaction executing unit  stores the log information (history information) of the transaction as the log file  in the storage device . At the same time, the transaction executing unit  stores metadata of the log of the transaction (information about the start or end of the transaction) in the transaction server .","The check point processing unit  has a function of periodically setting a check point on the basis of the log file  and the metadata stored in the transaction server . When the transaction does not end normally due to a failure in the transaction or the system (Step S of ; NO), the transaction executing unit  performs roll-forward (Step S). That is, the check point processing unit  checks the log information during a period Terr, which is defined as the period from the previously set check point to the time when a failure occurs, with reference to the log file  and removes the log information related to the transaction that has not been committed during the period Ten from the log file . When there is a transaction that is committed during the period Terr, the transaction executing unit  reflects the execution result of the transaction to the database  on the basis of the log file . Then, the transaction executing unit  returns the database  to the state before the transaction that is not committed starts to be processed, that is, the transaction executing unit  performs roll-back (Step S).","The response processing unit  receives the execution result of the transaction from the transaction executing unit  and transmits the execution result to the client terminals  and  (Step S).","The database  has a structure including an entity data group including a plurality of entity data and at least one identifier table including only a plurality of fixed-length data, which will be described below. The identifier table includes a plurality of data identifiers that substantially uniquely indicates the plurality of entity data as the fixed-length data. In addition, the identifier table includes at least one tuple that is defined in the row direction and at least one attribute field that is defined in the column direction and includes data identifiers, which will be described below.","When selecting specific entity data from the entity data group in response to a query request, the transaction executing unit  can search for a fixed-length data identifier in the identifier table without searching for the entity data group and select the entity data on the basis of the search result. The transaction executing unit  can perform a transaction including a process of searching or updating the database  on the basis of the select result.","When the database  is repeatedly updated, data is repeatedly stored in or removed from the storage device . Therefore, the data group stored in continuous storage areas of the storage device  is fragmented (fragmentation), and the cache hit ratio is reduced, which results in a low processing speed. When a plurality of data identifiers is dispersed and stored in a plurality of discontinuous storage areas of the storage device , the defragmentation unit  has a function of reading these data identifiers from the storage device  and writing the data identifiers to the continuous storage areas allocated to the identifier table.","Next, the structure of the database  according to various exemplary embodiments of the invention will be described.","(First Exemplary Embodiment)",{"@attributes":{"id":"p-0053","num":"0052"},"figref":["FIG. 3","FIG. 3"],"b":["0","40","0","0"]},"The identifier table RT includes four tuples that are defined in the row direction and four attribute fields TID, Val, Val, and Val that are defined in the column direction. In the first exemplary embodiment, for convenience of description, the number of tuples in the identifier table RT is four, but the number of tuples is not limited thereto. For example, several tens to millions of tuples may be set. The number of attribute fields TID, Val, Val, and Val is not limited to four. For example, a \u201cclient name\u201d, a \u201ccompany name\u201d, and a \u201csex\u201d may be set as the names (attribute names) of the attribute fields Val, Val, and Val.","Unique tuple identifiers R, R, R, and R are allocated to the four tuples of the identifier table RT. The attribute field Val includes fixed-length data identifiers VR, VR, VR, and VR in areas corresponding to four tuples. The attribute field Val includes fixed-length data identifiers VR, VR, VR, and VR in areas corresponding to four tuples. The attribute field Val includes fixed-length data identifiers VR, VR, VR, and VR in areas corresponding to four tuples.","The data identifiers VR to VR have values that substantially uniquely indicate the entity data in the storage area DA. Therefore, the transaction executing unit  can search for the data identifiers VR to VR and access variable-length entity data corresponding to any one of the data identifiers VR to VR on the basis of the search result. In the specification, the term \u201csubstantially uniquely\u201d means satisfying uniqueness in the processing of data in the database .","For example, when a \u201cclient name\u201d, a \u201ccompany name\u201d, and a \u201csex\u201d are set as the names (attribute names) of the attribute fields Val, Val, and Val, the data identifiers VR, VR, and VR may uniquely indicate entity data D, D, and D of \u201cYamada Taro\u201d, \u201cN company\u201d, and \u201cmale\u201d, respectively, the data identifiers VR, VR, and VR may uniquely indicate entity data D, D, and D of \u201cSato Hanako\u201d, \u201cF company\u201d, and \u201cfemale\u201d, respectively, and the data identifiers VR, VR, and VR may uniquely indicate entity data D, D, and D of \u201cIto Hajime\u201d, \u201cS company\u201d, and \u201cunknown\u201d, respectively.","The values of the data identifiers VR to VR can be calculated by a one-way hash function. The hash function outputs a fixed-length bit string when entity data is input. Therefore, the output value (hash value) of the hash function may be used as the values of the data identifiers VR to VR. The transaction executing unit  can convert a search character string into a hash value, retrieve a data identifier having a value equal to the hash value from the identifier table RT, and select entity data corresponding to the retrieved data identifier. In this case, the transaction executing unit  searches the identifier table RT including only the fixed-length data group. Therefore, the transaction executing unit  can find out a character string at a high speed. In particular, it is possible to perform a search process for each row at a high speed.","As shown in , it is preferable that the data identifiers VR to VR be stored in continuous storage areas. In this way, access to the data identifiers VR to VR is performed at a high speed, and the cache hit ratio is improved. As a result, the search speed is improved.","However, when the database  is frequently updated, the data identifiers VR to VR are likely to be dispersed and stored in discontinuous storage areas. For example, a group of the data identifiers VR to VR and a group of the data identifiers VR to VR are stored in the storage areas that are separated from each other. In this case, the defragmentation unit  reads the data identifiers VR to VR from the storage area at a predetermined timing and writes the read data identifiers VR to VR to continuous areas. In this way, it is possible to prevent a reduction in the search speed.",{"@attributes":{"id":"p-0061","num":"0060"},"figref":"FIG. 5","b":"0"},"The header area includes a conversion table indicating the correspondence between position data indicating the storage areas of the entity data and data identifiers. Specifically, as shown by symbol FB in , the conversion table defines the correspondence between a plurality of data identifiers VR to VR and position data A to A indicating the storage areas of a plurality of entity data D to D. The position data A to A may be addresses designating the absolute positions of the storage areas of the corresponding entity data D to D or offsets designating the relative positions of the storage areas. The transaction executing unit  can search the identifier table RT and refer to the header area shown by symbol FA in  to access the entity data D to D. As such, the entity data group and the identifier table RT are logically connected to each other through the header area. In this way, it is possible to effectively update the database  at a high speed, which will be described below.","In the conversion table, the overlap between the data identifiers having the same values is excluded (that is, two arbitrary data identifiers certainly have different values in the conversion table). Therefore, the use of the conversion table makes it possible to store the entity data having the same value in the storage area DA without any overlap therebetween. That is, it is possible to compress the entity data group forming the database  and store it in the storage area DA. Therefore, it is possible to effectively use the storage area DA.",{"@attributes":{"id":"p-0064","num":"0063"},"figref":["FIG. 6","FIG. 6","FIG. 6"],"b":["0","6","13","13","13","13","13","23","0","11","43","6","11","43"]},"When the database structure according to the first exemplary embodiment is used, the database system  has the following effects.","First, it is possible to effectively update the database  at a high speed. That is, the database  according to the first exemplary embodiment includes a plurality of entity data D to D and a plurality of data identifiers VR to VR that substantially uniquely indicates the entity data D to D. For example, during the replacement of specific entity data D in the database  with new entity data in response to a query, when there is entity data having the same value as the new entity data in the storage area D, it is possible to update the database  only by replacing the data identifier VR in the identifier table RT with a new data identifier without actually rewriting the entity data D in the storage area D.","During the addition (insertion) of a record to the entity data group in response to a query, when there is entity data having the same value as entity data to be included in the record in the storage area D, it is possible to update the database  only by adding a data identifier corresponding to the record to the identifier table RT. When the entity data D is removed from the entity data group in response to a query, it is possible to update the database  only by removing the data identifier VR from the identifier table RT, without directly removing the entity data D from the storage area D.","As such, it is possible to ensure a high real-time performance in the processing of the database in response to an update query, such as replacement, addition, or removal. Even when the database  is frequently updated, it is possible to effectively update the database at a high speed.","Second, it is possible to improve the portability of the database. That is, since the data identifiers VR to VR substantially uniquely indicate the entity data D to D, the dependency of the data identifiers VR to VR on the hardware structure is low. Therefore, it is possible to easily port the database according to the first exemplary embodiment to other systems.","Third, it is possible to improve the dispersibility of the database . As described above, the storage area allocated to the identifier table RT is different from the storage area DA allocated to the entity data group. That is, the identifier table RT is completely separated from the entity data group. Therefore, it is easy to arrange the identifier table RT and the entity data group so as to be dispersed. For example, it is possible to disperse the identifier table RT and the entity data group in two computer systems that are connected to through a computer network, such as a LAN.","Fourth, it is possible to prevent a reduction in the speed of access to the database . As described above, even when the data identifiers VR to VR are dispersed and stored in discontinuous storage areas (fragmentation), the defragmentation unit  can rewrite the data identifiers VR to VR to continuous storage areas. Therefore, it is possible to prevent a reduction in the speed of access to the database .","(Second Exemplary Embodiment)",{"@attributes":{"id":"p-0073","num":"0072"},"figref":["FIG. 7","FIG. 7","FIG. 3","FIG. 3"],"b":["1","40","1","11","12","1","0","11","12","0","11","12"]},"The first column table CT includes a plurality of tuples defined in the row direction and one attribute field Val defined in the column direction. The attribute field Val includes fixed-length data identifiers VR, VR, VR, and VR in areas corresponding to four tuples. The second column table CT includes a plurality of tuples defined in the row direction and an attribute field Val defined in the column direction. The attribute field Val includes fixed-length data identifiers VR, VR, VR, and VR in areas corresponding to four tuples. For example, a \u201cclient name\u201d may be set as the name (attribute name) of the attribute field Val of the column table CT and a \u201csex\u201d may be set as the name of the attribute field Val of the column table CT. In this case, the data identifiers VR and VR uniquely indicate entity data D and D of \u201cYamada Taro\u201d and \u201cSato Hanako\u201d, and the data identifiers VR to VR uniquely indicate entity data D to D of \u201cmale\u201d and \u201cfemale\u201d.","The data identifiers VR to VR have values that substantially uniquely indicate the entity data D to D in the storage area DA. Therefore, the transaction executing unit  can search for the data identifiers VR to VR and access variable-length entity data on the basis of the search result. The storage area DA may have the same conversion table as that shown in  or the same data identifier for searching as that shown in .","It is preferable that data identifiers be stored in continuous areas in each of the column tables CT and CT. In this way, the speed of access to the data identifier increases and the cache hit ratio also increases. Therefore, the search speed is improved. Even when the database  is frequently updated, the defragmentation unit  reads one group of data identifiers from the storage area at a predetermined timing and writes the read data identifiers to continuous areas. In this way, it is possible to prevent a reduction in the search speed.","The link table LT has a structure that connects the tuples between the first column table CT and the second column table CT. That is, the link table LT includes a plurality of tuples defined in the row direction and two attribute fields TID and OST defined in the column direction. The attribute field TID includes tuple identifiers R, R, R, and R that uniquely indicate the tuples. The attribute field OST includes offsets Vo, Vo, Vo, and Vo that designate the relative positions of the storage areas of the tuples in the column tables CT and CT. For example, the offset Vo is added to a predetermined reference address A, thereby obtaining an effective address Vo+A designating the absolute position of the storage area of the data identifier VR.","Similar to the first exemplary embodiment, the values of the data identifiers VR to VR included in each of the first and second column tables CT and CT may be calculated by a one-way hash function. The transaction executing unit  can convert a search character string into a hash value, retrieve a data identifier having a value equal to the hash value from the column tables CT and CT, and select entity data corresponding to the retrieved data identifier. In this case, the transaction executing unit  searches the column tables CT and CT including only a fixed-length data group. Therefore, the transaction executing unit  can find out a character string at a high speed.","The database according to the second exemplary embodiment may be considered as a database in which two columns of tabular data are divided into the first column table CT, the second column table CT, and the entity data group. Therefore, it is possible to perform a search process for each column at a high speed.","In the second exemplary embodiment, the number of attribute fields Val in each of the column tables CT and CT is one, but the number of attribute fields Val is not limited to one. For example, the number of attribute fields in each of the column tables CT and CT may be set to two or more. In addition, the number of column tables CT and CT is not limited to two, but it may be three or more.","When the database structure according to the second exemplary embodiment is used, the database system  has the following effects.","First, it is possible to effectively update the database  at a high speed. That is, the database according to the second exemplary embodiment includes a plurality of entity data and a plurality of data identifiers VR to VR that substantially uniquely indicates the entity data. Therefore, similar to the first exemplary embodiment, it is possible to effectively perform the database process in response to an update query, such as update, addition, or removal, and thus ensure a high real time performance. Therefore, even when the database  is frequently updated, it is possible to effectively update the database at a high speed.","Second, it is possible to improve the dispersibility of the database. The column tables CT and CT are completely separated from the entity data group. Therefore, similar to the first exemplary embodiment, it is easy to arrange the column tables CT and CT and the entity data group so as to be dispersed.","Third, it is possible to flexibly determine the logical connection of the tuples between the column tables CT and CT. For example, as shown in , it is possible to logically connect the tuple stored after an effective address A+Vo of the column table CT and the tuple stored after an effective address A+Vo of the column table CT using the offset Vo corresponding to the tuple identifier R. At the same time, it is possible to logically connect the tuple stored after an effective address A+Vo of the column table CT and the tuple stored after an effective address A+Vo of the column table CT using the offset Vo corresponding to the tuple identifier R.","Fourth, the column tables CT and CT are logically connected to each other by only one attribute field OST of the link table LT. Therefore, it is possible to significantly reduce the amount of data in the link table LT.","(Third Exemplary Embodiment)",{"@attributes":{"id":"p-0087","num":"0086"},"figref":["FIG. 8","FIG. 8"],"b":["1","40","2","11","12","1"]},"The database structure according to the third exemplary embodiment is the same as that according to the second exemplary embodiment except for the link table LT.","The link table LT has a structure that connects the tuples between the first column table CT and the second column table CT. That is, the link table LT includes a plurality of tuples defined in the row direction and first to third attribute fields TID, PT, and PT defined in the column direction. The first attribute field TID includes tuple identifiers R, R, R, and R that uniquely indicate the tuples. The second attribute field PT includes pointers Vp, Vp, Vp, and Vp that designate the addresses allocated to the storage areas of the tuples in the column table CT. The third attribute field PT includes pointers Vp, Vp, Vp, and Vp that designate the addresses allocated to the storage areas of the tuples in the column table CT.","The transaction executing unit  can search for data identifiers VR to VR in the first and second column tables CT and CT through the link table LT and access entity data on the basis of the search result. The database according to the third exemplary embodiment can be considered as a database in which two columns of tabular data are divided into the first column table CT, the second column table CT, and the entity data group. Therefore, it is possible to perform a search process for each column at a high speed.","In the third exemplary embodiment, the number of column tables CT and CT is not limited to two, but it may be three or more. In this case, the link table LT also includes attribute fields corresponding to a plurality of column tables.","When the database structure according to the third exemplary embodiment is used, the database system  has the following effects. Similar to the second exemplary embodiment, first, it is possible to effectively update the database  at a high speed. Second, it is possible to improve the dispersibility of the database.","Third, it is possible to flexibly determine the logical connection of the tuples between the column tables CT and CT. That is, since the link table LT has the attribute fields including pointers for each column table, the database structure according to the third exemplary embodiment can more flexibly determine the connection of the tuples between the column tables CT and CT than the database structure according to the second exemplary embodiment. For example, it is possible to change the logical positions of the data identifiers VR, VR, VR, VR, . . . in the column table CT in the link table LT only by changing any one of the values of the pointers Vp, Vp, Vp, and Vp in the attribute field PT of the link table LT. In this case, the other column table CT is not affected by the change of the logical positions.","In the example shown in , the column table CT has the duplicated data identifiers VR and VR. However, it is possible to remove the duplication by changing the pointer in the attribute field PT of the link table LT (for example, by changing the pointer Vp to the pointer Vp). Therefore, it is possible to compress the amount of data.","Fourth, since the first column table CT is logically separated from the second column table CT, the transaction executing unit  can simultaneously perform a search process for the first column table CT and a search process for the second column table CT in response to a query designating the search conditions. Therefore, it is possible to improve the search speed.","(Fourth Exemplary Embodiment)",{"@attributes":{"id":"p-0097","num":"0096"},"figref":["FIG. 9","FIG. 9","FIG. 3","FIG. 3"],"b":["2","40","3","31","32","2","0","31","32","0","31","32"]},"The first column table CT includes four tuples defined in the row direction and two attribute fields Col and Val defined in the column direction. The attribute field Col includes fixed-length tuple identifiers CRV, CRV, CRV, and CRV in areas corresponding to the four tuples. The attribute field Val includes fixed-length data identifiers VR, VR, VR, and VR in areas corresponding to the four tuples. Each of the tuple identifiers CRV, CRV, CRV, and CRV of the first column table CT has a value that uniquely indicates the tuples of the first column table CT.","The second column table CT includes four tuples defined in the row direction and two attribute fields Colt and Val defined in the column direction. The attribute field Col includes fixed-length tuple identifiers CRV, CRV, CRV, and CRV in areas corresponding to the four tuples. The attribute field Val includes fixed-length data identifiers VR, VR, VR, and VR in areas corresponding to the four tuples. Each of the tuple identifiers CRV, CRV, CRV, and CRV of the second column table CT has a value that uniquely indicates the tuples of the second column table CT.","The data identifiers VR to VR have values that substantially uniquely indicate the entity data D to D in the storage area DA. Therefore, the transaction executing unit  can search for the data identifiers VR to VR and access variable-length entity data on the basis of the search result. The storage area DA may have the same conversion table as that shown in  or the same data identifier for searching as that shown in .","It is preferable that data identifiers be stored in continuous areas in each of the column tables CT and CT. In this way, the speed of access to the data identifier increases and the cache hit ratio also increases. Therefore, the search speed is improved. Even when the database  is frequently updated, the defragmentation unit  reads one group of data identifiers from the storage area at a predetermined timing and writes the read data identifiers to continuous areas. In this way, it is possible to prevent a reduction in the search speed.","The link table LT has a structure that connects the tuples between the first column table CT and the second column table CT. That is, the link table LT includes four tuples defined in the row direction and two attribute fields TID and ColRef defined in the column direction. The attribute field TID includes tuple identifiers R, R, R, and R that uniquely indicate the tuples. The attribute field ColRef includes external tuple identifiers CRV, CRV, CRV, and CRV that substantially uniquely indicate the tuples (external tuples) of the column tables CT and CT. The external tuple identifiers CRV, CRV, CRV, and CRV have the same values as the tuple identifiers CRV, CRV, CRV, and CRV of the first column table CT and the second column table CT, but the invention is not limited thereto. The tuple identifiers may have values corresponding to the external tuple identifiers CRV, CRV, CRV, and CRV.","Similar to the first exemplary embodiment, the values of the data identifiers VR to VR included in each of the first and second column tables CT and CT may be calculated by a one-way hash function. The transaction executing unit  can convert a search character string into a hash value, retrieve a data identifier having a value equal to the hash value from the column tables CT and CT, and select entity data corresponding to the retrieved data identifier. In this case, the transaction executing unit  searches the column tables CT and CT including only a fixed-length data group. Therefore, the transaction executing unit  can find out a character string at a high speed.","The database according to the fourth exemplary embodiment may be considered as a database in which two columns of tabular data are divided into the first column table CT, the second column table CT, and the entity data group. Therefore, it is possible to perform a search process for each column at a high speed.","In this exemplary embodiment, the number of attribute fields in each of the column tables CT and CT is two, but is not limited to two. For example, the number of attribute fields in each of the column tables CT and CT may be set to three or more. In addition, the number of column tables CT and CT is not limited to two, but it may be three or more.","When the database structure according to the fourth exemplary embodiment is used, the database system  has the following effects.","First, similar to the second exemplary embodiment, it is possible to effectively update the database  at a high speed. Second, it is possible to improve the dispersibility of the database. Third, it is possible to flexibly determine the logical connection of the tuples between the column tables CT and CT.","Fourth, it is possible to improve the portability of the database. That is, since the data identifiers VR to VR substantially uniquely indicate the entity data D to D, the dependency of the data identifiers VR to VR on the hardware structure is low, similar to the tuple identifiers CRV to CRV and the external tuple identifiers CRV to CRV. Therefore, it is possible to easily port the database according to the fourth exemplary embodiment to other systems.","(Fifth Exemplary Embodiment)",{"@attributes":{"id":"p-0110","num":"0109"},"figref":["FIG. 10","FIG. 10"],"b":["3","40","1","41","42","43","3","41","42","43","3","41","42","43"]},"Alternatively, the intermediate identifier tables IT, IT, and IT may be data structures stored in the storage area DA. In this case, the storage area DA may have the same header area as that shown in  and the data structure of each of the intermediate identifier tables IT, IT, and IT may be stored in the header area together with a conversion table.","The first intermediate identifier table IT includes two tuples defined in the row direction and two attribute fields Col and Val defined in the column direction. The attribute field Col includes fixed-length tuple identifiers CRV and CRV in areas corresponding to the two tuples. The attribute field Val includes fixed-length data identifiers VR and VR in areas corresponding to the two tuples.","The second intermediate identifier table IT includes four tuples defined in the row direction and two attribute fields Col and Val defined in the column direction. The attribute field Col includes fixed-length tuple identifiers CRV, CRV, CRV, and CRV in areas corresponding to the four tuples. The attribute field Val of the second intermediate identifier table IT includes fixed-length data identifiers VR, VR, VR, and VR in areas corresponding to the four tuples.","The third intermediate identifier table IT includes three tuples defined in the row direction and two attribute fields Col and Val defined in the column direction. The attribute field Col includes fixed-length tuple identifiers CRV, CRV, and CRV in areas corresponding to the three tuples. The attribute field Val of the third intermediate identifier table IT includes fixed-length data identifiers VR, VR, and VR in areas corresponding to the three tuples.","The first to third intermediate identifier tables IT, IT, and IT have data identifiers VR to VR that substantially uniquely indicate entity data D to D in the storage area DA.","The reference table RT has reference identifiers CRV to CRV that substantially uniquely indicate the data identifiers VR to VR in the first to third intermediate identifier tables IT to IT, respectively. In this exemplary embodiment, the reference identifiers CRV to CRV have the same shape as the tuple identifiers CRV to CRV in the first to third intermediate identifier tables IT to IT. In this way, the reference identifiers CRV to CRV substantially uniquely indicate the data identifiers VR to VR, respectively. For example, the values of the reference identifiers CRV to CRV may be the values of the hash function when the data identifiers VR to VR are input.","As shown in , the reference table RT includes four tuples defined in the row direction and first to fourth attribute fields TID, ColRef, ColRef, and ColRef defined in the column direction. The first attribute field TID includes tuple identifiers R, R, R, and R that uniquely indicate the tuples. The second attribute field ColRef includes a set of reference identifiers CRV, CRV, CRV, and CRV that substantially uniquely indicate the data identifiers VR and VR of the first intermediate identifier table IT. The third attribute field ColRef includes a set of reference identifiers CRV, CRV, CRV, and CRV that substantially uniquely indicate the data identifiers VR, VR, VR, and VR of the second intermediate identifier table IT. The fourth attribute field ColRef includes a set of reference identifiers CRV, CRV, and CRV that substantially uniquely indicate the data identifiers VR, VR, and VR of the third intermediate identifier table IT.","For example, a \u201clocation\u201d, a \u201ccompany name\u201d, and an \u201cage group\u201d can be set as the names (attribute names) of the attribute fields ColRef, ColRef, and ColRef in the reference table RT. The data identifiers CRV, CRV, and CRV in the tuple (record) corresponding to the tuple identifier R uniquely indicate the data identifiers VR, VR, and VR, respectively, and the data identifiers VR, VR, and VR uniquely indicate the entity data D, D, and D of \u201cShinagawa\u201d, \u201cN company\u201d, and \u201ctwenties\u201d, respectively. Similarly, the data identifiers CRV, CRV, and CRV in the tuple corresponding to the tuple identifier R uniquely indicate the data identifiers VR, VR, and VR, respectively, and the data identifiers VR, VR, and VR uniquely indicate the entity data D, D, and D of \u201cTamachi\u201d, \u201cA company\u201d, and \u201cthirties\u201d, respectively. The data identifiers CRV, CRV, and CRV in the tuple corresponding to the tuple identifier R uniquely indicate the data identifiers VR, VR, and VR, respectively, and the data identifiers VR, VR, and VR uniquely indicate the entity data D, D, and D of \u201cTamachi\u201d, \u201cA company\u201d, and \u201cthirties\u201d, respectively. The data identifiers CRV, CRV, and CRV in the tuple corresponding to the tuple identifier R uniquely indicate the data identifiers VR, VR, and VR, respectively, and the data identifiers VR, VR, and VR uniquely indicate the entity data D, D, and D of \u201cTamachi\u201d, \u201cS company\u201d, and \u201cforties\u201d, respectively.","Similar to the first exemplary embodiment, the values of the data identifiers VR to VR included in each of the first to third intermediate identifier tables IT, IT, and IT may be calculated by using a one-way hash function. The values of the reference identifiers CRV to CRV can be calculated by using a hash function. For example, the output values of the hash function when the values of the data identifiers VR to VR are input may be used as the values of the reference identifiers CRV to CRV. The transaction executing unit  can convert a search character string into a hash value, retrieve a reference identifier having a value equal to the hash value from the reference table RT, and access entity data corresponding to the retrieved reference identifier. In this case, the transaction executing unit  searches the reference table RT including only a fixed-length data group. Therefore, the transaction executing unit  can find out a character string at a high speed.","The transaction executing unit  can search for the reference identifiers CRV to CRV and the data identifiers VR to VR and access variable-length entity data on the basis of the search result. The storage area DA may have the same conversion table as that shown in  or the same data identifier for searching as that shown in .","Each of the first to third intermediate identifier tables IT, IT, and IT has a data structure excluding redundancy, because the data identifiers having the same value are excluded. In this way, it is possible to effectively use the storage area.","It is preferable that the data identifiers be stored in continuous areas in each of the first to third intermediate identifier tables IT to IT. It is preferable that the reference identifiers CRV to CRV be stored in continuous areas in the reference table RT. In this way, the speed of access to the data identifiers and the reference identifiers increases and the cache hit ratio also increases. As a result, the search speed is improved.","Even when the database  is frequently updated, the defragmentation unit  reads one group of data identifiers or one group of reference identifiers from the storage area at a predetermined timing and writes the read data identifiers or reference identifiers to continuous areas. In this way, it is possible to prevent a reduction in the search speed.","The defragmentation unit  has a function of rearranging a plurality of data identifiers in the attribute field Val in increasing order or decreasing order of the values of the reference identifiers corresponding to the data identifier in each of the first to third intermediate identifier tables IT to IT. In this way, it is possible to effectively perform a search process.","When the database structure according to the fifth exemplary embodiment is used, the database system  has the following effects.","First, it is possible to effectively update the database  at a high speed. That is, the database according to the fifth exemplary embodiment includes a plurality of entity data and a plurality of data identifiers VR to VR that substantially uniquely indicates the entity data. Therefore, when the record is updated, added, or removed, the update of the reference table RT as well as the intermediate identifier tables IT to IT is minimized. Therefore, even when the database  is frequently updated, the update can be effectively performed at a high speed.","For example, when a new record is added (inserted), the transaction executing unit  converts the record into a reference record including the reference identifiers and newly adds the reference record to the reference table RT so as to be associated with the tuple identifier R. Then, the transaction executing unit  determines whether the reference identifier (new reference identifier) in the newly added reference record is in the existing reference record corresponding to the tuple identifiers R to R. When it is determined that the new reference identifier is in the existing reference record, the transaction executing unit  ends the update process for the database . On the other hand, when it is determined that the new reference identifier is not in the existing reference record, the transaction executing unit  adds a data identifier corresponding to the new reference identifier to any one of the intermediate identifier tables IT to IT and adds entity data corresponding to the new reference identifier to the storage area DA.","When the new reference identifier is in the existing reference record, only the reference table RT is updated. Therefore, it is possible to complete the update of the database  in a short time. For example, when the reference record to be newly added includes anew reference identifier CRV that does not exist in the reference table RT, a tuple identifier CRV and a data identifier VR are added to the intermediate identifier table IT. At the same time, entity data D is added to the storage area DA. On the other hand, when the reference record to be newly added includes only a new reference identifier CRV that has previously existed in the reference table RT, the intermediate identifier tables IT to IT and the entity data group are not updated.","Second, it is possible to improve the dispersibility of the database. The intermediate identifier tables IT to IT are completely separated from the entity data group. Therefore, similar to the first exemplary embodiment, it is easy to arrange the intermediate identifier tables IT to IT and the entity data group so as to be dispersed. In addition, it is easy to arrange the intermediate identifier tables IT to IT and the reference table RT so as to be dispersed.","(Sixth Exemplary Embodiment)",{"@attributes":{"id":"p-0131","num":"0130"},"figref":["FIG. 11","FIG. 11"],"b":["4","40","1","41","42","43","4"]},"In this exemplary embodiment, the storage area DA allocated to the entity data group is divided into a plurality of partition areas PA, PA, and PA. The partition areas PA, PA, and PA are allocated so as to store different types of entity data in the entity data group. For example, only integer-type entity data is stored in the partition area PA. Only character string-type entity data is stored in the partition area PA. Only date-type entity data is stored in the partition area PA. In this exemplary embodiment, the number of partition areas PA, PA, and PA is three, but is not limited thereto.","As such, when the entity data is stored in the partition areas corresponding to the types of entity data, it is possible to effectively use the storage area DA.","(Seventh Exemplary Embodiment)",{"@attributes":{"id":"p-0135","num":"0134"},"figref":["FIG. 12A and 12B","FIG. 12A"],"b":["5","40","1","41","42","43","5"]},"In this exemplary embodiment, similar to the fifth exemplary embodiment, the first to third intermediate identifier tables IT, IT, and IT include data identifiers VR to VR that substantially uniquely indicate entity data D to D in the storage area DA, respectively. However, the entity data D to D is included in combination data KD to KD, respectively. In each of the first to third intermediate identifier tables IT, IT, and IT, the data identifiers having the same value are excluded.",{"@attributes":{"id":"p-0137","num":"0136"},"figref":"FIG. 12B","b":["12","12","12","12","12","12","12","12"],"i":["a","b","a","b "]},"The first sub-entity data Tand the second sub-entity data Thave content related to the entity data D. For example, when the entity data D is binary data, the first sub-entity data Tmay be text data indicating the content of the binary data. When the entity data D indicates the content of character string-type data \u201c\u201d, the first sub-entity data Tmay indicate the content of integer-type data \u201c\u201d, and the second sub-entity data Tmay indicate the content of floating-point-type data \u201c.\u201d. Alternatively, when the entity data D indicates the content of Japanese text, the first sub-entity data Tmay indicate the content of English text and the second sub-entity data Tmay indicate the content of Russian text.","When selecting the entity data D in response to a query request by searching the reference table RT and the intermediate identifier tables IT to IT, the transaction executing unit  can read the entity data D and the sub-entity data Tand T. Alternatively, the transaction executing unit  may read the sub-entity data Tor Tinstead of the entity data D.","When the database structure according to the seventh exemplary embodiment is used, the transaction executing unit  successfully evades converting the entity data D read from the database  into the first sub-entity data Tor the second sub-entity data Tin response to a query request. Therefore, it is possible to improve a response speed to the query.","(Eighth Exemplary Embodiment)",{"@attributes":{"id":"p-0142","num":"0141"},"figref":["FIG. 13","FIG. 13"],"b":["6","40","1","41","42","43","6"]},"In this exemplary embodiment, combination data MD to MD including entity data D to D respectively corresponding to data identifiers VR to VR of the intermediate identifier tables IT, IT, and IT are stored in a partition area QA of the storage area DA. Combination data MTto MTincluding sub-entity data Tto Thaving content related to the entity data D to D are stored in a partition area QA of the storage area DA. Combination data MTto MTincluding sub-entity data Tto Thaving content related to the entity data D to D are stored in a partition area QA of the storage area DA.","As shown in , position data P indicating the position of the storage area of the sub-entity data Thaving content related to the entity data D is added to the entity data D forming the combination data MD. In addition, position data Pindicating the position of the storage area of the sub-entity data Thaving content related to the entity data D is added to the sub-entity data T","As such, in the database structure according to this exemplary embodiment, the entity data D is logically connected to the sub-entity data Tand T. The position data P and Pmay be addresses designating the absolute position of the storage areas, offsets designating the relative positions of the storage areas, or pointers designating the addresses allocated to the storage areas, similar to other entity data.","When selecting the entity data D in response to a query request by searching the reference table RT and the intermediate identifier tables IT to IT, the transaction executing unit  can read the entity data D and the sub-entity data Tand T. Alternatively, the transaction executing unit  may read the sub-entity data Tor Tinstead of the entity data D.","Therefore, when the database structure according to the eighth exemplary embodiment is used, the transaction executing unit  does not convert the entity data D read from the database  into the first sub-entity data Tor the second sub-entity data Tin response to a query request. Therefore, it is possible to improve a response speed to the query.","(Ninth Exemplary Embodiment)",{"@attributes":{"id":"p-0149","num":"0148"},"figref":["FIG. 15","FIG. 15"],"b":["7","40","1","41","42","43","7"],"i":["a","a","a "]},"Entity data D to D are stored in a partition area RA of the storage area DA. Sub-entity data Tto Thaving content related to the entity data D to D are stored in a partition area RA of the storage area DA.","The intermediate identifier table ITincludes an attribute field TR in addition to the attribute fields Col and Val of the intermediate identifier table IT (). The attribute field TR includes sub-data identifiers VT and VT that are in one-to-one correspondence with the data identifiers VR and VR in the attribute field Val and substantially uniquely indicate the sub-entity data Tand T, respectively. Similarly, the intermediate identifier table ITincludes an attribute field TR in addition to the attribute fields Col and Val of the intermediate identifier table IT (). The attribute field TR includes sub-data identifiers VT to VT that are in one-to-one correspondence with the data identifiers VR to VR in the attribute field Val and substantially uniquely indicate the sub-entity data Tto T, respectively. The intermediate identifier table ITincludes an attribute field TR in addition to the attribute fields Col and Val of the intermediate identifier table IT (). The attribute field TR includes sub-data identifiers VT to VT that are in one-to-one correspondence with the data identifiers VR to VR in the attribute field Val and substantially uniquely indicate the sub-entity data Tto T, respectively. The value of the sub-data identifiers VT to VT may be calculated by a hash function that outputs a fixed-length bit string when sub-entity data is input.","When selecting, for example, entity data D from the entity data group in response to a query request by searching the reference table RT and the intermediate identifier tables ITto IT, the transaction executing unit  can read the sub-entity data Thaving content related to the selected entity data D using the sub-data identifier VT. Alternatively, the transaction executing unit  may read the sub-entity data Tinstead of the entity data D.","Therefore, when the database structure according to the ninth exemplary embodiment is used, the transaction executing unit  successfully evades converting the entity data D read from the database  into the sub-entity data Tin response to a query request. Therefore, it is possible to improve a response speed to the query.","(Tenth Exemplary Embodiment)",{"@attributes":{"id":"p-0155","num":"0154"},"figref":"FIG. 16","b":["16","8","40","1","41","42","43","8"]},"In this exemplary embodiment, the storage area DA allocated to the entity data group is divided into a plurality of partition areas PAa, PAb, PAc, and PAd. The partition areas PAa, PAb, PAc, and PAd are allocated as areas in which entity data having different combinations of a data type and a data format in the entity data group are stored. Examples of the data type include an integer type, a character string-type, and a date type. Examples of the data format include a Japanese format and an English format. However, the invention is not limited thereto.",{"@attributes":{"id":"p-0157","num":"0156"},"figref":["FIG. 17","FIG. 17","FIG. 17","FIG. 17"],"b":["41","1","1","2","1","1","2","2","2"]},"The transaction executing unit  can select one storage area from the partition areas PAa to PAd with reference to the conversion table shown in  in response to a query request and read entity data or sub-entity data from the selected storage area.","Therefore, when the database structure according to the tenth exemplary embodiment is used, the transaction executing unit  successfully evades converting the entity data read from the database  into the sub-entity data in response to a query request. Therefore, it is possible to improve a response speed to the query.","The exemplary embodiments of the invention have been described above with reference to the drawings, but the invention is not limited to the above-described exemplary embodiments. It will be understood by those skilled in the art that the structure or details of the invention can be changed in various ways within the scope of the invention.","The above-described exemplary embodiments of the invention are illustrative, and the invention can adopt various structures other than the above-mentioned structures. For example, in the above-described exemplary embodiments, a process suitable to perform a transaction on the database  is performed, but the invention is not limited thereto. As described above, the transaction is a process satisfying the ACID characteristics, but the database structure according to the invention can also be applied to data processing that does not satisfy all of the ACID characteristics.","In the above-described exemplary embodiments, the query receiving unit  receives a query described with a query language, and the analysis unit  analyzes the query. However, the invention is not limited thereto. For example, the query may not be described with the query language, but may simply include a value for calling an application programming interface (API) function for a database.","The structure of the storage area DA, DA, DA, DA, or DA according to the sixth to tenth exemplary embodiments may be applied instead of the storage area DA, DA, DA, or DA according to the first to fifth exemplary embodiments.","The column tables CT and CT according to the second exemplary embodiment or the third exemplary embodiment may be stored in separate storage areas or continuous storage areas. The column tables CT and CT may be incorporated into the header area of the storage area in which the entity data group is stored. The column tables CT and CT according to the fourth exemplary embodiment may be stored in separate storage areas or continuous storage areas, or they may be incorporated into the header area of the storage area in which the entity data group is stored. Similarly, the intermediate identifier tables IT to IT according to each of the fifth to seventh exemplary embodiments and the tenth exemplary embodiment may be stored in separate storage areas or continuous storage areas, or they may be incorporated into the header area of the storage area in which the entity data group is stored, similar to the intermediate identifier tables ITto ITaccording to the ninth exemplary embodiment.","As described above, the database according to each of the second, third, and fourth exemplary embodiments has a structure capable of dividing N columns (N is an integer equal to or greater than 2) of tabular data into one link table, N column tables, and an entity data group. Therefore, it is possible to perform a search process for each column at a high speed. The database according to the first exemplary embodiment has a structure capable of dividing M (M is an integer equal to or greater than 2) rows and N columns of tabular data into an identifier table of M rows by N columns and an entity data group. Therefore, it is possible to perform a search process for each column at a higher speed than that in the databases according to the second, third, and fourth exemplary embodiments. Therefore, when N, the number of tabular data columns, is equal to or more than a predetermined value, it is preferable to divide the tabular data into N column tables, a link table, and an entity data group as in the second, third, or fourth exemplary embodiment, in order to improve the search speed for each column. When N, the number of tabular data columns, is equal to or more than a predetermined value, it is preferable to divide the tabular data into an identifier table of M rows by N columns and an entity data group as in the first exemplary embodiment, in order to improve the search speed for each row.","The present application is the National Phase of PCT\/JP2009\/002360, filed May 28, 2009, which claims priority based on Japanese Patent Application No. 2008-143769, filed May 30, 2008 and Japanese Patent Application No. 2008-249030, filed Sep. 26, 2008, the content of which is incorporated herein by reference."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The above-mentioned objects, objects other than them, characteristics, and advantages will become more apparent by the accompanying drawings and the following preferred exemplary embodiments.",{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIGS. 12A and 12B"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 17"}]},"DETDESC":[{},{}]}
