---
title: Distributed multi-user mashup session
abstract: A mashup session manager maintains state of the mashup session to ensure presentation consistency/uniformity across the execution environments. The mashup session manager also tracks the participating execution environments associated with a mashup session (e.g., usernames, device identifiers, network addresses, etc.), and transmits data for presentation consistency to the participating execution environments. In some cases, a view of the mashup session at a participating execution environment may not be current (“stale mashup session view”). The mashup session manager can detect if a view at a participating execution environment is of a past mashup session state, and provide data for the stale mashup session view to become current. In addition, the mashup session manager can propagate design modifications to the participants of the mashup session.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08458600&OS=08458600&RS=08458600
owner: International Business Machines Corporation
number: 08458600
owner_city: Armonk
owner_country: US
publication_date: 20091231
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DESCRIPTION OF EMBODIMENT(S)"],"p":["Embodiments of the inventive subject matter generally relate to the field of mashup applications, and, more particularly, to a multi-user mashup session.","A mashup application (\u201cmashup\u201d) is constructed with reference to two or more distinct services. The services referenced by a mashup return data in response to a request that can indicate one or more parameters. A service may be a data service or a functional service. The references to the services are wired together to meet a situational or niche need contemplated by a designer of the mashup. The mashup itself can be implemented with logic to operate upon the data returned from one or more of the services. The mashup then presents an output resulting from the returned data.","Embodiments include a method directed to establishing a mashup session based, at least in part, on a mashup application and execution environments of participants of the mashup session. State data representative of at least a current view of the mashup session is maintained. Consistent views of the mashup session are maintained across the execution environments in accordance with the state data.","Embodiments include a computer program product for presenting a multi-user mashup session across execution environments. The computer program product comprises a computer readable storage medium having computer readable program code. The computer readable program code can be configured to establish a mashup session based, at least in part, on a mashup application and execution environments of participants of the mashup session. The computer readable program code can be configured to maintain state data representative of at least a current view of the mashup session. And the computer readable program code can be configured to maintain consistent views of the mashup session across the execution environments in accordance with the state data.","Embodiments include a computer program product for presenting a multi-user mashup session across execution environments. The computer program product comprises a computer readable storage medium having computer readable program code. The computer readable program code can be configured to generate a mashup session identifier for a mashup session based, at least in part on a mashup. The computer readable program code is also configured to associate a plurality of participant devices with the mashup session identifier, and establish connections with the plurality of participant devices. The computer readable program code is configured to maintain state data for the mashup session that correspond to a current view of the mashup session after a most recent action performed on the mashup during the mashup session at a first of the plurality of participant devices, and communicate an indication of the state data among the plurality of participant devices.","Embodiments include an apparatus that comprises a processing unit, a network interface, and a mashup session manager. The mashup session manager is operable to establish a mashup session based, at least in part, on a mashup application and execution environments of participants of the mashup session. The mashup session manager is also operable to maintain state data representative of at least a current view of the mashup session, and maintain consistent views of the mashup session across the execution environments in accordance with the state data.","The description that follows includes exemplary systems, methods, techniques, instruction sequences, and computer program products that embody techniques of the present inventive subject matter. However, it is understood that the described embodiments may be practiced without these specific details. For instance, although examples refer to Web Services Description Language (WDSL) and Representational State Transfer (REST) other feed techniques and service technologies can be used (e.g., RSS, ATOM, etc.). In other instances, well-known instruction instances, protocols, structures, and techniques have not been shown in detail in order not to obfuscate the description.","A mashup can be instantiated that runs across different execution environments and allows respective users of the different execution environments to collaboratively use and\/or modify the mashup instance (\u201cmashup session\u201d). When any one of the multiple users submits a parameter to a view of the mashup session presented on their respective execution environment, the views of the mashup session at all of the execution environments can be updated in response, although individual configurations of the execution environments can lead to variances in the views of the mashup session (e.g., colors, alerts, fonts, etc.). A mashup session manager maintains state of the mashup session to ensure presentation consistency\/uniformity across the execution environments. The mashup session manager also tracks the participating execution environments associated with a mashup session (e.g., usernames, device identifiers, network addresses, etc.), and transmits data for presentation consistency to the participating execution environments. In some cases, a view of the mashup session at a participating execution environment may not be current (\u201cstale mashup session view\u201d). The mashup session manager can detect if a view at a participating execution environment is of a past mashup session state, and provide data for the stale mashup session view to become current. In addition, the mashup session manager can propagate design modifications to the participants of the mashup session.",{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIGS. 1A and 1B","FIG. 1A","FIG. 1A","FIG. 1A"],"b":["101","103","105","103","105"]},"At stage A, the device  selects a mashup application from a mashup catalog . The mashup catalog  can be stored locally or remotely with respect to the device . For instance, the device  retrieved one or more files for the selected mashup in response to the selection. Selection of the mashup may involve any one of adding functionality and\/or data services to an existing mashup application, removing functionality and\/or a data service from an existing mashup application, selecting multiple data services and assembling them into a mashup, etc.","At stage B, the device  indicates the selected mashup and one or more participants to the mashup session manager . The device  can indicate the selected mashup in accordance with a variety of techniques. For example, the device  can communicate any one or more of a mashup identifier, the mashup application itself, a database entry that corresponds to the mashup, etc. In addition, the device  can indicate participants for mashup session by device identifiers (MAC addresses, IP addresses, device serial numbers, etc.), by usernames, by telephone numbers, by e-mail addresses, etc. The device  may also select participants with a user interface and\/or participant data associated with or accessible by the mashup session manager .","At stage C, the mashup session manager  instantiates and populates a mashup session structure  with indications of the mashup and the participants indicated by the device . The mashup session manager  uses the mashup session structure  to maintain state of the mashup session. Example data relevant to the state of the mashup session includes actions performed, requests submitted to services of the mashup, values of parameters submitted with requests, and results received in response to the actions performed. The mashup session manager c can use the mashup session structure to update a participant device that may have a stale view of mashup session (e.g., the participant device reconnects after losing connection, the participant device connects after the session begins, etc.).",{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 9","b":"901"},"The mashup session identifier field identifier references a substructure that includes a participants field , a mashup application identifier field , and a state data field . The mashup application identifier field  indicates a mashup application identifier. The state data field  indicates at least a most recent result for the mashup session. The state data field  can indicate a default of actions, a log of requests submitted to the services of the mashup, deltas of results, history of results, result history within a window of time, etc.","The participants field  references a substructure . The substructure  (e.g., an array, list, a tree, etc.) identifies an order of the mashup session and participants of the mashup session. The substructure  also identifies devices associated with the owner and participants.","The mashup session manager  can also edit an entry of an existing structure. For instance, a mashup session manager may be responsible for several ongoing mashup sessions, and manage them with one structure. The mashup session manager  could add an entry to this structure, overwrite an entry that already exists in this structure, etc. A mashup session manager may maintain a mashup session structure for all ongoing mashup sessions managed by the mashup session manager, a mashup session structure for each owner\/creator, a mashup session structure for each individual session, etc.","After the mashup session structure  is instantiated and populated, the mashup session manager  communicates with the device  and the device . The communications can take place in any order and are represented by stages D and D in . At stage D, the mashup session manager  establishes a connection with the participant device  for the mashup session. The mashup session manager  indicates the mashup session to the participant device . The mashup session manager  establishes the connection with the device  using participant information previously indicated by the device  at stage B. Establishing the connection between the mashup session manager  and the device  may involve setting up a channel, setting up a communication session, authentication and verification operations, handshake operations, etc. Establishing the connection can also involve the mashup session manager  querying the device  for execution environment for the connection (e.g., formatting information, encoding information, software version information, etc.). The mashup session manager  may encapsulate, encode, and\/or reformat data when communicating with the device . To indicate the mashup session to the device , the mashup session manager  can supply a reference or data fire of the mashup session structure . The device  can access the mashup session structure  to retrieve the mashup application. The mashup session manager  can also or alternatively supply the mashup to the device  as well as an identifier or reference to the mashup session structure . At stage D, the mashup session manager  indicates the mashup session to the session owner that corresponds to the device . For example, the mashup session manager  transmits data that can comprise a memory address of the mashup session structure , an identifier of the mashup session structure , an identifier of the mashup session structure  and an index into the mashup session structure , etc.","At stage E, the device  performs an action in the mashup session and receives a corresponding result from the Internet .","At stage F, the device  updates a view  of the mashup session with the received result.  depicts the device  updating a map mashup. The view  illustrates a map with three restaurant locations and a public parking area nearest one of the restaurant locations that is near an intersection. As an example, the device  may have performed an action in the mashup session to map restaurants that are near the participants using the devices ,  and that satisfy cuisine criteria indicated profiles of the participants.","At stage G, the device  indicates the received result and the performed action to the mashup session manager . For instance, device  indicates a request generated from the mashup that corresponds to the action performed at stage E to the mashup session manager  and the responsive data. Embodiments do not necessarily communicate indications of both the received result and the performed action. Embodiments can communicate one of the received result and the performed action to the mashup session manager .","At stage H, the mashup session manager  updates the mashup session structure  with indications of the result and the action, thus reflecting state of the mashup session in the mashup session structure . The mashup session manager  can maintain a history of actions performed during the mashup session in the mashup session structure . The history can be comprehensive or limited by a window of time. The mashup session manager  can indicate in the mashup session structure  each result of each performed action, a most current result, a last N results, a delta of a current result and a previous result, etc.","At stage I, the mashup session manager  indicates the result to the participant device . The mashup session manager  can also provide performed action to the participant device . The participant device  can automatically perform the performed action to obtain a current view of the mashup session. The participant device  can compare the results of device  receives from the Internet  against the result indicated from the mashup session manager . Any differences can be communicated back to the mashup session manager  for validation and\/or propagation to other participants of the mashup session.","At stage J, the participant device  updates a view  of the mashup session with the result indicated by the mashup session manager . The views ,  of the mashup session at the respective devices ,  are consistent across the different execution environments of the participants.",{"@attributes":{"id":"p-0037","num":"0036"},"figref":["FIG. 1B","FIG. 1B"],"b":["105","109","105","111","105","111","105","105"]},"At stage C., the participant device  indicates the result in the action to the mashup session manager .","At stage D., the mashup session manager  updates the mashup session structure  in accordance with the action and the result indicated by the participant device .","At stage E, the mashup session manager  indicates the result to the owner of the mashup session, which is the device . As stated earlier, the mashup session manager  can also indicate the result to the device .","At stage F, the device  updates the view  in accordance with the result indicated by the mashup session manager . Alternatively, the device  can obtain the result from the Internet  by performing the action indicated by the participant device . Although the example depicted by  refer to obtaining results from the Internet, embodiments are not so limited. Embodiments can obtain results from any one or more of an intranet, virtual private network, and the Internet.","Although  depict the mashup session manager  as being separate from the device  that initiated the mashup session, embodiments are not so limited. The mashup session manager  can be implemented at an intermediate device (e.g., a cloud, server, etc.), on the device , distribute across device  an intermediate device, etc. hence, communications that seemingly flow through the mashup session manager  may be direct communications between the device , which initiated the mashup session, and devices of participants of the mashup session. In addition, communications for the mashup session that flow directly between participant devices can be mirrored to an intermediate device or entity (e.g., cloud that supports the mashup session). Embodiments may also interject a mashup session manager between an initiating device and\/or participant devices and the Internet. For example, actions performed at a participant device are submitted to the mashup session manager which generates the corresponding requests and submits or causes to be submitted the requests to the appropriate data service. Embodiments can direct mashup actions and responses to the mashup actions through a mashup session manager and\/or processes spawned by or associated with the mashup session manager. Embodiments can instantiate\/supply user interfaces to the participant devices that forward actions and corresponding parameter values indicated with the user interfaces to the mashup session manager. The mashup session manager can then submit the actions and corresponding parameter values to the mashup application. The mashup session manager can broadcast or multicast results of the submitted actions to all participants of the mashup session. In addition, the mashup session manger can perform operations to manage collisions among the execution environments. For example, embodiments can sequence and\/or prioritize actions, which impact state of the mashup session, performed at the execution environments.",{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 2","b":"201"},"Services for the mashup application are determined (). Services can be data sources, can provide functionality, or both. Examples of data source type services include weather databases, business directories, and restaurant review aggregators. Examples of functionally type services include database managers, map applications, and traffic reporting applications. Functionality can be implemented in servlets, applets, applications, etc. The services can be provided by a mashup session manager, a third-party, or a combination thereof. For example, a mashup session manager can determine the services based on the request. As another example, the mashup session manager can determine the services by querying the execution environment requesting creation of the mashup. The mashup session manager can provide an indication of the available services to the execution environment. The indication of available services can include descriptions of the services that help designers choose appropriate services for mashup applications the designers wish to create. In response, the execution environment can display the available services and can prompt the designer to select services for the mashup application.","The mashup application is created based on the services (). The services can be wired together based on indications of the designer. For example, the purpose of the mashup application can be finding restaurants convenient to the locations of several individuals. The services selected for the mashup are a restaurant database and a map application. Both the restaurant database and the map application expect locations as inputs. Locations can be represented by global positioning system (GPS) coordinates, addresses, intersections, etc. The designer indicates that restaurants should be retrieved from the restaurant database based on locations that can be provided as inputs to the mashup application. Addresses of the restaurants output by the restaurant database and the provided locations should be input into the map application so that the map application can create a map of the provided locations and the restaurants.","Participant execution environments associated with the mashup application are determined (). For example, the mashup session manager can determine the participant execution environments based on identifiers indicated in the request. As another example, the mashup session manager can determine the participant execution environments by querying the designer's execution environment. The mashup session manager can provide an indication of users known to the mashup session manager. The users may be known to the mashup session manager because the users registered the users' execution environments with the mashup session manager, the users' execution environments were previously associated with a mashup application, etc. In response, the designer' execution environment can display the known users and can prompt the designer to select participants to associate with the mashup application. The designer can select participants from the known users or can identify other users by providing contact information of the other users (e.g., an e-mail address, a phone number, an instant messaging username, etc). The designer's execution environment is automatically considered to be a participant execution environment.","A mashup session can be created based on the participant execution environments and the mashup application (). Establishing the mashup session can comprise generating a mashup session identifier and populating a mashup session state structure with data that associates the mashup application with the mashup session identifier and the participant execution environments. The mashup session structure can be populated with the mashup session identifier, an indication of the mashup application, and indications of the participant execution environments. Examples of the indication of the mashup application include a name, a reference (e.g., a link to code, a memory address (i.e., pointer) to the code), code hash value, the mashup application itself, etc. Examples of indications of the participant execution environments include usernames, device identifiers (e.g., MAC addresses, phone numbers, etc.), network addresses, etc.","Data is retrieved from the mashup application based on parameters indicated by the participant execution environments (). In the previous example of the convenient restaurant locator mashup, a mashup session manager determines the locations of each of the participant execution environments. The mashup session manager can determine the locations by querying the execution environments. The execution environments can automatically determine and return the parameters based on stored data (e.g., a GPS coordinate of a mobile phone). The devices can also prompt participants associated with the execution environments to enter the attributes. The mashup session manager can also determine parameters based on previously stored data accessible to the mashup session manager. For example, parameters can be stored by the mashup session manager when a user registers the users' execution environment with the mashup session manager. The mashup session manager can provide locations to the mashup as inputs. The mashup application can retrieve a list of restaurants from the restaurant database and utilize the map application to generate a map of the restaurants and the locations of the participant execution environments.","State information associated with the mashup session can be updated based on the data (block ). The data can be stored in the state information associated with the mashup session identifier in the mashup session structure. The request can be stored with the data in the state information to maintain a history of requests and data generated by the mashup application in response to the requests.","The data is delivered to the participant execution environments (). The data can be delivered in accordance with state information to ensure presentation consistency across the participant execution environments. Individual state information associated with each of the participant execution environments with respect to the mashup application can be maintained. The individual state information indicates a last state of the data that was viewed on a participant execution environment. The mashup session manager  can deliver data generated by the mashup application to the participant execution environment since the last state. The data can be delivered to the participants by a REST web service.","After a mashup session is established, requests made to a mashup application associated with the mashup session cause the mashup application to generate new data.  depicts a flowchart of example operations for updating mashup session state information based on data generated by a mashup application and delivering the data to multiple participant execution environments. A request to a mashup application is received from a participant execution environment (). For example, a mashup session manager receives a request to add a new service to the mashup application. As another example, the mashup session manager receives a request to associate a new participant execution environment with the mashup application.","A mashup session associated with the participant execution environment is determined (). The mashup session can be determined based on locating an identifier of the participant execution environment in a mashup session structure and determining a mashup session identifier associated with the participant execution environment identifier. A mashup application associated with the mashup session identifier can also be determined.","Data is retrieved from the mashup application based on the request (). For example, the request comprises an indication of a new execution environment to participate in the mashup session. So, the mashup session manager determines a location of the new execution environment and provides the location as an input along with locations of other participant execution environments to a restaurant locator mashup application. The locations of other participant execution environments can be determined based on state data of a previous request submitted to the mashup application. The mashup application retrieves a new set of restaurants from a restaurant database based on the locations and utilizes a map application to create a new map of the locations and the restaurants.","State information of the mashup is updated based on the data and the request (). State information can be stored in the mashup session structure based on the mashup session identifier. The state information can maintain a history of requests and data generated by the mashup application in response to the requests.","Other participant execution environments associated with the mashup session are determined (). The other participant execution environments can be determined based on state information of the mashup session.","Data is delivered to the participant execution environments in accordance with the state information (). Delivering the data to the participant execution environments can comprise determining that a state of a first participant execution environment corresponds to a past state of the mashup session and determining data generated by the mashup application since the past state of the mashup session based individual state information corresponding to the first participant execution environment in the mashup session structure. The data generated by the mashup application since the past state can be transmitted to the first participant execution environment to update a view of the mashup session associated with the first execution environment to the current state. For example, a Webpage representing the data is open in a browser of the first execution environment. A mashup session manager determines that the browser last loaded the Webpage prior to the latest request based on the individual state information. The mashup session manager can transmit an indication to the browser to cause the browser to refresh the Webpage.","After a mashup application is created, any of the participants associated with the mashup can add services to the mashup. In response to a mashup session manager adding the service to the mashup application, the mashup application can generate new data. The mashup session manager can automatically update state information to reflect the data and deliver the data to the participant execution environments associated with the mashup application.  depicts a flowchart of example operations for adding services to an existing mashup application. A request to add a service is received from a participant execution environment (). For example, a mashup session manager receives a request indicating a new service to be added to an existing mashup application.","A mashup session associated with the participant execution environments is determined (). The mashup session manager can determine the mashup application based on state information for a mashup session associated with the participant execution environment.","Existing services of the mashup application are determined (block ). For example, a mashup session manager determines the existing services of the mashup based on metadata of the mashup application.","The mashup application is updated based on indicated connections among the new service and existing services (). For example, a user may wish to add a restaurant review aggregator to the convenient restaurant locator mashup. The mashup session manager determines that a connection should be made between an output of the restaurant database to the restaurant review aggregator such that restaurant identifiers (e.g., restaurant names, addresses, phone numbers, etc.) can be input into the restaurant review aggregator to retrieve reviews.","Data is retrieved from the mashup application based on parameters indicated by the participant execution environments (). For example, a calendar application may be added to a mashup application for scheduling business lunches. A query containing the locations and calendar identifiers of the participant execution environments can be submitted to the business lunch scheduler mashup application. In response, the mashup application can retrieve information about each participant's free time from the calendar application based on an identifier for each participant's calendar. In addition to retrieving data from the additional service, the mashup can retrieve data from the existing services if the attributes have changed. For example, a map of the restaurants may be updated if one or more of the participants' locations changed.","State information associated with the mashup session is updated based on the data and the request ().","Other participant execution environments associated with the mashup are determined (). The participant execution environments can be determined based on state information of the mashup session.","Data is delivered to the participant execution environments in accordance with the state information (). For example, one of the participants opens a view of the data. Individual state information for the participant can indicate that the participant last viewed the data when a previous request was submitted to the mashup application. A mashup session manager can determine data that was generated by the mashup in response to the previous request and the current request and deliver the data to the participant through the participant execution environments.","After a mashup session is created, new execution environments can also be selected to participate in the mashup session. For example, a participant wishes to invite more colleagues to a lunch meeting.  depicts a flowchart of example operations for adding participant execution environments to an existing mashup session. It is determined that an execution environment has been selected to participate in an existing mashup session (). For example, a mashup session manager receives a request identifying the execution environment to be added as a participant in the existing mashup session. The participant execution environment can be identified based on contact information of a user associated with the participant execution environment such as an e-mail address, a phone number, instant messaging username, etc. The request can include an identifier of the existing mashup session so the mashup session manager adds the participant execution environment to the appropriate mashup session.","The existing mashup session is determined (). For example, the existing mashup session is determined based on an identifier in the request.","Data generated by the mashup is determined based on the state information (). The execution device has never accessed a view of the data, so a mashup session manager can determine data that was generated by the mashup since the mashup was created.","The data is delivered to the execution environment ().",{"@attributes":{"id":"p-0069","num":"0068"},"figref":"FIG. 6","b":["605","609","607","601","603","605","609","607","601","601","603"]},"The mashup session manager  is connected to various services  through the network . The services can comprise data sources and functionality. In this example, the services  comprise a restaurant locator , a weather service , a map application , and a traffic application . Other examples of services include business directories, movie listings, calendar applications, etc. In this example, the services  are hosted on third-party servers (not shown). In other examples, some (or all) of the services  can be hosted on the mashup session manager .","The mashup session manager  receives requests to create mashup applications from the mobile phone , the laptop computer , and the desktop computer , and creates the mashup applications based on selected services. The mashup session manager  associates participant execution environments and a mashup application with a mashup session. The mashup session manager retrieves data from the mashup application based on parameters indicated by the participant execution environments, updates state information of the mashup session to reflect the data, and distributes the data the participant execution environments in accordance with the state information. For example, the mashup session manager  can receive a request for creating a mashup application for responding to natural disasters from the desktop computer . The mashup session manager  can determine that the weather service , the map application , and the traffic application  constitute services specified for the mashup. The mashup session manager  can also determine that the laptop computer , the mobile phone , and the desktop computer  have been selected as participant execution devices associated with a mashup session. The mashup session manager  can retrieve weather information from the weather service . When a natural disaster hits, the mashup session manager  can utilize information reported by the weather service  to create a map, using the map application , of the natural disaster's location and impose the locations of the participants on the map. The mashup session manager can integrate traffic information from the traffic application  with the map to determine routes for each participant. The mashup session manager  compiles the data generated by the mashup application comprising the natural disaster information from the weather service , the map and traffic information and updates state information of the mashup session based on the data and distributes the data to the mobile phone , the laptop computer , and the desktop computer  so that the participants associated with the mobile phone , the laptop computer , and the desktop computer  can respond to the natural disaster.","Although examples refer to a stand-alone mashup session manager, embodiments are not so limited. For example, functionality of the mashup session manager can be implemented on a participant execution environment.","A distributed mashup can be created to dispatch appropriate emergency response personnel to an emergency. Services such as a map application, a traffic application, and an emergency database, can be added to the distributed mashup. Emergency responders can be selected participate in the mashup based on identification of the emergency responders' execution environments (e.g., laptop computer in response vehicles, mobile phones, navigation units in the response vehicles, etc.).  depicts a flowchart of example operations for dispatching an appropriate emergency responder using a distributed mashup. An emergency call is received (block ). For example, an emergency is reported to a 911 dispatch center. A 911 operator can input information about the emergency (e.g., location, type, etc.) into an emergency database.","A mashup session manager can detect that a new emergency has been added to the emergency database and determine the location of the emergency and type of emergency (block ) based on information in the emergency database.","Emergency responders to respond to the emergency are determined based on the type (block ). For example, firefighters should respond to a fire emergency. As another example, police officers and emergency medical technicians should respond to a car accident.","Locations of the emergency responders are determined (block ). For example, the mashup session manager queries the emergency responders' devices to determine GPS coordinates of the emergency responders.","A map application can be utilized to determine distances between the locations of the emergency responders and the location of the emergency (block ).","A traffic application can be utilized to estimate travel times for the emergency responders and determine best routes (). For example, traffic information can be imposed on the map so that the map application can determine the best routes.","An appropriate emergency responder is chosen based on the shortest distances and travel times (block ). Availability of the emergency responders can also be used to determine the appropriate emergency responder. For example, an emergency responder who has already been dispatched to a previous emergency is not chosen as the appropriate emergency responder.","The output of the mashup is stored (block ). In this example, the output comprises the type and location of the emergency and the best route.","The output is sent to the appropriate emergency responder (block ) to dispatch the emergency responder. Although the output is sent to the appropriate emergency responder, the output can be distributed to other emergency responders because the appropriate emergency responder may need backup or may not be able to respond due to external factors (e.g., an increase in traffic along the best route).","Embodiments are not limited to the example flowcharts depicted in the above figures. Embodiments can perform additional operations, fewer operations, operations in parallel, etc. For instance, referring to , operations for creating a mashup based on the participant execution environments and retrieving data from the mashup application can be performed in parallel. Referring to , the operations for determining existing services of the mashup application and determining other participant execution environments can be performed in parallel.","As will be appreciated by one skilled in the art, aspects of the present inventive subject matter may be embodied as a system, method or computer program product. Accordingly, aspects of the present inventive subject matter may take the form of an entirely hardware embodiment, an entirely software embodiment (including firmware, resident software, micro-code, etc.) or an embodiment combining software and hardware aspects that may all generally be referred to herein as a \u201ccircuit,\u201d \u201cmodule\u201d or \u201csystem.\u201d Furthermore, aspects of the present inventive subject matter may take the form of a computer program product embodied in one or more computer readable medium(s) having computer readable program code embodied thereon.","Any combination of one or more computer readable medium(s) may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be, for example, but not limited to, an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system, apparatus, or device, or any suitable combination of the foregoing. More specific examples (a non-exhaustive list) of the computer readable storage medium would include the following: an electrical connection having one or more wires, a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), an optical fiber, a portable compact disc read-only memory (CD-ROM), an optical storage device, a magnetic storage device, or any suitable combination of the foregoing. In the context of this document, a computer readable storage medium may be any tangible medium that can contain, or store a program for use by or in connection with an instruction execution system, apparatus, or device.","A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein, for example, in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms, including, but not limited to, electro-magnetic, optical, or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate, propagate, or transport a program for use by or in connection with an instruction execution system, apparatus, or device.","Program code embodied on a computer readable medium may be transmitted using any appropriate medium, including but not limited to wireless, wireline, optical fiber cable, RF, etc., or any suitable combination of the foregoing.","Computer program code for carrying out operations for aspects of the present inventive subject matter may be written in any combination of one or more programming languages, including an object oriented programming language such as Java, Smalltalk, C++ or the like and conventional procedural programming languages, such as the \u201cC\u201d programming language or similar programming languages. The program code may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider).","Aspects of the present inventive subject matter are described with reference to flowchart illustrations and\/or block diagrams of methods, apparatus (systems) and computer program products according to embodiments of the inventive subject matter. It will be understood that each block of the flowchart illustrations and\/or block diagrams, and combinations of blocks in the flowchart illustrations and\/or block diagrams, can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","These computer program instructions may also be stored in a computer readable medium that can direct a computer, other programmable data processing apparatus, or other devices to function in a particular manner, such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function\/act specified in the flowchart and\/or block diagram block or blocks.","The computer program instructions may also be loaded onto a computer, other programmable data processing apparatus, or other devices to cause a series of operational steps to be performed on the computer, other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.",{"@attributes":{"id":"p-0091","num":"0090"},"figref":["FIG. 8","FIG. 8"],"b":["801","807","807","803","805","809","821","821","821","821","801","801","801","809","805","803","803","807","801"]},"As stated earlier, participants of a mashup session can modify the mashup. Although a consistent view can be maintained across participant devices, participants may choose to modify the mashup for their own purposes without synchronizing the changes to the other participant devices. Hence, the various participants can asynchronously interact with the mashup in the mashup session. Although the interactions would be asynchronous and the views vary, the mashup session manager maintains a global perspective of the mashup session. Thus, participants can asynchronously collaborate with the mashup, and be aware of other participant's interactions with the mashup without necessarily being confined to a uniform, global view of the mashup session.",{"@attributes":{"id":"p-0093","num":"0092"},"figref":["FIG. 10","FIG. 10"],"b":["1001","1005","1003"]},"The computer  creates a mashup application . As depicted in , creation of the mashup application can involve selecting from a catalog of mashup applications, and possibly modifying a selected mashup application. The mashup application  can also be created with a tool that generates code based on services and functionality selected by a user. In , the computer  creates the mashup  to use a service A and a service B. The created mashup is indicated to the mashup session manager , where mashup code  is created. Embodiments can create the mashup code at the mashup session manager  with data sent from the creating computer  that indicates the services and functionality. Embodiments can also send the mashup code  to the mashup session manager . Embodiments can also create the mashup  at the mashup session manager , instead of at the computer . For instance, the indications of services and functionality can be performed with a user interface at the computer , while the generation of the mashup application code is done at the mashup session manager in response to the indications with the user interface. Embodiments can also generate different degrees of the mashup application code in the difference environments. For example, the mashup session manager can distribute mashup application code that comprises Perl script, DHTML code, and XSQL code. In another example, the mashup session manager can distribute mashup application code that indicates services (e.g., links, names of the data services, etc.), and how the services are wired together or how the services should be wired together. The execution environments can add additional code for presentation functionality (e.g., user interface components), additional code that operates upon data from the services, additional code that filters results from the services, additional code that manipulates input to be submitted to the services, additional code that implements the wiring, etc.","As discussed earlier, creating the mashup session involves adding participants. In accordance with information provided by the computer , the mashup session manager  establishes a connection with the smartphone . Adding the smartphone  as a participant device can comprise any one of sending the mashup code  to the smartphone , communicating a reference (e.g., network location) of the mashup code  to the smartphone , creating a connection for the computer  to communicate the mashup code  to the smartphone , etc. After obtaining sufficient information, the mashup session manager  instantiates the mashup session based upon the mashup code .","After joining the mashup session, the smartphone  modifies the mashup code . The smartphone  removes service B, and adds a service C and a service D, resulting in a mashup code . The smartphone  communicates the modification to the mashup session manager . The mashup session manager  updates the mashup session data accordingly. For instance, the mashup session manager can instantiate a mashup session structure or modify a data structure entry for the participant device  that indicates the mashup code , or at least the modifications. In , the mashup session manager  modifies the mashup code  to use services C, D, which were added by the smartphone .","The mashup session manager  then notifies the computer  of the modifications made at the smartphone . Although the computer's view can be synchronized with the view of the mashup session at the smartphone , the computer  opts to receive notifications of results and\/or interactions of other participants (or a particular participant) instead of synchronizing the view of the mashup session. To illustrate, a first user creates a mashup to map restaurant locations within a threshold distance of all participants. So, the mashup utilizes a map service, a restaurant listing service, and global positioning services of the participants' devices. One of the participants may not care about the cuisine, but wants to find a ticket vendor near all participants. This participant modifies the mashup at his\/her device to use a map service, the GPS services, and a ticket vendor directory. A third participant may not want to view the map, perhaps to conserve power, and only wishes to see reviews of restaurants returned to the query of the first participant. The mashup session manager can maintain data and code that provides results, or is aware of the results, that map restaurants for the first participant, and that map ticket vendors for the second participant. The mashup session manager can receive interact with the device of the third participant to retrieve restaurant reviews for the third participant for only those restaurants in the result provided to the first participant.","Although  depicts the mashup session manager modifying the mashup  to reflect additions made by the participant device , embodiments are not so limited. Embodiments can maintain each different mashup code for the different participant devices. For example, participant A uses services A and B; participant B uses services A, B, and C; and participants C and D use services A, B, and E. The mashup session manager can maintain separate mashup code for participants A, B, and a single mashup code for participants C and D. In addition to the separate mashup codes, the mashup session manager can also maintain a unifying mashup code that utilizes all of the services. The mashup session manager maintains data and code that allows views of the mashup session to be consistent across participant devices, if desired. And the mashup session manager can notify a first participants of results received\/used by a second participant, without homogenizing the views of the mashup session. Embodiments can also allow a participant device to present at least a few if not all of the different views of the mashup session. Using the above illustration, a first participant device can display a first map of restaurants, a second map of ticket vendors, and a listing of the restaurant reviews of the mapped restaurants. Thus, the shared mashup session is flexible enough to allow collaboration of participants across devices in a mashup session with or without synchronization of views.","Furthermore, embodiments are not limited to services provided from websites on the Internet. As discussed above, a mashup can utilize a service of participant devices, such as the global positioning data provided by each device. Mashups can utilize services provided at the server hosting the mashup session manager, services provided by an intranet, etc.","While the embodiments are described with reference to various implementations and exploitations, it will be understood that these embodiments are illustrative and that the scope of the inventive subject matter is not limited to them. In general, techniques for distributing mashups across execution environments as described herein may be implemented with facilities consistent with any hardware system or hardware systems. Many variations, modifications, additions, and improvements are possible.","Plural instances may be provided for components, operations, or structures described herein as a single instance. Finally, boundaries between various components, operations and data stores are somewhat arbitrary, and particular operations are illustrated in the context of specific illustrative configurations. Other allocations of functionality are envisioned and may fall within the scope of the inventive subject matter. In general, structures and functionality presented as separate components in the exemplary configurations may be implemented as a combined structure or component. Similarly, structures and functionality presented as a single component may be implemented as separate components. These and other variations, modifications, additions, and improvements may fall within the scope of the inventive subject matter."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present embodiments may be better understood, and numerous objects, features, and advantages made apparent to those skilled in the art by referencing the accompanying drawings.",{"@attributes":{"id":"p-0009","num":"0008"},"figref":["FIGS. 1A and 1B","FIG. 1A"]},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1B"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
