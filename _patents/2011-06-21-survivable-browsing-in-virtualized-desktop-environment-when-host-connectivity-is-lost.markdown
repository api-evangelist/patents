---
title: Survivable browsing in virtualized desktop environment when host connectivity is lost
abstract: Techniques are provided herein for providing survivable browsing when a client endpoint device loses contact with its host server. A Hosted Virtual Desktop (HVD) draws and communicates an HVD display image comprising a HVD browser window to the client endpoint device for display, via a virtual desktop interface (VDI) protocol. A browser (or browser extension) on the HVD works together with a browser server on the client endpoint device to synchronize browser data, and in some examples to render data such as streaming media in a client-provided frameless browser window in place of a placeholder in the HVD browser window. In response to the detection of an inactive VDI session, the browser server on the client endpoint device launches an endpoint browser instance to seamlessly switch browsing from the HVD browser window to an endpoint browser window, using the browser synchronization data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08769011&OS=08769011&RS=08769011
owner: Cisco Technology, Inc.
number: 08769011
owner_city: San Jose
owner_country: US
publication_date: 20110621
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATION","TECHNICAL FIELD","BACKGROUND","DESCRIPTION OF EXAMPLE EMBODIMENTS","Overview","Example Embodiments"],"p":["The present application is related to U.S. patent application Ser. No. 13\/154,558, entitled \u201cDistributed Overlay Browser for Transparent Streaming Media Support in Virtualized Desktop Environment\u201d and filed on Jun. 7, 2011, which is herein incorporated by reference in its entirety. This related application is referred to hereafter as the \u201cRelated Application.\u201d","The present disclosure relates generally to virtualized desktop environments and more particularly to providing survivable browsing when a client endpoint device loses contact with its host server.","Web browsing is an increasingly popular activity in business and personal settings, and with the growth of network-connected devices such as personal computers, web-capable mobile phones and tablets has come increased demand for the provision of media over the web. For example, users may desire to conduct web-based audio and video conferencing, buy or rent movies or television shows over the web, view video or animation encoded for Adobe Flash, listen to streaming radio stations, or even play games with users around the world via the Internet.","When virtual or cloud-based desktops are used, web browsing may be virtualized along with other hosted applications. That is, a browser application may run in a hosted virtual desktop (HVD), or run as a hosted virtual application (HVA) while the browser window is displayed to a user on a remote client endpoint device such as a computer or mobile phone. If the connectivity between a client endpoint device and the host server is lost, then browsing will be disrupted, leading to losses of productivity.","Techniques are provided herein for providing survivable browsing when a client endpoint device loses contact with its host server. A web browser on a Hosted Virtual Desktop (HVD) draws an HVD display image comprising an HVD browser window and communicates it to the client endpoint device for display, via a virtual desktop interface (VDI) protocol. The HVD browser window comprises zero or more host-provided window elements such as a window frame and may also comprise at least one placeholder where a client-provided frameless browser window may be rendered. A browser (or browser extension) on the HVD works together with a browser server on the client endpoint device to synchronize browser data, and in some examples to render data such as streaming media in a client-provided frameless browser window in place of the placeholder, before displaying the frameless browser window and the HVD display as an integrated display at the client endpoint device. In response to the detection of an inactive VDI session, for example due to a failure to maintain the VDI session, the browser server on the client endpoint device launches an endpoint browser instance to seamlessly switch browsing from the HVD browser window to an endpoint browser window, using the browser synchronization data.","Referring now to the Figures, an example of a block diagram showing a VDI environment in which VDI connectivity can be established between client endpoint devices and one or more hosted virtual desktops is shown in . The depicted VDI environment  includes host device , client endpoint devices , , web server , content servers , , content distribution cache servers , , and policy agent  which are connected over network  to each other. The VDI environment may include additional servers, clients, and other devices not shown, and individual components of the system may occur either singly or in multiples, for example, there may be more than one host device , and other networking components, e.g., routers and switches, may be used in the VDI environment . Similarly, web server , content servers , , and content cache servers , may be embodied in a single device.","Network  represents any hardware and\/or software configured to communicate information via any suitable communications media (e.g., WAN, LAN, Internet, Intranet, wired, wireless, etc.), and may include routers, hubs, switches, gateways, or any other suitable components in any suitable form or arrangement. The various components of the VDI environment  may include any conventional or other communications devices to communicate over the networks via any conventional or other protocols, and may utilize any type of connection (e.g., wired, wireless, etc.) for access to the network.","Web server  is a conventional or other server for serving web pages including Hypertext Markup Language (HTML) documents and other content such as images or style sheets to a web browser. Content source servers , are conventional or other servers for serving data to a client or a content distribution cache server, e.g., a Darwin Streaming Server, Flash Media Server, Unreal Media Server, or the like. The content servers may provide any type of data, for example media such as streaming video and\/or streaming audio, games or simulations, animations, scripts, or the like. Content data may be encapsulated as HTML or XHTML documents, or may be represented in a non-HTML format. Content cache servers -, e.g. Cisco Wide Area Application Engine (WAE) servers running the Application and Content Network System (ACNS), act as intermediate repositories for content received from content servers -. As is further described with respect to , some examples of the present embodiments transport data directly from content source servers  and\/or content cache servers  to the client endpoint devices , without the data passing through the host device . By placing cache servers  at key points in network  and caching content (e.g., media content) from a content source server -, client endpoint may receive content from the cache servers  instead of the content source , thereby reducing bandwidth consumption over the core portions of network  and reducing streaming latency. It is understood that many types of content servers  and distribution caches  stream media to clients; however, any type of content may be streamed.","Policy agent  may be a separate network service as is depicted in , or it may reside locally on host device  (e.g., in hosted virtual desktops  or as a separate resident of memory ) and client devices . As is further described with respect to ,  and , when the policy agent  is presented with a Uniform Resource Locator (URL), (e.g., via a query), it applies one or more policies to report (e.g., via a query response) whether the URL should be rendered on the HVD  or the client endpoint device . Further details of the operation of the policy agent  are set forth in the Related Application.","Host device  comprises one or more processors , a network interface unit , and memory . The processor  is, for example, a data processing device such as a microprocessor, microcontroller, system on a chip (SOC), or other fixed or programmable logic, that executes instructions for process logic stored in memory . The network interface unit  enables communication throughout the VDI environment, as shown in . Memory  may be implemented by any conventional or other memory or storage device, and may include any suitable storage capacity. For example, memory  may comprise read only memory (ROM), random access memory (RAM), erasable programmable read only memory (EPROM), magnetic disk storage media devices, optical storage media devices, flash memory devices, electrical, optical, or other physical\/tangible memory storage devices. The memory  may comprise one or more computer readable storage media (e.g., a memory device) encoded with software comprising computer executable instructions and when the software is executed (by processor ) it is operable to perform the operations described herein in connection with ,  and .","The host device  may be, for example, a computing blade, a blade server comprising one or more solid state drives, or a blade center comprising one or more blade servers together with a blade chassis comprising common resources such as networking connections, input\/output device connections, power connections, cooling devices, switches, etc. The host device  may be a component of a larger system, such as a Cisco Unified Computing System, or a data center that centralizes enterprise computing resources.","Resident in memory  are hypervisor , and multiple hosted virtual desktops (HVDs) -. The hypervisor or virtual machine monitor  presents a virtual operating platform to the HVDs -, and manages access to the host processor , network interface unit , memory  and other host resources, so that the HVDs -have access to appropriate host resources without disrupting each other's operation. Each HVD  operates independently of the other HVDs  and runs as a separate virtual machine on the host device , and each HVD  may run a different operating system if desired. Further operation of the HVDs is explained below with reference to .","Attached to host device  is file storage  for HVDs . File storage  may be implemented by any conventional or other memory or storage device, and may include any suitable storage capacity. For example, file storage  may comprise ROM, RAM, erasable EPROM, magnetic disk storage media devices, optical storage media devices, flash memory devices, electrical, optical, or other physical\/tangible memory storage devices. In an example embodiment, the file storage  is a Redundant Array of Independent (or Inexpensive) Disks (RAID), and in a different example embodiment, the file storage  is a Storage Area Network (SAN). Each HVD may have mounted a private volume that references an area of file storage , and may also have mounted areas of file storage  that are public volumes or volumes shared across more than one HVD.","Each example client endpoint device comprises one or more processors , a network interface unit , memory , and display rendering hardware . The processor  is, for example, a data processing device such as a microprocessor, microcontroller, system on a chip (SOC), or other fixed or programmable logic, that executes instructions for process logic stored in memory . The network interface unit  enables communication throughout the VDI environment, as shown in . Memory  may be implemented by any conventional or other memory or storage device, and may include any suitable storage capacity. For example, memory  may comprise ROM, RAM, EPROM, magnetic disk storage media devices, optical storage media devices, flash memory devices, electrical, optical, or other physical\/tangible memory storage devices. The memory  may comprise one or more computer readable storage media (e.g., a memory device) encoded with software comprising computer executable instructions and when the software is executed (by processor ) it is operable to perform the operations described herein in connection with  and . Display rendering hardware  may be a part of processor , or may be, e.g., a separate graphics processor, e.g., a Graphics Processor Unit (GPU).","The example client endpoint device  may be any conventional or other computer system or device, such as a thin client, computer terminal or workstation, personal desktop computer, laptop or netbook, tablet, mobile phone, set-top box, networked television, or other device capable of acting as a client in the described VDI environment.","The example client endpoint device  interfaces with display device , input device(s) , and output device(s) , and communicates with these devices in any suitable fashion, e.g., via a wired or wireless connection. The display device  may be any suitable display, screen or monitor capable of displaying information to a user of a client endpoint device, for example the screen of a tablet or the monitor attached to a computer workstation. Input device(s)  may include any suitable input device, for example, a keyboard, mouse, trackpad, touch input tablet, touch screen, camera, microphone, remote control, speech synthesizer, or the like. Output device(s)  may include any suitable output device, for example, a speaker, headphone, sound output port, or the like. The display device , input device(s)  and output device(s)  may be separate devices, e.g., a monitor used in conjunction with a microphone and speakers, or may be combined, e.g., a touchscreen that is a display and an input device, or a headset that is both an input (e.g., via the microphone) and output (e.g., via the speakers) device.","The functions of the processors  and  may each be implemented by a processor or computer readable tangible (non-transitory) medium encoded with instructions or by logic encoded in one or more tangible media (e.g., embedded logic such as an application specific integrated circuit (ASIC), digital signal processor (DSP) instructions, software that is executed by a processor, etc.), wherein the memories  and  each store data used for the computations or functions described herein (and\/or to store software or processor instructions that are executed to carry out the computations or functions described herein). Alternatively, one or more computer readable storage media are provided and encoded with software comprising computer executable instructions and when the software is executed operable to performing the techniques described herein. Thus, functions of the process logic as described with reference to , for example, may be implemented with fixed logic or programmable logic (e.g., software or computer instructions executed by a processor or field programmable gate array (FPGA)).",{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIGS. 2 and 3","FIG. 3","FIGS. 2A and 3A","FIGS. 2B and 3B"],"b":["150","205","20","100","205","30","35"]},"For purposes of simplification, the other components of the VDI environment , e.g., other client endpoint devices, are not shown here in  or . Further, although the description refers to the interaction between one HVD  and one client endpoint device , it is understood by those skilled in the art that each HVD  may interact with one or more client endpoint devices , and each client endpoint device  may interact with one or more HVDs  on a single or multiple host devices . Moreover, there may be more than one web server  and more than one content server  or  in the VDI environment , and therefore more than one HTTP session , , etc.","As can be seen in , the example HVD  comprises a VDI server , host operating system(s) , hosted web browser  (also referred to as \u201chost web browser\u201d or \u201cHVD web browser\u201d), and may also comprise one or more other application(s) . In the example of , an HVD browser server  and HVD browser extension  are associated with the host web browser . The example client endpoint device  comprises a VDI client , operating system(s) , and an endpoint browser server , all of which reside in memory  (as shown in ), as well as display , input devices including keyboard and mouse , and output devices including speakers . In some examples, such as the example depicted in , the client endpoint device  may further comprise one or both of a frameless endpoint browser  and an endpoint browser extension , which are also resident in memory .","In VDI environments in which the sessions between the HVD and client endpoint have been lost, for example the examples of , an active endpoint browser  (also called a \u201cfull-frame endpoint browser\u201d) is resident in memory. The host web browser , the frameless endpoint browser  and the endpoint browser  may be any browser software capable of use in conjunction with the host operating system , for example Mozilla Firefox, Google Chrome, Microsoft Internet Explorer, Opera Software Opera, Apple Safari, etc.",{"@attributes":{"id":"p-0036","num":"0035"},"figref":["FIG. 2","FIG. 3","FIGS. 2 and 3","FIG. 2","FIG. 2"],"b":["320","366","322","320","360","366","324","364","322","320","360","366","324","364","320","366","362","322","320","324"]},"The browser servers ,  (also called browser masters or browser services) and browser extensions ,  may each be, for example, a software module or an element of a software module, and may be, for example, a stand-alone module, a part of another software module, or a combination of both. For example, the HVD browser server  and HVD browser extension  may each be individual software modules (as depicted in ), or may be combined together into a software module, or one or both may be combined together with host browser . Similarly, the endpoint browser server  and endpoint browser extension  may each be individual software modules (as depicted in ), or may be combined together into a software module, or one or both may be combined together with endpoint browser \/. Generally, when host browser  is instantiated, HVD browser extension  (if present) and HVD browser server  are also instantiated. In another embodiment, browsers , , may be implemented so that the functionality expressed by browser extensions ,  is executed natively by the browsers (e.g., as depicted in ).","The client endpoint device  is connected to three storage areas, a synchronized browser data storage area , an endpoint-specific configuration data storage area , and a temporary download storage area . The synchronized browser data stored in storage area  comprises one or more of data describing the currently open browser tabs and windows, browser preferences data, bookmark data, cookie data, certificate data, user profile configuration data, or browser history data, and configuration data. The configuration data comprises one or more of proxy settings, home page data, where to send downloads, which add-ons and plugins to support, whether to open new content in tabs or windows, pop-up blockers, javascript enable\/disable settings, in-line image loading, default fonts, language, MIME-to-app and MIME-to-plugin mapping, history on\/off, control of plugin installation, remembering passwords, scrolling options, page cache control, whether to auto-update the browser and add-ons, use of SSL\/TLS, and certificate management settings. Endpoint-specific configuration data stored in storage area  comprises a subset of the configuration data stored in storage area , for example, proxy settings or data that enable the endpoint browser ,  to operate when a client endpoint device loses contact with its host server, and that are different from the configuration data applicable when a VDI session is active. The synchronized browser data including the configuration data is synchronized between the endpoint device  and the host , and when received by the endpoint device  is stored in synchronized browser data area , so that the browser information remains up-to-date in the event of a VDI failure.","Temporary download storage area  comprises an area where files downloaded by the endpoint browser  may be saved when the client endpoint device loses contact with its host server, e.g., during a VDI outage. Data storage areas , ,  may be implemented by any conventional or other memory or storage device, and may include any suitable storage capacity. For example, data storage areas , ,  may comprise ROM, RAM, EPROM, magnetic disk storage media devices, optical storage media devices, flash memory devices, electrical, optical, or other physical\/tangible memory storage devices.","The VDI server  interacts with the host operating system  to provide virtual desktop interface functionality to the client endpoint device  over VDI session , which is a VDI protocol link that is established using any suitable VDI protocol, for example Citrix Independent Computing Architecture (ICA), VMWare PC over IP (PCoIP), Microsoft Remote Desktop Protocol (RDP), or other suitable protocol. For example, any application with which a user of the client endpoint device  is interacting is hosted by the HVD , while the window associated with the application is rendered by the client endpoint device . The windows are depicted and further described with reference to . The VDI server  on the host may, for example, receive HVD display output from the host operating system  and send it to the VDI client  as an HVD display over VDI session . The VDI session may, for example, represent all windows in the HVD display as a single image, or it may indicate the position and size of each host-provided window element and placeholder in the HVD display, and\/or the position and size of each client-provided window element and placeholder to be overlaid in the HVD display.","The VDI client  interacts with client operating system  to render the received HVD display for display on the client endpoint device . As will be further described with reference to , the frameless endpoint browser , endpoint browser server  and endpoint browser extension  may also modify the received HVD display, for example by rendering a client-provided frameless browser window over a placeholder portion of the HVD display, in the course of rendering it to display . The VDI client  also receives user input from the user interface, for example, the user types on keyboard or exercises mouse , and these inputs are translated by the VDI client  and sent to the VDI server  via VDI session . After it receives the user input, VDI server  translates it into virtual keyboard and mouse inputs, and feeds it via host operating system  to host web browser  or another application , as if the applications and the input devices  were running on a single desktop computing device. The user inputs are processed by the appropriate application at the HVD, and HVD display images are generated by the operating system  and VDI server  for transmission back to the VDI client , which renders the HVD display and client-generated user elements for display to the user on display .","In another embodiment, host device  may execute hosted virtual applications (HVAs), including host browser , from its memory , rather than full hosted virtual desktops . In this embodiment, client endpoint device  may use its VDI client  to interact with multiple host devices , each executing one or more HVAs, and use the client operating system  to composite the output of the HVAs to present a full windowed desktop on display .","Content to be rendered by the browsers may be communicated directly from a web server  as shown in , from a content server  or content cache server -, or from both servers as shown in . For example,  and  depict the communication of web content from web server  to host browser  via HTTP session  (in ) or to endpoint browser  via HTTP session  (in ) when the host or network connection is off-line, e.g., when the VDI session is inactive. The content may be, for example, an HTML- or XHTML-encoded web page.  illustrates a different example, in which content transport sessions ,  are established directly between the content server  or content cache server -and the frameless endpoint browser  (in ) or the full-frame endpoint browser  (in ) when the host or network connection is off-line, e.g., when the VDI session is inactive.","In the example embodiment depicted in , the content (e.g., media) data flows directly to client endpoint device , rather than flowing through the HVD  and thus requiring a very high bitrate from the VDI session  even when the VDI session is active. When the frameless endpoint browser  decodes and renders the data, the rendered data is sent to client operating system  to be inserted as a frameless browser window on the rest of the HVD display, which is being rendered by VDI client . The operation of the frameless browser when the VDI session is active is further described by reference to  and their accompanying descriptions, and in the Related Application.","The data transported by content transport sessions ,  may be encoded or compressed in any suitable fashion, and transmitted via any suitable protocol, for example HTTP, Microsoft Media Services (MMS), MPEG-Transport Stream (MPEG-TS), the Real-time Transport Protocol (RTP), User Datagram Protocol (UDP), or any other suitable protocol. In some embodiments, content server  or content cache server  are HTTP servers and therefore are functionally no different from a web server .","The communication session  is established between endpoint browser server  and its opposing HVD browser extension  if present (as depicted in ), or if no browser extensions are present, with the opposing HVD browser  (as depicted in ). Similarly, communication session  is established between HVD browser server  and its opposing endpoint browser extension , if present (as depicted in ) or, if no browser extensions are present, with the opposing endpoint browser . If HVD browser server  is not present, then communication session  is established between the HVD browser  and opposing endpoint browser extension , if present or, if no browser extensions are present, with the opposing endpoint browser . The communication sessions ,  may be established using any suitable protocol, for example HTTP, TLS, TCP, or any other suitable protocol. In one embodiment, one or both of the communication sessions ,  are multiplexed into a virtual channel transported by VDI session , and in another embodiment one or both of the communication sessions ,  are transported independently from VDI session .","The communication sessions ,  may comprise requests to load particular web pages, to instantiate a client frameless endpoint browser  instance, to describe the location of one or more placeholder objects over which the frameless endpoint browser  should render a particular frameless browser instance, to identify a URL describing the location of the content server , , to report changes to the page history of frameless endpoint browser , to synchronize bookmarks, cookies, certificates, configuration data, and the like, and to display or hide browser tabs or browser windows. This information may be stored in synchronized browser data area , so that the browser information remains up-to-date in the event of a VDI failure.","The various operating systems mentioned with reference to , such as the host operating system(s)  and the client operating system(s)  may be any suitable operating system for use in the VDI environment , such as, for example, a FreeBSD, Linux, OS X, UNIX, Windows, or other operating system. The operating system may be a standard operating system, an embedded operating system, or a real-time operating system. For example, the host operating system  may be a Linux operating system such as Ubuntu or Red Hat Enterprise Linux, a Mac operating system such as OS X or OS X Server, or a Windows operating system such as Windows 7 or Windows Server 2008 R2. The client operating system  may be, for example, a Blackberry, Linux, OS X, Windows, or other operating system. In one embodiment, the client operating system  is a flavor of Linux, such as Android, MeeGo, ThinStation, Ubuntu, webOS, or the like. In another embodiment, the client operating system  is an Apple operating system, such as OS X, iOS, or the like, or a Windows operating system, such as Windows 7, Windows CE, Windows Vista, Windows XP, or Windows XPe. It will be appreciated that the host browser  should be compatible with host operating system  and that the frameless endpoint browser  and active endpoint browser  should be compatible with client operating system . Hence, host browser  and endpoint browsers ,  need not be the same browsers. As long as each browser is capable of rendering data from content server  or cache server , the user's experience of the rendering should be unaffected.","Depending on the embodiment, there may be no instances of an endpoint browser ,  instantiated on the client endpoint device  at some times. For example, in the example of , browsing is performed by the HVD host so long as the VDI session is active and so no endpoint browser  is needed while the VDI session remains active. Similarly, in the example of , the policy agent  may have determined that all current web pages should be rendered in HVD browser tabs and windows, so it is possible that zero instances of frameless endpoint browser  may be present on client endpoint device  while the VDI session remains active. However, in this case, endpoint browser server  should still be present, so that connection requests and synchronization data from HVD browser extension  may still be received and so endpoint browser server  can create an instance of frameless endpoint browser . The frameless endpoint browser  generally instantiates the endpoint browser extension .","For some embodiments, endpoint browser server  should be permanently resident on client endpoint device , even if an endpoint browser ,  is not yet instantiated. While session  is available, endpoint browser server  may receive synchronization data from host browser  or host browser extension . Then, when an endpoint browser is desired, for example because the VDI session has become inactive, the endpoint browser server  may launch an active endpoint browser  instance, for example as shown in . Or, for example, when HVD browser extension  notifies endpoint browser server  to instantiate a frameless endpoint browser  instance when a VDI session is active, for example as shown in .",{"@attributes":{"id":"p-0051","num":"0050"},"figref":["FIG. 2A","FIG. 2A","FIG. 5A","FIG. 2B","FIG. 2A","FIG. 2B","FIG. 2B","FIG. 5B"],"b":["320","370","390","366","205","366","368","377","20","320","205","150","205","20","150","20","205","377","20"]},"If or when the VDI session is re-established, for example because a failure to establish or maintain the VDI session has been repaired, then the endpoint browser server  sends an update of the browser synchronization data stored in storage area  to the HVD host, and in return receives an updated HVD display comprising one or more new HVD browser windows for display to a user of the client endpoint device . The endpoint browser server  then terminates the endpoint browser instance(s), in order to reestablish the scenario depicted in .",{"@attributes":{"id":"p-0053","num":"0052"},"figref":["FIG. 3A","FIG. 3A","FIG. 6A","FIG. 3B","FIG. 3A","FIG. 3B","FIG. 3B","FIG. 6B"],"b":["320","360","370","385","390","375","366","205","360","366","368","377","20","320","366","360","362","369","205"]},"If or when the VDI session is re-established, for example because a failure to establish or maintain the VDI session has been repaired, then the endpoint browser server  sends an update of the browser synchronization data, either as stored in storage area  or otherwise representing the current state of browser , to the HVD host, and in return receives an updated HVD display comprising one or more new HVD browser windows for display to a user of the client endpoint device . The endpoint browser server  then terminates the endpoint browser instance(s), and re-activates zero or more frameless endpoint browser instance(s) , for example by creating a new instance or instances, by awakening one or more frameless endpoint browser instances(s)  that had been put to sleep, etc. The situation of re-activation of zero frameless browsers may occur because if, when the VDI session is re-established, policy determines that all of the data for rendering should be rendered by the HVD, then there is no need to re-active a frameless browser at that time. If re-activated, the frameless browser instance(s) begin to render data again, and the scenario depicted in  is re-established.",{"@attributes":{"id":"p-0055","num":"0054"},"figref":["FIGS. 4A and 4B","FIG. 4A","FIG. 4B","FIGS. 4A and 4B"],"b":["400","405","400","405","410","415","420","425","430","435","440","445","450","455","400","405","460","465","470","475","480","485","490","495"]},"For embodiments in which a frameless endpoint browser  is present, if a particular web page of the active tab is rendered by the host browser, then a host browser window  of  is displayed to a user of the client endpoint device . If, however, a particular web page is rendered by the endpoint, then a merged browser window  such as the depicted example in  is displayed instead. The merged browser window  comprises a frameless client browser window that is rendered to replace portions of HVD browser window . The frameless client browser window does not contain any of the window decorations or framing of HVD browser window  or endpoint browser window , but does comprise endpoint-provided rendering elements , including a web page rendering area ; horizontal and vertical scroll bars ,  if the content of the web page exceeds the current size of the rendering area; and page status bar , which displays an execution state of the current page.",{"@attributes":{"id":"p-0057","num":"0056"},"figref":"FIG. 4C","b":["535","400","510","150","370","390"]},"The merged browser window  comprises host-provided window elements  (e.g., window decorations, framing elements, and controls  through  of HVD browser window  as shown in ) and endpoint-provided rendering elements  of the frameless client browser window. In one embodiment, each instance of the frameless client browser window has a single tab. If the HVD browser window  has multiple tabs open, the tabs may represent a mixture of web pages where some are rendered by the host (e.g., the HVD) and some are rendered by the endpoint . Each tab rendered by the endpoint  is represented by a separate instance of the frameless client browser , each of which is composited onto a separate tab in the host browser window . The compositing of the browser windows is further described with respect to .",{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIG. 5A","b":["505","205","505","400","540","550","560","400","520","410","450","530","460","470","480","490","310","370"],"i":["a","a "]},{"@attributes":{"id":"p-0060","num":"0059"},"figref":"FIG. 5B","b":["505","205","505","405","366","405","525","415","455","535","465","475","485","495"],"i":["b","b "]},{"@attributes":{"id":"p-0061","num":"0060"},"figref":"FIG. 5","b":["150","205","205","505","400","560","540","500","362","366","366","368","405","400","505","400","205","505","405","205","540","500","560","205","565","405"],"i":["a ","a ","b "]},{"@attributes":{"id":"p-0062","num":"0061"},"figref":["FIG. 6","FIG. 6A"],"b":["360","507","205","507","510","510","540","550","560","510","510","520","520","410","450","535","535","465","475","485","495","310","370"],"i":["a","a ","a","b","a","b ","a","b ","a","b "]},"In this example, each frameless browser window comprising endpoint-provided rendering elements , is rendered by a different instance of the frameless client browser . Browser window may be created explicitly by the user launching a second HVD browser, by the user requesting that an anchor be rendered in a separate window, or by the user clicking on an anchor (e.g., a link) that specifies that the URL should be rendered in a separate window. It will be understood that, in some configurations, the HVD framing may be reduced from the framing that was provided for browser window , for example, a browser window may be created with minimal window framing ,  and no menu bar , browser controls , or browser tabs .","In the example depicted in , the placeholder element of each HVD web browser has been replaced by the endpoint-provided rendering elements  of the frameless client browser window. The visual replacement of the placeholder with the client-rendered frameless browser window may be accomplished in several ways. For example, the client endpoint device  may render the elements  of the frameless browser window over the placeholder portion (e.g., host-provided rendering elements ) of the display , or it may render the frameless browser window first and render display over the frameless browser window with a \u201chole\u201d in the display where the frameless browser window is located, or in any other suitable fashion to provide the appearance of an integrated display.","In the depicted example, the endpoint-provided rendering elements  of the frameless browser window  display a web page that may comprise media data such as video data (e.g., CCTV, H264, mp4, QuickTime, etc.), but may also be any other type of data, such as Flash, JavaScript, or Silverlight. Furthermore, users may interact directly with the frameless browser window using endpoint input devices such as a mouse or keyboard, rather than interacting with the HVD through the VDI session . Such interaction may occur when it is determined that the frameless browser window has been granted focus, i.e. when the operating system determines that user input should be directed at a web page rendered by the client endpoint .","Although the depicted examples are of visual display elements, it will be understood that a similar compositing process takes place for audio. Client endpoint device  may receive audio, comprising, for example, application tones, music, voice, or alerts, from HVD , via VDI session . Client endpoint device  may also receive audio content from a content server \/, via content transport session . Client endpoint device  should combine the audio from these two sources and render a coherent audio waveform to speakers . The two sources may, for example, be mixed by operating system , using audio rendering hardware in client endpoint device .",{"@attributes":{"id":"p-0067","num":"0066"},"figref":"FIG. 6B","b":["507","205","507","405","405","366","405","405","525","415","455","535","465","475","485","495"],"i":["b","b ","a","b ","a","b "]},{"@attributes":{"id":"p-0068","num":"0067"},"figref":["FIG. 6","FIG. 6A"],"b":["360","205","507","510","510","362","366","510","366","368","405","510"],"i":"a "},"For example, when the VDI session was active, the endpoint display comprised a merged browser window where a frameless browser instance was rendering a Wikipedia web page including a video about penguins, and a merged browser window where a host browser was rendering a Cisco web page. When the VDI session becomes inactive, the client endpoint device  will utilize synchronization data , which has been updated as the state of host browser  changed to seamlessly switch to a display as shown in , that comprises an endpoint browser window that is rendering the same Wikipedia web page (or any other page that was being rendered by the browser) that was previously rendered by the frameless browser instance, and an endpoint browser window that is rendering the same Cisco web page. In this manner, the user is able to continue browsing with little or no interruption.","For both example embodiments of , the endpoint browser server monitors the browsing activity and updates the browser synchronization database  and the endpoint-specific configuration database  as needed while the VDI session is inactive so that the host browser  and\/or the frameless browser  can re-establish control over browsing activity once the VDI session has been restored. This is particularly important in the case of the frameless browser embodiment. For example, taking the scenario depicted in , assume that while the VDI session remains inactive, the user destroys the first tab (the penguin video) and creates a new tab that is currently rendered by the endpoint browser  to view, e.g., an RSS feed, but that would otherwise be rendered by the HVD if the VDI session were active. Once the VDI session is restored, the endpoint browser server  communicates the browser synchronization data and any necessary configuration data to the host browser, so that the host browser  knows which tabs and windows to render. In the described example, even for the frameless browser embodiment, the host browser  would begin rendering the original second window (the Cisco web page) and the new tab (the RSS feed), but there is not currently any data to be rendered by a frameless client browser. Even if the user has not destroyed any tabs or windows, she may have performed other actions, for example searched a term in a search engine and been in the process of reviewing search results. When the VDI session is restored, the communication of data between the endpoint browser server  and the host browser  ensures that the host browsing is resumed in the same spot (e.g., the third page of the search results) where the user was browsing before the restoration of the VDI session.","The exchange of browser synchronization data and configuration data between the HVD and the endpoint allows for seamless browsing, whether the endpoint is taking over for the host due to a lost VDI session, or whether the host is reassuming control of browsing after restoration of a failed VDI session. The seamless survivability is ideally transparent to the user, but complete transparency may not be achievable in certain embodiments. For example, the user is provided with all of her bookmarks, cookies, user preferences, browser history, etc. as much as is possible, but in some embodiments, certain data, for example HVD-based cookies or certificates, may not be synchronizable, so that the user may notice some browser changes such as favorite pages prompting for passwords, a loss of some browser history, etc. In other embodiments, the user may have been using a first browser type such as Internet Explorer on the HVD, however the client endpoint browser may be a different browser type such as Chrome or Firefox and this difference will be exposed to the user during the VDI outage. Either due to a different browser type, or because synchronization is not perfect, the user may also notice that not all plugins and extensions are available to the endpoint browser , so that some web pages that render properly on the HVD may not render properly, for example they may render with missing objects or with javascript errors, on the client endpoint browser.",{"@attributes":{"id":"p-0072","num":"0071"},"figref":["FIGS. 7 and 8","FIG. 7","FIG. 8"],"b":["600","700","324","362","205","600","700","324","362","644","718","600","700","324","600","320","322","600"]},"It will be appreciated that  describe an example method that allows the HVD browser components , , , and endpoint browser components , , , , ,  to send and receive synchronization information so that VDI failure and restoration can be managed between the two devices, while  describe example methods for how the HVD browser components , , , endpoint browser components , , , , , , and policy agent  instantiate and remove frameless browsers on the endpoint in an environment with a functioning VDI session, similar to the methods described in the Related Application. It will be further appreciated that to produce a practical system that exhibits both the behavior for executing some web pages on the endpoint in frameless browsers and the VDI failover\/failback behavior, one of ordinary skill would combine the methods depicted in  with the methods depicted in , and combine the methods depicted in  with the methods depicted in .","Referring now to , process  starts in step  by the HVD browser extension  establishing a communication session  to the endpoint browser server , which may take many embodiments, including, but not limited to, use of HTTP, TLS, TCP, or multiplexing onto a virtual channel of VDI session . In step  the HVD browser extension determines if the host web browser  is active. If not, the process  ends at step , e.g., by terminating process  or returning to wait for the browser to become active, but if yes, then in step  the HVD browser extension waits to receive an event from the browser. An event may be generated by user interactions with the web page, or scripting associated with the web page, callback requests from the client endpoint device , or the arrival of data from communication session .","When an event is received, the HVD browser extension proceeds to step , where it locates the current tab\/window information, that is, information about the tab or window currently active in the HVD browser. The tab information is maintained by the HVD and endpoint browser servers ,  and the HVD and endpoint browser extensions , , and may be in any suitable form, for example a list of tab information structures keyed by tab identifiers. The tab information is passed back and forth in the messages sent between each browser server ,  and its respective browser extension , . For the endpoint browser server , the tab information points at the instance of the frameless endpoint browser  (if any) that is currently in use for this particular tab. For HVD browser extension , the tab information maintains a marker indicating whether the current tab is being rendered by the HVD or the endpoint.","In step  the HVD browser extension determines the type of event received in step , and processes the event according to a particular path before returning to step .  presents a few examples of common events that may occur in the same or similar form in many conventional web browsers, and it is understood that the depicted events may be modified or varied from those depicted. The depicted events include page load intercepts, restoration of a lost VDI session, a bookmark update, a cookie update, a configuration update, a tab\/window update, and a change of focus for a tab\/window.","A page load intercept event is received when the browser is loading a new page, which may result from user actions such as clicking a link in the current page, requesting a bookmarked page, requesting a page from the browser history, using the navigation controls (e.g., a forward or back button), typing a URL in an address bar, etc. For a page load intercept event, the HVD browser extension in step  sends an update of the tab\/window information to the endpoint browser server . The tab information may include one or more of a tab identifier, a parent browser window identifier, the current URL, and an indication of the preferred rendering device (HVD or endpoint), etc. The HVD browser extension then returns to step .","If the event is the restoration of a lost or inactive VDI session has been restored, then in step  the HVD browser extension requests a state update from the endpoint browser server . It will be appreciated that when a VDI session is lost, the HVD browser extension need not take action with respect to the browser state, because the browser application will not receive any user input during the period of the lost connection, and its state is therefore irrelevant to the user. It is only when the VDI connection is restored that the state of the HVD browser needs to be re-synchronized with that of the endpoint browser . The HVD browser extension accomplishes the re-synchronization by receiving data from the endpoint browser server , for example the browser synchronization data stored in storage area  including one or more of data describing the currently open browser tabs and windows, browser preferences data, bookmark data, cookie data, certificate data, user profile configuration data, or browser history data. For example, the HVD browser extension in step  updates any changes to bookmarks that are received from the endpoint browser server , in step  updates any changes to cookies that are received from the endpoint browser server , and in step  updates any changes to browser configuration data that are received from the endpoint browser server . In step  the HVD browser extension transfers any files that were downloaded by the endpoint browser  during the outage to the proper locations in the HVD file system . In step  the HVD browser extension removes all tabs and windows from the HVD browser so that the state of the HVD browser can be consistently reconstructed from the tab and window information received from the endpoint browser server .","Turning now to , in step , each received structure describing an open tab or window from the endpoint browser  is scanned. When all structures have been scanned, the HVD browser extension loops back to . If a tab\/window structure is located, the HVD browser extension determines the preferred rendering environment for that tab\/window structure in step . If the preferred rendering environment is the HVD, then in step  the HVD browser extension creates a tab or window in the HVD browser and renders the URL specified in the received structure into the tab or window and then returns to step  to scan for more structures. If the preferred rendering environment is the endpoint, then in step  creates a tab or window in the HVD browser and renders a placeholder page into the tab or window, and in step  sends placeholder geometry information to the endpoint browser server , before returning to step .","Turning now to , a bookmark update event is received when the stored bookmarks are modified, which may result from user actions such as adding\/creating a bookmark, deleting a bookmark, updating bookmarks, sorting bookmarks, etc. For a bookmark update event, the HVD browser extension in step  sends a bookmark update to the endpoint browser server , and then returns to step . A cookie update event is received when the browser cookies are modified, which may result from user or browser actions such as adding\/creating a cookie, deleting a cookie, updating cookies, etc. For a cookie update event, the HVD browser extension in step  sends a cookie update to the endpoint browser server , and then returns to step .","A configuration update event is received when the browser configuration data is modified, which may result from user or browser actions adding\/creating, deleting, or updating configuration data, such as the configuration data stored in storage area . The configuration data may be any suitable browser configuration data, for example one or more of proxy settings, home page data, where to send downloads, which add-ons and plugins to support, whether to open new content in tabs or windows, pop-up blockers, javascript enable\/disable settings, in-line image loading, default fonts, language, MIME-to-app and MIME-to-plugin mapping, history on\/off, control of plugin installation, remembering passwords, scrolling options, page cache control, whether to auto-update the browser and add-ons, use of SSL\/TLS, and certificate management settings, among others. For a configuration update event, the HVD browser extension in step  sends a configuration update to the endpoint browser server , and then returns to step .","A tab\/window update event is received when a tab or window is modified, which may result from user actions such as creating a new tab\/window, updating a tab\/window by, e.g. refreshing the rendered page or by selecting a new URL for display, deleting a tab\/window, etc. For a tab\/window update event, the HVD browser extension in step  sends a tab\/window update to the endpoint browser server , and then returns to step . A change of focus to a tab\/window event is received when a change of focus is received, which may result from a user minimizing a tab or window, activating a new tab or window, switching from the current tab or window to a different active tab or window in the browser, etc. For a change of focus event, the HVD browser extension in step  sends a tab\/window update to the endpoint browser server  to take the requested change of focus action, and in step  sends a tab\/window update to the endpoint browser server  to de-activate the previously active tab\/window, and then returns to step .","Referring now to , endpoint server process  starts in step  by the endpoint browser server  waiting for and accepting the establishment of communication session  by the HVD browser extension. It will be understood that, even if no frameless endpoint browser instances  are currently active, process  should still be active to listen for incoming connection requests from HVD browser extensions . In one embodiment, process  is started as part of the bootstrap process for client endpoint device , and remains active throughout the period that client endpoint device  is operational. In step  the endpoint browser server determines if the endpoint device  is active, e.g., is connected to a host via a VDI session, etc. If not, the process  ends at step , e.g., by terminating process  or returning to wait for the endpoint device  to become active, but if yes, then in step  the endpoint browser server waits to receive a message from the HVD browser extension, for example one of the messages sent by HVD extension process . When a message is received, the endpoint browser server proceeds to step , where it dispatches based on the message\/event type received in step .","If the received message\/event is related to the restoration of the VDI session, then in step  the endpoint browser server destroys all tabs and browser windows of the endpoint browser , and in step  sends a response to the HVD with complete state information, including a flag indicating the preferred rendering environment (e.g., an HVD\/endpoint preferred flag) for a particular tab or window, a list of all bookmark and cookie changes since the VDI session became inactive, and a list of any non-endpoint configuration changes since the VDI session became inactive. Depending on the implementation, in step  the endpoint browser server may accept events\/messages for managing a frameless browser (if any) on the endpoint device, for example as set forth in  (process ) before returning to step .","If the received message\/event is a tab\/window update, then in step  the endpoint browser server updates its tab information (e.g., a table of tabs and windows stored in synchronized browser database ) with the new information, and then returns to step . If the received message\/event is a bookmark update, then in step  the endpoint browser server updates its bookmark database (e.g., synchronized browser database ) with the new information, and then returns to step . If the received message\/event is a cookie update, then in step  the endpoint browser server updates its cookie database (e.g., synchronized browser database ) with the new information, and then returns to step . If the received message\/event is a configuration update, then in step  the endpoint browser server updates its configuration database (e.g., endpoint-specific configuration database ) with the new information, and then returns to step . If the received message\/event is a page load, then in step  the endpoint browser server updates its tab information (e.g., a table of tabs and windows stored in synchronized browser database ) with the new page URL, and then returns to step . If the received message\/event is a local tab\/window modification, then in step  the endpoint browser server updates its tab information (e.g., a table of tabs and windows stored in synchronized browser database ) with the new information, and then returns to step .","Turning to , if the received message\/event is related to the loss of a VDI session, then in step  the endpoint browser server determines if any frameless browser instances  are active, and if so in step  destroys each instance. Alternatively, the endpoint browser server may put the instances of the frameless browser to sleep (e.g., minimize them) until restoration of the VDI session. If all instances have been destroyed (or, e.g., put to sleep), then in step  the endpoint browser server merges the HVD configuration information with the endpoint local configuration information. In step  the endpoint browser server determines if any elements in the tab\/window table are active, and if so, in step  determines if the element is a tab or a window. If the element is a window, then in step  the endpoint browser server launches an active endpoint browser  to create a full-frame browser window , and then forces the active endpoint browser  to render the URL for this element in the new full-frame browser window, before returning to step . If the element is a tab, then in step  the endpoint browser server determines if the element's parent window exists, if not in step  creates a new full-frame browser window , and then proceeds to step , and if yes, proceeds to step . In step  the endpoint browser server creates a tab in the browser window with the same identifier as the element's parent window, and forces the tab to render the URL for this element, before returning to step .","When the endpoint browser  is operable during a VDI outage, the user may click on a web link that results in a file being downloaded, or request to save a file, which will result in a download. It will be appreciated that this event may only occur when the host browser  is inaccessible due to the VDI outage. If the received message\/event is a download event, then at step  the endpoint browser server downloads the file into temporary storage .","The operation of the frameless endpoint browser in various example embodiments in which the VDI session is active or has been re-activated may be further understood with reference to  through  and their accompanying descriptions. Further details of the operation of the frameless endpoint browser and the policy agent are set forth in the Related Application.","The general operation of the frameless endpoint browser in an example embodiment may be understood with reference to . In this example, the host web browser  and frameless endpoint browser  work together with their respective browser servers ,  and browser extensions ,  to render web pages. For example, when a user of client endpoint device  interacts with a displayed browser window, the appropriate browser extension ,  implements an application programming interface (API) defined by the browsers , , for use by browser extensions , . For example, some of the APIs allow the extensions ,  to filter events associated with the user's interaction. For example, if the user is viewing a web page rendered by the HVD in a displayed browser window, and navigates to a different web page using, e.g., a web address such as a Uniform Resource Locator (URL), the HVD browser extension  filters the navigation request and queries policy agent , and policy agent  consults one or more policies to determine whether this URL should be rendered by the host web browser  or the frameless endpoint browser .","If the URL should be rendered by the host web browser , then the host web browser  requests and receives from HTML server , for example, an HTML- or XHTML-encoded web page associated with the URL, over HTTP session , and renders the page for display. If, however, the URL should be rendered by the endpoint browser, then the HVD browser extension  establishes a connection  with the endpoint browser server , and requests that the endpoint browser server  instantiate a new instance of a frameless endpoint browser . Frameless endpoint browser  is deployed as a frameless browser, i.e., it does not render window framing, menus, or other browser controls. The instantiated frameless endpoint browser  establishes a content transport session , for example an HTTP session, directly with content server  (or content cache server ), requests and receives the appropriate data, and renders it for a user, for example as described with respect to .","If the user then navigates to a different web page, e.g., by opening up a new browser tab with a new URL, the endpoint browser extension  filters the navigation request and queries policy agent , and policy agent  consults one or more policies to determine whether this URL should be rendered by the host web browser  or the frameless endpoint browser . If the URL should be rendered by the frameless endpoint browser , then the current instance of frameless endpoint browser  is signaled to render the new URL and the appropriate data associated with the new URL is rendered in the current instance of the frameless endpoint browser . Alternatively, if the filtered URL is to be rendered in a separate window, for example if a new browser tab or browser instance is to render the URL, then a new instance of the frameless endpoint browser  will be instantiated and requested to render the URL. If the URL should be rendered by the host browser , however, then the endpoint browser extension  establishes a connection  with the HVD browser server , and notifies the HVD browser server  to request and render the appropriate data associated with the new URL.","The policy agent  may implement one or more policies to determine which browser should render a particular URL. For example, in one embodiment, the policy agent  may utilize a policy that compares the Fully Qualified Domain Name (FQDN) of the URL with domain name data (e.g., a list of domain name records) on the policy agent. If a match is found, the policy agent  examines the located data (e.g., a record) to determine if the URL should be rendered by the HVD or endpoint. If no matching data is found, then the policy agent  may use a default value (e.g., a default record) to determine whether the HVD or endpoint should render the URL. In another embodiment, the policy agent  may use a partial FQDN matching policy, where if the queried FQDN is a child of an FQDN having domain name data (e.g., a record), the policy agent  uses the parent data to determine whether the HVD or endpoint should render the URL. In a different embodiment, the policy agent  may scan the page associated with the URL for particular content, for example a tag such as an <object> or <embed> tag whose URL references content server , or whose Multipurpose Internet Mail Extension (MIME) type indicates a type of object (e.g., audio, video, Java, etc.) that is designated to be rendered on the endpoint , or that is not renderable on the client, etc. In yet another embodiment, the policy agent  may scan the page associated with the URL for specialized (e.g., proprietary) tags inserted into the HTML that indicate whether the page should be rendered by the HVD or endpoint.","In another embodiment, the activity of the policy agent is suppressed if the browser request originates from an anchor located inside an inline frame, e.g., in an <iframe> element, so that such requests are always handled by the browser attempting to access the anchor. In a different embodiment, the activity of the policy agent is suppressed if the browser request is associated with a conferencing or screen sharing application, such as Cisco WebEx, IBM LotusLive Meetings, Microsoft Office Live Meeting, Skype Screen Sharing, etc., so that such requests are always handled by the HVD browser. In these embodiments, the policy suppression provides an improved browser quality because it avoids having an individual web page partially rendered by the host browser and partially rendered by the client endpoint browser. Policy suppression may also permit a set of pages that share local data via a scripting language, for example javascript, to function properly by ensuring that the pages are all executed within a single browser instance.","The one or more policies may indicate that streaming media and other similar data should be rendered by the endpoint . For example, in one embodiment the policies may indicate that particular types of content data, such as animations, applications, audio, games, graphics, models, simulations, telephony, video, and web-based push-to-talk should be rendered by the endpoint . Or, in another embodiment, the policies may indicate that particular URLs should be rendered by the endpoint , for example URLs for video content servers (e.g., YouTube) or audio content servers (e.g., streaming radio stations), etc.","In one embodiment, an instance of frameless endpoint browser  is created for each browser tab or browser window rendering a web page that policy determines should be rendered on the client endpoint device . However, because policy agent  may have determined that all current web pages should be rendered in HVD browser tabs and windows, it is possible that zero instances of frameless endpoint browser  may be present on client endpoint device . In this case, endpoint browser server  should still be present, so that connection requests from HVD browser extension  may still be received, and so endpoint browser server  can create an instance of frameless endpoint browser . Hence, for some embodiments, endpoint browser server  should be permanently resident on client endpoint device , even if the frameless endpoint browser  is not yet instantiated. Then, when HVD browser extension  notifies endpoint browser server  to instantiate a frameless endpoint browser  instance, the frameless endpoint browser  generally instantiates the endpoint browser extension , and the HVD browser server  is instantiated as well.","The client endpoint device  is responsible for rendering both the HVD display and the client-provided frameless browser windows rendered by the various frameless endpoint browser instances. The ability of the client endpoint to render the complete display depends on multiple factors including the client operating system , the display rendering hardware , and the like. In particular, it is the responsibility of the client operating system  to accomplish compositing. In most windowed operating systems, compositing is accomplished by the operating system drawing each individual window according to a z-order, which describes the relative depth of the various windows. Windows with the deepest (lowest) z-order are drawn first, and each window with a successively shallower (higher) z-order is drawn subsequently, which may result in the deeper windows being partially or fully occluded on the display. The assignment of higher-valued integers to shallower windows is somewhat arbitrary, but higher z-order shall herein be understood to imply shallower windows, i.e., windows stacked closer to the user's eyes. For example, for a merged browser window  where the host-provided elements  are from an HVD, the endpoint-provided elements  of the frameless client browser window will have a higher z-order than the window used to render the host-provided elements  and the HVD display. If the host-provided elements  are from a hosted virtual application (HVA), then the endpoint-provided elements  of the frameless client browser window will have a higher z-order than that of the window used to render the HVA display but lower than that of any HVA windows or endpoint application windows that may fully or partially occlude the HVA display.","It should be appreciated, however, that the VDI client  may receive all virtual display information (i.e., the HVD display comprising a browser window  with host-provided window elements  and a placeholder element, other HVD application windows , , and the HVD background desktop image ) from VDI session  and may request the client operating system  to render the entire virtual display as a single rectangular window. Thus, although window  or  may have a higher z-order on the HVD than the browser window , the client endpoint device  may composite the frameless client browser window so that the composited images have a higher z-order than the HVD display.","The compositing becomes more complex when the merged browser window  is partially occluded. For example, if one or both of the application windows ,  shown in  are brought to the foreground of the display through recent user interaction, they will partially occlude the browser window , even though portions of browser window  are being rendered on the client endpoint device  using the frameless endpoint browser . Because the VDI server  may composite all applications on the HVD  into a single HVD display, which is then communicated to the client endpoint device , the placeholder element may not be a simple rectangle, implying that the compositing of the endpoint-provided rendering elements  of the frameless browser window cannot be accomplished by requesting that client operating system  render a simple rectangle on top of the HVD display, as was the case in .","The client endpoint device  creates the appearance that the endpoint-provided rendering elements  are partially occluded, however, by rendering either the frameless client browser window or the remainder of display as non-rectangular shapes. For example, the client endpoint device  may composite the frameless client browser window in only the non-occluded portions of the placeholder element. This means that the frameless client browser window may be rendered as a non-rectangular shape. Alternatively, the client endpoint device  may render the frameless client browser window as a rectangular shape, and render the remainder of display with a non-rectangular \u201chole\u201d over the portion of the frameless client browser window desired to be displayed.","To efficiently render the display, the client operating system  should be able to accept requests to render non-rectangular images without interfering with the images on the rest of the display. The endpoint browser server  should therefore be able to be informed of the non-rectangular geometry, so that this information may be communicated to the operating system . In one example, the HVD browser extension  interacts with HVD operating system  to compute the geometry of the non-occluded portions of the placeholder window and communicates that window geometry information to the endpoint browser server  over the communication session . In another example, HVD browser extension  fills placeholder element with a placeholder image, for example a low bandwidth image such as a monochrome page, so that endpoint browser server  and operating system  may compute the non-rectangular region by detecting what portions of the virtual display contain the placeholder image. Operating system  should also be able to render the non-rectangular images at high speed and at a low impact to the CPU of the client endpoint device . In one example of such an efficient rendering, operating system  is aware of display rendering hardware , which comprises, for example, a graphics processing unit (GPU) capable of rendering non-rectangular images. Further details of the compositing of the frameless browser window are set forth in the Related Application.","A detailed understanding of the operation of the frameless endpoint browser and the policy agent in an example embodiment may be understood with reference to . In particular,  illustrate examples of the inter-connected operational processes  and  of the endpoint browser extension  at the client endpoint device  () and the HVD browser server  at the HVD (), respectively. These processes  and  are carried out by the endpoint browser extension  and the HVD browser server , respectively, and are inter-related. It may be seen, for example, that the endpoint browser extension sends a message to the HVD browser server in step , and that the HVD browser server responds to the received message by taking various actions, for example by rendering a tab in step . The messages exchanged in processes  and  may be remote procedure calls (RPCs) or any other suitable messages. If there is no endpoint browser extension  present in a particular embodiment, then process  is performed by one or both of the frameless endpoint browser  and the endpoint browser server , and the references to the endpoint browser extension in the following description are understood to refer to the browser component actually performing process . Similarly, if there is no HVD browser server  present in a particular embodiment, then process  is performed by one or both of the HVD browser  and the HVD browser extension  (if present), and the references to the HVD browser server in the following description are understood to refer to the browser component actually performing process .","Although not depicted here, it is understood that processes  and  operate in conjunction with the host sending an HVD display image  from the HVD to the client endpoint, where the HVD display comprises at least one placeholder element, as previously described with respect to . The client endpoint device  may receive the HVD display image via VDI client  and the VDI session . The HVD display image may be transported as a single window comprising the entire HVD display image, or as a separate virtual image for each hosted virtual application, or a combination of the two. The processes  and  may also run concurrently with processes  and . It should be noted that because multiple instances of frameless client browser  may be active at the same time, there may be multiple processes  also active at the same time, each process  being associated with a particular instance of frameless client browser .","Referring now to , process  starts in step  by the endpoint browser extension  determining if a communication session  with the HVD browser server  has been established, and if no proceeding to step  and if yes proceeding to step . In step , the endpoint browser extension establishes communication session  to the HVD browser server , which may take many embodiments, including, but not limited to, use of HTTP, TLS, TCP, or multiplexing onto a virtual channel of VDI session . In step , the endpoint browser extension obtains the tab information for the browser instance associated with the current process, for example by querying the endpoint browser server . In step  the endpoint browser extension determines if its associated browser instance is active. If not, the process  ends at step , e.g., by terminating process  or returning to wait for the browser instance to become active, but if yes, then in step  the HVD browser extension waits to receive an event from the browser. An event may be generated by user interactions with the web page, or scripting associated with the web page, or requests from the HVD.","In step  the endpoint browser extension determines the type of the received event, and processes it according to a particular path before returning to step .  presents a few examples of common events that may occur in the same or similar form in many conventional web browsers, and it is understood that the depicted events may be modified or varied from those depicted. The depicted events include page load intercepts, downloading files and uploading files.","For a page load intercept event, the endpoint browser extension in step  queries the policy agent with the URL of the intercept page desired to be loaded, and in step , determines whether the response from the policy specifies whether the HVD or the endpoint should render the new page. If the HVD should render the new page, then the endpoint browser extension in step  sends a \u201crender tab on HVD\u201d message containing the tab identifier and the URL to the HVD browser server , in step  terminates the associated browser instance, and in step  destroys the tab information associated with the browser instance, for example by interacting with the endpoint browser server . In step  the endpoint browser extension removes occluding window information for this browser instance from the endpoint operating system , and returns to step . If the endpoint should render the new page, then the endpoint browser extension in step  sends a \u201cURL changed\u201d message containing the new tab identifier and the URL to the HVD browser server , and in step  loads the new page, and returns to step . Because all files should be downloaded and uploaded on the HVD side, for a file download event, the endpoint browser extension in step  sends a \u201cdownload file\u201d message containing the new tab identifier and the URL to the HVD browser server , and returns to step . For a file upload event, the endpoint browser extension in step  sends an \u201cupload file\u201d message containing the new tab identifier and the URL to the HVD browser server , and returns to step .","Referring now to , process  starts in step  by the HVD browser server  waiting for and accepting the establishment of communication session  by the endpoint browser extension. In step  the HVD browser server determines if the endpoint device  is active, e.g., is connected to a host via a VDI session, etc. If not, the process  ends at step , e.g., by terminating process  or returning to wait for the endpoint device  to become active, but if yes, then in step  the HVD browser server waits to receive a message from the endpoint browser extension, for example one of the messages sent by process . When a message is received, the HVD browser server proceeds to step , where it locates the tab information based on the tab identifier in the message. In step  the HVD browser server processes the received message according to its type, before returning to step .","For a \u201crender tab on HVD\u201d message, the HVD browser server in step  replaces the placeholder element in the HVD browser window with the rendered page of the new URL from the message, in step  removes the placeholder page from the browser history, and in step  marks the current tab as rendered by the HVD, and returns to step . It will be understood that, by removing the placeholder page from the browser history, if the user invokes the browser's \u201cback\u201d control, the display will smoothly switch between the current page rendered on the HVD and the previous page rendered on the endpoint without anomalously viewing the placeholder page, which should not be seen by the user, because the endpoint composites the endpoint's frameless browser instance in its place. For a \u201cURL changed\u201d message, the HVD browser server in step  updates the browser history with the current URL, so that the user may use the \u201cback\u201d control to access more than one page that has been consecutively rendered on the endpoint, and in step  updates the current tab information with the new URL from the message, and returns to step . For a \u201cdownload file\u201d message, the HVD browser server in step  starts a download dialog using the new URL from the message to download the file, and returns to step . For an \u201cupload file\u201d message, the HVD browser server in step  starts an upload dialog using the new URL from the message to upload the file, and returns to step .",{"@attributes":{"id":"p-0108","num":"0107"},"figref":["FIG. 11","FIG. 1"],"b":["1000","40","1005","324","364","1100","800","1010","1015","1020","1025","1030","1025","1030","1030","1035","1040","1035","1040","1005"]},{"@attributes":{"id":"p-0109","num":"0108"},"figref":["FIGS. 12 and 13","FIG. 12","FIG. 13"],"b":["1100","1200","324","362","205","1100","1200","324","362","1126","1218","1224","1100","1200","324","1100","320","322","1100"]},"Although not depicted here, it is understood that processes ,  operate in conjunction with the host sending an HVD display image  from the HVD to the client endpoint, where the HVD display comprises at least one placeholder element, as previously described with respect to . The client endpoint device  may receive the HVD display image via VDI client  and the VDI session . The HVD display image may be transported as a single window comprising the entire HVD display image, or as a separate virtual image for each hosted virtual application, or a combination of the two.","Referring now to , process  starts in step  by the HVD browser extension  establishing a communication session  to the endpoint browser server , which may take many embodiments, including, but not limited to, use of HTTP, TLS, TCP, or multiplexing onto a virtual channel of VDI session . In step  the HVD browser extension determines if the host web browser  is active. If not, the process  ends at step , e.g., by terminating process  or returning to wait for the browser to become active, but if yes, then in step  the HVD browser extension waits to receive an event from the browser. An event may be generated by user interactions with the web page, or scripting associated with the web page, or callback requests from the client endpoint device .","When an event is received, the HVD browser extension proceeds to step , where it locates the current tab information, that is, information about the tab currently active in the HVD browser. The tab information is maintained by the HVD and endpoint browser servers ,  and the HVD and endpoint browser extensions , , and may be in any suitable form, for example a list of tab information structures keyed by tab identifiers. The tab information is passed back and forth in the messages sent between each browser server ,  and its respective browser extension , . For the endpoint browser server , the tab information points at the instance of the frameless endpoint browser  that is currently in use for this particular tab. For HVD browser extension , the tab information maintains a marker indicating whether the current tab is being rendered by the HVD or the endpoint.","In step  the HVD browser extension determines the type of event received in step , and processes the event according to a particular path before returning to step .  presents a few examples of common events that may occur in the same or similar form in many conventional web browsers, and it is understood that the depicted events may be modified or varied from those depicted. The depicted events include page load intercepts, tab switching, geometry changes, and tab deletion.","A page load intercept event is received when the browser is loading a new page, which may result from user actions such as clicking a link in the current page, requesting a bookmarked page, requesting a page from the browser history, using the navigation controls (e.g., a forward or back button), typing a URL in an address bar, etc. For a page load intercept event, the HVD browser extension in step  queries the policy agent with the URL of the page desired to be loaded, and in  determines whether the policy agent specified whether the HVD or the endpoint should render the new page. If the HVD should render the new page, then the HVD browser extension in step  checks to determine if the currently active tab is being rendered by the endpoint, if yes, in step  sends a \u201cdestroy browser\u201d message containing the current tab identifier to the endpoint browser server  and proceeds to step , and if not, proceeds to step . In step , the HVD browser extension marks the new tab as rendered by the HVD, and returns to step .","If the endpoint should render the new page, then the HVD browser extension in step  checks to determine if the currently active tab is being rendered by the HVD, and if yes, in step  sends a \u201ccreate browser\u201d message containing the new tab identifier to the endpoint browser server . The \u201ccreate browser\u201d message also contains the new URL, and information about the size and location of the placeholder element, occluding window(s), etc. In step , the HVD browser extension marks the new tab as rendered by the endpoint, and in step  substitutes a page containing at least one placeholder element for the currently displayed web page, and returns to step . If the determination in step  is no, then the HVD browser extension in step  sends an \u201cupdate page\u201d message containing the current tab identifier and the new URL to the endpoint browser server , and proceeds to step .","Turning to events processed in , a switch tab event is an event when the browser switches from the current tab to a different active tab in the browser, which may result from user actions such as clicking on a different tab or using navigation controls to move from tab to tab. For a switch tab event, the HVD browser extension in step  determines if the current tab is being rendered by the endpoint, if yes proceeds to step  and if no proceeds to step . In step , the HVD browser extension sends a \u201csleep browser\u201d message containing the current tab identifier to the endpoint browser server , and proceeds to step . In step , the HVD browser extension determines if the new tab should be rendered by the endpoint, if yes proceeds to step  and if no proceeds to step . In step , the HVD browser extension sends a \u201cwakeup browser\u201d message containing the new tab identifier to the endpoint browser server , and proceeds to step . In step , the HVD browser extension switches to the new tab, and returns to step .","A geometry change event is an event when the merged browser window  or other application windows ,  are altered, for example moved to a different location in the HVD display, altered in size, occluded by another window, etc., which may result from user actions such as clicking on different application windows, using keyboard navigation commands to move from application window-to-window, moving or resizing one or more windows, etc. For a geometry change event, the HVD browser extension in step  sends an \u201cupdate geometry\u201d message to the endpoint browser server , which contains the current tab identifier, the window geometry, which may comprise window coordinates and size for the frameless client browser window , and information about what sections of the frameless client browser window  are occluded, etc. The HVD browser extension then returns to step .","A delete tab event is an event when a tab in the browser is closed, which may result from user actions such as clicking on a \u201ctab close\u201d control, etc. For a delete tab event, the HVD browser extension in step  determines if the current tab is being rendered by the endpoint, if yes proceeds to step  and if no returns to step  (because the host web browser will delete the tab). In step , the HVD browser extension sends a \u201cdestroy browser\u201d message containing the current tab identifier to the endpoint browser server , and returns to step .","Referring now to , endpoint server process  starts in step  by the endpoint browser server  waiting for and accepting the establishment of communication session  by the HVD browser extension. It will be understood that, even if no frameless endpoint browser instances  are currently active, process  should still be active to listen for incoming connection requests from HVD browser extensions . In one embodiment, process  is started as part of the bootstrap process for client endpoint device , and remains active throughout the period that client endpoint device  is operational. In step  the endpoint browser server determines if the endpoint device  is active, e.g., is connected to a host via a VDI session, etc. If not, the process  ends at step , e.g., by terminating process  or returning to wait for the endpoint device  to become active, but if yes, then in step  the endpoint browser server waits to receive a message from the HVD browser extension, for example one of the messages sent by HVD extension process . When a message is received, the endpoint browser server proceeds to step , where it locates the tab information based on the tab identifier in the message. In step  the endpoint browser server looks for the identified tab, and if none is found, creates new tab information using the received tab identifier in step , before proceeding to step . If the identified tab is found, then the endpoint browser server proceeds to step . In step , the endpoint browser server processes the received message according to its type, before returning to step .","For a \u201ccreate browser\u201d message, the endpoint browser server in step  converts the window coordinates and size contained in the message to coordinates suitable for the display  associated with client endpoint device . In step , the endpoint browser server creates a new instance of the frameless endpoint browser , which renders the new URL in a frameless browser window , that is, a drawing rectangle or a window with no framing decorations associated with it, as specified according to the received message. The frameless browser window  has a higher z-order than the HVD browser window , which in turn may be a portion of, for example, HVD display  (separately received by the client endpoint device , for example via VDI session ). In step  the endpoint browser server saves the frameless browser instance reference (in some embodiments, a process or thread identifier) in the tab information, thereby forming an association between the tab identifier and the browser instance reference, and in step  sends information about regions of the HVD display that occlude the frameless browser window  to the endpoint operating system . In sum, the drawing rectangle and occlusion information allows endpoint browser server  to interact with operating system  to display only those portions of the rendered data that are currently visible in the HVD display, resulting in a endpoint display similar to that depicted in  as element . The endpoint browser server then returns to step .","For an \u201cupdate page\u201d message, the endpoint browser server in step  sends the new URL to the endpoint browser instance associated with the received tab identifier, and returns to step . For a \u201cdestroy browser\u201d message, the endpoint browser server in step  terminates the endpoint browser instance associated with the received tab identifier, and in step  removes the occluding window information for this browser instance from the endpoint operating system , and returns to step . Turning now to , for a \u201csleep browser\u201d message, the endpoint browser server in step  forces the endpoint browser instance associated with the received tab identifier into the background, where it stops rendering data and remains minimized (\u201casleep\u201d). In step  the endpoint browser server removes the occluding window information for this browser instance from the endpoint operating system , and returns to step .","For a \u201cwakeup browser\u201d message, the endpoint browser server in step  restores the endpoint browser instance associated with the received tab identifier into the foreground, causing it to recommence rendering data on the endpoint display, and in step  sends information about occluding regions of the HVD display to the endpoint operating system . The endpoint browser server then returns to step . For an \u201cupdate geometry\u201d message, the endpoint browser server in step  converts the window coordinates and size contained in the message to coordinates suitable for the display  associated with client endpoint device , and in step  forces the frameless endpoint browser instance associated with the received tab identifier to update its position and size. In step  the endpoint browser server sends information about occluding regions of the HVD display to the endpoint operating system , and returns to step .","The above description is intended by way of example only. The description has been presented for purposes of illustration and description, but is not intended to be exhaustive or limited to the embodiments in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art.","The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting. As used herein, the singular forms \u201ca\u201d, \u201can\u201d and \u201cthe\u201d are intended to include the plural forms as well, unless the context clearly indicates otherwise. It will be further understood that the terms \u201ccomprises\u201d and\/or \u201ccomprising,\u201d when used in this specification, specify the presence of stated features, integers, steps, operations, elements, and\/or components, but do not preclude the presence or addition of one or more features, integers, steps, operations, elements, components, and\/or groups thereof. The corresponding structures, materials, acts, and equivalents of all means or step plus function elements in the claims below are intended to include any structure, material, or act for performing the function in combination with other claimed elements as specifically claimed.","With respect to the Figures, which illustrate the architecture, functionality, and operation of possible implementations of methods, apparatuses, and computer readable media encoded with instructions, each block in the flowcharts or block diagrams may represent a module, segment, or portion of code, which comprises one or more executable instructions for implementing the specified logical function(s). It should also be noted that, in some alternative implementations, the functions noted in the block may occur out of the order noted in the Figures. For example, two blocks shown in succession may, in fact, be executed substantially concurrently, or the blocks may sometime be executed in the reverse order, depending on the functionality involved. It will also be noted that each block of the block diagrams and\/or flowchart illustration, and combinations of blocks in the block diagrams and\/or flowchart illustration, can be implemented by special purpose hardware-based systems that perform the specified functions or acts, or combinations of special purpose hardware and computer instructions."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":["FIGS. 2A and 2B","FIG. 2A","FIG. 2B"]},{"@attributes":{"id":"p-0008","num":"0007"},"figref":["FIGS. 3A and 3B","FIG. 3A","FIG. 3B"]},{"@attributes":{"id":"p-0009","num":"0008"},"figref":["FIG. 4A","FIG. 4B","FIG. 4C"]},{"@attributes":{"id":"p-0010","num":"0009"},"figref":["FIG. 5A","FIG. 5B"]},{"@attributes":{"id":"p-0011","num":"0010"},"figref":["FIG. 6A","FIG. 6B"]},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIGS. 7A","b":["7","7"]},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIGS. 8A and 8B"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIGS. 9A and 9B"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIGS. 12A and 12B"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIGS. 13A and 13B"}]},"DETDESC":[{},{}]}
