---
title: Endpoint address change in a packet network
abstract: A seamless transport endpoint mobility (STEM) architecture migrates a transport connection endpoint from an old IP address to a new IP address without loss of the session. The migration process is negotiated between two endpoints themselves. Transport endpoint mobility includes communication between two STEM daemons, one STEM daemon in each endpoint, which dynamically updates kernel data structures (e.g., elements of a 5-tuple associated with a TCP/IP application) associated with the session. Migration is transparent to the application using the underlying transport connection for data transfer.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08195835&OS=08195835&RS=08195835
owner: Alcatel Lucent
number: 08195835
owner_city: Paris
owner_country: FR
publication_date: 20040128
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["1. Field of the Invention","The present invention relates to migrating transport connections in a communications network, and, more particularly, to migration of existing sessions across addresses in a packet network.","2. Description of the Related Art","With growth and proliferation of mobile and wireless computing devices (mobile devices) that access the Internet, an infrastructure to support seamless roaming across internet protocol (IP) subnetworks (subnets) is required. Many users employ a dynamic host configuration protocol (DHCP) to obtain an IP address for connectivity, but employing DHCP only provides portability and does not provide relative transparency for seamless roaming. Every move across an IP subnet by a mobile device requires first releasing the old IP address and then acquiring a new IP address, which results in the loss of transport (and higher-layer) connections.","Normal network communication between two entities includes specifying a unique endpoint identifier, such as an IP address, that does not change during the communication period. For example, a typical transmission control protocol (TCP) connection establishment procedure between two endpoints (e.g., hosts) begins with the applications using a socket application programming interface (API) packet. Each socket API is explicitly bound to a given 5-tuple comprising the following five elements. The first element is the \u201cProtocol\u201d element identifying the particular communication protocol for the packet. The second element is the \u201cSource IP address\u201d element identifying the IP address of the source node originating the packet. The third element is the \u201cSource Transport Port\u201d element indicating the port of the source node originating the packet. The fourth element is the \u201cDestination IP Address\u201d element identifying the IP address of the destination node to receive the packet. The fifth element is the \u201cDestination Transport Port\u201d element indicating the port of the destination node receiving the packet. Any changes to any of these 5-tuple elements during a session will cause a session failure and typically initiates connection re-establishment.","Given the 5-tuple structure, the following outlines establishment and maintenance of a connection in current TCP-compliant packet networks. A TCP engine's connection establishment procedure involves a sequence of message exchanges between a client (first endpoint) and a server (second endpoint). The client begins by sending a SYN message to the server, and the client receives a SYN-ACK message from the server in response. The client responds back to the server with an ACK message in acknowledgment, and the connection between the client and the server is then open and fully functional. The TCP engine on both ends of the connection goes into the ESTABLISHED state with the state information being maintained in the TCP Control Block (TCB) within the operating system kernel. The TCP session is now uniquely identifiable in the network by the 5-tuple contained in the IP datagrams (packet header portions) traversing the network. From the application's and the operating system kernel's perspective, this session can be uniquely identified by the socket associated with this session. Any change to even one of the elements of the 5-tuple leads to session failure.","A TCP session failure occurs when TCP aborts the connection and closes the associated socket bindings. There are many reasons for the TCP to abort a connection, some of which include: 1) receiving a TCP RST (reset) packet from the remote end; 2) exceeding the number of retransmission attempts defined by the protocol; 3) too many unacknowledged \u201cKeep-Alive\u201d probes; 4) a request by the application; and 5) an abnormal external condition. These TCP reset conditions routinely occur in normal operation of a packet network, and may arise from changes to the interface IP address, extended periods of connectivity loss, host crashes\/reboots, or similar contributions to TCP connection failure.","Since the application using the TCP transport session is bound to the socket with the original 5-tuple (with the old IP address), changing the IP address of the interface doesn't change the associated application socket binding. Any user data sent by the application to the kernel gets queued at the TCP layer as transport layer segments in TCP's send-queue (send-Q) because there is no valid output interface with the old IP address to send out the data on. TCP's retransmit mechanism keeps retrying to send this data out until a valid route\/interface appears or the connection times itself out. If there is no reachability between the two end systems, the TCP state on either side continues to be (normally) in its previous state (e.g., both sides continue to be in ESTABLISHED state). If the IP address of the interface reverts back to its original address (thereby, the original 5-tuple), communication between the endpoint applications resumes, provided a route exists. However, if the IP address of the interface changes, any data packets received from the remote host get dropped at the IP layer since there is no valid interface to associate the data with. Both the local end and the far end time-out their respective connections depending on their TCP state.","This session establishment and maintenance process is restrictive and imposes limits on certain types of applications, such as user mobility or fault tolerant connections. Mobile IP of the prior art was developed to achieve host mobility by bypassing this restriction using routing techniques at the network layer. According to Mobile IP, for a node to change its point of attachment without losing its ability to communicate, currently one of the two following mechanisms must typically be employed: either 1) the node must change its IP address whenever it changes its point of attachment or 2) host-specific routes must be propagated throughout much of the Internet routing fabric. Both of these alternatives are often unacceptable. The first mechanism makes it impossible for a node to maintain transport and higher-layer connections when the node changes location. The second mechanism exhibits severe scaling problems, especially relevant considering the explosive growth in sales of notebook (mobile) computers.","Many techniques exist in the prior art that have been proposed to reduce host mobility and fault resiliency problems. These techniques can be classified into those providing a solution at the network layer (e.g., IP layer), the transport layer (e.g., TCP\/UDP (User Datagram Protocol), or higher layers (e.g., the socket or application layer).","Mobile IP attempts to solve host mobility problems at the network layer by using a level of routing indirection or triangular routing of all packets from a correspondent host to a mobile node. This routing indirection is accomplished through the use of \u201cHome Agents\u201d and \u201cForeign Agents\u201d that are proxies providing services to the mobile node. Although Mobile IP handles host mobility and reachability problems well, it does not handle transport connection failures (e.g., any changes to the transport endpoints leads to a session failure). Typically, applications depending on transport session connectivity need to be restarted and a new transport connection has to be established. Other disadvantages of Mobile IP include non-optimized triangular routing and extensive use of IP tunneling. Due to security reasons, service providers typically disallow tunneled packets. Further, due to the increased frequency of Denial-Of-Service (DOS) attacks, service providers use ingress filtering to block packets that spoof source addresses. Although the ingress filtering problem might be solved by using reverse tunneling, reverse tunneling leads to further sub-optimal use of networking resources and adds extra packet delays between the two endpoints.","Methods that attempt to solve the problem of end-to-end host mobility at the transport or higher layers typically either 1) split the connection into multiple segments, 2) modify a standard TCP implementation by adding new messages and states to the TCP state machine, or 3) trick the application into believing that the connection still exists while an attempt is made to re-establish the connection.","For example, MSOCKS (Mobile Sockets) uses a split-connection proxy for connection redirection. MSOCKS inserts a proxy in the communication path between the mobile node and its correspondent hosts and uses a TCP splice mechanism to break the connection into multiple segments and thus hide the mobility issues of the mobile node from the correspondent hosts. However, adding a communication path proxy might significantly degrade service.","Some techniques include introducing a library between the application and the socket API that preserves the illusion of a single, unbroken connection over successive connection instances. All these approaches require linking the application with their respective (specific) libraries. The illusion of an unbroken connection is obtained by tricking the application into believing that the transport session is still active, even though the transport session has closed. The intermediate library then attempts to re-establish the (new) transport connection and maps the new transport connection to the application using it. The implementation of, and operational difficulties involved with, such solutions include virtualizing mechanisms like I\/O polling, asynchronous and non-blocking I\/O processes, the need for timers and signal handlers, and the need for additional process control interfaces such as \u201cwait\u201d, \u201ckill\u201d, and \u201cexec\u201d.","Another technique provides a mechanism to achieve end-to-end host mobility by modifying the transport layer protocol and end applications. The modification adds new states and semantics to the TCP finite state machine and defines new TCP options to negotiate the migration of the connection. Other techniques exist that involve either changing the TCP header, packet format, protocol semantics, or adding additional headers in the packets. However, the disadvantage of these techniques is that the end-user applications have to be aware of the new feature to make use of it, implying required changes to those existing applications.","In accordance with exemplary embodiments of the present invention, a seamless transport endpoint mobility (STEM) architecture migrates a transport connection endpoint from an old address to a new address without loss of the session. The migration process is negotiated between two endpoints themselves. Transport endpoint mobility includes communication between two STEM daemons, one STEM daemon in each endpoint, which dynamically update kernel data structures (e.g., elements of a 5-tuple associated with a TCP\/IP application) associated with the session. Migration is transparent to the application using the underlying transport connection for data transfer.","In accordance with an exemplary embodiment of the present invention, a migrator migrates from a current endpoint address to a new endpoint address during a session between the migrator and a non-migrator in a packet-based communication system. The migrator migrates by (a) changing, in the migrator, the current endpoint address to the new endpoint address; (b) suspending transmission to the non-migrator of packets with the new endpoint address; (c) informing the non-migrator of the change to the new endpoint address; and (d) resuming transmission to the non-migrator of packets with the new endpoint address.","In accordance with another exemplary embodiment of the present invention, a non-migrator migrates from a current endpoint address to a new endpoint address during a session between the non-migrator and a migrator in a packet-based communication network. The non-migrator migrates by (a) receiving a control message indicating the migrator's change to the new endpoint address; (b) changing, in the non-migrator, the current endpoint address to the new endpoint address; (c) acknowledging, to the migrator, the non-migrator's change to the new endpoint address; and (d) exchanging, with the migrator, packets of the session with the new endpoint address.","The following terminology and definitions are employed as an aid to understanding the present invention. A \u201cmigrator\u201d or \u201cmigrating endpoint\u201d is an end system that is currently in the process of changing or has already changed its Internet protocol (IP) address. The migrator is the end system that initiates a control message to a remote endpoint identifying its new IP address. A \u201cnon-migrator\u201d or \u201cnon-migrating endpoint\u201d or \u201cfixed endpoint\u201d is the remote endpoint system that does not change its IP address. The non-migrator accepts the control message sent by the migrator and responds back to the migrator with acknowledgment messages. A one-to-one relationship between migrator\/non-migrator and client\/server does not necessarily exist. For the TCP connections, a client is a system that initiates a TCP connection to another system, while the server is that system which provides a service, such as file transport protocol (FTP), Telnet, or secure shell (SSH), to the client. The migrator\/non-migrator might be either a client or a server.","The session establishment and maintenance process between the migrator and non-migrator conforms to the following characteristics. A node maintains existing communication with other nodes while changing its IP address or interface. All messages needed to migrate the connection to the new IP address might optionally be authenticated in order to provide protection against breaches in security of the session, such as various redirection and replay attack techniques. The node obtains an IP address through, for example, dynamic host configuration protocol (DHCP), manual configuration, or other available network mechanism. The IP address (or the point of attachment) does not change rapidly. The rate at which IP addresses might change, while still maintaining the corresponding transport-layer connection, depends on the speed with which the nodes can communicate with each other and update their kernel data structures after authentication. Both end systems of the connection preferably have relatively symmetric code implementing an embodiment of the present invention.","In accordance with exemplary embodiments of the present invention, a seamless transport endpoint mobility (STEM) architecture dynamically changes a 5-tuple association for an established session (connection) kept in the migrator's kernel data structure and informs the non-migrator to perform the same IP address modification to its kernel data structure. A dynamic, loadable kernel module and a control information communication daemon are employed in each of the endpoints to change the source and destination IP addresses in packets of both endpoints. Thus, to achieve a successful transport endpoint migration to a new IP address, references to the old IP address are desirably eliminated during data transfer. For the migrator, all IP packets transmitted to the non-migrator include the new IP address as the source address, while all packets received from the non-migrator include the new IP address as the destination address. From the non-migrator's perspective, all IP packets received from the migrator should contain the new IP address as the source address, while all packets transmitted to the migrator should contain the new IP address as the destination address.",{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 1","b":["100","101","102","103","101","1","2","106","107","103","102","108","109","103","1","2","3","106","109","107","108"],"i":"Computer Networks"},"Application APP sets up and maintains a TCP\/IP session with application server SRV. STEM daemons  and  coordinate data exchange and control, such as identifying 5-tuple information including source and destination IP addresses, for nodes  and , respectively. STEM daemons  and  might be in communication through an out-of-band channel (channel separate from the TCP session channel), shown as a user datagram protocol (UDP) session passing through Internet .","Each STEM daemon is implemented with a dynamically loadable kernel module (not shown in ). A daemon is a program that runs continuously and exists for the purpose of handling periodic service requests that a computer system expects to receive. The daemon program forwards the requests to other programs (or processes) as specified by a given communication protocol. The kernel modules of STEM daemons  and  modify their kernel data structures that store 5-tuple information. The 5-tuple uniquely identifies a kernel socket descriptor (descriptor identifying the TCP\/IP session in the application).",{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIG. 2","FIG. 2"],"b":["201","202"],"sup":["D","D"]},"The migrator might obtain the new IP address for its interface with a number of different methods. The migrator may itself request the address from a higher level network manager or DHCP server, which will then assign and provide the address. Alternatively, the interface may be manually reconfigured to a new IP address.","At IP address change point , the migrator begins to change to IP address 192.168.2.99. During the period  after IP address change event , the kernel module of the migrator (e.g., node ) updates the IP address in the 5-tuple data structure associated with the socket descriptor. Each socket descriptor is uniquely associated with a 5-tuple. The kernel data structure update begins by searching all open socket descriptors and matching them against the specified 5-tuple (containing the old IP address as one of the tuples). Once a valid match is identified, the appropriate change is made to this data structure to reflect the new IP (endpoint) address. In addition, packet transmission to the destination node is suspended. TCP data segments are buffered in the node's send queue (TCP send-Q) until a valid route is established.","Thus, as far as the application (e.g., APP) is concerned, the changes to the kernel are transparent, since the application is still bound to the same socket descriptor. Thus, the application employs the same socket descriptor and continues to operate normally. Data sent on the modified socket descriptor yields a valid route\/interface during the route lookup process. Concurrently, the migrator informs the remote- (fixed-) end of the change to the new endpoint IP address through out-of-band communication (shown as control message \u201cmigrate req\u201d). Based on this information, the fixed end applies similar changes to its kernel data structures such that the destination address in the IP header of the data packets sent out by the fixed-end reflects the new value. The fixed end acknowledges the modification of its kernel (shown as control message \u201cmigrate reply\u201d) to the migrator, and the two end-points resume communication as a normal TCP session in period  using the new IP address for the migrator. TCP data segments buffered in the TCP send-Q are sent out of the interface towards the destination, since there is a valid route, and the IP address of all packets transmitted contain the appropriate new address in the IP header.","Controlling the migration process in a smooth and systematic manner prevents conditions, called race conditions, which may generate TCP reset messages that would terminate the connection. Specifically, preferred embodiments might prevent these conditions by ensuring 1) that the migrator's kernel changes are always applied first before the non-migrator is informed of these changes and 2) that the migrator does not send any data on that session during the control message exchange period. Such prevention might be achieved, for example, by using firewall rules on the system (e.g. output chain rules of iptables in a Linux operating system) to prevent any session data from leaving the system until the migration process is complete. The rules are dynamically added to the kernel to explicitly prevent transmission of packets on this session to the remote-end. Once an acknowledgement from the non-migrator is received, the rules are withdrawn to resume normal operation. Alternatively, preferred embodiments might delay the reassignment of the old endpoint IP address for a certain time period. This ensures that two different sessions do not concurrently employ the same IP address.",{"@attributes":{"id":"p-0040","num":"0039"},"figref":["FIG. 3","FIG. 2"],"b":["301","302","303","302"]},"At step , the migrator begins to change its current endpoint IP address to a newly acquired endpoint IP address (\u201cnew endpoint IP address). At step , the migrator suspends transmission of packets, and enqueues the packets in the TCP send-Q. At step , the migrator begins dropping packets received from the non-migrator that contain the old endpoint IP address. At step , the migrator updates the migrator's kernel data structure of the STEM daemon to include the new endpoint IP address.","At step , the migrator sends an Endpoint Address Change control message to the non-migrator through the out-of-band channel to indicate that the migrator has changed to the new endpoint IP address. During this period, the migrator continues to enqueue packets in the TCP send-Q. At step , the migrator receives an Endpoint Address Change Acknowledgment control message from the non-migrator through the out-of-band channel indicating that the non-migrator has changed its kernel data structure to include the new endpoint IP address. At step , the migrator continues the session with the new endpoint IP address by releasing packets from the TCP send-Q.",{"@attributes":{"id":"p-0043","num":"0042"},"figref":["FIG. 4","FIG. 2"],"b":["401","402","403","402"]},"At step , the non-migrator continues reception of packets from the migrator that contain the old endpoint IP address. At step , the non-migrator receives an Endpoint Address Change control message from the migrator through the out-of-band channel to indicate that the migrator has changed to the new endpoint IP address. At step , the non-migrator updates the non-migrator's kernel data structure of the STEM daemon to include the new endpoint IP address.","At step , the non-migrator sends an Endpoint Address Change Acknowledgment control message to the migrator through the out-of-band channel indicating that the non-migrator has changed its kernel data structure to include the new endpoint IP address. At step , the non-migrator continues the session with the new Endpoint IP address.","Returning to , STEM system  employs an out-of-band control channel, shown as UDP channel , to communicate between peers such as STEM daemon modules  and . Out-of-band communication through UDP channel  provides the advantage that the migrator might communicate its changes to the non-migrator even after the IP address change occurs. In addition, out-of-band communication might carry information pertaining to multiple TCP sessions concurrently.  show formats for exemplary control messages for the migrator and non-migrator that may be exchanged through UDP channel . A common header is used in all control messages, which might conform to a UDP format having non-zero checksum.",{"@attributes":{"id":"p-0047","num":"0046"},"figref":["FIG. 5","FIG. 5"]},"The registration process begins with the migrator sending a Registration Request control message indicating its capabilities to the non-migrator. After authentication and validation, the non-migrator responds with the Registration Reply control message with the appropriate reply code set which indicates the status of the request. The \u201cidentifier cookie\u201d field is used to uniquely identify a node. Many methods by which this cookie can be generated are known in the art. For example, cookie generation methods used in SCTP or TCP (e.g., SYN cookie generation) may be employed. Typically, the cookie is a function of an invariant that identifies the node. For example, since the IP address is continuously changing, a fully qualified domain name with a one-way hash function applied to the domain name yields a unique 48-bit entry cookie.","The Replay Protection ID field, constructed by the migrator, is used for matching the registration requests and reply messages to thwart playback\/replay attacks. A replay attack is an attack on a security protocol using replay of messages from a different context into the original context, thereby fooling the honest participant(s) into believing they have successfully completed the protocol run. The registration reply message from the non-migrator sets this field to a value computed based on the Replay Protection ID field received in the request message and the style of the replay protection mechanism used (e.g., timestamp or nonces (random values) given by the node's security association).",{"@attributes":{"id":"p-0050","num":"0049"},"figref":["FIG. 6","FIG. 6"]},"The authentication mechanism employed by the exemplary STEM system might be similar to that used in Mobile IP. Each node supports a security association indexed by the opaque security parameter index (SPI) and the identifier cookie. The SPI within the authentication extension header defines the security context which is used to compute the authentication value and is used by a receiver to check that value. The receiver selects the authentication algorithm (e.g. cipher algorithms HMAC-MD5 (Hashed Message Authentication Code-Message Digest version 5) and SHA (Secure Hash Algorithm)), algorithm mode (e.g., prefix+suffix) and the secret (shared key or public\/private key pair) used in computing the authentication based on this SPI. The authentication value computed protects the UDP channel packet's payload (Registration Request\/Reply control messages), other extensions (Migrate Request\/Reply control messages) and the initial part of the packet header (type, length, and the SPI).",{"@attributes":{"id":"p-0052","num":"0051"},"figref":["FIG. 7","FIG. 7"]},"The migration process, as described above, involves exchanging migration request\/reply control messages between the peers. In addition to the common header and the optional authentication header, the control message includes one or more migration headers. Each migration header contains information on mapping the old 5-tuple to a new 5-tuple, for one or many sessions between the peers. Each bit in the \u201cprotocol flags\u201d field indicates a predefined protocol. More than one bit might be sent simultaneously to indicate migration of multiple protocols of interest. Setting the field to a null value indicates migration for all protocols. The \u201cOld IP\u201d and \u201cNew IP\u201d fields provide the specified mapping from the old IP address to the new IP address of the migrating endpoint, while the \u201cOld Port\u201d and \u201cNew Port\u201d fields provide the equivalent mappings for the ports used in each session. As in the \u201cProtocol ID flags\u201d field, the port fields might also be set to a null value to indicate that the migrator desires to migrate all sessions between the two endpoints, such as when the mobile node moves across IP subnets and the mobile node desires to migrate all open sessions simultaneously.","In addition to messages in the out-of-band channel described with respect to , , and , additional out-of-band messages may be employed for specific applications of the STEM system. Since the STEM system may be employed for host mobility, messages for connection handoff and location management might be employed. Such messages may contain data such as location, fixed-endpoint, signal-to-noise ratio (SNR), connection quality, or similar information, collectively termed \u201copaque data\u201d.  shows an exemplary format of a STEM system control message extension header for opaque data. In , \u201cType\u201d identifies the packet as an opaque header type, \u201cLength\u201d identifies the length of the \u201cSub-Type\u201d and \u201cOpaque Data\u201d fields, \u201cSub-Type\u201d indicates the type of update information included in the opaque data (e.g., location update information), \u201cFlags\/Codes\u201d are flags or codes used to facilitate opaque data exchange, and \u201cOpaque Data\u201d is the variable-length opaque data of the packet.","The present invention may allow for the following advantages. Endpoints operating in accordance with one or more embodiments of the STEM system neither break the end-to-end TCP connection nor assign any code\/proxy in the communication path between the endpoints. No new code is added in the data path, and the application is not tricked into believing that the connection still exists. One or more embodiments of the STEM system migrate the same TCP connection over to the new address or new point of attachment (i.e., the endpoint TCP state machine continues to be in an \u201cESTABLISHED\u201d state during the migration process).","While the present invention has been described with respect to a packet network operating in accordance with a TCP-IP communication process, the present invention is not so limited. One skilled in the art may readily extend the teachings herein to other packet networks in which one node transfers it's connection to another node. In addition, the present invention may be preferred for use in wireless, radio, cellular or other non-wired applications (collectively termed \u201cwireless\u201d applications), but the present invention is not so limited and may be employed in wired or optical networks supporting packet-based communications.","The present invention can be embodied in the form of methods and apparatuses for practicing those methods. The present invention can also be embodied in the form of program code embodied in tangible media, such as floppy diskettes, CD-ROMs, hard drives, or any other machine-readable storage medium, wherein, when the program code is loaded into and executed by a machine, such as a computer, the machine becomes an apparatus for practicing the invention. The present invention can also be embodied in the form of program code, for example, whether stored in a storage medium, loaded into and\/or executed by a machine, or transmitted over some transmission medium, such as over electrical wiring or cabling, through fiber optics, or via electromagnetic radiation, wherein, when the program code is loaded into and executed by a machine, such as a computer, the machine becomes an apparatus for practicing the invention. When implemented on a general-purpose processor, the program code segments combine with the processor to provide a unique device that operates analogously to specific logic circuits.","It will be further understood that various changes in the details, materials, and arrangements of the parts which have been described and illustrated in order to explain the nature of this invention may be made by those skilled in the art without departing from the principle and scope of the invention as expressed in the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Other aspects, features, and advantages of the present invention will become more fully apparent from the following detailed description, the appended claims, and the accompanying drawings in which:",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 4","FIG. 2"]},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
