---
title: Method and system of controlling a context menu
abstract: An embodiment of the invention, for controlling a context menu, used with a Web page, wherein the Web page is divided into regions, can comprise downloading additional menu items that are not part of the context menu prior to download, and monitoring for when a user calls for a context menu. Upon detecting a context menu call, it is determined what region was selected by the user, and at least one of the additional menu items is made available to the user as part of the context menu interface. At least one of the additional menu items is chosen based on the region selected by the user.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07721228&OS=07721228&RS=07721228
owner: Yahoo! Inc.
number: 07721228
owner_city: Sunnyvale
owner_country: US
publication_date: 20040318
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF EXEMPLARY EMBODIMENTS"],"p":["This application claims the benefit of U.S. Provisional Application Ser. No. 60\/493,029, filed Aug. 5, 2003, entitled METHOD AND SYSTEM OF CONTROLLING A CONTEXT MENU, which is hereby incorporated herein by reference.","1. Field of the Invention","The present invention is directed to computer interfaces and, more particularly, to a method and system of controlling a context menu.","2. Description of Related Art","When accessing the Internet (i.e., the worldwide Web, the Web, etc.), an Internet user typically executes, via a computer, a browser software program such as, for example, Netscape Navigator\u2122 or Microsoft Internet Explorer\u2122. The browser program (i.e., a browser) establishes a link to the Internet (via a modem and an Internet Service Provider (ISP), for example) and also provides a textual and graphical user interface (i.e., an application window) and a window within the application window for displaying Internet content (i.e., a browser window).","While using the browser program, a user is able to call up a context menu, e.g., by clicking on the right mouse button or activating a context menu key. The context menu is comprised of a list of items that can be chosen, typically, to perform different browser functions. Different context menus are displayed depending on what was clicked on and\/or selected by the user in the browser program. The context menu gives a user quick access to browser functions that are related to the element that was clicked, making Internet navigation more convenient. For these reasons, it is often desirable to insert additional menu items to a context menu that add functionality to the browser program.","Current browser programs allow an application to add text, and to associate handlers with the text, in context menus, by modifying registry settings. This method of modifying context menus, however, has several shortcomings. One such shortcoming is that, with this method, the application has no control over the order and position of the additional items relative to standard or other menu items in the context menu. Another shortcoming of current context menu modification techniques is that they offer the same menu items regardless of the user using the browser, and regardless of the country, etc., in which the user is located during use of the browser. Still another shortcoming is that updating or changing context menu items requires the user to install a new application at the user computer. As such, a need exists for an improved system and method of controlling a context menu.","The invention satisfies these and other needs, as will be apparent from the teachings herein. An embodiment of the invention, for controlling a context menu, can comprise downloading additional menu items that are not part of the context menu prior to download, and monitoring for when a user calls for a context menu. Upon detecting a context menu call, it is determined what region was selected by the user, and at least one of the additional menu items is made available to the user as part of the context menu interface.","Another embodiment of the invention is directed to a method of controlling a context menu provided by a company, used with a Web page. The method comprises downloading additional menu items that are not part of the context menu prior to download, and monitoring, via a client-side module, for when a user calls for a context menu. Upon detecting a context menu call, at least one of the additional menu items is made available to the user as part of the context menu interface, and the placement of the additional menu items is determined by the client-side module.","Another embodiment of the invention is directed to a method of controlling a context menu, used with a Web page, and comprises downloading additional menu items and menu icons, via a client-side module, that are not part of the context menu prior to download, and monitoring for when a user calls for a context menu. Upon detecting a context menu call, at least one of the additional menu items is made available to the user as part of the context menu interface, and at least one of the icons are placed adjacent to at least one of the additional menu items.","Other objects and features of the present invention will become apparent from the following detailed description, considered in conjunction with the accompanying drawing figures. It is understood, however, that the drawings are designed solely for the purpose of illustration and not as a definition of the limits of the invention, for which reference should be made to the appended claims.","There will now be shown and described in connection with the attached drawing figures several exemplary embodiments of a system and method of controlling a context menu.","With reference to , there is shown a block diagram of a system  implemented in accordance with certain embodiments of the invention. A computer  is connected to the Internet . Computer  comprises an internal bus  that facilitates communication of information (i.e., digital data) between and among the various devices of the computer  and that also facilitates communication between the computer and external devices and systems via a communication interface . A processor  coupled to the bus  processes information within the computer . The computer  also includes a memory  such as, for example, Random Access Memory (RAM) and\/or other equivalent dynamic memory storage devices, coupled to bus  for receiving and storing instructions communicated from the processor . Memory  may also be used to temporarily store variable or other intermediate information while the processor  executes instructions. Read-Only-Memory (ROM)  is also coupled to the bus  for storing static data and instructions for use by the processor .","Various input and output devices are provided as part of computer , including, by way of non-limiting example, a display  (e.g., cathode ray tube (CRT), liquid crystal display (LCD), etc.), an input device  such as a keyboard, and a cursor control device  such as a mouse, or trackball, for example. A data storage device  such as, for example, a magnetic disk drive and magnetic disk, a CD-ROM drive and CD-ROM, or other equivalent devices and data storage mediums, is coupled to the bus  for communication with the processor , main memory , and communication interface . The storage device  preferably has an operating system  and an Internet browser software program  (i.e., a browser) stored thereon. As will be discussed in greater detail below, a client-side module  may also be stored on the data storage device .","The computer  may communicatively connect to the Internet  via the communication interface  over one or more transmission media including, but not limited to, coaxial cable, copper wires, and fiber optical cables. Communication between the computer  and the Internet  may also be via a wireless or cellular interface. The communication interface  facilitates two-way communication between the computer  and another electronic device or system, e.g., a server computer (not shown) provided by a content provider , .","An Internet user (not shown) using the computer  may gain access to the Internet  by causing the browser  to execute, thereby opening a communication link between the communication interface  of the computer  and an Internet site  of content provider , via an Internet Service Provider (ISP) . Internet content is communicated by the content provider  to the computer  for display by browser . Alternatively, a content provider ,  may also be and ISP .","In alternative embodiments, computer  may be a desktop or notebook computer, PDA, hand held device, or wireless phone (with graphics capability), or any other device now known or hereafter developed that is capable of performing the functions as described herein.","In accordance with an embodiment of the invention, a first Internet content provider  may provide an Internet user with access to a program  for controlling the browser . When executed by the user, the controlling program  downloads or creates a client-side module  such as, for example, a Dynamic Link Library (DLL), on the data storage device  of the Internet user's computer . The client-side module  preferably includes ActiveX control or Plug-in functionality. Thereafter, when the Internet user accesses the Internet using the browser , the browser  opens the client-side module  and preferably automatically (or otherwise) establishes a connection to the content provider's Internet site . The content provider, in response to the connection established by the browser , loads information and\/or functional data into a shell operating within the browser and created by the client-side module . For example, if the user has an account with the content provider , customized information and\/or functionality may be loaded into the client-side module . If the user does not have an account, more generalized (e.g., guest) information and\/or functionality may be loaded.","In certain embodiments, the client-side module  essentially opens a shell (or a plurality of shells) within the browser  that contains the ActiveX control or Plug-in code that may control, i.e., add, remove, and\/or modify, the Internet browser . When loaded with the ActiveX control or Plug-in, the client-side module  preferably contains functions, objects, data, and other software, referred to generally herein as information, that may be used to control the browser . The present embodiment ensures that the client-side module  (and shell) does not close when the Internet user moves, for example, from Internet site  (having a Web page ) to Internet site  (having Web page ). Thus, the information and\/or functionality provided via the ActiveX control or Plug-in is not lost when the Internet user disconnects from the Internet site that loaded the ActiveX control or Plug-in, and connects to another Internet site. In alternate embodiments the client-side module  may operate \u201cbehind\u201d the browser, and appear invisible to the user until a context menu is called. Still in other embodiments, client-side module  may be located at a remote location from the Internet user.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 2","b":["200","200","205","174","120","174","126"]},"Next, in step , the client-side module  receives data from the predetermined Internet site , the data including descriptions of context menu items. In one exemplary example, wherein the method of controlling a context menu is implemented with a client-side module  for a browser toolbar, the context menu item descriptions are received by the client in the same feed as the regular buttons of the toolbar. The description can include, for example, types, URLs, tiles, mnemonic keys and start positions.","Processing proceeds from step  to step , where the client-side module  determines when the browser  has finished loading a Web page. This may be done, in one exemplary embodiment, by coordinating events on the Web browser control so that the Web browser notifies the client-side module  when different events happen. For example, when a Web page is complete, the client-side module  will receive a DISPID_DOCUMENTCOMPLETE event.","Returning to the description of method , in step , the client-side module  monitors for context menu events. In one exemplary embodiment, after a Web page is finished loading, the client-side module  retrieves the IHTMLDocument2 interface for the page. Using an IHTMLDocument2 pointer, the client-side module  can monitor events that are related to the HTML document. In particular, the client-side module  looks for the event called DISPID_HTMLDOCUMENTEVENTS2_ONCONTEXTMENU, which is initiated, or in the computer programming vernacular, \u201cfired\u201d when the user clicks or activates the right mouse button (or other appropriate selector) when the cursor is positioned in the browser window.","Next, the client-side module  determines if a context menu event occurred, in step . If no context menu event occurs, processing returns to step , where the client-side module  continues to monitor for context menu events. Returning to decision step , if the client-side module  determines that a context menu event has occurred, e.g., a DISPID_HTMLDOCUMENTEVENTS2_ONCONTEXTMENU event occurs, processing proceeds to step .","In step , the client-side module  prepares the browser window to view and possibly modify the events received by the browser window related to the context menu. In a certain embodiment, when the client-side module  detects a DISPID_HTMLDOCUMENTEVENTS2_ONCONTEXTMENU event, the client-side module , subclasses the browser window. Subclassing the browser window allows the client-side module  to view the events received by the browser window. Subclassing may be performed, for example, by using a CContainedWindow object that directs messages to the client-side module . To determine which window the client-side module  will subclass, the client-side module  walks down the window hierarchy starting at the top level browser window looking for a window with the classname of \u201cInternet Explorer_Server.\u201d Once identified, that window will be subclassed. Browser window subclassing of this type is described in further detail in U.S. patent application Ser. No. 09\/429,585, filed Oct. 28, 1999, and entitled \u201cA Method Of Controlling An Internet Browser Interface And A Controllable Browser Interface,\u201d the contents of which are hereby incorporated by reference herein.","Returning to the description of method , in step , the client-side module  determines what element on the Web page the client selected, and what text (if any) was highlighted when the client called for, or activated, the context menu. Step  is described in greater detail below with respect to method  and with reference to . Referring back to , after step , the client-side module  will have obtained information related to the selected element, including the type of the element, which may be a combination of at least an anchor (e.g., a clickable hyperlink), an object (e.g., an ActiveX control embedded on the Web page), an image (e.g., a picture embedded on the page), and text; the URL that was selected, if any; and what text was selected (or highlighted) at the time, if any. With the element information, selected text and having prepared the browser window in step , processing proceeds to step .","In step , the client-side module  monitors events before they are processed by the browser window. In one exemplary embodiment, the client-side module  looks for messages including the messages WM_INITMENU, WM_EXITMENULOOP, WM_MENUCHAR, WM_MENUSELECT, WM_MEASUREITEM, and WM_DRAWITEM.","When a message indicating the context menu is about to be displayed is received by the client-side module , processing proceeds from monitoring step  to step , where the client-side module  adds menu items to the context menu based upon what element, if any, the client selected and what text, if any, was selected. In one exemplary embodiment, a WM_INITMENU message indicates that a context menu is about to be displayed. When the client-side module  receives a WM_INITMENU message, the client-side module  identifies the type of the element that was selected so that the client-side module  can determine where in the context menu to place the additional menu items. In certain embodiments, the starting position for each type of element is predetermined and is included in the context menu item description received from the predetermined Internet site. If an element has more than one type, the order of precedence is Anchor, Image, Text (e.g., if type is Anchor and Image, the client-side module  starts at the Anchor starting position). In alternate embodiments, different orders of precedence, or no particular order of precedence, may be employed. Once the client-side module  determines the starting position, the client-side module  adds menu items to the context menu using, in certain embodiments, Windows Application Programming Interfaces (APIs). If there were one or more mnemonic characters in the received context menu descriptions, the client-side module  stores the mnemonic characters when the client-side module  adds the menu item. Furthermore, the additional or original context menu items can also include submenus. For example, when a user floats a pointer over and\/or selects the additional or original context menu item, a second context menu, giving a user additional menu items, can be created. In addition, alternatively, an item on the second context menu can also lead to a third context menu, and so on. Such submenus could be employed to help organize related items.","When a message indicating the context menu is dismissed is received, e.g., the client chooses a menu item or clicks somewhere outside the context menu, processing proceeds from step  to step , where the client-side module  removes the added menu items from the context menu. In a certain embodiment, a WM_EXITMENULOOP message indicates that a context menu is dismissed. When the client-side module  receives a WM_EXITMENULOOP message, the client-side module  removes the added context menu items.","In one exemplary embodiment if the client-side module  receives a WM_MENUCHAR message, this would indicate that the client had hit, or depressed, a keyboard key while the context menu was displayed. In this case, the client-side module  compares the key that was hit to the mnemonic keys (with the comparison being case insensitive) of the context menu items that were added. If there is a match, the context menu is dismissed, and a WM_MENUSELECT message is sent to the client-side module  with values that indicate to the client-side module  that the context menu was dismissed.","Returning to the description of method , processing proceeds from step  to decision step . In step , the client-side module  determines if an item was selected. In one exemplary embodiment, a WM_MENUSELECT message indicates that a user either hit a mnemonic key corresponding to a menu item or made a selection with the mouse. A WM_MENUSELECT message can also indicate when a user drags the mouse to point at a menu item, e.g., so that the menu item can be highlighted.","If the client-side module  determines that a selection was made, then processing proceeds from step  to step , where the selection is processed. When a WM_MENUSELECT message is received with a parameter indicating that the context menu has been dismissed, and the user chose a context menu item either by mouse or by keystroke (or otherwise), then a selection was made and it is processed. In one embodiment, the client-side module  looks at the context menu items description for the data that corresponds to the item selected. From this data, the client-side module  substitutes the default URL with data that is specific to the current Web page, such as the URL or text selection. Once the information is substituted, it is processed.","Returning to decision step , if it is determined that a context menu item was not selected, processing proceeds to step . In step , the client-side module  determines if the browser is still active. If the browser is active, processing returns to step  and the client-side module  monitors for context menu events. If, on the other hand, the client-side module  determines that the browser is no longer active, processing of method  is terminated.","Turning to , with continued reference to , there is shown an exemplary embodiment of the method , for determining what element the user selected and what text was selected when the user called for the context menu. Processing of method  begins at step , where the client-side module  identifies the element on the Web page that was selected by the user. This element is considered to be the source element. In an embodiment, the client-side module  can identify the source element by using the IHTMLEventObj pointer that corresponds to the selection (e.g., click), in question. This pointer contains information about the click event, including what HTML element was selected (clicked on). Processing then proceeds from step  to step .","In step , the client-side module  determines if the current element is valid. In certain embodiments, the client-side module  determines if the current element is an Anchor, Object, or Image by using ATL smart pointer CComQIPtr<Class>. For example, to test the element as an ANCHOR, the client-side module  can use the following call:\n\n","In step , if the client-side module  determines the type of the current element is not of interest, processing proceeds to step , where the client-side module  walks up the Web page (e.g., HTML document), structure and identifies the next parent element, i.e., the preceding element. Processing proceeds from step  to decision step , where the client-side module  determines if the current element is valid. If the current element is valid, processing proceeds from step  to step . In step , if the client-side module  determines the type of the current element is a type of interest, proceeding proceeds from step  to step .","In step  the client-side module  determines if the current element is an image. If the client-side module  determines that the current element is not an image processing proceeds to step , where the client-side module  saves the element, including related information (e.g., the type of the element and the associated URL). From step , processing returns to step , where the next parent is identified. Steps  and  are repeated as described above. In step , if the client-side module  determines the current element is an image, processing proceeds to step .","In step , the client-side module  determines if the image is an image map. As is known to those skilled in the art, an image map is an image that is subdivided into clickable areas that can each map to different URLs when clicked. The URL can be a bookmark into the current page, or a link to another Web page. In certain embodiments, the client-side module  looks at the \u201cuseMap\u201d property of the image element. If the value of the property is blank, e.g., \u201c \u201d, the image is not an image map. If the \u201cuseMap\u201d property of the image is a URL, then the image is an image map. Returning to step , if the client-side module  determines the image is not an image map, processing proceeds to step , where the current element is saved. From step , processing proceeds to step , where the next parent element is identified. Steps , , and  are repeated as described above.","Returning to step , if the client-side module  determines the image is an image map, processing proceeds to step , where the client-side module  obtains the data related to the image map. In one exemplary embodiment, the image map data is stored as a set of coordinates and URLs, e.g.:",{"@attributes":{"id":"p-0051","num":"0051"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<MAP NAME=\u201cmap1\u201d>"},{"entry":"<AREA NAME=\u201carea1\u201d COORDS=\u201c0,0,99,100\u201d"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"HREF=\u201chttp:\/\/www.yahoo.com\/\u201d TARGET=\u201cframe1\u201d>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"<AREA NAME=\u201carea2\u201d COORDS=\u201c100, 0,199, 100\u201d"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"HREF=\u201chttp:\/\/sports.yahoo.com\/\u201d TARGET=\u201cframe1\u201d>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"<AREA NAME=\u201carea3\u201d COORDS=\u201c200,0,299,100\u201d"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"HREF=\u201chttp:\/\/weather.yahoo.com\/\u201d TARGET=\u201cframe1\u201d>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"<AREA NAME=\u201carea4\u201d COORDS=\u201c300,0,400,100\u201d"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"HREF=\u201chttp:\/\/companion.yahoo.com\/\u201d TARGET=\u201cframe1\u201d>"]},{"entry":[{},"<\/MAP>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The COORDS describe the bounding rectangle of that map area and the HREF is the URL that the browser will navigate to when the user clicks in the described area. This image map information is stored for later use.","Returning to the description of method , processing proceeds from step  to step . In step , the client-side module  determines what part of the map the user selected, (clicked on). In one embodiment, the client-side module  determines what part of the map a user clicked on by first calling get_all() on the IHTMLDocument2 to get a collection of all HTML elements on the page. Then, the client-side module  finds the element with a name that is the name of the map the image is using. Then the client-side module  determines the offset x,y of the user's click relative to the upper-left corner of the source element, i.e., the image element. Then the client-side module  gets a collection of all AREA elements contained in the MAP. For each AREA element in the collection, the client-side module  determines if the X,Y (or coordinates) of the user's click lies within the bounding rectangle described by the AREA's COORDS. Once the client-side module  determines which AREA the user clicked on, the client-side module  can get the the HREF property.","Returning to the description of method , processing proceeds from step  to step , where the element, including related information such as type and URL, is saved for later use. Processing proceeds from step  to step , where the next parent element is identified. Then, processing proceeds from step  to step .","In step , the client-side module  determines that the current element is not valid if there are no more parent elements. In this case, processing proceeds from step  to step . In step , the client-side module  examines the Web page selection indicator to determine if text is selected. In one embodiment, the client-side module  determines if text is selected by getting the IHTMLSelectionObject pointer from the document. If it exists and has the type \u201ctext\u201d, the text has been selected.","Returning to the description of method , processing than proceeds from step  to step . In step , if the client-side module  determines that text is selected, processing proceeds to step . In step , the selected text is saved and the state that the text was selected is also saved. In an embodiment, the client-side module  saves the selected text by creating an IHTMLTxtRange for the selection. Then, the client-side module  calls get_text( ) on the range to obtain the actual text that is selected. Next, the text and the state that there is TEXT selected are saved for later use. Returning to decision step , if there is no text selected the method  returns to method  at step .","To further illustrate the method  of determining what element is selected by a user, five examples are described below in relation to an exemplary HTML element structure , illustrated in . The HTML code (with reference numbers added) that is represented by the structure  is as follows:\n\n","The first example illustrates a case when a user clicks on a text link. Line  of the exemplary HTML code shown above is a text link, and is represented in  by node . The element that was selected (clicked on) by the user, i.e., the source element, is an anchor, so it is marked as an anchor and the client-side module  walks up the HTML structure to the next parent element. The next parent element is the \u201cbody\u201d element, node , which, in the present embodiment, is not an element type of interest. Therefore, it is ignored and the next parent element is identified. The next parent element is NULL, so the client-side module  proceeds to check if any text was selected. The type clicked on by the user is determined to be ANCHOR.","The second example illustrates the case when a user clicks on an image that is a link. Line  of the exemplary HTML code shown above is an image that is a link. It is represented in  by nodes  and . The element that was clicked on by the user, i.e., the source element, is an image, node , so it is marked as an image and the client-side module  walks up the HTML structure to the next parent element. The image is not an image map so no extra steps, with respect to the image, are taken. The next parent element is an anchor, node , so it is marked as anchor and the next parent element is identified. The next parent element is the \u201cbody\u201d element, node , which is not an element type of interest. Therefore it is ignored and the next parent element is identified. The next parent element is NULL, so the client-side module  proceeds to check if any text was selected. The type clicked on by the user is determined to be ANCHOR and IMAGE.","The third example illustrates the case when a user clicks on a link with a green background. Lines 9 and 10 of the exemplary HTML code shown above is a link with a green background. It is represented in  by nodes  and . The element that was clicked on by the user, i.e., the source element, is an anchor, node , so it is marked as an anchor and the client-side module  walks up the HTML structure to the next parent element. The next four parent elements are \u201ctd\u201d, node , \u201ctr\u201d, node , \u201ctable\u201d, node , and \u201cbody\u201d, node . None of these are element types of interest. Therefore they are ignored and the next parent element is identified. The next parent element is NULL, so the client-side module  proceeds to check if any text was selected. The type clicked on by the user is determined to be ANCHOR.","The fourth example illustrates the case when a user clicks on a link with a cyan background. Lines 12 and 18 of the exemplary HTML code shown above is a link with a cyan background. It is represented in  by nodes  to . The element that was clicked on by the user, i.e., the source element, is an anchor, node , so it is marked as an anchor and the client-side module  walks up the HTML structure to the next parent element. The next six parent elements are \u201cfont\u201d, node , span, node , \u201ctd\u201d, node , \u201ctr\u201d, node , \u201ctable\u201d, node , and \u201cbody\u201d, node . None of these are element types of interest. Therefore they are ignored and the next parent element is identified. The next parent element is NULL, so the client-side module  proceeds to check if any text was selected. The type clicked on by the user is determined to be ANCHOR.","The fifth example illustrates the case when a user clicks on text with a red background. Lines 20 and 22 of the exemplary HTML code shown above is text with a red background. It is represented in  by nodes  to . The element that was clicked on by the user, i.e., the source element, is \u201ctd\u201d, node , this is not an element of interest so it is ignored. The next three parent elements are \u201ctr\u201d, node , \u201ctable\u201d, node , and \u201cbody\u201d, node . None of these are element types of interest. Therefore they are ignored and the next parent element is identified. The next parent element is NULL, so the client-side module  proceeds to determine if any text was selected. The type clicked on by the user is determined to be NONE.","In alternate embodiments, various other schemes for determining which types of elements are of interest and which are to be ignored may be implemented.",{"@attributes":{"id":"p-0064","num":"0089"},"figref":"FIG. 5","b":["500","174","174","505","510","174","515","515","122","126","174","150"]},"Once the client-side module is obtained by the user, processing returns to step  where the client-side module  connects with a predetermined Internet site. The predetermined Internet site can be Internet site , from which client-side module  is downloaded, or alternatively, the predetermined Internet site can be another site, e.g., Internet site . Processing proceeds to step  where the Internet site  monitors for requests from the client. When a request for menu descriptions is received, processing proceeds to step  where the Internet site transmits the description of the menu items to the client. Then the Internet site  returns to step , where it monitors for requests from the client.","An embodiment of the invention may be provided as a feature of a method of controlling an Internet browser interface displayable by an Internet browser on a display of a computer, and enabling a user of the computer and Internet browser to access and navigate the Internet and to receive and display on the computer display one or more Web pages from one or more Internet sites, including the display of a Web page from a predetermined Internet site, the Internet browser having at least one Internet browser toolbar having at least one toolbar button providing a predetermined functionality to the user of the computer and Internet browser, the method can comprise, providing, at the predetermined Internet site, access to a program for controlling the Internet browser interface and making available for downloading by the predetermined Internet site, a file for causing the display of a persistent user toolbar adjacent to said Internet browser toolbar so as to create the visual impression that the user toolbar is an integrated part of the Internet browser, the user toolbar making additional functionality that is not part of the Internet browser prior to download available to the user after download as part of the Internet browser interface, such that once the user toolbar is displayed the user toolbar remains displayed and said additional functionality remains available to the user regardless of a subsequent Internet site to which the Internet browser is caused to navigate after download. An Internet user may customize the browser so that each time the user accesses the Internet using the browser, user-defined information and\/or functionality will be displayed with the browser interface, e.g., as a toolbar. The toolbar may include bookmarks, address and phone books, personal financial information, personalized news, and various functionality such as is available via ActiveX control and Plug-ins. In addition, if an Internet user has an account with a content provider, that user's specific account information (e.g., investment portfolio, news headlines, bookmarks, address book, additional context menu items etc.) may be dynamically displayed by the browser.","In an embodiment, user specific account information may include personalized context menu items. In such an embodiment, a user can choose which context menu items he or she desires to have, e.g., from a list of provided items. Those preferences can be stored with the content provider and\/or locally at the client computer.","In addition, users with accounts can set up and use their additional context menu items in a first location and then have the same context menu settings at a second location without having to re-enter their personal settings. This can be done by storing their context menu settings at the content provider. The personal user settings can then be retrieved from any location the user wants to his or her personalized context menus.","In one exemplary example, wherein the method of controlling a context menu is implemented with a client-side module  for a browser toolbar, the description of the menu items are sent down, as a button, in the same feed from the Internet site  as the regular buttons for toolbar. This button \u201cqs\u201d, which stands for QuickSearch, is marked as invisible so that the normal toolbar bar does not render it. Each menu item is a sub-item of the \u201cqs\u201d button and each item has certain pieces of information, e.g., type, URL, title, and optionally icons, which are downloaded in the background like other toolbar icons, mnemonic keys, a default URL to use if the user is not signed in and starting positions for different click types.","Also optionally sent down in the feed is a value indicating that the context menu feature should be disabled. Using this value, it is possible to turn this feature off, e.g., if there are complications or problems while implementing control of the context menu.","In addition, by having the additional context menu items described in the toolbar feed, different choices for different countries or users can be implemented. Furthermore, it is possible to dynamically add new items without requiring the user to download a new client-side module . The description of the \u201cqs\u201d button is stored on the client computer  using the caching mechanisms of the client-side module , so the user only has to download a new context menu item description if the items have changed.","An embodiment can also be implemented with information stored on the user (or client) computer. For example, context menu items can be stored on the client computer. When a user calls for a context menu, these stored context menu items are added to the displayed context menu. In addition, information stored on a client computer by other applications may be used to add additional features to the invention. For example, information such as partner code, cobrands and the location at which a user downloads the invention, may be stored on a client's computer. This stored information can be used to determine the contents of the context menu. In an embodiment, a registry would be examined to determine which context menu items to use. In another example, one menu item can be, \u201cemail this link to . . . .\u201d Floating a mouse pointer over and\/or selecting this item, creates a submenu including addresses from another application, e.g., Outlook. Additional features can also be implemented in accordance with the invention by adding additional computer code, e.g., plugins.",{"@attributes":{"id":"p-0073","num":"0098"},"figref":["FIGS. 6-9","FIG. 6"],"b":["600","600","600","605","600","670","605","600","615","610","615","610","615","610"]},"For example, the toolbar windows  provided at the top (see ) of the application window  define four toolbars , , , , which may include a variety of interface controls such as, for example, pull-down menus, functional buttons (e.g., stop, back, forward, home, etc.), and a combination of functional buttons and windows (e.g., a search button and window). The upper most toolbar  provides a plurality of pull-down menus; the second toolbar from the top  provides a plurality of functional buttons; the third toolbar from the top  provides a pull-down menu and a window, e.g., a URL address window; the bottom most toolbar  is implemented by the client-side module  and provides added functionality to the browser such as a search field and the context menu of the present invention. In an embodiment of the invention the context menu items descriptions may be included with the bottom most toolbar  as an invisible button. A browser window  is also provided as part of the browser  within which content from an Internet content provider  (see ) may be displayed.","A user can call a context menu by, for example, right clicking on a mouse button. In , a user has right clicked while the pointer was on the background of the Web page, calling context menu . In this exemplary embodiment, the invention adds context menu items  based on the user clicking the background. The items were placed as the second set of menu items, and include icons and mnemonic keys. The context menu items include, \u201cAdd This Page To Yahoo! Bookmarks,\u201d. \u201cIM this Page To Friend\u201d, and \u201cEmail This Page to Friend\u201d. As mentioned above, these menu items may be modified through the context menu items description.","In , a user has right clicked while the pointer was on the text link \u201cYahoo!\u201d , calling context menu . In this exemplary embodiment, the embodiment adds context menu items  based on the user clicking \u201cYahoo!\u201d . The items were placed as the second set of menu items, and include icons and mnemonic keys. The context menu items include, \u201cAdd This Link To Yahoo! Bookmarks,\u201d \u201cIM this Link To Friend,\u201d and \u201cEmail This Link to Friend.\u201d These context menu items are different from the previous example.","In , a user has right clicked while the pointer was on the image link \u201cYahoo!Companion\u201d , calling context menu . In this exemplary embodiment, the present invention adds context menu items  based on the user clicking \u201cYahoo!Companion\u201d . The items were placed as the second set of menu items, and include icons and mnemonic keys. The context menu items include, \u201cAdd This Link To Yahoo! Bookmarks,\u201d \u201cIM this Link To Friend,\u201d and \u201cEmail This Link to Friend.\u201d","In , a user has right clicked on the background while the text \u201cYahoo!\u201d  was highlighted, calling context menu . In this exemplary embodiment, the present invention adds context menu items  based on the highlighted text and based on the user right clicking on the background. The items were placed as the second set of menu items, and include icons and mnemonic keys. The context menu items include, \u201cSearch the Web for Yahoo!,\u201d \u201cAdd This Page To Yahoo! Bookmarks,\u201d \u201cIM this Page To Friend,\u201d and \u201cEmail This Page to Friend.\u201d If the \u201cYahoo!\u201d  was highlighted and the user right clicked over a link, the context menu items would include \u201cAdd This Link To Yahoo! Bookmarks,\u201d \u201cIM this Link To Friend,\u201d and \u201cEmail This Link to Friend\u201d and \u201cSearch the Web for Yahoo!\u201d (Not Shown).","Alternatively, the methods and system of controlling a context menu of the present invention can be implemented outside of the browser environment. The context menus used with the operating system of a computer and other applications, e.g., Microsoft Office, can be controlled in a similar way. For example, additional menu items can be added to the Windows start menu and the context menu called when a user right clicks or otherwise make a selection on the desktop, or the taskbar. Furthermore, additional menu items may be added to the right click menu used for Microsoft Word.","Thus, while there have been shown and described and pointed out fundamental novel features of the invention as applied to preferred embodiments thereof, it will be understood that various omissions and substitutions and changes in the form and details of the disclosed invention may be made by those skilled in the art without departing from the spirit of the invention. It is the intention, therefore, to be limited only as indicated by the scope of the claims appended hereto."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWING FIGURES","p":["In the drawing figures, which are not to scale, and which are merely illustrative, and wherein like reference numerals depict like elements throughout the several views:",{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 9"}]},"DETDESC":[{},{}]}
