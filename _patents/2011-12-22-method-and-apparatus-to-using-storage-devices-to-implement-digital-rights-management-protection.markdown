---
title: Method and apparatus to using storage devices to implement digital rights management protection
abstract: Embodiments of systems, apparatuses, and methods to securely download digital rights managed content with a client are described. In some embodiments, a system establishes a secure root of trust for the client. In addition, the system establishes a secure tunnel between an agent of the client and a storage system of the client. Furthermore, the system securely downloads the digital rights managed content to the storage system via the secure tunnel and securely provides the digital rights managed content from the storage system to a display.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09419976&OS=09419976&RS=09419976
owner: Intel Corporation
number: 09419976
owner_city: Santa Clara
owner_country: US
publication_date: 20111222
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","FIELD OF INVENTION","BACKGROUND","DETAILED DESCRIPTION","Exemplary Core Architectures, Processors, and Computer Architectures"],"p":["This patent application is a U.S. National Phase Application under 35 U.S.C. \u00a7371 of international Application No. PCT\/US2011\/067034 , filed Dec. 22, 2011 , entitled METHOD AND APPARATUS TO USING STORAGE DEVICES TO IMPLEMENT DIGITAL RIGHTS MANAGEMENT PROTECTION.","The field of invention relates generally to storage devices, and, more specifically, to structure and uses of secure storage.","Today, host side applications (e.g. antivirus software) use an operating system application programming interface (API) to read in data (e.g. malware definition data) from storage to detect malware. Additionally, other storage specific commands can be used to read, write, and otherwise manage stored data. For example, vendor specific commands, SMART Command Transport (SCT), negative logical block addresses (LBA), etc., can be used to process stored data. However these methods can be easily subverted by malware to give wrong information to the caller. In addition, there is no provision for configuring the methods to provide application specific protection. Furthermore, data that is stored in can easily be attacked by malware, or that stored content that is protected by digital rights management (DRM) may be copied or altered. In addition, storage coupled to a computer may offer additional services that are not easily activated in the field.","In the following description, numerous specific details are set forth. However, it is understood that embodiments of the invention may be practiced without these specific details. In other instances, well-known circuits, structures and techniques have not been shown in detail in order not to obscure the understanding of this description.","References in the specification to \u201cone embodiment,\u201d \u201can embodiment,\u201d \u201can example embodiment,\u201d etc., indicate that the embodiment described may include a particular feature, structure, or characteristic, but every embodiment may not necessarily include the particular feature, structure, or characteristic. Moreover, such phrases are not necessarily referring to the same embodiment. Further, when a particular feature, structure, or characteristic is described in connection with an embodiment, it is submitted that it is within the knowledge of one skilled in the art to affect such feature, structure, or characteristic in connection with other embodiments whether or not explicitly described.","Storage Tunnels","As described above, malware can attack stored data and can subvert operating system calls to a storage system. Described below is a system that creates a secure tunnel between an application and a secure storage system that hides the data storage by encrypting the data communicated to the secure storage system and storing data beyond the accessibility of an operating system.  illustrates an example of a system  that includes secure storage . In , computer system  includes storage system , operating system , independent software application , display , and hardware switch . In one embodiment, the computer  is coupled to backend servers , where the backend servers  are used to authorize storage features or to download premium content (e.g., content managed by a digital rights management scheme). In one embodiment, the operating system  is used to control the execution of one or more processes and\/or applications for the computer . Examples of an operating system  is known in the art (Microsoft Windows, Apple Macintosh OS X, etc.) In one embodiment, the operating system  includes a private software developer's kit (SDK) , filesystem , driver stack , and application . In one embodiment, the filesystem  is a filesystem that is known in the art that is used to manage files that are stored in storage . For example and in one embodiment, a filesystem  is a way to organize data in storage  using driver stack . In one embodiment, the driver stack  is a set of driver(s) that is used to operate with storage . The driver stack  may include multiple software layers in the form of drivers that take on different functional roles and act as an overall interface between an application\/process and one or more storage devices.","Application  is an application that runs in the operating system . One example of an application can be e-mail client, word processor, image management, media management, anti-virus, operating system functions, etc., or any other type of application as known in the art. As is known in the art, each application may interact with the storage system  using the filesystem , and driver stack .","In one embodiment, the storage  includes storage firmware , system-on-a-chip (SOC) , memory , and storage area . In one embodiment, the storage can be any type of storage known in the art (solid state drive (SSD), hard disk (HD), flash drive (FD), etc.). In one embodiment, the system-on-a-chip  is a chip that includes a processor and other circuits that are used to support the storage . An example of a SOC  is further described below in  below. In one embodiment, memory  is memory used to temporarily store data. The storage firmware  is firmware that is used to operate and manage the different functions of the storage .","In one embodiment, the storage includes a trusted application programming interface (API)  and a trusted system firmware . In one embodiment, the trusted API  is used by processes executing in the operating system or ISV application  to access the secure storage of  of storage area . In one embodiment, the secure storage  is not visible to the operating system through the filesystem  and driver stack . Instead the secure storage  is accessed using the trusted API . Trusted system firmware  is firmware that is used to manage the secure storage . In this embodiment, the trusted API  is used by local or remote entities to create a tunnel between that entity and the secure storage. A tunnel is used to securely transmit information between an entity and the secure storage. For example one embodiment, the ISV application creates a tunnel B via trusted API  and trusted system firmware  to secure storage .","In one embodiment, the secure storage  is used to store important data (e.g. anti-virus definition files, digital rights managed content, financial data, operating system components etc.), enabling storage features, or securely downloading data outside of the operating system, or any other types of secure storage. In one embodiment, the secure storage  stores data that is invisible to the operating system. For example and in one embodiment, the secure storage  is at storage addresses that are beyond the maximum addressable storage available to the operating system and\/or applications that are accessing the storage  via the filesystem  and driver stack . While in one embodiment, the secure storage  is physically separate from the normal storage , in an alternate embodiment, the secure storage  is a partition of the normal storage .","In one embodiment, the storage area  includes secure storage  and normal storage . In one embodiment, the normal storage  is the storage that is accessed by the operating system  and has the filesystem  defined on top of this normal storage . In this embodiment, the operating system  accesses files and\/or other data in the normal storage  through the driver stack . For example and in one embodiment, application  (or other applications that are operating system) can access files in the normal storage  via the filesystem  and driver stack .","As described above, the data in the secure storage  is not visible to an application except through the trusted API . In one embodiment, the ISV application  accesses the secure storage  using the tunnel B (via the anti-malware kit , private SDK , trusted API , and trusted system firmware ). For example and in one embodiment, the ISV application  is an agent that can securely download a premium content that is managed by digital rights management using the anti-malware kit  and trusted ops . In one embodiment, the trusted ops  are trusted operations with secure storage , such as a trusted read and\/or trusted write. In this embodiment, a trusted read\/write means that the identity of the entity requesting the operation is known and trusted. In another embodiment, application  is an agent that is authorized to securely communicate data with the secure storage  using a tunnel as described below.","As described above, the data stored in the secure storage  is invisible to the operating system  or an application executing in the operating system . Thus, neither the operating system  nor the application  can view, alter, or delete the data stored in secure storage . In one embodiment, this scheme is used to secure data from potential malware that may want to change, alter, or delete the data stored in secure storage .","For example and in one embodiment, data such as the master boot record of the operating system  or other important operating system  components can be stored in the secure storage  and locked such that a potential malware work cannot read, alter, or delete these important operating system components. In another embodiment, important user data such as anti-virus definition data, financial data, etc. can be stored in the secure storage , thus preventing malicious processes (e.g., malware, virus, etc.) from accessing, altering, or deleting the important user data. In one embodiment, the user data is data that is not part of the operating system.","As described above, a tunnel can be formed between an application (e.g., ISV application ) and the secure storage  through private SDK , trusted API , and trusted system firmware . As will be described later, this tunnel can be formed in two ways: (1) through a mailboxing scheme in which logical block addresses are set aside for communication between the application and the storage system, or (2) the tunnel can be formed based on a trusted sends and receives that are supported by the storage system. While in one embodiment, a tunnel B is formed between the secure storage  and an application running on the same computer that includes the secure storage , in another embodiment a tunnel A can be formed between the storage system with a backend server  that is coupled to the computer  across a network. In this embodiment, trusted system firmware  (via trusted API ) creates its own network connection that is used to communicate information with the backend server . For example and in one embodiment, trusted storage firmware  can be used to create a tunnel such that the backend server(s)  can download DRM content to the secure storage  of storage . This is described further in  below.","As described above,  illustrate examples of an agent that communicates information to a secure storage system using a tunnel. In , an authorized agent (that is executing the operating system)  securely communicates with secure storage system  using a mailboxing-based tunnel. In one embodiment, the secure storage system  is a secure storage as described in , block  above. In one embodiment, the agent  is authorized to communicate with secure storage . In one embodiment, the tunnel is based on a mailbox in scheme, in which requested actions of the secure storage system  are written to a dedicated area in the secure storage system , action logical block address (LBA) . The results of the requested actions are communicated using the results LBA , which is a dedicated area of secure storage system . In one embodiment these logical block addresses are beyond the maximum addressable storage. A storage address that is below a maximum storage address can be seen by operating system such as operating system  as described in . Because both of the LBAs  and  are above the maximum address space that is accessible by an operating system, these LBAs (and the data stored at the LBAs) are invisible to the operating system.","In this embodiment, the agent  can access the data or write to the data from these LBAs by using the tunnel . As will be described further below, the action LBA  is used to communicate action requests to the storage system . In one embodiment, these action requests can include write, read, and\/or tunnel configuration commands or other commands as known in the art for accessing or managing data in a storage system. The results of these commands are stored in the results LBA .","For example and in one embodiment, the agent  wishes to write data to the secure storage system . In this embodiment, the agent  writes a write command to the action LBA  and the data the agent wishes to store is written into the results LBA . The secure storage system  processes the command stored in the action LBA  and stores the data in into the location indicated in the action LBA  by redirecting the data being written to results LBA . In another embodiment, the agent  wishes to read data from secure storage system . In this embodiment, the agent  writes the read command into action LBA . The secure storage system  processes the read command and redirects the data to be read as if coming from the result LBA . The agent  reads the data from result LBA  to complete the read command. In one embodiment, the mailboxing based tunnel  can be built upon many different storage protocols (e.g., trusted send\/receive, overloaded write\/read, Common Storage Management Interface (CSMI), etc.). The agent communicating with the secure storage system using a mailboxing tunnel is further described  below.","As described above, the secure storage systems can use a tunnel based on a trusted send messaging system with the agent. In , an agent authorized in an OS  securely communicate with a secure storage system  using a tunnel  based on a trusted send facility. In one embodiment, the tunnel  can be based on the trusted send facility of secure SATA. In this embodiment, the agent in the secure storage system  would negotiate a session key with the secure storage system  that can be used for transmitting the messages back and forth. In one embodiment, the negotiated session key is used to encrypt\/decrypt the data stored in each message transmitted using the tunnel . An agent  communicating information with the secure storage system  using a trusted send type tunnel  is further described in  below.",{"@attributes":{"id":"p-0048","num":"0047"},"figref":["FIGS. 3A and 3B","FIG. 3A"],"b":["302","304","308","308","306","306","306","306","306","306","302","306","302"]},"In one embodiment, the command code B is a code that indicates what type of command is being written to the action LBA . For example and in one embodiment, the command code can be a code that write, read, configure, and\/or some other command code use to indicate another type of action that it would be used between an agent and a storage system for accessing or managing the data stored in the storage system. In one embodiment, the command sequence number C is a number that can be used to identify a specific command message. In one embodiment, the operators D are flags or bits that signal the firmware to take some kind of specific action associated with a given command type. In one embodiment, packet integrity E is data that is used to ensure the integrity of the data written to action A. For example and in one embodiment, the data in packet integrity E can be a checksum or some other form of data that ensures that the data was correctly written to action LBA .","In , the agent authorized in the OS  reads the data from results LBA  to retrieve the results  from an action written to an action LBA. In one embodiment, the results LBA  has fields authorization message A, command B, command sequence C, operators D, and data E. In one embodiment, authentication message A, command code B, command sequence C, and operators D perform the same function as described above in . Furthermore, in one embodiment, data E is used to communicate data that results from the action that was originally written to the action LBA. In another embodiment, the data from the results is retrieved differently (e.g., directly through the secure tunnel, etc.). For example and in one embodiment, data E includes the data that is retrieved from a read. In other embodiments, data E can include other data such as a return code, error code or other type of data that would be communicated as a result of command written to the action LBA.",{"@attributes":{"id":"p-0051","num":"0050"},"figref":["FIG. 4","FIG. 1","FIG. 4"],"b":["400","400","114","400","402","400","400","400","400"]},"At block , method  monitors the action LBA to determine if an action has been written to the action LBA in order to initiate an action with the secure storage system. In one embodiment, an agent writes an action (e.g. to the action LBA  as in  above) to do a read, write, or other type of action with the secure storage system. In one embodiment, method  monitors the action LBA by scanning and analyzing incoming commands for specific bit patterns. At block , method  determines if data is written to the action LBA. If data has been written to the action LBA, at block , method  retrieves the command that was written to the action LBA. In one embodiment, the data written to the action LBA has a data structure such as fields A-E as described above in . Method  processes the retrieved command at block . Processing the retrieved command written to the action LBA is further described in  below. Execution proceeds to block  above. If no data has been written to the action LBA at block , execution proceeds to block  above.",{"@attributes":{"id":"p-0053","num":"0052"},"figref":["FIG. 5","FIG. 5","FIG. 3A"],"b":["500","500","400","410","500","502","500","500","500","500","500"]},"At block , method  determines if the command is a write command. In one embodiment, method  determines the type of command by reviewing the data in the command code field (e.g., command code field C as described in  above). If the command is a write command, at block , method  directs the data that is to be written in the results LBA to the storage location indicated in the command. For example and in one embodiment, the agent wishes to write data to sector  of the secure storage system. In this example, the agent writes a command to the action LBA that data is to be stored at sector . Furthermore, method  decodes the command as a write command to determine that the data to be written to the results LBA is to be written to sector . Method  detects this write to the results LBA and redirects this data being written to the results LBA to sector  of the secure storage system.","If the command is not a write command, at block , method  determines if the command is read command. In one embodiment, method  determines if the command is a read command by interrogating the command code of the command. If so, method  redirects the read from the results LBA to the storage location at block . For example and in one embodiment, if the read command is to read data from sector  of the secure storage system, method  decodes the command to determine that the read is from sector  and also amount of data that is to be read. Method  redirects the incoming read of the results LBA to read the correct amount of data from sector  to the results LBA. In this example, the agent that initiated the read command reads the data from the results LBA and method  redirects this read from the desired sector.","If the command is not a read command, at block , method  determines if the command is a configure command. If this command is a configure command, method  configures the tunnel according to the data in the command. If the command is not a configure tunnel command, at block , method  takes alternative action. In one embodiment, the method  could ignore the command, store an error code in the results LBA indicating the command is not understood, or take another action as known in the art.","As stated above, there are two different ways that the agent and a secure storage system could use a tunnel to communicate information between the agent and the secure storage system. One way, as described above, is based on mailboxing scheme that uses an action and results LBA to securely communicate information between the agent and the secure storage system. This type of scheme can be used by many different storage communication protocols as known in the art (SATA, ATA, e-SATA, Universal Serial Bus (USB), Thunderbolt, PCI, etc.). Another way is to set up a tunnel between an agent in the secure storage using trusted send and receive facility (\u201ctrusted send facility\u201d) of the storage communication protocol. In one embodiment, the agent and the secure storage system use the trusted send facility of the secure SATA protocol to negotiate a session key between the agent and the secure storage system.",{"@attributes":{"id":"p-0058","num":"0057"},"figref":["FIG. 6","FIG. 1","FIG. 6"],"b":["600","114","600","602","600","600","600","600","600"]},"At block , method  receives a message from the agent. In one embodiment, the message includes the authentication data that identifies the message as originating from the agent and includes on authentication credentials such as the session key that can be used to decrypt the data in the message. For example and in one embodiment, the message can include the authentication data such as negotiated session and the data that is encrypted using that key. Furthermore, at block , methods  decrypts the data contained in the message so that method  can further process the received message.","At block , method  determines if the received message is a write message. If so, method  processes the write message at block . In one embodiment, method  processes the write message by determining which data is to be written and where the data is to be written to and writing that data using the location and data to be written from the message. For example and in one embodiment, if the write message indicates that the 100 bytes of data is to be written to sector  of the secure storage system, method  retrieves the 100 bytes of data from the message payload and stores that 100 bytes of data to sector  of the secure storage system. In addition and in one embodiment, method  sends a message back to the agent via the tunnel indicating the results of the write (e.g., success, failure, etc.).","If the received message is not a write message, at block , method  determines if the received message is a read message. If the received message is read message, at block , method  processes the read message. In one embodiment, method  retrieves the location of the read and that the amount of data to be read from that location. For example and in one embodiment, methods  receives a read message that indicates that the 200 bytes of data should be read from sector  of the secure storage system. In this embodiment, method  would read 200 bytes of data from sector . Furthermore, method  sends a message back to the agent with the 200 bytes of data that was read from sector . In this embodiment, method  encrypts the data using the negotiated session key and stores this encrypted data in the message to be sent back to the agent. In addition, method  sends that data back to the agent using the formed message.","If the message received at block  was not a read message, at block , method  determines if that received message is a configure tunnel message. If the received message is a configure tunnel message, at block , method  configures the tunnel according to configuration parameters in the message. In one embodiment, after configuring the tunnel according to the received configuration tunnel message, method  sends a return message back to the agent indicating the success or failure of the command in that message. If the received message is not a configure tunnel message, at block , method  alternative action (e.g., drops the received message, sends a message back indicating the received message is not understood, etc.).","Lockable Storage",{"@attributes":{"id":"p-0063","num":"0062"},"figref":"FIGS. 7-10"},"When in insecure areas, some users may turn off a computer's wireless network card in order to prevent being attacked by malicious hackers nearby. Similarly, with malware on a system, a user may want to be able to open untrusted files while at the same time having personal, sensitive data inaccessible or locked. Thus a \u201cdata safe mode\u201d is useful, such as the ability to have an external switch on your laptop to lockdown key assets on a system (Operating System files, configurable data such as credit card information, passwords and other sensitive private information) or locking down key components of an operating system during boot time.",{"@attributes":{"id":"p-0065","num":"0064"},"figref":["FIG. 7","FIG. 7","FIG. 1"],"b":["700","102","700","702","116","114"]},"For example and in one embodiment, there can be two types of storage, a secure storage and modification locked storage. In one embodiment, the secure storage itself consists of two modes: fixed, always on secure storage that is inaccessible to normal users and hidden via normal methods of storage access (e.g., operating system calls to storage); and there is configurable secure storage in normally addressable ranges of a drive. The configurable secure storage in normally addressable ranges of the drive would be specific LBA ranges that have been configured by the user as to which parts of the drive to protect. In one embodiment, either type of secure storage disallows normal writes and reads with this type of storage whereas, authenticated reads or writes are allowed with the secure storage.","As another example and in another embodiment, for modification locked storage, anyone can read the data in that region, but only an authenticated entity (to the drive, for that region) can modify (e.g., write to) the data in that region. In this embodiment, the lockable storage would be configurable ranges of either secure storage or modification locked storage because the fixed the secure storage is inaccessible to normal users anyways. In a further embodiment and in addition to the locking storage, a physical switch (e.g., hardware switch  for  above) could be employed to make an \u201calways on\u201d secure storage inaccessible even to authenticated users while the switch is on. In one embodiment, locking down secure storage to all others is actually is a useful feature because a lot of malware can attack other, potentially (normally) trusted applications that may have access to the secure store.","In one embodiment, two ways to lock the lockable storage are possible. In one embodiment, the user can initiate the lock by using a switch that is outside the control of the operating system. In this embodiment, this action creates a system interrupt that would be communicated via trusted API  and trusted firmware  to lock the lockable storage . As described above, this could be used to lock important user files such as antivirus data files, financial files, and personal files. The user locking mechanism is further described in  below. In another embodiment, data in the lockable storage can be locked down by the operating system. In one embodiment, the operating system selectively locks different parts of lockable storage during boot time. This embodiment can be used to lock down important operating system data (including master boot record, and other important operating system components) during the computer boot time.",{"@attributes":{"id":"p-0069","num":"0068"},"figref":["FIG. 8","FIG. 8"],"b":["800","804","800"]},"At block , method  sends a signal to the secure storage system to lock the master boot record. In one embodiment, method  locks the sector of the lockable storage that stores the master boot record. By locking the specific sectors that store the master boot record, these sectors (and the master boot record itself) cannot be altered via processes executing in the operating system such as malware. In another embodiment, the boot sequence is based on a user extensible firmware interface (UEFI). In this embodiment, UEFI is another way to boot up a system. UEFI is similar to the MBR-based boot up, but there is more involved. In UEFI, to boot up, there is a boot manager, which boots the system up. Fir example, UEFI boot up uses the a Globally Unique Identification (GUID) Partition Table (GPT) which is similar to a MBR, but it is a different format and rather than being a single sector (e.g., LBA  for MBR), a GPT takes up 34 or 35 sectors at the beginning and 34 or 35 sectors at the end of the drive. In this embodiment, method  would lock the relevant sectors storing the GPT at block .","Method  continues the boot strapping process and selectively locking sectors storing the operating system components, as the operating system components are no longer needed to be written to, at block . In one embodiment, there is a plurality of important operating system components that could be stored in lockable storage and each of these operating system components can be stored in the same or different sector of the lockable storage. The plurality of important operating system components can include the entire operating system or a subset of the operating system. As these operating system components are used and are not needed to be written to, method  locks the sectors associated with the operating system components. In one embodiment, method  locks these sectors by sending a signal to the storage system that certain sectors of the lockable storage need to be locked. In one embodiment, the method  sends the signals via a tunnel as described with reference to  above.","At block , method  determines that the operating system is fully booted and that important operating system components have been locked to prevent further altering. In one embodiment, some or all of the important operating system components are further locked so as to prevent reads. In this embodiment, locking read access to the secure storage can be used to locked read access certain types of keys that the drive stores on the drive (e.g., keys that are loaded into memory (and presumably protected in memory as well) and the operating system does not want to let this key be readable from the drive anymore).","In one embodiment, the lockable storage is locked at the storage level such that any operating system command to override the unalterable status of these of sectors is ignored. In one embodiment, a write lock would maintain a table of protected regions within the firmware of the storage device (e.g., storage firmware  and\/or trusted system firmware  of  above) and disallow any unauthorized attempts to write to those regions. In another embodiment, a write lock would be implemented by maintaining a table of protected regions within the firmware of the storage device, and disallow any unauthorized attempts to write to those regions.","At block , attempts to infect or otherwise alter these locked operating system files fail because the device firmware prevention modification prevents any alteration of these operating system files. In one embodiment, if a specified region of the drive is locked, the storage firmware can monitor incoming write commands for attempts to write to the \u201clocked\u201d LBA\/LBAs and return a write error when such an attempt is made. In another embodiment, the storage firmware redirects the data in the write attempt to a special quarantine area for further analysis. In these embodiments, the normal operating system commands which would typically alter or replace these locked operating system files on the locked sectors will fail because the device firmware prevention modification overrides the storage access commands the operating system or other applications can use.","As described above, certain components of the operating system will be locked, so they can no longer be altered by normal operating system commands. While in many cases, this is a favorable situation because this disallows malware, viruses, etc. from infecting these operating system files. The problem is that there are times that these operating system files would need to be altered. In one embodiment, an operating system upgrade will likely need to alter the operating system files that are locked in a lockable storage.",{"@attributes":{"id":"p-0076","num":"0075"},"figref":["FIG. 9","FIG. 9","FIG. 1"],"b":["900","900","114","146","900","900"]},"Method  begins by receiving the command to upgrade the operating system that includes locked files storing the some or all of the operating system components. In one embodiment, the command to upgrade the operating system is from a user initiated request or an automatic service provider request to upgrade the operating system as is known in the art. At block , method  establishes a secure tunnel with the storage system. In one embodiment, the secure tunnel is a secure tunnel between the secure storage system and an agent (such as an agent performing method ) using the mailboxing scheme or the negotiated tunnel using SATA trusted sends and receives, as described above in  above. At block , method  uses a secure tunnel to upgrade the operating system. In one embodiment, method  uses the secure tunnel to update the operating system components that need to be upgraded that are in the lockable storage. After these operating system components are updated, method  proceeds to upgrade the rest of the operating system as is known in the art. At block , method  restarts the device with the upgraded operating system.","As described above, there are two ways that a computer can lock data stored in the lockable storage. In one embodiment, the operating system locks data in the lockable storage during a boot sequence. In another embodiment, the user initiates a lockdown of the lockable storage to lock some or all of the user data. In one embodiment, either way to lock data can be used. In another embodiment, both ways to lock data in the lockable storage are available.  illustrates an embodiment of a method  for locking user storage. In , method  begins by receiving the data to be stored in the lockable storage. In one embodiment, the data to be stored in the lockable storage is important user data such as antivirus definition data, personal data, financial records, etc. At block , method  receives a user lockdown configuration. In one embodiment, this lockdown configuration specifies which data is to be locked in the lockable storage. While in one embodiment, the configuration is to lock all data in lockable storage, in another embodiment, the configuration can specify certain files and\/or physical sectors of the lockable storage to be locked. In one embodiment, the lockdown configuration is defined by the user. In an alternate embodiment, a manufacturer of the computer device could use this mechanism to define which data is included in the lockable storage during a user lockdown request.","At block , method  receives an indication that a user lockdown has been activated. In one embodiment, a user may initiate a lockdown of lockable storage by activating a dedicated switch for the lockdown, a keyboard combo (e.g., ALT+F5, etc.), a touch sequence if using a touch user interface, or any other way to indicate a command to a computer as known in the art. At block , method  triggers system interrupt on the computer system, which the software on the system is listening for. In one embodiment, by triggering interrupt, method  that executes a lockdown is outside of the operating system control. This is useful if malware, virus, etc., may be present on the computer system so that the malware cannot defeat the user initiated lockdown.","At block , method  sends a message to the storage system to perform the user lockdown. In one embodiment, method  uses a tunnel between an agent executing method  in the operating system to the secure storage system to perform the user lockdown. In one embodiment, method  uses the tunnel as described above in  above. At block , method  indicates that the user lockdown is completed. In one embodiment, method  displays on this display of the computer system an icon or other graphical image that indicates that the user lockdown mode is initiated.","At block , method  executes an application in the user lockdown environment. In one embodiment, the user may initiate the lockdown, such that the user would like to execute a file or retrieve a file in an environment that may include malware, virus, or other potentially damaging software. By executing application during the user lockdown environment the data that is stored in the locked storage is prevented from being altered because the drive mechanism prevents an operating system process, (e.g., a malware, virus, etc.) from altering or deleting the data that is locked inside the lockable storage.","At block , method  receives an indication of the user unlock. In one embodiment, a user wants to unlock the lockable storage. At block , method  sends a message to the storage system to perform the user unlock. In one embodiment, method  uses the tunnel between the agent that executes method  and the secure storage system to perform the user unlock. At block , method  indicates a user lockdown has removed. In one embodiment, method  removes the icon or image that is displayed on the user's display for indicating the user lockdown is in process.","Secure Download and Processing of Premium Content","Online media and streaming is a growing area and this increases the demand of having secure platforms to offer premium services to enhance end user experience and open new channels of distribution of content for content providers to help them increase their Total Available Market (TAM). Currently, personal computer (PC) platforms are not considered robust enough to allow content providers (e.g. Netflix\u2122, movie and\/or television studios, etc.) to permit download and\/or stream of premium and most recent content onto a computing device (e.g., computer, set-top box, mobile device, etc., and\/or any other type of device capable of receiving and\/or presenting content). Content providers fear loss of intellectual property due to piracy and DRM violations. Due to these issues, content providers do not capture a sizeable chunk of customer segment that primarily uses PC platforms as their entertainment hub.","In addition, content providers and ISVs also want to make sure that their data is secure from point of origin till point of consumption, especially involving entertainment device segments offering an array of options for consumption of online and streaming content.","Described below is a system that allows content providers and ISVs to securely store and stream their content on PC and alternative platforms by enhancing the capabilities of storage platforms (e.g. premier content providers for latest movies, games, audio, books, etc.). The system would also offer to provision for secure execution by using the secure storage and tunnel capabilities of a storage platform to offer a trusted computing environment. In addition, the data path is secured from point of origin to the point of consumption through a secured tunnel, thereby minimizing the risk of snooping and DRM violation on exposed data in memory or platform.",{"@attributes":{"id":"p-0086","num":"0085"},"figref":["FIG. 11","FIG. 11"],"b":["1100","1100","1102","1104","1118","1112","1102","1102","1102","1104"]},"In one embodiment, the platform agent  includes an operating system , where the platform agent is a computer and\/or device as described above in  above. In one embodiment, the platform agent  establishes a root of trust with the system provider\/ISV , so that the system provider\/ISV  can securely download the DRM protected content to the platform agents . Furthermore, the platform agent is coupled to storage . In one embodiment, the storage includes operating system visible storage , where the operating system visible storage  includes associated hardware and firmware. For example and in one embodiment, operating system visible storage  is the normal storage  as described in  above. Furthermore, storage  includes operating system invisible secure storage  that, in one embodiment, is used to securely store the DRM protected content. For example and in one embodiment, operating system invisible storage  is secure storage .","In one embodiment, the platform agent  stores the DRM protected content to the operating system invisible secure storage  using secure path A. In one embodiment, the secure path A is a tunnel that is formed between the platform agent  and the operating system invisible secure storage . An example of the tunnel is described in  above. The platform agent is further coupled to the GPU\/display  via a secure path B. In one embodiment, the secure path B is a tunnel between the platform agent  and GPU\/display .",{"@attributes":{"id":"p-0089","num":"0088"},"figref":["FIG. 12","FIG. 12","FIG. 11"],"b":["1200","1104","1200","1200","1202","1104","1200"]},"At block , method  establishes a secure tunnel with the secure storage. In one embodiment, the secure storage is the operating system invisible storage . In one embodiment, method establishes a secure tunnel with the storage as described in  above. In this embodiment, the secure tunnel between the secure storage and the platform agent allows platform to securely download DRM protected content to the secure storage. Furthermore, method  establishes a tunnel between the operating system invisible storage and the GPU\/display. In one embodiment, the second tunnel is established with operating system invisible storage and the GPU\/display using a key exchange mechanism.","Using the two tunnels, method  securely executes the downloading and processing of the DRM protected content. In one embodiment, method  securely downloads the DRM protected content from the system provider\/ISV to the operating system invisible storage. Method  further decrypts and re-encrypts the DRM protected content so that the GPU\/display can process this content. Securely executing the downloading and processing of the DRM content is further described in  below.",{"@attributes":{"id":"p-0092","num":"0091"},"figref":["FIG. 13","FIG. 13","FIG. 14"],"b":["1300","1300","1302","1300","1304","1300","1300"]},"Method  allows discovery of the DRM storage protection at block . In one embodiment, the DRM storage protection is the secure storage system, as described above in . The DRM storage protection allows a content provider to securely store, stream, and\/or otherwise process the premium content without a fear of the content being copied, viewed and\/or made available without permission. At block , method  determines if the DRM storage protection is supported. If the DRM storage protection is not supported, at block , the premium content is not allowed to be stored on the device that is executing method . If the DRM storage protection is supported at block , at block , method  authenticates using the public key. In one embodiment, the public key is a key that allows the premium content to be downloaded from the premium content provider or ISV (e.g., service provider\/ISV  as described above in ). In one embodiment, the public key is provisioned at block  above. At block , method  negotiates a content specific key with the premium content service provider\/ISV. In one embodiment, negotiating the content specific key generates a key that is specific to the requested premium content.","At block , method  stores the content specific key in the secure storage. In one embodiment, method  uses a tunnel to the secure storage system to store the specific content key. At block , method  receives an encrypted content that corresponds to the request of the premium content. As described above, the encrypted content could be video, audio, images, book, game, software, etc., or any other type of DRM protected content. Furthermore, the retrieved content is encrypted and can be decrypted using the content specific key retrieved at block . At block , method  stores encrypted content and associated content metadata in the secure storage. In one embodiment, method  uses the tunnel between the agent that is executing method  and the secure storage to securely store the encrypted content and associated metadata. In one embodiment, the metadata is data that describes the encrypted content (e.g., title, artist, author, genre, length, size, encoding, etc. and\/or other parameters associated with premium content as known in the art).","A block , method  receives a request for encrypted content from the agent. In one embodiment, the agent is a software entity that is party to secure transactions between content providers and secure storage system. In one embodiment, the agent is further described above in . At block , method  decrypts the encrypted content and re-encrypts this content as per the root of trust protocol established with the display\/audio using a path protection public key. By re-encrypting the content with the root of trust protocol, the downloaded premium content can be viewed using the using the pass protection public key with the display\/audio. At block , method  decrypts the re-encrypted content using the pass protection key.","As described above, in order for a client to receive premium content, the client will need a root of trust.  illustrates an example of a system  that includes a client that requests and is granted a root of trust. In , client  is a client that can request the premium content from ISV\/server , where the ISV\/server  requests a provisioning key from a provisioning server  for the client . The system  is used to securely download and display, execute, etc., the premium content by agent .","In , the client requests the premium content () from the ISV\/server . In one embodiment, the client  includes secure storage . In response to receiving the client request for premium content, the ISV\/server  installs the agent  on the client  in the secure storage and communicates with the agent  to determine capabilities of the client  (). In addition, the ISV\/server  signs this message with a private key","The agent  in the secure storage sends a message with drive capabilities back to the ISV\/server  (). In response, the ISV\/server  determines if the storage is DRM protected storage at . If the storage is DRM protected storage, the ISV\/server  requests the provisioning key by signing the message and sending the signed message to the provisioning server . In one embodiment of provisioning server  provides the provisioning key. In addition, the provisioning server  signs the provisioning key using the private key of the provisioning server . The provisioning server  may be a third party provisioning server or may belong to part of the ISV. The provisioning server  sends the provisioning keys to the ISV\/server .","In response to receiving the provisioning keys, the ISV\/server  provisions the ISV public key with the provisioning key at . In one embodiment, the ISV public key is unique to the client. In one embodiment, the ISV public key is unique to the ISV\/server  for that client. In one embodiment, the ISV\/server  authenticates the client  and stores the public key using the agent  of the secure storage . In one embodiment, the ISV public key is stored in the secure storage  of the client . At the end of this sequence, the ISV\/server store  has provisioned public key into the secure storage  of the client  and the rest of the steps as indicated in method  may be performed to download and process the premium content.","Activation and Monetization of Value-added Storage Services","Hard drive companies are struggling to monetize features and capabilities built into their hardware. In their effort to minimize and contain their number of different models, storage companies may end up selling hardware for a lowest common denominator price, which in turn negatively impacts the storage companies' profitability. This is because storage companies cannot securely activate and\/or revoke value-added storage services of devices in the field not to generate secondary revenue sources. In one embodiment, revocation transfers management rights of physical resources (e.g., storage devices) from one service provider to another. For example and in one embodiment, vendor A would revoke management services for a given device, while vendor B would activate new services for the same device. Potential value-added storage services can include additional storage enablement, anti-theft technology, secure storage, storage device encryption, etc.",{"@attributes":{"id":"p-0101","num":"0100"},"figref":["FIG. 15","FIG. 15"],"b":["1500","1502","1500","1502","1504","1502","1504","1504","1502","1502","1506","1502","1506","1504","1504","1508","1502"]},"Once the secure root of trust is established, an application running on the client  may request a license for a value-added storage service using the agent . In this embodiment, the agent  sends a request to the ISV\/server  in response receiving a request for a value-added storage services license from that application. In one embodiment, the ISV\/server  forwards this request to the provisioning server . The provisioning server  authorizes the license request and sends this authorization back to the ISV\/server . The ISV\/server  receives the authorization from the provisioning server  and issues a license for the requested value-added storage feature to the client . How the agent  works in association with the client is further described in  below",{"@attributes":{"id":"p-0103","num":"0102"},"figref":["FIG. 16","FIG. 16","FIG. 15","FIG. 1"],"b":["1614","1606","1608","1612","1614","1614","1608","1610","1608","1610","1610","1610","1610","1608","1602","1614","1612"]},"In one embodiment, manageability engine  includes application applet A, JVM core B, JVM ISV plugin C, and ISV core D. In one embodiment, the client  makes a request for a value-added storage service license to the application applet A via the ISV core D, ISV plugin C, and JVM core B. In one embodiment, the client  uses the components A-D to communicate with the manageability engine  and to make a license request with the ISV\/server. In one embodiment, the application applet A is an application to control the license request process to the ISV\/server. In one embodiment, JVM core B is a Java virtual machine core as known in the art and is used to execute the application applet A. In one embodiment, the JVM ISP plugin C is a plug-in that runs in the manageability engines  and is used to communicate data between the ISP core B and the JVM core D.","The ISV core D, in one embodiment, is a module that communicates directly with the remote ISV\/server such as remote ISV\/server  as described above in  above. In one embodiment, the ISV core D includes a TCP\/IP network stack that allows the ISV core D to directly communicate via the Internet or some other networking protocol to request and receive the licenses that the application for license A is requesting. In one embodiment, the management engine  is part of the secure storage of the computer . In this embodiment, the manageability engine  is a process that runs outside of OS  and is used to securely communicate and download the license for the storage feature. Requesting the license is further described in  below.",{"@attributes":{"id":"p-0106","num":"0105"},"figref":["FIG. 17","FIG. 17","FIG. 14"],"b":["1700","1704","1700","1706","1700","1700"]},"If the system for enabling storage features is not supported, at block , method  determines that storage features are not enabled. No further action is taken. If the system for enabling storage features is supported, at block , method  authenticates using the public key. In one embodiment, method  authenticates using the public key that was stored in the secure storage at block  above. A block , method  receives and forwards a request for a value-added storage service to the storage authorization server. In one embodiment, the storage authorization server is the ISV\/server  as illustrated in  above. In this embodiment, the secure storage enables requests for value-added storage feature license and handles the requests.","In a block , method  receives a license from the storage authorization server. Method  stores the requested license in the secure storage at block . In one embodiment, method  uses a tunnel such as a tunnel as described in  above to store the license in the secure storage. At block , method  provides a license to the requesting application. In one embodiment, method  provides license as described above in  above.","Processor cores may be implemented in different ways, for different purposes, and in different processors. For instance, implementations of such cores may include: 1) a general purpose in-order core intended for general-purpose computing; 2) a high performance general purpose out-of-order core intended for general-purpose computing; 3) a special purpose core intended primarily for graphics and\/or scientific (throughput) computing. Implementations of different processors may include: 1) a CPU including one or more general purpose in-order cores intended for general-purpose computing and\/or one or more general purpose out-of-order cores intended for general-purpose computing; and 2) a coprocessor including one or more special purpose cores intended primarily for graphics and\/or scientific (throughput). Such different processors lead to different computer system architectures, which may include: 1) the coprocessor on a separate chip from the CPU; 2) the coprocessor on a separate die in the same package as a CPU; 3) the coprocessor on the same die as a CPU (in which case, such a coprocessor is sometimes referred to as special purpose logic, such as integrated graphics and\/or scientific (throughput) logic, or as special purpose cores); and 4) a system on a chip that may include on the same die the described CPU (sometimes referred to as the application core(s) or application processor(s)), the above described coprocessor, and additional functionality. Exemplary core architectures are described next, followed by descriptions of exemplary processors and computer architectures.","Exemplary Core Architectures","In-order and Out-of-order Core Block Diagram",{"@attributes":{"id":"p-0112","num":"0111"},"figref":["FIG. 18A","FIG. 18B","FIGS. 18A-B"]},"In , a processor pipeline  includes a fetch stage , a length decode stage , a decode stage , an allocation stage , a renaming stage , a scheduling (also known as a dispatch or issue) stage , a register read\/memory read stage , an execute stage , a write back\/memory write stage , an exception handling stage , and a commit stage .",{"@attributes":{"id":"p-0114","num":"0113"},"figref":"FIG. 18B","b":["1890","1830","1850","1870","1890","1890"]},"The front end unit  includes a branch prediction unit  coupled to an instruction cache unit , which is coupled to an instruction translation lookaside buffer (TLB) , which is coupled to an instruction fetch unit , which is coupled to a decode unit . The decode unit  (or decoder) may decode instructions, and generate as an output one or more micro-operations, micro-code entry points, microinstructions, other instructions, or other control signals, which are decoded from, or which otherwise reflect, or are derived from, the original instructions. The decode unit  may be implemented using various different mechanisms. Examples of suitable mechanisms include, but are not limited to, look-up tables, hardware implementations, programmable logic arrays (PLAs), microcode read only memories (ROMs), etc. In one embodiment, the core  includes a microcode ROM or other medium that stores microcode for certain macroinstructions (e.g., in decode unit  or otherwise within the front end unit ). The decode unit  is coupled to a rename\/allocator unit  in the execution engine unit .","The execution engine unit  includes the rename\/allocator unit  coupled to a retirement unit  and a set of one or more scheduler unit(s) . The scheduler unit(s)  represents any number of different schedulers, including reservations stations, central instruction window, etc. The scheduler unit(s)  is coupled to the physical register file(s) unit(s) . Each of the physical register file(s) units  represents one or more physical register files, different ones of which store one or more different data types, such as scalar integer, scalar floating point, packed integer, packed floating point, vector integer, vector floating point, status (e.g., an instruction pointer that is the address of the next instruction to be executed), etc. In one embodiment, the physical register file(s) unit  comprises a vector registers unit, a write mask registers unit, and a scalar registers unit. These register units may provide architectural vector registers, vector mask registers, and general purpose registers. The physical register file(s) unit(s)  is overlapped by the retirement unit  to illustrate various ways in which register renaming and out-of-order execution may be implemented (e.g., using a reorder buffer(s) and a retirement register file(s); using a future file(s), a history buffer(s), and a retirement register file(s); using a register maps and a pool of registers; etc.). The retirement unit  and the physical register file(s) unit(s)  are coupled to the execution cluster(s) . The execution cluster(s)  includes a set of one or more execution units  and a set of one or more memory access units . The execution units  may perform various operations (e.g., shifts, addition, subtraction, multiplication) and on various types of data (e.g., scalar floating point, packed integer, packed floating point, vector integer, vector floating point). While some embodiments may include a number of execution units dedicated to specific functions or sets of functions, other embodiments may include only one execution unit or multiple execution units that all perform all functions. The scheduler unit(s) , physical register file(s) unit(s) , and execution cluster(s)  are shown as being possibly plural because certain embodiments create separate pipelines for certain types of data\/operations (e.g., a scalar integer pipeline, a scalar floating point\/packed integer\/packed floating point\/vector integer\/vector floating point pipeline, and\/or a memory access pipeline that each have their own scheduler unit, physical register file(s) unit, and\/or execution cluster\u2014and in the case of a separate memory access pipeline, certain embodiments are implemented in which only the execution cluster of this pipeline has the memory access unit(s) ). It should also be understood that where separate pipelines are used, one or more of these pipelines may be out-of-order issue\/execution and the rest in-order.","The set of memory access units  is coupled to the memory unit , which includes a data TLB unit  coupled to a data cache unit  coupled to a level 2 (L2) cache unit . In one exemplary embodiment, the memory access units  may include a load unit, a store address unit, and a store data unit, each of which is coupled to the data TLB unit  in the memory unit . The instruction cache unit  is further coupled to a level 2 (L2) cache unit  in the memory unit . The L2 cache unit  is coupled to one or more other levels of cache and eventually to a main memory.","By way of example, the exemplary register renaming, out-of-order issue\/execution core architecture may implement the pipeline  as follows: 1) the instruction fetch  performs the fetch and length decoding stages  and ; 2) the decode unit  performs the decode stage ; 3) the rename\/allocator unit  performs the allocation stage  and renaming stage ; 4) the scheduler unit(s)  performs the schedule stage ; 5) the physical register file(s) unit(s)  and the memory unit  perform the register read\/memory read stage ; the execution cluster  perform the execute stage ; 6) the memory unit  and the physical register file(s) unit(s)  perform the write back\/memory write stage ; 7) various units may be involved in the exception handling stage ; and 8) the retirement unit  and the physical register file(s) unit(s)  perform the commit stage .","The core  may support one or more instructions sets (e.g., the x86 instruction set (with some extensions that have been added with newer versions); the MIPS instruction set of MIPS Technologies of Sunnyvale, Calif.; the ARM instruction set (with optional additional extensions such as NEON) of ARM Holdings of Sunnyvale, Calif.), including the instruction(s) described herein. In one embodiment, the core  includes logic to support a packed data instruction set extension (e.g., AVX, AVX), thereby allowing the operations used by many multimedia applications to be performed using packed data.","It should be understood that the core may support multithreading (executing two or more parallel sets of operations or threads), and may do so in a variety of ways including time sliced multithreading, simultaneous multithreading (where a single physical core provides a logical core for each of the threads that physical core is simultaneously multithreading), or a combination thereof (e.g., time sliced fetching and decoding and simultaneous multithreading thereafter such as in the Intel\u00ae Hyperthreading technology).","While register renaming is described in the context of out-of-order execution, it should be understood that register renaming may be used in an in-order architecture. While the illustrated embodiment of the processor also includes separate instruction and data cache units \/ and a shared L2 cache unit , alternative embodiments may have a single internal cache for both instructions and data, such as, for example, a Level 1 (L1) internal cache, or multiple levels of internal cache. In some embodiments, the system may include a combination of an internal cache and an external cache that is external to the core and\/or the processor. Alternatively, all of the cache may be external to the core and\/or the processor.","Specific Exemplary in-order Core Architecture",{"@attributes":{"id":"p-0123","num":"0122"},"figref":"FIGS. 19A-B"},{"@attributes":{"id":"p-0124","num":"0123"},"figref":"FIG. 19A","b":["1902","1904","1900","1906","1908","1910","1912","1914","1906"]},"The local subset of the L2 cache  is part of a global L2 cache that is divided into separate local subsets, one per processor core. Each processor core has a direct access path to its own local subset of the L2 cache . Data read by a processor core is stored in its L2 cache subset  and can be accessed quickly, in parallel with other processor cores accessing their own local L2 cache subsets. Data written by a processor core is stored in its own L2 cache subset  and is flushed from other subsets, if necessary. The ring network ensures coherency for shared data. The ring network is bi-directional to allow agents such as processor cores, L2 caches and other logic blocks to communicate with each other within the chip. Each ring data-path is 1012-bits wide per direction.",{"@attributes":{"id":"p-0126","num":"0125"},"figref":["FIG. 19B","FIG. 19A","FIG. 19B"],"b":["1906","1904","1910","1914","1910","1928","1920","1922","1924","1926"]},"Processor with Integrated Memory Controller and Graphics",{"@attributes":{"id":"p-0128","num":"0127"},"figref":["FIG. 20","FIG. 20"],"b":["2000","2000","2002","2010","2016","2000","2002","2014","2010","2008"]},"Thus, different implementations of the processor  may include: 1) a CPU with the special purpose logic  being integrated graphics and\/or scientific (throughput) logic (which may include one or more cores), and the cores A-N being one or more general purpose cores (e.g., general purpose in-order cores, general purpose out-of-order cores, a combination of the two); 2) a coprocessor with the cores A-N being a large number of special purpose cores intended primarily for graphics and\/or scientific (throughput); and 3) a coprocessor with the cores A-N being a large number of general purpose in-order cores. Thus, the processor  may be a general-purpose processor, coprocessor or special-purpose processor, such as, for example, a network or communication processor, compression engine, graphics processor, GPGPU (general purpose graphics processing unit), a high-throughput many integrated core (MIC) coprocessor (including 30 or more cores), embedded processor, or the like. The processor may be implemented on one or more chips. The processor  may be a part of and\/or may be implemented on one or more substrates using any of a number of process technologies, such as, for example, BiCMOS, CMOS, or NMOS.","The memory hierarchy includes one or more levels of cache within the cores, a set or one or more shared cache units , and external memory (not shown) coupled to the set of integrated memory controller units . The set of shared cache units  may include one or more mid-level caches, such as level 2 (L2), level 3 (L3), level 4 (L4), or other levels of cache, a last level cache (LLC), and\/or combinations thereof. While in one embodiment a ring based interconnect unit  interconnects the integrated graphics logic , the set of shared cache units , and the system agent unit \/integrated memory controller unit(s) , alternative embodiments may use any number of well-known techniques for interconnecting such units. In one embodiment, coherency is maintained between one or more cache units  and cores -A-N.","In some embodiments, one or more of the cores A-N are capable of multi-threading. The system agent  includes those components coordinating and operating cores A-N. The system agent unit  may include for example a power control unit (PCU) and a display unit. The PCU may be or include logic and components needed for regulating the power state of the cores A-N and the integrated graphics logic . The display unit is for driving one or more externally connected displays.","The cores A-N may be homogenous or heterogeneous in terms of architecture instruction set; that is, two or more of the cores A-N may be capable of execution the same instruction set, while others may be capable of executing only a subset of that instruction set or a different instruction set.","Exemplary Computer Architectures",{"@attributes":{"id":"p-0134","num":"0133"},"figref":"FIGS. 21-24"},"Referring now to , shown is a block diagram of a system  in accordance with one embodiment of the present invention. The system  may include one or more processors , , which are coupled to a controller hub . In one embodiment the controller hub  includes a graphics memory controller hub (GMCH)  and an Input\/Output Hub (IOH)  (which may be on separate chips); the GMCH  includes memory and graphics controllers to which are coupled memory  and a coprocessor ; the IOH  is couples input\/output (I\/O) devices  to the GMCH . Alternatively, one or both of the memory and graphics controllers are integrated within the processor (as described herein), the memory  and the coprocessor  are coupled directly to the processor , and the controller hub  in a single chip with the IOH .","The optional nature of additional processors  is denoted in  with broken lines. Each processor ,  may include one or more of the processing cores described herein and may be some version of the processor .","The memory  may be, for example, dynamic random access memory (DRAM), phase change memory (PCM), or a combination of the two. For at least one embodiment, the controller hub  communicates with the processor(s) ,  via a multi-drop bus, such as a frontside bus (FSB), point-to-point interface such as QuickPath Interconnect (QPI), or similar connection .","In one embodiment, the coprocessor  is a special-purpose processor, such as, for example, a high-throughput MIC processor, a network or communication processor, compression engine, graphics processor, GPGPU, embedded processor, or the like. In one embodiment, controller hub  may include an integrated graphics accelerator.","There can be a variety of differences between the physical resources ,  in terms of a spectrum of metrics of merit including architectural, microarchitectural, thermal, power consumption characteristics, and the like.","In one embodiment, the processor  executes instructions that control data processing operations of a general type. Embedded within the instructions may be coprocessor instructions. The processor  recognizes these coprocessor instructions as being of a type that should be executed by the attached coprocessor . Accordingly, the processor  issues these coprocessor instructions (or control signals representing coprocessor instructions) on a coprocessor bus or other interconnect, to coprocessor . Coprocessor(s)  accept and execute the received coprocessor instructions.","Referring now to , shown is a block diagram of a first more specific exemplary system  in accordance with an embodiment of the present invention. As shown in , multiprocessor system  is a point-to-point interconnect system, and includes a first processor  and a second processor  coupled via a point-to-point interconnect . Each of processors  and  may be some version of the processor . In one embodiment of the invention, processors  and  are respectively processors  and , while coprocessor  is coprocessor . In another embodiment, processors  and  are respectively processor  coprocessor .","Processors  and  are shown including integrated memory controller (IMC) units  and , respectively. Processor  also includes as part of its bus controller units point-to-point (P-P) interfaces  and ; similarly, second processor  includes P-P interfaces  and . Processors ,  may exchange information via a point-to-point (P-P) interface  using P-P interface circuits , . As shown in , IMCs  and  couple the processors to respective memories, namely a memory  and a memory , which may be portions of main memory locally attached to the respective processors.","Processors ,  may each exchange information with a chipset  via individual P-P interfaces ,  using point to point interface circuits , , , . Chipset  may optionally exchange information with the coprocessor  via a high-performance interface . In one embodiment, the coprocessor  is a special-purpose processor, such as, for example, a high-throughput MIC processor, a network or communication processor, compression engine, graphics processor, GPGPU, embedded processor, or the like.","A shared cache (not shown) may be included in either processor or outside of both processors, yet connected with the processors via P-P interconnect, such that either or both processors' local cache information may be stored in the shared cache if a processor is placed into a low power mode.","Chipset  may be coupled to a first bus  via an interface . In one embodiment, first bus  may be a Peripheral Component Interconnect (PCI) bus, or a bus such as a PCI Express bus or another third generation I\/O interconnect bus, although the scope of the present invention is not so limited.","As shown in , various I\/O devices  may be coupled to first bus , along with a bus bridge  which couples first bus  to a second bus . In one embodiment, one or more additional processor(s) , such as coprocessors, high-throughput MIC processors, GPGPU's, accelerators (such as, e.g., graphics accelerators or digital signal processing (DSP) units), field programmable gate arrays, or any other processor, are coupled to first bus . In one embodiment, second bus  may be a low pin count (LPC) bus. Various devices may be coupled to a second bus  including, for example, a keyboard and\/or mouse , communication devices  and a storage unit  such as a disk drive or other mass storage device which may include instructions\/code and data , in one embodiment. Further, an audio I\/O  may be coupled to the second bus . Note that other architectures are possible. For example, instead of the point-to-point architecture of , a system may implement a multi-drop bus or other such architecture.","Referring now to , shown is a block diagram of a second more specific exemplary system  in accordance with an embodiment of the present invention. Like elements in  bear like reference numerals, and certain aspects of  have been omitted from  in order to avoid obscuring other aspects of .",{"@attributes":{"id":"p-0148","num":"0147"},"figref":["FIG. 23","FIG. 23"],"b":["2270","2280","2272","2282","2272","2282","2232","2234","2272","2282","2314","2272","2282","2315","2290"]},"Referring now to , shown is a block diagram of a SoC  in accordance with an embodiment of the present invention. Similar elements in  bear like reference numerals. Also, dashed lined boxes are optional features on more advanced SoCs. In , an interconnect unit(s)  is coupled to: an application processor  which includes a set of one or more cores A-N and shared cache unit(s) ; a system agent unit ; a bus controller unit(s) ; an integrated memory controller unit(s) ; a set or one or more coprocessors  which may include integrated graphics logic, an image processor, an audio processor, and a video processor; an static random access memory (SRAM) unit ; a direct memory access (DMA) unit ; and a display unit  for coupling to one or more external displays. In one embodiment, the coprocessor(s)  include a special-purpose processor, such as, for example, a network or communication processor, compression engine, GPGPU, a high-throughput MIC processor, embedded processor, or the like.","Embodiments of the mechanisms disclosed herein may be implemented in hardware, software, firmware, or a combination of such implementation approaches. Embodiments of the invention may be implemented as computer programs or program code executing on programmable systems comprising at least one processor, a storage system (including volatile and non-volatile memory and\/or storage elements), at least one input device, and at least one output device.","Program code, such as code  illustrated in , may be applied to input instructions to perform the functions described herein and generate output information. The output information may be applied to one or more output devices, in known fashion. For purposes of this application, a processing system includes any system that has a processor, such as, for example; a digital signal processor (DSP), a microcontroller, an application specific integrated circuit (ASIC), or a microprocessor.","The program code may be implemented in a high level procedural or object oriented programming language to communicate with a processing system. The program code may also be implemented in assembly or machine language, if desired. In fact, the mechanisms described herein are not limited in scope to any particular programming language. In any case, the language may be a compiled or interpreted language.","One or more aspects of at least one embodiment may be implemented by representative instructions stored on a machine-readable medium which represents various logic within the processor, which when read by a machine causes the machine to fabricate logic to perform the techniques described herein. Such representations, known as \u201cIP cores\u201d may be stored on a tangible, machine readable medium and supplied to various customers or manufacturing facilities to load into the fabrication machines that actually make the logic or processor.","Such machine-readable storage media may include, without limitation, non-transitory, tangible arrangements of articles manufactured or formed by a machine or device, including storage media such as hard disks, any other type of disk including floppy disks, optical disks, compact disk read-only memories (CD-ROMs), compact disk rewritable's (CD-RWs), and magneto-optical disks, semiconductor devices such as read-only memories (ROMs), random access memories (RAMs) such as dynamic random access memories (DRAMs), static random access memories (SRAMs), erasable programmable read-only memories (EPROMs), flash memories, electrically erasable programmable read-only memories (EEPROMs), phase change memory (PCM), magnetic or optical cards, or any other type of media suitable for storing electronic instructions.","Accordingly, embodiments of the invention also include non-transitory, tangible machine-readable media containing instructions or containing design data, such as Hardware Description Language (HDL), which defines structures, circuits, apparatuses, processors and\/or system features described herein. Such embodiments may also be referred to as program products.","Emulation (Including Binary Translation, Code Morphing, Etc.)","In some cases, an instruction converter may be used to convert an instruction from a source instruction set to a target instruction set. For example, the instruction converter may translate (e.g., using static binary translation, dynamic binary translation including dynamic compilation), morph, emulate, or otherwise convert an instruction to one or more other instructions to be processed by the core. The instruction converter may be implemented in software, hardware, firmware, or a combination thereof. The instruction converter may be on processor, off processor, or part on and part off processor.",{"@attributes":{"id":"p-0158","num":"0157"},"figref":["FIG. 25","FIG. 25","FIG. 25"],"b":["2502","2504","2506","2516","2516","2504","2506","2516","2502","2508","2510","2514","2512","2506","2514","2510","2512","2506"]},"Alternative Embodiments","While embodiments have been described which have the function of these embodiments as being performed from within the storage system (e.g., trusted API, locakable storage, downloading and managing of premium content, activation of value-added storage service, etc.), alternative embodiments of the invention may have these functions being performed in a different part of the device. For example and in one embodiment, one or more of these described functions could be performed in different hardware (chipset, a secure core of the device, secure processor, a coupled device (USB stick, etc.), etc., and\/or some other hardware block) and\/or in software. Also, while the flow diagrams in the Figures show a particular order of operations performed by certain embodiments of the invention, it should be understood that such order is exemplary (e.g., alternative embodiments may perform the operations in a different order, combine certain operations, overlap certain operations, etc.).","In the description above, for the purposes of explanation, numerous specific details have been set forth in order to provide a thorough understanding of the embodiments of the invention. It will be apparent however, to one skilled in the art, that one or more other embodiments may be practiced without some of these specific details. The particular embodiments described are not provided to limit the invention but to illustrate embodiments of the invention. The scope of the invention is not to be determined by the specific examples provided above but only by the claims below."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention is illustrated by way of example and not limitation in the figures of the accompanying drawings, in which like references indicate similar elements and in which:",{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 2AB"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 3AB"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 18A"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 18B"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIGS. 19A and 19B"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 20"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 21"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 22"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 23"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 24"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 25"}]},"DETDESC":[{},{}]}
