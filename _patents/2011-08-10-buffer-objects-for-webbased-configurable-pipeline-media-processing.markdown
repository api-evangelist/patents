---
title: Buffer objects for web-based configurable pipeline media processing
abstract: An apparatus and method relating to buffer objects for web-based media processing are disclosed. The disclosed embodiments include a web browser implemented on a computing device. The web browser includes a web application processor for processing a web application that includes instructions to process a media stream using one or more configurable pipelines, each configurable pipeline including a plurality of components connected by data channels using buffer objects, the buffer objects including a data pointer identifying a location in a memory, the data pointer having an associated data size representing an amount of memory available at the memory location, an allocation method configured to allocate memory to the buffer object using the data pointer and the data size, and an accessor method configured to enable a component in the configurable pipeline to access data stored in the memory identified by the data pointer and the data size.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08838680&OS=08838680&RS=08838680
owner: Google Inc.
number: 08838680
owner_city: Mountain View
owner_country: US
publication_date: 20110810
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This application claims priority to U.S. Provisional Patent Application Ser. No. 61\/440,825, filed Feb. 8, 2011, which is incorporated herein in its entirety.","The present invention relates in general to web-based processing of media and in particular to buffer objects for web-based configurable pipeline media processing.","In the early stages of the World Wide Web (WWW), web pages generally consisted of static content (such as text and images) stored on servers. The static content was accessed and rendered by a web browser executing on a client. As the WWW has evolved, much content on the web is now dynamically generated. Such content can include web applications which that include instructions to be performed by the client web browsers. Such web applications can provide a more interactive and functional experience than earlier web pages. More recent web applications now include various forms of media, including audio and video content.","Disclosed herein are embodiments of methods and apparatuses for buffer objects for web-based configurable pipeline media processing.","One aspect of the disclosed embodiments is a web browser implemented on a computing device. The web browser includes a web application processor for processing a web application that includes instructions to process a media stream using one or more configurable pipelines, each configurable pipeline including a plurality of components connected by data channels using buffer objects. At least some of the buffer objects include a data pointer identifying a location in a memory, the data pointer having an associated data size representing an amount of memory available at the memory location, an allocation method configured to allocate memory to the buffer object using the data pointer and the data size, and an accessor method configured to enable a component in the configurable pipeline to access data stored in the memory identified by the data pointer and the data size.","Another aspect of the disclosed embodiments is a buffer object configured for use in a configurable pipeline to pass data within data channels between a plurality of components in the configurable pipeline, the configurable pipeline created within a web browser and executed on a computing device. The buffer object includes a data type property, a data pointer identifying a location in a memory, the data pointer having an associated data size representing an amount of memory available at the memory location, an allocation method configured to allocate memory to the buffer object using the data pointer and the data size, and an accessor method configured to enable a component in the configurable pipeline to access data stored in the memory identified by the data pointer and the data size.","Another aspect of the disclosed embodiments is a method of transferring data with buffer objects between components in a configurable pipeline implemented using a web browser. The method includes initializing the configurable pipeline based on instructions included within a web application executed by the web browser, the initialization including creating data channels between components in the configurable pipeline, creating a plurality of buffer objects to enable the data channels to transfer data between the components of the configurable pipeline, storing data in a buffer object of the plurality of buffer objects by an output port of a first component, passing the buffer object from the first component to an input port of a second component by way of at least one of the data channels, and retrieving the data stored in the buffer object by the second component.","These and other embodiments will be described in additional detail hereafter.","Various solutions for including media in web applications include monolithic plugins, such as Adobe Flash and monolithic built-in browser functionality, such as the video tag included in HTML5. These solutions provide a web application high level control over a pre-defined process, such as video encoding or decoding, but do not provide customized or granular control over the process. Custom processes can require, for example, a distinct and custom programmed plugin module for the entire process. Thus, adding proprietary or other custom aspects to a process (such as Digital Rights Management (DRM), advertising overlays, video enhancements, etcetera) can be cumbersome, time-consuming, and costly. To the contrary, a modular configurable pipeline implemented in a web browser can enable a web application to configure custom processes and have granular control over those processes.","In particular, a modular configurable pipeline can be implemented using components and buffer objects. Components can be arranged within a configurable pipeline to perform processing tasks. Data channels can be established between the components to pass data through the configurable pipeline. Data can be passed through the data channels using buffer objects. Buffer objects can be utilized, for example, in a circular buffer technique or a pass through buffer technique.",{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 1","b":["10","12","14","16","14","12","14","16","16","16","14","12"]},"The server  can be the only server or can be one of a group of servers  that includes additional servers . The group of servers  can be implemented as a computing cluster whereby the server  and additional servers  share resources, such as storage memory, and load-balance the processing of requests to the group of servers . The group of servers  can alternatively be a cloud computing service. For example, a cloud computing service can include hundreds or thousands of servers configured to provide scalable computing resources. In a cloud computing service, computing tasks can be performed on one or more servers or other computing devices included within the cloud computing service.","The above are only exemplary implementations of the group of servers , and any distributed computing model can be used in their place. As used herein and in the claims, the term \u201cserver\u201d is understood to include any combination or implementation of servers, server groups, or any other configuration of computing devices of any kind.","A network  connects the servers in the group of servers  and a client  and any additional clients  in a group of clients . Network  is, for example, the Internet. Network  can also be a local area network (LAN), wide area network (WAN), virtual private network (VPN), or any other means of transferring data between the servers  and a group of clients .","The client , in one example, can be a desktop computer having an internal configuration of hardware including a processor such as a central processing unit (CPU)  and a memory . CPU  is a controller for controlling the operations of client . CPU  can be connected to memory  by, for example, a memory bus. Memory  may be RAM or any other suitable memory device. Memory  stores data and program instructions which are used by CPU . Other suitable implementations of client  are possible, including handheld computing devices, laptops, or mobile telephones.","A display  configured to display a graphical user interface can be connected to client . Display  may be implemented in various ways, including by a liquid crystal display (LCD) or a cathode-ray tube (CRT). The display  can be configured to display application windows including a web browser application window  on client .","Other implementations of the client-server system  are possible. For example, one implementation can omit the group of servers  and additional servers  and include only a single server . In another implementation, there may only be one client  instead of the group of clients  and additional clients . In another implementation, additional components may be added to the encoder and decoder system . For example, one or more peripherals, such as a video camera, can be attached to client  or some of the additional clients .",{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 2","FIG. 1"],"b":["41","42","46","42","30","42","34","32","42","43","44","45","46","42"]},"Web application  represents a web page that includes content to be executed on client  by web browser . For example, such content can include scripting, such as JavaScript or ECMAScript. Alternatively, web application  can include other content such as Cascading Style Sheets (CSS) or other dynamic content. Web application  can be retrieved from a web server implemented on server  by way of web application receiver . Alternatively, web application  can be cached on client  and retrieved from client  instead of from server .","Web application processor  can be used to process instructions (such as script) included in web application . For example, a JavaScript engine can be included within web application processor  to interpret and execute script included in web application . Configurable pipelines  are used to process media streams by web browser . Configurable pipelines  can be initialized, configured, and controlled based on instructions (script) included in web application . For example, configurable pipelines  can be used to decode video and audio streams.",{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 2","b":["42","30"]},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 3A-D"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 3A","b":["48","48","50","52","54","56","58","60","62"],"i":["a","a "]},"Source  is a source input that accepts a media stream. Source  can obtain the media stream directly based on a Uniform Resource Locator (URL) or other location provided by, for example, the web application . Alternatively, the media stream can be provided to source  by another component in web browser .","Demuxer  is configured to split a media stream into two streams. For example, demuxer  can take as input a combined video and audio stream. Demuxer  can take the individual video and audio streams and output them separately. In basic configuration , demuxer  outputs the video stream as output and the audio stream as output ","Video decoder  is configured to decode the video stream output . Video decoder  can be capable of decoding video streams encoded using one or more video encoding schemes. Video renderer  is configured to take the decoded video stream produced by video decoder  and render the decoded video stream to display  via, for example, web browser application window .","Audio decoder  is configured to decode the audio stream output . Audio decoder  can be capable of decoding audio streams encoded using one or more audio encoding schemes. Audio renderer  is configured to take the decoded audio stream produced by audio decoder  and render the decoded audio stream to, for example, an audio card connected to client . The audio card can, for example, be connected to speakers or headphones to convert the rendered audio into sound waves. Alternative techniques for rendering audio to sound waves are available.","Synchronization  provides for the synchronization of rendering of the audio and video streams. In other words, synchronization  can ensure that video is rendered at the same time as the particular audio corresponding to the video so that, for example, a rendered video of a person speaking (i.e. lips moving) is synchronized with the rendered audio. Synchronization  can be accomplished using, for example, a clock component  as described in  below.",{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 3B","b":["48","48","48","64","66","64","54","66","66","64","54"],"i":["b","b ","a "]},{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 3C","b":["48","48","48","68","68","58"],"i":["c","c ","a "]},{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 3D","b":["48","48","48","70","70","70"],"i":["d","d ","a "]},{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 4A","b":["100","100","43","50","52","54","56","102","104"],"i":["a ","a ","a","d ","a","f. "]},"The control channels -are used to control pipeline . For example, control channels -can access control functions of the source, components, and renderer of the pipeline to start, stop, pause, fast forward, etc., the processing of the media stream. Control channels -can include a JavaScript or other interpretive scripting language interface. For example, control channels -can be accessible by web application  via a JavaScript API. In one such implementation, control channels -are exposed via objects in a document object model (DOM) accessible by the web application . In pipeline , control functions are performed individually for each element in the pipeline by web application  (i.e. sending a stop control signal to video renderer  will not automatically be conveyed to video decoder ).","The data channels -are used to pass data between the elements (source, components and renderer) of pipeline . For example, the incoming media stream is output by source  via data channel to web application . Web application  then can pass the data from source  via data channel to demuxer . In the pipeline configuration of pipeline , the web application  passes data as described above between each element of the pipeline ","The components shown in basic pipeline can be implemented by the web browser  on client  as native binary components. Native binary components are included with web browser  and execute natively on the client  on which web browser  is implemented. In other words, a binary component can be written in a computer programming language such as C++, and then compiled to machine code that is executable natively on the client that is used to execute web browser .",{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 4B","b":["100","100","100","110","110","43","110","43","100"],"i":["b ","b ","a","a","a ","a ","b. "]},"Web application  includes video enhancer in the pipeline by taking data from video decoder  via data channel and passing that data to video enhancer . Video enhancer processes the data, and outputs data, which is then passed to video renderer  via data channel . In this case, video enhancer is shown, which is a component configured to enhance the decoded video. However, any type of component can be used within the pipeline , including, for example, an advertising overlay component.","The structure of pipeline provides web application  access to data input and output of each component in pipeline as well as control of each component. This granular access to the processing pipeline allows great flexibility for a developer of web application  to include custom processing steps in, for example, a media stream decoding process.",{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 4C","b":["100","100","100","110","110","30"],"i":["c ","c ","b","b","b "]},"A binary add-in component can be stored on storage medium accessible via network , such as on server . The web browser  can retrieve the binary add-in component in response to instructions included in web application . The binary add-in component and interpretive add-in components can be structured in a common format and can be implemented using one or more standardized Application Programming Interfaces (APIs).","Binary and interpretive add-in components can be used by web application to dynamically change a configurable pipeline in some implementations. For example, video enhancer or could be added into a configurable pipeline for only part of a stream being processed. In another example, video mixer  can be added into the configurable pipeline for a certain time period to display advertisements, and then later be removed when the advertisements are no longer shown.","Alternatively, components can be swapped. For example, various implementations of video decoder  can be interchanged. A first implementation of video decoder  can be configured to decode a first video encoding scheme whereas a second implementation can be configured to decode a second video encoding scheme. The first implementation and second implementation can be interchanged dynamically if the encoding scheme of the stream being decoded changes, or if a new stream with a different encoding scheme is decoded using the configurable pipeline.",{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIG. 4D","b":["100","120","100","120","100","43","43","122","100","122","43"],"i":["d ","d ","d ","d"]},"The pipeline control channel  can be configured to take simple commands from web application  and perform more complex control operations with respect to the components of pipeline . In one implementation, pipeline control object  is configured with information including: a listing of all components in the configurable pipeline including, for example, the order of components and the type of component; the data passing technique(s) in use; and the functionality of the pipeline (i.e. playback, encoding, etcetera).","Based on the configuration information, pipeline control object  can be configured to construct the configurable pipeline during initialization. For example, pipeline control object  can instantiate and configure each component and configure the data channels and buffer objects. Once the configurable pipeline is initialized, pipeline control channel  can accept commands to control the configurable pipeline.","In one example, pipeline control channel  can be configured to accept, for example, \u201cplay\u201d, \u201cpause\u201d, and\/or \u201cseek\u201d commands from web application . In the instance of \u201cplay\u201d, pipeline control object  can be configured to set each component in the configurable pipeline to the run state. Optionally, a start or other command can be sent to one or more components that require it. In the instance of \u201cpause\u201d, pipeline control object  can be configured to set each component in the configurable pipeline to the paused state. In the instance of \u201cseek\u201d, pipeline control object  can be configured to set each component in the configurable pipeline to the pause state, send control signals for each component to flush their input\/output ports (i.e. return or deallocate remaining buffer objects), change the location in the stream at the component supplying the stream, and set each component to the run state. Optionally, a start or other command can be sent to one or more components that require it.","Pipeline control channel  allows the web application  to have a simpler interface to pipeline while still allowing web application  to control and configure the components included in pipeline . In one implementation the pipeline control object  can be implemented using a native binary module. Such an implementation can improve the efficiency of the pipeline control object  as compared to an implementation using, for example, JavaScript.",{"@attributes":{"id":"p-0061","num":"0060"},"figref":"FIG. 4E","b":["100","100","100","100","100","130"],"i":["e ","e ","e ","a ","e ","a","c. "]},"Direct passing of data between elements in the pipeline removes the overhead of having web application  pass data from data channel to data channel as is shown in pipeline . Since web application  typically processes data using an interpreted scripting language, the improvement in performance by passing data directly between native binary components can be significant. Such an improvement in performance can be useful in applications such as real-time communications. However, the direct passing of data can, in some implementations, prevent the use of an interpretive add-in component. But some implementations may allow for a combination of direct passing of data between pipeline elements and also between pipeline elements and web application .","The passing of data via data channels as described with respect to  can be accomplished using buffer objects. Buffer objects are programming constructs that provide access to memory. Buffer objects can be viewed as a type of memory pointer within web browser . Buffer objects can be implemented so that they are accessible using JavaScript by way of the DOM of the web browser .","Buffer objects can include some or all of the following elements: data type, data pointer, data size, properties, allocation methods, and accessor methods. The data type of a buffer object indicates what is stored in the memory controlled by the buffer object. For example, data types can include: raw data, compressed stream, uncompressed audio, uncompressed video, etcetera. In some implementations, a buffer object may have a generic data type, wherein any type of data can be stored.","The data pointer can be a memory pointer that includes a memory address of where the buffer object's data is stored. In some implementations, a buffer object may have multiple data pointers. The buffer object also includes at least one data size, which indicates an amount of memory available to the buffer object with reference to the data pointer(s). For example, the data size may be a number of bytes of available memory.","Buffer object properties can be used to describe some aspect of what is stored in its memory. For example, a property of an audio stream can include its sampling rate. In another example, a property of a video stream can include its color space (i.e. RGB, YUV, etcetera). Available properties can be preset based on the data type. Alternatively or additionally, properties can be custom defined for some buffer object implementations.","Allocation methods are used to allocate memory within the buffer object. The allocation method can be called to allocate memory when the buffer object is created, though in some implementations, it can be called at a later time. In some implementations, memory can only be allocated for a buffer object once. However, in other implementations, the memory available in a buffer object can be changed using the allocation methods over time.","Various implementations of accessor methods can be used to access data stored in a buffer object's memory. Some implementations can allow for direct access to the buffer object memory. In this case, the accessor method would return a memory pointer to allow for direct access to memory. However, such an implementation could be platform dependent (i.e. require differing implementations for various operating systems). A more generic implementation could include copying the data stored in the buffer object to a temporary memory location made accessible outside of the buffer object.","Another implementation of accessor methods can include providing access to data on a less granular basis. In other words, data can be made available on a pixel, block, line, frame, or other level depending on the type of data stored by the buffer object. Alternatively, data can be provided as return values from accessor functions of the buffer object. While such accessor functions may provide a less efficient way to access the data, they would provide a more generic and less platform dependent means of accessing the data.",{"@attributes":{"id":"p-0070","num":"0069"},"figref":"FIG. 5","b":["150","150"]},"Exemplary component  includes an input port . The input port  includes an input queue , input channel , and return channel . In one implementation, a circular buffer technique is used to pass data into component . The buffer technique includes passing buffer objects into the component via input channel . Input queue  is used to retrieve the contents of the memory referenced by the buffer objects. Once the contents are retrieved by component , the buffer object is returned via return channel  so that the memory referenced by the buffer object can be reused. Input port  can restrict the type of buffer objects accepted via input channel . For example, a video decoder component may only accept a buffer object containing compressed video data.","Exemplary component  also includes an output port . The output port  includes an output queue , return channel  and output channel . In one implementation, a circular buffer technique is used to pass data from component . The buffer technique includes passing buffer objects out of the component via output channel . The output queue  includes buffer objects that are used to store data output by component . The buffer objects are sent to the next element in the pipeline by way of output channel . Once the output data is retrieved from the buffer objects, they are returned to component  by way of return channel  so that they can be reused.","Component  can also include a command queue  and event handlers . Command queue  can be configured to accept commands for controlling component . For example, command queue  can include functionality to accept commands from web application  through the use of JavaScript code. Possible commands can include, for example, initializing or otherwise changing the state (described later with respect to ) of component . A component can have attributes that are configurable by web application . For example, an audio encoder component can have attributes including encoding bit rate, codec type, and sampling frequency. In another example, a blurring component can have an attribute defining how much to blur the video passed into the component. Components can be controlled asynchronously or synchronously, depending on the implementation and the component.","Event handlers  can be configured to provide information to web application  of the current state of component  and any events occurring in component . For example, event handlers  can be configured to notify web application  when the state of component  changes. In another example, a component  implementing a decoder can be configured to notify web application  upon a change in resolution, frame rate, or color of the video stream being decoded.","The core of component  is its processing module . Processing module  is used to process data retrieved by input port  to be output by output port . Processing module  can include any process for transforming data. For example, processing module  can include a decoder, quality enhancer, discrete cosine transform (DCT), digital rights management (DRM) decoder, color filter, resolution scaler, or any other type of processing module. While a component typically will transform the input data to produce a different output data, some components may not change the input data. For example, a component may be configured to simply inspect the data for a particular condition or occurrence.","A component can have a unique identification code (UID)  to allow the component to be identified for instantiation by web application . UID  can be generated using a UID generation process, or may be issued by a centralized UID repository. However, in some implementations, a UID  may not be required if the component is, for example, provided by web application .","The implementation of component  described is exemplary only and alternative implementations are possible and expected. For example, input port  and output port  may utilize different techniques of memory management to receive and send data. For example, buffer objects may be passed through the component  (i.e. instead of returning the pointer via return channel , the pointers are used to output data via output channel ). In such a technique, once at the end of the configurable pipeline, the buffer object's memory can be deallocated, or the buffer object may be passed back to the beginning of the configurable pipeline. Alternatively, some components may include different numbers of input and\/or output ports. In some implementations, processing module  can include merely storing some or all of a stream to a device or accessing some or all of a stream from a device.",{"@attributes":{"id":"p-0078","num":"0077"},"figref":["FIG. 6","FIG. 5"],"b":["190","150","150","192","150","194","150","194","150","194","150","196","198","200"]},"When in running state , component  retrieves input data from input port , processes the data using processing module , and outputs the processed data using output port . When in paused state , component  accepts input data using input port , but does not process any of the input data. The component  can transition to error state  if there is a fatal error and the component is unable to continue to perform normally. When component  is in error state , web application  can be notified by way of, for example, event handlers .","The above state diagram  is illustrative of only one potential implementation of a component . Alternative implementations are possible, including those that add, remove, and modify the states illustrated in state diagram .",{"@attributes":{"id":"p-0081","num":"0080"},"figref":"FIG. 7","b":["220","220","220","220"]},"In one exemplary implementation, clock component  includes updates , control , queries , callback module , and callbacks . The stream of one configurable pipeline is designated a master stream. The master stream updates clock component  via updates  with its current media time (i.e. indicating the current location of rendering the stream) and other information that can vary from implementation to implementation. For example, in one implementation, the other information can include playback speed. In a typical implementation, the master stream passes this information to updates  on a specific periodic interval. Between the updates, clock component  can maintain synchronization using a system clock of client . The information can be determined and passed from a renderer component, such as audio renderer  for a master audio stream.","Other streams that are to be synchronized by clock component  are slave streams output by other configurable pipelines. The slave streams can query for the current media time and other information of the master stream from queries  so that the slave streams can synchronize with the master stream. For example, a renderer component, such as video renderer  can query information for a slave video stream from queries . Alternatively, a renderer component can set up one or more callbacks  using callbacks module . A callback is a technique whereby a synchronized component can stop processing or \u201csleep\u201d and be triggered to continue processing by the callback when a particular media time or other condition is reached.","In other implementations, clock component  can be used to synchronize streams between components in the same configurable pipeline and before rendering. For example, clock component  could be used to synchronize the streams from frame buffer generator  and video decoder  with respect to mixer configuration ","Clock component  can be implemented as a native binary component or as an interpretive add-in component. For example, clock component  can be included in web browser  as a native binary component to improve the efficiency and ease of use of clock component . However, clock component  can alternatively be implemented as an interpretive add-in component. Such an implementation permits the use of clock component , even when a particular web browser  does not natively include clock component .","Clock component  can be accessed and controlled from web application  via control  having a JavaScript code API accessible via a DOM interface. For example, the web application  can initialize, start, stop, or update the playback speed controlled by clock component . Clock component  can be controlled similarly to other components in the configurable pipeline(s) that it is a part of, including by web application  directly and using an intermediate pipeline control object .","The embodiments of server  and\/or client  (and the algorithms, methods, instructions etc. stored thereon and\/or executed thereby) can be realized in hardware including, for example, IP cores, ASICSs, programmable logic arrays, optical processors, programmable logic controllers, microcode, firmware, microcontrollers, servers, microprocessors, digital signal processors or any other suitable circuit. In the claims, the term \u201cprocessor\u201d should be understood as encompassing any the foregoing, either singly or in combination. The terms \u201csignal\u201d and \u201cdata\u201d are used interchangeably. Further, portions of server  and client  do not necessarily have to be implemented in the same manner.","Further, in one example, server  or client  can be implemented using a general purpose computer\/processor with a computer program that, when executed, carries out any of the respective methods, algorithms and\/or instructions described herein. In addition or alternatively, for example, a special purpose computer\/processor can be utilized which can contain specialized hardware for carrying out any of the methods, algorithms, or instructions described herein.","Server  and client  can, for example, be implemented on computers in a webmail system. Client  can be implemented on a device such as a hand-held communications device (i.e. a cell phone). In this instance, server  can exchange HTTP communications with the communications device. Other suitable server  and client  implementation schemes are available. For example, client  can be a personal computer rather than a portable communications device.","Implementations or portions of implementations of the above disclosures can take the form of a computer program product accessible from, for example, a computer-usable or computer-readable medium. A computer-usable or computer-readable medium can be any tangible device that can, for example, contain, store, communicate, or transport the program for use by or in connection with any processor. The medium can be, for example, an electronic, magnetic, optical, electromagnetic, or a semiconductor device. Other suitable mediums are also available. Such computer-usable or computer-readable media can be referred to as non-transitory media, and may include RAM or other volatile memory or storage devices that may change over time.","The exemplary approaches herein have been described in order to allow easy understanding of the present invention and do not limit the present invention. On the contrary, the invention is intended to cover various modifications and equivalent arrangements included within the scope of the appended claims, which scope is to be accorded the broadest interpretation so as to encompass all such modifications and equivalent structure as is permitted under the law."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The description herein makes reference to the accompanying drawings wherein like reference numerals refer to like parts throughout the several views, and wherein:",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3A-D"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4A"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4B"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 4C"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 4D"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 4E"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 6","FIG. 5"]},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
