---
title: Internet usage data recording system and method employing a configurable rule engine for the processing and correlation of network data
abstract: A network usage data recording system and method employing an aggregation rule scheme for processing and correlation of network data is described. In one embodiment, the present invention provides a method for recording network usage. The method includes the step of defining a network data collector including an encapsulator, an aggregator and a data storage system. A set of network accounting data is received via the encapsulator. The network accounting data set is converted to a standard data format. The network accounting data set is processed via the aggregator, including the steps of defining a rule chain and applying the rule chain to the network accounting data set to construct an aggregation tree including creating an aggregated network accounting data set. The aggregated network accounting data set is stored in the data storage system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07124180&OS=07124180&RS=07124180
owner: Hewlett-Packard Development Company, L.P.
number: 07124180
owner_city: Houston
owner_country: US
publication_date: 20000427
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["This patent application is related to the following Non-Provisional U.S. Patent Applications: Ser. No. 09\/559,438, entitled \u201cInternet Usage Data Recording System And Method Employing Batch Correlation Of Independent Data Sources,\u201d U.S. Pat. No. 7,024,468, entitled \u201cInternet Usage Data Recording System And Method With Configurable Data Collector System,\u201d; and Ser. No. 09\/559,693, entitled \u201cInternet Usage Data Recording System And Method Employing Distributed Data Processing and Data Storage: which are all filed on even date herewith, are all assigned to the same assignee as the present application, and are all herein incorporated by reference.","The present invention relates to a network usage data recording system and method, and more particularly, to a network usage data recording system and method employing a configuration rule engine for processing and correlation of network data.","Network systems are utilized as communication links for everyday personal and business purposes. With the growth of network systems, particularly the Internet, and the advancement of computer hardware and software technology, network use ranges from simple communication exchanges such as electronic mail to more complex and data intensive communication sessions such as web browsing, electronic commerce, and numerous other electronic network services such as Internet voice, and Internet video-on-demand.","Network usage information does not include the actual information exchanged in a communications session between parties, but rather includes metadata (data about data) information about the communication sessions and consists of numerous usage detail records (UDRs). The types of metadata included in each UDR will vary by the type of service and network involved, but will often contain detailed pertinent information about a particular event or communications session between parties such as the session start time and stop time, source or originator of the session, destination of the session, responsible party for accounting purposes, type of data transferred, amount of data transferred, quality of service delivered, etc. In telephony networks, the UDRs that make up the usage information are referred to as a call detail records or CDRs. In Internet networks, usage detail records do not yet have a standardized name, but in this application they will be referred to as internet detail records or IDRs. Although the term IDR is specifically used throughout this application in an Internet example context, the term IDR is defined to represent a UDR of any network.","Network usage information is useful for many important business functions such as subscriber billing, marketing & customer care, and operations management. Examples of these computer business systems include billing systems, marketing and customer relationship management systems, customer churn analysis systems, and data mining systems.","Several important technological changes are key drivers in creating increasing demand for timely and cost-effective collection of Internet usage information. One technological change is the dramatically increasing Internet access bandwidth at moderate subscriber cost. Most consumers today have only limited access bandwidth to the Internet via an analog telephony modem, which has a practical data transfer rate upper limit of about 56 thousand bits per second. When a network service provider's subscribers are limited to these slow rates there is an effective upper bound to potential congestion and overloading of the service provider's network. However, the increasing wide scale deployments of broadband Internet access through digital cable modems, digital subscriber line, microwave, and satellite services are increasing the Internet access bandwidth by several orders of magnitude. As such, this higher access bandwidth significantly increases the potential for network congestion and bandwidth abuse by heavy users. With this much higher bandwidth available, the usage difference between a heavy user and light user can be quite large, which makes a fixed-price, all-you-can-use pricing plan difficult to sustain; if the service provider charges too much for the service, the light users will be subsidizing the heavy users; if the service provider charges too little, the heavy users will abuse the available network bandwidth, which will be costly for the service provider.","Another technological change is the rapid growth of applications and services that require high bandwidth. Examples include Internet telephony, video-on-demand, and complex multiplayer multimedia games. These types of services increase the duration of time that a user is connected to the network as well as requiring significantly more bandwidth to be supplied by the service provider.","Another technological change is the transition of the Internet from \u201cbest effort\u201d to \u201cmission critical\u201d. As many businesses are moving to the Internet, they are increasingly relying on this medium for their daily success. This transitions the Internet from a casual, best-effort delivery service into the mainstream of commerce. Business managers will need to have quality of service guarantees from their service provider and will be willing to pay for these higher quality services.","Due to the above driving forces, Internet service providers are moving from current, fixed-rate, all-you-can-use Internet access billing plans to more complex billing plans that charge by metrics, such as volume of data transferred, bandwidth utilized, service used, time-of-day, and subscriber class, which defines a similar group of subscribers by their usage profile, organizational affiliation, or other attributes. An example of such a rate structure might include a fixed monthly rate portion, a usage allocation to be included as part of the fixed monthly rate (a threshold), plus a variable rate portion for usage beyond the allocation (or threshold). For a given service provider there will be many such rate structures for the many possible combinations of services and subscriber classes.","Network usage data recording systems are utilized for collecting, correlating, and aggregating network usage information as it occurs (in real time or near real time) and creating UDRs as output that can be consumed by computer business systems that support the above business functions. It may be necessary to correlate different types of network usage data obtained from independent network data sources to obtain information required by certain usage applications.","For billing applications, network usage data is correlated with network session information. Network usage data for a given usage event typically includes a source IP address, a destination IP address, byte count or packet counts (i.e., amount of data transferred across a given connection) and a time stamp. Network usage data does not identify whom the user or billing party was that actually performed the action or usage event. Network session information typically includes a source IP address, a time stamp (e.g., start time and end time) and a user name. A usage application for billing purposes requires user names and byte counts. As such, network usage data must be correlated with network session information in order to create a usage record having an association between a billable account and the usage event.","In known usage data recording systems, network usage data received from a network usage data metering source and network session information received from a network session data metering source are fed directly into a central processing system for correlation of the network usage data and network session information. The network usage data and network session information are fed into the central processing system in real time or near real time, as the usage events occur. The network usage data metering source is independent from the network session metering source. The network usage data and network session information is collected and transferred at different rates (i.e., different speeds) and in different data formats, which must be compensated for at the central processing system. It is necessary to provide a queuing process at the central processing system in order to link up the network usage event with the correct network session event. Such queuing often creates a bottleneck at the central processing system. Also, if an error occurs at the central processing system (e.g., loss of power, data fault or other error), data which has not yet been correlated and persistently stored, such as queue data, may be lost.","For reasons stated above and for other reasons presented in greater detail in the Description of the Preferred Embodiment section of the present specification, more advanced techniques are required in order to more compactly represent key usage information and provide for more timely extraction of the relevant business information from this usage information.","The present invention is a network usage data recording system and method, and more particularly, a network usage data recording system and method employing a configurable rule engine for processing and correlation of network data.","In one embodiment, the present invention provides a method for recording network usage. The method includes the step of defining a network data collector including an encapsulator, an aggregator and a data storage system. A set of network accounting data is received via the encapsulator. The network accounting data set is converted to a standard data format. The network accounting data set is processed via the aggregator, including the steps of defining a rule chain and applying the rule chain to the network accounting data set to construct an aggregation tree including creating an aggregated network accounting data set. The aggregated network accounting data set is stored in the data storage system.","The step of applying the rule chain to the network accounting data set to construct the aggregation tree includes the step of applying a rule from the rule chain to the network accounting data set to define a group node. In one aspect, the rule is a match rule. In another aspect, the step of applying the rule chain to the network accounting data set to construct the aggregation tree includes the step of applying a set of match rules to the network accounting data set to define a hierarchy of group nodes within the aggregation tree. The step of applying the rule chain to the network accounting data set to construct the aggregation tree includes the step of applying an aggregation rule to the match group node to create the aggregated network accounting data set.","The step of applying the rule chain to the network accounting data set to construct the aggregation tree includes the step of applying a data manipulation rule to the network usage data. In one aspect, the method further includes the step of defining the data manipulation rule to be an adornment rule. In another aspect, the method further includes the step of defining the data manipulation rule to be a filtering rule.","In one aspect, the network accounting data set is a set of session data. In another aspect, the network accounting data set is a set of usage data.","In one aspect, the method further includes the step of defining a data flush interval. The step of storing the aggregated network accounting data set includes the step of transferring the aggregated network accounting data set to the data storage system after a period of time associated with the data flush interval. The method further includes the step of defining a rule within the rule chain by a Java object class, and allowing additional rule types to be added to the rule chain corresponding to the Java object class.","In another embodiment, the present invention provides a method for recording network usage including correlating of network usage information and network session information. The method includes the step of defining a network data correlator collector including an encapsulator, an aggregator, and a data storage system. The set of network session data is received via the encapsulator. The network session data is processed via the aggregator, including the steps of defining a first rule chain and applying the first rule chain to the network session data to construct an aggregation tree. A set of network usage data is received via the encapsulator. The network usage data is processed via the aggregator, including the steps of defining a second rule chain, applying the second rule chain to the network usage data and the aggregation tree to construct a correlated aggregation tree. A correlated data set is determined from the correlated aggregation tree. The correlated data set is stored in the data storage system.","In one aspect, the network session data set is in a standard data format, received from a session data collector having an encapsulator, an aggregator and a data storage system. The network usage data set is in the standard data format, received from a usage data collector having an encapsulator, an aggregator and a data storage system. In one aspect, the method further includes the step of defining the first rule set to be different than the second rule set.","In another embodiment, the present invention provides a method for recording network usage. The method includes the step of defining a first network data collector including a first encapsulator, a first aggregator, and a first data storage system. A first set of network data is received via the first encapsulator. A first network data set is processed via the first aggregator, including the steps of defining an aggregation rule chain, determining a first set of aggregated data by applying the aggregation rule chain to the first network data set. The first aggregated network data set is stored in the first data storage system.","The step of applying the aggregation rule chain to the first network data set may further include the steps of constructing an aggregation tree, and determining the first aggregated network data set from the aggregation tree. The step of constructing an aggregation tree may further include the steps of defining the first network data set to include a first network data event and a second network data event. The aggregation rule chain is applied to the first network data event to construct a hierarchy of group nodes within the aggregation tree. The aggregation rule chain is applied to the second network data event to locate similar group nodes according to a predefined set of match rules, and if no matching group nodes exist, extending the hierarchy of group nodes within the aggregation tree by creating additional group nodes.","The step of applying the aggregation rule chain to the first network data event further includes the steps of defining the aggregation rule chain to include a first match rule for matching source IP address. The first network data event is defined to include a first source IP address. The first match rule is applied to the first network data event, including determining whether the aggregation tree includes a first group node matching the first IP address. If a matching first group node does not exist, creating the first group node for the first source IP address.","The step of applying the aggregation rule chain to the first network data event further includes the steps of defining the aggregation rule chain to include a second match rule for matching destination IP address. The first network data event is defined to include a first destination IP address. The second match rule is applied to the first network data event, including determining whether the aggregation tree includes a second group node matching the first destination IP address. If a matching second group node does not exist, the second group node is created for the first destination IP address.","The step of applying the aggregation rule chain to the first network data event further includes the step of defining the aggregation rule set to include an aggregation rule. The first network data event is defined to include a port number and volume information. The aggregation rule is applied to the first network data event, including copying the port number, source IP address, destination IP address and volume information to the second group node.","The method may further include the steps of defining a second network data collector including a second encapsulator, a second aggregator, and a second data storage system. A second set of network data is received via the second network encapsulator. The second network data set is processed via the second aggregator, including the steps of defining a second rule chain, applying the second rule chain to the second network data set to define a second set of aggregated network data. The second aggregated network data set is stored in the second data storage system.","In another embodiment, the present invention provides a network usage recording system having a network data collector. The network data collector includes an encapsulator for receiving a set of network accounting data set. An aggregator is provided for processing the network accounting data set, the aggregator including a defined rule chain, wherein the aggregator applies the rule chain to the network accounting data set to construct an aggregation tree, and determines a set of aggregated network accounting data from the aggregation tree. A data storage system is provided for storing the aggregated network accounting data set.","The process of the aggregator applying the rule chain to the network accounting data set to construct the aggregation tree performs data reduction on the network data. The encapsulator receives the network accounting data set and converts the network accounting data set to a standard data format.","In another embodiment, the present invention provides a network usage recording system having a network data correlator collector. The network data correlator collector includes an encapsulator which receives a set of network session data. An aggregator is provided for processing the network session data set. The aggregator includes a defined first rule chain, wherein the aggregator applies the first rule chain to the network session data set to construct an aggregation tree. The encapsulator receives a set of network usage data. The aggregator processes the network usage data set. The aggregator includes a defined second rule chain, wherein the aggregator applies the second rule chain to the network usage data set and the aggregation tree to construct a correlated aggregation tree, and determines a correlated data set from the correlated aggregation tree. A data storage system is provided for storing the correlated data set.","In one aspect, the network session data set is in a standard data format received from a session data collector having an encapsulator, an aggregator, and a data storage system. The network usage data set is in the standard data format received from a usage data collector having an encapsulator, an aggregator and a data storage system. In one aspect, the first rule chain is different than the second rule chain.","Although the term network is specifically used throughout this application, the term network is defined to include the Internet and other network systems, including public and private networks that may or may not use the TCP\/IP protocol suite for data transport. Examples include the Internet, Intranets, extranets, telephony networks, and other wire-line and wireless networks. Although the term Internet is specifically used throughout this application, the term Internet is an example of a network and is used interchangeably herein. The terms network data and network accounting data are used to include various types of information associated with networks, such as network usage data and network session data. The term \u201cnormalized metered event\u201d as used herein refers to a standard or universal data format, which allows data to be useable by multiple components.","In the following detailed description of the preferred embodiments, reference is made to the accompanying drawings that form a part hereof and show, by way of illustration, specific embodiments in which the invention may be practiced. It is to be understood that other embodiments may be utilized and structural or logical changes may be made without departing from the scope of the present invention. The following detailed description, therefore, is not to be taken in a limiting sense, and the scope of the present invention is defined by the appended claims.","A network usage data recording system according to the present invention is illustrated generally at  in . Network usage data recording system  and other embodiments of the network usage data recording system according to the present invention include several main components, each of which is a software program. The main software program components of the network usage data recording system according to the present invention run on one or more computer or server systems.","In one embodiment, each of the main software program components runs on its own computer system. In other embodiments, the main software program components run concurrently on the same computer system. In one aspect, at least a portion of each software program is written in Java programming language, and each of the main components communicate with each other using a communication bus protocol, which in one embodiment is common object request broker architecture (CORBA) based. Other programming languages and communication bus protocols suitable for use with the present invention will become apparent to one skilled in the art after reading the present application.","Network usage data recording system  provides a system and method which employs batch correlation of data from independent data sources. In one embodiment, network usage data recording system  includes a first data collector , a second data collector , a data correlator collector  and an internet data record (IDR) generator . First data collector  is coupled to data correlator collector  via communication link . Second data collector  is coupled to data correlator collector  via communication link . Data correlator collector  is coupled to IDR generator  via communication link . In one embodiment, first data collector , second data collector , data correlator collector  and IDR generator  communicate via a standard bus communication protocol. In one exemplary embodiment, the standard bus protocol is a CORBA-based bus protocol.","In operation, first metered data source  and second metered data source  provide communication data (i.e., network usage information) for communication sessions over the network . The network usage information does not include the actual information exchanged in a communication session between parties, but rather includes metadata (data about data) information about the communication session, such as the session start time and stop time, source or originator of the session, destination of the session, responsible party for accounting purposes, type of data transferred, amount of data transferred, quality of service delivered, etc.","In one exemplary embodiment, network  is the Internet, first metered data source  is a usage data source and second metered data source  is a session data source. First data collector  receives a first set of network data  from first metered data source . The first set of network data  is a set of network usage information records of events. First data collector  converts the first set of network data  to a standard data format usable by the data correlator collector . In one preferred embodiment, the standard data format is a normalized metered event (NME). The first data collector  stores the first set of network data as a first set of NMEs . The NME data format is described in detail later in this application.","Second data collector  receives a second set of network data  (e.g. a data stream) from second metered data source . The second set of network data  is a set of network usage information records or events. In one exemplary embodiment, second metered data source  is a session data source. The second data collector  converts the second set of network data  to the standard format, which in one exemplary embodiment is a set of NMEs. The second data collector  stores the second set of network data as a second set of NMEs . Data correlator collector  queries the first data collector  for the first set of NMEs  via communication link . Next, the data correlator collector  and queries the second data collector  for the second set of NMEs  via communication link . The data correlator collector  correlates the first set of NMEs  with the second set of NMEs  to define a set of correlated NME data.","Data correlator collector  provides for batch correlation of the network data collected via first data collector  and second data collector . As such, the data does not have to be correlated in real time or near real time (i.e., as the data is collected). The data correlator collector  queries the first data collector  and second data collector  for network data at a desired time, wherein the queried network data is associated with a desired time interval. The data correlator collector  may include a preset query interval which may be set to a predefined time interval (e.g., every 15 minutes). Since the data is not required to be correlated in real time or near real time, first data collector  and second data collector  continue to collect, process and store data independent of the correlation process of data correlator collector . Batch correlation by data correlator collector  does not require additional processes necessary to handle a real time flow of data from first data collector  and second data collector , such as a queuing process.","First data collector  has the ability to perform processing of network data including data reduction before the data is received by data correlator collector . Similarly, second data collector  can perform processing of network data including data reduction before the data is received by data correlator collector . Data correlator collector  stores the correlated data output. IDR generator collector  queries the data correlator collector  for the correlated data output, and converts the correlated data to a data format usable by usage application . Typical usage applications  may include billing systems, strategic marketing, capacity planning or data mining systems.","In , a block diagram is shown illustrating one exemplary embodiment of a collector used in the network usage data recording system  according to the present invention. The collector  is a configurable collector. As such, collector  can be configured to operate as first data collector , second data collector , data correlator collector  or IDR generator collector . For discussion purposes, the collector is described herein in reference to first data collector . Collector  includes an encapsulator , an aggregator  and a data store . Encapsulator  receives a first set of network data  from first metered data source . The first set of network data  is in a data format which is collected by first metered data source  (i.e., a raw data format). Encapsulator  operates to convert the data into a standard data format useable by data correlator collector . In particular, encapsulator  is configured to receive the data in the first set of network data  in its native format, and includes parser  which operates to \u201cparse\u201d or separate out the data for converting it into fields of a standard data format. In one preferred embodiment, the standard data format is a normalized metered event (NME) format. Aggregator  receives the NMEs from encapsulator  and operates to \u201caggregate\u201d or process the NMEs, and temporarily stores the aggregated NMEs at storage location . The aggregated NMEs are periodically flushed to data storage system . Data storage system  may consist of a storage location on a disk surface of a disk drive or other persistent data storage. Upon being queried by data correlator collector , the aggregated NMEs are \u201cflushed\u201d from data storage system  and read by or transferred to data correlator collector .","In , a block diagram is shown illustrating one exemplary embodiment of aggregator . Aggregator  includes a rule engine . The set of NMEs  received by aggregator  are \u201caggregated\u201d or processed according to rule engine . Rule engine  operates to process the NMEs according to a predefined aggregation scheme or a set of rules. For example, aggregator  may operate to correlate, combine, filter or adorn (i.e., to populate additional fields in an NME) the NMEs according to a predefined rule set. The processing of NMEs via an aggregator using a rule engine or rule scheme is described in detail later in this application.",{"@attributes":{"id":"p-0063","num":"0062"},"figref":["FIG. 4","FIG. 1"],"b":["100","50","102","104","106","108"]},"In step , a data correlator is defined. In step , the session data collector is queried by the data correlator for the session data at a desired time. In step , the usage data collector is queried by the data correlator for the usage data at a desired time. In step , the session data and the usage data are correlated to provide correlated data.","In , a block diagram is shown illustrating another exemplary embodiment of a network usage data recording system . The network usage data recording system  is similar to the network usage data recording system  previously described herein. The network usage data recording system  provides a system and method which employs batch correlation of data from independent sources. In one embodiment, network usage data recording system  includes session data collector , usage data collector , other sources session data collector , other sources usage data collector , first correlator collector , second correlator collector , aggregator collector , API  and configuration server . In one embodiment, the devices within network usage data recording system  communicate with each other using a bus protocol, and more preferably, a standard bus protocol, and in one preferred embodiment, the standard bus protocol is a CORBA bus protocol.","In the exemplary embodiment shown, network usage data recording system  receives raw data from network data sources . The network data sources  are positioned at various points on the Internet  to receive raw network usage data (i.e., data in its native format). In one exemplary embodiment shown, the network data sources  include a session data source , usage data sources , other session data sources  and other usage data sources . The network data sources  provide raw usage data to session data collector , usage data collector , other sources session data collector  and other sources usage data collector , indicated by communication links , ,  and .","In one aspect, session data source  is a fixed IP session source (e.g., subscriber management system) which provides a flat file for associating or mapping IP addresses or ranges of IP addresses to a billable account number or other billable entity. In one aspect, usage data collector  is a Cisco NetFlow enabled router which provides raw network usage data via a continuous stream of UDP packets or records which contain usage information such as source IP address, destination IP address, port number, direction, protocol, etc. Other session data sources  may include other session data from RADIUS, DHCP, LDAP or Database lookup. Other usage data sources  provide raw usage data provided from SNMP, service access logs, network probes, firewalls, etc.","Session data collector  is in communication with first correlator collector  via communication link . Usage data collector  is in communication with first correlator collector  via communication link . Other sources session data collector  is in communication with second correlator collector  via communication link . Other sources usage data collector  is in communication with second correlator collector  via communication link . First correlator collector  is in communication with aggregator collector  via communication link , and is in communication with API  via communication link . Second correlator collector  is in communication with aggregator collector  via communication link . Aggregator collector  and API  are in communication with usage applications  via communication links , , respectively. Configuration server  is in communication with session data collector , usage data collector , other sources session data collector , other sources usage data collector , first correlator collector , second correlator collector , aggregator collector  and API  via communication bus .","Session data collector  queries session data source  for raw session data. Session data collector  receives the raw session data and converts the raw session data to a standard format. In one preferred embodiment, session data collector  converts the raw session data to NMEs. Session data collector  may also perform other processing operations on the session data, such as data reduction, and stores the session data in data storage system . Similarly, usage data collector  queries usage data source  for raw usage data. The usage data collector  receives the raw usage data from usage data source  and converts the raw usage data from its native format to an NME format. Usage data collector  may also further process the usage data, such as performing data reduction on the usage data. The usage data is then stored in usage data storage system . Other sources session data collector  queries other session data sources  for raw session data. Other sources session data collector  receives the session data from other session data sources  in raw form and converts it to a standardized data format, which in one preferred embodiment is an NME format. Other sources session data collector  may further process the session data, such as performing data reduction operations on the session data. The session data is then stored in session data storage system . Other sources usage data collector  receives and processes other usage data from other usage data sources  in a similar manner, and stores the usage data in data storage system .","First correlator collector  queries session data collector  for session data stored in session data storage system , and processes the session data. First correlator collector  queries usage data collector  for usage data stored in usage data storage system  and processes the usage data. In particular, the session data is correlated with the usage data, and the correlated data is stored in first correlator data storage system .","Similarly, second correlator collector  queries other sources session data collector  for the session data stored in session data storage system . Next, second correlator collector  queries the other sources usage data collector  for other data stored in other data storage system . The data is correlated in second correlator collector  and stored in second correlator collector data storage system . Aggregator collector  queries the first correlator collector  for correlated data stored in data storage system , and queries second correlator collector  for correlated data stored in data storage system . The aggregator collector  operates to correlate the two sets of data, and convert the data to a data format necessary for the specific usage application . In one embodiment, the aggregator collector converts the correlated data sets to an internet data record (IDR) format and stores the IDRs in aggregator collector storage system . The stored IDRs are available for use by usage application . Alternatively, API  may directly query the correlated data stored in data storage system , and provide the output to usage application .","In one preferred embodiment, the network usage data recording system  is a flexible, configurable system. The session data collector , usage data collector , other sources session data collector , other sources usage data collector , first correlator collector , second correlator collector , aggregator collector  (hereinafter as a group referred to as \u201ccollectors\u201d) are all formed from the same modular collector components (i.e., an encapsulator, an aggregator, and a data storage system). Each component that makes up each of these collectors is individually configurable. The configuration information for each of these collectors is stored at a centralized location at the configuration server , and managed by configuration server . At start-up, the collectors query the configuration server  to retriever their configuration. Other applications that interact with the collectors also query the configuration server to locate the collectors.","Collector Architecture","Collectors , , , , , ,  are made up of three configurable components and are similar to the collectors previously described herein. In , a block diagram is shown illustrating one exemplary embodiment of the base architecture for each of the configurable collectors , , , , , . The collector architecture allows the same basic components to be used to perform different functions within the network usage data recording system based on how they are configured. As such, the collector  can be configured to operate as a data collector, a correlation collector (\u201ca collector of collectors\u201d), an aggregator collector, etc. In one preferred embodiment, the collector is defined by a configurable Java object class.","Collector  includes an encapsulator , an aggregator , and a data storage system . The encapsulator  operates to read raw usage information from a metered source and convert it to a standard data format, and in particular, convert it to normalized metered events (NMEs). The encapsulator  is configurable for reading and converting usage data from a variety of data sources. The aggregator  processes the NMEs. This mainly involves combining like NMEs together to achieve data reduction, but may also include other processing such as filtering and adorning the data by adding or modifying attributes in the NMEs. The aggregator  operates to periodically flush the NMEs to the data storage system . The data storage system  is responsible for storing the NMEs. The data storage system  also supports queries so other collectors or applications can retrieve specific sets of data (e.g., for specific time intervals) from the data storage system .","The encapsulator , aggregators  and data storage system  are each separately configurable components of collector architecture . As such, each component can be changed without impacting the other components. The configuration server  stores configuration data for each collector and data storage system .","Collector  further includes a collector shell  in communication with encapsulator , aggregator  and data storage system . In particular, collector shell  includes collector operator  and query manager . Collector operator  is in communication with encapsulator , aggregator  and data storage system  via communication bus . Collector shell  operates as an interface between configuration server  and encapsulator , aggregator  and data storage system . At start-up, the collector shell  queries the configuration server to retrieve the configuration data from configuration server  that is specific to collector , for encapsulator , aggregator  and data storage system .","Query manager  operates as an interface between data storage system  and\/or aggregator  and other collectors which query data storage system  to obtain usage data stored therein. The query manager  communicates with other collectors or applications via communication link . Alternatively, data storage system  may be directly accessed via communication link .","Collector  may also include a statistics log . Statistics log  is in communication with encapsulator , aggregator , data storage system  and collector operator , indicated by links , , , . Statistics log  logs statistical data from encapsulator , aggregator  and data storage system . Exemplary statistical data includes number of NMEs generated by the encapsulator, number of NMEs in the aggregation tree, number of NMEs written to datastore in last flush, error counts, etc. The statistics log  can be queried by configuration server  via collector operator , for recording of logged statistics.","Encapsulator  reads metered usage information from a metered source  (e.g., network data sources , , , ). The encapsulator  converts the usage information to normalized metered events (NMEs). The function of encapsulator  is configurable based on the type of usage information it receives and converts into NMEs. In one exemplary embodiment, the types of encapsulators include a demo encapsulator, a rolling file encapsulator, a directory encapsulator, a UDP encapsulator, a telnet encapsulator, an SNMP encapsulator, a collector encapsulator and a polling mux encapsulator. The demo encapsulator allows a stream of NMEs to be generated. The fields in the NMEs and their values can be controlled. This type of encapsulator is useful for demonstrating the network usage data recording system, testing aggregation schemes and internet data record formatting. The rolling file encapsulator reads event data from log files and produces NMEs to be aggregated (data reduction) at the aggregator level. The directory encapsulator reads event data from all the files in a directory, and then quits. This type of encapsulator can be used for batch processing.","The UDP encapsulator reads event data exported by certain network devices and produces NMEs to be processed by the aggregator . One suitable network encapsulator processes NetFlow datagrams that are exported by any NetFlow enabled device. The telnet encapsulator attaches to a system via telnet commands and issues certain accounting commands to retrieve usage information. One embodiment of using this encapsulator is the retrieval of IP accounting from routers commercially available under the trade name CISCO. The SNMP encapsulator is used to retrieve event data from a source via SNMP. The collector encapsulator retrieves NME data that has already been processed by other collectors. This type of encapsulator could be used in a correlator collector or an aggregator collector. The polling mux encapsulator can run several polling based encapsulators (the collector encapsulator, telnet encapsulator or SNMP encapsulator) in parallel. Correlators use this type of encapsulator. The attributes for the above encapsulators define how NMEs are obtained from an input log file, network or other collectors.","In one embodiment, encapsulator  includes parser , the role of parser  is to parse event data received by the encapsulator and create an NME to be processed by aggregator . The NMEs are made up of attributes such as a usage records start time, end time, source IP address, destination IP address, number of bytes transferred, user's login ID and account number, etc. The parser  is configured to recognize event fields from the input source and map each one (i.e., normalize them) to an NME format. Alternatively, an encapsulator may not need a parser.","NMEs are composed of attributes that correspond with various fields of some network usage event. The attributes can be of several different types, depending on what type of data is being stored. In one exemplary embodiment, the network usage data recording system may include the following attribute types:",{"@attributes":{"id":"p-0083","num":"0082"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Type","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"StringAttribute","Used to store ASCII text data"]},{"entry":[{},"IntegerAttribute","Used to store 32 bit signed integers"]},{"entry":[{},"IPAddrAttribute","Used to store an IP address"]},{"entry":[{},"TimeAttribute","Used to store a date\/time"]},{"entry":[{},"LongAttribute","Used to store 64 bit signed integers"]},{"entry":[{},"FloatAttribute","Used to store 32 bit single precision"]},{"entry":[{},{},"floating point numbers"]},{"entry":[{},"DoubleAttribute","Used to store 64 bit double precision"]},{"entry":[{},{},"floating point numbers"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"Each NME attribute (i.e., NME field) is mapped to an attribute type. The following table lists one exemplary embodiment of NME attribute names, with their associated type and description.",{"@attributes":{"id":"p-0085","num":"0084"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"105pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Names","Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["StartTime","TimeAttribute","The time the event began"]},{"entry":["EndTime","TimeAttribute","The time the event ended"]},{"entry":["SrcIP","IPAddrAttribute","The IP address of the sender"]},{"entry":["DstIP","IPAddrAttribute","The IP address of the receiver"]},{"entry":["SrcPort","IntegerAttribute","The port number of the sender"]},{"entry":["DstPort","IntegerAttribute","The port number of the receiver"]},{"entry":["NumPackets","IntegerAttribute","The number of packets"]},{"entry":["NumBytes","IntegerAttribute","The number of bytes"]},{"entry":["SrcIPStart","IPAddrAttribute","The start of a range of IP addresses"]},{"entry":["SrcIPEnd","IntegerAttribute","The end of a range of IP addresses"]},{"entry":["TxBytes","IntegerAttribute","The number of bytes transmitted"]},{"entry":["RxBytes","IntegerAttribute","The number of bytes received"]},{"entry":["TxPackets","IntegerAttribute","The number of packets transmitted"]},{"entry":["RxPackets","IntegerAttribute","The number of packets received"]},{"entry":["SrcAS","IntegerAttribute","The autonomous system number of"]},{"entry":[{},{},"the source"]},{"entry":["DstAS","IntegerAttribute","The autonomous system number of"]},{"entry":[{},{},"the destination"]},{"entry":["SrcPortName","StringAttribute","The string name of the source port"]},{"entry":["DstPortName","StringAttribute","The string name of the destination"]},{"entry":[{},{},"port"]},{"entry":["LoginState","StringAttribute","The state of a login event"]},{"entry":["RouterID","Attribute","The router ID of the router"]},{"entry":[{},{},"producing the event"]},{"entry":["LoginID","StringAttribute","The login ID of the user producing"]},{"entry":[{},{},"the event"]},{"entry":["AcctNum","StringAttribute","The account number of the entity"]},{"entry":[{},{},"responsible for the event"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"Other NME attributes may be utilized. Other NME attributes will become apparent to those skilled in the art after reading the present application.","Aggregator  receives a stream of NMEs from encapsulator  and operates to process, filter, and organize the NME data. Typically, the aggregator process results in a reduction in the amount of data. In particular, each normalized metered event collected at the encapsulator  is pushed to the aggregator  and stored in an aggregation tree. The aggregator  creates the aggregator tree. How the nodes or branches of the aggregation tree are established depends on a set of configurable rules, termed a rule chain. Rules in a rule chain are applied to inbound NMEs by the rule engine, a logical entity existing in the aggregator. The bottom nodes or \u201cleaf\u201d nodes of each aggregation tree are termed aggregated NMEs. The aggregated NMEs are stored in data storage system .","How often the aggregated NMEs are stored in the data storage system  depends on a configurable policy called a \u201cflush policy\u201d. When NMEs are stored to the data storage system , the encapsulator recovery information (ERI) of the last successfully stored NME is also saved in the data storage system  to provide a checkpoint for recovery if necessary.","A simple collector consists of a single aggregation scheme containing a single chain of rules to construct an aggregation tree. Alternatively, the collector configuration may include multiple aggregation schemes or a correlation aggregation scheme for correlating collectors. In particular, if it is desired to organize inbound NMEs into multiple aggregation trees, the aggregator can be configured to add additional aggregation schemes under a single collector. In this embodiment, an inbound NME is processed by each rule chain and aggregated into each tree following its separate rule policy. One exemplary use of a multiple aggregation scheme would be for gathering two types of usage data in a single collector. For example, detailed usage data (e.g., grouped by source address, destination address and destination port) may be aggregated using one scheme and summary usage information (e.g., only grouped by port to identify protocol distribution) may be aggregated using another aggregation scheme. The separate aggregation schemes are then stored in separate tables or files in the data storage system (i.e., persistent storage), because each may aggregate different fields from the input NMEs.","In regard to correlation aggregation schemes, correlating usage events with session events is considered a special case of aggregation. In this embodiment, a single aggregation scheme (and aggregation tree) is manipulated using two different rule chains. The first rule chain is used for organizing session NMEs and the second rule chain is used for locating the appropriate session in the tree for inbound usage NMEs. One exemplary embodiment of a simple aggregation scheme and another exemplary embodiment of a correlation aggregation scheme is detailed later in this specification.","A collector's aggregation policy is controlled by its configuration. The configuration for an aggregator is structured as follows:",{"@attributes":{"id":"p-0092","num":"0091"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Aggregator-","there is always exactly one aggregator object"]},{"entry":[{},{},"configured per collector. The configuration of this"]},{"entry":[{},{},"aggregator specifies the aggregation scheme (or"]},{"entry":[{},{},"schemes) to be used."]},{"entry":[{},"Flush Policy-","the flush policy controls when aggregated NMEs"]},{"entry":[{},{},"are moved from the in-memory structures to the"]},{"entry":[{},{},"persistent data storage system. When choosing"]},{"entry":[{},{},"this policy the cost of recovery is balanced versus"]},{"entry":[{},{},"the amount of aggregation to be achieved. There"]},{"entry":[{},{},"is only one flush policy per collector."]},{"entry":[{},"Aggregation","There may be one or more aggregation schemes"]},{"entry":[{},"Scheme-","configured for a collector. Each aggregation"]},{"entry":[{},{},"scheme has a sequence of rules configured that"]},{"entry":[{},{},"control how the aggregation tree is assembled. In"]},{"entry":[{},{},"the case of correlation, two rule chains are"]},{"entry":[{},{},"configured for a single aggregation scheme."]},{"entry":[{},"Rules-","Rules are the building blocks for constructing an"]},{"entry":[{},{},"aggregation scheme. The rules control how the"]},{"entry":[{},{},"aggregation tree is constructed, and how NMEs are"]},{"entry":[{},{},"manipulated and stored as they pass through the"]},{"entry":[{},{},"aggregation tree."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"The data storage system  has two primary functions. First, the data storage system  provides persistent storage of all aggregated NMEs and recovery information. In particular, aggregated NMEs are periodically flushed from the aggregator to the data storage system . At that time, recovery information is also persistently stored in the data storage system . The recovery information is the collector state information which is used during crash recovery. In particular, where an encapsulator is reading from a file, the recovery information indicates the encapsulator's position in the file at the time the flush occurred. As such, if power is lost and the collector is restarted, the collector operator retrieves the recovery information from the data storage system  and sends it to the encapsulator, such that the encapsulator can reposition (or position) itself at the appropriate point in the data storage system the encapsulator is reading from.","In one aspect, there are three types of data storage systems . In a first embodiment, the data storage system is used to store both the NMEs themselves as well as metadata related to the stored NMEs in a database. In a second embodiment, the data storage system uses the underlying file system to store the actual NMEs. Metadata related to these NMEs is stored in the data storage system. Significant performance advantages can be achieved with this data storage system when large volumes of NMEs are being stored. In one preferred embodiment, the second type of data storage system is used only with usage sources. The third type of data storage system stores the NMEs in internet data record (IDR) format in ASCII files. IDR formatted output is intended to provide files which are convenient for consumption by external applications. Example formats include character delimited records, HTML tables, XML structures and fixed width fields. The data storage system  supports the query manager for allowing clients to obtain aggregated NMEs based on some query criteria.","Distributed Data Storage","In , a block diagram is shown illustrating one exemplary embodiment of the network usage data recording system  according to the present invention having distributed data storage. The portion of the network usage data recording system  shown is indicated by dash line  in . For discussion purposes, each collector is represented by its three main components, an encapsulator, an aggregator and a data storage system. In particular, session data collector  includes first encapsulator  (E), first aggregator  (A) and first data storage system  (D); usage data collector  includes second encapsulator  (E), second aggregator  (A) and second data storage system  (D); first correlator collector  includes third encapsulator  (E), third aggregator  (A) and third data storage system  (D); and aggregator collector  includes fourth encapsulator  (E), fourth aggregator  (A) and fourth data storage system  (IDR).","The network usage data recording system  according to the present invention having a distributed data storage system provides for a hierarchy or multiple levels of network data processing and data storage at each level. As shown in , session data collector  and usage data collector  provide for a first level of data processing and data storage in data storage system  and data storage system , respectively. First correlator collector  provides for a second level of data processing, and in this example, correlation of session data and usage data, and data storage in data storage system . Aggregator collector  provides for a third level of data processing and data storage in data storage system . Each data storage system , , ,  may comprise a disk drive, a location on a disk surface in a disk drive, or other persistent data storage.","The distributed data storage system of the present invention provides many benefits to the network usage data recording system . In particular, the distributed data storage system provides for data processing, reduction, and storage at each collector location, independent of data processing and storage at another location or level. As such, data may be processed at different rates (often depending on the data source) without affecting other processing locations. Data reduction may be performed at each level, which reduces the necessary data storage at the next level. Since the distributed data storage system allows for batch correlation at the next data processing level, data traffic bottlenecks associated with central data storage systems are avoided. The resulting data storage system has more flexibility and is more error resilient.","The network usage data recording system  according to the present invention having a distributed data storage system provides a system, collects data or accounting information from a variety of sources and makes that information available in a format (NMEs or other suitable format) that's convenient for some end processing or usage applications. Processing is accomplished at each level and each data storage system preserves its level of intermediate results. The results of a previous level flow through to a next level collector, which after processing stores yet another set of intermediate results. The data stored at each data storage system , , ,  is available to a collector or other application at each level, but may also be accessed directly by a user. As such the distributed data storage system gives access to a user to the processed data at each level of processing. For example, at the third level API (application programming interface)  can directly query any of the data storage systems, ,  or  via the CORBA bus , and provide the data to an appropriate usage application .","In one embodiment, the present invention provides a network usage system  having a multiple level distributed data storage system and method for recording network usage including storing network data in a multiple level data storage system. The system  includes a set of first level network data collectors , . Each first level network data collector ,  receives network accounting data from a network data source , , processes and stores the network accounting data at the first level network data collector , . A second level network data collector  is provided. The second level network data collector  receives processed network accounting data from one or more first level network data collectors , , processes and stores the network accounting data at the second level network data collector .","The system may further include a third level network data collector . The third level network data collector  receives processed network accounting data from the first level network data collector ,  or the second level network data collector , processes and stores the network accounting data at the third level network data collector . The system may include an application interface  which receives processed network accounting data from the first level network data collector , , the second level network data collector , or the third level network data collector .","In one aspect, the first level network data collector ,  includes a query manager. The second level network data collector  is in communication with the first level network data collector via the query manager. In one aspect, the first level network data collector ,  converts the network accounting data to a standard data format. Each first level network data collector ,  includes a first level data storage system ,  and the second level network data collector  includes a second level data storage system  for storing processed network accounting data.","The first level data storage system ,  and the second level data storage system  each include a processed data storage location , a metadata storage location  and an error recovery information storage location  (shown in ). The processed network accounting data is stored at the processed data storage location . After storing the processed network accounting data, corresponding metadata is transferred to the metadata storage location  and error recovery information  is transferred to the error recovery information location.","The first level data storage system ,  includes a first level aging policy. Network accounting data is removed (i.e., deleted) from the first level data storage system ,  after a time period corresponding to the first level aging policy. The second level data storage system  includes a second level aging policy different from the first level aging policy, wherein the network accounting data is removed from the second level data storage system  after a time period corresponding to the second level aging policy.","Data \u201cFlush\u201d Policy","Each aggregator , , ,  has a predefined or configured \u201cflush policy.\u201d The flush policy or flush interval is defined as the time interval or how often processed or aggregated data is \u201cflushed\u201d or transferred from volatile memory (associated with each aggregator) to persistent storage in corresponding data storage systems , , , . Preferably, the flush policy associated with a collector is coordinated with the flush policy at an adjacent level. In particular, encapsulator  (third level) queries data storage system  (second level). Similarly, encapsulator  queries data storage system  (first level) and data storage system  (first level). As such, the flush policy of aggregator collector  is preferably coordinated with the flush policy of first correlator collector . Similarly, the flush policy of first correlator collector  is preferably coordinated with the flush policy of session data collector  and usage data collector . When a flush occurs, the collector (e.g., session data collector ) writes the aggregated NMEs to its local data store and then continues processing data. The queries that are coming from upstream or next level collectors are independent. As such, the upstream collector is actively asking for data which, if the upstream collector's query is not coordinated with the flush policy of the downstream collector, the upstream collector will continue to ask for data until the data is available. As such, preferably the upstream or next level collector queries or retrieves information at an interval that is a multiple of the flush rate of the downstream or previous level collector.","In one example, the predefined flush interval or session data collector 's aggregator  is set to fifteen minute intervals. The query interval for first correlator collector 's encapsulator  is set for one hour intervals. As such, encapsulator  will query data storage system  for data from 12:00 to 1:00. The encapsulator  retrieves this data, which is the result of four data flushes (at fifteen minute intervals) by aggregator  to data storage system . First level or downstream collector  flushes aggregated data to data storage system  at fifteen minute intervals, but the second level or upstream collector  retrieves the aggregated data at one hour intervals.","Alternatively, the second level collector  may query the first level collector  for data at intervals which do not coordinate with the flush intervals of the first level collector . For example, usage data collector  may have a flush interval of fifteen minutes. Upstream or second level first correlator collector  may have a query interval of five minutes. This requires the second level first correlator collector  to continue to repeatedly query the first level usage data collector  until the data is available from data storage system . Of course, after a flush occurs, the second level first correlator collector  can successfully query and retrieve data for three consecutive five minute intervals, since the first level session data collector  has a fifteen minute flush interval.","The distributed data storage system according to the present invention provides transactional integrity for data written to each data storage system , , , . In reference also to , a block diagram is shown illustrating one exemplary embodiment of data storage system . The discussion of data storage system  is equally applicable to the other data storage systems within the network usage data recording system . At each flush of data to data storage system , three types of information are stored within the data storage system . These three types of information include the aggregated data (aggregated NMEs) , metadata  and error recovery information (ERI), which are persistently stored in data storage system . Aggregated data  is simply the aggregated data processed by aggregator . Metadata  is detailed information about the storing of the aggregated data . The metadata  may include details about when the data flush occurred, the time range of the data which was flushed, and includes a pointer or some other indicator to where the data is stored within the data storage system . As such, the transactional integrity of the aggregated data  is maintained by metadata . Error recovery information  may be stored as part of metadata  or, alternatively, may be stored separate from metadata . If the error recovery information  is stored separate from the metadata , the metadata  may include a pointer or locator to the location of the error recovery information  within the data storage system . The metadata  and error recovery infiltration  are only updated after a successful data flush has occurred.","When data storage system  is queried by another collector or other application (e.g., the API ), the querying device looks at the metadata  to determine if the desired data is stored in data storage system , and if so, the location of that data (i.e., aggregated data ). In regards to transactional integrity, if an error occurs during the processing of data by aggregator  or the flushing of data from aggregator  to data storage system , the result may be lost data or an incomplete data file written to data storage system . As such, the metadata  and error recovery information  was not changed. Collector  looks at the metadata  and error recovery information , determines the location of the data for the last complete flush. The collector  gives the error recovery information to the encapsulator  such that the encapsulator can position itself in the data source (e.g., data storage system ) at the appropriate point to retrieve the lost data.","Aggregator Rule Engine","The following paragraphs describe exemplary operation of the aggregators for processing network data which is in the form of NMEs, and in particular, for processing network data via an aggregator rule engine which process the network data according to a rule chain. Reference is also made to the discussion regarding the previous .  is a block diagram illustrating one exemplary embodiment of a simple aggregation scheme, illustrated generally at . Inbound network data NMEs are indicated at . An aggregation rule chain is indicated at , and an aggregation tree is indicated at . In summary, the stream of inbound network data NMEs is processed by the rule chain  in order to construct an aggregation tree . The product of the aggregation tree  are aggregated NMEs which are ultimately flushed to the associated data storage system.","Rule chain  includes a set of individual rules , , ,  which operate on each inbound network data NME . In aggregation tree , NME groups  are indicated as triangles and aggregated NMEs  are indicated as circles. The match rules within the rule chain  are used to organize the network data NMEs according to fields which they contain. In the exemplary embodiment shown, match rule  matches on source address, match rule  matches on destination address and match rule  matches on destination port number, to create the aggregation tree.","In one exemplary embodiment, the present invention provides a network usage recording system and method for recording network usage. The method includes the step of defining a network data collector ,  including an encapsulator , , an aggregator ,  and a data storage system , . A set of network accounting data  is received via the encapsulator , . The network accounting data set  is converted to a standard data format (e.g., NMEs). The network accounting data set is processed via the aggregator , , including the steps of defining a rule chain  and applying the rule chain  to the network accounting data set  to construct an aggregation tree  including creating an aggregated network accounting data set . The aggregated network accounting data set  is stored in the data storage system , .","The step of applying the rule chain  to the network accounting data set  to construct the aggregation tree  includes the step of applying a rule , ,  from the rule chain  to the network accounting data set  to define a group node . In one aspect, the rule is a match rule. In another aspect, the step of applying the rule chain to the network accounting data set  to construct the aggregation tree  includes the step of applying a set of match rules , ,  to the network accounting data set  to define a hierarchy of group nodes  within the aggregation tree . The step of applying the rule chain  to the network accounting data set  to construct the aggregation tree  includes the step of applying an aggregation rule  to the group node  to create the aggregated network accounting data set .","The step of applying the rule chain  to the network accounting data set  to construct the aggregation tree  includes the step of applying a data manipulation rule to the network usage data. In one aspect, the method further includes the step of defining the data manipulation rule to be an adornment rule. In another aspect, the method further includes the step of defining the data manipulation rule to be a filtering rule. Other aggregation rules will become apparent to one skilled in the art after reading this application. In one aspect, the network accounting data set is a set of session data. In another aspect, the network accounting data set is a set of usage data.","In one aspect, the method further includes the step of defining a data flush interval, previously described herein. The step of storing the aggregated network accounting data set  includes the step of transferring the aggregated network accounting data set  (from volatile memory) to the data storage system ,  after a period of time associated with the data flush interval. In one preferred embodiment, the method further includes the step of defining a rule within the rule chain by a Java object class, and allowing additional rule types to be added to the rule chain corresponding to the Java object class.","The following paragraphs illustrate the construction of an aggregation tree for a simple aggregation scheme example and will also be used as part of a correlation aggregation scheme example. The correlation aggregation scheme correlates usage events with session events. In this embodiment, the single aggregation scheme (an aggregation tree) is manipulated by two different rule chains. The first rule chain is used for organizing session network data NMEs and the second rule chain is for locating the appropriate session in the aggregation tree for inbound usage data NMEs. As such,  illustrate the construction of a single aggregation scheme for organizing session network data NMEs.  illustrate the use of the single aggregation scheme in a correlation aggregation scheme, wherein a second rule chain is applied to the same aggregation tree for correlating session network data NMEs with usage data NMEs. In further reference to , it is also noted that other fields may be associated with each type of NME, such as a date field, but have been left out to simplify discussion. In the following examples the date is the same for all NMEs and has been omitted for readability.",{"@attributes":{"id":"p-0116","num":"0115"},"figref":"FIG. 10","b":["330","330","332","334","336","330","338","340","342","334","332","338","340","342","344","334","338","346","342","344","336","338","340","342","344"],"i":["a ","a ","a ","a ","b ","b ","b ","b ","c ","c ","c ","c "]},{"@attributes":{"id":"p-0117","num":"0116"},"figref":"FIG. 11","b":["350","350","352","354","356","358","352","352","354","356","356"]},{"@attributes":{"id":"p-0118","num":"0117"},"figref":"FIG. 12","b":["328","360","332","350","362","332","352","338","364","354","366","356","344","366","368"],"i":"a"},{"@attributes":{"id":"p-0119","num":"0118"},"figref":"FIG. 13","b":["334","350","338","360","364","354","370","356","344","362","372"],"i":["b ","b "]},{"@attributes":{"id":"p-0120","num":"0119"},"figref":"FIG. 14","b":["336","350","352","338","374","354","376","356","344","378","360"],"i":["c ","c "]},"In another embodiment, a correlation aggregation scheme is utilized wherein a single aggregation scheme (an aggregation tree) is manipulated by two different chain rules. In the exemplary embodiment shown, session data NMEs will be correlated with usage data NMEs. As such, the first part of this example has already been described in reference to .  illustrate the application of a second rule chain to a group of usage data NMEs as applied to the same aggregation tree  to construct correlation aggregation tree  to complete the correlation aggregation scheme.",{"@attributes":{"id":"p-0122","num":"0121"},"figref":"FIG. 15","b":["400","400","402","404","406","408","400","410","412","414","416"]},"In particular, first usage data NME  includes usage source IP address (1.2.3.4), usage destination IP address (4.5.6.8:80), bytes (3448) and time (12:22). Second usage data NME  includes usage source IP address (1.2.3.4), usage destination IP address (9.6.3.1:25), bytes (12479) and time (14:35). Third usage data NME  includes usage source IP address (2.3.4.5), usage destination IP address (15.1.3.4:95), bytes (9532) and time (11:33). Fourth usage data NME  includes usage source IP address (2.3.4.5), usage destination IP address (15.1.3.4:66), bytes (983) and time (16:22).",{"@attributes":{"id":"p-0124","num":"0123"},"figref":"FIG. 16","b":["420","420","422","424","426","428","430","422","432","422","360","424","360","426","428","430"]},{"@attributes":{"id":"p-0125","num":"0124"},"figref":"FIG. 17","b":["402","420","361","422","402","364","424","402","366","416","426","428","450","430","402","452"],"i":"a "},"The same process is repeated for second usage data NME , third usage data NME  and fourth usage data NME .  illustrates the resulting construction of aggregation tree . Aggregation tree  now includes aggregated NME node  with aggregated NME , aggregated NME node  with aggregated NME , and aggregated NME node  with aggregated NME .","Although specific embodiments have been illustrated and described herein for purposes of description of the preferred embodiment, it will be appreciated by those of ordinary skill in the art that a wide variety of alternate and\/or equivalent implementations calculated to achieve the same purposes may be substituted for the specific embodiments shown and described without departing from the scope of the present invention. Those with skill in the chemical, mechanical, electromechanical, electrical, and computer arts will readily appreciate that the present invention may be implemented in a very wide variety of embodiments. This application is intended to cover any adaptations or variations of the preferred embodiments discussed herein. Therefore, it is manifestly intended that this invention be limited only by the claims and the equivalents thereof."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":["FIG. 7","FIG. 5"]},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 18"}]},"DETDESC":[{},{}]}
