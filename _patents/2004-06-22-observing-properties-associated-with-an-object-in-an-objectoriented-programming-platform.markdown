---
title: Observing properties associated with an object in an object-oriented programming platform
abstract: An application programming interface is provided in an object-oriented programming platform for developing applications. A method comprises registering a first object with a second object to observe one or more properties associated with the second object, the second object having a set of methods associated therewith and replacing a first implementation of a method in the set of methods associated with the second object with a second implementation of the method that automatically sends a notification to the first object. The observable objects need not explicitly invoke the observer notifications, avoiding writing of a large amount of code. These observer notifications need only be sent for objects that are actually being observed but are related objects, substantially reducing the performance overhead of needless invocations of the observer notifications without limiting binding between objects.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07954110&OS=07954110&RS=07954110
owner: Apple Inc.
number: 07954110
owner_city: Cupertino
owner_country: US
publication_date: 20040622
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["1. FIELD OF THE INVENTION","2. DESCRIPTION OF THE RELATED ART","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF SPECIFIC EMBODIMENTS"],"p":["The invention generally relates to computer programming technique to operate object-oriented software programs, and more particularly, to providing an application programming interface in an object-oriented programming platform to observe properties associated with an object.","Many computer programming languages are used for development of software programs. Object-oriented programming is popular since it offers programming flexibility with a relatively simple structure. Object-oriented programming is a simple way of creating software programs using building blocks, and forming relationships for these building blocks. Such building blocks in object-oriented computing systems are generally called \u201cobjects.\u201d An object is a programming unit or a software entity that combines a data structure (e.g., instance variables) with the operations that can operate on that data. In object-oriented programming, these operations that can be performed on the data are generally called \u201cmethods.\u201d","For example, an object-oriented program comprises a collection of software entities known as objects, each of which is responsible for performing a particular task. Every object is characterized by associated properties, or data values, and one or more methods that provide certain behavior or functionality. In operation, one object invokes the methods of another object, to cause the second object to exhibit its associated behavior.","Using objects, an object-oriented software application may define its data and the methods that operate on the data. An object may communicate with another object by sending messages. For example, when one object desires to operate on data that resides in another object or needs to execute methods in another object, it sends a message. The requesting object identifies the intended operation by specifying a method. The requesting object can further send arguments that may be used by the responding object in performing the named method. The responding object performs the method requested in the message. In this manner, the data provided by the requesting object may be used to perform the indicated operation by the method.","When a programmer defines a method, he or she specifies the classes or identities of the arguments appropriate for the method. A class is a programming language concept that allows data and methods to be grouped together. The class concept is fundamental to the notion of an object-oriented programming language. The methods of a class define the set of permitted operations on the class's data (its attributes). This close tie between data and operations means that an instance of a class\u2014an object\u2014is responsible for responding to messages defined by its class. As a basic building block of object-oriented programming, classes define types of objects by specifying their properties (data) and the procedures (\u201cmethods\u201d) they support.","Programming in an object-oriented computing system requires the programmer to build a structure for the set of objects, which defines how properties and methods are to be manipulated. For example, developing applications with user interface programming, such as two-dimensional drawing techniques require efficient observation information storage and manipulation when working with objects. However, designing such a structure can not only be a complex and difficult task but a relatively inefficient one because of the overhead associated with object interactions, sending a large number of messages and notifications back and forth between the objects.","In developing applications with user interface programming, objects may need to be notified of changes to specified properties of other objects by accessing an object's properties indirectly. However, one problem is that observable objects explicitly invoke the observer notifications, requiring a large amount of code which must be written. A secondary problem is that part of the performance cost of sending observer notifications is borne not only by objects that are actually being observed but other related objects as well which are not observed, which means that the performance overhead of needless invocations of the observer notification machinery is relatively high. Moreover, an observer may have to inspect the entirety of the related objects collection to find out what objects have been inserted, removed, or replaced.","In an Operating System (OS) environment, a binding feature provides an ability to easily connect user interface items to model code being the classes which encapsulate domain specific information and their application. This binding feature uses a mechanism called \u201ckey-value observing\u201d that allows objects to be notified of changes to specified properties of other objects. The key-value observing makes objects to easily bindable. For example, a graphical user interface (GUI), such an interface builder, may be used to bind text fields, checked boxes and table views to controller objects and model objects. However, some observation systems using observer notifications can indicate that employee objects are related to a manager object but after a change in manager-employee relationships, it is difficult to determine which employee objects become related or unrelated to the manager object.","The present invention is directed to overcoming or at least reducing one or more of the problems set forth above.","In one aspect of the instant invention, a method is provided for providing an application programming interface in an object-oriented programming platform. The method comprises registering a first object with a second object to observe one or more properties associated with the second object, the second object having a set of methods associated therewith and replacing a first implementation of a method in the set of methods associated with the second object with a second implementation of the method that automatically sends a notification to the first object.","In another aspect of the instant invention, an article comprising a computer readable storage medium storing instructions is provided. The instructions that, when executed cause a processor-based system to register a first object with a second object to observe one or more properties associated with the second object, the second object having a set of methods associated therewith and replace a first implementation of a method in the set of methods associated with the second object with a second implementation of the method that automatically sends a notification to the first object.","In yet another aspect of the instant invention, an object-oriented computing system is provided. The system comprises a processor, a memory coupled to the processor, the memory storing a data file structure including an identification of a first and a second object in a software program, one or more properties and a set of methods associated with respective the first and second objects and instructions for registering the first object with the second object to observe the one or more properties associated with the second object, and an interface to replace a first implementation of a method in the set of methods associated with the second object with a second implementation of the method that automatically sends a notification to the first object.","In still another aspect of the instant invention, an application programming interface for managing relationships of objects in an object-oriented computing system is provided. The application programming interface comprises means for registering a first object with a second object to observe one or more properties associated with the second object, the second object having a set of methods associated therewith and means for replacing a first implementation of a method in the set of methods associated with the second object with a second implementation of the method that automatically sends a notification to the first object.","Illustrative embodiments of the invention are described below. In the interest of clarity, not all features of an actual implementation are described in this specification. It will of course be appreciated that in the development of any such actual embodiment, numerous implementation-specific decisions must be made to achieve the developers' specific goals, such as compliance with system-related and business-related constraints, which will vary from one implementation to another. Moreover, it will be appreciated that such a development effort might be complex and time-consuming, but would nevertheless be a routine undertaking for those of ordinary skill in the art having the benefit of this disclosure.","Embodiments of the present invention provides for an application programming interface for use with an object-oriented computing system. The application programming interface uses a key-value observing mechanism by which objects may be registered and deregistered as observers of specific properties of other objects, and by which observed objects may notify observers of changes to properties according to one embodiment of the present invention. The key-value observing mechanism is based on a key-value coding mechanism which provides for executing an object's properties indirectly. That is, using strings to identify properties, rather than through invocation of an accessor method or as instance variables.","Referring to , an object-oriented computing system  is shown according to one embodiment of the present invention. The object-oriented computing system  may comprise a processor  coupled to a memory  storing a data file structure  including an identification of an observer object  and an observed object  in a software program, such as an operating system program . The memory  may store one or more properties and a set of methods associated with the respective observer object  and the observed object . The operating system program  may provide instructions for registering the observer object  with the observed object  to observe one or more properties thereof.","In one embodiment, the operating system program  may comprise a plurality of application programming interfaces (APIs) which may be separated into frameworks. These frameworks may include a Foundation framework  that resides on a core foundation . While the Foundation framework  may enable a binding feature for objects in an object-oriented environment, the core foundation  implements conventional APIs. The core foundation  may reside on other APIs , such as standard UNIX-based APIs. Over the Foundation framework , an application kit (AppKit) framework  may reside. Other frameworks may reside over the AppKit framework .","In Macintosh Operating System (Mac OS), such as Mac OS X, application programming interfaces (APIs) are divided into frameworks including the Foundation framework  which supports the AppKit framework . The Foundation framework  and the AppKit framework  may be implemented in any of several available programming languages, such as Objective-C, an object-oriented programming language. This Foundation framework  may be used with a binding feature introduced earlier. However, the Foundation framework  may be used with other features available to an Operating System environment. In the Foundation framework , a class hierarchy is based on a single super class called an object class. Based on categories, the Foundation framework  may be implemented using the object class. A category is a feature of the Objective-C which enables addition of methods to existing classes.","In the Objective-C language, for example, a class defines the methods and instance variables for a particular kind of object. A class definition declares instance variables and defines methods for all members of the class. Objects that have the same types of instance variables and have access to the same methods belong to the same class. In the Objective-C language, a class object or object class is an object that represents a class and knows how to create new instances of the class. Class objects are created by the compiler, lack instance variables, and can't be statically typed, but otherwise behave like all other objects. As the receiver in a message expression, a class object is represented by the class name. In the Objective-C language, a class method is a method that can operate on class objects rather than instances of the class.","The memory  may couple an input\/output (I\/O) circuitry  to the processor . In turn, the I\/O circuitry  may couple one or more peripherals , a mass storage device , and a display device , to the memory I\/O in one embodiment. The mass storage device  may store a database  in which each object of the observer object  and the observed object  forms the basis for a record . Each record  may contain fields which respectively identify the pointers and the methods with which the record is associated.","In the display device , the object-oriented computing system  may provide an interface  to replace a first implementation of a method in the set of methods of the observed object  with a second implementation of the method that automatically invokes a notification to the observer object  from the observed object . Instead of an automatic observer notification, manual notifications may be provided in some embodiments of the present invention. The notifications are sent directly to the observer object  when changes are made to specific properties of the observed object . To provide an automatic observing capability for objects, a window  may be displayed on the displayed device  of the object-oriented computing system .","Turning now to , an application programming interface (API) in the form of the Foundation framework  is shown according to one embodiment of the present invention. The Foundation framework  comprises a key-value coding module  and a key-value observing module . The AppKit framework  comprises a key-value binding module . The key-value coding module  gives access to object properties using a very generic application programming interface (API) that identifies them by a key. In one embodiment, a key is a string, such as \u201cgraphics,\u201d or \u201cfillColor.\u201d An object property may be an attribute, to-one relationship, or to-many relationship. The attribute may be a simple immutable value, for example, the fillColor or stroke width of a Sketch graphic. A to-one related object may have properties of its own, e.g., the image of a Sketch image graphic. The to-many related objects may be a collection of related objects, e.g., graphics of a Sketch document.","Using the key-value coding module  and the key-value observing module , the key-value binding module  provides an application programming interface that allows the value of an object's property to be tied to the value of another object's property. In this manner, the object that supports this binding feature may provide custom options, providing plenty of flexibility in implementation.","The observed object  responds to key-value observer messages because its class inherits key-value observer methods defined by an object class from the Foundation framework  in the key-value observing module . The observer object  may observe one or more object properties of the observed object  including simple attributes, to-one relationship, and too-many relationships. The observer object  of to-many relationships may be informed of the type of change made to a specific property of the observed object  as well as which objects are involved in the change.","In order to be notified of changes to a property, the observer object  first registers with the observed object  by sending a message, passing the observer object  a key path of a property that will be observed. In one embodiment, a key path may be a dot-separated list of keys which get handled automatically. For example, a key path, such as \u201cselection.fillColor\u201d may be passed. An observed class associated with the observed object  may be key-value observing compliant for the property that the observer object  wishes to observe.","For the key-value observing module , which is an application programming interface, to observe objects, the classes of the objects must be key-value observing (KVO)-compliant (observable) for other objects to bind to them. That is, either using manual observer notification or an automatic observer notification, the objects may be made KVO compliant. While invocations of key-value coding (KVC) methods may result in observer notifications, the notifications of KVC-compliant methods may result in observer notifications as well. To be manual KVO-compliant, the observed object  before any change to an attribute or to-one relationship invokes a method \u201cwill change value for key\u201d and after the change, the observed object  invokes a method \u201cdid change value for key.\u201d Likewise, before any change to a to-many relationship, the observed object  invokes a method \u201cwill change: values at indexes: for key.\u201d","For the automatic KVO-compliance, the observed object  causes observer notifications for a key in message, such as \u201cset value: for key\u201d. Likewise, a method naming pattern \u201c-setKey:\u201d causes observer notifications. For example, invoking a method named \u201c-setFillColor:\u201d automatically result in KVO notifications, unless automatic KVO is disabled for the \u201cfillColor\u201d key. Moreover, mutations of the result of a method naming pattern \u201c-mutableArrayValueForKey:\u201d causes notifications for that key. In addition, method naming patterns \u201c-insertObject:InKeyAtIndex\u201d and \u201c-removeObjectFromKeyAtIndex\u201d cause observer notifications for the key.","The Foundation framework  may further comprise an object class  and a set of associated object methods . In addition, the Foundation framework  may comprise a standard collection class, such as an array class  having a set of associated array methods , in one embodiment. In the Foundation framework , besides the object class  the array class  may be provided. The array class  encapsulates an array of objects. While the object methods  for the object class  may include a method \u201cvalue for key\u201d which returns the value of the \u201ckey\u201d property, the array methods  include a first method called \u201cadd observer: to objects at indexes: for key path: options: context:\u201d and \u201cremove observer: from objects at indexes: for key path:\u201d","In one embodiment, the \u201cvalue for key\u201d method searches for the object class  for a method of the same name, and invokes it. The \u201cvalue for key\u201d method also returns the value of the key property for to-many relationships where the related objects are not stored in the array class . The object methods  may further include a \u201cset value: for key\u201d method which sets the value of the key property for to-many relationships where the related objects are not stored in the array class . The object methods  may further include a \u201cset value: for key\u201d method which sets the value of the key property. Again, the \u201cset value: for key\u201d method, searches, the object class  for a method whose name matches, and invokes it.","The object methods  may include a \u201cvalidate value: for key: error\u201d method, which either returns a value good for a \u201cset value: for key\u201d method or returns an error, separating validation rules from decision about when to validate. Likewise, the object methods  may include a \u201cmutable array value for key\u201d method which returns a mutable array of to-many related objects. For each object method  there is a variant that uses a key path being a dot-separated list of keys which get handled automatically.","Using the key paths, the key-value coding module , enables key-value binding and key-value observing in terms of key paths. For making the object class  and the array class  KVC-compliant, the object methods  and the array methods  include methods \u201cvalue for key\u201d and \u201cset value: for key.\u201d For each attribute or to-one relationship, method name \u201ckey\u201d and for read write a method named \u201cset key\u201d may be implemented. For each to-many relationship, likewise, a method named \u201ckey\u201d, \u201ccount of key\u201d, and \u201cobject in key at index\u201d may be implemented. For each mutable to-many relationship, a method called \u201cinsert object: in key at index\u201d and a method called \u201cremove object from key at index\u201d may be implemented. In all of the above indicated methods, the word \u201ckey\u201d in each method name may be replaced by the actual key.","For key-value observer registration, the object methods  may include a method called \u201cadd observer: for key path: options: context\u201d to register one object as an observer of a property of another object. Likewise, to deregister the observer object , a method called \u201cremove observer: for key path may be provided. In the \u201cadd observer: for key path: options: context\u201d method, the options may comprise any combination of two or more possible flags so that the observer object  may get a new value for the property in the change notification and may get an old value from the observed object  before the change.","Likewise, the context defines a reason for observation which is passed back in a key value observing message. The observed object  contains the property to be observed and made KVO compliant for the key path. For the \u201cadd observer: for key path: options: context\u201d method, the recipient of the notifications about changes to the property identified by the key path is the observer object  that may implement a key-value observing informal protocol. For example, the controls in a panel such as Sketch's inspector panel may observe the selection properties which they are bound.","For the key-value observing module , the object methods  include a method called \u201cobserve value for key path: of object: change: context,\u201d which is invoked on the observer object  for every change to the observed property in the observed object . The change parameter in this method may indicate information about what changed. A key value change kind indication for the method \u201cobserve value for key path: of object: change: context\u201d may indicate the kind of change it was. For example, the value of an attribute or to-one relationship may be changed, when someone invoked a method called \u201cset value: for key\u201d. Likewise, a to-many relationship may have changed when someone invoked a method called \u201cmutable array value for key\u201d then mutated the result. Additionally, a key value change indexes key indication may indicate the indexes of the inserted\/removed\/replaced objects.","The key-value observing (KVO) module  may be built on the key-value coding (KVC) module . Using the key-value coding module , a message may be sent to an object without the knowledge of a name of a method in the object's class  before getting and setting the values of the attributes in that object. The key-value coding module  comprises a value for key method and a set value for key method. The value for key method takes one argument and the key is a string. The string is the key of the property whose value is desired. In this way, properties of an object may be extracted without knowing how the object's class  implements the property getting and setting.","When the value for key method is invoked, the key-value coding module  searches for a method in the object's class whose name is \u201ckey.\u201d If the key method is not located, then the key-value coding module  searches for another method called \u201cget key.\u201d Accordingly, if a method is not found, the key-value coding module  searches for instance variables for the object. For example, when sending an employee object a value for key method where key is \u201cmanager\u201d, the key-value coding module  attempts to execute a method named manager and if the manager method is determined to be not present, then the key-value coding module  searches for an instance variable whose name is \u201cmanager.\u201d The key-value coding module  obtains a value from the instance variable of the manager object and returns the value. In this way, the key-value coding module  protects clients from having to know how the properties are implemented, providing implementation freedom to key-value coding module  compliant classes because an instance variable is hidden behind a method.","When properties of an object, such as that of an employee class needs to be observed, for example, observing the manager property of the employee object having a method named \u201cset manager,\u201d the creator of the employee class may make the employee object key-value coding compliant without doing anything else. That is, the employee class is automatically key-value observing compliant for the manager property as long as the manager is changed only via invocation of the \u201cset manager\u201d method.","In general, the key-value observing module  is built on the key-value coding module . One of the features of a method called \u201cset value for key\u201d, which is part of the key-value coding module , is that if a method cannot be found whose name matches the pattern, the \u201cset value for key\u201d method may search for an instance variable whose name matches the pattern. In this event, the \u201cset value for key\u201d method will change the value of the instance variable directly. When the \u201cset value for key\u201d method is invoked, an automatic key value observing (KVO) notification feature operates. The key-value coding module  is made aware of the key-value observing module , e.g., if the key-value coding is going to change the value of the instance variable directly, a \u201cwill change value for key\u201d method before the key value is changed and a \u201cdid change value for key\u201d method after the key value is changed are called. Thus, an automatic key-value observer notification in response to key-value coding messages is provided.","A property may be changed in at least two ways. In the first way, an accessor method, such as a set key method may be called. In the second way, a generic method may be called which identifies the property of the key, i.e., a set value for key.","A relationship may be mutated using a mutable array value for key method, e.g., when one object is mutating another object, i.e., adding or removing objects from one of the objects to-many relationships may occur. For example, by calling the mutable array value for key method, to-many relationships of an object may be changed, e.g., the number of employee objects related or unrelated to the manager object may be altered. The mutable array value for key method returns, an instance of a standard array class, to add, remove or replace objects in the array by automatically relating and unrelating objects to the container object that was originally sent the mutable array value for key message. While automatic relating and unrelating of objects continues, automatic KVO notifications may be generated. In this manner, one or more properties of an object may be changed by a specific method implemented by the object's class directly or by a generic method based on the key-value coding module , while the automatic KVO notifications may be generated for both of these methods.","Referring to , a stylized representation of a key value observing method based on registering and deregistering of an object with another object is shown according to one embodiment of the present invention. Using the Foundation framework  shown in , the observer object  may register  with the observed object . Likewise, at some point, the observer object  may deregister  with the observed object . The observed object  may include one or more properties , such as a manager object . Additionally, the observed object  may have a set of associated methods  including an implementation of an original method . Using the Foundation framework  illustrated in , a replacement method  implementation may replace the original method  implementation. The replacement method  implementation may comprise a first method (e.g., a will change method)  and a second method (e.g., a did change method) .","In this manner, based on method naming rules when a set manager method call is invoked, the observer object  is automatically notified. In one embodiment, using a feature in Objective-C, i.e., something is an object of something else; the key-value observing module  utilizes a structure by pointing to it in a particular order to determine information relating to various methods that are available for the object class  of that object. Therefore, when the observer object  observes another object and an automatic key-value observing (KVO) notification feature is on, the key-value observing module  makes a copy of the class of the observed object  and replaces one of the methods in a list of methods of the observed object  with another method that sends out notifications while performing the same operation as the original (replaced) method was intended to perform.","Even when the property that is being changed possesses to-many relationships to one or more objects, notifications of a change may be sent out automatically as objects become related and\/or unrelated to another object. This avoids writing of a relatively large piece of code for converting the objects into observable objects. Thus, in one embodiment, the observed object  does not need to include any additional code for being observed as long as a naming pattern established by the key-value coding module  is followed.","In operation, for one object to observe another object, the observer object  registers with the observed object . An object sends a method to another method, e.g., called \u201cadd observer for key path: options and contexts\u201d where options are getting old and new values as part of the observer notification and context enables passing these values back to the invoking object. To add an observer, a pointer is passed to an object which is going to be observed. A key path, which is a series of property names separated by dots that get passed around in the APIs when dealing with keys in the context of key-value coding, may be used by the observer.","For example, a person record  of a person object may have a to-one relationship to an address object having an attribute as a zip code. The key path in this case would be address.zipcode. By observing the address.zipcode, the zip code of a person may be observed even though the person object does not have the zip code attribute. An \u201cadd observer for key path\u201d method may be sent to the observed object , registering one object as an observer for another object. However, an object does not have to register itself an observer because one object can register another object as an observer for the observer object . A \u201cremove observer for key path\u201d method operates exactly opposite that of \u201cadd observer for key path\u201d method, deregistering an object as an observer. Using these two methods, an object registers  and deregisters  as an observer for another object, respectively.","The observer object  implements a method named \u201cobserve value for key path change context.\u201d When a property of the observed object  changes, a notification is sent out to each one of the observer objects that identifies the key path of the property that was observed and now changing, the object that owns the property that is changing, information on exactly what changed, and the context which is the value specified when an object registered as an observer and that value is passed back to the observer. Thus, the observer object  registers itself and listens for notifications.","To be an observed object, the observed object  may be devised to be key-value observing (KVO) compliant for a specific property that may be observed by an observer object. A key-value observing compliant observed object follows certain conventions for a specific property. For example, when using an automatic KVO notification, by ensuring that any changes made to the observed object's properties  goes to the set method that has the correct name, set manager for the employee object.","When, the manager property  changes, the change is done through set method to make the observed object  KVO compliant. In this manner, any object can observe the manager property  of the observed object  and the observer object  gets notified automatically when the manage property  changes. For an object to be KVO compliant entails that before an object's value is going to be changed, a call is made to a method called \u201cwill change\u201d value for key  and after the change is made a call is made to a method called \u201cdid change\u201d value for key  where key being the manager property . The automatic KVO feature invokes these both methods ,  automatically at an appropriate time, in one embodiment.","By sending a method to a class instead of an instance of a class, a class may be allowed to declare that the value of one or more of its properties is inherently dependent or affected by the value of one or more of its other properties. For example, when an application is starting up, a program can declare that value of one property depends upon another property. In this manner, whenever the value of one property changes, an assumption may be made that the value of the other property changed as well. An observer notification may be sent indicating this change.","Instead of calling the first method, i.e., the will change value for key method  and the second method, i.e., the did change value for key method  for a model object with a class called person having a first name and a last name and a full name property it can be declared that the persons full name depends upon the first name and last name so whenever the person class performs the will change and did change value for key methods  and  for the first name or the last name, the observer of the objects full name gets notified that the full name is changed. That is, when a set first name method is invoked, observers of the full name may be automatically notified that the full name is changed.","When one object registers itself as an observer of another object, the observer object  may specify that a notification from the observed object is desired immediately upon the registration. In this way, using an option for an immediate notification, any tasks the observer object  must perform at initial observer registration time as well as when the observed property changes can be consolidated in one place in the implementation of the observer object's class. When using an observe value key path method, e.g., the observer object  arranges so that the observer value key path method may be called automatically because the observer object  is registering itself as an observer of the observed object . That is, without executing any additional code the observer value key path method may be called. Upon receiving a notification that one or more objects have become related or unrelated, the observer object  may selectively choose to observe the properties of now related objects based on the option for an immediate notification in one place.","Referring to , a model-view-controller architecture  for user interface programming is depicted for the object-oriented computing system  shown in  according to one embodiment of the present invention. The model-view-controller architecture  may comprise one or more controllers , one or more model objects  and associated views . The controllers  may be classes, such as array controller class, object controller class, and user defaults controller class. The model objects  may be objects that are KVC-compliant for other objects to bind to them. An example of the views  may be a table view.","The key-value coding module  enables the views  to get and set values in the controller's . In addition, the key-value coding module  enables the controllers  to get and set values in the model objects . The key-value observing module  enables the views  be notified of changes to values in the controllers . Moreover, the key-value observing module  enables the controllers  be notified of changes to values in the model object . The key-value binding module  binds the named properties of the views  and the controllers  to the properties in the controllers  and the model object . This binding enables observing using the key-value observing module . The binding also enables updating of bound-to values in response to user actions using the key-value coding module .","For example, a table view's contents may be bound to an array controller's \u201carranged objects.\u201d The array controller's contents array may in turn be bound to a to-many relationship of a model object. In this manner, the array controller class may manage the life cycle of an array of objects. For instance, the KVO notifications from the model objects  may cause KVO notifications to the corresponding table views .","As one example, for a class called \u201can array controller\u201d a table view may be bound to it, i.e., the table view receives values from the array controller class. The array controller class may be bound with a to-many relationship to other objects. Because of this binding of the contents of the array controller class, the array controller class passes the related objects to the table view using the key-value coding module  and the key-value observing module . In this manner, the array controller class may potentially observe the related objects.","The array controller class may include a feature, i.e., when a user selects many objects in the table view, the feature exposes a property called \u201cselection\u201d for values that are common to each of the rows in the table view. Based on a master-detail relationship, an inspector window, such as the window  may show properties of the selected objects because the array controller class observes each of the related objects. If all of the related objects have an exact same value, then that value appears in the inspector window for a property. Otherwise, if for selected rows of the table view the related objects possess different values, then in the inspector window a place holder appears, indicating the presence of multiple values in a user interface. For registration and deregistration as an observer of the related objects, the array controller class may accomplish common overhead associated with observer registration and deregistration once for the related objects and apply the same over again and again to each observed object.","Using the array controller class, the key-value binding module  may bind the \u201cselection indexes\u201d of a table view to an array controller's \u201cselection indexes\u201d. Likewise, the properties of user interface controls may be bound to a key path, such as \u201cselection.modelKey\u201d. Changes to the selection indexes may cause KVO notifications for every substantially observed key path selection.modelKey. In addition, the key-value binding module  may bind the properties of user interface controls, to \u201cselection.modelKey\u201d of an object controller class. The key-value binding module  may bind the object controller's \u201cobject relationship\u201d to a to-one relationship of a model object, or another controller. In this manner, the object controller class may manage the life cycle of an object. Using the key-value binding module , a user defaults controller class may bind the values of user interface controls to \u201cvalue.preferencesKey\u201d of a user defaults controller. The user defaults controller class provides an easy access to up-to-date preferences values via the key-value observing module  to other parts of an application.","Referring to , a stylized representation of a method for key-value observing in accordance with one embodiment of the present invention is shown. At block , an application programming interface, such as the Foundation framework  and the AppKit framework  shown in  may be provided in an object-oriented platform on a system, such as on the object-oriented computing system  shown in . At block , a first object (e.g., the observer object ) may register with a second object (e.g., the observed object ) to observe one or more properties thereof. The observed object  may have associated the set of associated methods , as shown in . At block , the original method  implementation may be replaced with the replacement method  implementation of a method from the set of methods . At block , a notification may be invoked automatically to the observer object  from the observed object . The notification may indicate a change to one or more properties of the observed object .","The method implementation replacement that is used to implement automatic KVO notification may be implemented in two ways in some embodiments of the present invention. The first implementation involves changing the object's class pointer (the \u201cis a,\u201d in the Objective-C language) to point to a newly created class that is merely a copy of the object's original class, and then mutating the class copy's method list. This is how KVO may be implemented for performance because there is no cost attributable to the KVO autonotification feature in objects that are not observed at all. In KVO's this implementation, the object's class pointer is actually changed back to the original value (pointing to the original class) when enough observers are deregistered that automatic KVO notification does not need to be done at all anymore, for that object. The second implementation involves leaving the object's class pointer alone, and mutating the original class' method list.","Referring to , a stylized representation of a method for providing an automatic key-value observing notification is shown in accordance with one illustrative embodiment of the present invention. At block , a set of methods may be provided in a class of a second object (e.g., the observed object ). In the set of methods, at blocks , a method whose name follows a specific pattern may be located. The first implementation of the method may be replaced in block . At block , the second implementation of the method may be provided with in ability to perform substantially the same operation as the first implementation. At an appropriate time, indicated by a decision block , in block  a first method may be automatically invoked to indicate that a value of a key of the second object will change. At a decision block , before a value of a key changes, at block  an old value may be automatically provided for the key. At an appropriate time, at block  a second method may be automatically invoked to indicate that a value of the key did change. At block , the new value may be automatically provided.","The observer object  may specify one or more options when it registers as the observer of an observed object . However, one object may register another object as the observer of a property of a different object. In a first option, when the observer object  receives a notification from the observed object , a new value of a property, such as the manager property  may be obtained automatically from the observed object . Optionally, even the old value of the property may be obtained automatically in the notification, useful for example in an undo operation. For both the values of the property to be included in the notification, the observed object  arranges for automatic invoking of both the will change value for the key method  and did change value for the key method  at an appropriate time.","For example, when the will change value for the key method  is invoked, if any of the registered observers including the observer object  desires the old value of the key before it changes, registered observers get the old value automatically and may be recorded. The key may be some identifier of the property, in one embodiment. When the did change value for key method  is invoked, if any of the registered observers seek to obtain the new value of the key for the property after the change, the registered observers get the new value automatically. In both the cases, using a value for key method of the key-value coding module , the will change and did change methods ,  provide the old and new values, respectively.","If multiple objects are related to an object, e.g., a plurality of employee objects are related to a manager object, after a change in relationships between the employee objects and the manager object, specific employee objects which become related or unrelated to the manager object may be indicated in one embodiment. To this end, in an observer notification a dictionary comprising information about the changes may be included. This change information may include the old and new values for a key of a property. The change information may indicate the kind of change, e.g., whether the value for key is set or other options, such as insertion, removal or replacement may be exercised. For example, when an object is related to a relatively large number of other objects, an addition of a single object at the end of the list of the hundred objects may be specifically indicated rather than indicating that a change involving one hundred one objects occurred in object relationships.","A class, such as an index set class which keeps track of a scattered set of indexes into an array may represent insertions of objects in different places in the array. When in a user interface, the indexed objects are shown in a table view, a user may be able to select many different objects in the list for removal and this removal of scattered objects may be indicated in a single observer notification exactly indicating which objects were removed from the list.","Referring to , a stylized representation of a method for generating a single notification for multiple objects in accordance with one embodiment of the present invention is illustrated. At block , relationships of the observed object  to other objects may be determined. At a decision block , a check may be made to ascertain whether a change in relationship has occurred. Thus, at the decision block , a change in relationship may be determined. That is, change in a relationship of the relationships of the observed object  to other objects may be ascertained. If a change in a relationship is indicated at the decision block , at a decision block , a check is made to determine whether change in relationship has occurred in more than one object. At block , a single notification may be generated, indicating a change in relationships of multiple objects.","When removing, for example, multiple rows from a table view where the rows are scattered all across the table, only one observer notification from the observed object  to the observer object  may be generated instead of generating one observer notification per row. In other words, the observed object  generates a single notification to the observer object  for a change in status of some of the multiple objects. The change in status of some of the multiple objects includes at least on of insertion, removal and replacement of some of the objects in the to-many relationship.","Referring to , a stylized representation of a method for observing a property by observing an attribute identified by a key path is depicted in accordance with one embodiment of the present invention. At block , an association of the observed object  with a class may be determined for the observer object . At block , an attribute of the observed object  may be determined to be a property of the class. A key path may be identified, linking the observed object  and the attribute, at block . In this manner, the property may be observed by observing the attribute identified by the key path at block .","For example, a person class may have an address object associated as an instance of an address class and a zip code may be an attribute of the address object. An observer can observe a person's address by observing \u201caddress.zipcode.\u201d When the zip code of the address gets changed, the observer of the address.zipcode may be notified. If the entire address object of the person is swapped out, all the observers of the address.zipcode may be notified. Thus, when properties get chained up as nested sub-properties, an automatic notification to all the observers may be issued.","While the invention has been illustrated herein as being useful in an object-oriented based computer environment, it also has application in other building block based programming environments. For example, the present invention may have application in any environment where two or more programming building blocks or software entities are interconnected and capable of communicating with one another.","The particular embodiments disclosed above are illustrative only, as the invention may be modified and practiced in different but equivalent manners apparent to those skilled in the art having the benefit of the teachings herein. Furthermore, no limitations are intended to the details of construction or design herein shown, other than as described in the claims below. It is therefore evident that the particular embodiments disclosed above may be altered or modified and all such variations are considered within the scope and spirit of the invention. Accordingly, the protection sought herein is as set forth in the claims below."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The invention may be understood by reference to the following description taken in conjunction with the accompanying drawings, in which like reference numerals identify like elements, and in which:",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 4","FIG. 2"]},{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 5","FIG. 2"]},{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 6","FIG. 2"]},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
