---
title: Method and system for generalized and adaptive transaction processing between uniform information services and applications
abstract: The system and methods of the present invention provide a processing function that is useful for controlling any type of transaction between providers and consumers of information services. The invention provides a transaction framework that dynamically integrates a plurality of service providers and consumers based on transaction context data. Transactions between services are described using a transaction definition. A transaction definition specifies the details of the transaction using a uniform specification model, where services are classified through a standardized taxonomic structure. The processing function analyzes service classification during a transaction to determine the appropriate configuration and processing strategy.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07426730&OS=07426730&RS=07426730
owner: WRE-HOL LLC
number: 07426730
owner_city: Kirkland
owner_country: US
publication_date: 20020418
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATION","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF TERMS","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT"],"p":["This application claims the benefit of prior U.S. Provisional Application No. 60\/285,402, filed Apr. 19, 2001, the subject matter of which is incorporated herein by reference.","This invention relates to transaction processing and more particularly to the processing of transactions between providers and consumers of information services.","The arrival of Internet has altered the fundamental means for creating, managing, and communicating information. E-mail, instant messaging, and personalized content have become the mainstays in both consumer and commercial environments. With the advances in wireless communications, it will soon be possible to deliver large amounts of information with relative ease almost anywhere. The promise of this technology convergence is mobility without lost of connectivity and productivity; individuals are no longer tied to their desktop workstations to stay abreast of their \u2018e-life\u2019. However, with all these devices and means to get at information, little has been done to improve information access and integration. With the world-wide-web, information is often loosely integrated with links or delivered as independent content applications; the user navigates the web using links to content determining the relevance to his\/her situation as they go. Though we are advancing slowly with techniques of personalization and customization we have yet to provide a comprehensive means to simply access the right information when and where we need it.","At an increasing rate, more and more information is being made available \u2018on-line\u2019, whether publicly through portals and other web sites or via secured access to corporate intranets. On-line access means users can quickly get at information from any networked device as long as it supports the appropriate application protocols. Most of this information is accessible through some pre-defined interface, which allows users to interact with the information in a controlled fashion: including functions for security, utilization, billing, etc. To date, most of these information services provide their information in a customized and non-standard form, requiring specialized applications (including web pages) software to work with it. Though the information may have value in its \u2018raw\u2019 form, the potential value for integrating disparate information services has many more benefits.","Corporate intranets and Internet portal providers have made the first attempt at integrating this information by aggregating content into a seamless user interface. From the user perspective, the information can be accessed from a single point, with relative simplicity. However, this approach has limited value, as related information that has meaningful associative value is presented independently. Consider the case of many of today's Internet portals that provide maps and driving directions as well as current traffic conditions. The user has easy access to both information content, but cannot work with both types of information together. However, it would be more useful if this information were presented together such that driving directions included and adapted to current traffic conditions, such that the system can provide users with driving directions that avoid traffic congestion or incidents.","Currently, information integration relies on customized software that explicitly integrates two or more information sources providing additional functionality or information. Though efficient in terms of solving the immediate integration problem, the approach is less than satisfactory when one realizes that the particulars of integration are essentially a template that can be re-applied to many information sources as long as the type of information and service access model is compatible. Thus, custom solutions are limited to a particular implementation or problem. For example, Internet portals have taken great pains to integrate personal information into their solutions, providing a custom experience for the user. Personal information includes contacts, schedules, e-mail lists, and personal preferences. To provide a homogenous solution to its user base, most portals provide the infrastructure to manage the personal data; however, it forces many users who use the portal services to maintain multiple copies of their personal data\u2014particularly if they are a working professional that has access to a corporate intranet. This produces an inefficient situation, where information must be entered and updated, by hand in most cases, in multiple places.","This problem of how a consumer portal, for millions of consumers, could successfully integrate personal information that is remotely managed by potentially thousands of different information sources is one of the impetuses for the present invention. There is a need for a solution that provides a means to couple information services at a user, or session, level without explicit reference to that information provider as the integration may change from transaction to transaction.","Fortunately, this problem of information integration has been greatly aided by the introduction of XML (eXtensible Markup Language), SOAP (Simple Open Access Protocol), standardized information typing (or schemas in XML parlance), and registration through organizations including: bistalk.org and schema.net. Though not a total solution, these technologies and organizations are defining a common interaction protocol and languages standards that are making it easier for information services to interchange information. Other standards such as Electronic Data Interchange (EDI) have also paved the way in enabling standardized or uniform information exchange. With these standard integration protocols, information services have a common means to interact. In addition, services directories such as UDDI (\u201cUniversal Description, Discovery, and Integration\u201d) have provided the means to standardize descriptions of services as well as provide a means for discovery. More work is still required to simplify the task of integration and management of service transactions at a large scale, where configurations may differ between sessions or even between transactions.","Distributed transaction management technology has been a mainstay with large-scale database systems, where data is spread out across disparate systems. In these systems, a transaction is typically conducted with one or more information bases that remain in a relatively fixed configuration with respect to the system's lifecycle. Database transaction technologies have some of the basic patterns found in a more generalized approach. Typically, distributed database transactions are made with atomic information elements that are database compatible. In terms of a generalized transaction solution, the model breaks down when the element of the transaction is more than just information. In a generalized solution, transactions need to support any type of transaction, be a programmatic event, signal, or information exchange; and to provide a framework for extension to new types.","The primary problem is providing an efficient, generalized and scalable transaction framework that can implicitly integrate services without requiring extensive custom development, particularly where large numbers of similar services are in use. A useful solution to this problem would alleviate service integrators or application developers from managing the ever-increasing complexities of configuration management and point-by-point integration. As the system size grows large in terms of flexibility requirements, user-personalization, supported services, and operating capacity, a means to define the general operating rules and relationships independent of physical configuration becomes increasingly important. There is a need to automate the management of the rules, relationships, and process flow instead of the actual configuration and integration points as the shear number becomes humanly unmanageable. A method and system providing such a solution would be a useful and novel invention over prior art.","Another problem for generalized transaction processing is to provide a means to adjust transaction processing based on \u2018environmental\u2019 conditions. Many system implementations today tout features including \u2018personalization\u2019 and location-based processing, often indicating that system functions take into account user-preferences and current position while processing a specific request for information. More generally, personal preferences and current location are specific types of contextual information that is available to the system at the time of transaction processing. These data are special in that the system actively manages this information as part of its session state, making it available to any function (or transaction) that might require this knowledge.","In the future, contextual information will become even more important in terms of limiting, controlling, or processing information flow between sources and consumers. The availability of information will greatly out pace the ability to digest or interpret unless some filtering mechanism is applied that limits the data according to specific rules, including the applicability to the current situation. The problem is how to generalize situational context such that it can be suitably applied in a generalized transaction framework. Given that required set of context information will change depending on the application environment and user-situation, there is a need to create a solution that can allow the transaction framework to support any type of contextual information in an extensible fashion. A useful solution should also support existing context type information such as personal preferences and location.","To provide a foundation for the following discussion of the invention it is useful to define certain basic terms.","\u201cConfiguration\u201d means an atomic set of information that defines a deployment and operating environment for one or more TPFs (Transaction Processing Function). A TPF's configuration is static and unchanging during a transaction. A configuration may change between transactions according to some external configuration management function.","\u201cContext\u201d means a quantifiable and describable element of information that is related to the nature of resources manipulated by RSCs (Resource Service Consumer) and RSPs (Resource Service Provider). Context information is used in the scope of a transaction to constrain or facilitate the processing.","\u201cDomain\u201d is a group of members that share the same privileges.","\u201cMember\u201d is a single individual or a group that is comprised of one or more individuals.","\u201cObject\u201d means a software program or function that has well defined interfaces, state, and behavior that can be explicitly identified within some system. Objects can contain objects.","\u201cOperation\u201d means a specific interaction between two or more objects.","\u201cRSC\u201d means Resource Service Consumer. An RSC interacts with a TPF for the purposes of consuming or manipulating resources provided by one or more RSPs. An RSC will typically initiate the majority of the transactions with a TPF. An entity may be an RSC and RSP simultaneously; the present invention does not constrain the specific implementation.","\u201cRSP\u201d means Resource Service Provider. An RSP provides access to resources in a means compliant with the present invention.","\u201cResource\u201d means any information or function that can be well defined with quantifiable structure, attribution, behavior, and interfaces. The present invention requires that resources managed as part of a transaction be describable and discrete in nature such that they can be represented by a standardized description. Examples of resources include the following: text messages, XML and HTML documents, images, collections, functional interfaces, and services (quantified function sets).","\u201cService\u201d means an entity that has a quantifiable and describable function with respect to resources it supports. A TPF interacts with services during the processing of transactions in order to accomplish the requested manipulation of resources. Services may support multiple types of resources as defined by the description of the service.","\u201cSession\u201d is a set of related transactions. In the present invention, sessions define the boundary conditions for a series of transactions. A Session includes common information used by one or more transactions.","\u201cTD\u201d means transaction definition. A TD is a quantifiable set of information that defines a transaction to be performed with a system of TPFs and one or more RSPs and RSCs. A TD specifies the nature of the transaction, processing instructions, required conditions, and expected results.","\u201cTPF\u201d means Transaction Processing Function. A TPF is a software component that manages transactions between one or more information services as provided by the present invention.","\u201cTransaction\u201d is initiated by a request from a client. In the course of processing the transaction request, one or more operations may be spawned to service the request. In this way, these operations are related since they are servicing the same transaction request. These operations may utilize the resources provided by one or more information or application services as needed.","\u201cTSC\u201d means Transaction Situation Context. A fixed set of contexts that describe the current state of the processing environment with respect to the session, RSCs and RSPs during a particular transaction. A TSC exists in a one to one relationship with a transaction and is contained within the lifecycle of the transaction.","\u201cURD\u201d means Uniform Resource Descriptor, which provides a means to reference a resource and to manipulate a resource without explicitly managing the resource. Services provide URDs as handles or pointers to resources, which can be de-referenced as needed to get the actual resource.","\u201cUSM\u201d means Uniform Specification Model, which defines the objects and relationships describing the type information used by the TPF. The TPF understands the objects and relationships defined by the USM.","\u201cUSR\u201d means Uniform Specification Repository, which provides a means to store and access information in a format consistent with the USM. The TPF accesses information stored in the USR.","The system and methods of the present invention provide a processing function that is useful for controlling any type of transaction between providers and consumers of information services. In particular, the invention provides a transaction framework that dynamically integrates a plurality of service providers and consumers based on transaction context data. Transactions between service consumers and providers are conducted according to a generalized description. Termed a transaction definition (TD), these descriptions specify the details of the transaction using a Uniform Specification Model (USM), which provides the means to define the transaction without explicit reference to particular services. These TDs are processed by the system of the present invention and are applied to a specific configuration of service providers and consumers at the time of transaction.","In accordance with the present invention, one or more Transaction Processing Functions (TPFs) are deployed and configured through servers networked together to form a system. One or more TPFs are hosted on each server in the system. Each server is typically connected to one or more servers in a local area network, which is further connected to some wide area network such as the Internet. Within this network of servers, one or more services are connected to the system of TPFs forming a distributed processing framework that allows any service to conduct transactions with any other bound service in accordance with the access privileges and transaction definitions as managed by the TPF. Multiple TPFs coordinate transaction processing according to the configuration and transaction context. An aspect of the present invention provides for TPFs to adjust processing according to current server loading and service bindings.","Services, information content, and related contextual information are defined and classified according to a standard taxonomic structure that is represented via a Uniform Specification Model. Any service with sufficient access rights can create\/register new specifications for services, information content or contextual information through an exposed Application Programming Interface (API). These classified specifications are stored in a Uniform Specification Repository (USR) for efficient access by one more TPFs. According to the present invention, specifications are related to other specifications according to the classification and attributes as provided by a Uniform Specification Model (USM). These specifications define the rules, constraints, and allowable relations. The TPF analyzes specification information to determine suitability and compatibility of services during the scope of the transaction. In the nomenclature of the present invention, services provide or consume information content, which is more generally defined as a resource. Resources may represent anything including information content, metadata, or references to resources as long as it can be quantitatively described in accordance with the USM.","In another aspect of the invention, TDs provide a generalized way of describing the interaction between services. The exact TD specification is defined by some external TD processing agent that integrates with a TPF through an exposed application programming interface. The processing agent analyzes and executes a TD in accordance with the TPFs transaction process flow. The TPF can support multiple processing agents, allowing services a way to conduct transactions with the TPF using a TD format that is most appropriate for them: illustrative formats include XML, SOAP, and JScript. Further, TDs can be registered (via an exposes API) and reused or referenced by other TDs. This capability provides for easy reuse as well as performance enhancement since once a TD is registered it no longer needs to be recompiled.","In yet another aspect of the invention, TPFs conduct transactions within the scope of a session. A session maintains information about a related set of transactions. One or more elements of the session information are made available to a particular transaction through a transaction situation context (TSC). The TSC provides information required by the TD that is not explicitly provided by the initiating service. This allows TPF transactions to adapt processing based on session information as provided by the TSC. The provision of generalized contextual processing alleviates the need for services to manage the potentially useful information directly.","TDs are processed by a TPF in a series of sequential operations that produce intermediate data objects, which may be cached between transactions for the purposes of optimization. The TPF begins processing a TD by determining the types of service operations, contexts, and resources required to produce a fully formed, executable transaction. The TPF builds the TSC using session state information according to the TD. Following, the types of service operations are broken down into explicit service operations, which are specific to session scope. Continuing, the TPF assigns the resultant service operations to a particular TPF\/service binding according to some cost and configuration function. Once the transaction has been defined explicitly, with bindings to particular services, the transaction is executed and the results or error conditions are returned to the initiator. In cases where the same operation is executed with multiple services of the same type, the results are combined to form an aggregate result set. The present invention provides optimization of one or more aspects of the processing sequence such that TPF processing has minimum performance impact.","In another aspect of the invention, transactions can either be synchronous or asynchronous. The service initiating the transaction request specifies (via the TD) whether the transaction is synchronous or asynchronous. For synchronous transaction requests, the initiating service must wait until the transaction has been processed to get a response back from the TPF. For asynchronous transaction requests, a response is sent back immediately to the initiating service. Asynchronous transactions are useful in situations where a service wants to send and not receive information to\/from the TPF such as updating the location of a vehicle or turning on and off traffic alerts.","According to a further aspect of the invention, the TPF structural processing model is extended to support domain and member information, enabling the processing model to natively support inter-session state information. Through this mechanism, contextual information is further enhanced by inclusion of member state data and domain state data. In the illustrative case of personal preferences, the member extension provides a way to establish preference relationships that persist between sessions, and to provide additional context classifications analyzed by the TPF. Further, the domain extensions provide a mechanism to control processing according to an externally assigned scope operation, in that member sessions can be limited in scope according to the specified domain attributes. The TPF uses these extensions to enforce transaction compliance and security across related sessions as well as to provide the framework for a richer base of context information.","Reference to the remaining portions of the specification, including drawings and claims, will realize other features and advantages of the present invention. Further features and advantages of the present invention, as well as the structure and operation of the various embodiments of the present invention, are described in detail below with respect to the accompanying drawings.","The present invention provides for information transaction processing between multiple service providers and consumers without explicit coupling between providers and consumers prior to execution of the transaction. According to the present invention, the interaction between information and service providers and consumers is managed by one or more transaction processing functions (TPF) so that access to services and information by consumers is controlled. Access to and coordinated delivery of information and services can be managed in a standardized and uniform manner such that the same set of TPFs can simultaneously support multiple types of information and service transactions.","In the present invention, networked services providing or consuming information are classified according to a uniform service model (USM), where the service and information they provide can be quantitatively described as to function, type of information, access model using a standardized taxonomic structure. With this classification, the present invention provides a method and system for allowing such classified services to conduct transactions with other services without explicitly identifying the source or targets of the transaction. Services qualified as Resource Service Consumer (RSC) submit transaction definitions (TDs) to a TPF (or system of TPFs as provided by a particular configuration) in the context of a session, where upon the TPF analyzes the TD in order to determine the set of services to use and additional information that is required prior to execution. Once the TD services are selected and associated transaction situation context (TSC) defined, the TPF executes the transaction either synchronously or asynchronously as defined by the TD. During transaction processing, the TPF may execute multiple operations with resource service providers (RSP) combining the results of the operations as needed. The results of these operations are resources, which may be information content or descriptions of information or services thereof.","The system of the present invention is a scalable, distributed, and generalized transaction framework that supports a plurality of service and resource classes using the same processing infrastructure. Through this framework, services are loosely coupled according to their class specification, which describe the functions and resources they support. These specifications are stored in a repository that is accessed by the one or more TPFs during transaction processing in order to determine service compatibility with the TD. Further, the framework provides a means to differentiate available services on a session-by-session basis, allowing access models to be controlled by some configuration means.","The system can operate in a variety of configurations using a one or more TPFs providing a flexible means to balance server loading. Through the configuration mechanism, the transaction framework natively supports transaction distribution such that TPFs coordinate transaction processing as specified by service bindings. From an RSP or RSC perspective, a system of one or more TPFs appears as one TPF.","The method of the present invention is a process for conducting transactions using the TPF system without explicitly interpreting or interacting with the resource information. The method provides a means to specify TDs such that they can be processed and stored for subsequent reference using a uniform resource indicator (URI). Further, the method provides a means to process TDs using an external processing agent, which translates TDs into a structured format readily processable by a TPF. The external processing agent provides a means to support multiple TD schemas as required by the particular deployment. In addition, the TD processing method also provides for a means to select compatible services and then to execute the transaction as defined by the TD. With TPFs providing dynamic transaction control, the present invention provides methods for improving TPF transaction performance, as well as means for scaling TPF functionality to provide maximal transaction throughput with a minimum of computing overhead.","To support easy integration and rapid applications development, registered TDs can reference other TDs using a URI, creating a functional programmatic model, where services can leverage pre-defined transactions through any number of distributing computing protocols including SOAP, RMI, CORBA, COM+. In addition, these stored TDs can be grouped to form an Application Programming Interface (API).","The present invention provides an additional means for transaction control and service binding using membership and operating domain classification. Through these additional classification mechanisms, the TPF system can be configured to automatically support different service profiles with different API definitions in a secured manner.","In the present invention, one or more TPFs share a common configuration and means for coordinating transaction processing between TPFs. The TPFs are hosted by one or more processing host servers, which provide some means for inter-server networking. The TPFs are configured with bindings to one or more RSPs and\/or RSCs. Bindings can be established at any time according to a configuration management function and are available for transaction processing once established. RSCs can gain access to the information and services provided by one or more RSPs by submitting transaction definitions (TD) to a TPF. The TPF analyzes the TD and determines which RSPs should be utilized in execution of the TD.",{"@attributes":{"id":"p-0068","num":"0067"},"figref":"FIG. 1","b":["101","102","103","104","105","103","101","102","105","101","102"]},{"@attributes":{"id":"p-0069","num":"0068"},"figref":"FIG. 1","i":"a "},"For this example, there are five classes of resource providers; Portal Services , GIS Services , Traffic Services , Integration Services , and Wireless Services . The portal service provider class  contains a single provider , which is also a resource consumer in this example. The portal service provider  provides standard portal content such as news, weather and stocks. The GIS service provider class  contains two GIS service providers, one providing high fidelity GIS information (maps, routes, etc.) and one providing low fidelity information but cheaper. The traffic service provider class  contains two traffic service providers, one that provides traffic flow information and one that provides traffic incident information. The integration service provider class  contains a single provider, which is also a resource consumer in this example. The integration service provider  provides content integration services for the solution. The wireless service provider class  contains a single provider, which is also a resource consumer in this example.","There are four resource consumers in this example, the Pure Resource Consumers , the Portal Service Class Resources , the Integration Services Class Resources , and the Wireless Service Class Resources . The pure resource consumers  only consume information and do not act to provide information in any way. One example of a pure resource consumer  is provided, a rental company (Neutron Rental Agency). The Neutron Rental Agency tracks the location of all their rental equipment. To do this, they subscribe to the tracking application provided by the BigBucks TelCom service. The portal service consumers , utilize the GIS mapping and traffic incident information to provide richer content to their customers. The integration service consumers  work with all of the other service providers to integrate information such as integrating maps, routes, and traffic. The wireless service consumers  use the portal, GIS, traffic, and integration services to provide a tracking application and a mobile organizer application to their subscribers.","All of the external service providers and consumers , , , , and  are connected to the Site Deployment  via the Internet , , , , and .","The Site Deployment  consists of a collection of servers, one Web Server , one GIS Server , one Traffic Server , and one Integration Server  that are all connected via a local network . In addition, a data store  is present to manage the supported class specifications and registered transaction definitions. A transaction record store  is also present to maintain a record of all transactions processed for billing purposes. The Web Server , GIS Server , and Traffic Server  all contain a single Transaction Processing Function and are collectively configured via the Configuration contained on the Web Server . For this particular configuration, all GIS operations are delegated to the TPF on the GIS Server  and all Traffic operations are delegated to the TPF on the Traffic Server . This is done to reduce loading on the Web Server . Integration operations are processed by the TPF on the Web Server  in conjunction with the Integration Server  acting as a resource provider.","Prior to interacting with the site , a service class must be registered for each provider service utilized by the system and each consumer service using the system. An administrator of the system usually registers the service class since a portion of the service classification specifies the access rights for the service. In addition, service providers must register their supported resource classes and resources for use by the system. Service consumers have the option to register some of their more commonly used transaction definitions. This will improve runtime performance. However, it is also acceptable to create the transaction definitions at runtime. Any non-standard context classes must be registered before they are referenced. Non-standard context classes are those that are not pre-configured (independent of any service) into the system and generally available to all services. If a consumer is specifying their transaction definitions in a non-standard specification language, that consumer must register a processing agent that supports the transaction definition language and processes it into operational sequences as specified in the present invention. For this example, all consumers are using a standard transaction definition specification syntax based on XML and JScript, which is supported by the site .","The following is a breakdown of the class specifications and transaction definitions registered for this example.\n\n","Although there are many possibilities for runtime scenarios, the one discussed here is the one that touches most facets of the provided example. The scenario is as follows. The Neutron Rental Agency subscribes to the BigBucks TelCom tracking application resource so they can track the location of their equipment.","Each piece of rental equipment that is tracked has a device built into it that sends asynchronous transaction requests (in the form of a transaction definition) to the Web Server  on the site , containing the current location context of the equipment. At any given time, the Neutron Rental Agency representatives can determine the location of any of their equipment by accessing the tracking application on the Internet (provided as part of the subscription to the BigBucks TelCom service provider). The tracking application provided by BigBucks TelCom uses the Low Fidelity GIS resource (located in the GIS resource class) and the mapping integration resource (located in the Integration resource class). In addition, to find the location of each piece of equipment, the location context is used.","The tracking application works by sending a transaction request (in the form of a transaction definition) to the Web Server  at the site . The transaction definition specifies that a map is to be generated that encompasses the locations of all items in the location context. In addition, the transaction definition specifies that icons be overlaid on the map to show the location of all items in the location context. The transaction definition further specifies that the response contain the generated map with the overlaid icons and the current location context.","The TPF on the Web Server  processes the transaction definition by breaking it down into discrete operations. The map generation operation is delegated to the TPF on the GIS Server , which uses the Low Fidelity GIS resource to generate the map. The mapping integration resource is then used on the Integration Server  to overlay icons on the map for the locations of all items in the location context. The Web Server  returns the generated map (with the overlaid icons) and the current location context to BigBucks TelCom. BigBucks TelCom generates an HTML page with the map and adds hot points to it for each of the devices identified in the location context. Finally, the HTML page is returned to the Neutron Rental Agency representative (via the Internet).","Since the Transaction Record  includes the resources used as well as the resource consumer, billing is a relatively simple process of collecting the resources used by each consumer and billing appropriately.","In the future, adding more GIS Servers, Traffic Servers, or Integration Servers can scale the site . In accordance with the configuration settings on the Web Server , the TPF on the Web Server will dynamically delegate operations (to the GIS Servers, Integration Servers and Traffic Servers) based partly on the current server loading.","More consumers can easily be supported by the site  by registering a service class for them and adding whatever new resources are required for their transactions.","In addition, more providers of the same resource class can be added to provide redundancy, more choices and different price levels for a particular resource. The TPF will choose the resource most appropriate for the operation at hand without the consumer having to deal with the details.",{"@attributes":{"id":"p-0084","num":"0086"},"figref":"FIG. 2","b":["1","201","202"]},"As provided by distributed computing standards, the present invention treats each type of binding configuration essentially the same as any other type, providing a very flexible means for integration. The exact binding configuration of RSCs, RSPs, and TPFs is dependent upon constraints and performance issues of the particular environment. The objective of the present invention is to provide a flexible architecture that can be adjusted to support a wide variety of configuration options.",{"@attributes":{"id":"p-0086","num":"0088"},"figref":"FIG. 3","b":["301","302","303","304","305","304","305","306","303","307","2","303","308","1","303","307"]},"The collaboration of  also shows a configuration that provides for delegation of transactions between TPFs  and . Consider the example where RSC  requests a transaction needing the services provided by RSP . TPF  analyzes the TD provided by  and determines that operation can be delegated to TPF . TPF  performs the operation with RSP  and then returns the results via TPF  to RSC . Subsequent aspects of the present invention further discuss the processing model for transactions.",{"@attributes":{"id":"p-0088","num":"0090"},"figref":["FIG. 4","FIG. 3"],"b":["410","411","401","402","403","410","401","402","410","404","405","406","407","406","401","402","407","401","402","403","402","403","412","402","403","407","410","411","403","408","408","403","408"]},"The intent of the present invention's operational model is to provide for maximum configuration flexibility such that the preferred embodiment can be configured as needed to achieve maximal performance. An additional aspect of the invention deployment model is the ability to incrementally add additional TPFs and servers to the configuration without requiring a termination of the existing transactions.","One objective of the present invention is to implement a common transaction framework that is suitable for a wide variety of services and supportive of the resources utilized by those services. The preferred embodiment utilizes abstraction to achieve the necessary standardization; this includes the use of a meta-model in the aspect of defining the TPF configuration. This section discloses the core elements and relationships of the TPF framework and provides the basis for discussing operational behavior in following sections.",{"@attributes":{"id":"p-0091","num":"0093"},"figref":["FIG. 5","FIG. 1"],"b":["501","501","504","503","504","501","504","505","501"]},{"@attributes":{"id":"p-0092","num":"0094"},"figref":"FIG. 5","b":["506","507","501","508","506","507","510","507","511","513"]},"In the present invention's preferred embodiment, both RSPs and RSCs can be classified as to type or category of service as well as by the types of resources provided. This classification is useful, since it is possible to develop RSPs and RSCs that support standard service classes allowing RSPs or RSCs to manipulate resources given a particular class of service without regard for the specific instance of the class of service. Through this mechanism, services are further decoupled, as explicit knowledge of a service is not needed.",{"@attributes":{"id":"p-0094","num":"0096"},"figref":"FIG. 6","b":["1","3","601","602","603","604","602","605","602"]},"To effectively manage transactions for a wide variety of resources, the present invention provides a uniform structure for describing resources, contexts, and service classifications. The TPF uses this class information to determine the specific service, resource and context configuration for each transaction. The class information is managed by the USR and is essentially constant during the lifecycle of a transaction. The processing method, expected results, input arguments, and system provided context data are defined using class information, such that the TD is expressed independently of any specific instances of services or information.","The use of context information in the present invention provides the means to dynamically control the processing strategy during the execution of a particular transaction.",{"@attributes":{"id":"p-0097","num":"0099"},"figref":["FIG. 7","FIG. 5"],"b":["701","702","702","703","704","707","705","718","707","705","703","705"]},{"@attributes":{"id":"p-0098","num":"0100"},"figref":"FIG. 7","b":["708","701","702","708","704","705","710","704","711","706","706","712","712","712","712","713"]},"An additional aspect of the present invention shown in  is the association of TSC  with a transaction. As described previously, a TSC maintains information about the transaction situation context. This information is typically one or more elements that are useful during the processing of a transaction. The TSC  has zero or more associated context elements . The Context Class Specifier  specifies the specific nature and content of the context element. As with resources, the TPF manages context information in the course of a transaction, but does not interpret the information other than context type. Per the preferred embodiment of the present invention, context information can be used to affect the processing performed by services or the TDs processing flow (described in the section, Defining a Transaction with the TD).","The present invention provides a means for multiple services to interact without explicit knowledge of each other. To support implicit coupling, the preferred embodiment defines a uniform description model that allows specification of services, resources and transaction contexts independently of the service instance. All elements that are manipulated by TPFs are specifiable in terms of their characteristic attributes, and behavior. The TPF uses these specifications to dynamically determine transaction interaction between services. In the present invention, the TPF uses relationships and class type identifiers in its manipulation of services, resources and transaction contexts; direct interpretation and specific knowledge of class type is delegated to the services that specify support for the type in their USM data. In the preferred embodiment, the USM is factored such that it is compatible with other service and data classification models. The data model provided for in the Universal Description, Discovery, and Integration (UDDI www.uddi.org) standard is one example of a compatible classification model.",{"@attributes":{"id":"p-0101","num":"0103"},"figref":["FIG. 8","FIG. 8"],"b":["801","802","803","804","804","804","805","806","801","807","808","804","804","810","811","812"]},"ClassSpecifiers are uniquely identified by some URI in a global sense. Additionally, specifiers are identified by a user-friendly name, a collection of categories, and a collection of identifiers. The present invention also provides for services to be associated with one or more class specifiers, indicating related specifications. The TPF may interpret category, identifier, and related class information to determine suitability of the defined element (service, context, resource, etc.) within the scope of a transaction. ClassSpecifier attributes are not limited to information supported by the TPF. In situations, where attributes are defined and not understood, the TPF simply ignores the information, and passes it along to any service or transaction as appropriate.","In the present invention, resources are defined using a specialized form of a class specifier. As defined previously, resources must be definable through a resource class specifier, such that its nature and function are explicitly defined. As needed, the TPF will process resource specifiers using classKey, categories, and identifiers to determine resource suitability within the scope a transaction or operation. Services and TD processing agents may also process resource class specifiers as part of the transaction as well.","A context element is a piece of information that may be useful during the processing of a transaction definition. Each transaction has zero or more context elements, that may be accessed as needed to supplement transaction information. A specialization of a class specifier, a context class specifier defines a particular context element class. The context specification may contain additional context specifiers, which further refine its definition. In the present invention, the TPF interprets the information of the context specification as it determines the required context information for a particular transaction.",{"@attributes":{"id":"p-0105","num":"0107"},"figref":"FIG. 9","b":["901","903","904","905","906","907","908","909","907","908","909","910"]},"The present invention manages services according to their classification, supported contexts, and supported resources. The TPF uses service specifications to process each transaction in order to find the most appropriate provider for each transaction operation. TD processing agents may also interpret Service specifications as provided by the present invention. Each service wishing to be involved in transactions with the TPF must have a registered service specification in the USR that meets the structural definition described in the USM. Each service specification defines a unique URI (serviceKey) used to reference the service, a name for the service (serviceName), the categories of resources supported by the service and the identifiers for those resources. In addition, each service specification can define more attributes as needed for the service. For each service, its bindings and resources (if any) must also be defined. Binding information provides communication protocol and access information for a service. Services that are only consumers will not define any resources but will have at least one binding defined. The service bindings enable services to combine related functionality into groups with the same communication protocol and access point. Each binding\/functional grouping can be further broken down into resources as needed, to provide fine-grained access to specified functions if needed.","With service specifications providing complete definitions of communication protocols and APIs, the TPF can validate a service and method call independently from the specific service. This ability decouples interface validation from a particular instance of a service and provides a means for handling programmatic errors without potentially corrupting a particular service. Further, with this information, the TPF can provide limited emulation of an API, which is useful for testing and validation of both RSPs and RSCs.","In the present invention, URDs are defined and associated with a particular session; as such, they are valid only during the scope of the session. This forces URD consumers to comply with the rules and access model defined by the session object. With this relationship, the URD can be de-referenced by a TPF affiliated with the session. In the preferred embodiment, the URD is de-referenced, which returns the specified resource in a format specified by the caller. In some cases the URD may actually contain the resource rather than reference it as may be appropriate for small amounts of data, where additional transactions may create unwarranted overhead. In these situations, the URD will be identified as containing information rather than referencing it. In the preferred embodiment, information contained in the URD can be extracted directly, without interacting with the session. This relaxation of the access model is dependent on the resource class specifier information, and provides a means for performance optimization, where appropriate.","In the present invention, services initiate one or more transactions within the scope of a session; such transactions require that services and resources be identified by class type, category, or some other characteristic so that the TPF may select the appropriate services and specific resource instances based on the session service profile and TSC. In the preferred embodiment of the present invention, transactions are defined as a series of operations with one or more services, either consumers or providers. The exact sequence of operations and processing algorithm is described by an externally provided TD. The TD defines the types of services, classes of resources involved, context information, transaction process flow, and caller arguments. In the present invention, the TPF processes the TD prior to execution of the transaction, establishing TD validity and the specific service operations to execute.",{"@attributes":{"id":"p-0110","num":"0112"},"figref":"FIG. 10","b":["1001","1001","1002","1001","1003","1005","1001","1004","1006","1005"]},{"@attributes":{"id":"p-0111","num":"0113"},"figref":"FIG. 11","b":["1101","1101","1102","1103","1104","1105","1104","1102","1105","1104","1106"]},"According to the present invention and as shown by  and , the TD thus defines the nature and process of the transaction. TDs are provided prior to or at the time of the transaction and are uniquely identified according to some URI. TDs quantitatively define all input and outputs of the transaction, and the TD can be verified for correctness prior to execution of the transaction. The preferred embodiment uses a more complex form than described here to accommodate version control, security and other aspects common to a large scale solution; however, the previous discussion should be sufficient for one skilled in the art to define a workable implementation.","The present invention executes a transaction according to a TD. The RSC initiating the transaction submits a TD to the TPF, where upon it is processed according to the associated session data: namely, the available services, resources and context information.  shows the TPF transaction process flow and associated data elements as defined by the present invention. The diagram shows the primary process flow for successfully executing a transaction. In the preferred embodiment, other flows managing failure are also supported, but not shown for clarity. A transaction begins by processing the TD  using the Process TD function . Additional session data  and other registered TDs  are also provided in order to resolve TD  references. In the preferred embodiment, all TPF processing functions are able to access information contained in a Uniform Specification Repository  as shown in , which allows for interpretation of TD class specifiers as needed. The registered TDs  are managed by some external cache management or storage function providing efficient access to a TD using either the TDs tdKey or tdName as appropriate. Upon completion of TD Processing in , a TD Program  is produced for subsequent processing. The Build TSC function  uses the session data to construct a TSC with the needed contexts as specified by the TD Program  (see Processing TDs for more information on the structure and content of a TD Program). The preferred embodiment constructs the TSC by simply locating or creating the context elements specified by the TD Program. However, the present invention does not exclude other means for construction as defined by other implementations. The TSC  produced is used by the Execute Program function .","Continuing with , successful completion of the Build TSC  the TPF transaction then decomposes the TD operations into atomic service operations using the Atomize TD Operations function  (see Atomizing TPF Operations for details). Using the TD Program information , function  produces a table of atomic TPF operations , which is used by the execute program function . Following completion of function , the services specified in the TPF operations  are evaluated for optimal binding according to the Link Services function  (see Linking Services for details). From Linking Services , a service binding information table  is produced and used by the Execute Program function . With the successful completion of the execute program , the transaction ends.","One concern present with the described transaction processing flow is the need for optimal performance. As discussed previously, the process for interpreting and executing a TD can be process intensive. The construction of the process flow model is such that optimizations can be applied at one or more points in the flow, eliminating redundant processing. The use of cached TDs, TD Programs, TSCs, TPF Operations, and Service Bindings can substantially reduce the processing overhead in the TPF prior to TD execution. For example, caching the TD Program would allow the TPF to bypass the Process TD function  entirely, which would substantially reduce processing times for complicated TDs. The preferred embodiment of the TPF actively minimizes the transaction-processing overhead using multiple means that can vary on a transaction basis.",{"@attributes":{"id":"p-0116","num":"0118"},"figref":["FIG. 13","FIG. 10"],"b":["1301","1005","1301","1305","1306","1309","1308","1307","1309","1001"]},"In general, processing agent  identifies TPF operations  storing the information in the TD Operation Sequence table . A TD operation sequence is defined as any function call from within the TD Definition Body that requires action by the TPF. They are termed operation sequences since each operation sequence will be further decomposed into atomic operations as provided by the Atomize TD Operations  in . The Process TD Body function  modifies or compiles the TD Definition Body as needed to produce a \u2018ready to run\u2019 form. The exact processing is specific to the TD Processing Agent  and is external to the TPF. The TPF delegates execution of the TD body to the processing agent, which eliminates the need for interpretation by the TPF; this is discussed further in Executing TD Program. In general, the processing agent completes TD processing by creating the TD Module , which is passed back to the TPF for further processing. The last step in TD processing is to build a TD program . The Build TD Program function  is performed by the TPF  and resolves TD references to other registered or provided TDs and combines module data into one complete TD Program . Before a referenced TD can be used, it is verified that invoking service has authorization to use it. The structure of the TD Program is essentially the same as the TD Module , but with additional information about other referenced TD modules. The Program Header  defines the expected results and input arguments similar to Module Header . The TD Program Executable  contains all information needed to execute the program without additional pre-processing.","Fundamentally, TD Processing provides a means to convert raw TDs into a form that is readily suitable for processing by the TPF. The TD Module and TD Program represent this prepared form. Once these elements are constructed, the original TD is no longer used or processed by the TPF. By caching the TD Module or TD Program, TD processing can be bypassed almost entirely.",{"@attributes":{"id":"p-0119","num":"0121"},"figref":"FIG. 14","b":["1401","1403","1404","1403","1403","1404","1405","1406","1407"]},"Prior to execution, the TPF operations must be bound to the selected services; some means for selection is required. The preferred embodiment allows the binding method to be specified via the TD. As such, the binding method can vary from one transaction and session to the next. One simple method of selection is to select the binding of the TPF processing the transaction if possible, otherwise select first valid binding. Other selection methods are possible, the preferred embodiment provides the means to specify the binding selection method on a per session basis. Other methods might include service cost, performance impact, and most recently used. Given a particular binding selection function , the TPF iterates over the service map table  selecting the valid bindings and adding them to a service binding data object . Once completed, the Service Bindings object  will contain valid service bindings  for use in execution of the TD. Any service defined in  without a valid service binding will simply result in a \u2018no\u2019 operation.","With the TD Program, TSC, TPF Operations, and Service Bindings defined, the TPF can then execute the transaction.  shows the general sequence for executing a transaction. Execution begins with locking the TSC ; this prevents it from changing state during the course of the transaction. Once locked, the TSC and TD Program are passed to the Execute Program function . The TD Processing Agent  that used the original TD in  provides the corresponding Execute Program function . The exact function of  is dependent upon the agent, but in general,  will periodically request the TPF  to process a sequence of operations  during program execution. The order in which TD operation sequences are invoked is dependent upon the TD program. For the \u2018ith\u2019 operation sequence , the TPF  executes, in parallel , the associated atomic operations defined by the TPF operations object. Upon completion, each operation as specified by the service binding is recorded by the TPF . The record of the transaction can be used subsequently to report transaction history. With operations sequences consisting of multiple operations , the results are combined  into one set of information prior to returning control to the TD Processing Agent . Upon completion of the TD program execution in , the lock on the TSC state is released in .","If the TD Program returns a result, it is packaged in  and passed to the TPF upon completion. The TPF will pass the return result to the initiating service.","One aspect of the present invention to improve transaction-processing performance is to register TDs prior to their use. TD processing can be done independent of a particular transaction, and in some cases, atomizing operations and linking services as well. Registration also provides the benefit of making TDs available for others to use independent of session. More complex TDs can be created that reference other TDs, providing a flexible reusable framework of transaction functionality.","Further, TD Registration enables a set of TDs can be associated to form an API, which can be registered and subsequently classified using the Uniform Services Model. In this fashion, the present invention supports aggregation of services and to form new APIs tailored to meet any number of requirements.","With support for TD registration, the preferred embodiment also provides a means to authenticate and validate TDs, particularly for TDs with global or public scope. This allows the TPF system operator to control functionality available to the TPF consumers. Further TD registration can be secured and limited to specific sessions using TPF functions described previously by creating a TD registration service that is an RSP. In a similar fashion, TD API publication can be accomplished through a TD publication RSP.","In general, all interactions with the TPF, including transactions, configuration, service registration, and TD registration, are managed by the TPF transaction process flow.","The TPF processing model described previously provides a generalized synchronous framework for services to interact without explicit coupling, using session information to dynamically determine bindings between services for a particular transaction. In another aspect of the invention, the TPF provides an asynchronous transaction capability, where transactions are processed independently of the originating process. This function enables the TPF to support lengthy transaction processing without blocking the invoker. In addition, asynchronous transactions provide a means to support transactions between sessions. In the preferred embodiment, asynchronous transactions are supported by the TPF using a first-in-first-out ordering mechanism, where TDs are placed on a queue until processed. The process for executing an asynchronous transaction is identical to synchronous transactions as described previously, with the exception that the TPF initiates the transaction using internal processing resources rather than some external RSC initiator. As a result, asynchronous transactions have no return result, and error conditions or exceptions would be logged using some reporting means. If required, transaction ordering for a session can be preserved within a single TPF and across multiple TPF configurations, where services have only one binding with the system. Services requiring transaction order preservation would specify \u2018one\u2019 as the maximum number of concurrent session transactions in the service-binding template. In configurations where multiple service bindings exist, ordering is not necessarily preserved since concurrent transactions with a service can be executed simultaneously. Services supporting multiple bindings, would take care of transaction ordering itself if required.",{"@attributes":{"id":"p-0128","num":"0130"},"figref":"FIG. 17","b":["1701","1702","1704","1703","1702","1701","1703","1704","1702","1703","1703","1705","1706","1703","1705","1706","1705","1706","1706","1705","1712","1705","1706","1713","1713","1710","1712","1712","1710"]},"As discussed previously, multiple TPFs can be used to coordinate transaction processing between one or more servers, distributing transaction processing according to the session's service binding function. In the present invention, each instance of a TPF provides some or all aspects of the processing functions; where in the event that a single TPF has partial functionality, others are available to provide other functions needed to complete the entire processing sequence. Most practical configurations will optimize server configurations to support maximal performance at a minimum of cost; thus the TPF preferred embodiment, allows for distribution of internal functionality across multiple servers as needed. The transaction-processing model shown in  is designed as a linear process, where each functional element operates independently passing well-defined data-objects (, , , , , ) along the chain. To optimize the maximum concurrent transactions and to minimize allocation of limited operating system resources, the preferred embodiment of the TPF processing model implements transaction processing as a sequence of asynchronous messages, wherein the transaction state is maintained by the transaction object as shown in .","In the case of multiple TPFs, each TPF will have a transaction object with transaction state information for the particular TPF. A first TPF can delegate one or more functions to other TPFs by sending its transaction state and appropriate data objects to the other TPFs. The other TPFs instantiate their own transaction with state information provided by the first TPF and continues processing at the point specified by the originating message. Using the asynchronous processing infrastructure as discussed previously, the TPF processes the delegated functions as it would any other transaction in FIFO order. In the preferred embodiment, a priority may be assigned to particular transactions to optimize processing efficiency, giving preference to internal transactions or delegates as needed.",{"@attributes":{"id":"p-0131","num":"0133"},"figref":"FIG. 18","b":["1801","1802","1803","1804","1805","1806","1802","1802","1807","1803","1802","1803","1803","1802","1802","1809","1810","1803","1802","1802","1804","1811","1804","1802","1804","1813","1805","1812","1804","1814","1804","1802","1806"]},"In the present invention, both the TPF system configuration and service linking control distributed transaction processing. The exact distribution of transaction functionality is determined at the time of the transaction, and may vary according to current system load and transaction definition. This distributed transaction model provides a flexible configuration framework that allows operators to deploy additional servers where additional performance is needed. Further, with some dynamic configuration management means, processing distribution can change and adjust as the system comes under load, taking advantage of idle resources.","If implemented as described previously, the TPF would typically process all aspects of a TD for each transaction. While this provides maximal flexibility, the potential performance cost is high when considering that a number of transactions will be essentially the same with the exception of input and TSC data. From an RSC perspective, the majority of the processing performed by the TPF would be considered management overhead, as the bulk of the transaction should be handled by one or more RSPs. As a result, methods for improving TPF performance are fundamental to the preferred embodiment. Given the potential for a TD to be executed multiple times in multiple sessions, the present invention provides for optimizations that can greatly improve the average performance of a particular TD. With consideration that TDs will be executed more than once, the present invention caches one or more of the intermediate data objects, such that these data objects can be quickly accessed during subsequent transactions. In this way, The TPF can bypass parts of the transaction process where intermediate data objects already exist in cache.","In particular, the TPF may cache TD modules, TD programs, static context data, service operations, and session service bindings using some external cache management function that allows rapid retrieval of data using multiple indexes. These data are stored and indexed according to their data type, tdKey, session, scope of use, and ranking. By caching TD Modules and TD Programs, subsequent TD processing can be eliminated for those sessions with appropriate scope access. This optimization alone can save significant transaction processing overhead.",{"@attributes":{"id":"p-0135","num":"0137"},"figref":"FIG. 19","b":["1901","2","1902","1","1903","1904","1","2","1904","1","1903","1","1905","1906","1907","1908","1909","1","1901","1","1915","1","2","1904","1916","1917","2","1","2","1920","2","1","1921","1","1","1922","1","1923","1","1","1924","1","1","1925","1"]},"In the present invention, caching of intermediate transaction data products can be performed serially as in the previous illustration or all at once (or burst caching) as required for optimal performance. In certain situations, the cache management function may reside on a separate server from the TPF; in which case, burst caching would be preferred since it requires less frequent communications over the network. The cache management function may hold intermediate transaction information for a limited period due to limited processing or storage resources. In such cases, the cache may manage the information according to some means. Most recently used (MRU) and complexity costs are examples of suitable algorithms in the preferred embodiment. If one or more aspects of the transaction data are not available, the TPF can simply regenerate the data using one or more parts of the transaction process.","To further reduce performance overhead in processing, Registered TDs can be pre-processed prior to use, such that cached information is readily available. In addition, static elements of the TSC can be defined outside the scope of the transaction, such that TSC construction is minimized.","Up to this point, the present invention (as described) supports a transaction processing framework where services can initiate transactions that involve other services base on a system configuration that limits access to services, resources and contextual information based on the access privileges granted to the initiating service.",{"@attributes":{"id":"p-0139","num":"0141"},"figref":["FIG. 20","FIG. 7"],"b":["2001","2003","2002","2004","2005","2001"]},"The member object is designed for specialization in that the TPF only manages services with respect to member types. Services may choose to define additional member types via the Member Class Specifier  and associate various TDs, resources, etc. with each type. Examples of specialized member types include users, organizations, sensors, and administrators. The present invention provides for qualifying sessions and service profiles based on member attributes, but leaves precise definition of member to the specific TPF system configuration. Fundamentally, the TPF supports multiple member types concurrently.","Another extension to the base TPF processing structure is the provision for domain specific transaction processing. The preferred embodiment of the present invention allows for session and member state information to be organized according their domain of use. The domain itself is defined externally and is used internally to classify and structure services hierarchically among a group of members. The utility of this structural extension provides for session transactions to be managed with respect to domain and member information, in that the services can be commonly defined for a particular domain and made available to any number of members belonging to the domain. Further, the TPF can record session transactions with respect to member and domain such that utilization can be reported in aggregate for a group of users. In many service models, some grouping mechanism is typically required to support related sets of information. The domain extension allows the TPF to support these constructs natively and constrain TD processing accordingly.",{"@attributes":{"id":"p-0142","num":"0144"},"figref":["FIG. 21","FIG. 7"],"b":["2103","2102","2105","2106","2106","2102","2103","2107","2107","2106","2103","2108","2104","2112","2109","2110","2109"]},"Domain specialization is more elaborate than the member specialization of  and is considered an alternate form. Typically, an implementation of a TPF would support either extension but not both concurrently as they have conflicting or redundant structure. The structure of , however can behave identically to the membership extension if the cardinality of the roles and group are limited to one.","Consider the illustrative object instance diagram shown in . A domain hierarchy is defined such that members are assigned to various groups with different services. The hierarchy begins with the root group , which belongs to the ROOT Domain  as provided by the free access service contract relationship . For this scenario, a free access service contract means that no restrictions are applied to accessing services provided in the root group. This is useful, for example, where administrators such as Member   needs access to all services in the root domain for configuration management. In general, only members with administrator type roles would belong to a root domain, as they have complete access to all sub-domains and service profiles within a system of TPFs. Continuing with the illustration, two groups  and  belong to the root group . Group  has restricted access to the root group in that no members belonging to Group  may access information belonging to the root. To facilitate the enforcement of this restriction, Group  is associated with a custom Domain , which has a completely independent set of service profile specifications. In this case, Group  has service access restrictions as specified in the service contract . Restrictions can include reporting requirements, maximum utilization, concurrency, etc. Group  has three associated members: , , and . Member  has an admin type role  with group , providing for administrative capabilities, such as adding and removing members. As shown, Member  has two active sessions , which provide TPF transaction support according to the service profile as defined by contract . Group  is defined with read-only access with respect to the root group  in that sessions created within the scope of  are able to view service and member information of the root group  but cannot modify it. This is useful for situations where the TPF is providing global services. Group  has two members  and , where  belongs to both groups  and . Member  has a different role for each group  and , which means he has different access rights to the services included in each of those groups.","With the domain extensions, the TPF has the means to organize transaction state data according to the following levels of scope: session, member, group, and domain. In addition, the TPF provides for organizing state data hierarchically with the group scope. Domain specialization also provides an intrinsic service management model that is flexible enough to meet almost any particular configuration scheme, with the provisions of a built in secured access model that is standardized with respect to all services and transactions.","While the preferred embodiment of the invention has been illustrated and described, it will be appreciated that various changes can be made therein without departing from the spirit and scope of the invention."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing aspects and many of the attendant advantages of this invention will become more readily appreciated as the same become better understood by reference to the following detailed description, when taken in conjunction with the accompanying drawings, wherein:","All drawings are depicted using syntax and grammatical structures of the Unified Modeling Language (UML, version 1.1); where appropriate or necessary additional diagrammatic constructs have been used to disclose the nature and preferred embodiment of the present invention.",{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 1","i":"a "},{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIGS. 2 to 4"},{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIGS. 12-16"},{"@attributes":{"id":"p-0055","num":"0054"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIGS. 18 and 19"},{"@attributes":{"id":"p-0057","num":"0056"},"figref":"FIG. 20"},{"@attributes":{"id":"p-0058","num":"0057"},"figref":["FIG. 21","FIG. 20"]},{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIG. 22"}]},"DETDESC":[{},{}]}
