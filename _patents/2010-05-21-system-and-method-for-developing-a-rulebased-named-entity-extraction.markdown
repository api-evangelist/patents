---
title: System and method for developing a rule-based named entity extraction
abstract: A system and method for developing a rule-based named entity extraction system is provided. The method includes analyzing requirements of business users. The method further includes designing the rule-based named entity extraction system based on the requirement analysis. Further, the method includes implementing the design of rule-based named entity extraction system using one or more GUI-based tools. Thereafter, regression testing of the rule-based named entity extraction system is conducted. Finally, rule-based named entity extraction system is deployed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08752001&OS=08752001&RS=08752001
owner: Infosys Limited
number: 08752001
owner_city: 
owner_country: IN
publication_date: 20100521
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["The present invention is directed towards developing a rule-based named entity extraction system. More particularly, the present invention provides a system and method for providing a Rapid Application Development (RAD) framework for developing a rule-based named entity extraction system.","Rule-based named entity extraction is a natural language processing technique that identifies one or more named entities present in unstructured text data based on one or more predefined rules. Examples of named entities include, but are not limited to, person names, products, organizations, locations, email addresses, vehicles, computer parts, currencies, temporal entities such as dates, times, days, years, months and weeks, and numerical entities such as measurements, percentages and monetary values. Rules are regular expressions formulated by domain experts based on writing style and terminologies of target domain of unstructured text data.","While developing a rule-based named entity extraction system, the rules defined by domain experts are implemented in a high level programming language such as Java, C++, FORTRAN, and PASCAL etc. by users who possess software coding skills. The users who have software coding skills are hereinafter referred to as specialists. The domain technology experts may not possess software coding skills and may require technical specialists at the time of implementation of the rules. The dependency of domain experts on technology specialists increases the cost of development of a rule-based named-entity extraction system due to involvement of extra resources\/manpower. Further, the development time of the extraction system increases due to additional communication required between domain and technical specialist. Furthermore, the technology specialists need to make changes at source code level of the rule-based named entity extraction system whenever the rules have to be modified\/updated. The process of making changes at source code level for modifying rules is arduous and time consuming. As a result, the productivity and efficiency of technical specialists is decreased. Also, the cost and efforts involved in procuring such resources for different environment makes the entire process arduous and infeasible.","Further, regression testing is an essential aspect of developing a rule-based named entity extraction system and is conducted to verify source code of the rule-based named entity extraction system whenever the source code is modified. Presently, regression testing is conducted by either a customized external regression testing tool or by adding a custom regression testing code to the source code of the extraction system. However, conducting regression testing through testing code and external regression testing tool is arduous, time consuming and requires involvement of technical specialists.","In light of the above-mentioned disadvantages, there is a need for advanced rule modeling and regression testing tools that facilitate quick and easy development of a rule-based named entity extraction system. The rule modeling and regression testing tools should facilitate domain experts who do not possess requisite software coding skills to develop a rule-based named entity extraction system. Further, the rule modeling and regression testing tools should enhance the productivity\/efficiency of the technical specialists.","A method and system for developing a rule-based named entity extraction system is provided. In an embodiment of the present invention, the named entity extraction system is developed for extracting named entities from unstructured text data.","In various embodiments of the present invention, the system for developing a rule-based named entity extraction system includes a RAD framework. The RAD framework includes a heuristics modeler, which is a GUI-based tool configured to facilitate building of rules and lexicons for named entity extraction. Further, the RAD framework includes a project settings module, which is a GUI-based tool configured to enable application developers to perform project management activities related to implementing the rule-based named entity extraction system. Furthermore, the RAD framework includes a testing framework, which is a GUI-based tool configured to facilitate automated regression testing of the rule-based named entity extraction system. Additionally, the RAD framework includes a deployment module configured to facilitate deployment of the rule based named entity extraction system using software components.","In various embodiments of the present invention, the method for developing a rule-based named entity extraction system includes analyzing requirements of business users wherein requirements analysis comprises understanding a business problem and studying domain specific language patterns. Further, the method includes designing the rule-based named entity extraction system based on the requirement analysis. Furthermore, the method includes implementing the design of rule-based named entity extraction system using one or more GUI-based tools. Additionally, the method includes conducting regression testing of the rule-based named entity extraction system and deploying the rule-based named entity extraction system.","A system and method for developing a rule-based named entity extraction system are described herein. The present invention provides a means for building rules and lexicons of a rule-based named entity extraction system using one or more GUI-based tools of a Rapid Application Development (RAD) framework. The present invention also provides a means for creating and executing one or more test cases for conducting regression testing of the rule-based named entity extraction system. The present invention further provides a means for deploying the rule-based named entity extraction system when the regression testing is complete.","The disclosure is provided in order to enable a person having ordinary skill in the art to practice the invention. Exemplary embodiments herein are provided only for illustrative purposes and various modifications will be readily apparent to persons skilled in the art. The general principles defined herein may be applied to other embodiments and applications without departing from the spirit and scope of the invention. The terminology and phraseology used is for the purpose of describing exemplary embodiments and should not be considered limiting. Thus, the present invention is to be accorded the widest scope encompassing numerous alternatives, modifications and equivalents consistent with the principles and features disclosed. For the purpose of clarity, details relating to technical material that are known in the technical fields related to the invention have not been described in detail so as not to unnecessarily obscure the present invention.","The present invention would now be discussed in context of embodiments as illustrated in the accompanying drawings.",{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 1","b":["100","100","102","104","106","108"]},"RAD framework  is a Graphical User Interface (GUI) based application development environment that facilitates quick development of a rule-based named entity extraction system. A rule-based named entity extraction system is a software application which can extract one or more named entities from unstructured text data based on one or more predefined rules. Rules are text-parsing heuristics\/regular expressions formulated by domain experts\/business analysts based on domain specific writing style and terminologies. The rules defined by domain experts\/business analysts are implemented in a high level programming language such as Java, C++, FORTRAN, Pascal etc. for developing a rule-based named entity extraction system. In an embodiment of the present invention, user who develops a rule-based named entity extraction system may be referred to as an application developer. In various embodiments of the present invention, an application developer may be a business user, a business analyst, a domain expert, or a technical programmer.","RAD framework  facilitates application developers to quickly develop a rule-based named entity extraction system using one or more GUI-based tools. In an embodiment of the present invention, RAD framework  eliminates writing of an application code for developing a rule-based named entity extraction system. In another embodiment of the present invention, RAD framework  facilitates automatic generation of application code corresponding to rules defined using GUI based tools. In yet another embodiment of the present invention, an Extensible Markup Language (XML) file may be automatically generated that defines one or more rules in a declarative fashion. In yet another embodiment of the present invention, the application code and XML file corresponding to rules may be stored in a source code repository and may be accessed by source code of named-entity extraction system at run-time. In yet another embodiment of the present invention, the source code repository may be present in a file system or Relational Database Management System (RDBMS) of RAD framework .","Heuristics modeler  is a GUI-based modeling tool that facilitates application developers to build one or more linguistic rules and lexicons. In various embodiments of the present invention, heuristic modeler  is a wizard that guides an application developer in building and maintaining rules and lexicons.","Testing framework  is an integrated GUI-based testing framework that facilitates automated regression testing of a rule-based named entity extraction system. Regression testing is an essential aspect of developing a rule-based named entity extraction system and is conducted to verify source code of the named entity extraction system whenever the source code is modified. In an embodiment of the present invention, regression testing is referred to as verification testing and is conducted to assess accuracy of a rule-based named entity extraction system when its rules and lexicons are modified. In another embodiment of the present invention, regression testing is conducted by comparing previous and current test results of a rule-based named entity extraction system.","Project settings module  is a GUI-based tool that facilitates application developers to perform basic project management activities. The basic project management activities may include, but are not limited to, entity specification, input data specification, rules browsing, lexicon browsing, and specifying project settings, project name, and working directory.","Deployment module  is a GUI based module that facilitates deployment of rule-based named entity extraction system using various software components such as run time executables, Application Programming Interface (API) documentation, user guides, help files, and release notes.","Operationally, heuristics modeler  facilitates an application developer to build one or more rules for developing a rule-based named entity extraction system. The rule-based named entity extraction system developed using heuristics modeler  is tested using testing framework . In various embodiments of the present invention, project settings module  facilitates development and regression testing of an entity extraction system by providing user interfaces and back-end engines to specify entities, input text data, project settings, project name, and working directory. Deployment module  facilitates deployment of the rule-based named entity extraction system when its testing is complete.","In an embodiment of the present invention, RAD framework  facilitates development of a rule-based named entity extraction system by application developers who do not possess software coding skills. In another embodiment of the present invention, RAD framework  enhances the productivity\/efficiency of application developers who possess software coding skills for developing a rule-based named entity extraction system. In yet another embodiment of the present invention, RAD framework  facilitates application developers to easily manage\/update rules, heuristics, and lexicons and accelerates the development to deployment time of a rule-based named entity extraction system.",{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 2","b":["200","200","202","204","206"]},"Rules builder  is a GUI-based module that facilitates application developers to build linguistic rules using one or more rule templates. The rule templates are predefined forms designed for formulating a variety of rules. In an embodiment of the present invention, each rule template comprises one or more rule parameters for defining one or more rules. In another embodiment of the present invention, an application developer may define a rule by selecting a rule template and specifying one or more rule parameters. In yet another embodiment of the present invention, an application developer may customize a rule by modifying parameters of an already existing rule. In yet another embodiment of the present invention, an application developer may check the results of rules in real-time and perform trial and error to define rules. In yet another embodiment of the present invention, when a rule cannot be build using existing rule templates, then a new rule template may be developed for building the rule. In yet another embodiment of the present invention, the newly developed rule template may be added to a source repository of the rule templates.","Lexicon builder  is a GUI-based module used by application developers to manage and build lexicon files for a rule-based named entity extraction system. A lexicon file is a look-up table that includes a list of commonly occurring domain specific terms and phrases. In an embodiment of the present invention, the lexicon file is a text file containing a list of terms or phrases separated by a new line. In another embodiment of the present invention, one or more terms can be added\/removed from a lexicon file. Further, it can be checked whether a new term is present in a lexicon file before adding the new term to the lexicon file. In yet another embodiment of the present invention, a new lexicon file may be built or existing lexicon file may be edited using lexicon builder .","Regular expressions editor  facilitates an application developer to formulate rules in form of regular expressions without using GUI wizards. In an embodiment of the present invention, a rule in the form of a regular expression can be formulated. A regular expression is a computing expression used for identifying string patterns in text data. Regular expressions editor  enables a user to directly enter a general expression for text extraction rather than modeling it using a GUI. An example of necessity of use of regular expressions editor  may be an instance where a complex rule has to be formulated which cannot be done using a predefined form in the rules builder . In an embodiment of the present invention, regular expressions editor  facilitates formulating one or more linguistic rules in the form of string pattern matching expressions.",{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 3","b":["300","300","302","304","306","308"]},"Entity specification module  is a GUI based tool that facilitates application developers to specify one or more entity types relevant to technical domain of the rule-based named entity extraction system. Examples of entity types include, but are not limited to, person names, products, organization, location, email addresses, vehicle, computer parts, currency, temporal entities such as dates, time, day, year, month, and week and numerical entities such as measurements, percentages, and monetary values. In an embodiment of the present invention, the entity specification module  may be used for building one or more lexicon files of entity types.","Input data specification module  is a GUI based tool that facilitates application developers to specify format of input data on which the rule-based named entity extraction system may be executed. In an embodiment of the present invention, the input data may be a text file, an XML file, or an MS Excel file. In another embodiment of the present invention, each line within the text file may be considered as a record during named entity extraction. In yet another embodiment of the present invention, the input data may be saved in a source repository such as file system or RDBMS.","Rules browser  is a GUI-based tool that facilitates application developers to browse one or more existing rule templates stored in the source code repository. In an embodiment of the present invention, rules browser  displays a list of rule templates and facilitates an application developer to browse rule templates based on rule name and parameters.","Lexicon browser  is a Graphical User Interface (GUI) that facilitates application developers to create, modify, manage, and reuse one or more lexicon files. The lexicon browser  operates in communication with the lexicon builder  () for building and managing lexicon files.",{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 4","b":["400","400"]},"In an embodiment of the present invention, the trigger word, entity type, and the number of words (+\/\u2212N) for the first rule may be specified in text fields of the first rule template . In another embodiment of the present invention, one or more lexicon files may be uploaded that contain a list of trigger words and entity types. In yet another embodiment of the present invention, new lexicon files of trigger words and entities may be created and stored in the source code repository.","In an exemplary embodiment of the present invention, a rule may be built using the first rule template  for extracting locations such as Wall Street, MG Road, Hudson Street, and Orchid Road from unstructured input text data. The rule may be defined as: \u201clocation\u201d is equal to word \u201cstreet\u201d or \u201croad\u201d preceded by one more word. In the first rule template , the entity type may be specified as \u201clocation\u201d and trigger words as \u201cstreet\u201d and \u201croad\u201d. Further, the value for \u201cnumber of words to left\u201d may be set as one and \u201cnumber of words to right\u201d may be set as zero. In an embodiment of the present invention, an XML file may be automatically generated and stored in a source code repository when a rule is defined using the first rule template .","In another exemplary embodiment of the present invention, the first rule template  may be used to build a rule for extracting entities from unstructured text data of automotive warranty claim forms. Few examples of unstructured text data present in warranty claim forms are illustrated below:\n\n","Each of the above-mentioned phrases includes two types of entities \u2018part\u2019 and \u2018defect\u2019. The entities of type \u2018part\u2019 are: \u201cVehicle, Horn, and Cable\u201d and entities of type \u2018defect\u2019 are: \u201cnot starting, not working and not aligned\u201d. In an embodiment of the present invention, the rule for extracting \u2018defect\u2019 may be defined as: \u201cdefect\u201d is equal to word \u201cnot\u201d followed by one more word. In the first rule template , the entity type may be specified as \u201cdefect\u201d and trigger word as \u201cnot\u201d. Further, the value for \u201cnumber of words to left\u201d may be set as zero and \u201cnumber of words\u201d to right may be set as one.",{"@attributes":{"id":"p-0051","num":"0053"},"figref":"FIG. 5","b":["500","500"]},"In an embodiment of the present invention, the trigger word(s), entity type(s), left and right delimiters for the second rule may be specified in text fields of the second rule template . In another embodiment of the present invention, one or more lexicon files may be uploaded having a list of trigger word(s), entity type(s), left, and right delimiters. In another embodiment of the present invention, new lexicon files of trigger word(s), entity type(s), left and right delimiters may be created and stored in the source code repository.","In an exemplary embodiment of the present invention, a rule may be built using the second rule template  for extracting locations such as \u2018House No. 2, Wall Street, US\u2019; \u2018House No. 4, MG Road, United States\u2019; and \u2018House no. 7, Hudson Street, Orchid Road, United States\u2019. The rule may be defined as: \u201clocation\u201d is equal to word \u201cstreet\u201d or \u201croad\u201d delimited by word \u201chouse\u201d at left and delimited by word \u201cUnited States or US\u201d at right. In the second rule template , the entity type may be specified as \u201clocation\u201d and trigger words as \u201cstreet\u201d and \u201croad\u201d. Further, the left delimiter may be set as \u201chouse\u201d and right delimiter may be set as \u201cUnited States or US\u201d. In an embodiment of the present invention, an XML file may be automatically generated and stored in a source code repository when a rule is defined using the second rule template .","In various embodiments of the present invention, the rule-based named entity extraction system of the present invention functions based on rules formulated using domain specific language patterns and does not utilize the knowledge of grammar of unstructured text data. The unstructured text data may be grammatically incorrect due to incorrect spelling, incorrect grammar, usage of domain specific jargons, and short-hand writing. As a result, the rule-based named entity extraction system of the present invention is particularly useful in extracting named entities where the input text data is grammatically incorrect.",{"@attributes":{"id":"p-0055","num":"0057"},"figref":["FIG. 6","FIG. 1"],"b":["600","100","602","604","606","608","602","602"]},"The first output format  represents extracted entities of the input records in a tabular format. The start and end character span represents the character offset of the entity value from the beginning of input records. The second output format  represents extracted entities of similar input records. The third output format  represents a structured XML document containing the extracted entity types and values.","In various embodiments of the present invention, named entity extraction of input text  may be facilitated by one or more domain specific lexicon files. In an exemplary embodiment of the present invention, named entity extraction of input text  may be facilitated by developing a lexicon file of \u2018vehicle parts\u2019 such as \u201croom lamp, horn, AC, cable, motor, actuators, and door\u201d, a lexicon file of \u2018technician actions\u2019 such as \u201creplaced, removed, corrected, and aligned\u201d and a lexicon file of \u2018defects\u2019 such as \u201crusty, broken, jammed, not starting, not working, not aligned\u201d.",{"@attributes":{"id":"p-0058","num":"0060"},"figref":"FIG. 7","b":["700","700","702","704","708","706"]},"Test suite builder  is a GUI-based tool that facilitates building of one or more test suites for conducting regression testing of a rule-based named entity extraction system. A test suite is a collection of one or more similar test cases, where a test case is a set of conditions or variables under which an application developer determines whether an application meets specifications. In an embodiment of the present invention, extraction results obtained by executing the rule-based named entity extraction system on input texts may be saved in form of one or more test cases in a file system or RDBMS.","Regression testing unit  is a GUI-based tool that facilitates application developers to conduct regression testing of a rule-based named entity extraction system whenever its source code is modified. In an embodiment of the present invention, the entity extraction result obtained by executing modified source code on input text is referred to as predicted output, and the entity extraction result obtained by executing the original source code on the input text is referred to as expected output. In another embodiment of the present invention, the expected and predicted outputs of a source code are stored as test cases in a file system or a RDBMS. In yet another embodiment of the present invention, the expected and predicted outputs for similar input text are compared to facilitate regression testing of the modified source code.","Test reporting unit  is a GUI-based tool that facilitates generation of regression testing results in the form of reports. In various embodiments of the present invention, reports include information about accuracy, recall, F-score, execution time, number of correct results, number of partially correct results, number of incorrect results, statistics for each entity, error line number and type, summary report generation and comprehensive list of incorrect results. In various embodiments of the present invention, recall and F-score are performance measures associated with information retrieval. Recall for a search and classification system is defined as the ratio of the number of correct results in the search or classification result and the total number of relevant results in the input collection. Recall is a measure of how well a search or classification engine performs in retrieving or classifying relevant documents or results. Precision is defined as the ratio of the number of relevant results retrieved by a search and the total number of results retrieved by the information retrieval or classification system. F-score or F-measure combines Precision and Recall and is calculated as the weighted harmonic mean of precision and recall.","Versioning unit  is a GUI based tool that facilitates versioning of rule-based named entity extraction system based on reports generated by test reporting unit . In an embodiment of the present invention, a rule-based named entity extraction system may be assigned a version number based on regression test results and modifications to the source code.","Operationally, test suite builder  facilitates an application developer to create test cases for conducting regression testing of a rule-based named entity extraction system. The regression testing unit  conducts regression testing of the rule-based named entity extraction system by executing the test cases built using test suite builder . The test reporting unit  generates reports based on output of regression testing results of the rule-based named entity extraction system. Based on the reports generated by test reporting unit , test versioning unit  may assign a version to the rule-based named entity extraction system.",{"@attributes":{"id":"p-0064","num":"0066"},"figref":"FIG. 8","b":["800","800","802","804","806"]},"The data fetch module  fetches the expected and predicted outputs of a rule-based named entity extraction system from a data source such as a file system and RDBMS. In an embodiment of the present invention, the data fetch module  may include data source adapters and connectors for fetching data from the data source.","The preprocessing module  converts the formats of predicted and expected outputs into an intermediate format. In an embodiment of the present invention, the intermediate format may be a pre-defined standard format of the RAD framework  ().","Operationally, when an application developer initiates regression testing of a modified source code of a rule-based named entity extraction system, the data fetch module  fetches the expected and predicted outputs of the system from the data source. When the expected and predicted outputs are fetched, the preprocessing module  converts them into an intermediate standard format. The outputs in standard format are compared by the comparison engine  to verify the functionality of modified source code.",{"@attributes":{"id":"p-0068","num":"0070"},"figref":["FIG. 9","FIG. 6"],"b":["900","902","904","902","904","602","902","904","902","902","902","902","904","904","904","904"],"i":["a","b","c","a","b","c. "]},"In various embodiments of the present invention, the record number, entity type, entity value, start character span and end character span of the first entries and match completely. Further, the entity type, entity value, start character span and end character span of third entry and second entry match completely. Therefore, the first entry and third entry of the expected output  are marked as correct. In an embodiment of the present invention, the second entry of the expected output  is marked as false negative as is present in the expected output  but absent in the predicted output . In another embodiment of the present invention, the third entry is marked as false positive as it is present in the predicted output  but absent in the expected output . In yet another embodiment of the present invention, the entries marked with false positive and false negative are considered incorrect.",{"@attributes":{"id":"p-0070","num":"0072"},"figref":"FIG. 10","b":["1000","1000","1002","1004","1002"]},"The entity level accuracy report  illustrates regression test results for entity types \u2018part\u2019 and \u2018defect\u2019 of 200 records. In an embodiment of the present invention, extraction of entity type \u2018part\u2019 resulted in success for 95 times and resulted in failure for 5 times. In another embodiment of the present invention, extraction of entity type \u2018defect\u2019 resulted in success for 25 times and resulted in failure for 25 times.",{"@attributes":{"id":"p-0072","num":"0074"},"figref":"FIG. 11"},"At step , the requirements of business users are analyzed. The process of analyzing the requirements comprises understanding the business problem and studying domain specific language patterns. In an exemplary embodiment of the present invention, the business domain of the business users may be automotive warranty claim analysis division. The business problem may be extraction of entities of type \u2018vehicle parts\u2019 and \u2018vehicle defects\u2019 from unstructured text data of automotive warranty claim forms.","At step , a rule-based named entity extraction system is designed based on the requirement analysis. In various embodiments of the present invention, the rule-based named entity extraction system is designed whenever the requirements of business users are updated. The process of designing comprises defining project parameters, rules, lexicons and entities based on study of language patterns of unstructured text data of the target business domain.","At step , the design of the rule-based named entity extraction system is implemented using one or more GUI-based tools of a RAD framework. In various embodiments of the present invention, the rule-based named entity extraction system is implemented whenever its design is updated. The process of implementing the design of the rule-based named entity extraction system comprises specifying project settings, building entities, building rules and lexicons. In an embodiment of the present invention, specifying project settings comprise specifying project name and working directory. In another embodiment of the present invention, the entities, rules and lexicons are built using one or more GUI-based tools. In yet another embodiment of the present invention, source code corresponding to rules and lexicons build using GUI tools is automatically generated and stored in a source code repository. In yet another embodiment of the present invention, the source code is saved in form of a XML file in a file system or Relational Database Management System (RDBMS) of the RAD framework.","At step , regression testing of the rule-based named entity extraction system is conducted to verify the functionality of its source code. In various embodiments of the present invention, the regression testing is conducted whenever source code of the rule-based named entity extraction system is modified. The regression testing comprises structuring tests, creating test cases, executing test cases and generating test reports. In an embodiment of the present invention, the test cases are created by storing expected and predicted outputs of a rule-based named entity extraction system for similar input texts in a source repository. In another embodiment of the present invention, the test cases are executed to compare the expected and predicted outputs of the rule-based named entity extraction system. In yet another embodiment of the present invention, the test reports are generated based on execution results of the test cases.","At step , the rule-based named entity extraction system is deployed. In various embodiments of the present invention, the rule-based named entity extraction system is deployed whenever it qualifies the regression tests. The process of deploying the rule-based named entity extraction system comprises versioning, documentation, archiving and creating run-time artifacts. In an embodiment of the present invention, the process of versioning comprises assigning a version to the entity extraction system based on regression testing results.",{"@attributes":{"id":"p-0078","num":"0080"},"figref":"FIG. 12"},"At step , test cases for conducting the regression testing are planned and structured. At step , test cases are created. In various embodiments of the present invention, the test cases are created using user-interfaces and engines to build test cases.","At step , the test cases are executed to compare expected and predicted outputs. Thereafter, at step , reports are generated based on the comparison results. In various embodiments of the present invention, reports include information about accuracy, recall, F-score, execution time, number of correct results, number of partially correct results, number of incorrect results, statistics for each entity, error line number and type, summary report generation, and comprehensive list of incorrect results.",{"@attributes":{"id":"p-0081","num":"0083"},"figref":["FIG. 13","FIG. 3","FIG. 1","FIG. 13","FIGS. 4 and 5","FIG. 1"],"b":["1300","1300","306","306","100","1300","1302","1304","1304","100"]},{"@attributes":{"id":"p-0082","num":"0084"},"figref":["FIG. 14","FIG. 3","FIG. 14","FIG. 14"],"b":["1400","308","1402","1404","1406","1400"]},"While the exemplary embodiments of the present invention are described and illustrated herein, it will be appreciated that they are merely illustrative. It will be understood by those skilled in the art that various changes in form and detail may be made therein without departing from or offending the spirit and scope of the invention as defined by the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE ACCOMPANYING DRAWINGS","p":["The present invention is described by way of embodiments illustrated in the accompanying drawings wherein:",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 14"}]},"DETDESC":[{},{}]}
