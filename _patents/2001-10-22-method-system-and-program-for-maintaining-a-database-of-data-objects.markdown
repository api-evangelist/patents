---
title: Method, system, and program for maintaining a database of data objects
abstract: Provided is a method, system, and program for maintaining a database of data objects. A first data object implemented in a first programming language including attributes and attribute values for a class is received. The first data object is transformed to a second data object implemented in a second programming language, wherein the second data object includes the attributes and attribute values of the class included in the first data object. The second data object is added to the database, wherein the database is capable of storing multiple data objects implemented in the second programming language.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07020641&OS=07020641&RS=07020641
owner: Sun Microsystems, Inc.
number: 07020641
owner_city: Santa Clara
owner_country: US
publication_date: 20011022
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE DESCRIBED IMPLEMENTATIONS","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS","Additional Implementation Details"],"p":["1. Field of the Invention","The present invention relates to a method, system, and program for maintaining a database of data objects.","2. Description of the Related Art","An object oriented data base system (OODBMS) provides a persistent and sharable repository and manager of objects defined according to an object-oriented data model. Every object encapsulates a state and behavior. The state of an object comprises the values of the attributes (also referred to as properties) defined for the object, and the behavior of the object comprises the methods provided with the objects. Objects that share the same attributes and methods comprise a class. All the objects maintained in an OODBMS are members of the same class or have the same parent class. This means that the same set of methods defined for the class are used to manipulate the objects in the OODBMS, such as create, delete, add, read, modify, update, etc. Further, the objects in a class have the same attributes defined for the class, even though particular attributes within any of the objects in the class may have different values. Objects persistently stored within an OODBMS defined for a class are viewed and distinguished according to the values provided for their attributes. Each object is further provided a unique identifier for use in accessing the object within the OODBMS using the interfaces provided for the class. Benefits and further explanations of object oriented databases are described in \u201cResearch Directions in Objected-Oriented Database Systems\u201d, by Won Kim (Copyright Association of Computing Machinery, 1990); \u201cIntermedia: A Case Study of the Differences Between Relational and Object-Oriented Database Systems\u201d, by Karen E. Smith, Stanley B. Zdonik, OOPSLA '87 Proceedings (Copyright Association of Computing Machinery, 1987); and U.S. Pat. No. 6,128,771, all of which publications and patents are incorporated herein by reference in their entirety.","Currently, many object oriented database systems are implemented using a Java application programming interface (API).** The application programmer may write APIs in Java to use to access the object oriented database management system (OODBMS). The interfaces to the objects in the OODBMS are also written in Java, and the objects in the OODBMS are implemented as Java classes. In such Java implemented OODBMS, Java applications can generate Java objects to add to the Java OODBMS and utilize Java APIs to manipulate the Java objects in the Java OODBMS.","One challenge with prior art object oriented database systems is that applications written in different programming languages cannot share objects in the same OODBMS. For instance, a C or C++ application program creating a C or C++ data object cannot add objects to a Java OODBMs because of differences in the naming conventions and structures in the different programming languages. Thus, although two applications written in different languages may utilize the same class of objects having the same attributes and attribute values, and desire to share the same data objects, the applications in the different programming languages cannot store and access objects in the same OODBMS. Due to such limitations, duplicate object oriented databases must be provided for the application programs in the different programming languages even though such application programs intend to use the same data objects instantiated from the same class. Further, one application will not be able to access or manipulate the objects created by the other application and maintained in that applications OODBMS.","For these reasons, there is a need in the art to provide mechanisms to allow application programs in different programming languages to utilize the same OODBMS.","Provided is a method, system, and program for maintaining a database of data objects. A first data object implemented in a first programming language including attributes and attribute values for a class is received. The first data object is transformed to a second data object implemented in a second programming language, wherein the second data object includes the attributes and attribute values of the class included in the first data object. The second data object is added to the database, wherein the database is capable of storing multiple data objects implemented in the second programming language.","Further, a class schema is received including information on the class and attributes of the first data object and used to transform the first data object to the second data object.","In still further implementations, using the received class schema to transform the first data object to the second data object comprises generating a source code file in the second programming language to implement the class and attributes in the class schema. The source code file is compiled to generate an executable file that implements methods of the class. One method of the class is used to construct the second data object and the attribute values from the first data object are included in the second data object.","Further provided is a method, system, and program for returning data objects from a database to an application that processes data objects in a first programming language. A request is received from the application for at least one data object in the database having attributes and attribute values of a class. Each requested data object is accessed from the database, wherein data objects in the database are implemented in a second programming language. Each accessed data object is transformed to one transformed data object implemented in the first programming language, wherein each transformed data object includes the attributes and attribute values of the class in each accessed data object. Each transformed data object in the first programming language is returned to the application that initiated the request.","In further implementations, at least one class schema is provided, wherein each class schema includes information on one class and attributes of the class of at least one data object in the database. Transforming accessed data object to one transformed data object further comprises, for each accessed data object, using information on the attributes in the class schema for the class of the accessed data object to transform the accessed data object to the transformed data object.","Still further provided is a method, system, and program for providing information on a class. A definition of a class and attributes in the class are received. A file is generated and information on the class and each attribute in the received class definition is added to the generated file.","In the following description, reference is made to the accompanying drawings which form a part hereof and which illustrate several embodiments of the present invention. It is understood that other embodiments may be utilized and structural and operational changes may be made without departing from the scope of the present invention.",{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 1","b":["2","4","6","8","6","10","10","6","10","10","2","4","6","8"]},"Client system  includes a non-Java application program , which for purposes of description, is implemented in a structured or object oriented programming language other than Java, e.g., C, C++, Smalltalk, Fortran, etc. The non-Java application program  is capable of producing non-Java data objects  that conform to a particular class structure implemented in the non-Java programming language of the application , and are non-Java objects. In the described implementations, the application program  provides an XML class schema  of the class structure, including the name, type, and length of each attribute of the class from which the non-Java data object  was instantiated. When presenting non-Java data objects  instantiated from different classes to the database server  for storage in the OOD , the application program  would present a different XML class schema  for each class of data objects. Thus, in described implementations, the non-Java application program  is capable of providing one XML class schema  for each type of class that will be used to instantiate non-Java data objects  that are to be stored in the OOD . In certain implementations, the client  further includes an XML schema generator program  or routine that is capable of generating the XML class schema  from a class source file in the non-Java application programming language.","The client system  includes an executing Java application  that is capable of producing Java data objects  in manner known in the art. The Java data objects  may be stored directly within the OOD  without any transformation because in the described implementations the OOD  is implemented as a Java OOD. The client system  would further include a Java Virtual Machine (JVM) to convert Java bytecodes to instructions in the native machine language of the client . The client systems  and  are capable of transmitting a data stream to the database server  over the network , which in the case of client system  includes the non-Java data object  and XML class schema  and in the case of the client system  includes a Java data object .","The database server  includes a database interface  that monitors a port on the database server  for requests from clients  and  to access the object oriented database . The database interface  includes logic described below to use the XML class schema  to transform a non-Java data object  to a Java object for storage in the OOD . The database interface  accesses non-Java application interfaces  to manipulate data within non-Java data objects produced by the non-Java application . If the database interface  is capable of handling data objects in multiple non-Java application programming languages, then non-Java application interfaces and a language translator therefor would be provided for each supported non-Java language. The database interface  would utilize Java object oriented database application interfaces (OOD APIs)  to manipulate the data in the Java OOD . The OOD APIs  would comprise instructions to parse and perform operations within the OOD , such as instructions to add data, delete data, access and read data, update data, etc., in an object oriented database in a manner known in the art. The database interface  invokes the OOD APIs  to perform the client requested manipulation of the OOD . In implementations where the OOD APIs  comprise Java commands or the database interface  is implemented as a Java program, then the database server  would include a Java Virtual Machine (JVM) to convert Java bytecodes to instructions in the native machine language of the database server .","The database server  further includes a volatile memory  used for general operations. The memory  stores information on non-Java classes accessed from the XML class schema . In this way, the database interface  maintains in memory  class information , including information on the class name and class attributes, including the name, data type, and data length of the attributes for the class.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 2","b":["16","16","50","52","54","56","56","16","56","58","60","62","16"],"i":["a, b . . . n","a, b . . . n ","a, b . . . n ","a, b . . . n","a, b . . . n","a, b . . . n"]},{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 3","FIG. 3"],"i":["a ","b "],"b":["70","80","82","84"]},{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 4","FIG. 2"],"b":["17","16","100","16","102","50","104","52","106","16","54","108","110","120","56","112","16","58","114","16","60","116","118","120","110"],"i":["a, b . . . n ","a, b . . . n ","a, b . . . n "]},"In alternative implementations, XML class schemas  may be created in alternative fashions, such as through manual editing or a series of prompts that requests information on the class and attributes thereof from a user, and from such information generates the XML class schema .",{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIGS. 5 and 7","FIGS. 1","FIG. 6","FIG. 5","FIG. 6"],"b":["24","12","18","14","20","10","152","14","20","24","154","30","20","10","152","14","16","16","2","156","34","36","24","158","18","180","24","16","182","160","180","184","162","180"],"i":"a . . . n "},"For each attribute i indicated in the class information in the memory  (), a loop is performed at blocks  through . At block , the database interface  generates a Java statement to create a public void SET interface () for the attribute that sets the value for the attribute in the data object instantiated for the class from the compiled executable version of the Java source file . A Java statement is then generated (at block ) to set the attribute value to the parameter passed with the constructor method to create a Java object for the class. Control then proceeds (at block ) back to block  for the next attribute indicated in the class information in memory .","After generating the SET statements, a loop is performed at blocks  through  for each attribute indicated in the class information to generate (at block ) a public GET interface for attribute i that returns the attribute value in the data object instantiated for the class of the Java source file  being created. Control then proceeds to block  in .","With respect to , a determination is made (at block ) from the class information set for the class of the non-Java data object to add to the database of all the attributes in the class. The database interface  then uses the non-Java application interfaces, such as a non-Java GET interface, to access (at block ) the attribute values from the non-Java data object  for each determined attribute in the class of the non-Java data object . The Java source code file  () is then compiled (at block ) into an executable file. The database interface  then constructs (at block ) a Java object for the class using a constructor method from the executable version of the Java source file for the class, wherein the constructor method initializes the Java object with the determined attribute values, which may be passed to the constructor method as parameters. The database interface  then uses (at block ) the OOD APIs  to store the constructed Java object in the Java OOD .","In the described implementations, the database interface  generates and compiles the Java source file as part of translating a non-Java data object  to a Java data object. In alternative implementations, the database interface  may use a constructor defined in a previously compiled Java source file for the class of the data object to generate a Java data object with the attribute values accessed from the non-Java data object  using the non-Java application interfaces , thereby avoiding the need to reconstruct and recompile the Java source file .",{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 8","b":["24","12","18","24","252","30","30","254","10","24","256","12","258","18","10","12","32","260","36","34","262","24","264","266","32","12"],"i":"a . . . n "},"Thus, with the described implementations, a database interface  component transforms non-Java data objects into Java data objects for storage in a Java OOD , so that a single Java OOD  can be used to store data objects from different application programs ,  implemented in different application programming languages, e.g., Java, C, C++, Smalltalk, etc.","The above described method, apparatus or article of manufacture for maintaining data objects from different application programs in a object database may be implemented using standard programming and\/or engineering techniques to produce software, firmware, hardware, or any combination thereof. The term \u201carticle of manufacture\u201d as used herein refers to code or logic implemented in hardware logic (e.g., an integrated circuit chip, Field Programmable Gate Array (FPGA), Application Specific Integrated Circuit (ASIC), etc.) or a computer readable medium (e.g., magnetic storage medium (e.g., hard disk drives, floppy disks, tape, etc.), optical storage (CD-ROMs, optical disks, etc.), volatile and non-volatile memory devices (e.g., EEPROMs, ROMs, PROMs, RAMs, DRAMs, SRAMs, firmware, programmable logic, etc.)). Code in the computer readable medium is accessed and executed by a processor. The code in which preferred embodiments of the configuration discovery tool are implemented may further be accessible through a transmission media or from a file server over a network. In such cases, the article of manufacture in which the code is implemented may comprise a transmission media, such as a network transmission line, wireless transmission media, signals propagating through space, radio waves, infrared signals, etc. Of course, those skilled in the art will recognize that many modifications may be made to this configuration without departing from the scope of the present invention, and that the article of manufacture may comprise any information bearing medium known in the art.","In the described implementations, one client application comprised a Java application and the other a non-Java application. However, the client applications may both be implemented in any non-Java object oriented programming language known in the art, or implemented in structured programming languages.","In the described implementations, objects from multiple classes may be maintained in the object oriented database.","In the described implementations, the class information accessed from the class schema was stored in memory for later access and to generate the non-Java object. In alternative implementations, the class information may be maintained in the XML schema file. In such case, the class information can be accessed directly from the XML schema file when the class information is needed to reconstruct the non-Java object.","In described implementations, the database interface  was maintained in a database server  through which clients  and  access the Java OOD . In alternative implementations, the database interface  may be located in an additional intermediary system or within the clients  and .","In described implementations, an XML document format was used to provide information on the class schema for non-Java classes. In alternative implementations, a different file format, such as a different structured file format, may be used to represent the class and class attributes of the object instance of the class, such as a different standard generalized markup language (SGML), hypertext mark-up language (HTML), extensible hypertext markup language (xHTML), etc. In this way, the attributes of a class may be defined in alternative structured document formats.","In described implementations, the database interface  maintains data objects as Java data objects in the OOD , such that non-Java data objects are transformed to Java data objects for storage in the OOD . In alternative implementations, the database interface  may maintain data objects in the OOD  in programming languages other than Java, such as C, C++, SmallTalk, etc. In such case, the database interface  would transform Java data objects to the non-Java language format used for the data objects in the OOD .","The database interface  may include non-Java application interfaces for multiple non-Java programming languages to allow the storage of data objects from application programs implemented in multiple different non-Java programming languages.","In discussed implementations, the client applications are included in client systems that communicate with the database server over a network. In alternative implementations, the applications and database interface may be implemented on the same computing platform including the database daemon.","In the described implementations, a constructor method is used to construct a Java data object with default values and then separate SET methods are called to set the attribute values in the Java data object with the attribute values accessed from the non-Java data object . In alternative implementations, the Java source file may be generated to include statements to set the attribute values to the attribute values accessed from the non-Java data object , such that during compilation of the Java source file, an instance of a Java object is generated having attribute values set to the attribute values from the non-Java data object .","The foregoing description of various implementation of the invention has been presented for the purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise form disclosed. Many modifications and variations are possible in light of the above teaching. It is intended that the scope of the invention be limited not by this detailed description, but rather by the claims appended hereto. The above specification, examples and data provide a complete description of the manufacture and use of the composition of the invention. Since many embodiments of the invention can be made without departing from the spirit and scope of the invention, the invention resides in the claims hereinafter appended."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Referring now to the drawings in which like reference numbers represent corresponding parts throughout:",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 3","i":"a "},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 3","i":"b "},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIGS. 5 and 7"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 6","FIG. 5"]},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
