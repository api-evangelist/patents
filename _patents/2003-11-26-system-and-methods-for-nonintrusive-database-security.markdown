---
title: System and methods for nonintrusive database security
abstract: Typical conventional database security scheme mechanisms are integrated in either the application or database. Maintenance of the security scheme, therefore, such as changes and modifications, impose changes to the application and/or database. Configurations of the invention employ a security filter for intercepting database streams, such as data access transactions, between an application and the a data repository, such as a relational database. A security filter deployed between the application and database inspects the stream of transactions between the application and the database. The security filter, by nonintrusively interrogating the transactions, provides a content-aware capability for seamlessly and nondestructively enforcing data level security. A security policy, codifying security requirements for the users and table of the database, employs rules concerning restricted data items. The filter intercepts transactions and determines if the transaction triggers rules of the security policy. If the transactions contain restricted data items, the security filter modifies the transaction to eliminate the restricted data items.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07437362&OS=07437362&RS=07437362
owner: Guardium, Inc.
number: 07437362
owner_city: Waltham
owner_country: US
publication_date: 20031126
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY","DETAILED DESCRIPTION"],"p":["Conventional applications in a data storage and retrieval environment typically operate with a data repository, such as a database, via a set of connections, or logical access streams, from the applications running in a user space into the database. A user application employs a stream from among the available connections to perform data storage and retrieval operations. The connections, therefore, provide a mechanism for multiple users to access the conventional database via a suite of user applications or clients which the database supports.","In a conventional data storage and retrieval environment, a conventional user application accesses the data repository for various data storage and retrieval operations. Such conventional data manipulation operations typically occur via a database management application accessible to the user application via an Application Programming Interface (API) or other conventional access method. Often, in such a conventional data storage and retrieval environment, many users share access to the data objects, typically relational database tables, in the conventional data repository. Usually, it is neither necessary nor desirable for every conventional user to have unlimited access to every data object, or table, in the data repository. Accordingly, conventional database driven storage and retrieval environments attempt limit or restrict access to certain data objects to a particular user or users.","Conventional database security techniques operate by associating database users with accessible data items. Accesses to the database cause the database server application to invoke a check of the associations with the purported access, to determine if the user is allowed to access the requested data items. The database manager or other security mechanism implementing the security techniques either allow or deny access accordingly.","Often, however, such conventional database access control techniques may lack granularity, such as defining users in terms of groups and defining the database according to global portions, such as groups of tables, for example. It may become problematic to distinguish individual users and individual tables or sets in terms of a desirable or optimal security framework. Further, modifications to the conventional database security scheme, such as for accommodating new users, applications, or access privileges, typically involve changes to either the conventional user or client application or database server application, or both.","In a conventional data storage and retrieval environment, a security mechanism typically takes the form of either an access control list (ACL) or a data level (DL) security mechanism. The former strives to define pieces through which a user access the functionality for retrieving the data, and therefore designates which components of an application a user may employ. The latter approach, on the contrary, defines which data is visible to a particular user at the database, regardless of where the request emanates. The DL approach, therefore, allows a particular user to only \u201csee\u201d portions of the database permissible for access by the user.","The conventional access control list allows manipulation of database security with reference to the access control list via the application. Changes to the security scheme mandate changes to the application. Conversely, the conventional data level security mechanism implements security scheme changes via the database. The database, or more specifically, the database management system (DBMS) or server responsible for coordinating such access, enables a particular user to access certain database portions, typically tables, fields or rows. Changes to the security scheme involve modifications to the access rights to database tables, thus requiring changes to the database. Further, conventional DBMSs typically employ a database login corresponding to an application, not to a user invoking the application. Therefore, the user does not directly login to the database. In typical conventional applications, many users invoke the same application, and accordingly, pursue the same application level login to the database. Granularity of control is therefore difficult to modify in conventional database security approaches.","Therefore, such conventional approaches to database security involve changes to either the client application or to the database server in order to effect security scheme changes. Embodiments of the invention, therefore, provide a system and method to implement data level security between the application and the database. Such data level security of the invention implements a security policy independently of the application and the database, and therefore relieves the developer and implementer from modifying either the application or the database to reflect the security mechanism. Embodiments of the invention scrutinize and modify database communications, such as a transaction stream, between the application and the database to remove references or add constraints on access to sensitive or restricted data items.","Embodiments of the invention are based, in part, on the observation that typical conventional database security scheme mechanisms are integrated in either the application or database. Maintenance of the security scheme, such as changes and modifications to accessibility options, require changes to the application and\/or database. Further, since the conventional security scheme is embedded in the application or the database, integrity of the conventional security scheme assumes accurate enumeration of each potential stream (access path) from the application into the database. Much like the weakest link of a chain, overlooking an application access stream may impose vulnerability on the conventional security scheme.","Embodiments of the invention, such as the exemplary configurations and segregation of duties depicted in further detail below, substantially overcome the deficiencies outlined above with respect to data level security in data management and retrieval environments, such as relational database management systems. Particular configurations of the invention employ a security filter for intercepting database streams, such as data access transactions, between an application and the a data repository, such as a relational database. Such an implementation deploys a security filter between the application and database, and observes, or \u201csniffs\u201d the stream of transactions between the application and the database. The exemplary security filter, by interrogating the transactions, provides a content-aware capability for seamlessly and nondestructively enforcing data level security.","A security policy, codifying security requirements between the users and the tables of the database, employs a plurality of rules concerning restricted and allowable data items. The security filter intercepts data access transactions and determines if the transaction triggers the rules of the security policy. If the \u201csniffed\u201d transactions indicate restricted data items, the security filter modifies the transaction to eliminate only the restricted data items, and otherwise allows the transaction to pass with the benign data items. The modified transaction is receivable by the application or the database by the same functions and methods which would have received the unmodified, unfiltered transaction stream, therefore allowing processing to continue unhindered by the security filter.","The data access transaction, or transaction stream, may be either a data request from the application to the database, or a response from the database to the application. The security filter modifies a request by analyzing a query syntax conveyed in the transaction, such as a SQL (Structured Query Language) operation, and determining additional SQL qualifiers to eliminate restricted data items from the data items purported to be retrieved by the transaction. The security filter modifies a response by analyzing data already retrieved, such as a row set corresponding to an SQL query, and identifying rows including restricted data items. The security filter eliminates the rows having the restricted data items, and rebuilds the row set with a subset of only benign rows having unrestricted data items. The security filter then transports the filtered transaction to the user as the query response. Therefore, the security filter provides data level security without changes to the applications or database (data schemas) by intercepting database requests and\/or responses and modifying the transaction streams accordingly.","In further detail, the system of the present invention teaches method of security enforcement for a persistent data repository, such as a relational database, which intercepts a data access transaction between a user application and a data repository having a plurality of data items, i.e. tables (objects) containing rows of attributes. The security filter intercepts the data access transaction in a nonintrusive manner to determine if the intercepted data access transaction corresponds to the security policy. The nonintrusive manner of interception is undetectable to both the user application and the data repository. The predefined security policy is indicative of restricted data items in the data repository to which the user\/application is prohibited access. Based on the security policy, the security filter limits the data access transaction by modifying the data access transaction according to the security policy, such that data indications (i.e. retrieved fields and\/or query values) in the data access transaction, corresponding to restricted data items, are modified or eliminated in the resulting data access transaction.","The security policy employed for filtering the transactions has rules, in which each of the rules includes an object, a selection criteria of attributes, and an action indicative of the disposition of data items in the transaction. The actions are selectively indicative of modifications to the data access transaction, in which the modifications further include attributes, operators, and operands, such that limiting involves identifying data items corresponding to the attributes, in which the attributes are each associated with an operator and an operand. By applying an operator specified for a particular data item to the operand specified for the data item, in relation to the data item sought, the security filter determines, as a result of applying the operator, whether to eliminate the identified data item.","The data access transaction may, in a particular configuration, be a data access statement operative to request data, in which limiting the transaction further includes identifying at least one rule, according to the security policy, corresponding to the data access statement. The identified rule purports to restrict access to the data items indicated by the data access statement by concatenating selection qualifiers to the data access statement which triggers the identified rule. The selection qualifiers are therefore operable to omit the restricted data items from the data access statement.","Modification of a request in which the data indications in the data access transactions are references to data items in the data repository involves limiting the request (transaction) by qualifying the references to generate a modified request indicative of only the unrestricted data items. The modified request is such that successive retrieval operations employing the qualified references do not retrieve restricted data items.","In a particular arrangement, intercepting the data access statement includes receiving an SQL query and limiting the SQL query by appending conditional selection statements to the SQL query, in which the limiter computes conditional selection statements, derived from the security policy, to generate the resulting data access transaction. The modification of the SQL query involves manipulating a parse tree representation of the query, rather than modifying a text string representation, by building a parse tree corresponding to the SQL query. The limiter then adds nodes in the parse tree corresponding to the appended conditional selection statements, and reprocesses the parse tree to generate the resulting data access transaction as a modified parse tree operable to eliminate the restricted data items in the query.","The data access transaction may also be, in another arrangement, a response, in which the data indications are rows of data (i.e. row set) retrieved from the data repository. In the case of such a response, limiting further includes identifying rows having restricted data items, and eliminating the identified rows from the data access transaction such that the resulting data access transaction is a modified data query response including rows without restricted data items. In the aforementioned arrangement in which the data access transaction is a data query response including a row set, limiting further involves comparing each of the rows in the row set to the rules of the security policy, and selectively eliminating rows in the row set including the restricted data items, based on the comparing, to generate a modified query response including a filtered row set. Thus, the data query response modifications occur on whole rows of the row set embodied in the query response.","The above described limitation operation may occur via either a proxy setup and regeneration of a login stream, or by nonintrusive direct modification of the stream. In the case of a proxy login, intercepting the data access transaction involves first establishing a proxy to the data repository on behalf of the user, and receiving the data access transaction as a row set under the proxy, thus terminating the user login connection and initiating the proxy login connection. Limiting then involves regenerating the resulting data access transaction as a reduced row set having a subset of the rows from the proxy row set, and transmitting the reduced row set to the user on behalf of the proxy.","In the non-proxy, or direct modification configuration, limiting the data access transaction further includes receiving a set of packets, in which the packets encapsulate the data access transaction according to layered protocols. The interrogation and modification of the packets occurs in a nondestructive manner with respect to the layered protocols. The security filter padding the packets for accommodating elimination of the restricted data items to generate the resulting data access transaction. Therefore, the generation of the resulting data access transaction preserves the encapsulating layered protocol associating the packets, and without employing a proxy for regenerating the sequence of packets.","The security filter embodying the system of the present invention performs the intercepting in a data path between a source of the data access transaction and a destination of the resulting data access transaction, such that limiting occurs in a component separate from the source and destination, therefore relieving the requesting application and the database from the burden of modification. The nonintrusive manner of the security filter is such that the intercepting and limiting occurs undetectably to both the source and the destination. Therefore, the requesting application and the receiving database operate on the SQL request or row set response expected in the absence of the security filter. Further, the component embodying the security filter may be separate from the source and destination in a separate network device than the components corresponding to the source and destination (i.e. application and database).","In another arrangement, the system of the present invention teaches a method for nonintrusive implementation of data level security enforcement by defining a security policy having rules, in which the rules further specify attributes and conditions, as in a typical SQL query. In this configuration, the interceptor in the security filter intercepts a data retrieval request, and compares the data retrieval request to the security policy. The interceptor determines if the data retrieval request corresponds to at least one of the rules of the security policy, and identifies, via a parse tree, selectivity operators indicative of the allowable data items to be retrieved. The limiter then modifies the parse tree according to the corresponding rule to generate a modified data retrieval request, and forwards the modified data retrieval request to the data repository for subsequent retrieval and transport to the requesting user.","The invention as disclosed above is described as implemented on a computer having a processor, memory, and interface operable for performing the steps and methods for providing nonintrusive database security as disclosed herein. Other embodiments of the invention include a computerized device such as a computer system, central processing unit, microprocessor, controller, electronic circuit, application-specific integrated circuit, or other hardware device configured to process all of the method operations disclosed herein as embodiments of the invention. In such embodiments, the computerized device includes an interface (e.g., for receiving data or more segments of code of a program), a memory (e.g., any type of computer readable medium), a processor and an interconnection mechanism connecting the interface, the processor and the memory. In such embodiments, the memory system is encoded with an application having components that when performed on the processor, produces a process or processes that causes the computerized device to perform any and\/or all of the method embodiments, steps and operations explained herein as embodiments of the invention to allow execution of instructions in a computer program such as a Java, HTML, XML, C, or C++ application. In other words, a computer, processor or other electronic device that is programmed to operate embodiments of the invention as explained herein is itself considered an embodiment of the invention.","Embodiments of the invention are based, in part, on the observation that typical conventional data security scheme mechanisms are integrated in either the application or database. Maintenance of the data security scheme, such as changes and modifications, require changes to the application and\/or database. Further, since the conventional security scheme is embedded in the application or the database, integrity of the conventional security scheme assumes accurate enumeration of each potential stream from the application into the database. Much like the weakest link of a chain, overlooking an application access stream may impose a potential vulnerability on the conventional security scheme.","Particular configurations of the invention provide a nonintrusive data level security mechanism for intercepting database access streams, such as data access transactions, between an application and the a data repository, such as a relational database, without burdening the application and database with modifications for implementing the security policy. Such an implementation deploys a security filter between the application and database, and observes, or \u201csniffs\u201d the stream of transactions between the application and the database. The exemplary security filter, by nonintrusively interrogating the transactions, provides a content-aware capability for seamlessly and nondestructively enforcing data level security.","A security policy, codifying security requirements for the users and table of the database, employs a plurality of rules concerning restricted and allowable data items. The security filter intercepts data access transactions and determines if the transaction triggers rules of the security policy. If the \u201csniffed\u201d transactions indicate restricted data items, the security filter modifies the transaction to eliminate only the restricted data items, and otherwise allows the transaction to pass with the benign data items. Since the modifications performed by the security filter are nonintrusive and nondestructive, protocol layering (encapsulation) and normalization of the underlying information in the transaction is preserved. The security filter sends the modified transaction such that it is receivable by the application or the database by the same functions and methods which would have received the unmodified, unfiltered transaction stream.",{"@attributes":{"id":"p-0037","num":"0036"},"figref":["FIG. 1","FIG. 1"],"b":["10","10","14","12","16","18","20","22","24","26"]},"In operation, the security filter  receives a data access transaction  from either the application  or from the repository (i.e. database) . The security filter  processes the data access transaction  and generates a result data access transaction . The result data access transaction  does not reference or include any restricted data items . The data access transaction  may be either a data access request from the application  or a data query response from the repository . Depending on the issuer of the data access transaction , the security filter  analyzes and modifies the data access transaction  according to the security policy , and generates a result data access transaction  accordingly as a request or response, as will be discussed further below.",{"@attributes":{"id":"p-0039","num":"0038"},"figref":["FIG. 2","FIG. 1","FIGS. 1 and 2","FIG. 1"],"b":["10","100","16","30","14","20","20","22","16","30","16","30","16","20","14","32","101"]},"The security filter  determines if the intercepted data access transaction  corresponds to a security policy , as disclosed at step . The security policy  is indicative of restricted data items  in the data repository  to which the user application  is prohibited access. In a particular configuration, the security policy  embodies a series of rules, discussed further below, which are indicative of the restricted data items . The security filter  parses, or processes, the rules to enumerate which data items  to limit in the result data access transaction .","At step , based on the security policy , the security filter  limits the data access transaction by identifying, from the parsed rules in the security filter , the restricted data items  which trigger rules in the security policy . The security filter  therefore, identifies the requested data items  indicated by the data access transaction  and classifies the data items  as restricted  and allowed .","The security filter  modifies the data access transaction  such that data indications in the data access transaction  corresponding to the restricted data items , according to the security policy , are eliminated from the resulting data access transaction , as depicted at step . The data access transaction  contains indications of the referenced data items , which include references to the data items  if the data access transaction  is a request to the database , or a copy of the actual data items , if the data access transaction  is a response from the database . In either case, request or response, described further below, the security filter  limits the data access transaction  by modifying the indications in the data access transaction  to generate the result data access transaction . The result data access transaction , therefore, has no indications to restricted data items  and includes only allowed data items .",{"@attributes":{"id":"p-0043","num":"0042"},"figref":["FIG. 3","FIG. 1","FIG. 3"],"b":["16","16","50","52","54","56","52","53","53","53","18","56","56","56","52","24","32"]},"The data access transaction  includes both data access statements , or requests to the database , and data query responses , or responses from the database . The rules A . . . N are applicable to both the requests  and the responses . Similarly, the modification entries A . . . N include modifications applicable to both requests  and responses . The security filter  is operable to receive a data access statement  and generate a resulting data access statement , and to receive a data query response  and generate a resulting data query response , by modifying requests  and responses  according to the policy table  and modification table , as will now be discussed in greater detail.","As indicated above, interception and limiting of a data access transaction  occurs to both the request , or data access statement, from the application  to the database, and to the response , or data query response, egressing from the database . In both cases, the security filter  implements the security policy  defined by the policy table  and the modification table , and implemented by the interceptor  and the limiter , respectively. However, in the former occurrence, in the exemplary configuration discussed below, the request  is in the form of a SQL query, which the limiter  modifies by appending condition statements. In the latter occurrence, the response  is a row set of database  results, which the limiter  modifies by selectively eliminating rows . One aspect of the modification to the data access statement  is allowing the database  to perform selection of only allowable data items , since the restricted data items  need not be fetched, thereby avoiding fetching and shortly thereafter discarding the restricted data items . Further, such modifications need not affect only selection statements, but extend to deletion and modification requests as well.",{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIGS. 4-7","FIG. 2"],"b":["40","30","10","3","4","8","200","20","30","14","20","30","40","22","20"]},"The security filter  may employ a proxy login for access to the repository . A proxy login facilitates regeneration of the stream of messages forming the transaction between the database  and the application . The proxy approach, therefore, terminates the stream from the application  to the security filter  and establishes a new stream from the security filter  to the database . Alternatively, the security filter  may examine and modify the individual messages (packets) without regenerating the stream or otherwise upsetting the protocol and\/or encapsulation structure defined by the stream. Accordingly, at step , the security filter performs a check to determine whether to establish a proxy login to the database . If so, then the security filter  establishes a proxy to the data repository  on behalf of the user , as depicted at step .","In a particular implementation, the security filter  attempts to identify the querying user  via an additional handshaking exchange with the application . The additional exchange causes the application to transmit a message including the username or other identification of the requesting user. Accordingly, intercepting further includes establishing an identification exchange operable to transmit an identification token indicative of an application  user, and parsing the identification exchange to extract the identification token. This additional exchange allows the interceptor  to determine the particular user issuing the data access transaction , rather than relying on an application  specific identity which may be applicable to a plurality of users .","In either the proxy or non-proxy case, the security filter  determines if the intercepted data access transaction corresponds to the security policy , as disclosed at step . The security policy  is indicative of the restricted data items  in the data repository  to which the user application  is prohibited access. At step , the security filter  employs the interceptor  and the security policy table . The security policy  has rules  enumerated in the table , and discussed further below. Each of the rules  includes an object A, a selection criteria B and an action C, in which the action C is indicative of the restricted data items . The object A and selection criteria B, discussed below with respect to , indicate which database  objects (i.e. tables) are accessible to the application, and the selection criteria include attributes for comparison. Each rule in the policy table  includes an action C, which is one of allow, deny, or modify, to determine the disposition of the access attempt.","A check is performed, at step , to determine whether the interceptor  should allow or deny the access, or whether to modify the data access statement  by passing it to the limiter . If the action indicates an allow result, then the security filter  merely allows the data access statement  to proceed, as depicted at step . If the action C indicates a deny result, then at step  the security filter denies the access and terminates the data access statement . If the action C indicates a modify result, then the interceptor  invokes the limiter  to perform modification of the data access attempt .","The limiter  has a modification table  to modify data access statements and remove indications of restricted data items . The modification table  includes entries N, for identifying restricted data items . A modify result in the policy table  references a corresponding entry N in the modification table . Alternatively, a rule in the policy table  may reference multiple entries N in the modification table . Therefore, the actions C are selectively indicative of modifications, the modifications enumerated as entries N in the modification table , and further including attributes A, operators B, and operands C. The limiter , employing the modification table , identifies data items corresponding to the attributes, in which each of the attributes is associated with an operator and an operand, as depicted at step . The limiter  examines the query embodied by the data access statement , and applies the operator B specified for the data item to the operand C specified for the data item,  as depicted at step . For example, the operator B typically specifies an \u201cIN\u201d or \u201cNOT IN\u201d relationship of the data access statement  to the operand. If the data access statement  (i.e. SQL query) attempts to access a restricted data item , the modification entry N specifies the limiting of the data access statement . Accordingly, the limiter  determines, as a result of applying the operator B, whether to eliminate the identified data item  specified by the modification entry N, as depicted at step . The exemplary description herein characterizes the data access transaction  as an SQL query, operable for analysis by the limiter for computing applicability of the modification table . Alternate implementations are operable on alternate forms of data access statements , as will be apparent to those of skill in the art.","Having computed applicability of the modification table to a data access transaction  at hand, the limiter  then modifies the transaction  to avoid the restricted data items . In the particular exemplary configuration illustrated, the data access statement  is an SQL query, which conforms to the SQL syntax. Using SQL syntax constructs, the limiter  determines limitations, based on the security policy , to the data access transaction , as depicted at step . For example, in a database  of sensitive information, such as salary information in a human resources table, the security filter may limit access to locations in the particular state. In further detail, in the exemplary SQL configuration, the limiter  modifies the data access transaction  such that data indications in the data access statement  corresponding to restricted data items , according to the security policy , are eliminated from the resulting data access statement , as described at step .","The data indications described above, in the scope of modifying a data access transaction , or request, are references to data items  in the data repository , such that limiting further includes qualifying the references to generate a modified request, or resulting data access statement , indicative of unrestricted data items , such that successive retrieval operations employing the qualified references do not retrieve restricted data items , as depicted at step . Therefore, in request limitation operations in which the data access transaction  is a data access statement , limiting the transaction includes identifying at least one rule , according to the security policy, corresponding to the data access statement , in which the identified rule  restricts access to at least one of the data items  indicated by the data access statement , as shown at step .","Accordingly, the modification table  has an entry N which limits the query to the state of Massachusetts, having an operator of \u201cIN\u201d and an operator of \u201cMA\u201d for the \u201cSALARY\u201d attribute. In step , which includes steps -, limiting is done by adding selection qualifiers to the data access statement  corresponding to the identified rule entry N, in which the selection qualifiers are operable to omit the restricted data items  from the qualified references of the data access statement . Therefore, in the exemplary SQL implementation, the limiter appends the syntactical expression \u201cWHERE STATE=\u201cMA\u201d to the data access statement .","Further to the SQL processing of the data access statement  (request), in the exemplary SQL configuration, as described above, intercepting the data access statement  includes receiving an SQL query and limiting includes appending conditional selection statements to the SQL query, in which the conditional selection statements are computed from the security policy , to generate the resulting data access transaction , as shown at step . Such appending includes, at step , building a parse tree corresponding to the SQL query. A parse tree is a data structure representative of the linear, pseudocode-like text string SQL query. The parse tree, as is known to those of skill in the art and described further below, includes nodes indicative of operators, field identifiers, and values, for rendering a Boolean result for a request of a data item . Accordingly, at step , limiting includes adding nodes into the parse tree corresponding to the appended conditional selection statements. Once modified to represent the additional indications avoiding the restricted data items , at step , the limiter reprocesses the parse tree to generate the resulting data access statement , i.e. the resulting data access transaction  based on a request from the application .","The security filter  is operable to forward the resulting data access statement  to the database  such that the non-intrusive manner remains undetectable and congruent with the resulting data access transaction  expected by the repository . Accordingly, at step , limiting the data access transaction  further includes identifying the received set of packets from the application , in which the packets encapsulate the data access transaction  according to layered protocols. Note that the data access transaction includes various forms of access to the data, such as read, update, and deletion attempts. At step , the limiter  performs a check to determine if the security filter established a proxy login for the current transaction.","At step , if the security filter does not employ a proxy, then at step , the limiter generates the resulting data access transaction to preserve the encapsulating layered protocol associating the packets without employing a proxy for regenerating the sequence of packets. The use of a proxy determines whether the response transaction  returns via the same user session directly to the user, or whether the proxy receives the session packets at the security filter and forwards the packets via a user session. The underlying generation of the result data transaction  still occurs. At step , the limiter interrogates and modifies the packets in a nondestructive manner with respect to the layered protocols, thus reserving the encapsulated information outside the SQL information in the packet payload. At step , the nondestructive manner may therefore include padding the packets for accommodating elimination of the restricted data items to generate the resulting data access transaction, such that the database  receives a syntactically operable SQL expression consistent with the original data access statement  augmented with the limiting statements to generate the resulting data access statement .","At step , if the security filter  employs a proxy login, then at step , the security filter  receives the data access transaction  stream via the proxy. The use of a proxy does not alter the underlying modification and filtering operations on either the request or the response. The proxy serves as an alternate login stream, or session, which operates between the repository  and the security filter . The user session then completes the connection to the application , thus completing the connection between the repository  and the application  via the user and proxy logins. At step , the security filter regenerates the data access result  from the proxy to the user login. At step , the security filter transmits the resulting data access transaction  to the application .",{"@attributes":{"id":"p-0059","num":"0058"},"figref":["FIGS. 8-10","FIG. 2"],"b":["30","44","20","20","300","20","30","14","20","22"]},"In the response modification example, the security filter generally establishes a proxy because of the procedural nature of modifying the fulfilled SQL query result. Accordingly, intercepting the data access transaction further includes establishing a proxy to the data repository  on behalf of the user , as depicted at step . The security filter, at step , receives the data access transaction as a row set under the proxy. The row set is a tabular data representation of the response to the query embodied in the requesting data access transaction corresponding to the data query response . Each row in the row set is an atomic unit of data expected by the requesting application . Therefore, modifications to the row set are made in the form of whole rows. Accordingly, regenerating the resulting data access transaction occurs as a reduced row set having a subset of the rows from the proxy row set, as shown at step .","In further detail, at step , the interceptor  processes the data query response  (i.e. transaction ) to determine if the intercepted data access transaction  corresponds to the security policy , in which the security policy  is indicative of restricted data items  in the data repository  to which the user application  is prohibited access. At step , the security policy  embodies a policy table  in the interceptor , similar to the request sequence thread above, in which the security policy  has rules N codified in the policy table , each of the rules N including an object, a selection criteria and an action, the action indicative of the restricted data items .","As with the request modification example above, at step , the actions are selectively indicative of modification entries N in the modification table , in which the modification table entries N include attributes, operators, and operands. In the event of a modify action, the limiter  identifies data items corresponding to the attributes, in which each of the attributes is associated with an operator and an operand.","The row set included in the data query response  includes rows of attributes gathered from database  tables via a query. The limiter  establishes an iteration to traverse each of the rows in the row set, as show at step . Accordingly, the limiter  scans the rows in the row set by applying the operator specified for the data item to the operand specified for the data item, as depicted at step . If an operand, or field value, from the modification entry N matches the corresponding attribute in a particular row, then at step , the limiter determines, as a result of applying the operator, whether to eliminate the identified data item, i.e. row. The operator is typically one of \u201cIN\u201d or \u201cNOT IN,\u201d corresponding to the restricted data items . For example, in the human resource salary example above, rows without (i.e. \u201cNOT IN\u201d) a state attribute having a value of \u201cMA\u201d include restricted data items.","The limiter  performs a check to determine whether to modify the transaction based on the determining of step , as depicted at step . If the check indicates modification, then at step , the limiter  limits based on the security policy, the data access transaction based on the security policy i.e. modification entry N.","The limiter  then modifies the data access transaction  such that data indications in the data access transaction  corresponding to restricted data items, according to the security policy , are eliminated from the resulting data access transaction , as depicted at step . In the present example, in which the interceptor  intercepted the data access transaction  as a data query response  from the data repository , the data query response  is encapsulated as a row set  having rows  from a relational database query. Accordingly, limiting includes discarding rows  in the row set  having the restricted data items  and transmitting the remaining rows  to the user as the resulting data access transaction , as described at step . The interceptor  performs a check for more rows, as depicted at step , and control reverts to step  if there are more rows  remaining.","In the exemplary configuration discussed, in the SQL row set  returning as the data query response  from the repository , the data indications are rows  of data retrieved from the data repository , and limiting involves identifying rows  having restricted data items , as depicted at step . At step , the limiter  modifies the row set  in the data access transaction  by eliminating the identified rows  from the data access transaction  such that the resulting data access transaction  is a modified query response including rows  without restricted data items .","In further detail, in the exemplary configuration in which the data access transaction is a data query response including a row set, the limiter  further limits the row set , derived from the loop of step , by comparing each of the rows  in the row set  to the rules of the security policy , as depicted at step , and selectively eliminating rows  in the row set  including the restricted data items , based on the comparing, to generate a modified query response including a filtered row set  as the resulting query response , as shown at step . The security filter  then transmits the reduced row set  included in the resulting query response  to the user application  on behalf of the proxy, as depicted at step .",{"@attributes":{"id":"p-0068","num":"0067"},"figref":"FIGS. 11-14B","b":["20","3","11","14","160","174","162","152","156","18"]},"A user based in Massachusetts employing application U2 issues a data access statement  including the SQL query:","SELECT NAME, PHONE\n\n","Rule B is triggered by the SELECT command into the CONTACTS object, as shown by the attributes , and indicates a MODIFY action C. In the case of a modify action, the policy table  references the modification table  for attribute specific information modifying the SQL data access statement . The rule B further references modification entry A, shown by index D. The modification entry A limits access to data items  when the state attribute A is one of the values \u201cMA\u201d or \u201cRI\u201d C, indicated by operand B. Therefore, the current data access statement  is to be limited to rows  indicative or contacts in MA or RI, the allowable data items .","Accordingly, the limiter  constructs a parse tree  corresponding to the data access statement , and modifies the parse tree  to reflect the limiting modification entry A. As indicated above, the parse tree  is a typical processing construct for implementing SQL based access, as is known to those of skill in the art. Accordingly, the exemplary implementation operates on the parse tree  representation, adding nodes to effect the additional selection statements corresponding to the triggered rules B and associated modification entries A. Alternate configurations are operable on other data structures, such as direct ASCII concatenation of the SQL query string or other operations.","The initial parse tree  includes nodes corresponding to the SELECT operation , and include the FIELDS  of NAME  and ATRIBUTE , the OBJECT CONTACTS , and the selection operation WHERE  REGION=NE . The modification entry B adds the selection criteria limiting the selection to states of MA and RI, to result in the result data access statement  embodying the SQL query:","SELECT NAME, PHONE","FROM CONTACTS\n\n","Alternate implementations include multiple objects (tables) in such a selection, and may also include table references as a modification entry N. For example, such a selection may attempt to limit the sales contact to the state of the querying user. Such an operation would involve obtaining the state of the querying user, referencing the state in a query on the contact table , and allowing rows  where the state of the querying user  matches the state attribute  in the table (object) . Such an operation, in SQL terms, involves addition of a FROM statement to perform a join on the contact table  and the table having the state of the querying user .","The information distribution system disclosed herein may encompass a variety of alternate deployment environments. In a particular configuration, the exemplary nonintrusive database security application discussed may be the SQL Guard application, marketed commercially by Guardium corporation of Waltham, Mass., assignee of the present application.","Those skilled in the art should readily appreciate that the programs and methods for providing nonintrusive database security as defined herein are deliverable to a processing device in many forms, including but not limited to a) information permanently stored on non-writeable storage media such as ROM devices, or b) information alterably stored on writeable storage media such as floppy disks, magnetic tapes, CDs, RAM devices, and other magnetic and optical media. The operations and methods may be implemented in a software executable object or as a set of instructions embedded in a computer program product. Alternatively, the operations and methods disclosed herein may be embodied in whole or in part using hardware components, such as Application Specific Integrated Circuits (ASICs), state machines, controllers or other hardware components or devices, or a combination of hardware, software, and firmware components.","While the system and method for providing nonintrusive database security has been particularly shown and described with references to embodiments thereof, it will be understood by those skilled in the art that various changes in form and details may be made therein without departing from the scope of the invention encompassed by the appended claims. Accordingly, the present invention is not intended to be limited except by the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing and other objects, features and advantages of the invention will be apparent from the following more particular description of preferred embodiments of the invention, as illustrated in the accompanying drawings in which like reference characters refer to the same parts throughout the different views. The drawings are not necessarily to scale, with emphasis instead being placed upon illustrating the embodiments, principles and concepts of the invention.",{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0028","num":"0027"},"figref":["FIGS. 4-7","FIG. 2"]},{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIGS. 8-10","FIG. 2"]},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 12","FIGS. 1 and 3","FIG. 11"]},{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 13","FIG. 3"]},{"@attributes":{"id":"p-0033","num":"0032"},"figref":["FIGS. 14A and 14B","FIG. 3"]}]},"DETDESC":[{},{}]}
