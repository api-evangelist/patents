---
title: Promotion and demotion techniques to facilitate file property management between object systems
abstract: The present invention relates to a system and methodology to facilitate interoperability and compatibility between disparate data systems. In one aspect, a file transformation system is provided having at least one file associated with one or more unstructured properties. A file property handler manipulates the unstructured properties in accordance with one or more structured properties associated with a structured object store environment. If an unstructured file is to be operated in the context of a structured object store environment, a promotion operation is performed to update unstructured properties in the file with structured properties suitable for operation in the structured object store environment. If a promoted item were to be manipulated in the structured object store environment, a demotion operation or reverse transformation is performed to update properties in the file.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07155444&OS=07155444&RS=07155444
owner: Microsoft Corporation
number: 07155444
owner_city: Redmond
owner_country: US
publication_date: 20031023
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["The present invention relates generally to computer systems, and more particularly to a system and method that employs file property handlers to facilitate compatibility between unstructured file property storage in byte streams and structured object representations of the file via promotion and demotion of file properties. The term item employed herein generally refers to a structured, schematized object that is stored in a structured object store. A file-backed item refers to a structured object representation of the file in an object store. The term file can be used to represent an unstructured byte stream that corresponds to a given file-backed item.","Traditionally, in a computer file system, a file is the basic unit of data storage. Typically, a file in a file system has the following characteristics. It is a single sequence of bytes. It has a finite length and is stored typically in a non-volatile storage medium. It is created in a directory and has a name that it can be referred to by in file operations, possibly in combination with its path. Additionally, a file system may associate other information with a file, such as permission bits or other file attributes; timestamps for file creation, last revision, and last access etc. Specific applications can also store domain-specific properties in the byte stream of the file. For example, files that are used by a word processing application and hence considered as \u2018documents\u2019 may store properties like the Title and Author of the document. These properties are stored within the byte stream of the file in a format that is specific to the application creating the file. The properties are not structured as objects, nor do they have standardized names. The byte streams are unstructured values. Another example would be that a file that stores a music clip has a number of interesting properties such as Genre, Author, Date Recorded, Artist etc. stored in the byte stream. In addition to this meta-data, there is a byte stream that represents the music itself in some universally recognized format. The programming model in dealing with these properties is geared towards manipulating the whole byte stream. The programming model is a bind-reference model which results in a handle being manufactured for the bound instance (the result of a CreateFile\/OpenFile call). The subsequent manipulation of the value is done by ReadFile\/WriteFile to retrieve and update the relevant portions of the byte stream.","The following presents a simplified summary of the invention in order to provide a basic understanding of some aspects of the invention. This summary is not an extensive overview of the invention. It is not intended to identify key\/critical elements of the invention or to delineate the scope of the invention. Its sole purpose is to present some concepts of the invention in a simplified form as a prelude to the more detailed description that is presented later.","The present invention relates to systems and methods that facilitate file manipulation as a structured object and as a file byte stream by enabling property storage in the byte stream and properties of a structured object representation of a file synchronized when they are independently updated. It is given that there are suitable application programming interfaces for manipulating the file-backed item in an object store and for manipulating the file as an unstructured byte stream. A file property handler is provided to enable unstructured properties in files to be appropriately mapped to and kept consistent with a file-backed item representation for the file via system interactions, methods, and procedures referred to as promotion and demotion. Promotion is invoked when an application attempts to modify or manipulate a file by directly manipulating the byte stream corresponding to the file. Thus, promotion is the process whereby the file property handler updates structured file properties in the object store when an application updates unstructured file properties in the byte stream in order to achieve consistency between the two environments. Promotion of the unstructured file properties into an object in the structured object store facilitates various objectives such as, for example:","a) A structured object store allows efficient querying of files based on their properties. This is generally not possible with properties stored in unstructured byte streams.","b) Unstructured properties are represented as well-structured objects that adhere to a standardized object representation. Thus, applications can operate easily with these objects using an object-oriented programming model rather than the model of manipulating the byte stream.","If a promoted file-backed item in the object store is then manipulated and updated, the file property handler facilitates a demotion process, wherein a reverse transformation is performed to update properties in the unstructured file corresponding to the changes in the structured object. In this manner, promotion and demotion enable file properties to be automatically updated and maintained in accordance with the properties suitable for the target system at hand (e.g., update unstructured properties to structured properties via promotion and visa versa via demotion).","In one aspect of the present invention, a bridge component (e.g., file property manager) communicates with a file property handler to cause transformation of unstructured properties in the file byte stream to a structured object when an application manipulates and saves properties to an unstructured file. The file property manager utilizes mechanisms exposed by the unstructured file store to track modified unstructured files that are to be updated in the object store.","To the accomplishment of the foregoing and related ends, certain illustrative aspects of the invention are described herein in connection with the following description and the annexed drawings. These aspects are indicative of various ways in which the invention may be practiced, all of which are intended to be covered by the present invention. Other advantages and novel features of the invention may become apparent from the following detailed description of the invention when considered in conjunction with the drawings.","The present invention relates to a system and methodology to facilitate the manipulation of a file as an unstructured byte stream and a structured object by enabling them to be consistent when one is updated independent of the other through specific application programming interfaces.","A file property handler manipulates the unstructured properties in the file in accordance with one or more structured object properties associated with the corresponding file-backed item. A promotion operation is performed to update the file-backed item with structured properties whenever the unstructured file stream is directly updated. Similarly, if the file-backed item were manipulated and updated with application programming interfaces used in the structured object environment, a demotion operation or reverse transformation is performed to update properties in the unstructured representation of the file.","As used in this application, the terms \u201ccomponent,\u201d \u201chandler,\u201d \u201cmanager,\u201d \u201csystem,\u201d and the like are intended to refer to a computer-related entity, either hardware, a combination of hardware and software, software, or software in execution. For example, a component may be, but is not limited to being, a process running on a processor, a processor, an object, an executable, a thread of execution, a program, and\/or a computer. By way of illustration, both an application running on a server and the server can be a component. One or more components may reside within a process and\/or thread of execution and a component may be localized on one computer and\/or distributed between two or more computers.","Referring initially to , a file transformation system  is illustrated in accordance with an aspect of the present invention. The system  includes a system or application  that is typically associated with one or more unstructured files , wherein the application  and file are generally associated with an unstructured file environment. A bridge module  and file property handler  are provided to facilitate communications and compatibility with a structured object system or application  that is generally associated with a structured object store environment. In one example, the structured system application may be associated with one or more schematized objects at  that are typically associated with code such as XML, for example.","If a file were to be modified, saved, and\/or manipulated as an unstructured file, the bridge module or file property manager  serves to direct the transformation from the unstructured file to the structured object. The transformation is performed by the bridge module  invoking the file property handler  which would in turn perform a promotion operation to transform unstructured properties of an unmanaged file to structured properties associated with applications that operate against the structured store . If the promoted object were to be manipulated from the structured store application, then the file property handler  performs a demotion operation which causes properties to be reverse transformed into properties that are then updated in the unstructured file.","In one aspect, promotion operates when a file-based application  continues to modify properties by updating a file stream corresponding to a structured object, also known as a file-backed item. Thus, promotion can be modeled as a process of updating a copy of these properties that are in the item in the structured object system  in order that the item reflects the changes made by updating the file. In contrast, demotion operates when a new application working against the structured store queries for and modifies items using a structured object Application Programming Interface (API), for example, irrespective of whether the items are file-backed items or not. In the case of file-backed items, some of these properties (which were earlier promoted from the file) are then written back to the file. This process is called demotion, which is in essence a reverse transformation of promotion.","With respect to the file property handler , promotion and demotion are achieved by calling a code module, called a File Property Handler (FPH) that determines how to promote properties from and\/or demote properties back into a given file. The FPH  is typically registered to process one or more selected file extensions. It is noted that the FPH  may decide, in some cases, to implement only Promote or Demote functions. As described herein, the term \u2018promoter\u2019 if used refers to an FPH that is being discussed in the context of promotion and \u2018demoter\u2019 as an FPH in the context of demotion.","The bridge component  (also referred to as a file property manager) interacts with the FPH  to facilitate promotion and demotion. Thus, on receiving an entry from a promotion change queue (described below), the bridge component  calls a suitable FPH  for a file with a pointer to a stream of the file to be promoted. The FPH  then performs extraction and transformation (described below) of the unstructured properties in a file to the structured properties of a managed item that is stored in the structured object store . With respect to demotion, a structured object API calls the demoter when an item is updated in the structured object store . The demoter employs a reverse transformation and extraction code to write the updated properties back to the file. The extraction portion of the FPH  uses an API that is specific to the file format to extract properties. It is noted that there is generally one registered FPH  called for a given file.","Referring now to , a more detailed transformation system  is illustrated in accordance with an aspect of the present invention. The system  represents a logical model for promotion and\/or demotion. In this aspect, one or more FPHs  (File Property Handler) reside in managed code. A FPM  (File Property Manager) acts as an interoperability or bridge component to the managed FPHs . The FPM  generally runs as a separate process, distinct from the process maintaining an actual object store . As noted above, an abstract BaseFilePropertyHandler class can be provided which defines methods for promotion and demotion. Thus, the File Property Handler  is modeled as a concrete managed class deriving from the abstract BaseFilePropertyHandler class that implements methods to be invoked in promotion and\/or demotion. For example, the FPM  can instantiate the class to invoke promotion for a file with a particular file extension. The following code excerpts represent an example class designation:",{"@attributes":{"id":"p-0026","num":"0025"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"using System;"},{"entry":"using System.Storage;"},{"entry":"using System.Storage.Base;"},{"entry":"namespace System.Storage.FPM"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"struct FPMContext"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ItemContext itmCtxt;"]},{"entry":[{},"public string fileExtension;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"};"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"abstract class BaseFilePropertyHandler"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"{"]},{"entry":[{},"abstract public void Promote ("]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ref Item","itm,","\/\/ File item (for write)"]},{"entry":[{},"FileStream","fStream,","\/\/ File stream (for read)"]},{"entry":[{},"PromotionContext","ctx);","\/\/ Promotion context"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"abstract public void Demote ("]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Item","existingItm,","\/\/ File item (for read)"]},{"entry":[{},"FileStream","fStream,","\/\/ File stream (for write)"]},{"entry":[{},"PromotionContext","ctx);","\/\/ Promotion context"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"abstract public void FirstPromote ("]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ref Item","itm,","\/\/ File item (for write)"]},{"entry":[{},"FileStream","fStream,","\/\/ File stream (for write)"]},{"entry":[{},"PromotionContext","ctx);","\/\/ Promotion context"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"abstract public void StoreSerializedItem("]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Item","existingItm,","\/\/ File item (for read)"]},{"entry":[{},"FileStream","fStream,","\/\/ File stream (for write)"]},{"entry":[{},"PromotionContext","ctx);","\/\/ Promotion context"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"abstract public void RetrieveSerializedItem("]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ref Item","itm,","\/\/ File item (for write)"]},{"entry":[{},"FileStream","fStream,","\/\/ File stream (for read)"]},{"entry":[{},"PromotionContext","ctx);","\/\/ Promotion context"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"};"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"Promotion is invoked when a file stream of a file-backed item is modified using a File API by applications that work with files. Thus, promotion should be invoked when such an application is used to modify a file in a structured store namespace. There generally should not be any promotion for files that are not migrated to a structured store namespace and that continue to exist in an unstructured file environment. When a file in the structured store namespace is modified by an application that uses file API, the file promotion manager  or service asynchronously invokes the FPH  on this file to update the item corresponding to the file. Typically, one FPH  is registered per file extension. When there is a pending promotion on a file-backed item, a \u2018promotionStale\u2019 flag on the item is set to 1.","As illustrated in , if an application working with unstructured files  modifies a file  in the structured store namespace at , the FPH  performs an extraction and transformation of unstructured properties at , before returning the promoted item to be saved at . In contrast, demotion is generally invoked when a file-backed item is updated through a structured store API . The structured store API  allows applications to modify one or more file-backed items or parts of such items. After performing this, when the application tries to save the changed item(s) using the structured store API, the method in the structured store API that is invoked to do the save performs the following: The method in the structured store API that performs the function of saving the item is conceptually referred to here as the \u2018save\u2019 method, although the exact method name is implementation-dependent.","If a file-backed item, or a part of it is modified through the structured store API, the structured store API's save method looks up the demoter corresponding to the file-backed item (based on file extension) and invokes it. The demoter takes in an item (or part of it) for read-write and a file stream for write and updates the file content based on the changes to the item. Demotion is a generally a synchronous operation since it is invoked during the operation that tries to save the item to the structured store. The save method described above updates the file  by invoking the demoter as well as write suitable properties to the item in the structured data store.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIGS. 3\u20136"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIGS. 3 and 4","FIG. 3","FIG. 4"],"b":["310","320","330","340","1","350"]},"After , the process proceeds to  of  that relates to FPH processing. At this point the FPH may first change the structure of the item. At , the FPH extracts properties, and updates the item based on the properties. At , the FPH marks modified parts of the item as promoted. After , the process proceeds back to  of  for further FPM processing. At , the FPM marks the item as not promotionStale. At , the FPM applies the changes to the structured object store. At , the FPM performs a commit\/rollback transaction and closes a file handle.",{"@attributes":{"id":"p-0033","num":"0032"},"figref":["FIGS. 5 and 6","FIG. 5","FIG. 6","FIG. 5"],"b":"510"},"At , the save function queries the store where the file-backed item resides (this could be on another machine in the case of a remote file) to check for the FPH registered for this file extension. This returns details about (e.g. the assembly name & version It) the FPH that promoted the file. At , the update function loads the appropriate FPH (e.g. it may be registered in a Global Assembly Cache of the respective machine) based on the above information. At , the save function invokes method(s) on the FPH in order to perform demotion. The changed item also contains a record of the changes that were made to the Item. These changes are tracked by the structured store API.","After , the process proceeds to  of  for further FPH processing. At , the FPH looks at tracked changes in the item to identify what fields need to be demoted. At , the FPH reads changes from the item, writes to file properties. This may also include calling the structured store API to read other information from the store. At , The FPH marks a \u2018promoted\u2019 flag to 1 on the item or parts of it that are demoted. The process then proceeds back to  of  for further save function processing. At , the save function applies the changes made to the item to the store. At , the save function closes the stream and commits the transaction on the file.","As noted previously, processing may differ with respect to a \u201cfirst promotion.\u201d The act of first promotion is generally distinguished from other promotions. This may be due to that first promotion may need to bring the item and file in sync with each other.",{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 7","b":["700","700","710"],"ul":{"@attributes":{"id":"ul0001","list-style":"none"},"li":{"@attributes":{"id":"ul0001-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0002","list-style":"none"},"li":["1) Fetch the item","2) Query if the item is \u2018promotionStale\u2019","3) If item is stale\n        \n        ","Note: 2 and 3 are optional.","4) Update the fetched item","5) Call the structured store API's save method to try to save the item.","6) If save succeeds in demotion, done.","7) else","8) if error code returned is \u2018Item Is PromotionStale\u2019 (This would be if the app did not perform 2 and 3 above)\n        \n        ","9) if error code returned is \u2018Item Has been Updated\u2019\n        \n        "]}}}},"There is in general one FPH registered per file type. However, in the case where a file format is extensible, new properties can be added to the unstructured properties in the file that the FPH was not aware of when it was developed. There are different extensibility schemes supported by the system to allow the FPH for a given file type to be extended to promote\/demote the new or custom properties added by software-vendors\/solution providers other than the FPH-writer as well as end-users. This makes it possible to transform the newly added unstructured file properties also into new structured properties on the item. Exemplary extensibility schemes are described below:","1. A software-vendor\/solution provider who adds simple unstructured properties to a file and wants these transformed into simple structured properties on the item can do the following:","a) Add corresponding new simple structured properties to the item and","b) Specify declaratively, using an XML scheme, how the newly added unstructured properties should be transformed into the newly added structured item properties.","The main FPH registered for the file type would implement these conversions (during both promotion and demotion) thus not requiring the vendor extending the file to write any new code.","2. A software-vendor\/solution provider who adds unstructured properties to a file and wants these transformed into more complex structured properties on the item or establish relationships between items can do the following:","a) Add corresponding complex structured properties to the item and","b) Write code that uses the structured store API to transform the unstructured properties into the newly added structured item properties or establishes relationships between items. This code would be analogous to the implementation of the main FPH for the file type.","3. End-users may add new properties to a file. These are promoted and demoted into a default property set on the structured item representation of the file.","With reference to , an exemplary environment  for implementing various aspects of the invention includes a computer . The computer  includes a processing unit , a system memory , and a system bus . The system bus  couples system components including, but not limited to, the system memory  to the processing unit . The processing unit  can be any of various available processors. Dual microprocessors and other multiprocessor architectures also can be employed as the processing unit .","The system bus  can be any of several types of bus structure(s) including the memory bus or memory controller, a peripheral bus or external bus, and\/or a local bus using any variety of available bus architectures including, but not limited to, 16-bit bus, Industrial Standard Architecture (ISA), Micro-Channel Architecture (MSA), Extended ISA (EISA), Intelligent Drive Electronics (IDE), VESA Local Bus (VLB), Peripheral Component Interconnect (PCI), Universal Serial Bus (USB), Advanced Graphics Port (AGP), Personal Computer Memory Card International Association bus (PCMCIA), and Small Computer Systems Interface (SCSI).","The system memory  includes volatile memory  and nonvolatile memory . The basic input\/output system (BIOS), containing the basic routines to transfer information between elements within the computer , such as during start-up, is stored in nonvolatile memory . By way of illustration, and not limitation, nonvolatile memory  can include read only memory (ROM), programmable ROM (PROM), electrically programmable ROM (EPROM), electrically erasable ROM (EEPROM), or flash memory. Volatile memory  includes random access memory (RAM), which acts as external cache memory. By way of illustration and not limitation, RAM is available in many forms such as synchronous RAM (SRAM), dynamic RAM (DRAM), synchronous DRAM (SDRAM), double data rate SDRAM (DDR SDRAM), enhanced SDRAM (ESDRAM), Synchlink DRAM (SLDRAM), and direct Rambus RAM (DRRAM).","Computer  also includes removable\/non-removable, volatile\/non-volatile computer storage media.  illustrates, for example a disk storage . Disk storage  includes, but is not limited to, devices like a magnetic disk drive, floppy disk drive, tape drive, Jaz drive, Zip drive, LS-100 drive, flash memory card, or memory stick. In addition, disk storage  can include storage media separately or in combination with other storage media including, but not limited to, an optical disk drive such as a compact disk ROM device (CD-ROM), CD recordable drive (CD-R Drive), CD rewritable drive (CD-RW Drive) or a digital versatile disk ROM drive (DVD-ROM). To Facilitate connection of the disk storage devices  to the system bus , a removable or non-removable interface is typically used such as interface .","It is to be appreciated that  describes software that acts as an intermediary between users and the basic computer resources described in suitable operating environment . Such software includes an operating system . Operating system , which can be stored on disk storage , acts to control and allocate resources of the computer system . System applications  take advantage of the management of resources by operating system  through program modules  and program data  stored either in system memory  or on disk storage . It is to be appreciated that the present invention can be implemented with various operating systems or combinations of operating systems.","A user enters commands or information into the computer  through input device(s) . Input devices  include, but are not limited to, a pointing device such as a mouse, trackball, stylus, touch pad, keyboard, microphone, joystick, game pad, satellite dish, scanner, TV tuner card, digital camera, digital video camera, web camera, and the like. These and other input devices connect to the processing unit  through the system bus  via interface port(s) . Interface port(s)  include, for example, a serial port, a parallel port, a game port, and a universal serial bus (USB). Output device(s)  use some of the same type of ports as input device(s) . Thus, for example, a USB port may be used to provide input to computer , and to output information from computer  to an output device . Output adapter  is provided to illustrate that there are some output devices  like monitors, speakers, and printers, among other output devices , that require special adapters. The output adapters  include, by way of illustration and not limitation, video and sound cards that provide a means of connection between the output device  and the system bus . It should be noted that other devices and\/or systems of devices provide both input and output capabilities such as remote computer(s) .","Computer  can operate in a networked environment using logical connections to one or more remote computers, such as remote computer(s) . The remote computer(s)  can be a personal computer, a server, a router, a network PC, a workstation, a microprocessor based appliance, a peer device or other common network node and the like, and typically includes many or all of the elements described relative to computer . For purposes of brevity, only a memory storage device  is illustrated with remote computer(s) . Remote computer(s)  is logically connected to computer  through a network interface  and then physically connected via communication connection . Network interface  encompasses communication networks such as local-area networks (LAN) and wide-area networks (WAN). LAN technologies include Fiber Distributed Data Interface (FDDI), Copper Distributed Data Interface (CDDI), Ethernet\/IEEE 1102.3, Token Ring\/IEEE 1102.5 and the like. WAN technologies include, but are not limited to, point-to-point links, circuit switching networks like Integrated Services Digital Networks (ISDN) and variations thereon, packet switching networks, and Digital Subscriber Lines (DSL).","Communication connection(s)  refers to the hardware\/software employed to connect the network interface  to the bus . While communication connection  is shown for illustrative clarity inside computer , it can also be external to computer . The hardware\/software necessary for connection to the network interface  includes, for exemplary purposes only, internal and external technologies such as, modems including regular telephone grade modems, cable modems and DSL modems, ISDN adapters, and Ethernet cards.",{"@attributes":{"id":"p-0054","num":"0067"},"figref":"FIG. 9","b":["900","900","910","910","900","930","930","930","910","930","900","950","910","930","910","960","910","930","940","930"]},"What has been described above includes examples of the present invention. It is, of course, not possible to describe every conceivable combination of components or methodologies for purposes of describing the present invention, but one of ordinary skill in the art may recognize that many further combinations and permutations of the present invention are possible. Accordingly, the present invention is intended to embrace all such alterations, modifications and variations that fall within the spirit and scope of the appended claims. Furthermore, to the extent that the term \u201cincludes\u201d is used in either the detailed description or the claims, such term is intended to be inclusive in a manner similar to the term \u201ccomprising\u201d as \u201ccomprising\u201d is interpreted when employed as a transitional word in a claim."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIGS. 3\u20136"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 9"}]},"DETDESC":[{},{}]}
