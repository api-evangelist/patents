---
title: Method and system for automatically generating a global simulation model of an architecture
abstract: A method for creating a global simulation model of an architecture for models of integrated circuits under development, including reading an architecture description file of the global model and storing information related to all of the possible configurations instantiating the components and storing the corresponding information, topologically connecting the interface signals, physically connecting the interface signals, at the level of each instance of the components using a component and connection rule table, and storing the corresponding information, and automatically generating the HDL-type and HLL-type source files of the global simulation model.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07865344&OS=07865344&RS=07865344
owner: Bull S.A.
number: 07865344
owner_city: Les Clayes Sous Bois
owner_country: FR
publication_date: 20030728
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"p":["The subject matter of this application is related to application Ser. No. 10\/627,690 (now U.S. Pat. No. 7,080,331), filed concurrently herewith in the name of Andrzej WOZNIAK, entitled \u201cMETHOD AND SYSTEM FOR AUTOMATIC RECOGNITION OF SIMULATION CONFIGURATIONS OF AN INTEGRATED NETWORK\u201d. The present application also claims the priority of French Application No. FR 02\/09690 filed Jul. 30, 2002, the content of which is incorporated herein by reference in its entirety.","This application includes a computer program listing contained on a single compact disc in one file \u201capplication Ser. No. 10\/627,977 Appendices A1-A5.txt,\u201d which material is hereby incorporated by reference as if fully set forth herein.","The invention relates to a method and a system for generating a global simulation model of an architecture. More particularly, the invention relates to a configuration method and a system called a \u201cConfigurator\u201d for implementing the method.","With the increasing complexity of hardware systems, it is necessary, in order to verify systems or integrated circuits under design, to be able to handle configurations that increasingly include models written in a hardware description language, for example of the HDL type (such as VHDL or Verilog, the most widely used), and in a high level languages of the HLL type (such as C or C); these languages describe, on the one hand, the elements constituting the hardware, and on the other hand, the models constituting the simulation environment.","The term \u201cConfiguration\u201d will be used to refer to a set of software models of elements called \u201cComponents,\u201d constituting a global simulation model.","The invention can be used to verify the design of ASICS by simulating their operation, for example in an environment identical or very similar to their end use, the configuration method making it possible to choose components and their software models from a plurality of available models in order to create simulation configurations. In the prior art, the configurations are rigid, and traditionally prepared \u201cby hand\u201d using text editors or graphics editors, based on a predefined list of possible configurations. Each modification in the model in HDL language requires manual corrections to be incorporated into all of the configurations. This happens several times during the development of an ASIC and constitutes a source of errors and modification problems, resulting in production delays. Modifications of a configuration are often sources of errors that are hard to find, as the size of some configurations can reach tens of thousands of lines, making them difficult to handle manually.","The time required to write and debug a configuration can be very long, making it difficult to generate and add new configurations into the environment. For that reason, when an environment contains a lot of elements for which it is difficult to predict all of the usable configurations, the use of certain configuration variants that facilitate debugging (simplified target configurations, for example) is often avoided.","These problems are accentuated in the more and more widely used co-simulation environments, wherein the models come from different sources and are written in high level programming languages (HLL) such as C or C, or in hardware description languages (HDL) such as VERILOG or VHDL. For the same component of the configuration, there are often several models (ex: functional, in high level programming languages; behavioral, in HDL, synthesizable HDL, etc.) that it would be desirable to be able to use transparently, as needed.","Moreover, the models to be connected often have, at the level of the connecting interfaces, differences requiring the use of adaptation modules. This is the case, for example, for circuits with sophisticated input\/output interfaces for which the logical level of the protocol is simulated first, the physical level being developed near the end of the project. The ability to choose adaptation models for the variants of HDL interfaces corresponding to the various development phases of the project constitutes an additional degree of freedom that complicates the writing of the configurations even more. Another problem stems from the fact that mixed HDL (for example Verilog or VHDL)\/HLL (for example C++) type models developed separately must be updated coherently. In the case of nonautomated management, this is a potential source of errors.","One object of the present invention is to limit one or more of these drawbacks.","To this end, the invention primarily relates to a method of automatic generation, by means of a data processing system associated with a program called a Configurator for creating a global simulation model of an architecture comprising models of integrated circuits under development that can constitute, with the help of the automatic Configurator, a machine or a part of a machine, and environment simulation models that make it possible to test and verify the circuit under development, a configuration definition file for components of the architecture, these components constituting fixed functional blocks for describing the functionalities of integrated circuits or parts of integrated circuits, the components being chosen by the user from a library of various component types and a library of environment components, in order to create the global model of the architecture corresponding to the functional specification defined in the configuration definition file and conforming to the specification of the architecture of the global model specified by an architecture description file, comprising :\n\n","According to another characteristic of the method, the Configurator system transmits to the HLL-type parts of each component information on:\n\n","According to another characteristic of the method, the configuration definition file also includes a keyword indicating the name or number of the server in which a component is instantiated, when the method is used in a multi-server system.","According to another characteristic of the method, in the case of a multi-server utilization, the Configurator system executes the following steps:\n\n","According to another characteristic of the method, the automatic connection between the components by the Configurator system includes several phases:\n\n","According to another characteristic of the method, the wiring phase is performed by the Configurator system comprises:\n\n","According to another characteristic of the method, the predetermined signals are the signals of the System Block corresponding to the component.","According to another characteristic, the description file of the architecture of the global model includes the simulation models of the Global Blocks and the System Blocks, these two types of components being connected to one another and handling environment signals.","According to another characteristic, the System Blocks are connected to the other components and supply them with the system signals that are specific to them.","According to another characteristic of the method, the data processing system performs a conformity check of the connections, comparing the connection table of the real instances between blocks to the connection coherency rule table.","According to another characteristic of the method, the data processing system compares the physical connections between the components to the connection coherency rule table, in order to detect any incompatibilities between the ends of the connections between the components, and in such a case, it specifies, and adds into the instance connection table, an adapter component inserted into the connection in question.","According to another characteristic, the configuration definition file includes information, specified by an attribute, concerning the utilization of adapter components with the instances of the active Components, whose connections are compared by the data processing system to the instance connection table in order to detect any incompatibilities between the ends of the connections between the components, and in such a case where incompatibility is detected it specifies, and adds into the instance connection table, another adapter component inserted into the connection in question. According to another characteristic of the method, the data processing system selects certain connections between the components of the connection coherency rule table and specifies, and adds into the instance connection table, additional connections constituting branches leading to respective additional models, which represent tools for monitoring the connections.","According to another characteristic of the method, during the source file generation phase, the Configurator system generates the source files in HDL language and in HLL language, based on the content of the component and connection rule table, the connection coherency rule table, the source file formatting table, the instance connection table and the wiring table.","According to another characteristic of the method, the data processing system executes an operation through the Configurator system for each configuration variant, in order to obtain several simulation models corresponding to the same functional specification, but written in a description comprising various mixtures of languages of different levels (HDL, HLL).","According to another characteristic of the method, the data processing system generates the functional specification of the global simulation model in a computer format compatible with a high-level programming language, (HLL) and in a format compatible with a hardware description language (HDL).","According to another characteristic of the method, the configuration definition file comprises, for each component, at least one part in HDL-type language, in order to provide an interface with other models.","According to another characteristic of the method, the models that include a part in HLL-type language include interface adapters.","According to another characteristic, the Configurator system chooses each interface adapter model as a function of the connection coherency rule table.","According to another characteristic of the method, the connections of the physical signals are specified by \u201cPorts,\u201d each port being an arbitrary selection of signals from the HDL-type interface of a component by means of regular expressions based on the names of these signals, and being constituted by regular expression\/substitute expression pairs, these expressions being successively applied to the name of each signal of the HDL-type interface, and if the final substitution is identical for two signals, the latter are connected to one another, the connection being stored in the wiring table.","According to another characteristic of the method, each interface adapter being shared among several models connected to the same port, only one of these models transmits signals through said port.","Another object of the invention is to offer a Configurator system that makes it possible to eliminate one or more of the preceding drawbacks.","This object is achieved by the data processing system for automatically generating a global simulation model of a configuration of fixed functional blocks, mutually connected by interworking connections so as to constitute the global simulation model of an architecture comprising models of integrated circuits under development that can constitute a machine that conforms to the functional specification of a configuration, this system being characterized in that the data processing system uses a Configurator program that includes means for creating a simulation of the wiring by applying stored regular expressions, and for using a configuration definition file in a high level language, a component and connection rule table describing the properties (type, HDL-type interfaces, ports, constructors of HLL class objects, etc.) of the software components for simulating the circuit, a connection coherency rule table in a high level language (HLL), means for instantiating the elements resulting from the configuration definition file, and an HLL code generator that combines the parameters of the components with the connection rules. According to another characteristic of the system, there are at least five types of components: Active Components, Monitoring and Verification Blocks, Intermediate Blocks, System Blocks and Global Blocks.","According to another characteristic of the system, it is equipped to perform a conformity check of the connections by comparing the instance connection table with a table of coherency rules for the physical connections between the models chosen from the blocks constituting the global model.","According to another characteristic of the system, it is equipped to compare the connection table of the real instances between blocks to the connection coherency rule table, in order to detect any incompatibilities between the ends of the connections between blocks, and in such a case to specify, and add into the coherency rule table of the real connections, a functional adapter block inserted into the connection in question.","According to another characteristic of the system, the component and connection rule table, which includes the properties of the components, contains global parameters common to all of the component types and exists in the form of a table distributed into one or more tables, which may or may not be associative, wherein the entries are names designating all of the possible models for the same component.","According to another characteristic of the system, the associative tables can contain the description, either in the form of parameter sets or in the form of references to procedures that generate the required values, the entries of these associative tables being names designating all of the possible models for the same component and forming a character string containing predetermined special identifiers, replaced by the values calculated by the Configurator system.","According to another characteristic of the system, at least three selectors indicate the instance to be used, the latter being transmitted as a parameter to a constructor of an HLL object.\n\n","According to another characteristic of the system, the Configurator system uses one or more connection coherency rule tables, which represent the rules for interconnecting the components and for inserting intermediate components, one or more component and connection rule tables, which represent the system-level connection rules and the rules for generating connections between the signals, and one or more source file formatting tables, which represent the rules for generating instances of HLL-type objects.","According to another characteristic of the system, the Configurator system uses:\n\n","According to another characteristic of the system, an operator functionally specifies the configuration in the highest level language as much as possible, and completes the functional specification with the components in the lowest level language.","According to another characteristic of the system, the following entries in the hash define the component Type (for example DUT (HDL model), XACTOR (transactor), MONITOR, VERIFIER or other types), and correlate each Component Type to a hash, in turn composed of the following entries:\n\n","According to another characteristic of the system, the generic structure of the active Components includes a Block containing the HDL description and a Block in HLL that provides the access paths to the HDL resources and, if necessary, a description of the block in HLL; the set of signals of the HDL block constitute the interface of the containing Block, formed by Ports, which are arbitrary logical selections of the signals of an interface, and by interface adapters, which are the software parts that handle, in each Port, the two-way communication between the parts in HLL and those in HDL, the interface adapters being chosen by the Configurator system.","According to another characteristic of the system, the Ports are specified in the form of regular expressions, which serve both to select the subsets of signals to be connected and to define the connection rules.","According to another characteristic of the system, the Configurator system generates so-called Transfer Components, which are inserted on each side of the cutoff to the servers, these components simply being wires for the inputs and registers for the outputs.","The elementary model components, which are shared among the Composite Model Components or the Global Blocks belonging to the various servers, are automatically duplicated by the Configurator system and instantiated in each server.","The invention concerns a system called a \u201cConfigurator,\u201d and the configuration method implemented by the system.","A global simulation model is typically composed of one or more models of integrated circuits under test (DUTs) surrounded by models that create a test and verification environment. These models create complex stimuli and receive complex responses from the model being tested. These components can be transactors (XACTORS)\u2014models that generally have an application programming interface (API) that permits control by tests outside the model, these tests generally being written in a high level language (HLL).","The verification environment can also contain components called Monitoring Blocks (MONITOR) and components called Verification Blocks (VERIFIER). These components are not directly involved in the exchange of signals between the other components of the global simulation model, but are used to observe and interpret them. The Monitoring Blocks (MONITOR) serve as analysis aids for the tests; they have program interfaces (APIs) for reporting events observed in the signals of the global model. The Verification Blocks (VERIFIER) are components that have a reference specification for the operation of the model being tested, and, by observing the signals of the global simulation model, they are capable of verifying the proper operation of the model.",{"@attributes":{"id":"p-0059","num":"0086"},"figref":["FIG. 1","FIG. 8","FIGS. 8","FIG. 8","FIGS. 8"],"i":["c","a","b","e","b ","c"],"b":["8","101","102","8","101"]},"The \u201cConfigurator\u201d system of the invention handles the connection of software simulation elements called components for the purpose of simulating hardware circuits.","There are at least 5 classes of components:\n\n","Each type of component can have several variants of embodiment of the same element, differentiated by the description level (see below) or by the signals in the interfaces (see below). Each type of component can be described in several levels of detail (functional, behavioral, gates, etc.), in an HDL-type language like VERILOG or VHDL, or in a high level language (HLL) like C or C, complemented by an HDL-type interface.","Several description levels for describing similar functionalities can coexist and can have HDL-type interfaces that are similar but not necessarily identical. Certain descriptions can have more functionalities, and the HDL-type interfaces can contain completely different sets of signals.","The components are connected based on a predetermined schema that is considered to be fixed for each execution of the Configurator system. These connections are defined by the architecture of the global simulation model and specified by the architecture description file (FDARCH) (see Appendices A1-A5).","Each instance of a component in this schema obtains a name or label that unambiguously identifies the position of the component and its type.","The definition file of the configuration (FCONF) provides a synthetic description of the Configuration variant to be generated by the Configurator system. Only the main components (Active Components, Monitoring Blocks and Verification Blocks) are mentioned in it, along with the types of models desired. The other components (Global Blocks, System Blocks and Intermediate Blocks) are instantiated automatically by the Configurator system.","Among the various types of components, the \u201cActive Components\u201d constitute the subset of the objects explicitly designated in the configuration definition file (FCONF) that exchange stimuli with their environment by transmitting and receiving.","Among the various types of components, the \u201cMonitoring and Verification Blocks\u201d constitute the subset of the objects explicitly designated in the configuration definition file (FCONF) that merely receive information from the environment. They are used for purposes of observation and Verification (MONITOR, VERIFIER). The operation granularity of these models is the event, which reports changes in control signal values and arbitrary data exchanges.","All the other Components constitute so-called implicit components, which are managed and instantiated automatically by the Configurator system, as a function of the parameters of the configuration definition file (FCONF) (explicit component type, interface type, etc.).","The components can be connected to each other directly or via external adaptation components called \u201cIntermediate Blocks,\u201d specially defined and declared for this purpose. They are often used, as will be seen below, during successive development phases to complete the missing parts of the design.","The Configurator system may thus insert one or more intermediate blocks to connect two active components.","The components called \u201cSystem Blocks\u201d are associated with the other components in order to supply them with the environment signals that are specific to them. These components encapsulate, at the level of each interface, all of the system signals that do not participate in the connection between the other components. The \u201cSystem Blocks\u201d themselves are connected to the \u201cGlobal Blocks,\u201d and manage all of the environment signals, i.e., the clock signals and general control signals (clock, reset, powergood, diagnostic), which may be transformed in order to adapt them to the needs of the corresponding active block (polarity change, delay, etc.), as well as the specific signals that are different for each particular instance of the active component in question, for exampl; the signals that encode the module number or the operating mode of the component, etc. The latter are managed by parameters provided by the Configurator system to the instances of the models of the components generated. If, for a given Component, the System Block is not necessary (which is indicated by the description tables of the configuration), it will be connected directly to the Global Blocks (see 1 of A2).","The configuration definition file (FCONF) can contain additional information specifying intermediate blocks to be used in association with the instances of the active components. Thus, a user can influence the choice of the intermediate component, or eliminate the ambiguity if there are several possible choices. The connections thus obtained are compared to the connection coherency rule table (TRCOH) in order to detect any incompatibilities between the ends of the connections between the components, and in such a case to choose, and add into the instance connection table (TCINST), another adapter component (Intermediate Block), inserted into the connection in question.","The Configurator system is based on a generic representation, as described in through , common to all of the components declared in the architecture description file (FDARCH) of the global simulation model and comprising two parts, of the HDL type (for example VERILOG or VHDL) and HLL type (for example C).","In the case of a component described entirely in an HDL-type language (), the HLL-type part is reduced to one instance, which makes it possible to indicate its presence in the Configuration during the simulation and supplies the paths for access to the HDL-type resources of the component.","For components described in an HLL-type language (), it is the HDL-type part that is reduced to a strict minimum and is limited to the description of the interface registers and signals.","All of the intermediate levels between these two extremes are possible, and are naturally used in the context of processes for developing ASIC circuits.","Typically, during development, one begins with an HLL-type model with a minimal HDL-type interface, then moves on to increasingly complete HDL-type models written by the designers, and ends up with models on the logic gate level that are automatically synthesized from HDL-type models.","Mixed models are often used because they allow for a precise and efficient simulation by dedicating the high-level language (HLL) to complex modeling for which the HLL-type language offers a compact and quickly executed solution. Nevertheless, even for models written primarily in an HLL-type language, the HDL-type part can be non-trivial because of performance losses due to changes in the simulation context between the HDL-type and HLL-type parts, respectively. A typical example is an interface whose signals change, even without any real data transfer activity. In this case, it is preferable to process the signals in the HDL-type part of the model, and to switch to the HLL-type part when the data are present in the interface.","The interface of a component is the set of all the signals present on its periphery. For components described in an HDL-type language only, this corresponds to the external interface of the definition of this component in an HDL-type language (for example VERILOG or VHDL). For components defined in a mix of HLL- and HDL-type languages, the interface of a component is the sum of the signals of all the HDL-type models used on the periphery of this component.",{"@attributes":{"id":"p-0081","num":"0113"},"figref":"FIG. 4"},"It includes a containing block, marked C, containing the HDL-type description marked A, and the HLL Block marked B that provide the paths for access to the HDL-type resources and, if necessary, a description of the block in an HLL-type language. The set of signals of the HDL-type block constitutes the interface of the block C. For purposes of connecting between the blocks, we will use the concept of Ports (see below), which are arbitrary logical selections of the signals of an interface. It is possible for a signal to belong to several Ports at once.","The Configurator system is capable of handling so-called \u201ccomposite\u201d models comprising a part in an HLL-type language and including other models of components called \u201cinterface adapters.\u201d Interface adapters are mixed HDL\/HLL-type models having an application programming interface (API) in an HLL-type language through which they communicate with the composite model. Composite models are particularly useful for simulation environment components (for example MONITOR, VERIFIER, XACTORS) wherein the model must adapt to signals present in the different variants of the models used in a configuration.",{"@attributes":{"id":"p-0084","num":"0116"},"figref":"FIG. 5","sub":"i"},"The Configurator system is equipped to automatically select the interface adapters for a composite model. The Configurator system examines the list of usable interface adapters for a given composite model described by the properties of the model, and chooses the interface adapter model whose physical connections with the rest of the global model conform to the connection coherency rule table (TRCOH). This approach makes it possible to quickly adapt to new types of interfaces by adding new adapters.","It is important to emphasize that the same component can be modeled by either an elementary or a composite structure, depending on its description level.","An interface adapter component can be shared among several composite models connected to the same port. Only one of these models is authorized to transmit signals to the port, the other models being purely observers. A typical utilization involves the Monitoring and Verification Blocks, which do not send output signals. The sharing of the interface adapters speeds up the simulation by simplifying and factoring parts of the model.","Hereinafter, the interface adapters that observe the signals on behalf of the Monitoring or Verification Blocks that are Composite Models will be called Probes.","The Configurator system is designed to optimize the utilization of Probes, while keeping their numbers to a minimum. Since the description of the Components establishes the notion of equivalency between certain Components, the Configurator system first tries to share the port of an \u201cActive Component.\u201d If this proves impossible, it instantiates a suitable Probe component that can be connected to the HDL-type interface from a list provided in the description of the Monitoring or Verification Component.","The section below explains the definitions related to the connections between Components. the concepts of interfaces and ports are used to support the description of the connections between the components.","A port is an arbitrary selection of signals of the HDL-type interface of a component, performed using regular expressions based on the names of these signals. A given signal can belong to one or more ports. The definition of each port is comprised of pairs of regular expressions and corresponding substitute expressions. These expressions are successively applied to the name of each signal of the interface, and in case of an appropriate \u201cmatch,\u201d the substitute expression is applied, and the name thus obtained moves on to the next substitution operation. If the final substitution gives a final result that is identical for two signals, they will be connected to one another. The Configurator generates a unique name for the connection and places the appropriate information in the wiring table (TCAB). The method described makes it possible to express complex connection rules between two components. For example, it is possible to connect signals with different names, or to create rules for connecting the input signals with the output signals.","The creation of this method for definition by the interfaces and the ports makes it possible to separate the declarations of HDL-type models and the specifications of connections for the Configurator system. The latter combines these two sources of information in order to generate the connections. In the majority of cases, modifying declarations in the HDL-type parts, which happens quite frequently during development, does not entail any modifications in the regular expressions that describe the wiring.","In the exemplary embodiment of the invention discussed below, only the point-to-point connections are described. The \u201cbus\u201d-type connections are easily modeled using a component with several outputs incorporating the bus.","The method of automatic connection between the components by the Configurator system in order to create the global simulation model will be described below. This method comprises the following steps:\n\n","The topological phase proceeds in the following way:\n\n","In the Wiring phase, the Configurator system connects the interface signals at the level of each port by applying regular expressions based on the names of the signals as described in the definition of the port. These expressions are applied to the names of the signals extracted from the HDL-type descriptions of the components, so any changes in the HDL-type interfaces from one version of a model to another do not directly affect the specifications of the connections between the blocks. This phase results in the generation of the wiring table (TCAB), which associates the signals connected to one another with the unique name of the wire that connects them. A certain number of verifications are then possible, for exampl; on the sourceless connections, the connection of several outputs, or other connections.","The various steps in the wiring phase are the following:\n\n","In the source file generation phase, the Configurator system generates the HDL-type and HLL-type source files based on the content of the instance connection table (TCINST), the wiring table (TCAB) and the formatting table (TFMT), in order to automatically generate the HDL-type (MGHDL) and HLL-type (MGHLL) source files of the global simulation model corresponding to the configuration specified by the configuration definition file (FCONF).","The HDL-type source file contains a description of the HDL-type part (for example in VERILOG) of the global simulation model corresponding to the configuration definition file (FCONF). In particular, it contains the instantiation of all of the HDL-type models of the components mentioned in the configuration file, the intermediate blocks, System Blocks and Global Blocks, as well as all of the wires connecting these instances.","The HLL-type source file contains the program that corresponds to the instantiation of all the components having part of their models in an HLL-type language. In the case of object-oriented HLL languages, the code contains the constructors of HLL class objects with the corresponding parameters specified in the description of each component. A formatting table (TFMT) specific to each design makes it possible to generate the appropriate HLL-type code.","The architecture description file (FDARCH) for a specific implementation of the Configurator system (PROGCONF) is described below in the PERL language. PERL was chosen because of its direct manipulation of regular expressions and associative tables on several levels.","The architecture, represented in , is constituted by a processor (CPU) communicating through a bridge (BRIDGE) with a system memory (MEMORY) and input\/outputs (I\/O).","In order to facilitate its writing and manipulation, the file FDARCH represented has been divided into several parts, presented in Appendices A1 through A5. This file defines the architecture of the global simulation model corresponding to the generic diagram represented in . The HDL-type language generated is VERILOG and the high level language (HLL) generated is C.","The properties of the Components (type, HDL-type interfaces, ports, constructors of objects of the C class, etc.) are described in several tables written in PERL language. The correspondence between these tables and the diagram illustrating the Configurator system of  is represented in . In the description below, all of the notations beginning with \u201c% . . . \u201d correspond to hash tables. These tables can contain the description, either in the form of parameter sets or in the form of references to procedures that generate the required values.","The procedures are part of the description and are changed for each design. The typical example of their utilization is the generation of interconnections between the components. Often, a table corresponding to all of the possible interconnections would be too large and difficult to generate and maintain. A procedure, on the other hand, can be very compact.","The description of the rules for interconnecting the components (TCRC) contains global parameters common to all of the component types. It can exist in the form of at least one table. In the exemplary embodiment of , it is shown in the form of seven associated (hash) tables, three of which have the entries (% InstNameModuleMap, % SysConnectMap, % SysSpecMap), the names designating all of the possible models for the same component:\n\n","The two hash tables % SysWrapMap and % SysPinConst (see 6 of A2) contain the system level connection rules. The hash table % Activity-TypeMap associates the name of a component with its type. The hash table % PortProbeMap has as entries the names of the HDL-type models used in the description of the components.","The Configurator system is controlled by at least one connection coherency rules table (TRCOH), which represents the rules for interconnecting between the components and inserting intermediate components. In the embodiment of , the connection coherency rules are distributed in the form of the following two tables:\n\n","The Configurator system is controlled by at least one source file formatting table (TFMT), which represents the rules for generating instances of HLL-type objects. In the embodiment of , the rules for generating instances of HLL-type objects are distributed in the form of the following two tables:\n\n","The role of each of these hash tables is described in detail below.","Among the entries defined for the tables % InstNameModuleMap, % SysConnectMap, % SysSpecMap, certain are mandatory:\n\n","Other parameters are optional and can be added to the description of the tables, but these parameters can only be used by the code provided with the description; among them are the following:\n\n","The following hash entries define the Type of the component, for example DUT (HDL-type model), XACTOR (transactor) or other types.","Each Component Type corresponds to a hash, in turn composed of the following entries:\n\n","The Configurator has several preprogrammed procedures, but others can be added and referenced. The preprogrammed procedures accept the following modifiers:\n\n","The entry \u201cSelfConnect\u201d\u2014similar to the entry \u201cConnect\u201d\u2014contains the definitions of the connections of the Port signals that can be connected between two instances of the same component. This definition facilitates the connection of one-way output\/input signals in the particular case of a head-to-tail connection.","The entry \u201cPort\u201d provides the definition of all of the ports. It is a hash that associates the name of each port with a table that includes the following elements:\n\n","The entry \u201cGenDest\u201d (see 1 of A3) is a pointer to the procedure that, for a component designated by a label and type, generates, for each port, the label of the component to which it is connected. The user must imperatively specify the referenced procedure; this procedure is also used to control the coherency of the requested configuration.","The entry \u201cSysConn\u201d is a hash that associates each HDL-type module contained in the model with a pointer to the procedure for selecting and naming the System Blocks. The user must imperatively specify the referenced procedure.","The entry \u201cGenHDLInstParam\u201d is a pointer to the procedure that generates the additional parameters required by the HDL-type simulator for the code generated, which instantiates the HDL-type part of the component.","The entry \u201cCfgCpp\u201d defines the parameters of the constructor of the object for the C identification code of the Configuration, generated automatically, which serves as a filter for the selection of the Components by the Configurator system.","The first parameter is the name of the class of the C object; it is a predefined name associated with that of the HLD-type model. The first parameter is followed by tables that correspond to groups of parameters typically associated with each port of the component. The keyword \u201cOwn\u201d indicates an elementary model component.","Next comes the name of the HDL-type component referenced in the Port part and the type identifier of the component, for example DUT, model of the circuit under design, XACTOR, or transactor.","For the composite model blocks, the parameter part is richer.","It contains the keyword \u201cSrc\u201d for the active components or \u201cMon\u201d for the Verification and Monitoring components.","Next come the parameters of the interface adapter component, comprising:\n\n","The latter parameters are specific to each port of the composite block.","In the C code generated for a composite model, the parameters transmitted to the constructor of a class correspond to the pointers to the instances of the interface adapters.","All of these parameters serve to guide the generator of the C code, which combines them with the rules contained in the hash table \u201c% classCppProtoMap\u201d:\n\n","The following algorithm is used for connecting two components:\n\n","The user can influence the Configurator system's choice by explicitly specifying in the configuration file the intermediate blocks to be connected to a component.","The table \u201c% HwfConnectivityMap\u201d allows for both the Verification of connectivity and the specification of intermediate Blocks to be inserted in order to connect two Components whose parts are not directly connectable.","In order for two blocks to be able to be connected to each other, it is necessary for % HwfConnectivityMap to contain entries that describe the following properties of this connection:\n\n","It is emphasized that the connectivity in this case is expressed globally, without specifying the names of signals to be connected.","The Components described in an HLL-type language can have several possible implementations of the HDL-type modules A_Port, at the level of each port i (see ). The hash table \u201c% HwifAlternateMap\u201d specifies the choice that is possible for each HDL-type module of a component. The Configurator system uses this information in order to insert the intermediate blocks only when strictly necessary.","The hash % SysWrapMap defines, for each implementation of a component, its System Block. The entries are names of HDL-type modules associated with the name of the system block and its HDL-type implementation. This information is used by the Configurator system to instantiate the appropriate system block from specifications contained in the hash % SysConnectMap (see 3 of A2).","The hash % SysPinConst associates, with each System Block, the connections of certain signals of its interface to the names of the corresponding signals (wires) at the system level. These connections are independent of the configurations and are not governed by the regular expressions that are applicable during the wiring of the other signals.","Typically, the signals in question are clock signals, reset signals, etc. The referenced names are declared in an HDL-type code that is specific for each model under design, and are provided by the user (in the form of a variable or a file) with the descriptions of the components and the specific connection rules.","This specific HDL-type code is systematically included at the beginning of the HDL-type code generated by the Configurator system.","The procedure \u201c&gen_sys_VlogInstParameter\u201d is a procedure that generates the instantiation parameters for the generator of the HDL-type code from the label and of the type of each Component.","The hash % Activity_TypeMap (see 1 of A1) associates the name of a component with its type, specified by one of the following keywords:\n\n","The table \u201c% PortProbeMap\u201d is a hash whose entries are the names of the HDL-type models used in the description of the components. The values are in turn hashes that associate, with each port name, a table containing the name of a block that can serve as a Probe for observing the signals of this port and the name of the corresponding C class. This hash informs the Configurator system of the type of component capable of observing the signals of a given port and the type of C API that can be used to analyze the control and data flow observed in this port.","The procedure &GenDest accepts as input the label of the source component, its type and its port. The result returned is a hash that associates the label of the connected target component with its port.","In order to control the coherency of the configuration generated no matter what the order in which the Components are handled, the Configurator system calls the procedure &GenDest with the parameters obtained for the target component used as a source and verifies that the result actually corresponds to the initial source component and port.","The Configurator system calls the procedure &GenDest for each component contained in the configuration file, running through all of these ports.","The hash returned by &GenDest can contain several components with their respective ports. This is particularly the case for connections of the \u201cbus\u201d type; &GenDest returns all of the components connected by the busses except the one that is given as an argument. The Configurator system automatically inserts the necessary \u201cbus\u201d component.","The hash &moduleToCppClassMap is a search accelerator that makes it possible to retrieve the C class from the name of the HDL-type module; it only applies to elementary Models (see 1.14).","The hash % classCppProtoMap describes the generation of the constructors of C class objects. Each entry corresponds to the name of a C class. Each description is a hash composed of the following four entries:\n\n","Each entry is a character string containing predetermined special selectors, replaced by the values calculated by the Configurator system. These selectors have the general form #<Src:Dst:Act><Item#\u2267, where \u201cSrc,\u201d \u201cDst\u201d and \u201cAct\u201d indicate the instance to be used, the latter being transmitted as a parameter to a constructor of an HLL object.\n\n","Component containing the observation port.","<Item>is a keyword indicating the selection of one of the following:\n\n","The two variables \u201c$cpp_preamble\u201d (see 3ofn A5) and \u201c$cpp_postamble\u201d (see 4 of A5) respectively contain the beginning and the end of the C program text generated by the Configurator system. The text generated from the table % classCppProtoMap is inserted in the middle.","The two variables \u201c$top_verilog_preamble\u201d and \u201c$top_verilog_postamble\u201d respectively contain the beginning and the end of the text of the instance \u201ctop\u201d of the HDL-type (VERILOG) description of the configuration. Typically, they are the instantiations of clock blocks and other system level blocks.","The description that follows is a simple example of the generation of a Configuration through the implementation of the Configurator system, which is illustrated in a simplified case based on the architecture of a System constituted by a bridge (BRIDGE) that connects a central processor (CPU), a Memory, and an input\/output card (I\/O). The Architecture of the System is represented in .","In this example, the CPU and the BRIDGE can be modeled, either by a VERILOG model of the design (DUT, DUT_Core), or by a C composite model (XACTOR).","The interface between the CPU and the BRIDGE is called FBUS. Several variants of this interface are considered to correspond to successive stages of development.","The global block Clock handles the distribution of the clock signals and system signals globally for all of the Components.","The Configurator system relies on the description of the HDL-type Interfaces of the Components. Simple interfaces, written in VERILOG language, are proposed below as examples for each of the Components. The Configurator system analyzes only this part of the source files contained in the library of HDL-type source files (BFSHDL). They belong to a methodology for progressively handling variants of models as they become available.","The following HDL-type description of the Interfaces has been reduced to only what is necessary to illustrate the capabilities and the operation of the Configurator. In a real situation, the behavioral descriptions are included, as in the case of the model of the clock (the module CLOCK).","The description is as follows:","CPU:\n\n",{"@attributes":{"id":"p-0162","num":"0255"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"module cpu ("]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},"XXadr_dat,"]},{"entry":[{},{},"XXreq,"]},{"entry":[{},{},"XXack,"]},{"entry":[{},{},"\/\/"]},{"entry":[{},{},"clk,"]},{"entry":[{},{},"reset,"]},{"entry":[{},{},"powergood"]},{"entry":[{},{},");"]},{"entry":[{},"inout","[63:0] XXadr_dat;"]},{"entry":[{},"inout","[3:0] XXreq;"]},{"entry":[{},"inout","[3:0] XXack;"]},{"entry":[{},"input","clk;"]},{"entry":[{},"input","reset;"]},{"entry":[{},"input","powergood;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"endmodule"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"ul":{"@attributes":{"id":"ul0060","list-style":"none"},"li":{"@attributes":{"id":"ul0060-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0061","list-style":"none"},"li":"b) The model XACTOR () consists in an abstract C model whose HDL-type instance is constituted by that of the Port named fbus_p. In this example, it is assumed that the Port FBUS has a variant named FBUSA wherein the two-way signals adr_dat have been separated into pairs of one-way in (inXXadr_dat) and out (outXXadr_dat) signals."}}}},{"@attributes":{"id":"p-0163","num":"0257"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"module fbus_p ("]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},"inXXadr_dat,"]},{"entry":[{},{},"outXXadr_dat,"]},{"entry":[{},{},"inXXreq,"]},{"entry":[{},{},"outXXreq,"]},{"entry":[{},{},"inXXack,"]},{"entry":[{},{},"outXXack,"]},{"entry":[{},{},"\/\/"]},{"entry":[{},{},"clk,"]},{"entry":[{},{},"reset,"]},{"entry":[{},{},"powergood"]},{"entry":[{},");",{}]},{"entry":[{},"input","[63:0] inXXadr_dat;"]},{"entry":[{},"output","[63:0] outXXadr_dat;"]},{"entry":[{},"input","[3:0] inXXreq;"]},{"entry":[{},"output","[3:0] outXXreq;"]},{"entry":[{},"input","[3:0] inXXack;"]},{"entry":[{},"output","[3:0] outXXack;"]},{"entry":[{},"input","clk;"]},{"entry":[{},"input","reset;"]},{"entry":[{},"input","powergood;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"endmodule"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"ul":{"@attributes":{"id":"ul0062","list-style":"none"},"li":{"@attributes":{"id":"ul0062-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0063","list-style":"none"},"li":"c) The model MONITOR of the component CPU is a composite model that allows the Monitoring of the interface FBUS. In the case where there is no port adapter fbus_p in the configuration, a probe containing the instance fbus_probe will be generated ()."}}}},{"@attributes":{"id":"p-0164","num":"0259"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"module fbus_probe ("]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},"XXadr_dat,"]},{"entry":[{},{},"XXreq,"]},{"entry":[{},{},"XXack"]},{"entry":[{},{},"\/\/"]},{"entry":[{},{},"clk,"]},{"entry":[{},{},"reset,"]},{"entry":[{},{},"powergood"]},{"entry":[{},{},");"]},{"entry":[{},"input","[63:0] XXadr_dat;"]},{"entry":[{},"input","[3:0] XXreq;"]},{"entry":[{},"input","[3:0] XXack;"]},{"entry":[{},"input","clk;"]},{"entry":[{},"input","reset;"]},{"entry":[{},"input","powergood;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"endmodule"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Intermediate adaptation blocks FBUS:","These blocks implement the interface adaptation at the FBUS level in the case where point-to-point mapping of the signals is impossible. The port FBUSA is the variant of FBUS in which the two-way signals have been separated into pairs of one-way incoming (in) and outgoing (out) signals.","The model fbus_xchg () implements the adaptation between the interface FBUS of the port fbus_p and that of a port FBUSA; the width of the interface can be parameterized so as to accommodate potential technological evolutions.",{"@attributes":{"id":"p-0168","num":"0263"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"module fbus_xchg ("]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"XXadr_dat,"]},{"entry":[{},"XXreq,"]},{"entry":[{},"XXack,"]},{"entry":[{},"\/\/"]},{"entry":[{},"inXXadr_dat,"]},{"entry":[{},"outXXadr_dat,"]},{"entry":[{},"inXXreq,"]},{"entry":[{},"outXXreq,"]},{"entry":[{},"inXXack,"]},{"entry":[{},"outXXack,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},");"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"inout","[63:0] XXadr_dat;"]},{"entry":[{},"inout","[3:0] XXreq;"]},{"entry":[{},"inout","[3:0] XXack;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"input","[63:0] inXXadr_dat;"]},{"entry":[{},"output","[63:0] outXXadr_dat;"]},{"entry":[{},"input","[3:0] inXXreq;"]},{"entry":[{},"output","[3:0] outXXreq;"]},{"entry":[{},"input","[3:0] inXXack;"]},{"entry":[{},"output","[3:0] outXXack;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ model body"]},{"entry":[{},"endmodule"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"BRIDGE:"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"ul":{"@attributes":{"id":"ul0064","list-style":"none"},"li":{"@attributes":{"id":"ul0064-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0065","list-style":"none"},"li":"a) The model DUT of the component BRIDGE () has the three respective ports to the models CPU, MEM and IO as well as the System signals delivered by the dedicated system block SYS_BRIDGE and by the global block CLOCK."}}}},{"@attributes":{"id":"p-0169","num":"0265"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"module bridge ("]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},"XXadr_dat,"]},{"entry":[{},{},"XXreq,"]},{"entry":[{},{},"XXack,"]},{"entry":[{},{},"YYadr,"]},{"entry":[{},{},"YYdata,"]},{"entry":[{},{},"ZZdata,"]},{"entry":[{},{},"ZZreq,"]},{"entry":[{},{},"ZZack,"]},{"entry":[{},{},"YYctrl,"]},{"entry":[{},{},"clk_2xp,"]},{"entry":[{},{},"clk_2xn,"]},{"entry":[{},{},"clkp,"]},{"entry":[{},{},"clkn,"]},{"entry":[{},{},"reset,"]},{"entry":[{},{},"powergood"]},{"entry":[{},{},");"]},{"entry":[{},"inout","[63:0] XXadr_dat;"]},{"entry":[{},"inout","[3:0] XXack;"]},{"entry":[{},"inout","[3:0] XXreq;"]},{"entry":[{},"output","[31:0] YYadr;"]},{"entry":[{},"inout","[63:0] YYdata;"]},{"entry":[{},"output","[2:0] YYctrl;"]},{"entry":[{},"inout","[15:0] ZZdata;"]},{"entry":[{},"input","[1:0] ZZack;"]},{"entry":[{},"output","[1:0] ZZreq;"]},{"entry":[{},"input","clk_2xp;"]},{"entry":[{},"input","clk_2xn;"]},{"entry":[{},"input","clkp;"]},{"entry":[{},"input","clkn;"]},{"entry":[{},"input","reset;"]},{"entry":[{},"input","powergood;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"endmodule"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"ul":{"@attributes":{"id":"ul0066","list-style":"none"},"li":{"@attributes":{"id":"ul0066-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0067","list-style":"none"},"li":"b) The model BRIDGE_CORE () is the variant DUT_CORE of the component BRIDGE having an interface FBUSA. This model reflects the situation in which the model of the FBUS interface controller is not available."}}}},{"@attributes":{"id":"p-0170","num":"0267"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},{},"module bridge_core ("]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},{},"inXXadr_dat,"]},{"entry":[{},{},{},"outXXadr_dat,"]},{"entry":[{},{},{},"inXXreq,"]},{"entry":[{},{},{},"outXXreq,"]},{"entry":[{},{},{},"inXXack,"]},{"entry":[{},{},{},"outXXack,"]},{"entry":[{},{},{},"\/\/"]},{"entry":[{},{},{},"YYadr,"]},{"entry":[{},{},{},"YYdata,"]},{"entry":[{},{},{},"YYctrl,"]},{"entry":[{},{},{},"\/\/"]},{"entry":[{},{},{},"ZZdata,"]},{"entry":[{},{},{},"ZZreq,"]},{"entry":[{},{},{},"ZZack,"]},{"entry":[{},{},{},"\/\/"]},{"entry":[{},{},{},"clk_2xp,"]},{"entry":[{},{},{},"clk_2xn,"]},{"entry":[{},{},{},"clkp,"]},{"entry":[{},{},{},"clkn,"]},{"entry":[{},{},{},"reset,"]},{"entry":[{},{},{},"powergood"]},{"entry":[{},{},{},");"]},{"entry":[{},{},"input","[63:0] inXXadr_dat,"]},{"entry":[{},{},"output","[63:0] outXXadr_dat;"]},{"entry":[{},{},"input","[3:0] inXXreq;"]},{"entry":[{},{},"output","[3:0] outXXreq;"]},{"entry":[{},{},"input","[3:0] inXXack;"]},{"entry":[{},{},"output","[3:0] outXXack;"]},{"entry":[{},{},"output","[31:0] YYadr;"]},{"entry":[{},{},"inout","[63:0] YYdata;"]},{"entry":[{},{},"output","[2:0] YYctrl;"]},{"entry":[{},{},"inout","[15:0] ZZdata,"]},{"entry":[{},{},"input","[1:0] ZZack;"]},{"entry":[{},{},"output","[1:0] ZZreq;"]},{"entry":[{},{},"input","clk_2xp;"]},{"entry":[{},{},"input","clk_2xn;"]},{"entry":[{},{},"input","clkp;"]},{"entry":[{},{},"input","clkn;"]},{"entry":[{},{},"input","reset;"]},{"entry":[{},{},"input","powergood;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},"endmodule"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}},"ul":{"@attributes":{"id":"ul0068","list-style":"none"},"li":{"@attributes":{"id":"ul0068-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0069","list-style":"none"},"li":"c) The model sys_bridge () is the system block dedicated to the System signals of the Bridge model; it is fed directly by the block CLOCK."}}}},{"@attributes":{"id":"p-0171","num":"0269"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},{},"module sys_bridge("]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},{},"clk_2xp,"]},{"entry":[{},{},{},"clk_2xn,"]},{"entry":[{},{},{},"clkp,"]},{"entry":[{},{},{},"clkn,"]},{"entry":[{},{},{},"reset,"]},{"entry":[{},{},{},"powergood,"]},{"entry":[{},{},{},"\/\/"]},{"entry":[{},{},{},"sys_CLK_2X,"]},{"entry":[{},{},{},"sys_CLK,"]},{"entry":[{},{},{},"sys_RESET,"]},{"entry":[{},{},{},"sys_POWER_GOOD"]},{"entry":[{},{},{},");"]},{"entry":[{},{},"output","clk_2xp;"]},{"entry":[{},{},"output","clk_2xn;"]},{"entry":[{},{},"output","clkp;"]},{"entry":[{},{},"output","clkn;"]},{"entry":[{},{},"input","sys_CLK_2X;"]},{"entry":[{},{},"input","sys_CLK;"]},{"entry":[{},{},"input","sys_RESET;"]},{"entry":[{},{},"input","sys_POWER_GOOD;"]},{"entry":[{},{},"output","reset;"]},{"entry":[{},{},"output","powergood;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},"clk_2xp = sys_CLK_2X;"]},{"entry":[{},{},"clk_2xn = ~sys_CLK_2X;"]},{"entry":[{},{},"clkp = sys_CLK;"]},{"entry":[{},{},"clkn = ~sys_CLK;"]},{"entry":[{},{},"reset, = sys_RESET;"]},{"entry":[{},{},"powergood = sys_POWER_GOOD;"]},{"entry":[{},{},"endmodule"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}},"ul":{"@attributes":{"id":"ul0070","list-style":"none"},"li":{"@attributes":{"id":"ul0070-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0071","list-style":"none"},"li":"d) The model XACTOR () is an abstract C model whose HDL-type instance is constituted by that of the various ports, respectively fbus_p, cmem_p, and cio_p, to CPU, MEM and IO."}}}},{"@attributes":{"id":"p-0172","num":"0271"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},{},"module cmem_p (",{}]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"49pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},{},"YYadr,",{}]},{"entry":[{},{},{},"YYdata,",{}]},{"entry":[{},{},{},"YYctrl,",{}]},{"entry":[{},{},{},"clk,",{}]},{"entry":[{},{},{},"reset,",{}]},{"entry":[{},{},{},"powergood",{}]},{"entry":[{},{},{},");",{}]},{"entry":[{},{},"output","[31:0] YYadr;",{}]},{"entry":[{},{},"inout","[63:0] YYdata;",{}]},{"entry":[{},{},"output","[2:0] YYctrl;",{}]},{"entry":[{},{},"input ","clk;",{}]},{"entry":[{},{},"input ","reset;",{}]},{"entry":[{},{},"input","powergood;",{}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},"endmodule",{}]},{"entry":[{},{},"module cio_p (",{}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"49pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},{},"ZZdata,",{}]},{"entry":[{},{},{},"ZZreq,",{}]},{"entry":[{},{},{},"ZZack,",{}]},{"entry":[{},{},{},"\/\/",{}]},{"entry":[{},{},{},"clk,",{}]},{"entry":[{},{},{},"reset,",{}]},{"entry":[{},{},{},"powergood",{}]},{"entry":[{},{},{},");",{}]},{"entry":[{},{},"inout","[15:0] ZZdata;",{}]},{"entry":[{},{},"input","[1:0] ZZack;",{}]},{"entry":[{},{},"output ","[1:0] ZZreq;",{}]},{"entry":[{},{},"input","clk;",{}]},{"entry":[{},{},"input","reset;",{}]},{"entry":[{},{},"input","powergood;",{}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},"endmodule",{}]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}]}}},"MEMORY:\n\n",{"@attributes":{"id":"p-0174","num":"0274"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"model DUT:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"module cmem ("]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"YYadr,"]},{"entry":[{},"YYdata,"]},{"entry":[{},"YYctrl,"]},{"entry":[{},"clk,"]},{"entry":[{},"reset,"]},{"entry":[{},"powergood"]},{"entry":[{},");"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"input","[31:0] YYadr;"]},{"entry":[{},"inout","[63:0] YYdata;"]},{"entry":[{},"input","[2:0] YYctrl;"]},{"entry":[{},"input","clk;"]},{"entry":[{},"input","reset;"]},{"entry":[{},"input","powergood;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"endmodule"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"I\/O:"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"ul":{"@attributes":{"id":"ul0074","list-style":"none"},"li":{"@attributes":{"id":"ul0074-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0075","list-style":"none"},"li":"The model DUT of the component I\/O () has the respective ports to the models BRIDGE and CLOCK."}}}},{"@attributes":{"id":"p-0175","num":"0276"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"model DUT:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"module cio ("]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ZZdata,"]},{"entry":[{},"ZZreq,"]},{"entry":[{},"ZZack,"]},{"entry":[{},"clk,"]},{"entry":[{},"reset,"]},{"entry":[{},"powergood"]},{"entry":[{},");"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"inout","[15:0] ZZdata;"]},{"entry":[{},"output","[1:0] ZZack;"]},{"entry":[{},"input","[1:0] ZZreq;"]},{"entry":[{},"input","clk;"]},{"entry":[{},"input","reset;"]},{"entry":[{},"input","powergood;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"endmodule"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Global System Block:"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"ul":{"@attributes":{"id":"ul0076","list-style":"none"},"li":{"@attributes":{"id":"ul0076-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0077","list-style":"none"},"li":"This model () handles the delivery of the System signals that feed the system blocks dedicated to each component."}}}},{"@attributes":{"id":"p-0176","num":"0278"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"module Clock ("]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"sys_POWER_GOOD,"]},{"entry":[{},"sys_RESET,"]},{"entry":[{},"sys_CLK,"]},{"entry":[{},"sys_CLK_2X"]},{"entry":[{},");"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"output sys_POWER_GOOD;"]},{"entry":[{},"output sys_RESET;"]},{"entry":[{},"output sys_CLK;"]},{"entry":[{},"output sys_CLK_2X;"]},{"entry":[{},"parameter HALF_PERIOD = 75; \/\/ 7.5 ns, 66 MHz"]},{"entry":[{},"parameter RESET_DELAY = 10000000000 ; \/\/ 1.0 ms"]},{"entry":[{},"parameter POWER_GOOD_DELAY = 5000000000 ; \/\/ 0.5 ms"]},{"entry":[{},"initial begin;"]},{"entry":[{},"sys_POWER_GOOD = 0;"]},{"entry":[{},"sys_RESET = 0;"]},{"entry":[{},"sys_CLK = 0;"]},{"entry":[{},"sys_CLK_2X = 0;"]},{"entry":[{},"#POWER_GOOD_DELAY sys_POWER_GOOD = 1;"]},{"entry":[{},"#RESET_DELAY sys_RESET = 1;"]},{"entry":[{},"end"]},{"entry":[{},"always begin"]},{"entry":[{},"#HALF_PERIOD sys_CLK = ~sys_CLK;"]},{"entry":[{},"end"]},{"entry":[{},"always @(posedge sys_CLK_2X) begin"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"sys_CLK = ~sys_CLK;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"end"]},{"entry":[{},"endmodule"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Definition of the configurations:","The configuration variants mark the various verification stages based on the availability of the models; the Configurator system generates the configurations unambiguously from topological information contained in the configuration file.","The first configuration is defined by the configuration file 1 below, represented in ; the models DUT of the CPU and the BRIDGE are not available.\n\n","The second configuration is defined by the configuration file 2 below, represented in ","The BRIDGE XACTOR is connected to the CPU XACTOR by an FBUSA-type interface specified in the configuration file by the attribute FBUSA=FBUS_xchg; the Configurator system automatically inserts the second adapter fbus_xchg .","Configuration file 2:",{"@attributes":{"id":"p-0183","num":"0292"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"91pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"CPU_0","XACTOR","FBUSA = FBUS_xchg"]},{"entry":[{},"CPU_0","MONITOR"]},{"entry":[{},"BRIDGE_0","XACTOR"]},{"entry":[{},"CMEM_0","DUT"]},{"entry":[{},"CIO_0","DUT"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}}}},"The XACTOR CPU shares the port fbus_p with the Monitor.","The third configuration is defined by the configuration file  below, represented in ; the BRIDGE DUT_CORE is connected to the CPU XACTOR by an FBUSA-type interface specified in the configuration file by the attribute FBUSA=FBUS_xchg; the Configurator system automatically inserts the second adapter fbus_xchg .","Configuration file 3:",{"@attributes":{"id":"p-0187","num":"0296"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"91pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"CPU_0","XACTOR","FBUSA = FBUS_xchg"]},{"entry":[{},"CPU_0","MONITOR"]},{"entry":[{},"BRIDGE_0","DUT_CORE"]},{"entry":[{},"CMEM_0","DUT"]},{"entry":[{},"CIO_0","DUT"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}}}},"The XACTOR CPU shares the port fbus_p with the MONITOR.","The fourth configuration is defined by the configuration file 4 below, represented in ; the model CPU DUT is connected to the model BRIDGE XACTOR. The Configurator system automatically inserts an interface adapter fbus for implementing the connection between the CPU DUT and the BRIDGE XAXTOR without any explicit mention of this block in the configuration file.","Configuration file 4:",{"@attributes":{"id":"p-0191","num":"0300"},"tables":{"@attributes":{"id":"TABLE-US-00014","num":"00014"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"CPU_0","DUT"]},{"entry":[{},"CPU_0","MONITOR"]},{"entry":[{},"BRIDGE_0","XACTOR"]},{"entry":[{},"CMEM_0","DUT"]},{"entry":[{},"CIO_0","DUT"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The Configurator automatically instantiates the Probe fbus_probe in order to allow the observation of the interface FBUS by the Monitor.","The fifth configuration is defined by the configuration file 5 below, represented in ; all of the models DUT are available.","Configuration file 5:",{"@attributes":{"id":"p-0195","num":"0304"},"tables":{"@attributes":{"id":"TABLE-US-00015","num":"00015"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"CPU_0","DUT"]},{"entry":[{},"CPU_0","MONITOR"]},{"entry":[{},"BRIDGE_0","DUT"]},{"entry":[{},"CMEM_0","DUT"]},{"entry":[{},"CIO_0","DUT"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The Configurator system automatically instantiates the Probe fbus_probe in order to allow the observation of the interface FBUS by the Monitor.","The sixth configuration is defined by the configuration file 6 below, represented in ; it is a multi-server Configuration; Config1 is distributed between the 2 servers SERVER1 and SERVER2, the cutoff occurring at the level of the interface FBUS.","Configuration file 6:",{"@attributes":{"id":"p-0199","num":"0308"},"tables":{"@attributes":{"id":"TABLE-US-00016","num":"00016"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"CPU_0","XACTOR","SERVER1"]},{"entry":[{},"CPU_0","MONITOR","SERVER1"]},{"entry":[{},"BRIDGE_0","XACTOR","SERVER2"]},{"entry":[{},"CMEM_0","DUT","SERVER2"]},{"entry":[{},"CIO_0","DUT","SERVER2"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}}}},"The connectivity rules that make it possible to generate the connectivity tables of any configuration for this example are described in PERL language in Appendices A1 through A5.","Appendix A1 describes, in the case of the example chosen, the topological rules linked to the active components to be used by the Configurator system.","Appendix A2 describes the topological rules linked to the system Blocks and the Intermediate blocks to be used by the Configurator system.","Appendix A3 describes the procedures for connecting the Components to be used by the Configurator system.","Appendix A4 describes the code for generating the file in HDL-type language (Verilog_top.v) for connecting the components to be used by the Configurator system.","Appendix A5 describes the code for generating C Classes.","Appendices A6 and A7 describe the result files generated by the Configurator system, respectively in a low level HDL-type language (VERILOG) and in a high level language (C), in order to create the model of the configuration defined by the third configuration corresponding to . The Configurator can thus, with the user-developer, create its own model in accordance with the configuration variant chosen.","It would have been possible, in the same way, to illustrate the other variants of embodiment of the model (; and through ) that could be processed by the Configurator system in order to produce the corresponding result files constituting the simulation models of the system architecture envisioned for the integrated circuit under development.",{"@attributes":{"id":"p-0208","num":"0317"},"figref":"FIG. 2","b":"40"},"The computer  includes a central processor  comprising data processing circuits  (an arithmetic and logic unit ALU and memories of associated programs, hereinafter referred to globally as ALU, for convenience), and includes various memories, programs or working data files associated with the central processor .","The central processor  includes a memory  containing the component and connection rule table (TCRC), the connection coherency rule table (TRCOH) and the source file formatting table (TFMT). These tables are created from the architecture description file (FDARCH).","The memory  also contains the necessary programs or intelligent engines PROGCONF for constituting the Configurator system, which are usable by the ALU .","A memory  contains the instance connection table (TCINST) representing the instances of the components and their mutual interconnections required by the Configuration defined in the configuration definition file (FCONF) and conforming to the rules contained in the tables TCRC and TRCOH.","The memory  also contains the wiring table (TCAB) representing the physical connections (wires) between the HDL-type parts of the components instantiated from the HDL-type source file library (BFSHDL).","This results in the files MGHDL and MGHLL, which respectively represent the HDL-type (VERILOG or VHDL) and HLL-type (C) source files of the global simulation model generated by the Configurator system, a model that allows the co-simulation of an ASIC circuit in its verification environment.","The implementation of the method of the invention will now be explained.","The method for automatically generating, by means of the computer or data processing system , a simulation model of a configuration of models of given components, mutually linked by interworking connections so as to create a global simulation model MGHDL\/MGHLL of an ASIC circuit in its verification environment, comprises (see ):\n\n","TFMT to the contents of the tables TCINST and TCAB, and it generates the final source files MGHDL\/MGHLL of the global simulation model corresponding to the configuration specified by the configuration definition file (FCONF) (see ).","The input file FCONC corresponds to a description of the theoretical diagram of the type in , but without the models, which are added during the generation of the intermediate tables TCINST, TCAB describing the configuration and connections, in order to provide a global simulation model that is actually operational and that, moreover, allows the observation of particular signals.","The various tables above can be pre-stored in the data processing system  or can even be stored in an external memory that one connects to the data processing system , possibly through a data transmission network, in order to make them accessible.","The ALU  has all of the basic data required by the table tools TCRC, TRCOH, TFMT in order for the program PROGCONF associated with the Configurator system to control, in the ALU , the generation of the final files MGHDUMGHLL (see ).","The intermediate table TCAB describing the physical connections generated from an HDL-type description, is, in this example, subjected to a verification in order to detect any obvious errors, such as the existence of unconnected inputs or outputs or even outputs connected in parallel, when there should be conventional outputs of the so-called \u201ctotem-pole\u201d type, as opposed to those of the open collector or tri-state type.","In case of a modification of the initial file FCONF, the intermediate tables TCINST, TCAB and the final files MGHDL\/MGHLL can thus be redefined from the files of models and from the file FDARCH. This avoids any risk of error.","In this example, the ALU  generates a global co-simulation model by associating, with at least one functional block, several functional specification models written in programming languages of different levels, in this case of the HDL and C types.","It is understood that the present invention can be implemented in other specific forms without going beyond its scope of application as claimed. Consequently, the present detailed description should be considered to be a simple illustration of a particular case within the context of the invention, and can therefore be modified without going beyond the scope defined by the attached claims."],"heading":["FIELD OF THE INVENTION","BACKGROUND","SUMMARY OF THE INVENTION","DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The invention will be better understood with the help of the following description of a preferred embodiment of the method of the invention, in reference to the attached drawings, in which:",{"@attributes":{"id":"p-0048","num":"0075"},"figref":"FIG. 1","b":"12"},{"@attributes":{"id":"p-0049","num":"0076"},"figref":"FIGS. 2A through 2D"},{"@attributes":{"id":"p-0050","num":"0077"},"figref":"FIGS. 3","i":["a ","c "],"b":"3","sup":"++"},{"@attributes":{"id":"p-0051","num":"0078"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0052","num":"0079"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0053","num":"0080"},"figref":["FIG. 6","FIGS. 2"],"i":["a ","d "],"b":"2"},{"@attributes":{"id":"p-0054","num":"0081"},"figref":["FIGS. 7","FIG. 1"],"i":["a ","k "],"b":"7"},{"@attributes":{"id":"p-0055","num":"0082"},"figref":["FIGS. 8","FIG. 8","FIG. 8","FIG. 8"],"i":["a ","e ","e","f ","a"],"b":"8"}]},"DETDESC":[{},{}]}
