---
title: Automated connector creation for provisioning systems
abstract: Systems and methods for automating or at least partially automating the creation of connectors for a provisioning system are described. A provisioning system can include a connector creation module that analyzes an application programming interface (API) of a target system. Based on this analysis, the provisioning system can automatically create a connector module that can communicate with the target system. The connector creator may also provide a user interface that enables users to customize the functionality of the connector module. For example, a user can specify which routines of the target system API will be called by the connector module, which user identity parameters of the target system will be updated, and so forth. The connector creation module can automatically generate code for the connector module that implements the user-specified functionality. The finished connector module can be executed to provision the target system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09141442&OS=09141442&RS=09141442
owner: Dell Software Inc.
number: 09141442
owner_city: Aliso Viejo
owner_country: US
publication_date: 20110908
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATIONS","BACKGROUND","SUMMARY","DETAILED DESCRIPTION","I. Introduction","II. Example Provisioning Systems","III. Example Connector Creation Process","IV. Terminology"],"p":["This application claims the benefit of priority under 35 U.S.C. \u00a7119(e) of U.S. Provisional Patent Application No. 61\/380,948, filed on Sep. 8, 2010, entitled \u201cAutomated Connector Creation for Provisioning Systems,\u201d the disclosure of which is hereby incorporated by reference in its entirety.","Provisioning a user identity for an organization's computing environment can include creating a user's identity and assigning rules, roles, or permissions to that identity. This process can involve creating a directory account and providing the account with the correct permissions to ensure that the user has appropriate access to the resources and applications he or she needs for day-to-day tasks. For example, in the Windows\u00ae world, provisioning often includes creating an account in Active Directory\u00ae (AD), a mailbox account in Microsoft\u00ae Exchange\u2122, and assignment to the various distribution lists and groups required by the user's role in the organization.","Organizations tend to provision many different target systems. Some examples of target systems include human resources (HR) management systems, ERP (enterprise resource planning) systems, any number of Web portals and applications, various directories that control access to different types of resources such as servers and databases, phone systems, and so on. Although some steps, such as provisioning the phone system, might be unavoidably separate, others represent a frustrating redundancy because a single user's identity may need to be provisioned multiple times on multiple target systems with multiple processes to create the right access. If a company has already settled on AD as its authoritative directory, it can be frustratingly inefficient to also be required to provision user accounts across all the systems and applications that do not leverage the AD identity for access. Moreover, the provisioning process can continue as user's roles and authorizations change or as users leave the organization.","Every provisioning action consumes time, creates another point that may have to be audited for compliance requirements, and is another opportunity for human error. The result is significant time and money spent correcting provisioning errors\u2014assuming the errors are even discovered.","In certain embodiments, a method of provisioning a plurality of target systems with identity information includes (by a computer system having computer hardware) establishing communication with first and second target systems, where each of the first and second target systems can utilize user identity information to manage user accounts of a plurality of users, programmatically accessing a first application programming interface (API) of the first target system to identify first routines for managing first user identities in the first target system and first parameters associated with the first user identities in the first target system, and programmatically accessing a second application programming interface (API) of the second target system to identify second routines for managing second user identities in the second target system and second parameters associated with the second user identities in the second target system. The method can also include electronically generating a parameter mapping user interface having functionality for a user to graphically map one or more of the first and second parameters of the first and second target systems to one or more provisioning parameters of the provisioning system and automatically generating a first connector module having one or more first provisioning routines. The one or more first provisioning routines can access one or more of the first routines of the target system to set the one or more first parameters of the target system to one or more values of the one or more provisioning parameters. Further, the method can include automatically generating a second connector module having one or more second provisioning routines. The one or more second provisioning routines can access one or more of the second routines of the target system to set the one or more second parameters of the target system to one or more values of the one or more provisioning parameters. Moreover, the method can include executing the first and second connector module to thereby provision the first and second target systems with the user identity information of the plurality of users.","Various embodiments of a system for provisioning a target system with identity information can include a connector creation module having computer hardware. The connector creation module can at least: establish communication with a target system that can utilize user identity information to manage user accounts of a plurality of users. The connector creation module can also programmatically access an application programming interface (API) of the target system to identify routines for managing user identities in the target system and parameters associated with the user identities in the target system. Further, the connector creation module can electronically generate a parameter mapping user interface having functionality for a user to graphically map one or more of the parameters of the target system to one or more provisioning parameters of the provisioning system. The connector creation module may also automatically generate a connector module having one or more provisioning routines, where the one or more provisioning routines can access one or more of the routines of the target system to set the one or more parameters of the target system to one or more values of the one or more provisioning parameters. Moreover, the connector creation module can execute the connector module to thereby provision the target system with the user identity information of the plurality of users.","Furthermore, in some embodiments, non-transitory physical computer storage is provided having instructions stored thereon for implementing, in one or more processors, operations for provisioning a target system with identity information. The operations can include establishing communication with a target system that can utilize user identity information to manage user accounts of a plurality of users, programmatically accessing an application programming interface (API) of the target system to identify routines for managing user identities in the target system and parameters associated with the user identities in the target system, electronically generating a parameter mapping user interface having functionality for a user to graphically map one or more of the parameters of the target system to one or more provisioning parameters of the provisioning system, and automatically generating a connector module having one or more provisioning routines. The one or more provisioning routines can access one or more of the routines of the target system to set the one or more parameters of the target system to one or more values of the one or more provisioning parameters. Moreover, the operations can include executing the connector module to thereby provision the target system with the user identity information of the plurality of users.","The systems and methods described herein can be implemented by a computer system comprising computer hardware. The computer system may include one or more physical computing devices, which may be geographically dispersed or co-located.","Certain aspects, advantages and novel features of the inventions are described herein. It is to be understood that not necessarily all such advantages may be achieved in accordance with any particular embodiment of the inventions disclosed herein. Thus, the inventions disclosed herein may be embodied or carried out in a manner that achieves or selects one advantage or group of advantages as taught herein without necessarily achieving other advantages as may be taught or suggested herein.","One approach to provisioning multiple target systems is to synchronize the identities and provisioning activities across the entire range of target systems. In such cases, custom-coded connectors containing business logic, workflow, and\/or rules are built to automate and control the provisioning process. The advantage of the synchronization approach is that provisioning actions are automated in precisely the way the organization had designed them. The disadvantage is that these connectors are extremely expensive to build, take years to implement (during which time the requirements may have changed), are rigid and cannot dynamically adjust to organizational evolution, and do nothing to overcome the root of the provisioning problem\u2014too much complexity.","This disclosure describes systems and methods for automating or at least partially automating the creation of connectors for a provisioning system. In certain embodiments, a provisioning system includes a connector creation module that analyzes an application programming interface (API) of a target system. Based on this analysis, the provisioning system can automatically create a connector module that can communicate with the target system. The connector creator may also provide a user interface that enables users to customize the functionality of the connector module. For example, a user can specify which routines of the target system API will be called by the connector module, which user identity parameters of the target system will be updated, and so forth. Advantageously, in certain embodiments, the connector creation module can automatically generate code for the connector module that implements the user-specified functionality. The finished connector module can be executed to provision the target system.",{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 1","b":["100","102","110","102","110","102"]},"An identity management system  is provided for managing user identity information in the disparate systems . The identity management system  can include hardware and\/or software for managing this user identity information. In some implementations, the identity management system  stores a single set of identity information for each user  in a central user identity repository  and makes this single set of identity information available to each of the systems . Users  can therefore have consistent access to each of the systems . Some identity management features that the identity management system  can provide include single sign-on (SSO), which allows users  to log in to different systems  with the same credentials (or log in once for multiple systems ), managing of user roles (e.g., to authorize user access to various resources), compliance and auditing, provisioning, and optionally other features.","The provisioning aspects of the identity management system  are implemented by a provisioning system . The provisioning system  can provision user identity information to the systems , which can include inserting, updating, deleting, or otherwise managing user identity information with respect to the systems . For example, the provisioning system  can initially provide user identity information to the systems  when a user  joins an organization or otherwise needs new access to a given system . The provisioning system  can also update or modify existing user identity information in the systems . User identity information may be updated when user characteristics (such as roles) change when users  are promoted or otherwise assigned different responsibilities in an organization. For example, a newly-promoted manager may need a higher level of authorization to various resources or systems . User identity information can also change when users  work on new projects and need authorization to access a different set of systems or resources. The provisioning system  can also delete or disable user identity information from the systems  when users  no longer require access to them, such as when users change departments or leave the organization.","Advantageously, in certain embodiments, the provisioning system  can automate processes for provisioning user identity information with the various systems . Such functionality is described in greater detail with respect to , which illustrates a more detailed embodiment of a provisioning system  in the context of a computing environment .","In the computing environment  of , the provisioning system  is shown in communication with target systems . The target systems  are generalized examples of the systems  described above with respect to . Two target systems  are shown for illustrative purposes, although the provisioning systems  may communicate with many more target systems in other embodiments. The provisioning system  is also in communication with a central user identity repository . The central user identity repository  can include physical computer storage that stores user identity information. This user identity information can include user identity objects, identity-related parameters or attributes, data structures (such as tables or rows in tables), or the like. For example, the user identity objects can include user accounts, groups, containers or memberships of users in groups, credentials, permissions or access rights, roles, entitlements, users' personal information (such as phone number, address, etc.), and the like.","The provisioning system  can include hardware and\/or software for implementing various provisioning functions, including automatic connector creation (described in detail below). For example, the provisioning system  can include software that executes on one or more computing devices, such as one or more physical server computers. In implementations where the provisioning system  is implemented on multiple servers, these servers can be co-located or can be geographically separate (such as in separate data centers). In addition, the provisioning system  can be implemented in one or more virtual machines that execute on one or more physical servers.","As further illustrated, the provisioning system  and the target systems  communicate over a network , which can include a local area network (LAN), a wide area network (WAN), the Internet, or the like. For example, the network  can include an organization's private intranet or a combination of an intranet and the public Internet. Moreover, the target systems  are also shown in communication with user data repositories  that store user identity information specific to each of the target systems .","In the depicted embodiment, the provisioning system  includes a connector creation module  and various connector modules  (often referred to herein simply as \u201cconnectors\u201d). In order to provision one of the target systems , the connector creation module  can analyze the target system  and automatically build a connector  to the target system  based on this analysis. This automation is facilitated in certain embodiments by the target system  exposing an API , which may be accessed by the connector creation module . One example of an API  that the target systems  can expose is a web service API . The web service API  can include a schema or API description in the format of an XML file, JSON (Java Standard Object Notation) file, YAML file, or the like, accessible via the network . For example, the XML file can be a Web Services Description Language (WSDL) file accessible via the Simple Object Access Protocol (SOAP). However, other description languages or protocols may be used to access the schema of the API , including Windows Communication Foundation services, remote procedure calls (RPC), RESTful interfaces (e.g., over HTTP), and the like.","The schema file of the API  can include a description of routines (such as methods, functions, classes, etc.), objects, and\/or parameters that the target system  uses to insert, delete, and\/or update identity objects, among other functionality. For example, the description in the schema file can include a listing of method signatures that include parameters for calling the methods. The connector creation module  can read the schema file to gather information about the target system's API . The connector creation module  can use this information to automatically generate source code for the new connector  to the target system .","For example, the connector creation module  can use the API  to automatically generate a first portion of connector  code for communicating with the target system . The connector creation module  may also provide options for users to configure the functionality of the connector . For instance, the connector creation module  can expose a user interface for an administrator of the provisioning system  to configure this functionality (e.g., using an administrator system ). The user interface can include options for mapping the schema of the provisioning system  to the schema of the target system  by relating routines and\/or parameters of the provisioning system  to routines and\/or parameters of the target system . Once the mapping is completed, the connector creation module  can automatically generate a second portion of connector  code that reflects this mapping. The connector creation module  can then persist the connector  code to data storage (e.g., in the repository ) and\/or compile the connector  code. The connector  can be executed by the provisioning system  to insert, update, delete, or otherwise manage user identity information in the target systems , synchronizing user data amongst the target systems . The connector creation module  can therefore advantageously save development time, driving down the costs associated with provisioning.","In other embodiments, the connector creation module  creates the first communication portion of the connector  and the mapped portion at the same time, instead of in two distinct steps. More detailed connector creation embodiments are described below with respect to .","It should be noted that the administrator system  can include any type of computing device capable of executing one or more applications and\/or accessing network resources. In certain embodiments, the administrator system  includes a desktop, netbook, laptop, or tablet computer. In other embodiments, the administrator system  can include a smartphone, a workstation, a server, a PDA, or the like. The administrator system  can also include software for interacting with the connector creation module  and\/or provisioning system , such as browser software or other client software.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":["FIG. 3","FIG. 2","FIG. 1","FIGS. 4 through 11"],"b":["300","232","234","300","230","300","210","300","232","130","250","300","300"]},"At block , the connector creation module  accesses an API  of a target system . As described above, the connector creation module  can access the schema of the API using a web service call or other remote communications protocol. For ease of description, the remainder of this specification will describe connector creation in the context of web services. However, it should be understood that these features are non-limiting examples.","The connector creation module  can access the API schema automatically, for example, by scanning ports or other network addresses associated with the target system  to obtain the schema. Alternatively, the connector creation module  can access the API schema in response to direction from a user, such as an administrator. For example, referring to , a user interface  is shown that enables a user to provide API connectivity information to the connector creation module . In the user interface , fields ,  are provided for entering a web service network address (such as a URL\u2014Uniform Resource Locator) and WSDL file network address (e.g., URL). These fields ,  are populated in the depicted embodiment with network addresses for a \u201cService Now\u2122\u201d system. Service Now\u2122 is an IT helpdesk system used as an example target system  herein.","Also included are fields for entering credentials  for accessing the target system  and a connection check button . User selection of the connection check button  causes the connector creation module  to establish or attempt to establish a connection with the web service of the target system . An indication of a successful connection can be output to a user, as shown in a user interface  of  (output ). The connection check button  is optional in certain embodiments.","Referring again to , at block , the connector creation module  automatically generates a connector  having proxy code for accessing the target system's API . The proxy code can include a class or other routine(s) that facilitate communication with routines of the web service API . As will be described in more detail below, other routines of the connector  can invoke the routines of the proxy code to communicate with the web service API  over the network . An example user interface  in  depicts a confirmation of creation of the proxy code, along with a depiction of a portion of the proxy code . In one embodiment, the proxy code is generated automatically by invoking the WSDL.exe program provided by Microsoft\u00ae.","In block  of , the connector creation module  receives a user selection of a target system API  routine for which to create a corresponding connector  routine, script, or the like. The connector creation module  may, for instance, output a user interface that enables a user to choose from the available API  routines in the target system  obtained in block .  illustrates such an example user interface . In this user interface , several routines  are shown that were identified from the API  schema. These routines  include insert, update, and delete routines, among others, enabling creation, modification, and deletion of user identity data. A user selection of an \u201cinsert\u201d routine is shown in the depicted embodiment.","At block  of , the connector creation module  receives a user selection of provisioning system parameters to be mapped to parameters of the selected target system routine. Provisioning system parameters can include parameters or attributes of a class or routine that correspond to user identity information stored in the user identity repository  or . Some examples of provisioning system parameters or attributes include user credentials, user names (e.g., first and last name), user roles, permissions, entitlements, and the other attributes described above, among others. Mapping of these parameters allows changes to the provisioning system parameters to be propagated to the target system parameters. For example, populating a given provisioning system parameter with a certain value can cause, via the mapping, a connector to set the corresponding mapped parameter in the target system with the same value. The connector creation module  can output a graphical mapping user interface that enables a user to map the target system and provisioning system parameters together. An example of such a user interface is shown in .","Referring to , a graphical mapping user interface A is shown. In the user interface A, user interface controls  are provided for selecting an object class and associated calling routine that can use the proxy class to call the routine of the target system API  selected in block  (see ). The selected object class can be a class provided by the provisioning system. For instance, in this example, an object class  \u201cUnsAccount\u201d and subclass  \u201cServiceNow\u201d of the provisioning system ,  are selected. The class \u201cUnsAccount\u201d corresponds to general user account information. \u201cUns\u201d stands for unified namespace, and this namespace may include other classes that can be selected via the drop-down arrow . Some examples of other classes include a group class that can affect group characteristics in the target system, a container class that can affect container characteristics in the target system, and an account-in-group class that can affect user memberships in groups.","The subclass  \u201cServiceNow\u201d is a class that represents the example ServiceNow target system . A different target system class could instead be selected using a drop-down arrow . A routine  of this subclass  can be selected from the drop-down box  to create a custom routine. The selected routine  in this example is an insert routine . The routines  available for selection in the drop-down box  can depend on the class type. For some types of classes, such as account, group, or container classes, the available routines include insert, update, and delete. Other types of classes (such as the account-in-group membership class) may include add and delete routines. Other routines may also be available in different implementations. For purposes of illustration, the insert routine  is described in detail herein, although it should be understood that the features described with respect to the insert routine  can apply to other routines.","Upon user selection of the insert routine , the connector creation module  can access an insert routine template from computer storage. The insert routine template can include a portion of generic code that may be used for any insert routine . This generic code can include, for example, references to header files or libraries to be included, programming interfaces, debugging parameters, constructors, destructors, programming language keywords, and the like. The insert routine  template can then be customized via parameter mappings. Such mappings can cause the insert routine  to invoke a corresponding insert routine of the proxy class, which in turn invokes the corresponding routine of the target system  to insert or set parameters of the target system . A return type  of the insert routine  can also be specified.","A user can graphically map parameters  of the proxy class (corresponding to parameters of the target system routine) to parameters of the insert routine . This graphical mapping can cause the connector creation module  to populate the insert routine  template with custom code for the insert routine . This code is shown as connector code , which script code includes both template code and custom code.","Parameter mapping is shown in more detail in , which includes a more detailed view of the same user interface B as in . Parameters  of the proxy class corresponding to the target system routine are shown on the left of the user interface B. In the example embodiment shown, these parameters include such attributes as roles, schedule, address information (state, street, zip), user name, password, and the like. One or more of these parameters  can be mapped upon user selection to parameters or attributes of the class ,  (UnsAccount). Selection of the UnsAccount class  causes the user interface B to output a dropdown box in the depicted embodiment, which includes parameters  of the class . For example, a user can select a \u201cfirst name\u201d parameter from the class  to map to the corresponding \u201cuser name\u201d parameter of the target system routine.","Referring again to , at block , upon user selection of one or more class  parameters to map one or more proxy class parameters , the connector creation module  can automatically insert custom code in the insert routine template to produce the connector code . The connector creation module  can use reflection techniques to obtain the names of the proxy class parameters (and optionally return values) at runtime. With these names, the connector creation module  can use string combination or concatenation techniques to construct code that maps the parameters. For example, a line of code that maps the proxy class \u201cfirst_name\u201d parameter to a \u201cFirstName\u201d parameter of the provisioning system is shown as \u201cinsertl.first_name=dbsUnsAccount.GetValue(\u201cFirstName\u201d) . . . \u201d etc.","In operation, the connector code  can create an instance of the web service proxy class, map the defined parameters, and call the selected method of the proxy class. Calling this method with the selected parameters can cause the proxy class to invoke the web service to populate the target system with the selected parameters. As shown in a user interface  of , the connector code  can be saved in a database or other data store. Options  for compiling the connector code  are provided in a user interface  of .","Referring again to , the newly-created connector module  is executed by one or more processors to thereby provision the target system  at block . The connector module  can be executed in response to user request, on an automatic job schedule, or in response to request by the target system for updated identity information. The connector module  can be executed multiple times, for example, once for each user to insert the identity of each user in the target system . The connector creation module  may periodically access the target system  API  to determine whether any changes to the API's  schema have been made. If any changes have been made, the connector creation module  can adjust the settings of the connector module  accordingly.","Many other variations than those described herein will be apparent from this disclosure. For example, depending on the embodiment, certain acts, events, or functions of any of the algorithms described herein can be performed in a different sequence, can be added, merged, or left out all together (e.g., not all described acts or events are necessary for the practice of the algorithms). Moreover, in certain embodiments, acts or events can be performed concurrently, e.g., through multi-threaded processing, interrupt processing, or multiple processors or processor cores or on other parallel architectures, rather than sequentially. In addition, different tasks or processes can be performed by different machines and\/or computing systems that can function together.","The various illustrative logical blocks, modules, and algorithm steps described in connection with the embodiments disclosed herein can be implemented as electronic hardware, computer software, or combinations of both. To clearly illustrate this interchangeability of hardware and software, various illustrative components, blocks, modules, and steps have been described above generally in terms of their functionality. Whether such functionality is implemented as hardware or software depends upon the particular application and design constraints imposed on the overall system. For example, the vehicle management system  or  can be implemented by one or more computer systems or by a computer system including one or more processors. The described functionality can be implemented in varying ways for each particular application, but such implementation decisions should not be interpreted as causing a departure from the scope of the disclosure.","The various illustrative logical blocks and modules described in connection with the embodiments disclosed herein can be implemented or performed by a machine, such as a general purpose processor, a digital signal processor (DSP), an application specific integrated circuit (ASIC), a field programmable gate array (FPGA) or other programmable logic device, discrete gate or transistor logic, discrete hardware components, or any combination thereof designed to perform the functions described herein. A general purpose processor can be a microprocessor, but in the alternative, the processor can be a controller, microcontroller, or state machine, combinations of the same, or the like. A processor can also be implemented as a combination of computing devices, e.g., a combination of a DSP and a microprocessor, a plurality of microprocessors, one or more microprocessors in conjunction with a DSP core, or any other such configuration. A computing environment can include any type of computer system, including, but not limited to, a computer system based on a microprocessor, a mainframe computer, a digital signal processor, a portable computing device, a personal organizer, a device controller, and a computational engine within an appliance, to name a few.","The steps of a method, process, or algorithm described in connection with the embodiments disclosed herein can be embodied directly in hardware, in a software module executed by a processor, or in a combination of the two. A software module can reside in RAM memory, flash memory, ROM memory, EPROM memory, EEPROM memory, registers, hard disk, a removable disk, a CD-ROM, or any other form of non-transitory computer-readable storage medium, media, or physical computer storage known in the art. An exemplary storage medium can be coupled to the processor such that the processor can read information from, and write information to, the storage medium. In the alternative, the storage medium can be integral to the processor. The processor and the storage medium can reside in an ASIC. The ASIC can reside in a user terminal. In the alternative, the processor and the storage medium can reside as discrete components in a user terminal.","Conditional language used herein, such as, among others, \u201ccan,\u201d \u201cmight,\u201d \u201cmay,\u201d \u201ce.g.,\u201d and the like, unless specifically stated otherwise, or otherwise understood within the context as used, is generally intended to convey that certain embodiments include, while other embodiments do not include, certain features, elements and\/or states. Thus, such conditional language is not generally intended to imply that features, elements and\/or states are in any way required for one or more embodiments or that one or more embodiments necessarily include logic for deciding, with or without author input or prompting, whether these features, elements and\/or states are included or are to be performed in any particular embodiment. The terms \u201ccomprising,\u201d \u201cincluding,\u201d \u201chaving,\u201d and the like are synonymous and are used inclusively, in an open-ended fashion, and do not exclude additional elements, features, acts, operations, and so forth. Also, the term \u201cor\u201d is used in its inclusive sense (and not in its exclusive sense) so that when used, for example, to connect a list of elements, the term \u201cor\u201d means one, some, or all of the elements in the list. Moreover, conjunctive language such as the phrase \u201cat least one of X, Y and Z,\u201d unless specifically stated otherwise, is otherwise understood with the context as used in general to convey that an item, term, etc. may be either X, Y or Z. Thus, such conjunctive language is not generally intended to imply that certain embodiments require at least one of X, at least one of Y and at least one of Z to each be present.","While the above detailed description has shown, described, and pointed out novel features as applied to various embodiments, it will be understood that various omissions, substitutions, and changes in the form and details of the devices or algorithms illustrated can be made without departing from the spirit of the disclosure. As will be recognized, certain embodiments of the inventions described herein can be embodied within a form that does not provide all of the features and benefits set forth herein, as some features can be used or practiced separately from others."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The features of embodiments of the inventions disclosed herein are described below with reference to the drawings. Throughout the drawings, reference numbers are re-used to indicate correspondence between referenced elements. The drawings are provided to illustrate embodiments of the inventions described herein and not to limit the scope thereof.",{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIGS. 4 through 11"}]},"DETDESC":[{},{}]}
