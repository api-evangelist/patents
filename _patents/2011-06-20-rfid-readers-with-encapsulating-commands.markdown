---
title: RFID readers with encapsulating commands
abstract: Radio Frequency Identification (RFID) readers may transmit one or more encapsulated commands within the payload of an encapsulating command. An encapsulated command includes at least a command code and an instruction. A reader may instruct a tag to store the encapsulated command(s) or instruction(s) for later execution. A sequence of encapsulated commands may be contained within one encapsulating command or spread across multiple encapsulating commands. The sequence of encapsulated commands, or the sequence of instructions associated with the encapsulated commands, may form a program. The reader may cause the tag to execute the instructions or program upon receipt, upon a trigger event, serially or in parallel, and/or may cause the tag to modify the instructions or program by adjusting parameters. The reader may later instruct a tag to execute the instructions or program via another command which, in some cases, may be sent prior to tag singulation.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08698629&OS=08698629&RS=08698629
owner: Impinj, Inc.
number: 08698629
owner_city: Seattle
owner_country: US
publication_date: 20110620
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","BACKGROUND","BRIEF SUMMARY","DETAILED DESCRIPTION"],"p":["This application claims the benefit of U.S. Provisional Patent Application Ser. No. 61\/357,199 filed on Jun. 22, 2010, and is a continuation-in-part (CIP) of co-pending U.S. patent application Ser. No. 12\/035,393, filed Feb. 21, 2008, commonly assigned herewith. The disclosures of these patent applications are hereby incorporated by reference for all purposes.","Radio Frequency Identification (RFID) systems typically include RFID tags and RFID readers. RFID readers are also known as RFID reader\/writers or RFID interrogators. RFID systems can be used in many ways for locating and identifying objects to which the tags are attached. RFID systems are particularly useful in product-related and service-related industries for tracking objects being processed, inventoried, or handled. In such cases, an RFID tag is usually attached to an individual item, or to its package.","In principle, RFID techniques entail using an RFID reader to interrogate one or more RFID tags. The reader transmitting a Radio Frequency (RF) wave performs the interrogation. The RF wave is typically electromagnetic, at least in the far field. The RF wave can also be predominantly electric or magnetic in the near field.","A tag that senses the interrogating RF wave responds by transmitting back another RF wave. The tag generates the transmitted back RF wave either originally, or by reflecting back a portion of the interrogating RF wave in a process known as backscatter. Backscatter may take place in a number of ways.","The reflected-back RF wave may further encode data stored internally in the tag, such as a number. The response is demodulated and decoded by the reader, which thereby identifies, counts, or otherwise interacts with the associated item. The decoded data can denote a serial number, a price, a date, a destination, other attribute(s), any combination of attributes, and so on.","An RFID tag typically includes an antenna and an RFID integrated circuit (IC) including a radio section, a power management section, and frequently a logical section, a memory, or both. In some RFID tags the power management section employs an energy storage device, such as a battery. RFID tags with an energy storage device are known as active or battery-assisted tags. Advances in semiconductor technology have miniaturized the electronics so much that an RFID tag can be powered solely by the RF signal it receives. Such RFID tags do not include an energy storage device such as a battery, and are called passive tags. Regardless of the type, all tags typically store or buffer some energy temporarily in passive storage devices such as capacitors.","This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended as an aid in determining the scope of the claimed subject matter.","Embodiments are directed to enabling an RFID reader to transmit one or more commands encapsulated within the payload of an encapsulating command for tag storage and\/or execution, where both the encapsulated command(s) and the encapsulating command include at least a command-code portion and an instruction or payload portion. In some embodiments the encapsulating command can be a Select command of the Gen2 Specification (Class-1 Generation-2 UHF RFID Protocol for Communications at 860 MHz-960 MHz by EPCglobal, Inc., version 1.2.0, which is hereby incorporated in its entirety by reference). In other embodiments the encapsulating command can be another command of the Gen2 Specification, or an entirely new command, or a command associated with another standardized or custom communication protocol. Likewise, in some embodiments the encapsulated command(s) can be commands of the Gen2 Specification, or portions of command(s) of the Gen2 Specification, or new commands, or perhaps commands associated with another protocol entirely.","In some embodiments the payload of the encapsulating command contains one or more encapsulated command(s) that the tag stores in memory for later execution. In some embodiments the tag stores only the instruction portion of the encapsulated command(s). The tag may combine the encapsulated command(s), or the instruction portion of the encapsulated command(s), with other commands or instructions already known to or stored in the tag. The encapsulated commands may be contained in a single encapsulating command or spread across multiple encapsulating commands, and the instruction sequence may perform a single operation or multiple operations.","In some embodiments, a reader causes a tag to execute the instruction portion of a command encapsulated in the payload of the encapsulating command upon receipt. If there are multiple encapsulated commands then the tag may execute their instructions serially or in parallel, and may modify the instruction execution based on received and\/or stored parameters. In some embodiments, the reader causes the tag to store the encapsulated commands or the instruction portion of the encapsulated commands for later execution, for example upon receiving a further command or when triggered by a triggering event (such as a button push, a temperature change, a humidity change, a motion, an acceleration, or a myriad of other possible sensor inputs or triggers).","In some embodiments an instruction may implement a functionality of an existing command, such as the write functionality of a Gen2 Specification Write command or the lock functionality of a Gen2 Specification Lock command.","In some embodiments a reader may transmit a command known as a run command to a tag that instructs a tag to execute one or more programs. The tag may receive the run command prior to being singulated. The run command may include the one or more programs, or may specify one or more programs stored in tag memory, or a mix of both. The tag may have stored a program as a sequence of instructions received in response to a prior encapsulating command, or in response to another command, or may have had the instructions pre-programmed. In some embodiments the instructions of a stored program may include command codes, such as the write-command-code for a Write command, so the tag can easily determine the stored instruction is a write instruction.","These and other features and advantages will be apparent from a reading of the following detailed description and a review of the associated drawings. It is to be understood that both the foregoing general description and the following detailed description are explanatory only and are not restrictive of aspects as claimed.","In the following detailed description, references are made to the accompanying drawings that form a part hereof, and in which are shown by way of illustration specific embodiments or examples. These embodiments or examples may be combined, other aspects may be utilized, and structural changes may be made without departing from the spirit or scope of the present disclosure. The following detailed description is therefore not to be taken in a limiting sense, and the scope of the present invention is defined by the appended claims and their equivalents.","As used herein, an \u201cinstruction\u201d refers to a request to a tag to perform a single explicit action (e.g., write data into memory). A \u201cprogram\u201d refers to a request to a tag to perform a set or sequence of instructions (e.g., read a value from memory and, if the read value is less than a threshold then lock a memory word). \u201cProgrammable\u201d refers to instructions or programs that are changeable or replaceable. A \u201cmemory\u201d can be ROM, RAM, SRAM, DRAM, NVM, EEPROM, FLASH, Fuses, FRAM, or other data-storage devices known to those skilled in the art. Some memories, memory types, and memory portions may be writeable and some not. \u201cSingulation\u201d refers to choosing or isolating a single tag from a population of tags through one or more commands transmitted by a reader.","A \u201ccommand\u201d as used herein refers to a request to a tag to perform one or more actions, and includes one or more instructions preceded by a command code. As one example, \u201cSelect\u201d is a command of the Gen2 Specification whose command code is the bit string . A Select command selects a particular tag population based on user-defined criteria, enabling union (U), intersection (\u2229), and negation (\u02dc) based tag partitioning. An encapsulating command is a command that contains or encapsulates one or more other commands in its payload. An encapsulating command may further instruct a tag to execute instructions in tag memory, convey a parameter to a tag, specify an execution order for instructions, tell the tag to store one or more commands or instructions, trigger the execution of one or more instructions, or perform some other custom function. For example, a Custom Select Command is an example of an encapsulating command that is formed by encapsulating one or more other commands within the payload of a Select command of the Gen2 Specification. A run command is a command that indicates one or more programs for a tag to execute, either immediately or upon some trigger event. An encapsulating command may also be a run command, and vice-versa. Further, a run command may also be a Custom Select Command based on the Select command of the Gen2 Specification.","Finally, a \u201cQuery\u201d is a command of the Gen2 Specification that initiates an inventory round in which a reader singulates tags and one-at-a-time receives their EPCs. A reader terminates the inventory round by either sending a subsequent Query command (which also starts a new inventory round) or a Select command. After starting an inventory round, a reader may alternatively send QueryAdjust and QueryRep commands, which are variants of the Query command, to continue singulating tags. While the Query\/QueryAdj\/QueryRep commands are specific to the Gen2 Specification, other \u201cQuery-like\u201d commands for tag singulation (e.g., as may be introduced by the EPCglobal or other standards bodies or even proprietary protocols) may perform the same or analogous functions.",{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 1","b":["100","110","112","120","110","112","126","110","126"]},"Reader  and tag  exchange data via wave  and wave . In a session of such an exchange each encodes, modulates, and transmits data to the other, and each receives, demodulates, and decodes data from the other. The data can be modulated onto, and demodulated from, RF waveforms. The RF waveforms are typically in a suitable range of frequencies, such as those near 900 MHz, 2.4 GHz, and so on.","Encoding the data can be performed in a number of ways. For example, protocols are devised to communicate in terms of symbols, also called RFID symbols. A symbol for communicating can be a delimiter, a calibration symbol, and so on. Further symbols can be implemented for ultimately exchanging binary data, such as \u201c0\u201d and \u201c1\u201d, if that is desired. In turn, when the symbols are processed internally by reader  and tag , they can be equivalently considered and treated as numbers having corresponding values, and so on.","Tag  can be a passive tag, or an active or battery-assisted tag (i.e., having its own power source). Where tag  is a passive tag, it is powered from wave .",{"@attributes":{"id":"p-0044","num":"0043"},"figref":["FIG. 2","FIG. 1"],"b":["220","120","220"]},"Tag  is formed on a substantially planar inlay , which can be made in many ways known in the art. Tag  includes an electrical circuit which is preferably implemented as an integrated circuit (IC)  (also referred to as chip). IC  is arranged on inlay .","Tag  also includes an antenna for exchanging wireless signals with its environment. The antenna is usually flat and formed on inlay . IC  is electrically coupled to the antenna via suitable antenna connections (not shown in ).","The antenna may be made in a number of ways. In the example of , the antenna is made from two distinct antenna segments , which are shown here forming a dipole. Many other embodiments are possible, using any number of antenna segments. In some embodiments, an antenna can be made with even a single segment. Different points of the segment can be coupled to one or more of the antenna connections of IC . For example, the antenna can form a single loop, with its ends coupled to the terminals. It should be remembered that, when the single segment has more complex shapes, even a single segment could behave like multiple segments at the frequencies of RFID wireless communication.","In operation, a signal is received by the antenna and communicated to IC . IC  both harvests power, and responds if appropriate, based on the incoming signal and the IC's internal state. In order to respond by replying, IC  modulates the reflectance of the antenna, which generates backscatter  from wave  transmitted by the reader. Coupling together and uncoupling the antenna connections of IC  can modulate the antenna's reflectance, as can a variety of other means.","In the embodiment of , antenna segments  are separate from IC . In other embodiments, antenna segments may alternatively be formed on IC , and so on. Furthermore, an interface element may be used to couple the IC  to the antenna segments  (not shown in ).","The components of the RFID system of  may communicate with each other in any number of modes. One such mode is called full duplex. Another such mode is called half-duplex, and is described below.",{"@attributes":{"id":"p-0051","num":"0050"},"figref":["FIG. 3","FIG. 1","FIG. 2"],"b":["300","120","220"]},"RFID reader  and RFID tag  talk and listen to each other by taking turns. As seen on axis TIME, when reader  talks to tag  the communication session is designated as \u201cRT\u201d, and when tag  talks to reader  the communication session is designated as \u201cTR\u201d. Along the TIME axis, a sample RT communication session occurs during a time interval , and a following sample TR communication session occurs during a time interval . Of course interval  is typically of a different duration than interval \u2014here the durations are shown approximately equal only for purposes of illustration.","According to blocks  and , RFID reader  talks during interval , and listens during interval . According to blocks  and , RFID tag  listens while reader  talks (during interval ), and talks while reader  listens (during interval ).","In terms of actual technical behavior, during interval , reader  talks to tag  as follows. According to block , reader  transmits wave , which was first described in . At the same time, according to block , tag  receives wave  and processes it, to extract data and so on. Meanwhile, according to block , tag  does not backscatter with its antenna, and according to block , reader  has no wave to receive from tag .","During interval , tag  talks to reader  as follows. According to block , reader  transmits a Continuous Wave (CW), which can be thought of as a carrier signal that ideally encodes no information. As discussed before, this carrier signal serves both to be harvested by tag  for its own internal power needs, and also as a wave that tag  can backscatter. Indeed, during interval , according to block , tag  does not receive a signal for processing. Instead, according to block , tag  modulates the CW emitted according to block , so as to generate backscatter wave . Concurrently, according to block , reader  receives backscatter wave  and processes it.",{"@attributes":{"id":"p-0056","num":"0055"},"figref":["FIG. 4","FIG. 1","FIG. 1"],"b":["400","400","410","470","410","470","110","410","470","110","400","410"]},"Local block  is responsible for communicating with the tags. Local block  includes a block  of an antenna and a driver of the antenna for communicating with the tags. Some readers, like that shown in local block , contain a single antenna and driver. Some readers contain multiple antennas and drivers and a method to switch signals among them, including sometimes using different antennas for transmitting and for receiving. And some readers contain multiple antennas and drivers that can operate simultaneously. A demodulator\/decoder block  demodulates and decodes backscattered waves received from the tags via antenna\/driver block . Modulator\/encoder block  encodes and modulates an RF wave that is to be transmitted to the tags via antenna\/driver block .","Local block  additionally includes an optional local processor . Local processor  may be implemented in any number of ways known in the art. Such ways include, by way of examples and not of limitation, digital and\/or analog processors such as microprocessors and digital-signal processors (DSPs); controllers such as microcontrollers; software running in a machine such as a general purpose computer; programmable circuits such as Field Programmable Gate Arrays (FPGAs), Field-Programmable Analog Arrays (FPAAs), Programmable Logic Devices (PLDs), Application Specific Integrated Circuits (ASIC), any combination of one or more of these; and so on. In some cases, some or all of the decoding function in block , the encoding function in block , or both, may be performed instead by local processor . In some cases local processor  may implement commands that include one or more instructions to be stored in tag memories; in some cases one or more of these functions can be distributed among other blocks such as encoding block , or may be entirely incorporated in another block.","Local block  additionally includes an optional local memory . Local memory  may be implemented in any number of ways known in the art. Such ways include, by way of examples and not of limitation, nonvolatile memories (NVM), read-only memories (ROM), random access memories (RAM), any combination of one or more of these, and so on. These memories can be implemented separately from local processor , or in a single chip with local processor , with or without other components. Local memory , if provided, can store programs for local processor  to run, if needed.","In some embodiments, local memory  stores data read from tags, or data to be written to tags, such as Electronic Product Codes (EPCs), Tag Identifiers (TIDs) and other data. Local memory  can also include reference data that is to be compared to the EPC codes, instructions and\/or rules for how to encode commands for the tags, modes for controlling antenna , instructions and order of instructions to be sent to the tags, and so on. In some of these embodiments, local memory  is provided as a database.","Some components of local block  typically treat the data as analog, such as the antenna\/driver block . Other components such as local memory  typically treat the data as digital. At some point there is a conversion between analog and digital. Based on where this conversion occurs, a reader may be characterized as \u201canalog\u201d or \u201cdigital\u201d, but most readers contain a mix of analog and digital functionality.","If remote components  are indeed provided, they are coupled to local block  via an electronic communications network . Network  can be a Local Area Network (LAN), a Metropolitan Area Network (MAN), a Wide Area Network (WAN), a network of networks such as the internet, or a mere local communication link, such as a USB, PCI, and so on. In turn, local block  then includes a local network connection  for communicating with communications network . Communications on the network can be secure, such as if they are encrypted or physically protected, or insecure if they are not encrypted or otherwise protected.","There can be one or more remote component(s) . If more than one, they can be located at the same location, or in different locations. They can access each other and local block  via communications network , or via other similar networks, and so on. Accordingly, remote component(s)  can use respective remote network connections. Only one such remote network connection  is shown, which is similar to local network connection , etc.","Remote component(s)  can also include a remote processor . Remote processor  can be made in any way known in the art, such as was described with reference to local processor . Remote processor  may also implement commands with one or more instructions to be stored and subsequently executed in tags, similar to local processor .","Remote component(s)  can also include a remote memory . Remote memory  can be made in any way known in the art, such as was described with reference to local memory . Remote memory  may include a local database, and a remote database of a Standards Organization, such as one that can reference EPCs. Remote memory  may also contain information associated with command, tag profiles, instructions, instruction parameters, or the like, similar to local memory .","Of the above-described elements, it may be advantageous to consider a combination of these components, designated as operational processing block . Operational processing block  includes those components that are provided of the following: local processor , remote processor , local network connection , remote network connection , and by extension an applicable portion of communications network  that links remote network connection  with local network connection . The portion can be dynamically changeable, etc. In addition, operational processing block  can receive and decode RF waves received via antenna , and cause antenna  to transmit RF waves according to what it has processed.","Operational processing block  includes either local processor , or remote processor , or both. If both are provided, remote processor  can be made such that it operates in a way complementary with that of local processor . In fact, the two can cooperate. It will be appreciated that operational processing block , as defined this way, is in communication with both local memory  and remote memory , if both are present.","Accordingly, operational processing block  is location independent, in that its functions can be implemented either by local processor , or by remote processor , or by a combination of both. Some of these functions are preferably implemented by local processor , and some by remote processor . Operational processing block  accesses local memory , or remote memory , or both for storing and\/or retrieving data.","RFID reader system  operates by operational processing block  generating communications for RFID tags. These communications are ultimately transmitted by antenna block , with modulator\/encoder block  encoding and modulating the information on an RF wave. Then data is received from the tags via antenna block , demodulated and decoded by demodulator\/decoder block , and processed by processing operational processing block .","Embodiments of an RFID reader system can be implemented as hardware, software, firmware, or any combination. It is advantageous to consider such a system as subdivided into components or modules. A person skilled in the art will recognize that some of these components or modules can be implemented as hardware, some as software, some as firmware, and some as a combination. An example of such a subdivision is now described, together with the RFID tag as an additional module.",{"@attributes":{"id":"p-0071","num":"0070"},"figref":"FIG. 5","b":["500","500"]},"An RFID tag  is considered here as a module by itself. RFID tag  conducts a wireless communication  with the remainder, via the air interface . It is noteworthy that air interface  is really only a boundary, in that signals or data that pass through it are not intended to be transformed from one thing to another. Specifications as to how readers and tags are to communicate with each other, for example the Gen2 Specification, also properly characterize that boundary as an interface.","RFID system  includes one or more reader antennas , and an RF front-end module  for interfacing with reader antenna(s) . These can be made as described above.","RFID system  also includes a signal-processing module . In one embodiment, signal-processing module  exchanges waveforms with RF front-end module .","RFID system  also includes a physical-driver module , which is also known as data-link module. In some embodiments physical-driver module  exchanges bits with signal-processing module . Physical-driver module  can be the stage associated with the framing of data.","RFID system  additionally includes a media access control module , which is also known as MAC layer module. In one embodiment, MAC layer module  exchanges packets of bits with physical driver module . MAC layer module  can make decisions for sharing the medium of wireless communication, which in this case is the air interface.","RFID system  moreover includes an application-programming library-module . This module  can include application programming interfaces (APIs), other objects, etc.","All of these RFID system functionalities can be supported by one or more processors. One of these processors can be considered a host processor. Such a host processor might include a host operating system (OS) and\/or central processing unit (CPU), as in module . In some embodiments, the processor is not considered as a separate module, but one that includes some of the above-mentioned modules of RFID system . In some embodiments the one or more processors may perform operations associated with implementing commands carrying one or more instructions to be stored and subsequently executed by tags prior to a tag being singulated.","User interface module  may be coupled to application-programming-library module , for accessing the APIs. User interface module  can be manual, automatic, or both. It can be supported by the host OS\/CPU module  mentioned above, or by a separate processor, etc.","It will be observed that the modules of RFID system  form a chain. Adjacent modules in the chain can be coupled by appropriate instrumentalities for exchanging signals. These instrumentalities include conductors, buses, interfaces, and so on. These instrumentalities can be local, e.g. to connect modules that are physically close to each other, or over a network, for remote communication.","The chain is used in one direction for transmitting RFID waveforms and in the other direction for receiving RFID waveforms. In transmitting mode, waveform initiation can be in any one of the modules. Ultimately, signals are routed to reader antenna(s)  to be transmitted as wireless waves. In receiving mode, reader antenna(s)  receives wireless waves, which are in turn processed successively by the various modules in the chain. Processing can terminate in any one of the modules.","The architecture of RFID system  is presented for purposes of explanation, and not of limitation. Its particular subdivision into modules need not be followed for creating embodiments. Furthermore, the features of the present disclosure can be performed either within a single one of the modules, or by a combination of them.","Often, for the sake of convenience only, it is desirable to implement and describe a program as software. The software can be unitary, or thought in terms of various interconnected distinct software modules.",{"@attributes":{"id":"p-0084","num":"0083"},"figref":"FIG. 6","b":["600","600","640"]},"More particularly, utility  may cause a tag to store one or more received instructions in its memory, execute the instructions in response to a subsequent command or trigger event, and respond differently to a reader command based on results generated by executing the instructions.","Architecture  additionally includes an interface converter  and an agent . Embodiments also include methods of operation of interface converter . Interface converter  enables agent  to control utility . Interface converter  is so named because it performs a conversion, a change, as will be described in more detail below. Agent , interface converter , and utility  can be implemented in any way known in the art. For example, each can be implemented in hardware, middleware, firmware, software, or any combination thereof. In some embodiments, agent  is a human.","Between interface converter , agent  and utility  there are respective boundaries , . Boundaries ,  are properly called interfaces, in that they are pure boundaries, as is the above described air interface.","In addition, it is a sometimes informal usage to call the space between boundaries  and , which includes interface converter , an \u201cinterface\u201d . Further, it is common to designate this space with a double arrow as shown, with an understanding that operations take place within the arrow. So, although \u201cinterface\u201d  is located at a boundary between agent  and utility , it is not itself a pure boundary. Regardless, the usage of \u201cinterface\u201d  is so common for interface converter  that this document sometimes also refers to it as an interface. It is clear that embodiments of such an \u201cinterface\u201d  can be included in this invention, if they include an interface converter that converts or alters one type of transmission or data to another, as will be seen below.","Agent  can be one or more layers in an architecture. For example, agent  can be something that a programmer programs to. In alternative embodiments, where agent  is a human, interface converter  can include a screen, a keyboard, etc. An example is now described.",{"@attributes":{"id":"p-0090","num":"0089"},"figref":["FIG. 7","FIG. 6"],"b":["750","750","750","640","640","750","640","660","640"]},"Returning to , one way interface converter  can be implemented is as a software Application Programming Interface (API). This API can control or provide inputs to an underlying software library, and so on.","Communications can be made between agent , interface converter , and utility . Such communications can be a s input or can be converted, using appropriate protocols, etc. What is communicated can encode commands, data, etc. Such communications can include any one or a combination of the following: a high-down communication HDNT from agent  to interface converter ; a low-down communication LDNT from interface converter  to utility ; a low-up communication LUPT from utility  to interface converter ; and a high-up communication HUPT from interface converter  to agent . These communications can be spontaneous, or in response to another communication, or in response to an input or an interrupt, etc.","Commands are more usually included in communications HDNT and LDNT, for ultimately controlling utility . Controlling can be in a number of manners. One such manner can be to install utility , or just a feature of it. Such installing can be by spawning, downloading, etc. Other such manners can be to configure, enable, disable, or operate utility , or just a feature of it. These commands can be standalone, or can carry parameters, such as data, instructions to be stored by tags, etc. In some embodiments interface converter  can convert these commands to a format suitable for utility .","Data is more usually included in communications HUPT and LUPT. The data can inform as to success or failure of executing an operation. The data can also include tag data, which can be both codes read from tags and data about reading tags (such as time stamps, date stamps, etc.). In some embodiments interface converter  can convert the data to a format suitable for agent , including in some cases aggregating, filtering, merging, or otherwise altering the format or utility of the data.","It should be noted that what passes across a single pure boundary is unchanged (by the mere definition of what is a pure boundary). But what passes through interface converter  can be changed or not. More particularly, high-down communication HDNT can be being encoded similarly to, or differently from, low-down communication LDNT. In addition, low-up communication LUPT can be encoded similarly to, or differently from, high-up communication HUPT. When different, the difference can be attributed to interface converter , which performs a suitable change, or conversion, of one communication to another. The change, or conversion, performed by interface converter  is for exposing the functionality of utility  to agent , and vice versa. In some embodiments, a command is converted, but a parameter is passed along without being converted. Plus, what is not converted at one module may be converted at another. Such modules taken together can also form an interface converter according to embodiments.","Agent , interface converter , and utility  can be implemented as part of a reader, or as a different device. For being implemented as part of a reader,  suggests a scheme  where agent , interface converter , and utility  can be implemented in connection with respective reader modules that are suitable, depending on the requirements.","As mentioned previously, embodiments are directed to RFID readers transmitting encapsulating or run commands to RFID tags. Embodiments additionally include programs, and methods of operation of the programs. A program is generally defined as a group of steps or operations leading to a desired result, due to the nature of the elements in the steps and their sequence. A program is usually advantageously implemented as a sequence of steps or operations for a processor, such as the structures described above.","Performing the steps, instructions, or operations of a program requires manipulation of physical quantities. Usually, though not necessarily, these quantities may be transferred, combined, compared, and otherwise manipulated or processed according to the steps or instructions, and they may also be stored in a computer-readable medium. These quantities include, for example, electrical, magnetic, and electromagnetic charges or particles, states of matter, and in the more general case can include the states of any physical devices or elements. It is convenient at times, principally for reasons of common usage, to refer to information represented by the states of these quantities as bits, data bits, samples, values, symbols, characters, terms, numbers, or the like. It should be borne in mind, however, that all of these and similar terms are associated with the appropriate physical quantities, and that these terms are merely convenient labels applied to these physical quantities, individually or in groups.","Embodiments furthermore include storage media. Such media, individually or in combination with others, have stored thereon instructions of a program made according to the embodiments. A storage medium according to the embodiments is a computer-readable medium, such as a memory, and is read by a processor of the type mentioned above. If a memory, it can be implemented in a number of ways, such as Read Only Memory (ROM), Random Access Memory (RAM), etc., some of which are volatile and some non-volatile.","Even though it is said that the program may be stored in a computer-readable medium, it should be clear to a person skilled in the art that it need not be a single memory, or even a single machine. Various portions, modules or features of it may reside in separate memories, or even separate machines. The separate machines may be connected directly, or through a network such as a local access network (LAN) or a global network such as the Internet.","The same advances in semiconductor technology that have enabled a tag to be powered by an incoming RF signal also enable a tag to perform complex operations, such as determining whether the temperature or acceleration the tag is experiencing can damage the object to which the tag is attached. The tag typically performs such a complex operation by executing a sequence of instructions. It would be advantageous for a reader to be able to tell a population of tags to perform a sequence of instructions and then respond, or not respond, or perform some operation, based on the result.","However, in today's tags that conform to the Gen2 Specification, a reader cannot cause tags in a population to simultaneously execute an instruction sequence. Instead, the reader must first singulate (choose or isolate) a tag, and then send successive commands to the singulated tag to execute the instruction sequence, one command (i.e. one instruction) at a time. The reader then singulates another tag and sends the same successive commands.","For m tags and n operations, the above process requires the reader to perform m singulations and send m\u00d7n commands. The process can be slow and time consuming, because the reader must interact with each tag serially and must send each instruction to a tag one command at a time, and does not allow a reader to tell a population of tags to collectively execute a sequence of instructions in parallel. For readers with limited power sources or situations where time is limited (e.g., tags moving past the reader), this repetitive process may not even be practical. Furthermore, the process does not allow a reader to first tell the tags to perform a sequence of instructions and then decide whether to participate in subsequent communications with the reader based on a result of the instructions.","In embodiments described herein, a reader may address these issues by encapsulating one or more instructions in the payload of an encapsulating command. A tag, upon receiving an encapsulating command, may execute the encapsulated instructions, store the encapsulated instructions for later execution, or both. In some instances the encapsulating command may instruct a receiving tag to execute one or more instructions that are stored in tag memory, or to execute a combination of sent and stored instructions. In the case of multiple instructions, the encapsulating command may also be known as a run command and the multiple instructions as a program. Each encapsulated instruction may itself be a command, such as a write command that instructs a tag to write data to memory that a reader is able to send to a singulated tag but instead chooses to encapsulate within an encapsulating command. A reader may broadcast the encapsulating command to multiple tags simultaneously before beginning an inventory round. Thus, multiple tags can execute instruction sequences in parallel, which is faster than serially singulating and then serially instructing tags. The tag may, based on a result of the executed instruction(s) or program(s), determine whether to participate in a subsequent inventory round, modify a behavior during a subsequent inventory round, or store a result in a tag memory.","An encapsulating command according to some embodiments may contain parameters that specify how a tag should execute encapsulated and\/or stored instructions. For example, an encapsulating command may modify the execution order of stored instructions. When a tag receives the encapsulating command it executes the stored instructions in the modified order. In some embodiments, the tag may store the parameters. The encapsulating command may include indicators to those stored parameter(s), or the tag may itself determine when to apply the stored parameters.",{"@attributes":{"id":"p-0106","num":"0105"},"figref":"FIG. 9","b":["900","950"]},"Regular command  includes an optional preamble , a command code , an instruction , an optional handle , and an optional error-check code . Preamble  typically provides, among other things, an easily detected shape that facilitates reader-to-tag communications. Command code  denotes the command type, and instruction  contains the information necessary to execute the command. Handle  is a numerical handle that allows the reader to specify the particular tag, and error-check code  allows the tag to check the command for errors. Each of these fields is described in more detail in the Gen2 Specification. Examples of Gen2 Specification Write and Select commands and their fields are shown in .","The encapsulating command  also has an optional preamble , a command code , an optional handle , and an optional error-check code , each of which are similar to the corresponding fields of the regular command . However, in place of the instruction  the encapsulating command  has a payload , which encapsulates one or more other commands. For example, in , the payload  includes a first command  and a second command . The first command  includes command code 1 () and instruction 1 (), while the second command  includes command code 2 () and instruction 2 (). In some embodiments, payload  may indicate one or more instructions or programs stored in tag memory, for example by means of memory pointers to those instructions or programs. Commands in the payload  may specify or constitute one or more programs. Optionally, the payload  may also include one or more parameters associated with the execution of the encapsulating command  itself or of one or more of the commands in or indicated by the payload.","In some embodiments, at least part of the payload or the encapsulating command itself may be encrypted, electronically signed, combined with a message authentication code which authenticates the part of the payload or command that is encrypted, or otherwise secured, via a symmetric or asymmetric cryptographic algorithm or any other cryptographic scheme. In some embodiments an encapsulating command or an encapsulated instruction may include a message count parameter. In these embodiments, each message between a tag and a reader has an associated message count. As messages are passed, the message count included with each message increments sequentially (or in some other manner known to the reader and tag). An unexpected message count (e.g., a tag expects a message count of 4 but sees a message count of 5, or receives two messages, each with a message count of 4) may indicate that a rogue reader is attempting to insert itself into the communications.","As mentioned above, the normal Select command and the Write command of the Gen2 Specification provides examples of how a command carries an instruction.  shows a Write command whose command code is 11000011. The Membank, Pointer, and Data fields comprise the instruction, and instruct a tag to write Data at the address specified by Pointer in the memory bank specified by Membank. The command also contains a 16-bit handle and a 16-bit CRC for error checking.  shows a Select command of the Gen2 Specification that selects a subpopulation of tags for subsequent inventory, as described above.",{"@attributes":{"id":"p-0111","num":"0110"},"figref":["FIG. 10C","FIG. 10C"]},{"@attributes":{"id":"p-0112","num":"0111"},"figref":"FIG. 11"},"According to some embodiments, instructions 1 through k received in an encapsulating or run command may be stored in memory addresses  of tag memory . Processing block  of tag  may store and\/or execute those instructions upon reception. According to other embodiments, the command may include indicators of memory addresses\/locations in tag memory  where instructions are already stored. In these cases, processing block  may retrieve and execute the stored instructions based on the indicators in the received command.","In some embodiments, the tag may modify the instruction order based on parameters included in the encapsulating or run command, based on pre-programmed instructions in tag memory , and\/or based on one or more results of executing at least a portion of the instructions. Processing block  may store these results (e.g., ) in tag memory .",{"@attributes":{"id":"p-0115","num":"0114"},"figref":"FIG. 12","b":["1220","1206","1210","1202","1210"]},"In some embodiments, a tag may execute the instructions serially or sequentially. In other embodiments a tag may execute the instructions in parallel. The instructions may also be modified by one or more parameters. Thus, some tags may generate first results  in response to the command\/trigger event, while other tags in the same group generate second, different results  in response to the same command\/trigger event. Some or all of the tags may optionally store the generated results in their memory (). The difference in results may arise due to differences in the tags or in their stored memory values or external (such as sensor) data, in different modification of parameters associated with the stored instructions, or differences in instruction execution order. For example, some tags may be programmed at manufacture to use default values for certain parameters (or to execute instructions according to a default order). These tags may perform the same operations as other tags but perform the actual instructions in the operations using different parameter values and\/or in different orders\/sequences, thus generating different results. Because a tag's behavior (e.g., whether it responds to a reader command, whether it participates in an inventory round, how it operates during an inventory round, whether it stores a particular result) is affected by the results of its executed instructions\/programs, differing tag parameters in a population of otherwise similar tags can lead to divergent tag behavior.","In some embodiments, a tag may execute the instructions serially or sequentially. In other embodiments a tag may execute the instructions in parallel. The instructions may also be modified by one or more parameters. Thus, some tags may generate first results  in response to the command\/trigger event, while other tags in the same group generate second, different results  in response to the same command\/trigger event. Some or all of the tags may optionally store the generated results in their memory (). The difference in results may arise due to differences in the tags or in their stored memory values or external (such as sensor) data, in different modification of parameters associated with the stored instructions, or differences in instruction execution order. For example, some tags may be programmed at manufacture to use default values for certain parameters (or to execute instructions according to a default order). These tags may perform the same operations as other tags but perform the actual instructions in the operations using different parameter values and\/or in different orders\/sequences, thus generating different results. Because a tag's behavior (e.g., whether it responds to a reader command, whether it participates in an inventory round, how it operates during an inventory round, whether it stores a particular result, etc.) is affected by the results of its executed instructions\/programs, differing tag parameters in a population of otherwise similar tags can lead to divergent tag behavior.",{"@attributes":{"id":"p-0118","num":"0117"},"figref":"FIG. 13"},"As described in connection with , although a group of tags may receive the same instructions from a reader, some tags in the group may generate first results , while other tags in the same group may generate second, different results , with the tags optionally storing the generated results (). Subsequently, the group of tags may receive an encapsulating, run, or other command from the reader, or a Query or Query-like command that may cause the tags to respond to the reader. In some embodiments, some tags in the group may respond to the reader with different behavior () than other tags in the group. For example, tags may receive a selection command from a reader selecting tags for an inventory round, and may determine whether they participate in that inventory round by comparing stored results , , and\/or  with one or more fields in the selection command.","As an example scenario, consider a situation in which a reader is located in a temperature-controlled storage facility and monitoring the temperature of stored items. The reader is tasked with detecting items whose temperatures are outside a prescribed range. Each item is affixed with a tag with a temperature transducer. The reader issues an encapsulating or run command to the tags telling the tags to perform a temperature measurement, compare the measured temperature value to a threshold, and store the result in memory. The reader may then perform a subsequent inventory round, selecting only tags whose measured temperature values exceed the threshold. The reader may perform this selection by transmitting a Select command of the Gen2 Specification with a particular value in its Mask field, where the value matches the stored result of a tag whose measured temperature value exceeds the threshold. In response, only tags whose stored result matches the Mask field value (and therefore whose measured temperature values exceeded the threshold) will participate in the inventory round. Thus, the reader can identify tags (and items) whose temperatures are outside the prescribed range.",{"@attributes":{"id":"p-0121","num":"0120"},"figref":"FIG. 14"},"In some example implementations, the arrangement of a sequence of instructions stored in tag memory at manufacturing or in response to a command from a reader may be modified by subsequent command(s) from readers, causing the tags to behave differently and perform operations with potentially different results. For example, as shown in , instructions are stored in tag 1 with a first sequence (sequence 1, ), whereas instructions are stored in tag 2 with a second, different sequence (sequence 2, ). While the individual instructions stored in each tag may be the same, the differences in instruction sequence may cause the tags to generate different results upon instruction execution.","A first encapsulating or run command  transmitted by reader  causes tag 1 to modify the sequence of its instructions from sequence 1 to a new sequence (sequence 3), while leaving tag 2 (and its instruction sequence) unaffected. Thus, after the first command , tag 1 now has instructions in a sequence 3 () while tag 2 still has instructions in sequence 2 (). Subsequently, another reader  transmits a second command  that causes tags with instruction sequences 2, 3, or both to execute their stored instruction according to their respective sequences. Tag 2, with instruction sequence 2, performs its instructions in sequence 2 upon receiving command . Tag 1, which originally had its instruction sequence in sequence 1, also performs its instructions upon receiving command , but in sequence 3 instead of 1, because its instruction sequence was changed by the first command (). However, while the second command causes both tags to execute stored instructions\/programs, the differences in executed instruction sequence may lead to different results for each tag (). One or both tags may also store the generated results in their memories, and the reader may select tags based on the generated and stored results. In some embodiments, the programs may be a priori known programs, in which case the command(s) do not have to designate a memory location",{"@attributes":{"id":"p-0124","num":"0123"},"figref":["FIG. 15","FIG. 15"],"b":["1502","1508","1508","1510","1512","1510","1508","1510","1508","1512","1512","1514","1520","1512","1512"]},"Tag , upon receiving the encapsulating command , optionally stores the encapsulated instructions  and  in memory . In some embodiments, the tag stores the included instructions and their associated command codes  and  in tag memory, ordered as they were received in the payload . Optionally, the tag may strip the command codes from one or more of the included commands before storage, and\/or may store the included instructions in a different order. The tag can combine the received instructions with instruction(s) already stored in the tag memory  to form one or more programs. The tag can also combine the received instructions with programs already known by or stored in the tag. In some embodiments, commands or programs may be contained in one encapsulating command, or spread across multiple encapsulating commands. Upon receiving the encapsulating command , tag  may or may not transmit a reply to the reader.","The tag may then execute instructions  and , resulting in corresponding actions 1 () and 2 (). The tag may execute the instructions either immediately upon receiving the encapsulating command , upon receiving another command, or upon a trigger event. The trigger event may include, but is not limited to, a sensor or user interface input (e.g., if a sensor input is above a threshold, below a threshold, or within a particular range, where the threshold and\/or range can be predefined or dynamically determined, or can be a binary event such as a button push or switch actuation), a tag power condition (e.g., a tag power down, such as when a passive tag moves out of range of a reader, an active tag detects low power, a tag receives a command to power-down; a tag power up, such as when a passive tag moves into range of a reader; or when a tag detects a particular power level), or expiration of a tag timer (i.e., a timer located on a tag).","Embodiments also include methods. Some are methods performed by an RFID reader for causing the tags to store one or more instructions received from the reader to be executed later. These methods can be implemented in any number of ways, including using the structures described in this document. One such way is by machine operations, of devices of the type described in this document. Another way is for one or more of the individual operations to be performed by one or more human operators. These human operators need not be collocated with each other, but each can be with a machine that performs a portion of a program or operation.",{"@attributes":{"id":"p-0128","num":"0127"},"figref":"FIG. 16","b":["1600","1610","1600","1600","1620","1630"]},"Subsequently, the reader may optionally transmit another command to trigger tag execution of the transmitted instructions (step ). The tag(s) may also execute the instructions in response to a trigger event. The trigger event may include, but is not limited to, a sensor or user interface input (e.g., if a sensor input is above a threshold, below a threshold, or within a particular range, where the threshold and\/or range can be predefined or dynamically determined, or can be a binary event such as a button push or switch actuation), a tag power condition (e.g., a tag power down, such as when a passive tag moves out of range of a reader, an active tag detects low power, a tag receives a command to power-down; a tag power up, such as when a passive tag moves into range of a reader; or when a tag detects a particular power level), or expiration of a tag timer (i.e., a timer located on a tag). As described above, in some embodiments the trigger command or event is not necessary because the tag or tags execute the instruction(s) in response to the encapsulating command (step ).","Upon executing the instructions, the tags may generate results, which may differ depending on the order of the instructions and\/or parameter(s) associated with execution of the instructions, and may transmit the results to the reader or store the results in tag memory. In optional step , the reader may receive the tag-generated results, or may access stored results directly by, for example, reading the results from tag memory. The reader may also singulate a tag at step  between the tag receiving the trigger event and the reader receiving results from the tag or accessing the tag. In some embodiments, the tag(s) may encrypt the generated results before transmitting the results to the reader or storing them in tag memory. If so, the reader decrypts the results at optional step . The tags may respond differently to a subsequent reader command, such as a Query, depending on the results generated.",{"@attributes":{"id":"p-0131","num":"0130"},"figref":"FIG. 17","b":["1720","1730","1742","1744","1750","1710","1710","1730","1710","1750","1730","1730","1730"]},"An RFID reader according to embodiments may cause a tag to execute any number of programs stored in the tag's memory. In some embodiments, the reader may transmit a command indicating two or more of those programs in a predefined order and cause the tag to execute the indicated programs in the predefined order. Of course, not all stored programs have to be executed each time and not in the order of storage. A reader may instruct a tag may to perform any other combinations of serial or parallel execution of any number of programs with one or more run commands prior to tag singulation.",{"@attributes":{"id":"p-0133","num":"0132"},"figref":"FIG. 18","b":["1810","1820"]},"The reader may subsequently transmit a triggering command at optional step  to trigger tag execution of the transmitted programs. The tag(s) may also execute the programs in response to a trigger event. The trigger event may include, but is not limited to, a sensor or user interface input (e.g., if a sensor input is above a threshold, below a threshold, or within a particular range, where the threshold and\/or range can be predefined or dynamically determined, or can be a binary event such as a button push or switch actuation), a tag power condition (e.g., a tag power down, such as when a passive tag moves out of range of a reader, an active tag detects low power, a tag receives a command to power-down; a tag power up, such as when a passive tag moves into range of a reader; or when a tag detects a particular power level), or expiration of a tag timer (i.e., a timer located on a tag).","Following transmission of the run command at step , the reader may transmit a selection command at optional step  instructing the tags to modify a flag based on a result of the programs executed in response to the run command and\/or the one or more triggering events. Alternatively, the reader may transmit a Query-like command at optional step  to begin an inventory round based on the results of the executed programs. In some embodiments, not shown in , the reader may transmit a Query-like command following transmission of the selection command in optional step . In some embodiments the Query-like command may specify that only tags with a certain flag value participate in the inventory round initiated by the Query-like command. Thus, the reader may transmit a selection command to the tag and cause the tag to determine whether to participate in a subsequent inventory round is further based on a comparison of at least one field of the selection command to the stored result.",{"@attributes":{"id":"p-0136","num":"0135"},"figref":"FIG. 19","b":["1910","1920"]},"The reader may subsequently transmit a triggering command at optional step  to trigger tag execution of the specified programs. The tag(s) may also execute the programs in response to a trigger event. The trigger event may include, but is not limited to, a sensor or user interface input (e.g., if a sensor input is above a threshold, below a threshold, or within a particular range, where the threshold and\/or range can be predefined or dynamically determined, or can be a binary event such as a button push or switch actuation), a tag power condition (e.g., a tag power down, such as when a passive tag moves out of range of a reader, an active tag detects low power, a tag receives a command to power-down; a tag power up, such as when a passive tag moves into range of a reader; or when a tag detects a particular power level), or expiration of a tag timer (i.e., a timer located on a tag).","Following transmission of the run command at step , the reader may transmit a selection command at optional step  instructing the tags to modify a flag based on a result of the programs executed in response to the run command and\/or the one or more triggering events. Alternatively, the reader may transmit a Query-like command at optional step  to begin an inventory round based on the results of the executed programs. In some embodiments, not shown in , the reader may transmit a Query-like command following transmission of the selection command in optional step . In some embodiments the Query-like command may specify that only tags with a certain flag value participate in the inventory round initiated by the Query-like command.","The operations described in processes , , and  are for illustration purposes only. Causing tags to execute programmable instructions sent in a command prior to singulation, store programmable instructions for subsequent execution, and\/or execute multiple operations stored in tag memory prior to singulation may be performed employing additional or fewer operations and in different orders using the principles described herein. Of course, an order of the operations may be modified, some operations eliminated, or other operations added according to other embodiments.","The foregoing detailed description has set forth various embodiments of the devices and\/or processes via the use of block diagrams and\/or examples. Insofar as such block diagrams and\/or examples contain one or more functions and\/or aspects, it will be understood by those within the art that each function and\/or aspect within such block diagrams or examples may be implemented, according to embodiments formed, individually and\/or collectively, by a wide range of hardware, software, firmware, or virtually any combination thereof.","The present disclosure is not to be limited in terms of the particular embodiments described in this application, which are intended as illustrations of various aspects. Many modifications and variations can be made without departing from its spirit and scope, as will be apparent to those skilled in the art. Functionally equivalent methods and apparatuses within the scope of the disclosure, in addition to those enumerated herein, will be apparent to those skilled in the art from the foregoing descriptions. Such modifications and variations are intended to fall within the scope of the appended claims. The present disclosure is to be limited only by the terms of the appended claims, along with the full scope of equivalents to which such claims are entitled. It is to be understood that this disclosure is not limited to particular methods, configurations, antennas, transmission lines, and the like, which can, of course, vary. It is also to be understood that the terminology used herein is for the purpose of describing particular embodiments only, and is not intended to be limiting.","With respect to the use of substantially any plural and\/or singular terms herein, those having skill in the art can translate from the plural to the singular and\/or from the singular to the plural as is appropriate to the context and\/or application. The various singular\/plural permutations may be expressly set forth herein for sake of clarity.","It will be understood by those within the art that, in general, terms used herein, and especially in the appended claims (e.g., bodies of the appended claims) are generally intended as \u201copen\u201d terms (e.g., the term \u201cincluding\u201d should be interpreted as \u201cincluding but not limited to,\u201d the term \u201chaving\u201d should be interpreted as \u201chaving at least,\u201d the term \u201cincludes\u201d should be interpreted as \u201cincludes but is not limited to,\u201d etc.). It will be further understood that if a specific number of an introduced claim recitation is intended, such an intent will be explicitly recited in the claim, and in the absence of such recitation no such intent is present. For example, as an aid to understanding, the following appended claims may contain usage of the introductory phrases \u201cat least one\u201d and \u201cone or more\u201d to introduce claim recitations. However, the use of such phrases should not be construed to imply that the introduction of a claim recitation by the indefinite articles \u201ca\u201d or \u201can\u201d limits any particular claim containing such introduced claim recitation to embodiments containing only one such recitation, even when the same claim includes the introductory phrases \u201cone or more\u201d or \u201cat least one\u201d and indefinite articles such as \u201ca\u201d or \u201can\u201d (e.g., \u201ca\u201d and\/or \u201can\u201d should be interpreted to mean \u201cat least one\u201d or \u201cone or more\u201d); the same holds true for the use of definite articles used to introduce claim recitations. In addition, even if a specific number of an introduced claim recitation is explicitly recited, those skilled in the art will recognize that such recitation should be interpreted to mean at least the recited number (e.g., the bare recitation of \u201ctwo recitations,\u201d without other modifiers, means at least two recitations, or two or more recitations).","Furthermore, in those instances where a convention analogous to \u201cat least one of A, B, and C, etc.\u201d is used, in general such a construction is intended in the sense one having skill in the art would understand the convention (e.g., \u201ca system having at least one of A, B, and C\u201d would include but not be limited to systems that have A alone, B alone, C alone, A and B together, A and C together, B and C together, and\/or A, B, and C together, etc.). It will be further understood that virtually any disjunctive word and\/or phrase presenting two or more alternative terms, whether in the description, claims, or drawings, should be understood to contemplate the possibilities of including one of the terms, either of the terms, or both terms. For example, the phrase \u201cA or B\u201d will be understood to include the possibilities of \u201cA\u201d or \u201cB\u201d or \u201cA and B.\u201d","As will be understood by one skilled in the art, for any and all purposes, such as in terms of providing a written description, all ranges disclosed herein also encompass any and all possible subranges and combinations of subranges thereof. Any listed range can be easily recognized as sufficiently describing and enabling the same range being broken down into at least equal halves, thirds, quarters, fifths, tenths, etc. As a non-limiting example, each range discussed herein can be readily broken down into a lower third, middle third and upper third, etc. As will also be understood by one skilled in the art all language such as \u201cup to,\u201d \u201cat least,\u201d \u201cgreater than,\u201d \u201cless than,\u201d and the like include the number recited and refer to ranges which can be subsequently broken down into subranges as discussed above. Finally, as will be understood by one skilled in the art, a range includes each individual member."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The following Detailed Description proceeds with reference to the accompanying drawings, in which:",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 4","FIG. 1"]},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 7","FIG. 6"]},{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 8","FIG. 6","FIG. 5"]},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIGS. 10A-B"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 10C","FIG. 10B"]},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 19"}]},"DETDESC":[{},{}]}
