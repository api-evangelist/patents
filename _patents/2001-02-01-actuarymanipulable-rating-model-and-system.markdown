---
title: Actuary-manipulable rating model and system
abstract: Techniques have been developed whereby an actuary-manipulable rating model may be defined and transformed into executable form using automated techniques. By allowing business users to define, review and revise rating models using familiar methodologies and constructs (such as factor tables) and by providing an automated facility for transformation of the rating model into an efficient executable form, systems and techniques in accordance with some embodiments of the present invention facilitate rapid deployment and update of insurance product offerings.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08224672&OS=08224672&RS=08224672
owner: Versata Development Group, Inc.
number: 08224672
owner_city: Austin
owner_country: US
publication_date: 20010201
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DESCRIPTION OF THE PREFERRED EMBODIMENT(S)","EXAMPLE 1","Discrete Axis","EXAMPLE 2","Continuous Axis","EXAMPLE 3","Date Axis","EXAMPLE 4","Interpolation Axis","Other Embodiments"],"p":["1. Field of the Invention","The invention relates to automated rating systems and, more particularly, to techniques for transforming a human manipulable rating model into an executable representation thereof for preparation of quotes.","2. Description of the Related Art","In the insurance industry, rating is a sequence of calculations that translates the level of coverage provided by a particular policy into a dollar amount for the policy's premium. Rating calculations are based on the probability of events occurring. Typically, actuaries define a calculation sequence using statistical methods and census data about a group of individuals, such as all the individuals eligible for a specific insurance plan. Underwriters then use the sequences to evaluate risk, determining the rate and level of coverage for a particular plan. Product managers for an insurance company might also use a calculation sequence to evaluate the effect of market conditions. In order to run a calculation sequence for a particular insurance plan such as group life, the calculations need to include variables (for example, number of retirees) and standard adjustments (a number representing factors such as mortality rates and claims data) determined by the actuaries. When taken together, the calculation sequence, the variables, and the factor tables (or tables of adjustments) make up a rating model. An insurance company will typically have a rating model for each line of insurance it offers.","Unfortunately, current computational techniques generally require a high-level of programming expertise for creation and maintenance of a given rating model. In part because of this requirement, conventional rating systems are often maintained by an information technology department based on coding requests from actuaries or other business users. Cycle times for preparation of quotes or other rating results based on a new or revised rating model can vary from days to weeks. Using conventional approaches, computational times can be substantial, even for an existing rating model. As a result, existing approaches are generally inadequate for real-time quotes.","Accordingly, techniques have been developed whereby an actuary-manipulable rating model may be defined and transformed into executable form using automated techniques. By allowing business users to define, review and revise rating models using familiar methodologies and constructs (such as factor tables) and by providing an automated facility for transformation of the rating model into an efficient executable form, systems and techniques in accordance with some embodiments of the present invention facilitate rapid deployment and update of insurance product offerings.","In some realizations, portable code technologies such as that provided by Java\u2122-based environments (e.g., the Java programming language, Java compilers, and Java virtual machine execution environments) allow executable forms of a rating model in accordance with the present invention to execute on diverse systems ranging from mainframes to web servers to laptops to palm or handheld devices, all with consistent results. In some realizations, metadata encodings (such as those based on markup languages such as XML) facilitate definition of a rating model and transformation to executable form.","In some realizations, such rating models and automated transformation facilities may be employed to automate the underwriting process. In some realizations, binding level quotes may be provided to brokers, producers, third party systems or individual customers at speeds suitable for electronic commerce. For example, even life-by-life rating for large groups can be processed in a matter of seconds. Some realizations may advantageously separate carrier rates from factors and calculation methodologies of a given rating model.","The use of the same reference symbols in different drawings indicates similar or identical items.","The description that follows presents a set of techniques, systems, encodings and functional sequences associated with transformation of an insurance calculation base defined in a form suitable for manipulation by business users, e.g., actuaries, underwriters product managers, etc., to an executable form suitable for use in rating, pricing or otherwise evaluating an insurance product as against a profile of an insured (or potential insured), a population or risk pool. While some of the examples employed focus on risk factors, characteristics, computational approaches typical of auto and group life insurance calculation bases, based on the description herein, persons of ordinary skill in the art will appreciate a wide range of applications including applications to other insurance and insurance-like financial products such as annuities, variable insurance products, etc. Accordingly, terminology particular to a particular insurance line is used merely for illustration and should not be taken as limiting. Similarly, uses of particular encodings, including eXtensible Markup Language (XML) encodings, and Java\u2122 or object-oriented programming language constructs, are merely exemplary. In particular, the invention is not limited to any particular encodings, programming techniques or executable forms. Rather, based on the description herein, persons of ordinary skill in the art will appreciate a number of suitable variations. In some realizations, the illustrated techniques are used to supply an executable rating model component for integration with, and\/or invocation by, a user application or information service. In general, the techniques, systems, objects, functional sequences and data encodings described herein may be used in combination and\/or integrated with applications and\/or transaction processing systems.","In view of the above, and without limitation, the description that follows focuses on an exemplary environment in which insurance calculation bases are transformed to executable form. The description employs terminology particularly appropriate for certain insurance lines and software techniques. However, these and other embodiments will be appreciated by persons of ordinary skill in the art based on the description and may fall within the scope of the claims that follow.","Overview",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1","b":["110","120","130","110","110","111","110"]},"Whatever the particular encoding form, calculation base  defines variables, adjustments (e.g., in the form of factor tables) and calculation sequences appropriate to a given rating model. In some realizations, components of calculation base  (particularly, pre-existing factor tables from legacy systems) may be imported or loaded into a representation of calculation base .","Compiler  transforms a representation of calculation base  from user- or actuary-manipulable form to an intermediate form such as objects, methods and interfaces defined in accordance with the Java\u2122 programming language. See generally, Arnold & Gosling, 1996 by Sun Microsystems, Inc. In the illustration of , intermediate source form  includes separate java source files encoding methodologies , factor tables , an entry point  and metadata and methods (e.g., metadata ) descriptive of variables, factor tables and methodologies employed the rating model. In some realizations, compiler  may draw from object schema  for predefined objects, methods, data structures, interfaces, etc.","Compiler  transforms intermediate source form  to executable form as compiled rating model . The resulting compiled rating model  includes runtime data structures corresponding to variables and factor tables of the calculation base, initialization and access methods, and functional code (e.g., methodologies ) corresponding to calculation sequences of the calculation base. In addition, compiled rating model  includes predefined input, output and calculate interfaces, as well as methods that allow for runtime lookup of identifiers for runtime instances corresponding to variables, factor tables, calculation sequences or methodologies, etc. Using these facilities (which are described in greater detail below), an application or information service  of an execution environment  obtains runtime identifiers for objects of the compiled rating model  (see lookup ), sets values for certain objects (typically variables or overrides) using the input interface (see input ), initiates a computation in accordance with the rating model using the calculate interface (see invoke ), and retrieves results of the rating model computation (see output ). In this way, an application such as quote generator, web server, etc. may employ a compiled rating model  corresponding to an actuary-manipulable calculation base without detailed knowledge of the internals thereof.","Typically, compiler  includes any commercially available Java compiler (such as the jvc compiler, available from Microsoft Corporation), although other configurations are also possible. Indeed, while the illustration of  and much of the description that follows presumes a two-step compilation (e.g., by compilers  and ), some embodiments in accordance with the present invention may implement the techniques described herein without separate compilers. Similarly, other or additional steps, such as further compilation of machine independent Java byte codes to machine-specific object code, may be employed. In general, the two-step approach is presently preferred because it allows implementations to exploit the rich set of commercially-available tools for transforming Java source to executable form suitable for a wide variety of implementations ranging from mainframes to web servers to laptops to palm or handheld devices, all with consistent results.","While a Java-based intermediate form is presently preferred, persons of ordinary skill in the art will recognize, based on the description herein, a variety of suitable alternative intermediate forms. For example, other programming languages, scripting and execution environments (now or hereafter developed) may be employed. Nonetheless, the widespread adoption of the Java language, the general availability of tools, including compilers and execution environments (e.g., Java virtual machine implementations and Just In Time (JIT) compilers) makes Java an attractive implementation environment for the systems, techniques and program products described herein. Furthermore, the widespread adoption of the Java language makes Java-related terminology and object-oriented constructs a useful context for illustrating systems, constructs and techniques in accordance with the present invention. Accordingly, and without limitation, the description that follows presumes use of an XML-based encoding of an actuary-manipulable calculation base and Java-based intermediate source forms.","Building a Rating Model","To build a particular rating model (e.g., for a specific company and insurance plan), we define a calculation base. In general, the calculation base includes variables, factor tables and calculation sequences, each encoded using XML.  illustrates preparation of a calculation base (e.g., XML encoded calculation base ) in accordance with some embodiments of the present invention. In some realizations, a business user (e.g., an actuary, underwriter or product manager) defines rating variables, factor tables and calculation sequences using any of a variety of software environments, e.g., a text editor or a more specialize user interface, in which XML may be defined and\/or maintained in accordance with syntax defined by relevant Data Type Definitions (DTDs). In a given implementation, a business user may be constrained to define rating variables, factor tables and calculation sequences in accordance with applicable DTDs. Alternatively, unconstrained definitions may be validated against the applicable DTDs. In general, editing and\/or maintenance facilities are implementation dependent.","Typically, a calculation base is defined for each insurance product for which rating calculations are to be performed. For instance, if an insurer (or agent) sells long-term disability, short-term disability and group life insurance, three calculation bases could be defined. Alternatively, similarly situated insurance products, e.g., competing auto or life insurance products as offered on an online quote service, would typically be represented by separate product- and underwriter-specific calculation bases. In each case, an insurance product is defined using rating variables, factor tables and calculation sequences. In the description that follows, exemplary DTDs are used to specify suitable structural forms for definition of variables, factor tables and calculation sequences.","Rating Variables","Variables define the information used as values in rate calculations. One of the roles of rating variables is to specify the factors used in factor tables. In an exemplary realization, three types of rating variables are provided: discrete variables, continuous variables and date variables.","Discrete Variables: In one realization, discrete variables are defined and\/or maintained () in accordance with the following DTD:","<!ELEMENT DISCRETE_VAR (DISCRETE_VAR*)>","<!ATTLIST DISCRETE_VAR","name CDATA #REQUIRED","comment CDATA \u201c \u201d","id CDATA \u201c \u201d>","In some implementations discrete variables allow an actuary to declare variables with multiple layers, defining children to form a tree structure. For example, it is possible to use discrete variables to form a table that includes states as the top layer, and New York and New Jersey as children. Other uses may exploit multiple inheritance.","The following is XML declaring discrete variables for retiree information from census data:","<!--Get Retiree info from census-->","<DISCRETE_VAR name=\u201cStatus\u201d id=\u201cStatus\u201d>","<DISCRETE_VAR name=\u201cRetiree\u201d comment=\u201cfor Retiree Yes\u201d","id=\u201cRetiree\u201d\/>","<DISCRETE_VAR name=\u201cActive\u201d comment=\u201cfor Active Yes\u201d","id=\u201cActive\u201d\/>","<\/DISCRETE_VAR>","<!--Get Gender from census-->","<DISCRETE_VAR name=\u201cGender\u201d id=\u201cGender\u201d>","<DISCRETE_VAR name=\u201cMale\u201d comment=\u201cfor Male\u201d id=\u201cMale\u201d\/>","<DISCRETE_VAR name=\u201cFemale\u201d comment=\u201cfor Female\u201d id=\u201cFemale\u201d\/>","<\/DISCRETE_VAR>","The following XML declares a discrete variable for gender. Gender has two child variables, male and female.","<DISCRETE_VARIABLE name=\u201cgender\u201d>","<DISCRETE_VAR name=\u201cM\u201d\/>","<DISCRETE_VAR name=\u201cF\u201d\/>","<\/DISCRETE_VARIABLE>","In general, such XML code defines variable that can be set on the input and used in calculation sequences (described below).","Continuous Variables: Continuous variables identify information in ranges such as salary or age. When defining a continuous variable in XML, an actuary need not specify a particular salary or age, for example, but instead identifies the piece of information to use in a calculation. In one realization, continuous variables are defined and\/or maintained () in accordance with the following DTD:","<!ELEMENT CONTINUOUS_VAR EMPTY>","<!ATTLIST CONTINUOUS_VAR","name CDATA #REQUIRED","comment CDATA \u201c \u201d","id CDATA \u201c \u201d>","The following is XML declaring a continuous variable:","<!--Total Benefit Charges for all plans-->","<CONTINUOUS_VAR name=\u201cTotalBenefitChargesForAllPlans\u201d","id=\u201cTotalBenefitChargesForAllPlans\u201d\/>","This XML code defines a variable, TotalBenefitsChargesForAllPlans, which may be set on the input to a calculation and used in calculation sequences of the model.","Date Variables: Many calculations and adjustments used in calculating rates are date-dependent. For example, tables for tax adjustments vary by year. These variables are defined and\/or maintained () in accordance with the following DTD:","<!ELEMENT DATE_VAR EMPTY>","<!ATTLIST DATE_VAR","name CDATA #REQUIRED","comment CDATA \u201c \u201d","id CDATA \u201c \u201d>","This sample XML declares a date variable.","<DATE_VAR name=\u201cbirthdate\u201d id=\u201cbirthdate\u201d\/>","Factor Tables","A factor table is a multi-dimensional lookup table containing numerical adjustments. In general, a factor table can have any number of axes. However, two-dimensional factor tables (such as the factor table contents depicted in ) are illustrative. Typically, an adjustment is a numerical value based on characteristics and probabilities. In the context of insurance, actuaries determine the number used for the adjustment and included in a factor table. A common type of calculation is to multiply the amount of coverage provided by a policy by an adjustment found in a factor table. For example, a factor table might include adjustments based on age ranges and states of residence as illustrated in .","In some encodings, a factor table may include empty cells. In such an instance, no value would be found upon execution of a calculation step that references an empty cell of the factor table. Accordingly, some encodings may specify a default value for that cell. For instance, in the illustration of , the cell representing 30 to 40 year olds in New York is empty. Accordingly, a calculation step that references the cell corresponding to 30 to 40 year New York residents would instead use the default value of 0.95. Defaults values are convenient for indicating a value for the average or standard case. In some implementations, code generated to implement a factor table may resolve to the most specific, or closest matching, default. For instance, code corresponding to the factor table illustrated in , would resolve to a default of 0.96 for 20 to 30 year olds in a state other than NJ, NY or CT rather than the less specific default of 1.0 for an otherwise unspecified ages and state index.","In an illustrative realization, factor tables have an associated name, start date (optional), end date (optional), list of axes and list of cell values. In general, a calculation base may have more than one factor table of the same name. The factor table to be used is determined at run time based on correspondence of effectivity dates (start and end dates).","Factor Table Axes","As illustrated in , factor tables are defined in XML using runtime values of previously defined variables, e.g., date, continuous, or discrete variables, to index axes of the factor table. In some implementations, interpolation may be used with continuous variable. In general, factor tables are defined and\/or maintained () in accordance with the following DTD:",{"@attributes":{"id":"p-0043","num":"0042"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<!ELEMENT FACTOR_TABLE (START_DATE?, END_DATE?,"]},{"entry":[{},"(DISCRETE_AXIS|CONTINUOUS_AXIS|DATE_AXIS|"]},{"entry":[{},"INTERPOLATION_AXIS)+,"]},{"entry":[{},"\u2003(TABLE_CELL|CELL)*)> "]},{"entry":[{},"\u2003\u2003<!ATTLIST FACTOR_TABLE"]},{"entry":[{},"\u2003\u2003\u2003name CDATA #REQUIRED"]},{"entry":[{},"\u2003\u2003\u2003comment CDATA \u201c\u201d"]},{"entry":[{},"\u2003\u2003\u2003id CDATA \u201c\u201d>"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"A discrete axis is defined and\/or maintained (as part of factor table definition ) in accordance with the following DTD:","<!ELEMENT DISCRETE_AXIS (DEFAULT_COLUMN?)>","<!ATTLIST DISCRETE_AXIS\n\n","The following XML creates a portion of a table with one discrete axis:","<!--Basic Life Factor Tables-->","<FACTOR_TABLE name=\u201cActCABFactor\u201d id=\u201cActNPCABFactor\u201d>","<DISCRETE_AXIS id=\u201cActCAB_State_Axis\u201d\n\n","<TABLE_CELL>\n\n","<\/TABLE_CELL>","<TABLE_CELL>\n\n","<\/TABLE_CELL>","<TABLE_CELL>\n\n","<\/TABLE_CELL>","A continuous axis is defined and\/or maintained (as part of factor table definition ) in accordance with the following DTD:","<!ELEMENT CONTINUOUS_AXIS","(AXIS_VARIABLE?, CONTINUOUS_COLUMN+, DEFAULT_COLUMN?)>","<!ATTLIST CONTINUOUS_AXIS","name CDATA \u201c \u201d","id CDATA \u201c \u201d","overlaps_allowed (true|false) \u201cfalse\u201d>","<!ELEMENT CONTINUOUS_COLUMN (LOW?, HIGH?)>","<!ATTLIST CONTINUOUS_COLUMN","id CDATA #REQUIRED>","The following portion of a table includes a column of continuous variables:",{"@attributes":{"id":"p-0063","num":"0073"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<FACTOR_TABLE name=\u201ctblPricing\u201d id=\u201cFemaleManualRate\u201d>"]},{"entry":[{},"\u2003<CONTINUOUS_AXIS id=\u201cFemaleAge_Axis\u201d>"]},{"entry":[{},"\u2003\u2003<AXIS_VARIABLE variable=\u201cAge\u201d\/>"]},{"entry":[{},"\u2003\u2003<CONTINUOUS_COLUMN id=\u201cFemaleAgeCol1\u201d>"]},{"entry":[{},"\u2003\u2003\u2003<LOW value=\u201c0\u201d\/>"]},{"entry":[{},"\u2003\u2003\u2003<HIGH value=\u201c1\u201d\/>."]},{"entry":[{},"\u2003\u2003<\/CONTINUOUS_COLUMN>"]},{"entry":[{},"\u2003\u2003<CONTINUOUS_COLUMN id=\u201cFemaleAgeCol2\u201d>"]},{"entry":[{},"\u2003\u2003\u2003<LOW value=\u201c1\u201d\/>"]},{"entry":[{},"\u2003\u2003\u2003<HIGH value=\u201c2\u201d\/>"]},{"entry":[{},"\u2003\u2003<\/CONTINUOUS_COLUMN>"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"A date axis is defined and\/or maintained (as part of factor table definition ) in accordance with the following DTD:","<!ELEMENT DATE_AXIS","(AXIS_VARIABLE?, DATE_COLUMN+, DEFAULT_COLUMN?)>","<!ATTLIST DATE_AXIS","id CDATA \u201c \u201d","overlaps_allowed (true|false) \u201cfalse\u201d>","<!ELEMENT DATE_COLUMN (START_DATE?, END_DATE?)>","<!ATTLIST DATE_COLUMN","id CDATA #REQUIRED>","The following XML creates a table with both date and discrete axes:","<DATE_VAR name=\u201cbirthdate\u201d id=\u201cbirthdate\u201d>","<DATE_AXIS id=\u201cBirthYear_Axis\u201d>\n\n","variable=\u201cContractState\u201d\/>\n\n",{"@attributes":{"id":"p-0073","num":"0094"},"figref":"FIG. 4","b":"202"},"<!ELEMENT INTERPOLATION_AXIS","(AXIS_VARIABLE?, INTERPOLATION_COLUMN+)>","<!ATTLIST INTERPOLATION_AXIS","id CDATA \u201c \u201d>","<!ELEMENT INTERPOLATION_COLUMN EMPTY>","<!ATTLIST INTERPOLATION_COLUMN","value CDATA #REQUIRED","id CDATA #REQUIRED>","<!ELEMENT AXIS_VARIABLE EMPTY>","<!ATTLIST AXIS_VARIABLE","variable CDATA #REQUIRED","input_type CDATA \u201c \u201d>","<!ELEMENT DEFAULT_COLUMN EMPTY>","<!ATTLIST DEFAULT_COLUMN","id CDATA \u201c \u201d>.","Calculation Sequences","A calculation sequence provides a flexible way to calculate rates based on specific information and statistical probability. As with variables and factor tables, a calculation sequence is defined using XML. In one realization, a calculation sequence includes the following elements: a name, a start date (optional), an end date (optional) and a list of calculation steps. In general, a calculation sequence may have more than one calculation step of the same name. The particular calculation step used at run time is based on correspondence of effectivity dates, if any.","In an exemplary implementation, a particular calculation sequence may employ any of the following seven types of steps.\n\n","In an exemplary realization, the various types of calculation steps have common aspects or attributes. For example, each performs an operation on a value, typically, a value received from a previous step. Each provides a numeric result, which is typically used as the value for the next calculation step. In general, calculations may be nested by inserting a conditional step into a loop step. A more detailed description of these steps and their common elements follows.","Common Elements in Calculation Steps","In an exemplary representation, each calculation step includes the following elements or attributes:\n\n","As described above, a calculation sequence may include up to seven types of steps. A calculation step is defined and\/or maintained () in accordance with the following DTD:","<!ELEMENT METHODOLOGY (START_DATE?, END_DATE?,","(BASIC_STEP|METH_CALL_STEP|CONDITIONAL_STEP|LOOP_STEP|","AGGREGATION_STEP|WARNING_STEP|BEAN_STEP)+)>","<!ATTLIST METHODOLOGY\n\n","A basic step includes a set of adjustments, each having an associated condition and value pair. Conditions are tested (in order). If a condition is met, the corresponding value is evaluated. If the evaluation succeeds, the resulting value is used as the value of the basic step. If the condition does not hold or the evaluation of the value does not succeed, the next adjustment is tried. If no adjustment is found for which the respective condition holds and value evaluation succeeds, the result of the previous step is used unchanged as this step's result.","In general, a condition can be any predicate related to an input. For example, is an input variable equal to IL for Illinois? If it is, the condition evaluates to true and the implementing code resolved to the paired value. A basic step is defined and\/or maintained () in accordance with the following DTD:","<!ELEMENT BASIC_STEP (START_DATE?, END_DATE?, ADJUSTMENT*)>","<!ATTLIST BASIC_STEP\n\n","(OVERRIDE|PLUS|MINUS|TIMES|DIVIDE|EXP|MIN|MAX|PERCENT_INC|PERCENT_DEC|REM) \u201cOVERRIDE\u201d\n\n","(DO_NOT_ROUND|ROUND_UP|ROUND_DOWN|ROUND_NEAREST|ROUND_NEAREST_HALF|ROUND_NEAREST_QUARTER|ROUND_USE_PREFS)","\u201cDO_NOT_ROUND\u201d",{"@attributes":{"id":"p-0096","num":"0000"},"ul":{"@attributes":{"id":"ul0027","list-style":"none"},"li":{"@attributes":{"id":"ul0027-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0028","list-style":"none"},"li":["output (true|false) \u201cfalse\u201d","id CDATA \u201c \u201d>\n\n<!ELEMENT ADJUSTMENT (CONDITION?, VALUE)>\n"]}}}},"The following example includes XML encoding a basic step defined () in accordance with the above DTD.",{"@attributes":{"id":"p-0098","num":"0142"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<METHODOLOGY name = \u201cmyMeth\u201d input_type = \u201cplan\u201d>"]},{"entry":[{},"\u2003some steps..."]},{"entry":[{},"\u2003<LOOP_STEP foreach = \u201cperson\u201d>"]},{"entry":[{},"\u2003... some more steps at the person level..."]},{"entry":[{},"\u2003\u2003<BASIC_STEP>"]},{"entry":[{},"\u2003\u2003\u2003<ADJUSTMENT>"]},{"entry":[{},"\u2003\u2003\u2003\u2003<CONDITION>"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003<REQUIRED_VAR_TEST variable = \u201cIL\u201d input_type ="]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u201cplan\u201d\/>"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003<REQUIRED_VAR_TEST variable = \u201cM\u201d input_type ="]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u201cperson\u201d\/>"]},{"entry":[{},"\u2003\u2003\u2003\u2003<\/CONDITION>"]},{"entry":[{},"\u2003\u2003\u2003\u2003<VALUE>"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003<CONTINOUS_VAR_LOOKUP variable = \u201csalary\u201d\/>"]},{"entry":[{},"\u2003\u2003\u2003\u2003<\/VALUE>"]},{"entry":[{},"\u2003\u2003\u2003<\/ADJUSTMENT>"]},{"entry":[{},"\u2003\u2003<\/BASIC_STEP>"]},{"entry":[{},"\u2003<\/LOOP_STEP>"]},{"entry":[{},"<\/METHODOLOGY>"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":{}},"A methodology call step is similar to a function call in traditional programming languages. The methodology call step specifies a methodology to call, causing the calculation to switch to the chosen methodology. The value of the methodology call step is the value of the last step in the body of the selected methodology. A methodology call step is defined and\/or maintained () in accordance with the following DTD:","<!ELEMENT METH_CALL_STEP (START_DATE?, END_DATE?)>","<!ATTLIST METH_CALL_STEP\n\n","(OVERRIDE|PLUS|MINUS|TIMES|DIVIDE|EXP|MIN|MAX|PERCENT_INC|PERCENT_DEC|REM) \u201cOVERRIDE\u201d\n\n","(DO_NOT_ROUND|ROUND_UP|ROUND_DOWN|ROUND_NEAREST|ROUND_NEAREST_HALF|ROUND_NEAREST_QUARTER|ROUND_USE_PREFS) \u201cDO_NOT_ROUND\u201d\n\n","A conditional step is similar to an if-then-else construct in traditional programming languages. A condition is tested, and one or another sequence of steps is evaluated based on whether the condition is true or false. A conditional step is defined and\/or maintained () in accordance with the following DTD:","<!ELEMENT CONDITIONAL_STEP (START_DATE?, END_DATE?, CONDITION, IF_BRANCH?, ELSE_BRANCH?)>","<!ATTLIST CONDITIONAL_STEP\n\n","(OVERRIDE|PLUS|MINUS|TIMES|DIVIDE|EXP|MIN|MAX|PERCENT_INC|PERCENT_DEC|REM) \u201cOVERRIDE\u201d\n\n","(DO_NOT_ROUND|ROUND_UP|ROUND_DOWN|ROUND_NEAREST|ROUND_NEAREST_HALF|ROUND_NEAREST_QUARTER|ROUND_USE_PREFS) \u201cDO_NOT_ROUND\u201d\n\n","(BASIC_STEP|METH_CALL_STEP|CONDITIONAL_STEP|LOOP_STEP|AGGREGATION_STEP|WARNING_STEP|BEAN_STEP)*>","<!ELEMENT ELSE_BRANCH","(BASIC_STEP|METH_CALL_STEP|CONDITIONAL_STEP|LOOP_STEP|AGGREGATION_STEP|WARNING_STEP|BEAN_STEP)*>","Loop Step","Loop steps move through the child inputs of the top-level input and perform aggregations on the results. For example, if you have a hierarchy that represents a group life insurance policy, you may have children attached to it for each member of the policy. The loop step allows a calculation sequence to perform a sequence of steps on each child. The value of the group is the aggregate of last step results for each child. The results are aggregated according to the selected operator for the loop, such as sum, product, min or max. Conditional looping (for example, consider all of the women over 30 who smoke) is achieved by combining loop steps and conditional steps. In some realizations, loops may be declared as multi-threaded. If so, then rather than iterating sequentially over the children, a fixed number of threads will be spawned and the children divided among them. This process enables support for symmetric multi-processor systems.","In general, a loop step is defined and\/or maintained () in accordance with the following DTD:","<!ELEMENT LOOP_STEP","(START_DATE?, END_DATE?, (BASIC_STEP|METH_CALL_STEP|CONDITIONAL_STEP|LOOP_STEP|AGGREGATION_STEP|WARNING_STEP|BEAN_STEP)*)>","<!ATTLIST LOOP_STEP\n\n","(OVERRIDE|PLUS MINUS|TIMES|DIVIDE|EXP|MIN|MAX|PERCENT_INC|PERCENT_DEC|REM) \u201cOVERRIDE\u201d\n\n","(DO_NOT_ROUND|ROUND_UP|ROUND_DOWN|ROUND_NEAREST|ROUND_NEAREST_HALF|ROUND_NEAREST_QUARTER|ROUND_USE_PREFS) \u201cDO_NOT_ROUND\u201d\n\n","Aggregation steps may be defined in conjunction with loop steps to combine the results of calculations for a series of child inputs, for example all of the participants in a policy. This process is most useful in conjunction with conditional steps. For example, a calculation sequence may use an aggregation step to aggregate the sum of all the salaries for men over 50. An aggregation step is defined and\/or maintained () in accordance with the following DTD:",{"@attributes":{"id":"p-0116","num":"0187"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<!ELEMENT AGGREGATION_STEP"]},{"entry":[{},"(START_DATE?,END_DATE?,(GROUP_BY)*)>"]},{"entry":[{},"\u2003<!ATTLIST AGGREGATION_STEP"]},{"entry":[{},"\u2003\u2003name CDATA #REQUIRED"]},{"entry":[{},"\u2003\u2003comment CDATA \u201c\u201d"]},{"entry":[{},"\u2003\u2003operator"]},{"entry":[{},"(OVERRIDE|PLUS|MINUS|TIMES|DIVIDE|EXP|MIN|MAX|"]},{"entry":[{},"PERCENT_INC|PERCENT_DEC|REM) \u201cOVERRIDE\u201d"]},{"entry":[{},"\u2003\u2003aggregation_operator"]},{"entry":[{},"\u2003\u2003\u2003(SUM|PRODUCT|MIN|MAX|COUNT|AVERAGE) \u201cSUM\u201d"]},{"entry":[{},"\u2003\u2003target IDREF #REQUIRED"]},{"entry":[{},"\u2003\u2003loop_target IDREF #REQUIRED"]},{"entry":[{},"\u2003\u2003rounding_digits CDATA \u201c0\u201d"]},{"entry":[{},"\u2003\u2003rounding_mode"]},{"entry":[{},"(DO_NOT_ROUND|ROUND_UP|ROUND_DOWN|"]},{"entry":[{},"ROUND_NEAREST|ROUND_NEAREST_HALF|"]},{"entry":[{},"ROUND_NEAREST_QUARTER|ROUND_USE_PREFS) "]},{"entry":[{},"\u201cDO_NOT_ROUND\u201d"]},{"entry":[{},"\u2003\u2003output (true|false) \u201cfalse\u201d"]},{"entry":[{},"\u2003\u2003id CDATA \u201c\u201d>"]},{"entry":[{},"\u2003<!ELEMENT GROUP_BY EMPTY >"]},{"entry":[{},"\u2003<!ATTLIST GROUP_BY"]},{"entry":[{},"\u2003\u2002input_type CDATA #REQUIRED>"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":{}},"A warning step is similar to an exit construct in some programming languages, such as C or C++. When a calculation reaches an exit step, it has a condition that is tested. If the invert_condition flag is true and the condition holds, then an executing rating model stops the calculation and returns an error message. If the invert_condition is set to false, the rating model stops the calculation if the condition fails. Warning steps may be used for validation and support of automated underwriting. To use warning steps for automated underwriting, it is desirable to provide for automatic approval if no warnings are generated. A warning step is defined and\/or maintained () in accordance with the following DTD:","<!ELEMENT WARNING_STEP (START_DATE?, END_DATE?, CONDITION)>","<!ATTLIST WARNING_STEP","name CDATA #REQUIRED","comment CDATA \u201c \u201d","operator","(OVERRIDE|PLUS|MINUS|TIMES|DIVIDE|EXP|MIN|MAX|PERCENT_INC|PERCENT_DEC|REM) \u201cOVERRIDE\u201d","rounding_digits CDATA \u201c0\u201d","rounding_mode","(DO_NOT_ROUND|ROUND_UP|ROUND_DOWN|ROUND_NEAREST|ROUND_NEAREST_HALF|ROUND_NEAREST_QUARTER|ROUND_USE_PREFS) \u201cDO_NOT_ROUND\u201d","message CDATA \u201c \u201d","severity CDATA \u201c0\u201d","code CDATA \u201c0\u201d","output (true|false) \u201cfalse\u201d","invert_condition (true|false) \u201cfalse\u201d","is_fatal (true|false) \u201cfalse\u201d","id CDATA \u201c \u201d>","Compiling a Rating Model","Operation of compiler  is now described with reference to . In general, compiler design is well understood in the art, see generally, Appel, 1998 (describing lexical analysis, parsing techniques, semantic analysis, control flow analysis, register allocation, code generation techniques, etc.), and a description of conventional techniques for translating programming languages into executable code are not duplicated here. However, certain aspects of the design and operation of compiler  bear more detailed treatment.","In particular,  depicts preparation, from an XML-encoded calculation base, of Java\u2122 source files encoding a corresponding rating model and including runtime lookup methods and data structures in accordance with some embodiments of the present invention. In general, for each variable, factor table and methodology defined by calculation base , the corresponding XML representation is loaded () into memory. Compiler  associates an integer identifier with each variable, factor table and methodology. In addition, compiler  emits a Java source file implementing methods for runtime lookup of information about the variables, factor tables and methodologies and making such metadata available to client code.","Generation of Intermediate Source Files for Variables","In general, metadata source files (e.g., metadata lookup source files ) are emitted for each type of rating variable (e.g., discrete, continuous and data variables), for each factor table and for each methodology of the calculation base. Such metadata source files typically include one or more Java classes. The functionality implemented by such classes includes methods for obtaining the unique id associated with each variable, factor table and methodology (e.g., based on name lookup), methods for obtaining the name for a variable, factor table or methodology given it's unique id, and methods for returning an enumeration of variables, factor tables or methodologies defined by the calculation base.","The following metadata source, defined () by compiler  for continuous variables based on an exemplary calculation base, is illustrative.",{"@attributes":{"id":"p-0136","num":"0207"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"14pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},"import java.util.*;",{}]},{"entry":[{},{},"public final class ExampleContVarMeta implements",{}]},{"entry":[{},{},"java.io.Serializable",{}]},{"entry":[{},{},"{",{}]},{"entry":[{},{},"\u2003private static final Hashtable contVarTable =",{}]},{"entry":[{},{},"\u2003\u2003new Hashtable( );",{}]},{"entry":[{},{},"\u2003private static final Hashtable contVarNameTable =",{}]},{"entry":[{},{},"\u2003\u2003new Hashtable( );",{}]},{"entry":[{},{},"\u2003static private class Names0{",{}]},{"entry":[{},{},"\u2003\u2003static final String names[ ] = {",{}]},{"entry":[{},{},"\u2003\u2003\u2003\u201cAge\u201d, \u201clowAge\u201d, \u201chiAge\u201d, \u201cEarningsFactor\u201d,",{}]},{"entry":[{},{},"\u2003\u2003\u2003\u201cBasicAmt\u201d, \u201cCaseFlatAmt\u201d, \u201cCommissionFlatPct\u201d,",{}]},{"entry":[{},{},"\u2003\u2003\u2003\u201cCommissionFlatAmt\u201d, \u201cSalary\u201d, \u201cMAX\u201d, \u201cMIN\u201d,",{}]},{"entry":[{},{},"\u2003\u2003\u2003\u201cSIC_code\u201d, \u201cVolumeBasedOnSalary\u201d,",{}]},{"entry":[{},{},"\u2003\u2003\u2003\u201cStateAllocationFactor\u201d};",{}]},{"entry":[{},{},"\u2003};",{}]},{"entry":[{},{},"\u2003static private class Unids0{",{}]},{"entry":[{},{},"\u2003\u2003static final int unids[ ] = {",{}]},{"entry":[{},{},"\u2003\u2003\u20030, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13};",{}]},{"entry":[{},{},"\u2003};",{}]},{"entry":[{},{},"\u2003private static final int unids[ ] = new int[14];",{}]},{"entry":[{},{},"\u2003static",{}]},{"entry":[{},{},"\u2003{",{}]},{"entry":[{},{},"\u2003\u2003for(int i = 0;i<Names0.names.length; i++)",{}]},{"entry":[{},{},"\u2003\u2003{ ",{}]},{"entry":[{},{},"\u2003\u2003\u2003contVarTable.put(Names0.names[i],",{}]},{"entry":[{},{},"\u2003\u2003\u2003\u2003new Integer(Unids0.unids[i]));",{}]},{"entry":[{},{},"\u2003\u2003\u2003contVarNameTable.put(new",{}]},{"entry":[{},{},"\u2003\u2003\u2003\u2003Integer(Unids0.unids[i]),Names0.names[i]);",{}]},{"entry":[{},{},"\u2003\u2003}",{}]},{"entry":[{},{},"\u2003\u2003System.arraycopy(Unids0.unids, 0, unids,",{}]},{"entry":[{},{},"\u2003\u20030*1000,Unids0.unids.length );",{}]},{"entry":[{},{},"\u2003}",{}]},{"entry":[{},{},"\u2003public static int getUNIDForContinuousVariable(String",{}]},{"entry":[{},{},"\u2003\u2003var)",{}]},{"entry":[{},{},"\u2003{",{}]},{"entry":[{},{},"\u2003\u2003Integer val = (Integer)contVarTable.get(var);",{}]},{"entry":[{},{},"\u2003\u2003return ((val==null)?-1:val.intValue( ));",{}]},{"entry":[{},{},"\u2003}",{}]},{"entry":[{},{},"\u2003public static String getContinuousVariableForUNID(int",{}]},{"entry":[{},{},"\u2003\u2003UNID)",{}]},{"entry":[{},{},"\u2003{ ",{}]},{"entry":[{},{},"\u2003\u2003\u2003return (String)contVarNameTable.get(new",{}]},{"entry":[{},{},"\u2003\u2003\u2003\u2003Integer(UNID));",{}]},{"entry":[{},{},"\u2003}",{}]},{"entry":[{},{},"\u2003public static int[ ] getContinuousVariableUNIDS( )",{}]},{"entry":[{},{},"\u2003{",{}]},{"entry":[{},{},"\u2003\u2003\u2003int out[ ] = new int[unids.length];",{}]},{"entry":[{},{},"\u2003\u2003\u2003System.arraycopy(unids, 0, out, 0, out.length);",{}]},{"entry":[{},{},"\u2003\u2003\u2003return out;",{}]},{"entry":[{},{},"\u2003}",{}]},{"entry":[{},{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}}},"br":[{},{}],"b":["502","502","141"]},"Definition () of Java source for factor tables is similar. In addition to the objects and lookup methods illustrated above, the metadata source for factor tables further includes methods for returning the effective start date and end date of a given factor table. In addition, for each factor table, compiler  generates Java source representing the contents of the factor table. These contents are represented as one or more Java array structures, in row major order. Factor table cells that are empty are represented with a reserved, sentinel value. The following Java source, defined () by compiler  for a particular factor table based on an exemplary calculation base, is illustrative.",{"@attributes":{"id":"p-0138","num":"0209"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"14pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},"import java.util.Hashtable;",{}]},{"entry":[{},{},"public class ExampleTable0 implements",{}]},{"entry":[{},{},"com.trilogy.fs.ice.runtime.ITableLookup",{}]},{"entry":[{},{},"{",{}]},{"entry":[{},{},"\u2003public double lookup(String filename, Hashtable",{}]},{"entry":[{},{},"\u2003\u2003fileHandles, int offset){ return contents[offset];}",{}]},{"entry":[{},{},"\u2003static final public double contents[ ] = new double[22];",{}]},{"entry":[{},{},"\u2003public static class Contents0{",{}]},{"entry":[{},{},"\u2003\u2003public static final double contents[ ] = { 0.0,",{}]},{"entry":[{},{},"\u2003\u2003\u20031001.0, 5001.0, 10001.0, 15001.0, 20001.0,",{}]},{"entry":[{},{},"\u2003\u2003\u200325001.0, 30001.0, 50001.0, 60001.0, 70001.0,",{}]},{"entry":[{},{},"\u2003\u2003\u200375001.0, 100001.0, 150001.0, 200001.0, 250001.0,",{}]},{"entry":[{},{},"\u2003\u2003\u2003500001.0, 750001.0, 1000001.0, 2000001.0,",{}]},{"entry":[{},{},"\u2003\u2003\u20031.0000001E7, 2.0000001E7",{}]},{"entry":[{},{},"\u2003\u2003};",{}]},{"entry":[{},{},"\u2003};",{}]},{"entry":[{},{},"\u2003static",{}]},{"entry":[{},{},"\u2003{",{}]},{"entry":[{},{},"\u2003\u2003System.arraycopy(Contents0.contents, 0, contents,",{}]},{"entry":[{},{},"\u2003\u2003\u20030*1000,Contents0.contents.length );",{}]},{"entry":[{},{},"\u2003}",{}]},{"entry":[{},{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}}},"br":[{},{}],"b":["141","141"]},"Compiler  defines a Java source file implementing methods for runtime lookup of information about the methodologies and making such metadata available to client code. The functionality implemented includes methods for obtaining the unique id associated with each methodology (e.g., based on name lookup), for obtaining the name for a methodology given it's unique id, for returning an enumeration of methodologies defined by the calculation base, and for returning the effective start date and end date of a given methodology.","For each methodology, compiler  emits a Java source file representing the logic of the methodology. In some realizations, a pair of Java source files is emitted. One of these files includes the logic of the methodology including logging and run-time overrides, while the other includes the logic without those features enabled. The main class of either file includes a method, runMeth, which includes setup code to initialize the state of the calculation and code generated for the top-level layer of the methodology (see below).",{"@attributes":{"id":"p-0141","num":"0212"},"figref":"FIG. 6","b":"141"},"Analysis per Methodology","For each layer of a methodology, compiler  traverses the methodology and identifies () the set of discrete variables used for an input node associated with that layer. These discrete variables include those used by the calculation steps of the layer (or in a sublayer thereof) for Boolean tests or as indices for discrete axis lookups into factor tables. In this way, discrete variables on the input node need only be examined once, and all relevant tests and lookups can be performed in a single pass of the emitted code.","For each layer of a methodology, compiler  traverses the methodology to identify () the calculation steps in that layer that are targeted by other steps in the model. This is done so that the results of those steps can be extracted to a shared per-layer storage area. The steps may be targeted within the layer or in any sublayer. For each non-top-level layer of a methodology, compiler  traverses the methodology to identify () the calculation steps in that layer that are targeted for aggregation by other steps in the model. This is done so that aggregation storage areas may be efficiently managed.","Code Generation Per layer","Compiler  emits code () for the temporary Java variables for each layer. In general, each layer needs a variety of temporary holding variables to store its transient information. Temporary variables may include the value of the current step, the result of the current step, the result of the current step after rounding, the success of the current step, and others.","Using the results of the per methodology analysis described above, compiler  also emits code () allocating storage for the results of the targeted steps in each layer. For all the steps identified as targeted (see analysis, above), compiler  emits code to allocate temporary storage for results. In addition, compiler  emits code () allocating storage and creating temporary aggregation buckets for all of the applicable aggregations identified for that layer (see analysis, above). One aggregator bucket is created for each aggregation. Compiler  also emits code () for the discrete variable test and axis lookup calculations for the appropriate discrete variables for that layer (see analysis, above). When executed, the emitted code allocates storage space for all of the tests and axis lookups. Then, the emitted code loops over the discrete variables on the calculation input tree node for the layer and sets the values for the allocated storage space.","Code Generation Per Step","Compiler  also emits code () corresponding the individual calculation steps of a methodology. In general, any of a variety code implementation are suitable and conventional code generation techniques may be employed is emit Java byte codes corresponding to value calculations, condition testing, flow control, arithmetic or logical operations, or rounding mode of a particular calculation step. In general, emitted code calculates the result of a given calculation step from the value of the calculation step (see description of calculations steps, above), the previous step's result, the success of the step and the rounding mode. The emitted code uses storage locations allocated as described above for inputs, results and aggregation results. If a step is targeted by some other step (see analysis, above), then compiler  emits code to store the result of that step in a previously allocated temporary holding variable. If a step is targeted for aggregation by some other step (see analysis, above), then compiler  emits code to add the result of that step the appropriate aggregator or aggregators (see code generation per layer, above). If a given calculation step includes an output flag, the emitted code includes code to write the step's value to output storage for access by client code via an output interface.","For the Java source file version of the methodology that includes logging and run-time override support, some additional code is emitted. For example, if overrides are supported, additional code is emitted to force the value of a calculation step or the result of a calculation step. Similarly, if logging is supported, additional code is emitted to generate log or trace information.","Generation of Entry Point","Finally, the compiler emits () a Java source file representing the model as a whole. There is one class implemented in the source file, which represents the model as a whole. This is the class with which client users of this model interact. Interactions with all of the other classes occur indirectly through the model class. The previously described lookup methods for variables, factor tables, and methodologies are actually called from this file, which forwards the calls to the appropriate \u201cMeta.java\u201d classes. Additionally, this source file implements the \u201cCalculate\u201d method, which sets up the initial environment on the calculation and then calls the appropriate methodology class file created as described above.","Using a Compiled Rating Model","As previously described, a calculation base is transformed from an actuary-manipulable form (e.g., XML) to an intermediate from (e.g., Java source). The intermediate form is compiled (e.g., using an ordinary java compiler) to an executable form that implements an interface called CompiledCalculationBase. This interface includes methods that can be used to run the calculation sequences in of the rating model. In general terms, when you use the rating model, you write Java code to derive a quotation from the data and calculations in the model. The code specifies the input to be used by the compiled rating model in running a calculation sequence (or methodology).","Accessing Variables and Methods","To access all of the variables and methodology steps in a compiled rating model (e.g., compiled rating model ), unique integer ids, called UNIDs, are employed. As previously described, it is possible to retrieve the UNID for a particular variable or step by using the element's name and using the lookup methods generated by compiler .","UNIDs for Continuous and Date Variables","To retrieve the unique id for a continuous or a date variable, use the methods shown below, providing the name of the variables. The appropriate lookup method of the compiled rating model returns the UNID for the variable named. For example:","int getUNIDForContinuousVariable (String name);","int getUNIDForDateVariable (String name);","UNIDs for Discrete Variables","When retrieving unique ids for discrete variables, it is important to consider that they can have a hierarchical structure. Also two discrete variables may have the same name, distinguished by having different parents in the variable hierarchy. Therefore, the lookup methods of the compiled rating model provide a context-sensitive way of retrieving the UNID for a discrete variable. For example:\n\n","More particularly, context sensitive lookup will be understood based on the following example. First, assume that there is more than one discrete variable named MD defined by a given calculation base, so the following has an undefined answer:","int unidMD=getUNIDForDiscreteVariable (\u201cMD\u201d);","For example, lookup methods may not resolve this variable in a calculation base that defines both states.MD (e.g., the state, Maryland) and jobs.MD (e.g., the occupation, Medical Doctor). In this case, a context sensitive version of the method is preferred. For example:\n\n","Calculation steps offer the same chance of ambiguity seen with discrete variables. For example, calculation steps in different methodologies might have the same name. To resolve this, the CompiledCalculationBase interface provides a second method, which takes into account the context of the methodology that includes the step. The following example shows the method for retrieving the context of a step:\n\n","To run quotes against a compiled rating model, two additional interfaces are employed, ICalculationInput and IcalculationOutput. Classes implementing each (e.g., SimpleCalculationInput and SimpleCalculationOutput) can be employed to define the values of input data, e.g., values for discrete, continuous and date rating variables of the calculation base and to retrieve values and results of calculation steps. Generation of lookup methods for rating variables and calculation steps is described above. Classes implementing input and output are used with the Calculate method of the compiled rating model to make a call to a rating model. A call to an exemplary compiled rating model, ExampleCalcBase, might look like the following\n\n","The output object for this call contains all of the values and results produced by running the methodology named methodology name against the input object. To get the output, query the compiled rating base as in the example below.","int stepUNID=base.getUNIDForStep (\u201cFinalResult\u201d);","Double finalResult=output.getResultForStep (stepUNID);","Double finalValue=output.getValueForStep (stepUNID).","A Sample Quotation","Here is an example of running a quote against a rating model.\n\n","While the invention has been described with reference to various embodiments, it will be understood that these embodiments are illustrative and that the scope of the invention is not limited to them. Many variations, modifications, additions, and improvements are possible. For example, although XML and Java-based encodings are described, other forms for calculation base, intermediate source and compiled rating models are also suitable. In addition, while two-step compilation (XML to Java source to Java byte codes) is described, other compilation configurations are also possible. More generally, plural instances may be provided for components described herein as a single instance. Boundaries between various components, operations and data stores are somewhat arbitrary, and particular operations are illustrated in the context of specific illustrative configurations. Other allocations of functionality are envisioned and may fall within the scope of claims that follow. Structures and functionality presented as discrete components in the exemplary configurations may be implemented as a combined structure or component. These and other variations, modifications, additions, and improvements may fall within the scope of the invention as defined in the claims that follow.",{"@attributes":{"id":"p-0160","num":"0277"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":[{"entry":"APPENDIX A"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"import java.util.*;"},{"entry":"public final class ExampleDiscreteVarMeta implements"},{"entry":"java.io.Serializable"},{"entry":"{"},{"entry":"\u2003private static final Hashtable discreteVarTable = new Hashtable ( );"},{"entry":"\u2003 private static final Hashtable discreteVarNameTable = new"},{"entry":"\u2003\u2003\u2003Hashtable ( ) ;"},{"entry":"\u2003private static final Hashtable discreteVarByParentUNIDTable = new"},{"entry":"\u2003\u2003\u2003Hashtable ( ) ;"},{"entry":"\u2003private static final Hashtable discreteVarParentTable = new"},{"entry":"\u2003\u2003\u2003Hashtable ( ) ;"},{"entry":"\u2003static private class Names0 {"},{"entry":"\u2003\u2003static final String names [ ] = {"},{"entry":"\u2003\u2003\u2003\u201croot\u201d, \u201cStatus\u201d, \u201cRetiree\u201d, \u201cActive\u201d, \u201cGender\u201d, \u201cMale\u201d,"},{"entry":"\u2003\u2003\u2003\u201cFemale\u201d, \u201cContractState\u201d, \u201cAB\u201d, \u201cAK\u201d, \u201cAL\u201d, \u201cAR\u201d, \u201cAZ\u201d,"},{"entry":"\u2003\u2003\u2003\u201cBC\u201d, \u201cCA\u201d, \u201cCA1\u201d, \u201cCA2\u201d, \u201cCO\u201d, \u201cCT\u201d, \u201cDC\u201d, \u201cDE\u201d, \u201cFL\u201d,"},{"entry":"\u2003\u2003\u2003\u201cGA\u201d, \u201cGU\u201d, \u201cHI\u201d, \u201cIA\u201d, \u201cID\u201d, \u201cIL\u201d, \u201cIN\u201d, \u201cKS\u201d, \u201cKY\u201d, \u201cLA\u201d, "},{"entry":"\u2003\u2003\u2003\u201cMA\u201d, \u201cMB\u201d, \u201cMD\u201d, \u201cME\u201d, \u201cMI\u201d, \u201cMN\u201d, \u201cMO\u201d, \u201cMS\u201d, \u201cMT\u201d,"},{"entry":"\u2003\u2003\u2003\u201cNB\u201d, \u201cNC\u201d, \u201cND\u201d, \u201cNE\u201d, \u201cNF\u201d, \u201cNH\u201d, \u201cNJ\u201d, \u201cNM\u201d, \u201cNS\u201d,"},{"entry":"\u2003\u2003\u2003\u201cNT\u201d, \u201cNV\u201d, \u201cNY\u201d, \u201cNY1\u201d, \u201cNY2\u201d, \u201cOH\u201d, \u201cOK\u201d, \u201cON\u201d, "},{"entry":"\u2003\u2003\u2003\u201cOR\u201d, \u201cPA\u201d, \u201cPE\u201d, \u201cPQ\u201d, \u201cPR\u201d, \u201cRI\u201d, \u201cSC\u201d, \u201cSD\u201d, "},{"entry":"\u2003\u2003\u2003\u201cSK\u201d, \u201cTN\u201d, \u201cTX\u201d, \u201cUT\u201d, \u201cVA\u201d, \u201cVI\u201d, \u201cVT\u201d,"},{"entry":"\u2003\u2003\u2003\u201cWA\u201d, \u201cWI\u201d, \u201cWV\u201d, \u201cWY\u201d, \u201cYT\u201d, \u201cVolumeType\u201d,"},{"entry":"\u2003\u2003\u2003\u201cCensusVolumeUnaltered\u201d, \u201cCensusVolumeInParameters\u201d,"},{"entry":"\u2003\u2003\u2003\u201cPlanType\u201d, \u201cMultipleEarnings\u201d, \u201cFlatAmt\u201d,"},{"entry":"\u2003\u2003\u2003\u201cMultipleEarnings_FlatAmt\u201d, \u201cScheduleType\u201d, \u201cSched1\u201d,"},{"entry":"\u2003\u2003\u2003\u201cSched2\u201d, \u201cSched3\u201d, \u201cSched4\u201d,\u201cSched5\u201d, \u201cSched6\u201d, \u201cSched7\u201d,"},{"entry":"\u2003\u2003\u2003\u201cSched8\u201d, \u201cSched9\u201d, \u201cSched10\u201d, \u201cSched11\u201d,"},{"entry":"\u2003\u2003\u2003\u201cCollectiveBargained\u201d, \u201cCollectiveBargainedY\u201d,"},{"entry":"\u2003\u2003\u2003\u201cCollectiveBargainedN\u201d, \u201cArrangements\u201d, \u201cArrangementsY\u201d,"},{"entry":"\u2003\u2003\u2003\u201cArrangementsN\u201d, \u201cAdminSysDesign\u201d, \u201cAdminSysDesignY\u201d,"},{"entry":"\u2003\u2003\u2003\u201cAdminSysDesignN\u201d, \u201cClaimControlParticip\u201d,"},{"entry":"\u2003\u2003\u2003\u201cClaimControlParticipY\u201d, \u201cClaimControlParticipN\u201d,"},{"entry":"\u2003\u2003\u2003\u201cClaimAnalysis\u201d, \u201cClaimAnalysisY\u201d, \u201cClaimAnalysisN\u201d,"},{"entry":"\u2003\u2003\u2003\u201cBargainConsult\u201d, \u201cBargainConsultY\u201d, \u201cBargainConsultN\u201d,"},{"entry":"\u2003\u2003\u2003\u201cProvisionReview\u201d, \u201cProvisionReviewY\u201d, \u201cProvisionReviewN\u201d,"},{"entry":"\u2003\u2003\u2003\u201cCustSatisfMonitor\u201d, \u201cCustSatisfMonitorY\u201d,"},{"entry":"\u2003\u2003\u2003\u201cCustSatisfMonitorN\u201d, \u201cEnrollAssist\u201d, \u201cEnrollAssistY\u201d,"},{"entry":"\u2003\u2003\u2003\u201cEnrollAssistN\u201d, \u201cMaintainRecords\u201d, \u201cMaintainRecordsY\u201d,"},{"entry":"\u2003\u2003\u2003\u201cMaintainRecordsN\u201d, \u201cPlanDocAssist\u201d, \u201cPlanDocAssistY\u201d,"},{"entry":"\u2003\u2003\u2003\u201cPlanDocAssistN\u201d, \u201cPlanChangeConsult\u201d, \u201cPlanChangeConsultY\u201d,"},{"entry":"\u2003\u2003\u2003\u201cPlanChangeConsultN\u201d, \u201cSupervisingAgent\u201d,"},{"entry":"\u2003\u2003\u2003\u201cSupervisingAgentY\u201d, \u201cSupervisingAgentN\u201d, \u201cFilingRetention\u201d,"},{"entry":"\u2003\u2003\u2003\u201cFilingRetentionY\u201d, \u201cFilingRetentionN\u201d, \u201cComArrangement\u201d,"},{"entry":"\u2003\u2003\u2003\u201cComArrangementNONE\u201d, \u201cComArrangementLEVEL\u201d,"},{"entry":"\u2003\u2003\u2003\u201cComArrangementFLATPERC\u201d, \u201cComArrangementFLATAMT\u201d,"},{"entry":"\u2003\u2003\u2003\u201cHospitalInpatientStay\u201d, \u201cHospitalStayStrd\u201d,"},{"entry":"\u2003\u2003\u2003\u201cHospitalStayPremium\u201d, \u201cOptBenefitPackage\u201d,"},{"entry":"\u2003\u2003\u2003\u201cBenefitStrdBundled\u201d, \u201cBenefitPremiumBundled\u201d,"},{"entry":"\u2003\u2003\u2003\u201cBenefitOfferedUnbundled\u201d, \u201cDisabilityProvision\u201d,"},{"entry":"\u2003\u2003\u2003\u201cDisabilityStrd\u201d, \u201cDisabilityPremium\u201d, \u201cNOVAPricing\u201d,"},{"entry":"\u2003\u2003\u2003\u201cNOVAPricingY\u201d, \u201cOccupationalCoverage\u201d, \u201cCoverageY\u201d,"},{"entry":"\u2003\u2003\u2003\u201cCoverageN\u201d, \u201cPlanRoundingPreferences\u201d, \u201cRoundNearestDollar\u201d,"},{"entry":"\u2003\u2003\u2003\u201cRoundHigher1000\u201d, \u201cRoundNearer1000\u201d, \u201cRoundLower1000\u201d} ;"},{"entry":"\u2003} ;"},{"entry":"\u2003static private class FullNames0 {"},{"entry":"\u2003\u2003static final String fullNames [ ] = {"},{"entry":"\u2003\u2003\u2003\u201croot\u201d, \u201croot\/Status\u201d, \u201croot\/Status\/Retiree\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/Status\/Active\u201d, \u201croot\/Gender\u201d, \u201croot\/Gender\/Male\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/Gender\/Female\u201d, \u201croot\/ContractState\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/ContractState\/AB\u201d, \u201croot\/ContractState\/AK\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/ContractState\/AL\u201d, \u201croot\/ContractState\/AR\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/ContractState\/AZ\u201d, \u201croot\/ContractState\/BC\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/ContractState\/CA\u201d, \u201croot\/ContractState\/CA1\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/ContractState\/CA2\u201d, \u201croot\/ContractState\/CO\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/ContractState\/CT\u201d, \u201croot\/ContractState\/DC\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/ContractState\/DE\u201d, \u201croot\/ContractState\/FL\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/ContractState\/GA\u201d, \u201croot\/ContractState\/GU\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/ContractState\/HI\u201d, \u201croot\/ContractState\/IA\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/ContractState\/ID\u201d, \u201croot\/ContractState\/IL\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/ContractState\/IN\u201d, \u201croot\/ContractState\/KS\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/ContractState\/KY\u201d, \u201croot\/ContractState\/LA\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/ContractState\/MA\u201d, \u201croot\/ContractState\/MB\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/ContractState\/MD\u201d, \u201croot\/ContractState\/ME\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/ContractState\/MI\u201d, \u201croot\/ContractState\/MN\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/ContractState\/MO\u201d, \u201croot\/ContractState\/MS\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/ContractState\/MT\u201d, \u201croot\/ContractState\/NB\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/ContractState\/NC\u201d, \u201croot\/ContractState\/ND\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/ContractState\/NE\u201d, \u201croot\/ContractState\/NF\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/ContractState\/NH\u201d, \u201croot\/ContractState\/NJ\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/ContractState\/NM\u201d, \u201croot\/ContractState\/NS\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/ContractState\/NT\u201d, \u201croot\/ContractState\/NV\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/ContractState\/NY\u201d, \u201croot\/ContractState\/NY1\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/ContractState\/NY2\u201d, \u201croot\/ContractState\/OH\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/ContractState\/OK\u201d, \u201croot\/ContractState\/ON\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/ContractState\/OR\u201d, \u201croot\/ContractState\/PA\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/ContractState\/PE\u201d, \u201croot\/ContractState\/PQ\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/ContractState\/PR\u201d, \u201croot\/ContractState\/RI\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/ContractState\/SC\u201d, \u201croot\/ContractState\/SD\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/ContractState\/SK\u201d, \u201croot\/ContractState\/TN\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/ContractState\/TX\u201d, \u201croot\/ContractState\/UT\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/ContractState\/VA\u201d, \u201croot\/ContractState\/VI\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/ContractState\/VT\u201d, \u201croot\/ContractState\/WA\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/ContractState\/WI\u201d, \u201croot\/ContractState\/WV\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/ContractState\/WY\u201d, \u201croot\/ContractState\/YT\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/VolumeType\u201d, \u201croot\/VolumeType\/CensusVolumeUnaltered\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/VolumeType\/CensusVolumeInParameters\u201d, \u201croot\/PlanType\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/PlanType\/MultipleEarnings\u201d, \u201croot\/PlanType\/FlatAmt\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/PlanType\/MultipleEarnings_FlatAmt\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/ScheduleType\u201d, \u201croot\/ScheduleType\/Sched1\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/ScheduleType\/Sched2\u201d, \u201croot\/ScheduleType\/Sched3\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/ScheduleType\/Sched4\u201d, \u201croot\/ScheduleType\/Sched5\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/ScheduleType\/Sched6\u201d, \u201croot\/ScheduleType\/Sched7\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/ScheduleType\/Sched8\u201d, \u201croot\/ScheduleType\/Sched9\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/ScheduleType\/Sched10\u201d, \u201croot\/ScheduleType\/Sched11\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/CollectiveBargained\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/CollectiveBargained\/CollectiveBargainedY\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/CollectiveBargained\/CollectiveBargainedN\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/Arrangements\u201d, \u201croot\/Arrangements\/ArrangementsY\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/Arrangements\/ArrangementsN\u201d, \u201croot\/AdminSysDesign\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/AdminSysDesign\/AdminSysDesignY\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/AdminSysDesign\/AdminSysDesignN\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/ClaimControlParticip\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/ClaimControlParticip\/ClaimControlParticipY\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/ClaimControlParticip\/ClaimControlParticipN\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/ClaimAnalysis\u201d, \u201croot\/ClaimAnalysis\/ClaimAnalysisY\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/ClaimAnalysis\/ClaimAnalysisN\u201d, \u201croot\/BargainConsult\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/BargainConsult\/BargainConsultY\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/BargainConsult\/BargainConsultN\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/ProvisionReview\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/ProvisionReview\/ProvisionReviewY\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/ProvisionReview\/ProvisionReviewN\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/CustSatisfMonitor\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/CustSatisfMonitor\/CustSatisfMonitorY\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/CustSatisfMonitor\/CustSatisfMonitorN\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/EnrollAssist\u201d, \u201croot\/EnrollAssist\/EnrollAssistY\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/EnrollAssist\/EnrollAssistN\u201d, \u201croot\/MaintainRecords\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/MaintainRecords\/MaintainRecordsY\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/MaintainRecords\/MaintainRecordsN\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/PlanDocAssist\u201d, \u201croot\/PlanDocAssist\/PlanDocAssistY\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/PlanDocAssist\/PlanDocAssistN\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/PlanChangeConsult\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/PlanChangeConsult\/PlanChangeConsultY\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/PlanChangeConsult\/PlanChangeConsultN\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/SupervisingAgent\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/SupervisingAgent\/SupervisingAgentY\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/SupervisingAgent\/SupervisingAgentN\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/FilingRetention\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/FilingRetention\/FilingRetentionY\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/FilingRetention\/FilingRetentionN\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/ComArrangement\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/ComArrangement\/ComArrangementNONE\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/ComArrangement\/ComArrangementLEVEL\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/ComArrangement\/ComArrangementFLATPERC\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/ComArrangement\/ComArrangementFLATAMT\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/HospitalInpatientStay\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/HospitalInpatientStay\/HospitalStayStrd\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/HospitalInpatientStay\/HospitalStayPremium\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/OptBenefitPackage\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/OptBenefitPackage\/BenefitStrdBundled\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/OptBenefitPackage\/BenefitPremiumBundled\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/OptBenefitPackage\/BenefitOfferedUnbundled\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/DisabilityProvision\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/DisabilityProvision\/DisabilityStrd\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/DisabilityProvision\/DisabilityPremium\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/NOVAPricing\u201d, \u201croot\/NOVAPricing\/NOVAPricingY\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/OccupationalCoverage\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/OccupationalCoverage\/CoverageY\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/OccupationalCoverage\/CoverageN\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/PlanRoundingPreferences\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/PlanRoundingPreferences\/RoundNearestDollar\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/PlanRoundingPreferences\/RoundHigher1000\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/PlanRoundingPreferences\/RoundNearer1000\u201d,"},{"entry":"\u2003\u2003\u2003\u201croot\/PlanRoundingPreferences\/RoundLower1000\u201d } ;"},{"entry":"\u2003} ;"},{"entry":"\u2003static private class Unids0 {"},{"entry":"\u2003\u2003static final int unids [ ] = {"},{"entry":"\u2003\u2003\u20030, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,"},{"entry":"\u2003\u2003\u200318, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,"},{"entry":"\u2003\u2003\u200333, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,"},{"entry":"\u2003\u2003\u200348, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62,"},{"entry":"\u2003\u2003\u200363, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77,"},{"entry":"\u2003\u2003\u200378, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92,"},{"entry":"\u2003\u2003\u200393, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105,"},{"entry":"\u2003\u2003\u2003106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117,"},{"entry":"\u2003\u2003\u2003118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129,"},{"entry":"\u2003\u2003\u2003130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141,"},{"entry":"\u2003\u2003\u2003142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153,"},{"entry":"\u2003\u2003\u2003154, 155, 156, 157, 158, 159, 160, 161, 162, 163} ;"},{"entry":"\u2003} ;"},{"entry":"\u2003static private class ParentUnids0 {"},{"entry":"\u2003\u2003static final int parentUnids [ ] = {\u22121, 0, 1, 1, 0, 4, 4, 0, 7,"},{"entry":"\u2003\u2003\u20037, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,"},{"entry":"\u2003\u2003\u20037, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,"},{"entry":"\u2003\u2003\u20037, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,"},{"entry":"\u2003\u2003\u20037, 7, 7, 7, 7, 7, 7, 7, 7, 0, 78, 78, 0, 81, 81, 81, 0, 85,"},{"entry":"\u2003\u2003\u200385, 85, 85, 85, 85, 85, 85, 85, 85, 85, 0, 97, 97, 0, 100,"},{"entry":"\u2003\u2003\u2003100, 0, 103, 103, 0, 106, 106, 0, 109, 109, 0, 112, 112, 0,"},{"entry":"\u2003\u2003\u2003115, 115, 0, 118, 118, 0, 121, 121, 0, 124, 124, 0, 127, 127,"},{"entry":"\u2003\u2003\u20030, 130, 130, 0, 133, 133, 0, 136, 136, 0, 139, 139, 139, 139,"},{"entry":"\u2003\u2003\u20030, 144, 144, 0, 147, 147, 147, 0, 151, 151, 0, 154, 0, 156,"},{"entry":"\u2003\u2003\u2003156, 0, 159, 159, 159, 159} ;"},{"entry":"\u2003} ;"},{"entry":"\u2003static"},{"entry":"\u2003{"},{"entry":"\u2003\u2003for (int i = 0;i<Names0.names.length; i++)"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003\u2003discreteVarTable.put(Names0.names [i], new"},{"entry":"\u2003\u2003\u2003\u2003Integer(Unids0.unids [i] ) ) ;"},{"entry":"\u2003\u2003\u2003discreteVarNameTable.put (new"},{"entry":"\u2003\u2003\u2003\u2003Integer(Unids0.unids [i] ), FullNames0.fullNames [i] ) ;"},{"entry":"\u2003\u2003\u2003discreteVarTable.put (FullNames0.fullNames [i], new"},{"entry":"\u2003\u2003\u2003\u2003Integer(Unids0.unids [i] ) ) ;"},{"entry":"\u2003\u2003\u2003discreteVarByParentUNIDTable.put (Names0.names [i] + \u201c I \u201d +"},{"entry":"\u2003\u2003\u2003\u2003ParentUnids0.parentUnids [i], new Integer(Unids0.unids [i] ) ) ;"},{"entry":"\u2003\u2003\u2003discreteVarParentTable.put (new Integer (Unids0.unids [i] ), new"},{"entry":"\u2003\u2003\u2003\u2003Integer(ParentUnids0.parentUnids [i] ) ) ;"},{"entry":"\u2003\u2003}"},{"entry":"\u2003}"},{"entry":"\u2003public static int getUNIDForDiscreteVariable (String var)"},{"entry":"\u2003{"},{"entry":"\u2003\u2003Integer val = (Integer) discreteVarTable.get(var) ;"},{"entry":"\u2003\u2003return ( (val = = null) ? \u22121:val.intValue ( ) ) ;"},{"entry":"\u2003}"},{"entry":"\u2003public static String getDiscreteVariableForUNID (int UNID)"},{"entry":"\u2003{"},{"entry":"\u2003\u2003return (String) discreteVarNameTable.get (new Integer(UNID ) ) ;"},{"entry":"\u2003}"},{"entry":"\u2003public static int getUNIDForDiscreteVariableWithParent (String var,"},{"entry":"\u2003\u2003int parentUNID)"},{"entry":"\u2003{"},{"entry":"\u2003\u2003Integer val = (Integer) discreteVarByParentUNIDTable.get (var +"},{"entry":"\u2003\u2003\u2003\u201c I \u201d + parentUNID) ;"},{"entry":"\u2003\u2003return ( (val = = null) ? \u22121:val.intValue ( ) ) ;"},{"entry":"\u2003}"},{"entry":"\u2003public static int getParentForDiscreteVariable (int UNID)"},{"entry":"\u2003{"},{"entry":"\u2003\u2003Integer val = (Integer) discreteVarParentTable.get (new"},{"entry":"\u2003\u2003\u2003Integer (UNID) );"},{"entry":"\u2003\u2003return ( (val = = null) ? \u22121:val.intValue ( ) );"},{"entry":"\u2003}"},{"entry":"\u2003public static int [ ] getTopLevelDiscreteVariableUNIDS ( )"},{"entry":"\u2003{"},{"entry":"\u2003\u2003int totalVars = 0 ;"},{"entry":"\u2003\u2003int currentVar = 0 ;"},{"entry":"\u2003\u2003Enumeration vars = discreteVarParentTable.keys ( );"},{"entry":"\u2003\u2003while (vars.hasMoreElements ( ) )"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003\u2003Integer var = (Integer) vars.nextElement ( );"},{"entry":"\u2003\u2003\u2003Integer parent = (Integer) discreteVarParentTable.get (var) ;"},{"entry":"\u2003\u2003\u2003if (parent.intValue ( ) = = \u22121) totalVars++ ;"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003int out [ ] = new int [totalVars] ;"},{"entry":"\u2003\u2003vars = discreteVarParentTable.keys ( ) ;"},{"entry":"\u2003\u2003while (vars.hasMoreElements ( ) )"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003\u2003Integer var = (Integer) vars.nextElement ( ) ;"},{"entry":"\u2003\u2003\u2003Integer parent = (Integer) discreteVarParentTable.get (var) ;"},{"entry":"\u2003\u2003\u2003if (parent.intValue ( ) = = \u22121) out [currentVar++] ="},{"entry":"\u2003\u2003\u2003\u2003var.intValue ( ) ;"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003return out ;"},{"entry":"\u2003}"},{"entry":"\u2003public static int [ ] getDiscreteVariableUNIDSForParent (int"},{"entry":"\u2003\u2003\u2003parentUNID)"},{"entry":"\u2003{"},{"entry":"\u2003\u2003int totalVars = 0 ;"},{"entry":"\u2003\u2003int currentVar = 0 ;"},{"entry":"\u2003\u2003Enumeration vars = discreteVarParentTable.keys ( ) ;"},{"entry":"\u2003\u2003while (vars.hasMoreElements ( ) )"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003\u2003Integer var = (Integer) vars.nextElement ( ) ;"},{"entry":"\u2003\u2003\u2003Integer parent = (Integer) discreteVarParentTable.get (var) ;"},{"entry":"\u2003\u2003\u2003if (parent.intValue ( ) = = parentUNID) totalVars++ ;"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003int out [ ] = new int [totalVars] ;"},{"entry":"\u2003\u2003vars = discreteVarParentTable.keys ( ) ;"},{"entry":"\u2003\u2003while (vars.hasMoreElements ( ) )"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003\u2003Integer var = (Integer) vars.nextElement ( ) ;"},{"entry":"\u2003\u2003\u2003Integer parent = (Integer) discreteVarParentTable.get (var) ;"},{"entry":"\u2003\u2003\u2003if (parent.intValue ( ) = = parentUNID) out [currentVar++] ="},{"entry":"\u2003\u2003\u2003\u2003var.intValue ( ) ;"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003return out ;"},{"entry":"\u2003}"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention may be better understood, and its numerous objects, features, and advantages made apparent to those skilled in the art by referencing the accompanying drawings.",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
