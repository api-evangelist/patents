---
title: Systems and methods for providing value hierarchies, ragged hierarchies and skip-level hierarchies in a business intelligence server
abstract: A business intelligence (BI) server and repository are described which support a set of hierarchical relationships among the data. The BI server receives user input specifying a set of parent-child or other ancestral relationship among a set of data in a data source. The BI server generates a set of SQL queries and executes the queries to pre-populate a set of tables which specify the parent child relationships among the data in the data source. One such table is a parent-child relationship closure table that defines the inter-member relationships among the data members. Once the tables are populated, the BI server uses the closure tables to answer queries that require knowledge of the ancestral relationships among data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08326857&OS=08326857&RS=08326857
owner: Oracle International Corporation
number: 08326857
owner_city: Redwood Shores
owner_country: US
publication_date: 20110301
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CLAIM OF PRIORITY","COPYRIGHT NOTICE","FIELD OF THE INVENTION","BACKGROUND","SUMMARY OF INVENTION","DETAILED DESCRIPTION"],"p":["The present application claims the benefit of U.S. Provisional Patent Application No. 61\/349,754, entitled \u201cSYSTEMS AND METHODS FOR PROVIDING VALUE HIERARCHIES, RAGGED HIERARCHIES, SKIP-LEVEL HIERARCHIES, MULTILINGUAL DOUBLE COLUMN SUPPORT AND CUSTOM MEMBERS IN A BUSINESS INTELLIGENCE SERVER,\u201d by Roger Bolsius et al., filed on May 28, 2010, which is incorporated by reference herein in its entirety, including all Appendices filed therewith.","A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure, as it appears in the Patent and Trademark Office patent file or records, but otherwise reserves all copyright rights whatsoever.","The current invention relates generally to business intelligence and in particular to representing hierarchical relationships among data in the business intelligence server.","In recent years, business intelligence software has become increasingly utilized by large business enterprises and other organizations. Business intelligence provides current and historical views of business operations by analyzing internal, structured data and business processes of the organization. It is often used to create future models and predictions in order to support better business decision making. As such, business intelligence tools can lead to decreased costs and increased efficiency, productivity and profit margins for many companies.","Business intelligence is usually implemented as software and\/or hardware tools that are used to collect and analyze data and to transform the raw data into meaningful and useful information used to enable more effective strategic, tactical, and operational insights and decision-making. As such, a typical business intelligence server relies on data that may reside in a variety of places, including but not limited to relational databases, online analytical processing (OLAP) tools, repositories and content management systems, application servers, as well as a number of other sources.","In a typical business intelligence (BI) server, data is collected from all (or some) of these data sources and placed into a (virtual or physical) data warehouse or data mart, where it can then be modeled and analyzed before being presented to the user. For example, one approach is to implement a physical layer within the business intelligence server, where data is modeled as a consolidated table that mirrors objects in the data source layer. An application developer can assemble these compound objects by hand, using a subset of the entities relevant to the domain; the synthesized objects can subsequently be imported into the business intelligence server's metadata and decomposed into dimensions and facts.","However, a number limitations and potential areas of improvement still exist in the field of modeling data within business intelligence servers. For example, it is frequently useful to represent hierarchical relationships among data. In the context of business intelligence, a hierarchy is a set of top-down relationships between certain attributes in a dimension. Many hierarchical relationships can be represented by level-based hierarchies. An example of a level-based hierarchy can be seen in a time dimension, where days roll up into weeks, months roll up into quarters, quarters into years and so on.","In certain cases, however, hierarchies do not have well defined levels. As an illustration, an organization may not be level based. Members within an organization may attributes such as \u201cTitle\u201d however, these attributes do not translate well into levels. For example, (a) vice presidents (VPs) may report to other VPs and (b) different VPs can be at different depths from the tree. In addition, some hierarchies do not have values for certain levels. Moreover, some hierarchies exist where all the leaves do not have the same depth. It can be advantageous and desirable to represent all of these hierarchical relationships within the data model of the BI server.","In various embodiments, systems and methods are described for allowing a business intelligence (BI) server to expose an enterprise business model as a mixture of relational and multi-dimensional concepts. Query\/expression capabilities are a union between what traditional relational and multi-dimensional users expect. All of this functionality is consistently supported across all data sources.","In one embodiment, value hierarchy support is provided for relational data sources integrated with the BI server. Value hierarchies are hierarchies that do not have well-defined levels. For example, data for the members within an organization may contain attributes, such as \u201ctitle\u201d and the like. However, these attributes may not translate well to levels of a hierarchy because members with the same title may or may not report to other members having the title and can thus be at different depths of the tree. By supplying a value hierarchy-based support, the BI server is able to efficiently run queries having hierarchical filters and limitations on relational data sources that do not natively store data in a hierarchical structure.","In another embodiment, the BI server can unify the concept of ragged hierarchies and skip-level hierarchies between relational data sources and hierarchical data sources, such as OLAP. A ragged hierarchy is an unbalanced hierarchy that does not have levels of the same depth. A skip level hierarchy is a hierarchy that has members that do not have a value for a particular ancestor level. Both types of hierarchies can be represented and navigated in the BI server that unifies non-hierarchical relational data sources with hierarchical OLAP-based sources.","The invention is illustrated by way of example and not by way of limitation in the figures of the accompanying drawings in which like references indicate similar elements. References to embodiments in this disclosure are not necessarily to the same embodiment, and such references mean at least one. While specific implementations are discussed, it is understood that this is done for illustrative purposes only. A person skilled in the relevant art will recognize that other components and configurations may be used without departing from the scope and spirit of the invention.","In the following description, numerous specific details are set forth to provide a thorough description of the invention. However, it will be apparent to those skilled in the art that the invention may be practiced without these specific details. In other instances, well-known features have not been described in detail so as not to obscure the invention.","In accordance with various embodiments described throughout this disclosure, a business intelligence (BI) server is extended with support for value-based hierarchies, skip level hierarchies and ragged hierarchies. A business intelligence server is an analysis server providing a calculation and aggregation engine that integrates data from multiple relational, unstructured, OLAP, and other sources.","In accordance with an embodiment, a value hierarchies feature can be provided on the BI server. This feature of the BI server enables users to query data based on parent-child and other ancestral relationships. For example, a query can request to (a) show all the direct reports of an employee; (b) show all the second level reports of that employee, (c) show all the front line managers under that employee, and (d) show the management chain for an employee. Analyzing data based on these relationships can be highly relevant to the business of the organization. This functionality can be supported against all data sources.","In accordance with an embodiment, a business intelligence server can be integrated with a multitude of different data sources. These data sources can store data in different formats or arrangements that may not necessarily be consistent with each other. For example, relational databases store data in a non-hierarchical structure and as such, certain queries having hierarchical filters may not be as efficiently executable.","In accordance with an embodiment, the BI server can receive user input that specifies the set of parent-child and other ancestral relationships among a set of data stored in a particular data source. Based on that input, the BI server can generate structured query language (SQL) queries and execute them against the data source to pre-populate a set of closure tables that store the transitive closure of the value hierarchy table. This closure table contains one row for every pair of members that have an ancestral relationship of any distance (self, parent, grandparent, great-grandparent, . . . ) In accordance with an embodiment, the columns in this table include: (a) member key; (b) ancestor key; (c) depth of the member from the root of the hierarchy; (d) distance of the member from the ancestor; (e) key of each ancestor indexed beginning from the current member (ancestor key, ancestor key, . . . ) ancestor key is the same as parent key; and (f) key of each ancestor indexed beginning from the root member (level key, level key, . . . )","In accordance with an embodiment, a full-fledged flattened table consideration can also be provided on the BI server. This flattened table stores a flattened representation of the value hierarchy with the key of each ancestor in a separate column. This table contains one row for each row in the base table. In accordance with an embodiment, the columns in the flattened table include: (1) member key; (2) parent key; (3) depth of the member from the root of the hierarchy; (4) key of each ancestor indexed beginning from the current member (ancestor key, ancestor key, . . . ) ancestor key is the same as parent key; and (5) key of each ancestor indexed beginning from the root member (level key, level key, . . . ).","In accordance with various embodiments, the closure table and flattened table can be used by the BI server to answer queries that require ancestral relationships among data members. For example, in accordance with an embodiment, the BI server can provide a user interface (UI) that enables a user to define selections using the hierarchical relationships. As a value hierarchy does not have levels, in one embodiment, hierarchical syntax is the only mechanism to define dimensional selections. The UI can provide operators to allow the user to express hierarchical selections such as \u201cis Parent Of\u201d, \u201cis Child Of,\u201d \u201cIs Ancestor Of,\u201d \u201cIs Descendant Of,\u201d \u201cIs Sibling Of,\u201d \u201cIs Leaf,\u201d and the like. In addition, the BI Server can provide drill insert support for value hierarchy, as well as aggregation. Thus, for example, a user can access a member's children, grandchildren and other descendants by drilling down using the GUI provided on the BI server.","In accordance with additional embodiments, support for ragged hierarchies can be provided for the BI server. In one embodiment, a ragged hierarchy is an unbalanced hierarchy in which the leaf data members do not all have the same depth. The BI server can store metadata to indicate that a particular hierarchy is a ragged hierarchy. Within relational data sources the ragged hierarchy can be represented by implementing a separate column for each level of the hierarchy, wherein each level of the hierarchy is represented by a level key. When the BI metadata indicates that a particular hierarchy is ragged and contains an unbalanced structure with levels of varying depth, the columns are filled in for levels of varying depth with null values to balance the hierarchy. If the hierarchy is navigated, the BI server exposes a function to determine whether the column contains a leaf data member to determine if the BI server can drill on the value specified by the function.","In accordance with additional embodiments, support for representing skip level hierarchies can be provided to a BI server. In one embodiment, a skip level hierarchy is a hierarchy that has members that do not have a value for a particular ancestor level. In other words, a skip level hierarchy has members missing at various levels in between the different levels in the hierarchy. The BI server has metadata that specifies which hierarchy is a skip level hierarchy. Similarly to a ragged hierarchy, skip level hierarchies can be represented by implementing a separate column for each level of the hierarchy, wherein each level of the hierarchy is represented by a level key. When the BI server determines that a particular level in the hierarchy is skipped and contains no value at said particular level, that skipped level of the hierarchy can be represented with a null key. Thereafter, if the skipped level is discovered during the retrieval of information while drilling down through the hierarchy, the BI server can determine which next level following the skipped level contains a value and the value in the next level is returned.","The BI server can unify the concepts of skip level hierarchies and ragged hierarchies between relational data sources and hierarchical data sources, such as OLAP. Because the BI server exposes a variety of different data sources as a single semantic model, the model provides for a way to represent ragged hierarchies and skip level hierarchies for data in relational and non-hierarchical databases.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 1"},"As illustrated, the BI server  and the BI repository  provide a layer of abstraction that lets users  send simple logical structured query language (SQL) queries against complex federated data sources . In accordance with an embodiment, the BI server  processes user requests and queries underlying data sources. The BI server can maintain a logical data model and provide client access to this model through open database connectivity (ODBC).","In accordance with an embodiment, the BI server uses the metadata in the repository  to perform two tasks (1) to interpret logical SQL queries and write corresponding physical queries against the appropriate data sources ; and (2) to transform and combine the physical result sets and perform final calculations. The BI server can connect to the underlying data source through either ODBC or over a native application programming interface (API) of the data source.","In accordance with an embodiment, the administration tool  is an application that can be used to create and edit the BI repository . The admin tool can connect to the repository in offline mode, or it can connect to the repository through the BI server (online mode). In accordance with various embodiments, the additional functionality provided by the BI server can be made available in the online mode.",{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 2"},"As mentioned above, the BI server can process incoming client requests  that are sent against complex federated data sources. In accordance with an embodiment, the BI repository is comprised of three layers: the physical layer , the logical mapping layer  and the presentation layer .","In accordance with an embodiment, the physical layer  defines the objects and relationships the BI server needs to write native queries against each physical data source . In accordance with an embodiment, a user or administrator creates this layer by importing tables, cubes and flat files from the data sources. For example, as shown in this figure, some of the formats and schemas used in the physical layer can include stars and snowflakes , normalized  and de-normalized  data, extensible markup language (XML) and file storage data , multi-dimensional data , application development framework (ADF) data  and other formats. Separating the logical behavior of the application from the physical model provides the ability to federate multiple physical data sources to the same logical object, enabling aggregate navigation and partitioning, as well as dimension conformance and isolation from changes in the physical sources. This separation also enables the creation of portable BI applications.","In accordance with an embodiment, the logical business model and mapping layer  defines the business or logical model of the data and specifies the mapping between the business model and the physical schemas. This layer also determines the analytic behavior seen by users, and defines the superset of objects and relationships available to the users. It also hides the complexity of the source data models.","In accordance with an embodiment, the presentation layer  provides a way to present customized, secure, role-based views  of a business model to users. It adds a level of abstraction over the business model and mapping layer  and provides the view of the data seen by users building requests in the presentation services and other clients .","In accordance with an embodiment, a typical order for an enterprise to construct a BI repository is to create the physical layer objects firs, the logical model and mapping layer objects next and the presentation layer objects last. However, in alternative embodiments, the user can work on each layer at any stage.","In most cases, planning the business model is the first step in developing a usable data model for decision support. In a business model, a dimension represents a hierarchical organization of logical columns (attributes). One or more logical dimension tables can be associated with at most one dimension. Examples of common dimensions are time periods, products, markets, customers, suppliers, promotion conditions, raw materials, manufacturing plants, transportation methods, media types and time of day. In accordance with an embodiment, dimensions exist in the logical model and mapping layer  and in the presentation layer .","In each dimension, attributes can be organized into hierarchical levels. These logical levels represent the organizational rules and reporting needs required by the business of the organization deploying the BI server. They provide the structure (metadata) that the BI server uses to drill into and across dimensions to get more detailed views of data.","In accordance with an embodiment, there are two types of logical dimensions: dimensions with level-based hierarchies (structure hierarchies) and dimensions with parent-child hierarchies (value hierarchies). Level based hierarchies are those in which members of the same type occur only at a single level, while members in parent-child hierarchies all have the same type.","One common occurrence of a value hierarchy is an organizational reporting hierarchy chart, where each individual in the organization is an employee, each employee (apart from top-level managers) reports to a single manager, and the reporting hierarchy has many levels. These conditions illustrate the basic features that define a parent-child hierarchy, namely: (1) a parent-child hierarchy (value hierarchy) is based on a single logical table (e.g. \u201cEmployee\u201d table); (2) each row in the table contains two identifying keys, one to identify the member itself, the other to identify the \u201cparent\u201d of the member (e.g. Emp_ID and Mgr_ID).","In relational tables, the relationships between members in a parent-child hierarchy are implicitly defined by identifier key values in the associated base table. However, in the BI server, for each parent-child hierarchy defined on a relational table, the inter-member relationships are also defined in a separate parent-child relationship table (closure table).",{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 3"},"As previously described, the BI repository  is comprised of a presentation layer , logical layer  and physical layer . In order to support value hierarchies in the BI server, the administrator  or other user can identify a set of dimensions with parent-child hierarchies and specify them by using a user interface of the BI server. In accordance with an embodiment, the presentation layer can be utilized by the administrator to define the parent-child relationships among various data members.","Once the ancestral relationships are specified, the BI server can materialize a set of tables , ,  and generate a set of SQL statements . These SQL statements are executed against the data source  to populate the tables, such as the closure table . More specifically, in addition to the base table , a flattened table  and a closure table  are pre-populated on the BI server. These tables can subsequently be used to answer queries from users  that require knowledge of ancestral relationships among the data members. In particular, hierarchical operators can be provided to the BI server, including isParentOf, isDescendantOf, isAncestorOf, isChildOf and the like, which use the closure table to efficiently answer queries involving ancestral relationships. For example, the closure table is used by the BI server to answer queries such as \u201cshow me all the descendants of an employee\u201d or \u201cshow me all the ancestors of an employee.\u201d","In accordance with an embodiment, the flattened table  stores a flattened representation of the value hierarchy with the key of each ancestor in a separate column. This table contains one row for each row in the base table. The columns in this table include: (1) member key; (2) parent key; (3) depth of the member from the root of the hierarchy; (4) key of each ancestor indexed beginning from the current member (ancestor key, ancestor key, . . . ) ancestor key is the same as parent key; and (5) key of each ancestor indexed beginning from the root member (level key, level key, . . . ). Table 1 below illustrates one non-limiting example of the possible SQL used to create the flattened table :",{"@attributes":{"id":"p-0049","num":"0048"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"with Flattened(ManagerID, EmployeeID, Depth, HierarchyPath,"},{"entry":"\u2003\u2003Level1, Level2, Level3, Level4, Level5"},{"entry":")"},{"entry":"as"},{"entry":"("},{"entry":"\u2003select directs.ManagerID, directs.EmployeeID, 1,"},{"entry":"\u2003\u2003\u2003cast(\u2018\/\u2019 + cast(directs.EmployeeID as varchar) as"},{"entry":"varchar(8000)),"},{"entry":"\u2003\u2003\u2003cast(directs.EmployeeID as varchar), null, null, null, null"},{"entry":"\u2003\u2003from AdventureWorks.HumanResources.Employee directs where"},{"entry":"directs.ManagerID is null"},{"entry":"\u2003union all"},{"entry":"\u2003\u2003select sub.ManagerID, sub.EmployeeID, super.Depth + 1,"},{"entry":"\u2003\u2003\u2003cast(super.HierarchyPath + \u2018\/\u2019 + cast(sub.EmployeeID as"},{"entry":"varchar) as varchar(8000)),"},{"entry":"\u2003\u2003\u2003\u2003super.Level1,"},{"entry":"\u2003\u2003\u2003coalesce(super.Level2, case when super.Depth = 1 then"},{"entry":"sub.EmployeeID end),"},{"entry":"\u2003\u2003\u2003coalesce(super.Level3, case when super.Depth = 2 then"},{"entry":"sub.EmployeeID end),"},{"entry":"\u2003\u2003\u2003coalesce(super.Level4, case when super.Depth = 3 then"},{"entry":"sub.EmployeeID end),"},{"entry":"\u2003\u2003\u2003coalesce(super.Level5, case when super.Depth = 4 then"},{"entry":"sub.EmployeeID end)"},{"entry":"\u2003from AdventureWorks.HumanResources.Employee sub, Flattened super"},{"entry":"\u2003where sub.ManagerID = super.EmployeeID"},{"entry":")"},{"entry":"select Flattened.ManagerID, Flattened.EmployeeID, Flattened.Depth,"},{"entry":"Flattened.HierarchyPath,"},{"entry":"\u2003\u2003Flattened.Level1, Flattened.Level2, Flattened.Level3,"},{"entry":"Flattened.Level4,"},{"entry":"\u2003\u2003Flattened.Level5,"},{"entry":"\u2003case Depth when 2 then Flattened.Level1 when 3 then"},{"entry":"Flattened.Level2 when 4 then Flattened.Level3 when 5 then"},{"entry":"Flattened.Level4 end Ancestor1,"},{"entry":"\u2003case Depth when 3 then Flattened.Level1 when 4 then"},{"entry":"Flattened.Level2 when 5 then Flattened.Level3 end Ancestor2,"},{"entry":"\u2003case Depth when 4 then Flattened.Level1 when 5 then"},{"entry":"Flattened.Level2 end Ancestor3,"},{"entry":"\u2003case Depth when 5 then Flattened.Level1 end Ancestor4"},{"entry":"into AdventureWorks.HumanResources.EmployeeFlattened"},{"entry":"from Flattened"},{"entry":"order by Level1, Level2, Level3, Level4, Level5;"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"In accordance with an embodiment, the closure table  stores the transitive closure of the value hierarchy table. The closure table contains one row for every pair of members that have an ancestral relationship of any distance (self, parent, grandparent, great-grandparent, . . . ). The columns in this table include: (1) member key; (2) ancestor key; (3) depth of the member from the root of the hierarchy; (4) distance of the member from the ancestor; (5) key of each ancestor indexed beginning from the current member (ancestor key, ancestor key, . . . ) ancestor key is the same as parent key; and (6) key of each ancestor indexed beginning from the root member (level key, level key, . . . ). In accordance with an embodiment, once created, the closure table will allow the BI server to easily (via optimal SQL) discover the ancestors and descendants of a particular member. Table 2 below illustrates one non-limiting example of the possible SQL used to create the closure table :",{"@attributes":{"id":"p-0051","num":"0050"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":[{"entry":"TABLE 2"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"with Closure(ManagerID, EmployeeID, Distance, HierarchyPath,"},{"entry":"\u2003\u2003Ancestor1, Ancestor2, Ancestor3, Ancestor4)"},{"entry":"as"},{"entry":"("},{"entry":"\u2003select directs.EmployeeID, directs.EmployeeID, 0,"},{"entry":"\u2003\u2003\u2003cast(\u2018\/\u2019 + cast(directs.EmployeeID as varchar) as"},{"entry":"varchar(8000)),"},{"entry":"\u2003\u2003\u2003\u2003null, null, null, null"},{"entry":"\u2003\u2003from AdventureWorks.HumanResources.Employee directs"},{"entry":"\u2003union all"},{"entry":"\u2003\u2003select"},{"entry":"\u2003\u2003\u2003\u2003super.ManagerID, sub.EmployeeID, sub.Distance + 1,"},{"entry":"\u2003\u2003\u2003cast(\u2018\/\u2019 + cast(super.ManagerID as varchar) +"},{"entry":"sub.HierarchyPath as varchar(8000)),"},{"entry":"\u2003\u2003\u2003\u2003coalesce(sub.Ancestor1, case when sub.Distance = 0 then"},{"entry":"super.ManagerID end),"},{"entry":"\u2003\u2003\u2003coalesce(sub.Ancestor2, case when sub.Distance = 1 then"},{"entry":"super.ManagerID end),"},{"entry":"\u2003\u2003\u2003coalesce(sub.Ancestor3, case when sub.Distance = 2 then"},{"entry":"super.ManagerID end),"},{"entry":"\u2003\u2003\u2003coalesce(sub.Ancestor4, case when sub.Distance = 3 then"},{"entry":"super.ManagerID end)"},{"entry":"\u2003from AdventureWorks.HumanResources.Employee super, Closure sub"},{"entry":"\u2003where super.EmployeeID = sub.ManagerID"},{"entry":"\u2003\u2003\u2003and super.ManagerID is not null"},{"entry":")"},{"entry":"select Closure.ManagerID, Closure.EmployeeID, Closure.Distance,"},{"entry":"Closure.HierarchyPath,"},{"entry":"\u2003\u2003Closure.Ancestor1, Closure.Ancestor2, Closure.Ancestor3,"},{"entry":"Closure.Ancestor4,"},{"entry":"\u2003case Distance when 0 then Closure.EmployeeID when 1 then"},{"entry":"Closure.Ancestor1 when 2 then Closure.Ancestor2 when 3 then"},{"entry":"Closure.Ancestor3 when 4 then Closure.Ancestor4 end Level1,"},{"entry":"\u2003case Distance when 1 then Closure.EmployeeID when 2 then"},{"entry":"Closure.Ancestor1 when 3 then Closure.Ancestor2 when 4 then"},{"entry":"Closure.Ancestor3 end Level2,"},{"entry":"\u2003case Distance when 2 then Closure.EmployeeID when 3 then"},{"entry":"Closure.Ancestor1 when 4 then Closure.Ancestor2 end Level3,"},{"entry":"\u2003case Distance when 3 then Closure.EmployeeID when 4 then"},{"entry":"Closure.Ancestor1 end Level4,"},{"entry":"\u2003case Distance when 4 then Closure.EmployeeID end Level5"},{"entry":"into AdventureWorks.HumanResources.EmployeeClosure"},{"entry":"from Closure"},{"entry":"\u2003inner join AdventureWorks.HumanResources.Employee as emp on"},{"entry":"(Closure.EmployeeID = emp.EmployeeID)"},{"entry":"\u2003inner join AdventureWorks.HumanResources.Employee as mgr on"},{"entry":"(Closure.ManagerID = mgr.EmployeeID)"},{"entry":"order by EmployeeID, Distance;"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Once the BI server  receives a query from the user , it can rewrite the queries to employ the closure table generated in the BI repository. In accordance with an embodiment, the rewrite can be performed according to the following rules:\n\n","One non-limiting example of a possible SQL rewrite for the isAncestorOf hierarchical operator is shown in Table 3 below:",{"@attributes":{"id":"p-0054","num":"0058"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":[{"entry":"TABLE 3"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"-- IS ANCESTOR OF"},{"entry":"--"},{"entry":"-- Logical SQL:"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["-- selection EmpSel","(EmployeeID, LoginID, Title, ParentEmployeeID,"]},{"entry":["--","\u2009EmpLevel1, EmpLevel2, EmpLevel3, EmpLevel4,"]},{"entry":"EmpLevel5)"},{"entry":"-- ("}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["--","("]},{"entry":["--","\u2009 Employee.EmployeeID, Employee.LoginID, Employee.Title,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"AncestorValue(Employee.EmployeeID, 1),"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["--","\u2009 ValueAtDepth(Employee.EmployeeID, 1),"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"ValueAtDepth(Employee.EmployeeID, 2),"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["--","\u2009 ValueAtDepth(Employee.EmployeeID, 3),"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"ValueAtDepth(Employee.EmployeeID, 4),"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["--","\u2009 ValueAtDepth(Employee.EmployeeID, 5)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["--","\u2002) when Employee.EmployeeID IS ANCESTOR OF (12, 13, 14)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"-- )"},{"entry":"-- select EmpSel.EmployeeID, EmpSel.LoginID, EmpSel.Title,"},{"entry":"EmpSel.ParentEmployeeID"},{"entry":"-- from Catalog"},{"entry":"-- order by EmpSel.EmpLevel1, EmpSel.EmpLevel2, EmpSel.EmpLevel3,"},{"entry":"EmpSel.EmpLevel4, EmpSel.EmpLevel5"},{"entry":"select a.EmployeeID, a.LoginID, a.Title, b.ancestor1 as"},{"entry":"ParentEmployeeID, b.HierarchyPath"},{"entry":"from AdventureWorks.HumanResources.Employee a"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"inner join AdventureWorks.HumanResources.EmployeeFlattened"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"b on (a.EmployeeID = b.EmployeeID)"},{"entry":"where a.EmployeeID in"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"("]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2002select a1.ManagerID"]},{"entry":[{},"\u2002from AdventureWorks.HumanResources.EmployeeClosure a1"]},{"entry":[{},"\u2002where a1.EmployeeID in (12, 13, 14)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"and a1.EmployeeID != a1.ManagerID -- Exclude self"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"relations"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},")"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"order by b.Level1, b.Level2, b.Level3, b.Level4, b.Level5;"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"In accordance with an embodiment, the BI server enables users to define selections using the hierarchical relationships. As a value hierarchy does not have levels, hierarchical syntax is essentially the only mechanism to define dimensional selections. In accordance with an embodiment, the following operators are provided to allow users to express hierarchical selections:\n\n","In accordance with an embodiment, hierarchical Selections will result in a flat list of members, without details on the parentage. For example, Is Descendant of \u2018Ed\u2019, would return all the employees within Ed's organization. In accordance with one embodiment, the reporting lines (\u2018Jim\u2019 reports \u2018Ed\u2019, \u2018Eric\u2019 reports to \u2018Jim\u2019) details can be obtained by drill insert or by view parentage type queries. The view parentage type queries provide a navigation link that allows users to click on a member in a value hierarchy and view (as a separate tabular query) all the managers in the employees reporting line. This result can be sorted based on the distance of each ancestor from the current employee.","In accordance with an embodiment, the BI server can provide drill-insert for Value Hierarchies. Users are thus able to explore a value hierarchy via one-click drills. As such, the system can determine that a selected employee has direct reports and hence make these members drill-able when selected by the user.","In accordance with various embodiments, two types of aggregation are provided with Value hierarchies In accordance with an embodiment, tree aggregation aggregates a node's values and all its descendant values. Node aggregation, on the other hand, aggregates all values of a node.","In accordance with an embodiment, the user or administrator can create a value hierarchy by using administration tool. For example, the user can specify: (1) Parent and a Child item. (eg. \u2018Manager\u2019 and \u2018Employee\u2019); (2) Name for the hierarchy; and (3) Attribute columns that contain the properties of the Value Hierarchy (for example, Title, Salary, Age etc. are all properties of an employee that can be modeled as attributes of the Organization Value Hierarchy).","In accordance with an embodiment, the following properties apply to value hierarchies: (1) a dimension containing a value hierarchy cannot contain any other hierarchy; (2) value hierarchies will not contain named Levels; (3) every hierarchy (dimension) member should have a unique key (the child column should be a primary key for the value hierarchy folder); (4) each child should uniquely identify a Parent; (5) the child and parent items should be of the same data type (typically, they are expected to be ID columns with a label column associated with the child column); and (6) there should be uniqueness and a non-null constraint on the child column.","In various embodiments, the BI Server requires additional metadata and table structures to be able to support value hierarchies. In accordance with an embodiment, the administration tool creates this metadata (and the required underlying tables) as a part of the value hierarchy creation. The required enablement can vary depending on the data source.","In accordance with an embodiment, for relational data sources, the BI Server will need a closure table as previously described. Preferably, this structure should be deployed in the schema that holds the source table for this dimension (and the corresponding facts). The metadata about these tables contains the column bindings for the closure table. The role of the metadata is to identify each of the required.","In accordance with an embodiment, for multi-dimensional sources, the BI server needs the name of the parent-child relation. The value hierarchy (Dimension) will own the enablement structures. Users will be able to either have the Admin tool create the tables directly or obtain a script from the system, create the tables and register these tables with the value hierarchy. These tables may need to be refreshed occasionally (for example, the organization tree will change if there is a re-organization of the company).","In accordance with an embodiment, a set of logical SQL extensions is provided on the BI server. For example, a list of operators below can be used with value hierarchies. These operators can be used within the when clause of a selection, or within where\/having clauses of a logical SQL statement.\n\n",{"@attributes":{"id":"p-0065","num":"0075"},"figref":"FIG. 4A","b":["408","410","412","402","404","414","400","414"]},"In accordance with an embodiment, skip level nodes are never displayed and do not affect computations. When sorting hierarchically, members will appear under the nearest ancestors. For example, as illustrated, when the BI server encounters the null value node for the state, the isLeaf( ) function may be used to determine if the NULL in the display is drill-able and contains further nodes below it. All computation can subsequently treat the NULL value as a unique child within its parent. Level-based measures and aggregate-by calculations can group all the skip-level nodes together. For instance, if \u2018USA\u2019 had another city that didn't belong to a state, in addition to Washington D.C., both of these cities can be grouped together under the NULL parent. In accordance with an embodiment, the dimension level object can be extended to contain an additional property called NullsAllowed. Levels that can be NULL, in a ragged or skip-level dimension should contain TRUE for this property. Users\/Applications can use this property to determine whether they should use the IsLeaf function call to discover the drill opportunities for the current dimension member.",{"@attributes":{"id":"p-0067","num":"0077"},"figref":"FIG. 4B","b":["422","428","430","432","1","2","3","424","426"]},{"@attributes":{"id":"p-0068","num":"0078"},"figref":"FIG. 5","b":["500","502","504","506"]},"Further details regarding value hierarchies, skip level hierarchies and ragged hierarchies can be found in U.S. Provisional Application No. 61\/349,754, which is incorporated herein in its entirety, including all of the Appendices filed therewith.","Throughout the various contexts described in this disclosure, the embodiments of the invention further encompass computer apparatus, computing systems and machine-readable media configured to carry out the foregoing systems and methods. In addition to an embodiment consisting of specifically designed integrated circuits or other electronics, the present invention may be conveniently implemented using a conventional general purpose or a specialized digital computer or microprocessor programmed according to the teachings of the present disclosure, as will be apparent to those skilled in the computer art.","Appropriate software coding can readily be prepared by skilled programmers based on the teachings of the present disclosure, as will be apparent to those skilled in the software art. The invention may also be implemented by the preparation of application specific integrated circuits or by interconnecting an appropriate network of conventional component circuits, as will be readily apparent to those skilled in the art.","The various embodiments include a computer program product which is a storage medium (media) having instructions stored thereon\/in which can be used to program a general purpose or specialized computing processor(s)\/device(s) to perform any of the features presented herein. The storage medium can include, but is not limited to, one or more of the following: any type of physical media including floppy disks, optical discs, DVDs, CD-ROMs, microdrives, magneto-optical disks, holographic storage, ROMs, RAMs, PRAMS, EPROMs, EEPROMs, DRAMs, VRAMs, flash memory devices, magnetic or optical cards, nanosystems (including molecular memory ICs); and any type of media or device suitable for storing instructions and\/or information. The computer program product can be transmitted in whole or in parts and over one or more public and\/or private networks wherein the transmission includes instructions which can be used by one or more processors to perform any of the features presented herein. In various embodiments, the transmission may include a plurality of separate transmissions. In one embodiment, the computer readable storage medium is non-transitory.","The foregoing description of the preferred embodiments of the present invention has been provided for purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise forms disclosed. Many modifications and variations can be apparent to the practitioner skilled in the art. Embodiments were chosen and described in order to best explain the principles of the invention and its practical application, thereby enabling others skilled in the relevant art to understand the invention."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 4A"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 4B"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
