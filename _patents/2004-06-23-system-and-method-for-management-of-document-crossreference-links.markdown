---
title: System and method for management of document cross-reference links
abstract: A computer-implemented system and method for handling documents. Data is stored about links between document content. A subset of the document content is defined. If links are identified as broken due to the determination of the document content subset, then the identified broken links are resolved before delivery of the document content subset.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07290205&OS=07290205&RS=07290205
owner: SAS Institute Inc.
number: 07290205
owner_city: Cary
owner_country: US
publication_date: 20040623
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The present invention relates generally to computer-implemented handling of document content and more particularly to handling document cross-references.","Online documentation has gained popularity and acceptance as the world wide web and the Internet has become a regular part of business life. In business settings, online documentation is expected and utilized for many purposes, such as for providing information about a software product. Online documentation is expected to include links (e.g., hyperlinks) among various document content to enhance the reader's experience with the material. Because document cross-reference links are typically required in the online documentation, such links have become part of the documentation development process.","Creation and management of a large quantity of cross-reference links are particularly challenging at least in part because links are tightly related to document content, and typically the content is constantly changing. Current link management approaches are inefficient in handling links among multiple documents or document parts, and accordingly improvements are needed.","In accordance with the teachings provided herein, systems and methods are provided for handling documents. As an example of a system and method, data is stored in a database about links between document content. A subset of the document content is defined. If links are identified as broken due to the determination of the document content subset, then the identified broken links are resolved before delivery of the document content subset.",{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 1","b":["30","40","42","44","50","52","54","56","30","40","42","44","50","52","54","56","60","62","42","50","60","54","60","42","70","42","80"]},"Accordingly, a reader of the documentation  will not click on a hyperlink in online documentation and get a \u201cpage not found\u201d error. In a print book, the reader will not be referenced to a book that is inappropriate for the reader. When a user follows a link or reference, the expected information will be found at the destination.","The system  can be used in many environments, such as in the development and management of large documentation products. Typically, organizations that produce such documentation exist in corporate technical writing divisions, government, publishing companies, and large research organizations. In organizations of considerable size such as these, the documentation development process is characterized by projects involving many writers, editors, and documentation production specialists, and reliance on computer technology in all or most phases of the process.","In the example of a large documentation product environment, a writer may establish a cross-reference hyperlink that acts as a connection between related units of information, such as a definition of a term, or a reference to more detail. Cross-reference hyperlinks are created by a writer while working on the content or are established automatically, such as in a table of contents or index. Cross-reference hyperlinks can include a starting point (\u201csource\u201d), an ending point, (\u201ctarget\u201d) and a direction. Cross-reference hyperlinks could also be bi-directional.","To handle the links, link manager  may be involved in a portion of the documentation development process or throughout the entire documentation development process. As illustrated in , a link manager  may be involved during the document content authoring process . The authoring process  is a phase in the documentation development process in which new content is created or existing content is updated and modified. Creating links takes place during authoring.","During the authoring step , a link manager  can be used to detect which links are impacted by an editing change to the text in a document content portion or module. Then, it can react appropriately: either by automatically adjusting the link to account for the change, or by informing a user of a problem with links due to the editing change. Links may also be edited separately. When the final documentation product needs to be produced, the system  can be configured to interpret the structure of the document in context of its document collection (also known as a product grouping), to ensure that all links will be valid in the documentation product. When ambiguities are detected in links during document resolution, the system can notify the user and provide a set of choices to address the ambiguity. It can also be configured to automatically detect invalid links and remove them.","Link managers may be configured differently depending upon the situation at hand. As an illustration,  shows a link manager  utilizing link data association(s)  that contain link information about which links exist among the document content. The link association(s)  can be configured such that links are stored and managed as unique entities.  shows a configuration wherein the link information is stored separately in a link data store  from the document content (, , , ). The document content (, , , ) may still contain, if so desired, link information, but link information is also stored separately for access by a link manager , such as, but not limited to, in a different location on a server or on a separate server.","The link data store  may be augmented in different ways. One augmentation includes storage of information in the link data store regarding document content version and which links are applicable to which version. This allows a link manager  to remove confusion about which instance of a section is the correct reference in a link if a document section (e.g., a paragraph) was reused several times in a document collection.","As another illustration of an augmentation to a link data store , the link data store  may allow definition of rules for creating links. The rules can be based on one or more factors, such as document structure as revealed in the markup of the text, the role of the link, etc. For example, a rule could be established that requires all links with a source location of a \u201cglossary term\u201d to have a target location of a \u201cglossary definition,\u201d and its link role is \u201cglossary link.\u201d A link manager  can be configured to periodically access the link data store  in order to recheck the validity of existing links to the rules, so that when a rule changes, links that violate the new rule are detected.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 5","b":["110","130","110","110","112","112","114","114"]},"The third phase  is document transformation, which translates the internal representation of the complete document to the desired output format . For example, document transformation  can deliver documentation in many formats . The formats can be paper documentation, like books and manuals, or a collection of HTML pages for use with a web browser. Other formats may be required for the same material, such as PostScript\u00ae, and PDF (Portable Document Format). Through use of the techniques disclosed herein, the production processes  result in links that \u201cwork\u201d in the final document product .","Operational processes  establish and maintain software tools for use in the production process . These procedures can occur at the same time as the production process, but typically do not directly involve creating, editing, or producing documents. For example, content and release management processes  support the business of documentation project management. Additionally, tools  used for documentation development are maintained, monitored, and upgraded on their own schedules.","It is noted that the steps may occur in the sequence shown in , but also could occur differently, such as all phases of the process taking place simultaneously for different projects. It should be understood that similar to the other processing flows described herein, the steps and the order of the steps in the flowchart described herein may be altered, modified, deleted, and\/or augmented and still achieve the desired outcome.",{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 6"},"A module may be a unit of XML (eXtensible Markup Language) content, typically containing a complete idea or concept. It may be a fluid concept, and a module may be very succinct (e.g., a definition of a term) or very large (e.g., an entire book). In this example, the module is the unit of content manipulated by the content management system . The content management system  usually defines modules using XML tags, and this can be configurable. (It should be understood that approaches other than XML may be used.) Content modules may also include media files, metadata, links, and data in a database.","Modules may include other modules to form composites. For example, a \u201cchapter\u201d module may include three or four topic modules, which in turn may include definition modules, example modules, etc. Any particular module may be included in an arbitrary number of other modules.","A document can be considered the largest module, usually representing a whole concept area (e.g., a book). Documents contain hundreds of other modules, and they may include the same module several times.","A document production system can include two related domains: the content domain and the deliverable domain. They are useful in defining the scope in which the software can complete its tasks. The content domain is an environment in which modules are developed and maintained. The deliverable domain is an environment in which subsets of content from the content domain are prepared for delivery of documentation product .","Links are established among the different modules. A link may include a relationship between two locations within a domain of documentation. In this example, a location is a specific markup tag and its content. The markup schema or document type definition (DTD) can be constructed to provide the \u201cgranularity\u201d that is desired. For example, if a sentence is to be the target of a link, then that sentence is identified as a location, and therefore is enclosed in markup tags. If a specific word is the source of a link, then that word is enclosed in markup tags, which designates it as a location.","Because the link is a relationship between two locations, it may not be directly related to the method of rendering the link in the documentation product. For example, an entire chapter may be defined as a link source. However, this does not necessarily mean that all of the text of the chapter will appear as blue underscored text in a web page. The document transformation process determines how to manifest the link in the target medium based on its own rules. In this example, document transformation might place the title of the target location at the very end of the chapter for the \u201cclickable text\u201d in a web page.","A link is an identifiable object, and can have its own attributes. The attributes can be stored separately for access by a link manager program. The attributes characterize the relationship between the source content and the target content. Attributes can include: the specification of the source location; the specification of the target location; and the specification of its role.","Different kinds of links may be used. A first type of link can be a content link, and its source and target locations can be defined within the content domain. A content link has attributes, such as the following that enable effective use in the content domain (e.g., during authoring):\n\n","Another type may be a deliverable link which is a link in the deliverable domain\u2014the source and target locations exist only within the deliverable domain. The attributes on the deliverable link may be as follows:\n\n","Multiple levels of unique identification can be used. First, each documentation module may be identified uniquely over the entire domain of the documentation development system, and this identification can be persistent. This may be accomplished using a content management system  that also requires unique identifiers. A module identifier is typically a random or sequential alpha numeric value. As an illustration, a module could be identified by a unique alpha numeric value.","Second, each markup tag that can be used as a location has an identifier. When using XML, for example, the tag identifier can be implemented as a specific attribute on the tag, with the identifier value as the value of this attribute. This identifier is unique within the module.","As mentioned above, the content domain is the environment in which modules are developed and maintained. This is the domain of the authoring step  in the documentation development process illustrated in . This domain may be characterized by access to the organization's entire or a portion of the documentation resources. Not only are individual modules defined in this domain, but also definitions of documentation products, such as books, are defined.","As shown in , the authoring process  is the phase in the documentation development process in which new content is created or existing content is updated and modified. Creating links takes place during authoring. The system shown in  facilitates the management of a potentially large number of links. It is designed for the people who create and edit links. The example shown in  uses three supporting systems: XML authoring software, a content management system , and a link storage system or linkbase . These supporting systems can be independent, and a link manager can coordinate their activities.","Markup language can be used in the authoring process  and is a technique for including meta-information about text within text. Most people are familiar with the markup language of the World Wide Web, HTML (Hypertext Markup Language). Several other markup languages exist, including SGML (Standardized General Markup Language) and XML. The use of a markup language manifests the structure and content of each module. It also provides a means to identify specific fragments of text (e.g., individual sentences or words) within modules. Markup language also provides a way to store content in a way that is independent of any specific documentation delivery format, such as HTML, PostScript, or PDF (Portable Document Format).","The document resolution step  is the process that migrates a set of documentation products from the content domain to the deliverable domain. The following step, document transformation , takes place in this domain. This environment can be considered a group of document collections, each representing a particular suite of documentation products created at a particular time.","Different components can be used to assist in the document production process. For example, a link database  can be utilized as a data component of the system. The link database  is the externalization of cross-reference links, that is, links are not stored within the XML document, rather they exist in an independent repository.","The system for this example uses a technique for specifying locations within individual document modules, a data model for encapsulating and storing links persistently, the link database, and the APIs (Application Programming Interfaces) for allowing system components to utilize linking capabilities. External storage  of the links and the link data model help the system to search for, detect, and automatically resolve problems with links in every other component. However, it should be understood that one or more components can be omitted and still achieve the desired functionality.","To help ensure that the links are high quality, the link database  can include a rules subsystem to govern the definition of links in the content domain. The rules define the set of valid relationships based on the source location, target location, and link role. Rules are defined, and whenever a new link is created, its source, target, and link role are validated against the rules.","A rule can be structured in different ways, such as being made up of the following components: a source tag name, a target tag name, and a role. For example, a rule may be defined as follows: (paragraph, chapter, xref), meaning that if a \u201cparagraph\u201d tag is the source location of a link, then its target location must be a \u201cchapter\u201d and its link role must be \u201cxref.\u201d Any of these components may be a wildcard, which is interpreted to mean \u201cany valid value.\u201d For example, a rule (<wildcard>, definition, <wildcard>) states that a \u201cdefinition\u201d tag is a valid target location tag, for any link with a valid source location tag and link role.","The document resolution process  prepares the cross-reference links defined with the XML document modules for document transformation. The system migrates the cross-reference links defined among modules to an intermediate format that is specific to the set of documents being produced. This can be an automatic or a semi-automatic process guided by an expert user. The system performs as much of the migration as it can and may accept input from the user to resolve ambiguities, such as multiple potential link targets. The system enables the user to review each ambiguous situation and to resolve the problem. The system retains the resolution between iterations of the process, further automating it. This is also called the link finalization process.","Document transformation  is the process of converting the content from its internal representation to an output format suitable for users, such as HTML, XML, or format for printing (hard copy). Each cross-reference link utilized in the output document is extracted from the link database  and translated to the format that is appropriate for the desired output medium. For example, a link may be translated into an <a href=\u201c . . . \u201d> tag in HTML, or the phrase \u201cSee also Chapter 1\u2014Introduction\u201d in a printed book.",{"@attributes":{"id":"p-0057","num":"0061"},"figref":"FIGS. 7A and 7B","b":["200","201","202","203","204"]},"If it is a new module, the user bypasses the content management system and starts with an empty editor ().","Next, the user performs the desired writing activities (, ). Actions permitted by an XML editor may include activities, such as keyboard input (typing), copying, pasting, cutting, deleting, etc. These actions may impact links. While these actions are taking place, the changes can be retained in \u201cworking\u201d memory. They are not stored permanently in the content management system or the link database until the user explicitly performs a check in or cancel action unless otherwise configured. The user may also choose to work directly with the links through the Link Control Panel ().","When the user is finished working on the content, either a \u201ccheck in\u201d or a \u201ccancel\u201d action is performed (, ). The check in action permanently stores the XML content in the content management system and stores the links in the link database. If the modified content involves one or more existing modules, a new version of each module is created in the content management system and the content management system removes the lock on the modules or there can be a merge of new content (). The links are stored in the link database, after a merge step if needed, thereby in this example overwriting any existing links that had been changed (). If there are one or more new modules in working memory, a new module is created in the content management system (), and the new links are added to the link database (). The cancel action ignores the changes in both the XML modules and the links, so neither the XML content nor the links are changed in the content management system and link database (, , , ). If one or more modules had been checked out when the cancel action is issued and if needed, the locks in the content management system can be removed ().",{"@attributes":{"id":"p-0061","num":"0065"},"figref":["FIG. 8","FIGS. 7A and 7B"],"b":["204","206","220","221","222","223"]},"However, it is possible that actions in the XML editor window indirectly alter links. The action is detected (), and the link control panel is updated to reflect the changes ().","Completion of editing the links () is signaled when the user completes the editing session with either a check in action or a cancel action. To allow the user to view and manipulate the links that are pertinent to the XML modules displayed in the editor, links are displayed in a link control panel user interface.",{"@attributes":{"id":"p-0064","num":"0068"},"figref":"FIGS. 9-12"},"The link finalization process may be completely automatic, with broken links and ambiguities resolved according to a pre-specified default behavior configuration. User interfaces assist the user to determine how link finalization should be performed.  shows an example at  of link finalization options. A user can select different options for determining how the link finalization processing should occur. For example, the user may selection an option to produce output with no links, which can be useful in such situations as previewing the look and feel of HTML output without the overhead of link processing. Another option may include using internal targets when possible, which can be useful in such situations as reducing the number of decisions for the user. As another example of the many different options which can be available to a user, the user may select to refinalize all links, which can be useful in such situations as when the content has changed enough that the deliverable link decisions are to be redone. The user selects the continue button to begin the link finalization process.",{"@attributes":{"id":"p-0066","num":"0070"},"figref":["FIG. 10","FIG. 11","FIG. 12"],"b":["229","229","229","229","229","229","229"]},"As mentioned above, the starting point for writing activities is the display of the modules in the XML editor and the display of links in the link control panel (e.g.,  at reference numerals , ). Typically, the user performs many writing activities while working on one or more modules. Other actions that do not impact links (e.g., typing in text) may be performed at any time during the process, which illustrates that processing can be been designed to be independent of such contextual factors.","Actions can be categorized in two ways: direct actions and indirect actions. Direct actions specifically involve links, for example, when the user adds a new link or deletes an existing link. Indirect actions occur when the user modifies the XML content and the modification has ramifications for links. For instance, a user may delete a section of XML text, and a location (e.g., an XML tag) exists within the text that is used as a target of a link.",{"@attributes":{"id":"p-0069","num":"0073"},"figref":["FIG. 13","FIG. 18"],"b":["230","231","232","233","234","235","236","237","238","239","240","241"]},"A process to delete a link is shown in . The user can see all links related to the document in the link control panel. The user selects the link of interest and views the attributes of this link in the link control panel window (). The user initiates a delete action on the link (e.g., clicks a \u201cDelete Button\u201d in the user interface) () and the link is marked as deleted in the session's working memory (). The delete becomes permanent when the check in action is performed (as discussed later with respect to ).","A process to modify a link is shown in . The user can see all links related to the document in the link control panel. The user selects the desired link and views the attributes of this link in the link control panel window (, ). The user then performs the desired editing actions.","If the user wishes to change the title of the link (or other text-based attributes of the link), the new values can be typed over the existing values in the link control panel window user interface (, ).","If the source location of the link is to be changed (), the user selects the new source location in the XML editor window and places the cursor within that location. The user indicates that this is a new source location in the link control panel (e.g., by clicking a button) (). The system verifies that the source location is a valid location for the existing target location and link role (), and if it is not valid, it displays an error message, and allows the user to choose another new source location. If it is valid, the new source location is assigned.","If the target location of the link is to be changed (), the user selects the new target location in the XML editor window and places the cursor within that location. The user indicates that this is a new target location in the link control panel (e.g., by clicking a button) (). The system validates the target location for the existing source location and link role (), and if it is not valid, displays an error message (), and allows the user to choose another new target location. If the target location is valid, the new location is assigned as the target.","If the link role is to be changed (), the user selects the new link role value from a list of valid values in the link control panel user interface. The system verifies that the new role is a valid value for the existing source and target locations (). If it is not, an error message is displayed, and the user must choose a different role value (). Otherwise, the new role value is assigned.","The user may continue to make any of these updates until all desired link modifications are made (). When the user is done with the changes, the changes can be ignored or saved. If they are ignored, then any changes made are dropped, and the link is restored to its original state. When the changes are saved to working memory, the types of changes are analyzed and the following actions may take place:\n\n","As with the other direct actions, the changes are not stored permanently in the link database until a check in procedure is performed (as discussed later with respect to ) unless otherwise configured.","The user may delete a section of text by any of several ways in the XML editor:\n\n","When the user deletes a section of content from an XML document in the editor, it is possible that the section deleted contains an XML tag that is used as a source location or a target location in one or more links. Furthermore, an implementation may lack the ability to detect all of these actions; this may be due to the capabilities of the XML editor and which functions it exposes via its API.","A process to address changes when a section of text is deleted (and the delete is detected) from the XML editor window is shown in . The user initiates the delete action (). Just before the delete action actually occurs, the system accesses the section of XML content to be deleted. It locates each potential link location within the XML by iterating through all the XML tags in the section. For each potential link location, it searches the list of links in working memory for the location ID as either a target location () or a source location (). If a location is found to be a link target location, the link(s) that are defined with this location as their targets are marked as broken in working memory (). If a location is found to be a link source location, the link(s) that are defined with this location as their sources are marked as deleted in working memory (). After these procedures are complete, the delete action continues as normal.","If the source location and the target location are both located within the deleted text, the procedures for target and source locations described above will both be executed on the same link.","Further processing may be required on these links before they are saved permanently in the link database (as discussed later with respect to ).","A common feature in text and document editing software is a \u201cpaste\u201d action. This action occurs after the user has temporarily stored a section of content in a virtual holding area (typically called the \u201cclipboard\u201d) and then requests for that text be inserted in a document at a specific location. Content is placed on the clipboard by either a copy action or a cut action. In the XML editor, the clipboard is likely to contain XML content, which may include locations that are used in links.","A process to address changes when a section of text is pasted (and the paste action is detected) from the XML editor window is shown in . The user initiates the paste action (). Before the paste action actually occurs, the system accesses the content to be inserted in the document, detects if it is XML content. If it is XML, the system searches for locations within it. Any location may be used in a link, and the system searches the list of links in working memory for the location ID as either a target location or a source location in a link. It first detects the special case of those links that have both source and target locations within the content to be pasted (). If this is the case (), for each such link, it may create a new link as a copy of the detected link. Next, it detects locations that are used as targets of links, in which the source locations of these links are not located within the content to be pasted (). For these links, the system may create a copy of the link with the source location set the same as the original link, and the target location the location within the pasted text (). Finally, the system detects locations that are used as source locations of links, in which the target locations are not located within the content to be pasted (). The system may create a copy of each such link, with the source location as the location in the pasted content, and the target location the same as the original link ().","When a system is configured to create new links, the status of all copied links is set to \u201cnew.\u201d Then, the final paste action completes, and the text is inserted as the user originally instructed (). Further processing may be performed on these links before they are saved permanently in the link database (as discussed later with respect to ).","An \u201cundo\u201d action is provided in most editor software. This feature allows the user to return the editor to a previous state by reversing actions the user performed. Since the user can undo actions that affect links, the undo action itself can address links as well.","In another example of the system, it is possible to support undo using well-documented techniques for implementing undo-redo stacks in interactive editing applications. A system can be designed to reassess any undetectable changes as a part of the check in procedure.","A check in procedure occurs when the user decides to commit the changes made during the editing session and save them permanently. Technically, the document is stored in the content management system as the next version. At the same time, the link database is permanently updated with the changes to links in working memory.","A check in procedure is illustrated in . (This procedure is referenced in  at reference numerals , , , .)","The editing session proceeds until the user decides to check in the document (, ). Indirect changes could also be handled at this point rather than dynamically during editing. The system scans the XML content of the document for any duplicate IDs (). If any are found, the system will assign a new unique value to the ID attribute on the XML tag (). However, this ID value may be used as a source or target resource in a link, and it may not be clear which location (of the duplicates) should actually be referenced in each link. The system can defer to the user, informing the user of the situation and taking input from the user to resolve the conflict ().","Next, the system checks in the XML content () in the content management system. The check in procedure includes a step that breaks the XML content from the editing session into modules, if the system finds it should do so. After the check in procedure completes, the XML content can remain available in memory. The system scans the content again, looking for the new definitions of XML modules. If any are found, any links that reference locations within the new modules are updated to be consistent with the new module structure ().","Following this step, the system checks the consistency of the links in working memory with the current state of the document (). This procedure contains the logic to account for the undetected edit actions mentioned in the undo procedure discussed above. For example, suppose a new link is in working memory, and this link was created when the user pasted XML content during the editing session. The system checks that this link is still valid (e.g., that the source location and target location exist as specified in the link). If, for instance, the source location is not found, the system assumes that the user performed an undetected action that negated the creation of the link. The user could have done an \u201cundo\u201d immediately after the paste. Therefore, this link should not be saved permanently.","Once the valid links are confirmed and the invalid links are eliminated, the system stores the set of links associated with the modules that were just checked in (). It examines the link status of each link in working memory and determines how to address the link. For example, if a link status is \u201cdeleted,\u201d the system locates the link and removes it from the link database; a status of \u201cnew\u201d creates a new link in the link database. The check in process also detects multi-user conflicts\u2014when another user has changed or deleted a link that this user is attempting to save (). Again, the system can describe () the situation, and allowing the user to decide how to address the problem. When all such conflicts are resolved, the check in procedure is complete.","As discussed above, link data can be stored in many different ways, such as in the format shown in . The links can be stored in a persistent, multi-user data store (e.g., a relational database) and an API allows other components to interact with it. As a separate subsystem, the link database provides access and maintenance to the links outside of the context of the documents that use the links. This allows the documents to exist with or without links, and it allows the links to be manipulated, processed and analyzed without having to access the XML documents.","The link database may be implemented in many different ways, such as in Oracle 8i as a relational database with a Java language API.","The link database's data model can include one or more components: the content link database , the deliverable link database , and the transformation mapping link database . An entity relationship diagram for a link database is shown in .","The content link database  can include tables and dynamic views that are used primarily during the authoring phase of a document development process. It includes tables for the link information, the link source and target locations, and link editing status. Generally, the users interact with this link database while they are authoring content, creating and editing links. The links in a link database exist within the context of the content domain.","A deliverable link database  may include tables and dynamic views that are used during the resolution and transformation phases of the document development process. The table structure can be similar to the content link database , and may involve a distinction in the context, that is the links in this link database exist in the context of the deliverable domain. In the data model, the deliverable collection entity reflects the context. Users interact with the deliverable link database  during document resolution. The links in this link database are derived from the links in the content link database .","A transformation mapping link database  may be a single table that aids in the mapping of link locations to actual file names during document transformation to HTML.","Other structures can be used to contribute to the efficiency and reliability of the database. For example, indexes speed access to database table rows. They are implemented on primary and secondary keys on the tables. Surrogate keys are used for primary keys of nearly all tables in the database. A surrogate key is a unique, random number for the primary key of a table. This may be done because links do not have a unique data value (or set of values) that could be used as a primary key. Sequences are automatic number generators used to create the surrogate primary key values. Constraints can be used to protect the integrity of the data. The link database implements primary key, null, uniqueness, and referential integrity constraints. Since the link database allows multi-user access, it is conceivable that two users would attempt to change the same link (or other data) at the same time. A link database can implement an optimistic locking scheme because although it is possible for users to update at the same time, it is unlikely. The database can be designed to detect when this happens and return an error to the software, and the system can decide how to handle the conflict. Triggers can also be used. Triggers run automatically when specific actions are taken. For example, when a new row is added to a table, a trigger runs to assign the surrogate key using the sequence. Stored procedures are small programs that perform actions that are integral to the integrity of the data. These two facilities are used for functionality that are to be performed quickly and reliably.","While examples have been used to disclose the invention, including the best mode, and also to enable any person skilled in the art to make and use the invention, the patentable scope of the invention is defined by claims, and may include other examples that occur to those skilled in the art.","As an example of the broad scope of the systems and methods disclosed herein, the content and release management process described on  at  may include the following. Content and release management is a process that enables the ongoing operation of the documentation development environment. Technical documentation is associated with a product (e.g., software), and that product is released for sale periodically over time. With each product release, the product's features change and improve. Accordingly, the documentation also changes; nevertheless, most of the product features remain the same. To minimize the amount of rework, the documentation for the new product release can be created from the old product release, and the content is modified as necessary. Links, as valuable information assets, could also be preserved from one release to the next. At times, an old product release is modified for such reasons as clarifying a point or correcting an error. Therefore, the publication system can allow for changes to old product releases. The corresponding linking data may also be allowed to change with the product.","A document module may be deleted when it is no longer used or if its content is redundant. When a document module is deleted, all links that have either a source or target resource within that module are deleted. If the content management system provides user ownership information of modules, the system can report the deletion of such links to interested users. Additionally, if the document module includes other document modules, the deletions must cascade through all included modules.","When new document modules are created for a new release of a document, the new modules can be assigned new module identifiers, and all the tags within the modules receive new tag identifiers. The links from the original modules are copied and associated with the corresponding new modules and tags in the new modules. There are three cases:\n\n","Therefore, for each link with at least one resource within the modules being created for a new release, exactly zero or one link will be created. If the content management system provides user ownership information of modules, the system can report the link creation activity to the users so that they can take action if necessary.","The new links are marked as part of the new release and the original links remain available for changes if the old product release is modified.","A document resolution process (e.g., as shown at  on ) can include initiating the process to render the documentation in a deliverable format, such as PostScript, PDF, or HTML. The documentation may be delivered to a customer via many different types of mechanisms, such as a network, a CD-ROM, etc. A process for document resolution is shown in . A user who is performing document resolution specifies what document(s) is\/are to be produced. This is done by selecting the desired deliverable collection () and the documents within the collection (). Next, the system begins its extraction and flattening process (). This process gathers all of the modules in the desired documents, creates a copy of each one from the content management system and stores them locally. Because modules can include other modules, the flattening portion of this procedure includes the content of the modules to make a continuous stream of XML. This procedure effectively takes the \u201csnapshot\u201d of the content that will be used in the final document.","A link finalization process begins (). A purpose of link finalization is to migrate the links from the authoring context to the deliverable context. The process ascertains that only valid links are migrated. During this process, all links that contain a source or target resource (or both) in any module in the document are examined for problems or ambiguities. The system addresses these issues in the following ways:\n\n","If any ambiguities exist, the user can intervene to tell the process which instance is the correct one for the target of the link. The user can intervene via a link finalization user interface () to resolve the ambiguity (). To help the user determine which is the appropriate link target, the interface can display all of the potential target locations for each module inclusion, and the user may choose the desired one. The user interacts with the system until all ambiguities are resolved ().","Finally, the system saves the resolved document modules for use in the document transformation process. At the same time, the system saves the finalized links to the deliverable link database (). Finalized links are derived from links in the content link database.","Resolving link ambiguities can potentially require much user involvement and time. A link manager can be configured to minimize this burden on the user by utilizing information from the previous link finalization process on the same document. When an ambiguity exists, the system checks for a previous version of the link in the deliverable link database. If one is found, it checks that the link is still valid for the current finalization process, and if so, it uses this prior information rather than requiring user intervention.","At the end of the link resolution process, each document can exist as an individual file, rather than as modules within the content management system. The deliverable link database is populated with the set of links for this transformation process.","The next step is document transformation, which proceeds after document resolution. Document transformation is a process in which the content tagged in XML is translated into a delivery format, such as PostScript, PDF, or HTML. It is also possible to transform the document into an intermediate format, such as a different XML tagging scheme. This process takes the document files and deliverable link database created by the document resolution process, and creates one or more files that are ready for delivery.","Document transformation can be accomplished in many ways, such as by using existing XML tools XSL-FO (Extensible Stylesheet Language Formatting Objects) and XSLT (XSL Transformations). XSL-FO is an XML vocabulary for specifying formatting semantics. As an illustration, after XML transformation, the results can be put through an XSL-FO engine for formatting. This adds information such as page geometry, page numbers, and table layouts and could be used to generate print hardcopy output.","These technologies use a stylesheet, which is a file containing a set of instructions specifying how to transform an XML tag into another format. For example, a stylesheet for XML to PostScript may specify that a <title> tag be transformed into 24-point bold, centered text in Times New Roman font. Similarly, a stylesheet for XML to HTML may specify that the same <title> tag be transformed into an HTML <h1> tag.","The transformation technology may include an API allowing a program to be called at certain points during its processing. In this example, whenever an XML tag is encountered that has an identification attribute, a program is invoked to determine if processing involving links is needed. The program interacts with the link database and provides information needed by the transformation process to include a link properly.","Such a process is illustrated in . The user selects the desired output format (). The system locates the stylesheet for the desired format () and begins the process of transformation (). When an XML tag is encountered that may be involved in a link, the system invokes the program via the XSLT API (). Two situations are detected and addressed in the program as follows:\n\n","The XSLT processing accepts the information from the custom software and formats it appropriately, possibly including the tag content (). Additionally, it is possible for a location to be involved in several links. The program and the XSLT processing can account for this possibility during formatting.","The formatted content may be written to a file immediately or it may be held in memory temporarily until it is appropriate to do so (). This decision is guided by how the stylesheet specifies the link output format.","While there is still content to be transformed (), the process continues; otherwise, transformation is complete. When complete, the system determines if the desired format (selected previously in item ) is a hard-copy format (), that is, the format is for printed material, such as a book. If it is, another processing step is required using XSL-FO. For hard-copy formats, the stylesheet chosen in step  may contain an intermediate markup instruction set for XSL-FO. The final processing step () interprets the intermediate instructions and performs the final formatting work to produce a file suitable for publishing in a book. For instance, the file is formatted for a particular paper size (8.5\u00d711, A4, etc.) and includes headers, footers, page numbers, etc.","Additional processing may be done for documents being formatted in HTML. The input to this process can be the XML content per document and the deliverable link database. For print and intermediate format documents (e.g., PostScript, PDF, and XML), the output from this process can be the same content, only formatted. For HTML, a suite of files can be produced. The breakdown of the single XML file into many smaller HTML files is configurable and variable, as specified by the transformation process\u2014an example might be one HTML file per chapter of a book. Since the file name is a part of the URI (Uniform Resource Identifier) specified in the \u201chref\u201d attribute of the anchor tag in HTML, the file names and the locations are kept track of within the files, as the system breaks up the XML file into smaller HTML files.","The transformation mapping link database includes a single table to provide the information for HTML transformation (e.g., see ). The table is loaded in a preprocessing step, just before the transform begins. During preprocessing, the system parses the XML file and writes a record mapping the HTML file name to location identifiers for each potential link target location XML tag to the transformation mapping link database table. Then, during transformation, when a link source location is encountered (e.g., see  at reference numeral ), the system performs an additional look up to determine the HTML file name of the link target for that source (). Both the location and the file name are used to formulate the value for the \u201chref\u201d attribute of the anchor tag, thereby enabling the HTML links to work properly in the output. This information can be persisted for use in subsequent runs of the same transform for the same deliverable collection.","At the conclusion of the transformation process, one or several files are produced. The links are completely integrated in with the material as is appropriate for the format. The files can be used for the actual production of the document, such as printing, publishing, burning on a CD, etc.","As another example of the broad scope of the different systems and methods discussed herein, the system and methods can keep links valid throughout the entire process, thus preserving the investment in their creation and the value they add to the documentation product. The management of links is automated throughout the documentation development. By automating processes, the cost of maintaining documents and links is reduced, and people are freed from performing the tedious and redundant work of fixing problems with links. Also, the quality of links is improved that exist in the final documents. The automated processes contribute to this effort, because they are able to detect problems with links as they occur, and allow writers and editors to address the problems directly. The result is a document collection containing the intended links and with those links working as expected.","It is further noted that the systems and methods may be implemented on various types of computer architectures, such as for example on a single general purpose computer or workstation, or on a networked system, or in a client-server configuration, or in an application service provider configuration. In multiple computer systems, data signals may be conveyed via networks (e.g., local area network, wide area network, internet, etc.), fiber optic medium, carrier waves, wireless networks, etc. for communication among multiple computers or computing devices.","The systems' and methods' data (e.g., associations, mappings, etc.) may be stored and implemented in one or more different types of computer-implemented ways, such as different types of storage devices and programming constructs (e.g., data stores, RAM, ROM, Flash memory, flat files, databases, programming data structures, programming variables, IF-THEN (or similar type) statement constructs, etc.). It is noted that data structures describe formats for use in organizing and storing data in databases, programs, memory, or other computer-readable media for use by a computer program.","The computer components, software modules, functions and data structures described herein may be connected directly or indirectly to each other in order to allow the flow of data needed for their operations. It is also noted that a module includes but is not limited to a unit of code that performs a software operation, and can be implemented for example as a subroutine unit of code, or as a software function unit of code, or as an object (as in an object-oriented paradigm), or as an applet, or in a computer script language, or as another type of computer code. The software components and\/or functionality may be located on a single computer or distributed across multiple computers depending upon the situation at hand."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIGS. 2-4"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIGS. 7A and 7B"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIGS. 9-12"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 20"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 21"}]},"DETDESC":[{},{}]}
