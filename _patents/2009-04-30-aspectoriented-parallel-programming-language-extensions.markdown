---
title: Aspect-oriented parallel programming language extensions
abstract: Techniques for using one or more aspect-oriented parallelism primitives to implement one or more aspects of a program in parallel are provided. The techniques include using one or more aspect-oriented parallelism primitives to implement one or more aspects of a program in parallel, wherein implementing the one or more aspects of a program in parallel comprises implementing the one or more aspects of a program in parallel on a multi-core processor.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08694962&OS=08694962&RS=08694962
owner: International Business Machines Corporation
number: 08694962
owner_city: Armonk
owner_country: US
publication_date: 20090430
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF EMBODIMENTS"],"p":["Embodiments of the invention generally relate to information technology, and, more particularly, to program parallelization.","Parallelization of programs for the current multi-core processors poses a challenge. In existing approaches, multi-core processors incorporate a few to few dozen processing cores, and each core simultaneously executes multiple software threads. As such, the number of threads executing simultaneously on a processor chip is already significant, and this number promises to increase exponentially as the number of transistors on chip scale up (for example, according to Moore's Law).","Additionally, existing approaches include aspect-oriented programming (AOP). In existing AOP approaches, a program is modularized into several \u201caspects,\u201d but these aspects are not designed for parallel implementation. Aspects in traditional AOP execute code (for example, called \u201cadvices\u201d) before, after, or around (that is, to control) a breakpoint, but not in parallel with the main thread.","Principles and embodiments of the invention provide computer system features and support for aspect-oriented parallel programming, embodied, for example, as programming language extensions, thread-library extensions, etc.","An exemplary method (which may be computer-implemented) for using one or more aspect-oriented parallelism primitives to implement one or more aspects of a program in parallel, according to one aspect of the invention, can include using one or more aspect-oriented parallelism primitives to implement one or more aspects of a program in parallel, wherein implementing the one or more aspects of a program in parallel comprises implementing the one or more aspects of a program in parallel on a multi-core processor.","One or more embodiments of the invention or elements thereof can be implemented in the form of a computer product including a tangible computer readable storage medium with computer usable program code for performing the method steps indicated. Furthermore, one or more embodiments of the invention or elements thereof can be implemented in the form of an apparatus including a memory and at least one processor that is coupled to the memory and operative to perform exemplary method steps. Yet further, in another aspect, one or more embodiments of the invention or elements thereof can be implemented in the form of means for carrying out one or more of the method steps described herein; the means can include (i) hardware module(s), (ii) software module(s), or (iii) a combination of hardware and software modules; any of (i)-(iii) implement the specific techniques set forth herein, and the software modules are stored in a tangible computer-readable storage medium (or multiple such media).","These and other objects, features and advantages of the present invention will become apparent from the following detailed description of illustrative embodiments thereof, which is to be read in connection with the accompanying drawings.","Principles of the invention include aspect-oriented parallel programming language extensions, and supporting multi-core processor extensions. One or more embodiments of the invention include parallel programming language features that allow different \u201caspects\u201d or \u201cconcerns\u201d of a program, compiled as separate threads, to interact with each other efficiently and effectively. The parallel programming language extensions detailed herein are appropriate for aspect-based parallelization and are efficiently supportable by enhanced multi-core processor hardware. As such, a programmer can better express programs in an enhanced aspect-oriented programming (AOP) paradigm and the compiler can generate better code for such programs.","As detailed herein, aspect-oriented parallel-programming primitives are proposed, embodied, for example, as part of either parallel programming languages and\/or thread libraries to enable efficient parallel implementation of different aspects or concerns of a program. The primitives can be supported, by way of example, with suitable hardware extensions to multi-core processors, so as to enable efficient implementation.","The techniques described herein include multi-core parallelism, wherein the parallel threads can be, for example, physically close to each other, and they can communicate with each other faster than they can access main memory (for example, off-chip dynamic random access memory (DRAM)). Further, the threads that implement on the same core can share physical hardware resources such as, for example, functional units, registers, and the primary cache. Parallel processors in prior approaches, on the other hand, were based on single-core processors and required off-chip messages for inter-thread communication. Such physical proximity of threads as in multi-core processors can enable efficient frequent communication between relatively fine-grain threads of a program.","The techniques detailed herein include aspect-oriented extensions to parallel programming languages and thread libraries to support the effective parallelization of the different aspects of a program. Also, these language extensions can be supported by suitable architectural and micro-architectural enhancements to multi-core processors. Language extensions of one or more embodiments of the invention can include, by way of example, the following.","Language extensions can include the ability of a thread to set a breakpoint (at compile time) on another thread of the same program. A thread stops implementation when one of its breakpoints is reached in its control flow. Additionally, language extensions can include the ability of a thread to set a watch-point (at compile time) on a register or memory location of another thread of the same program. A thread stops implementation when one of its registers or memory locations, specified by a watch-point, changes value. Another language extension can include the ability of a thread to ask (at compile time) a sibling thread to send it a stream containing all of the values taken on by a register or memory location specified in a viewpoint. The thread asks to view all values of the specified viewpoint without stopping the sibling thread.","Further, language extensions can include a thread issuing a continuation to a stopped sibling thread, thus resuming the implementation of that stopped thread. The sibling thread might have been stopped by an earlier breakpoint or watch-point set by the current thread. Also, conditional breakpoints, conditional watch-points and conditional viewpoints are breakpoints, watch-points and viewpoints that are activated only when the break\/watch\/view-point-setting thread issues a \u201cCatch Breakpoint,\u201d \u201cCatch Watch-point,\u201d or \u201cCatch Viewpoint\u201d instruction. At other times, these breakpoints, watch-points and viewpoints are dormant. Thus, a catch break\/watch\/viewpoint necessarily has to be used in conjunction with the conditional constructs described above. These conditional constructs are in lieu of the ability to set these points at run-time.","Further, asynchronous viewpoints are viewpoints that are non-blocking and assume fixed-size underlying streams. To wit, if the viewpoint reader thread does not adequately keep pace with the viewpoint writer thread, then elements at the viewpoint stream's head are dropped to accommodate new writes by the viewpoint reader. Asynchronous viewpoints are intended to be used for sampling of registers or memory locations by a reader thread.","As detailed herein, one or more embodiments of the invention include control-points related to a program's control flow such as, for example, breakpoint and conditional breakpoint. The programming-language primitive \u201cbreakpoint\u201d can include an allied language primitive of \u201ccontinue,\u201d wherein a programmer can set breakpoints on specific statements in a program thread and insert corresponding \u201cContinue\u201d statements in a sibling thread. Also, a program can deadlock if breakpoints and continues are not correctly paired. The programming-language primitive \u201cconditional breakpoint\u201d can include allied language primitives of \u201ccatch breakpoint\u201d and \u201ccontinue,\u201d wherein a conditional breakpoint operates when a sibling thread issues a \u201cCatch Breakpoint\u201d during program implementation. The rest of the operation can be similar to a regular breakpoint.","One or more embodiments of the invention also include control-points related to a program's data values such as, for example, watchpoint, conditional watchpoint, viewpoint, asynchronous viewpoint, conditional asynchronous viewpoint, deactivate, catch and continue. The programming-language primitive \u201cwatchpoint\u201d (<MemAddr\/RegId>[Value]) can include an allied language primitive of \u201ccontinue,\u201d wherein a programmer can set a watchpoint instruction in the program thread to be watched, and a corresponding continue in a sibling thread. The watched thread stops when the specified memory location or register location reaches the specified value, or if no value is specified, whenever there is a change in value.","The programming-language primitive \u201cconditional watchpoint\u201d can include allied language primitives of \u201ccatch watchpoint\u201d and \u201ccontinue\u201d similar to conditional breakpoint operation. The programming-language primitive \u201cviewpoint\u201d (MemAddr\/RegId) can include an allied language primitive of \u201c[Read Viewpoint D],\u201d wherein a programmer can insert a viewpoint instruction in the thread of interest and read the viewpoint in sibling threads. Every new value of the specified memory location and\/or register location is sent to sibling threads over a logical queue. Reads by sibling threads de-queue values, and when a viewpoint encounters a full physical queue its thread blocks until the queue is able to accept the new viewpoint value. Also, no \u201cContinue\u201d is necessary for viewpoints.","The programming-language primitive of \u201casynchronous viewpoint\u201d (MemAddr\/RegId), which includes an allied language primitive of \u201c[Read Viewpoint D],\u201d wherein, as opposed to a viewpoint, an asynchronous viewpoint does not block on encountering a full physical queue. Rather, it pushes out the head of the queue to make room at the queue-tail for the new value, and proceeds with implementation. Also, the programming-language primitive of \u201cconditional asynchronous viewpoint\u201d (<MemAddr\/RegId>) can include an allied language primitive of \u201ccatch viewpoint,\u201d wherein the primitive is similar to a viewpoint but activated only when a sibling thread issues a Catch Viewpoint during program implementation.","Additionally, with the programming-language primitive of \u201cdeactivate\u201d (<BreakpointID\/WatchpointID\/ViewpointID>) a programmer can insert a \u201cDeactivate\u201d into any thread to turn off a previously inserted control point. Every control point has a unique identifier and\/or label, similar to a variable name, with similar visibility (that is, scope) rules as variables. The programming-language primitive \u201ccatch\u201d (<ControlPointID>) activates a conditional control-point. The identifier (ID) of the target control-point is a needed parameter with such an instruction. Further, the programming-language primitive \u201ccontinue\u201d (<ThreadID\/ControlPointID>) allows a thread that is stopped at a control-point to continue implementation. For example, a programmer can specify just the ID of the target thread if so desired, or else the specific target control-point ID.","Also, one or more embodiments of the invention can include default programming language as well as these new inter-thread communication primitives that leverage the benefits of multi-core processors for their implementation.","A usage model of one or more embodiments of the invention can include the following. Consider an example program that uses a quasi-balanced binary tree as an index into some data. There are two \u201caspects\u201d to this exemplary program: (i) an aspect that reads, inserts, and deletes data using the tree, simultaneously modifies the tree, just for correct functionality, upon data inserts and deletions; and (ii) an aspect that keeps the tree quasi-balanced upon insertions and deletions.  conceptually illustrates how these two aspects could be implemented as separate threads that communicate using language features such as described herein.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":["FIG. 1","FIG. 1"],"b":["102","104","104","102","102"]},"When the tree-balancer thread  infers that the tree is significantly imbalanced, via its viewpoint monitors, it issues appropriate catch instructions to stop the main thread at appropriate conditional break\/watch-points, so that it can safely balance the appropriate portion of the tree. Any attempt by the main thread  to access the tree portion under reconstruction will be prevented by the catching of the conditional watch-points and breakpoints.",{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIGS. 2A and 2B","FIG. 3"],"b":["202","302"]},"Note, for example, that while similar functionality could be implemented via traditional shared-memory or message-passing modes of communication, such techniques would be rather cumbersome for such frequent communication. Furthermore, they would also be prohibitively inefficient. The language primitives of one or more embodiments of the invention are both more appropriate for the proposed usage and more efficiently implementable via enhancements to multi-core processors.","Multi-core enhancements to support proposed language features can include, by way of example, the following. One or more embodiments of the invention assume, without loss of generality, that the communicating threads run on either the same processor core or on neighboring cores of the processor chip and that a set of hardware queues are implemented between every thread-pair of a core and between every thread-pair of neighboring cores. These hardware queues are used to support the logical streams that carry the data corresponding to viewpoints. Each hardware queue is accessible to the machine instruction set via either a register identifier or a special memory address (that is, memory map). The compiler can allocate hardware queues to viewpoints in a manner similar to how it allots hardware registers to program variables.","The hardware queues are specialized to be non-blocking or asynchronous when thus configured, that is, when the queue becomes full, the write of a new element to the queue tail pushes out the queue head to make space. This supports the program language feature of asynchronous viewpoints, which are non-blocking or asynchronous. Such hardware queues enable efficient implementation of viewpoints. Implementing viewpoints via shared memory is an inefficient alternative.","One or more embodiments of the invention can also assume that there is hardware support in the core for implementing breakpoints and watch-points. For example, upon every write to the program counter (PC), the PC indexes into a hardware table of breakpoints, and upon a match, a breakpoint is flagged. The matching of the PC with the table is similar to that of a traditional cache lookup. Watch-points can also be similarly supported by a table: upon every write (STORE) to a memory location, the location's memory address indexes into a table of watch-point memory addresses, and upon a match, a watch-point is flagged. These are merely illustrative examples and do not preclude other hardware support for the efficient implementation of breakpoints, watch-points and viewpoints.","One or more embodiments of the invention include AOP or AOP-like extensions applicable to any traditional shared-memory parallel programming language. Such extensions, as noted herein, can allow individual aspects of a program to be implemented in parallel on a multi-core processor, leveraging the physical proximity of threads in a multi-core processor to achieve acceptable performance efficiencies. In one or more embodiments of the invention, the language extensions can be practiced without constraints because they require an appropriate compiler or interpreter to translate the language extensions into executable code, which can be achieved with known programming practices. Further, one or more embodiments of the invention include addressing intermediate language primitives.",{"@attributes":{"id":"p-0038","num":"0037"},"figref":["FIG. 4","FIG. 4"],"b":["402","404","406","408"]},"Additionally, in one or more embodiments of the invention, problem solution  can already exist as a legacy program  written in the C programming language. A parallel programmer can then parallelize the program  deploying both the standard PThreads library for supporting traditional program threads and a p-AOP library for supporting the parallel Aspect-Oriented-Programming (p-AOP) language features described herein. The compiler can then compile this program down to native machine (computer) code .","Further, in one or more embodiments of the invention, problem solution  can already exist as an aspect-oriented sequential program  written in a language such as, for example, AspectJ. A parallel programmer can then parallelize this aspect-oriented program  using proposed p-AOP features implemented as language extensions to AspectJ, or using a p-AOP API\/library (as depicted in ). The compiler can then compile this program down to native machine (computer) code .",{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 5","b":["502","504"]},"Step  includes, from within the process, forking the program into multiple threads for implementing different aspects in parallel. The forking of threads can be performed using different mechanisms in different contexts. For example, in a JAVA+p-AOP program, a new thread can be started by allocating a new instance of a sub-class of the Java class \u201cThread\u201d and invoking the start( ) method for that instance. Also, in a C program that uses PThreads and a p-AOP library, a new thread can be started by invoking the pthread_create( ) routine in the PThreads API\/library. Additionally, for example, in an AspectJ+p-AOP program, the p-AOP API\/library can provide a thread( ) routine that takes as argument an aspect and implements that aspect in a new thread.","Step  includes implementing each thread. By way of example, each thread can implement in a separate processor core of a multi-core processor. Also, multiple threads can implement in simultaneous multi-threaded (SMT) fashion on the same core of the multi-core processor, or any combination of these two techniques. Step  includes, once multiple threads start implementation, each thread invoking p-AOP features (such as, for example, breakpoint, viewpoint, catch watchpoint, continue, etc.) during the thread's implementation. Depending on the implementation (multiple embodiments are illustrated in ), each of these feature invocations are implemented by a call to the p-AOP library, by machine code compiled for the feature by the compiler, or by an OS-call.","Step  includes using the implementations of p-AOP features to leverage hardware support provided for efficient implementation of p-AOP features. For example, if a multi-core processor provides special hardware support for implementing the breakdown feature, the compiler would compile an invocation of breakpoint( ) in the program down to machine code that accesses and sets the hardware support for breakpoints provided in the multi-core processor. Step  includes implementing the rest of the p-AOP program, which, for example, can be similar to that of any threaded program or any shared-memory parallel program.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":["FIG. 6","FIG. 6"]},"Step  includes using one or more aspect-oriented parallelism primitives to implement one or more aspects of a program in parallel, wherein implementing the one or more aspects of a program in parallel comprises implementing the one or more aspects of a program in parallel on a multi-core processor. This step can be carried out, for example, using at least one of a call to the p-AOP library module, machine code compiled by a compiler module and\/or an OS-call.","Additionally, the aspect-oriented parallelism primitives can be embodied, for example, in a programming language extension, as one or more members of a library (for example, similar to what POSIX threads (PThreads) and message passing interface (MPI) do) and\/or as an application programming interface.","Aspect-oriented parallelism primitives can include a language extension that enables a first thread to set a break-point on a second thread of a same program, wherein the second thread stops implementation when its break-point is reached in its control flow. Also, aspect-oriented parallelism primitives can include a language extension that enables a first thread to set a watch-point on at least one of a register and a memory location of a second thread of a same program, wherein the second thread stops implementation when its at least one of register or memory location, specified by the watch-point, changes value.","Further, in one or more embodiments of the invention, the one or more aspect-oriented parallelism primitives include a language extension that enables a thread to set a viewpoint on a sibling thread so as to query the sibling thread to send it a stream containing all of one or more values taken on by at least one of a register and a memory location specified in a view-point, wherein the thread queries to view the one or more values of the specified view-point without stopping the sibling thread. Additionally, the aspect-oriented parallelism primitives can include a language extension that enables a thread to issue a continuation to a stopped sibling thread to resuming implementation of the sibling thread.","One or more embodiments of the invention also include using a thread library to support parallelization of the aspects of a program, which can be carried out by a p-AOP library module similar to how the PThreads API\/library supports traditional shared-memory parallelization. The p-AOP thread library can be used in lieu of p-AOP extensions to a programming language, much as the PThreads API\/library is in lieu of any parallelism extensions to the C programming language. Also, one or more embodiments of the invention include using multi-core enhancements to support the aspect-oriented parallelism primitives, which can be carried out by a compiler module implementing on a hardware processor (wherein the compiler, for example, can compile an invocation of a feature and\/or aspect in the program down to machine code that accesses and sets the hardware support for that feature and\/or aspect provided in the multi-core processor). The techniques depicted in  can additionally include using hardware queues to support logical streams that carry data corresponding to viewpoints, wherein each hardware queue is accessible to a machine instruction set via a register identifier and\/or a special memory address. Also, the hardware queues are specialized to be non-blocking and\/or asynchronous.","Additionally, the techniques depicted in  can be implemented via a computer program product that can include computer useable program code that is stored in a computer readable storage medium in a data processing system, and wherein the computer useable program code was downloaded over a network from a remote data processing system. Also, in one or more embodiments of the invention, the computer program product can include computer useable program code that is stored in a computer readable storage medium in a server data processing system, and wherein the computer useable program code are downloaded over a network to a remote data processing system for use in a computer readable storage medium with the remote system.","A variety of techniques, utilizing dedicated hardware, general purpose processors, firmware, software, or a combination of the foregoing may be employed to implement the present invention or components thereof. One or more embodiments of the invention, or elements thereof, can be implemented in the form of a computer product including a computer usable medium with computer usable program code for performing the method steps indicated. Furthermore, one or more embodiments of the invention, or elements thereof, can be implemented in the form of an apparatus including a memory and at least one processor that is coupled to the memory and operative to perform exemplary method steps.","One or more embodiments can make use of software running on a general purpose computer or workstation. With reference to , such an implementation might employ, for example, a processor , a memory , and an input\/output interface formed, for example, by a display  and a keyboard . The term \u201cprocessor\u201d as used herein is intended to include any processing device, such as, for example, one that includes a CPU (central processing unit) and\/or other forms of processing circuitry. Further, the term \u201cprocessor\u201d may refer to more than one individual processor. The term \u201cmemory\u201d is intended to include memory associated with a processor or CPU, such as, for example, RAM (random access memory), ROM (read only memory), a fixed memory device (for example, hard drive), a removable memory device (for example, diskette), a flash memory and the like. In addition, the phrase \u201cinput\/output interface\u201d as used herein, is intended to include, for example, one or more mechanisms for inputting data to the processing unit (for example, mouse), and one or more mechanisms for providing results associated with the processing unit (for example, printer). The processor , memory , and input\/output interface such as display  and keyboard  can be interconnected, for example, via bus  as part of a data processing unit . Suitable interconnections, for example via bus , can also be provided to a network interface , such as a network card, which can be provided to interface with a computer network, and to a media interface , such as a diskette or CD-ROM drive, which can be provided to interface with media .","Accordingly, computer software including instructions or code for performing the methodologies of the invention, as described herein, may be stored in one or more of the associated memory devices (for example, ROM, fixed or removable memory) and, when ready to be utilized, loaded in part or in whole (for example, into RAM) and executed by a CPU. Such software could include, but is not limited to, firmware, resident software, microcode, and the like.","Furthermore, the invention can take the form of a computer program product accessible from a computer-usable or computer-readable medium (for example, media ) providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description, a computer usable or computer readable medium can be any apparatus for use by or in connection with the instruction execution system, apparatus, or device. The medium can store program code to execute one or more method steps set forth herein.","The medium can be an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system (or apparatus or device) or a propagation medium. Examples of a tangible computer-readable storage medium include a semiconductor or solid-state memory (for example memory ), magnetic tape, a removable computer diskette (for example media ), a random access memory (RAM), a read-only memory (ROM), a rigid magnetic disk and an optical disk (but exclude a propagation medium). Current examples of optical disks include compact disk-read only memory (CD-ROM), compact disk-read\/write (CD-R\/W) and DVD.","A data processing system suitable for storing and\/or executing program code will include at least one processor  coupled directly or indirectly to memory elements  through a system bus . The memory elements can include local memory employed during actual execution of the program code, bulk storage, and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.","Input\/output or I\/O devices (including but not limited to keyboards , displays , pointing devices, and the like) can be coupled to the system either directly (such as via bus ) or through intervening I\/O controllers (omitted for clarity).","Network adapters such as network interface  may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems, cable modem and Ethernet cards are just a few of the currently available types of network adapters.","As used herein, including the claims, a \u201cserver\u201d includes a physical data processing system (for example, system  as shown in ) running a server program. It will be understood that such a physical server may or may not include a display and keyboard.","Computer program code for carrying out operations of the present invention may be written in any combination of one or more programming languages, including an object oriented programming language such as Java, Smalltalk, C++ or the like and conventional procedural programming languages, such as the \u201cC\u201d programming language or similar programming languages. The program code may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider). Additionally, one or more embodiments of the invention can include an exemplary system where each \u201cclient\u201d runs one instance of a program \u201caspect,\u201d and a common \u201cserver\u201d runs another aspect of the program that is common to all the clients. As such, each client aspect may find it convenient to use the proposed aspect-oriented programming (AOP) extensions to coordinate\/communicate with the \u201cserver\u201d aspect.","Embodiments of the invention have been described herein with reference to flowchart illustrations and\/or block diagrams of methods, apparatus (systems) and computer program products. It will be understood that each block of the flowchart illustrations and\/or block diagrams, and combinations of blocks in the flowchart illustrations and\/or block diagrams, can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","These computer program instructions may also be stored in a tangible computer-readable storage medium that can direct a computer or other programmable data processing apparatus to function in a particular manner, such that the instructions stored in the computer-readable medium produce an article of manufacture including instruction to means which implement the function\/act specified in the flowchart and\/or block diagram block or blocks. The computer program instructions may also be loaded onto a computer or other programmable data processing apparatus to cause a series of operational steps to be performed on the computer or other programmable apparatus to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","The flowchart and block diagrams in the figures illustrate the architecture, functionality, and operation of possible implementations of systems, methods and computer program products according to various embodiments of the present invention. In this regard, each block in the flowchart or block diagrams may represent a module, segment, or portion of code, which comprises one or more executable instructions for implementing the specified logical function(s). It should also be noted that, in some alternative implementations, the functions noted in the block may occur out of the order noted in the figures. For example, two blocks shown in succession may, in fact, be executed substantially concurrently, or the blocks may sometimes be executed in the reverse order, depending upon the functionality involved. It will also be noted that each block of the block diagrams and\/or flowchart illustration, and combinations of blocks in the block diagrams and\/or flowchart illustration, can be implemented by special purpose hardware-based systems that perform the specified functions or acts, or combinations of special purpose hardware and computer instructions.","Furthermore, it should be noted that any of the methods described herein can include an additional step of providing a system comprising distinct software modules embodied on a tangible computer readable storage medium; the modules can include any or all of the components shown in . The method steps can then be carried out using the distinct software modules and\/or sub-modules of the system, as described above, executing on a hardware processor. Further, a computer program product can include a tangible computer-readable storage medium with code adapted to be executed to carry out one or more method steps described herein, including the provision of the system with the distinct software modules.","In any case, it should be understood that the components illustrated herein may be implemented in various forms of hardware, software, or combinations thereof; for example, application specific integrated circuit(s) (ASICS), functional circuitry, one or more appropriately programmed general purpose digital computers with associated memory, and the like. Given the teachings of the invention provided herein, one of ordinary skill in the related art will be able to contemplate other implementations of the components of the invention.","At least one embodiment of the invention may provide one or more beneficial effects, such as, for example, parallel programming language features that allow different aspects or concerns of a program, compiled as separate threads, to interact with each other efficiently and effectively.","It will be appreciated and should be understood that the exemplary embodiments of the invention described above can be implemented in a number of different fashions. Given the teachings of the invention provided herein, one of ordinary skill in the related art will be able to contemplate other implementations of the invention. Indeed, although illustrative embodiments of the present invention have been described herein with reference to the accompanying drawings, it is to be understood that the invention is not limited to those precise embodiments, and that various other changes and modifications may be made by one skilled in the art without departing from the scope or spirit of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIGS. 2A and 2B"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
