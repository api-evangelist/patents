---
title: Computing system and method to implicitly commit unsaved data for a world wide web application
abstract: The invention is a computing system comprising a World Wide Web application with a user interactive record field. The record field receives a record field entry. The application receives a context change request. Responsive to the context change request, the application dynamically transmits the record field entry to a server for storage in a database.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07953760&OS=07953760&RS=07953760
owner: Siebel Systems, Inc.
number: 07953760
owner_city: San Mateo
owner_country: US
publication_date: 20050106
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"p":["This application is a continuation application of a co-pending U.S. patent application Ser. No. 09\/969,857, entitled \u201cComputing System and Method to Implicitly Commit Unsaved Data for a World Wide Web Application\u201d and filed Sep. 29, 2001.","The present invention relates to the World Wide Web (\u201cWeb\u201d). Specifically, the present invention relates to implicitly committing to a database an unsaved record for a Web application responsive to a context change.","As technology continues to advance and the business environments have become increasingly complex and diverse, more and more companies have relied on various customer relationship management (CRM) software and eBusiness applications to conduct and manage various aspects of their enterprise business. In general, eBusiness applications are designed to enable a company or enterprise to conduct its business over an interactive network (e.g., Internet, Intranet, Extranet, etc.) with its customers, partners, suppliers, distributors, employees, etc. eBusiness applications may include core business processes, supply chain, back-office operations, and CRM functions. CRM generally includes various aspects of interaction a company has with its customers, relating to sales and\/or services. At a high level, customer relationship management is focused on understanding the customer's needs and leveraging this knowledge to increase sales and improve service. CRM application and software is generally designed to provide effective and efficient interactions between sales and service, and unify a company's activities around the customer in order to increase customer share and customer retention through customer satisfaction.","Typically, CRM implementation strategy needs to consider the following:\n\n","Generally, eBusiness applications are designed to allow organizations to create a single source of customer information that makes it easier to sell to, market to, and service customers across multiple channels, including the Web, call centers, field, resellers, retail, and dealer networks. Advanced eBusiness applications are typically built on a component-based architecture and are designed to be Web-based and to deliver support for various types of clients on multiple computing platforms including mobile clients, connected clients, thin clients, and handheld clients, etc.","With the recent proliferation of the Web, it is desirable to provide the functionalities of the eBusiness applications in a Web-based environment. Furthermore, it is desirable for the eBusiness applications operating in a Web-based environment to retain the look-and-feel of desktop-based eBusiness applications with which the users are already familiar.","World Wide Web documents often include forms with user interactive data fields through which a user can enter information. The information typically includes alpha-numeric characters. To save an entry into the server database, the user typically presses a button labeled either \u201csave\u201d or \u201csubmit.\u201d It can be time consuming, tiresome and annoying for the user to press the \u201csave\u201d or \u201csubmit\u201d button every time the user wishes to save an entry. Also, if the user logs off or changes the Web browser view to another Web page before saving the information, the information may be lost.","In one embodiment, the invention is a computing system comprising a World Wide Web application with a user interactive record field is described. The record field receives a record field entry. The application receives a context change request. Responsive to the context change request, the application dynamically transmits the record field entry to a server for storage in a database.","A computing system and a method are described in which unsaved data for a World Wide Web application (\u201ca Web application\u201d) are implicitly committed to a server responsive to a context change. The user does not have to, for example, press the save button.","In this description, the terms transmit and post are used interchangeably. Also, the terms save and commit are used interchangeably. Also, the terms unsaved data, changes and updates are used interchangeably.","In the following detailed description numerous specific details are set forth in order to provide a thorough understanding of the present invention. However, it will be appreciated by one skilled in the art that the present invention may be understood and practiced without these specific details.","I. System Overview and Overall Architecture","In one embodiment, a system in which the teachings of the present invention are implemented can be logically structured as a multi-layered architecture as shown in . In one embodiment, the logical multi-layered architecture as shown in  provides a platform for common services to support the various applications. These services may include a user interface layer , an object manager layer , a data manager layer , and a data exchange layer .","In one embodiment, the user Interface layer  may provide the applets, views, charts and reports, etc. associated with one or more applications. In one embodiment, various types of clients can be supported via the user interface layer . These various types of clients may include traditional connected clients, remote clients, thin clients over an intranet, Java thin clients or non-Windows-based operating systems, and HTML clients over the Internet, etc.","In one embodiment, the object manager layer  is designed to manage one or more sets of business rules or business concepts associated with one or more applications and to provide the interface between the user interface layer  and the data manager layer . In one embodiment, the business rules or concepts can be represented as business objects. In one embodiment, the business objects may be designed as configurable software representations of the various business rules or concepts such as accounts, contacts, opportunities, service requests, solutions, etc.","In one embodiment, the data manager layer  is designed to maintain logical views of the underlying data and to allow the object manager to function independently of underlying data structures or tables in which data are stored. In one embodiment, the data manager  may also provide certain database query functions such as generation of structure query language (SQL) in real time to access the data. In one embodiment, the data manager  is designed to operate on object definitions in a repository file  that define the database schema. In one embodiment, the data storage services  provide the data storage for the data model associated with one or more applications.","In one embodiment, the data exchange layer is designed to handle the interactions with one or more specific target databases and provide the interface between the data manager layer  and the underlying data sources.",{"@attributes":{"id":"p-0070","num":"0073"},"figref":"FIG. 2"},"In one embodiment, the multi-layered architecture allows one or more software layers to reside on different machines. For example, in one embodiment, the user interface, the object manager, and the data manager can all reside on the dedicated web clients. For other types of clients such as the wireless clients, in one embodiment, the object manager and data manager can reside on a system server. It should be appreciated and understood by one skilled in the art that the system configuration shown in  is for illustrative and explanative purposes and may vary depending upon the particular implementations and applications of the teachings of the present invention.","In one embodiment, the system environment illustrated in  may include more than one database . One or more subsets of the database  can be created or replicated by a replication manager. In addition, mobile web clients can have additional remote databases (also called local databases). In one embodiment, unless the remote or local databases associated with the mobile web clients are defined as read-only databases, these mobile web clients can create and update data locally that will be ultimately propagated up to the primary database when each mobile web client synchronizes with the system server.","In one embodiment, the database  is designed to store various types of data including predefined data schema (e.g., table objects, index objects, etc.), repository objects (e.g., business objects and components, view definitions and visibility rules, etc.), and user's or customer's data. In one embodiment, dedicated web clients and server components, including those that operate in conjunction with the other types of clients, can connect directly to the database  and make changes in real time. In one embodiment, mobile web clients can download a subset of the servers data to use locally, and periodically synchronize with the server database through the system server to update both the local and the server database.","In one embodiment, various tables included in the database  may be logically organized into the following types: data tables, interface tables, and repository tables, etc.","In one embodiment, data tables may be used to store user business data, administrative data, seed data, and transaction data, etc. In one embodiment, these data tables may be populated and updated through the various applications and processes. In one embodiment, data tables may include the base tables and the intersection tables, etc. In one embodiment, base tables may contain columns that are defined and used by the various applications. In one embodiment, the base tables are designed to provide the columns for a business component specified in the table property of that business component. In one embodiment, intersection tables are tables that are used to implement a many-to-many relationship between two business components. They may also hold intersection data columns, which store information pertaining to each association. In one embodiment, intersection tables provide the data structures for association applets.","In one embodiment, interface tables are used to denormalize a group of base tables into a single table that external programs can interface to. In one embodiment, they may be used as a staging area for exporting and importing of data.","In one embodiment, repository tables contain the object definitions that specify one or more applications regarding:\n\n","In one embodiment, the file system  is a network-accessible directory that can be located on an application server. In one embodiment, the file system  stores the physical files created by various applications, such as files created by third-party text editors, and other data that is not stored in the database . In one embodiment, physical files stored in the file system  can be compressed and stored under various naming conventions. In one embodiment, dedicated web clients can read and write files directly to and from the file system . In one embodiment, mobile web clients can have a local file system, which they synchronize with the server-based file system  periodically. In one embodiment, other types of client such as the wireless clients and the web clients can access the file system  via the system server.","In one embodiment, the enterprise server  is a logical grouping of the system servers  that share a common table owner or a database, point to a common gateway Server, and can be administered as a group using server manager . In one embodiment, the connection to the gateway server can be established via TCP\/IP. In one embodiment, the enterprise server  can be scaled effectively by deploying multiple system servers  in the enterprise server , thus providing a high degree of scalability in the middle tier of applications.","In one embodiment, the server  runs one or multiple server programs. It handles the incoming processing requests and monitors the state of all processes on the server. In one embodiment, server programs are designed and conFigured to perform one or more specific functions or jobs including importing and exporting data, configuring the database, executing workflow and process automation, processing to support mobile web clients for data synchronization and replication, and enforcing business rules, etc. In one embodiment, the server  can be an NT Service (under Windows NT operating system) or a daemon (e.g., a background shell process) under UNIX operating system. In one embodiment, the server  supports both multi-process and multi-threaded components and can operate components in batch, service, and interactive modes.","In one embodiment, the server manager  is conFigured as a utility that allows common control, administration and monitoring across disparate programs for the servers  and the enterprise server . In one embodiment, the server manager  can be used to perform the following tasks: start, stop, pause, and resume servers , components, and tasks; monitor status and collect statistics for multiple tasks, components, and servers within an enterprise server; and conFigure the enterprise server, individual servers individual components, and tasks, etc.","In one embodiment, the gateway server can be conFigured as a logical entity that serves as a single entry point for accessing servers. In one embodiment, it can be used to provide enhanced scalability, load balancing and high availability across the enterprise server. In one embodiment, the gateway server may include a name server and a connection brokering component. In one embodiment, the name server is conFigured to keep track of the parameters associated with the servers. For example, the availability and connectivity information associated with the servers can be stored in the name server. The various components in the system can query the name server for various information regarding the servers' availability and connectivity. In a Windows NT environment, the name server can be run as a NT service. In a UNIX environment, the name server can run as a daemon process. In one embodiment, the connection brokering component is used to perform load balancing function such as directing client connection requests to an appropriate server (e.g., the least-busy server).","In one embodiment, as illustrated in , the various types of clients that can be supported by the system may include the following clients: dedicated web clients, mobile web clients, web clients, wireless clients, and handheld clients, etc.","In one embodiment, dedicated web clients (also called connected clients) are connected directly to a database server for data access via a LAN or WAN connection. In one embodiment, these connected or dedicated web clients do not store data locally. These dedicated web clients can also access the file system directly. In one embodiment, the user interface, the object manager, and the data manager layers of the multi-layered architecture reside on the dedicated web client.","In one embodiment, the mobile web clients are designed and conFigured for local data access and thus can have their own local database and\/or local file system. In one embodiment, mobile web clients can interact with other components within the system via the gateway server. Through synchronization, the modifications from the local database and the server database can be exchanged. Mobile web clients are described in more detail below.","In one embodiment, a web client runs in a standard browser format from the client's machine. In one embodiment, the web client can connect to a system server  through a web server. In one embodiment, the system server  is designed and conFigured to execute business logic and access data from the database  and file system . In one embodiment, the web client described herein is designed and conFigured in accordance with the teachings of the present invention to operate in an interactive mode. In one embodiment, the interactive web client framework as described herein utilizes dynamically created objects implemented in JavaScript on the browser side that correspond to objects on the server side. In one embodiment, these dynamically created objects on the browser side may include the current view and its corresponding applets, the current business object and the corresponding business components, etc. The web client is described in more details below.","In one embodiment, wireless clients are essentially thin clients enabled on wireless devices. The wireless clients can use a wireless application protocol (WAP)-based user interface to communicate and exchange information\/data with the system server. The system configuration illustrated in  is described in more details below with references to various structures, databases, tables, file systems, etc. as illustrating examples.",{"@attributes":{"id":"p-0088","num":"0094"},"figref":["FIG. 3","FIG. 3"],"b":["315","310","325","320","330","345","340"]},"In one embodiment, the presentation services  may be designed and conFigured to support various types of clients and may provide them with user interface applets, views, charts, and reports, etc. As described above, a large variety of clients may be supported including wireless clients, handheld clients, web clients, mobile web clients, and dedicated (connected) clients, etc.","In one embodiment, the application services  may include business logic services and database interaction services. In one embodiment, business logic services provide the class and behaviors of business objects and business components. In one embodiment, database interaction services may be designed and conFigured to take the user interface (UI) request for data from a business component and generate the database commands (e.g. SQL queries, etc.) necessary to satisfy the request. For example, the data interaction services may be used to translate a call for data into DBMS-specific SQL statements.","In one embodiment, data storage services  may be designed and conFigured to provide the data storage for the underlying data model which serves as the basis of the various applications. For example, the data model may be designed and conFigured to support various software products and applications including call center, sales, services, and marketing, etc., as well as various industry vertical products and applications such as eFinance, eInsurance, eCommunications, and eHealthcare, etc.",{"@attributes":{"id":"p-0092","num":"0098"},"figref":["FIG. 4","FIG. 4"]},"In one embodiment, the core services are designed and conFigured to provide the framework in which the applications execute. In one embodiment, the core services may include the following:\n\n","In one embodiment, application integration services may be designed and conFigured to allow the various applications built in accordance with this framework to communicate with the external world. In one embodiment, the various types of services in this logical grouping may be designed and conFigured to provide for real-time, near-real-time, and batch integration with external applications. For example, these integration services may be used to enable communications between external applications and the internal applications using available methods, technologies, and software products. In one embodiment, application integration services allow the systems or applications to share and replicate data with other external enterprise applications. Accordingly, these services allow a particular application or system to be both a client requesting information, and a server having information requested from it.","In one embodiment, business processes services are designed and conFigured to allow the client to automate business processes through the application. In one embodiment, these various business process services may include the following:\n\n","In one embodiment, creation of these business processes can be done through Run-Time tools such as Personalization Designer, Workflow Designer, SmartScript Designer, Assignment Administration Views, and the Model Builder, etc.","In one embodiment, integration services may be designed and conFigured to provide the client with user interface and thin client support. In one embodiment, these may include capabilities for building and maintaining web-based applications, providing web support facilities such as user Profile Management, Collaboration Services and Email and Fax services, as well as advanced Smart Scripting, etc.","In one embodiment, design time tools may be designed and conFigured to provide the services to customize, design, provide integration points, and maintain the application. These various tools provide one common place to define the application.","In one embodiment, admin services are designed and conFigured provide one place to monitor and administer the application environment. In one embodiment, these services allow the user to administer the application either through a graphic user interface (GUI) or from a command line, etc.","II. System Framework or Infrastructure",{"@attributes":{"id":"p-0100","num":"0114"},"figref":["FIG. 5A","FIG. 2","FIG. 5B","FIG. 5A"],"b":["500","205","210","500"]},"The framework or infrastructure  can support the interactive web client  (shown in ) and the mobile web client  (also shown in ) and is capable of meeting certain criteria, such as increasing the interactivity and performance of the web client and the mobile web client, and reducing the number of page refreshes for common actions.","The framework or infrastructure  can include objects  that can be dynamically created on the browser to mimic corresponding objects  managed by the object-manager. In one embodiment, the objects  managed by the object manager (OM) can be built using a programming language, such as C+++, supporting the object-oriented paradigm.","As shown in , exemplary objects  managed by the OM can include an object  representing a view, CSSWEView . A view is generally a display panel consisting of a particular arrangement of applets. In one embodiment, one active view can be displayed at any given time. Another exemplary object managed by the OM can be an object  representing an applet, CSSWEApplet . An applet is generally a visual application unit that appears on the screen as part of a view. Other exemplary objects managed by the OM can include an object  representing a business component (CSSBusComp ), an object  representing a business object (CSSBusObj ), and an object  representing a frame (CSSWEFrame ). In one embodiment, the business object may be designed as configurable software representations of the various business rules or concepts such as accounts, contacts, opportunities, service requests, solutions, etc. In this embodiment, the business components typically provide a layer of wrapping over tables, and the applets reference business components rather than the underlying tables. In addition, a frame is generally a sub-component of a view and may comprise of one or more applets.","In one embodiment, objects  on the browser can be built using JavaScript. As shown in , exemplary objects  on the browser side may include JSSBusObj , JSSBusComp , JSSView , and JSSApplet  to respectively mirror CSSBusObj , CSSBusComp , CSSWEView , and CSSWEApplet , which are objects  managed by the OM.",{"@attributes":{"id":"p-0105","num":"0119"},"figref":"FIG. 5C","b":["500","502","504","528","502","524","528","522","510","522","580","522","580","522","580","516","522","510","518","572","518","568","522","580","524","574","576","584","522"]},"The server  is coupled to the repository . The client  objects include the proxy objects of the server  objects. For example, the application  is a proxy of the frame manager , the display  is a proxy of the display , the active applet  is a proxy of the active applet , the applet  is a proxy of the applet , and the business components  and  are proxies of the business components  and  respectively. The display  is coupled to the business object . The business object  is a proxy of the business object .","The communication requests between the client  and the RPC module  are processed through the application . The communication requests can include a context change request. In one embodiment of the present invention, the context change request can include a user request for a new web page. In another embodiment of the present invention, the context change request can include the user request to tab out of the active applet . In yet another embodiment of the present invention, the context change request can include a context change request generated by the client .","The application  can automatically transmit an unsaved datum request to the active applet  responsive to receiving a context change request. The unsaved datum request inquires whether the active applet  includes an unsaved datum. The active applet  can automatically transmit a cache request to the business component  responsive to receiving the cache request. The business component  automatically determines if the cache  includes any unsaved user entries, responsive to receiving the cache request. The business component  transmits a cache notification request to the active applet . The cache notification request either includes the unsaved data or a notification that the cache  includes no unsaved data.","The active applet  can trigger a post request responsive to receiving the cache notification request. The post request can include the unsaved data from the cache . The active applet  can also transmit a no unsaved data request to the application . The no unsaved data request can indicate that the cache  includes no unsaved data. The business component  can clear the cache  after transmitting the cache notification request.","The application  can automatically transmit the context change request to the server  through the RPC module  responsive to receiving either the post request or the no unsaved data request. The application  can forward the post request to the server  through the RPC module .","The server  can automatically process the post request responsive to receiving the post request. The server  can process the post request by determining if it  wants to commit the unsaved data to a database. The server  can transmit a server notification to the client . The server notification can include either a success message indicating that the unsaved data was successfully saved in the database or an error message indicating that the unsaved data cannot be saved in the database.","The application  can display the error message on the display  responsive to receiving the error message from the server  through the RPC module . The application  can hold off the transmission of the context change request to the server  responsive to receiving the error message from the server . Also, the application  can automatically transmit the context change request to the server  through the RPC module  responsive to receiving the success message from the server  through the RPC module .","The server  can automatically process the context change request responsive to receiving the context change request. The server  can process the context change request by transmitting the requested new context to the client  through the RPC module . The requested context can include an applet or a web page. The application  can receive the new context through the RPC module . The web page received from the server  can replace the web page displayed through the display . The applet received from the server  can replace the applet  as the active applet.","Objects  on the browser and objects  managed by the OM can be configured to reside and operate on one computing device or multiple computing devices.  illustrates an exemplary configuration  in which objects  on the browser and objects  managed by the OM reside and operate on multiple computing devices ,, including a client  and a server .  illustrates an exemplary configuration  in which objects  on the browser and objects  managed by the OM reside and operate on one computing device .","Returning to , objects  on the browser are generally synchronized with corresponding or mirrored objects  managed by the OM. Synchronization can be accomplished through a remote procedure call (RPC) mechanism  and a notification mechanism . The RPC mechanism  and the notification mechanism  will be described below in more details.","Of the objects  on the browser, the JSSApplication object  typically exists throughout a user-session. The JSSApplication object  should be initially loaded initially when the user starts an application. An application would generally be started when the user invokes a subset of the application from an icon on the desktop or from the Start menu. The JSSApplication object  generally performs a role similar to that of the CSSModel object . The CSSModel object  is generally a global session object that provides access to repository objects that are in use, the current business object instance in memory, the relationships between the current business object and the business components contained in it, and the user's global state information. The CSSModel object  generally accesses a repository  to obtain needed information. The repository  is generally a set of object definitions used to define an application or a suite of applications. However, the JSSApplication object  is generally scaled down to track one view, applets associated to the tracked view, one business object, and the business components that are in use in the view.","Unlike the JSSApplication object , the JSSView object , the JSSApplet object , the JSSBusObj object  and the JSSBusComp object  are typically temporary or impermanent entities, and are generally replaced when a page refresh occurs. For example, a request to navigate to a new view may cause a new set of JSSView , JSSApplet , JSSBusObj , and JSSBusComp  objects to be created to run on the browser.","Accordingly, objects  on the browser can be generally described as lightweight representations of mirrored or corresponding objects  managed by the OM. Each object  on the browser would typically include a subset of the functionalities included in corresponding objects  managed by the OM. For example, the JSSView object , similar to a CSSView object , generally represents a collection of applets. The JSSBusObj object , similar to a CSSBusObj object , generally manages the various one-to-many relationships between active business components so that correct relationships are employed when these active business components are populated via queries. The JSSBusObj object  generally exists on the browser for the life of the current view, and should be kept in sync with the corresponding CSSBusObj object .","In one embodiment, when the browser submits a request to navigate to a new view to the web engine , the web engine  would send a response containing the view layout that is devoid of data. Then the web engine  would send a response containing a string of data to populate the view.","The JSSApplication object  generally manages communications flowing into and out from objects on the browser. In one embodiment, a method invoked on an object on the browser would typically be directed to the JSSApplication object  if the invoked method should be retargeted to an object  managed by the OM. The JSSApplication object  would generally use the RPC mechanism  to route the invoked method through the web engine  to the appropriate object  managed by the OM. The web engine  would typically be employed to send return notifications and data from objects  managed by the OM to objects  on the browser. The web engine  would generally use the notification mechanism  to route notifications and data through the JSSApplication object  to objects  on the browser.","The browser objects  generally use the remote procedure calls  to invoke methods on the objects  managed by the OM. These remote procedure calls  are generally packaged as HTTP requests. Responses from the objects  managed by the OM are packaged as HTTP responses containing notifications and associated status information and data. In one embodiment, remote procedure calls are made with blocking enabled to ensure synchronization between the objects  on the browser and the objects  managed by the OM. With blocking enabled, control would typically not be passed back to the calling code until the called remote procedure finishes executing.","Remote Procedure Call (RPC)","The RPC model generally uses the same procedural abstraction as a conventional program, but allows a procedure call to span the boundary between two computers.  illustrates an example of how the RPC paradigm can be used to divide a program  into pieces that can be executed on separate computing devices ,. This Figure generally shows a distributed program having multiple procedures. Main( ) , proc_( ) , proc_( ) , proc_( ) , proc_( ) , proc_( ) , and proc_( ) reside and operate in the first computing device or the client ; and proc_( )  and proc_( )  reside and operate in the second computing device or the server . A solid line  from procedure n to procedure m denotes a call from n to m. A dashed line  shows how control passes from one computing device to another computing device during a remote procedure call.",{"@attributes":{"id":"p-0123","num":"0137"},"figref":"FIG. 8","b":["800","724","726"]},"As such, a remote procedure call generally executes a procedure located in a separate address space from the calling code. The RPC model is generally derived from the programming model of local procedure calls and takes advantage of the fact that every procedure contains a procedure declaration. The procedure declaration defines the interface between the calling code and the called procedure. The procedure declaration defines the call syntax and parameters of the procedure. Calls to a procedure should typically conform to the procedure declaration.","Applications that use remote procedure calls look and behave much like local applications. However, an RPC application is divided into two parts: a server, which offers one or more sets of remote procedures, and a client, which makes remote procedure calls to RPC servers. A server and its client(s) generally reside on separate systems and communicate over a network. RPC applications depend on the RPC runtime library to control network communications for them. The RPC runtime library generally supports additional tasks, such as finding servers for clients and managing servers.","A distributed application generally uses dispersed computing resources such as central processing units (CPU), databases, devices, and services. The following applications are illustrative examples of distributed applications:\n\n","Distributed applications include tasks such as managing communications, finding servers, providing security, and so forth. A standalone distributed application needs to perform all of these tasks itself. Without a convenient mechanism for these distributed computing tasks, writing distributed applications is difficult, expensive, and error-prone.","RPC software typically provides the code, called RPC stubs, and the RPC runtime library that performs distributed computing tasks for applications. The RPC stubs and the RPC runtime library should be linked with client and server application code to form an RPC application.","Table 1 generally shows the basic tasks for the client and server of a distributed application. Calling the procedure and executing the remote procedure, shown in italicized text, are performed by the application code (just as in a local application) but here they are in the client and server address spaces. As for the other tasks, some are performed automatically by the stubs and RPC runtime library, while others are performed by the RPC runtime library via API calls in the application code.",{"@attributes":{"id":"p-0130","num":"0150"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 1"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Basic Tasks of an RPC Application"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Client Tasks","Server Tasks"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"14pt","align":"char","char":"."}},{"@attributes":{"colname":"4","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},"1.","Select network protocols"]},{"entry":[{},{},"2.","Register RPC interfaces"]},{"entry":[{},{},"3.","Register endpoints in"]},{"entry":[{},{},{},"endpoint map"]},{"entry":[{},{},"4.","Advertise RPC interfaces and"]},{"entry":[{},{},{},"objects in the namespace"]},{"entry":[{},{},"5.","Listen for calls"]},{"entry":["6.","Find compatible servers that"]},{"entry":[{},"offer the procedures"]},{"entry":["7.","Call the remote procedure"]},{"entry":["8.","Establish a binding with the"]},{"entry":[{},"server"]},{"entry":["9.","Convert input arguments into"]},{"entry":[{},"network data"]},{"entry":["10.","Transmit arguments to the"]},{"entry":[{},"server's runtime"]},{"entry":[{},{},"11.","Receive call"]},{"entry":[{},{},"12.","Disassemble network data and"]},{"entry":[{},{},{},"convert input arguments into"]},{"entry":[{},{},{},"local data"]},{"entry":[{},{},"13.","Locate and invoke the called"]},{"entry":[{},{},{},"procedure"]},{"entry":[{},{},"14.","Execute the remote procedure"]},{"entry":[{},{},"15.","Convert the output"]},{"entry":[{},{},{},"arguments and return value into"]},{"entry":[{},{},{},"network data"]},{"entry":[{},{},"16.","Transmit results to the client's"]},{"entry":[{},{},{},"runtime"]},{"entry":["17.","Receive results"]},{"entry":["18.","Disassemble network data and"]},{"entry":[{},"convert output arguments into"]},{"entry":[{},"local data"]},{"entry":["19.","Return results and control to"]},{"entry":[{},"calling code"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0131","num":"0151"},"figref":"FIG. 9","b":["900","904","914","906","916","908","918","910","920","902","904"]},"The RPC client  or the RPC server  typically contains RPC application code segments  and , RPC interfaces  and , stubs  and , and the RPC runtime libraries  and . The RPC application code segments , are generally the code written for a specific RPC application by the application developer. The RPC application code segments , generally implement and call remote procedures, and also calls needed routines or procedures in the RPC runtime library. An RPC stub , is generally an interface-specific code module that uses an RPC interface , to pass and receive arguments. A client  and a server  typically contain complementary RPC stubs , for each shared RPC interface ,. The RPC runtime library , generally manages communications for RPC applications. In addition, the RPC runtime library , should support an Application Programming Interface (API) used by RPC application code to enable RPC applications to set up their communications, manipulate information about servers, and perform optional tasks such as remotely managing servers and accessing security information.","RPC application code segments , usually differ for clients and servers. RPC application code  on the server  typically contains the remote procedures that implement one RPC interface. RPC application code  on the corresponding client  typically contains calls to those remote procedures.","RPC stubs , generally perform basic support functions for remote procedure calls. For instance, RPC stubs , prepare input and output arguments for transmission between systems with different forms of data representation. RPC stubs , use the RPC runtime library , to handle the transmission between the client  and server . RPC stubs  on the client  can also use the local RPC runtime library  to find appropriate servers for the client .",{"@attributes":{"id":"p-0135","num":"0155"},"figref":"FIG. 10","b":["908","1002"]},"Marshalling  generally converts input or call arguments  into a byte-stream format and packages them for transmission. Upon receiving call arguments, a server RPC stub  unmarshalls  them. Unmarshalling  is generally the process by which a stub disassembles incoming network data and converts it into application data using a format that the local system understands. Marshalling , and unmarshalling , both occur twice for each remote procedure call. The client RPC stub  marshalls  input arguments  and unmarshalls  output arguments . The server RPC stub  unmarshalls  input arguments  and marshalls  output arguments . Marshalling and unmarshalling permit client and server systems to use different data representations for equivalent data. For example, the client system can use ASCII data , and the server system can use Unicode data  as shown in .","The IDL compiler (a tool for application development) generates stubs by compiling an RPC interface definition written by application developers. The compiler generates marshalling and unmarshalling routines for platform-independent IDL data types. To build the client for an RPC application, a developer links client application code with the client stubs of all the RPC interfaces the application uses. To build the server, the developer links the server application code with the corresponding server stubs.","In addition to one or more RPC stubs, each RPC server and RPC client should be linked with a copy of the RPC runtime library. The RPC runtime library generally provides runtime operations such as controlling communications between clients and servers and finding servers for clients on request. RPC stubs in the client and the server typically exchange arguments through the RPC runtime library that is respectively local to the client and the server. The RPC runtime library on the client typically transmits remote procedure calls to the server. The RPC runtime library on the server generally receives the remote procedure calls from the client and dispatches each call to the appropriate RPC stub on the server. The RPC runtime library then sends the results of each call to the RPC runtime library on the client.","RPC application code on the server must also contain server initialization code that calls routines in the RPC runtime library on the server when the server is starting up and shutting down. RPC application code on the client can also call RPC runtime library routines for initialization purposes. Furthermore, RPC application code on the server and RPC application code on the client can also contain calls to RPC stub-support routines. RPC stub-support routines generally allow applications to manage programming tasks such as allocating and freeing memory.",{"@attributes":{"id":"p-0140","num":"0160"},"figref":"FIG. 11","b":["904","914","906","916","908","918","910","920","908","1002","906","908","908","1002","910","910","1002","920","918","916","918","1002","914","914","1008","918","918","1008","920","920","1008","910","901","908","1008","904"]},"In one embodiment, remote procedure calls are made with blocking enabled to ensure synchronization between the objects  on the browser and the objects  managed by the OM (shown in ). With blocking enabled, control would typically not be passed back to the calling code until the called remote procedure finishes executing.",{"@attributes":{"id":"p-0142","num":"0162"},"figref":"FIG. 12","b":"1200","ul":{"@attributes":{"id":"ul0011","list-style":"none"},"li":{"@attributes":{"id":"ul0011-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0012","list-style":"none"},"li":["Designing the application, deciding what procedures are needed and which of the needed procedures will be remote procedures, and deciding how the remote procedures will be grouped into RPC interfaces (block );","Using the Universal Unique Identifier (UUID) generator to generate a UUID for each of the RPC interfaces (block );","Using the Interface Definition Language (IDL) to describe the RPC interfaces for planned data types and remote procedures (block );","Generating the client and server stubs by compiling the IDL description using an IDL compiler (block );","Writing or modifying application code using a programming language that is compatible with the RPC stubs, so that the application code works with the stubs (block );","Generating object code from application code (block ); and","Linking the local RPC runtime library and the object code generated from the application code to generate executable code (block )."]}}}},{"@attributes":{"id":"p-0143","num":"0170"},"figref":"FIG. 13","b":["908","904","910","1302","1304","918","1308","914","916","1302","1306"]},"Traditionally, calling code and called procedures share the same address space. In an RPC application, the calling code and the called remote procedures are not linked; rather, they communicate indirectly through an RPC interface. An RPC interface is generally a logical grouping of operations, data types, and constants that serves as a contract for a set of remote procedures. RPC interfaces are typically compiled from formal interface definitions written by application developers using the Interface Definition Language (IDL).","In developing a distributed application, an interface definition should be defined in IDL. The IDL compiler generally uses the interface definition to generate a header file, a client stub file, and a server stub file. The IDL compiler can produce header files in a standard programming language, and stubs as source files or as object file. For some applications, an Attribute Configuration File (ACF) accompanying the interface definition may be defined. If an ACF exists, the IDL compiler interprets the ACF when it compiles the interface definition. Information in the ACF is used to modify the code that the compiler generates.","The header of each RPC interface typically contains a Universal Unique Identifier (UUID), which is a hexadecimal number that uniquely identifies an entity. A UUID that identifies an RPC interface is generally known as an interface UUID. The interface UUID ensures that the interface can be uniquely identified across all possible network configurations. In addition to an interface UUID, each RPC interface contains major and minor version numbers. Together, the interface UUID and version numbers form an interface identifier that identifies an instance of an RPC interface across systems and through time.","Notifications","Returning to , objects  on the browser are generally synchronized with corresponding or mirrored objects  managed by the OM so that changes can be reflected. Synchronization can be accomplished through a remote procedure call (RPC) mechanism  and a notification mechanism .","The notification mechanism  generally provides the means by which data in an object  on the browser (e.g., JSSBusComp ) can be updated when data or status is changed in a corresponding object  managed by the OM (e.g., CSSBusComp ). In one embodiment, the CSSSWEView object  would collect one or more notifications, and send them to the objects  on the browser at the end of a view show cycle.","In one embodiment, the following exemplary or illustrative notifications can be transmitted. It should be noted that some of the notifications listed below require parameters. In other cases, the framework can understand the context for these notifications by simply knowing its current state.\n\n","As stated above, objects on the browser and objects managed by the OM can be configured to reside and operate on one or multiple computing devices. As shown above,  illustrates an exemplary configuration  in which objects  on the browser and objects  managed by the OM reside and operate on multiple computing devices  and , including a client  and a server .  illustrates an exemplary configuration  in which objects  on the browser and objects  managed by the OM reside and operate on one computing device .",{"@attributes":{"id":"p-0151","num":"0207"},"figref":["FIG. 14","FIG. 6A","FIG. 14"],"b":["1400","502","504","600","1400","1405","1410","1415","1420"],"ul":{"@attributes":{"id":"ul0015","list-style":"none"},"li":{"@attributes":{"id":"ul0015-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0016","list-style":"none"},"li":["Continue\u2014This value generally indicate that the server-side applet, CSSWEApplet, has performed its share of handling the invoke method (or has no role to perform), and that the JSSApplet on the browser needs to complete the action. Notifications are provided in the response, but are often empty.","Completed\u2014This value generally indicates that the server-side applet has completed the handling of the invoke method, and that the browser needs to perform no further action other than to respond to notifications provided in the response.","NewPage\u2014This value generally indicates that the response to the invoke request or other command requires a page refresh on the browser, including re-a generation all the temporary browser-side objects. A URL is sent to the browser, so that the new page can be obtained. However, there will no notifications. This value is typically set in cases such as when a drilldown to a different view is requested.","Error\u2014This value generally indicates that the invoke method request failed. Upon receiving an Error status, the JSSApplet would typically display an error page."]}}}},"When a browser-side applet, JSSApplet, calls the server through the RPC, the browser-side applet typically looks at the status flag in the response and then handles it (block ). If the returned status is Error, the browser-side applet would show an error page. If the returned status is Completed, the server is generally indicating that it had already handled the invoke method and that there's nothing left for the browser to do. If the returned status is Continue, the server is generally indicating that it is not handling the invoke method. The browser-side applet would generally respond to a returned status of Continue by redirecting the method to a JSSBusComp object by invoking the method directly on a JSSBusComp object. The JSSBusComp object may be able to satisfy the invoke method request, or may have to send its own RPC call through the JSSApplication to its corresponding server-side business component.",{"@attributes":{"id":"p-0153","num":"0213"},"figref":["FIG. 15","FIG. 15","FIG. 6A"],"b":["1500","1500","1505","1510","1515"],"ul":{"@attributes":{"id":"ul0017","list-style":"none"},"li":{"@attributes":{"id":"ul0017-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0018","list-style":"none"},"li":["Completed\u2014This value generally indicates the server-side business component, CSSBusComp, had generally processed the invoke method successfully. Notifications will typically occur.","Error\u2014This value generally indicates that the server-side business component, CSSBusComp, had unsuccessfully processed the invoke method call. Upon receiving a returned status of Error, the browser would typically display an error page."]}}}},"In block , the client-side business component (JSSBusComp) examines the returned status flag and responds appropriately. It should be noted that the server will be contacted if an invoke method call performs actions that would require synchronization between the browser and server business components. It should be further noted that there could be circumstances where the JSSBusComp object may be able to handle the request locally without needing to contact the server. An example of such circumstances is when the user performs a next record operation and then a previous record operation without changing any data.","Methods Potentially Supported by Browser-Side Objects","In one embodiment, the methods, which can be potentially supported by the browser-side objects, can be divided into the following categories: base object methods, application methods, business component methods, service methods, and applet methods. For illustrative purposes, exemplary methods in each category will be listed and general described below.","Most of the browser-side objects will typically inherit the following base object methods:","AddErrorMsg(errcode,params,append)","General Description: Adds an error message to the error chain for the current object.","AddErrorMsgText(errCode,errMsg,append)","General Description: Adds an error message to the error chain for the current object.","ClearErrorMsg( )","General Description: Clears out the error chain for the current object.","CopyErrormsg(inputObject)","General Description: Copies the error chain from the passed object, inputobject, to the current object.","FormatString(format,parameters)","General Description: Substitutes parameters into the format by replacing \u201c% W\u201d escapes in the format with the equivalent parameter as specified in the params array.","GetApplication( )","General Description: Returns the global application object.","GetErrorCode( )","General Description: Returns the top-most error code in the error chain. An error code is generally a string. An empty string typically indicates that there is no error.","GetErrorCount( )","General Description: Returns the length of the error chain for the current object.","GetErrorMsg(index)","General Description: Returns the nth error message text string from the error chain for the current object. Note that the index is zero-based.","GetNthErrorCode(index)","General Description: Returns the nth error code from the error chain for the current object.","HasErrorMsg( )","General Description: Checks to see whether the current object has any registered errors.","LockErrorMsg( )","General Description: Prevents additional errors from being registered or cleared for the current object.","SetErrorMog(errCode,params,child)","General Description: Registers an error on the current object. ErrCode is generally a key registered in the message table and mapped to an error message format string. Params can be null if the format takes no parameters, an array containing the string parameter values, or a single value substituted for \u201c%1\u201d.","SetErrorMsgText(errCode,errMsg)","General Description: Registers an error on the current object.","TextToHTML(text)","General Description: Returns an HTML safe string for the inputted text.","TranslateError(errCode,params)","General Description: Returns a formatted string for the specified message key and parameters.","UnLockErrorMsg( )","General Description: Resumes handling error registration and clearing on the current object.","In one embodiment, each browser-side application object can typically support the following application methods:","AddBusobj(busObj)","General Description: Adds the BusObj for a view being instantiated. Called only by SWE.","AddRowCounterTemplate(key,templ)","General Description: Adds the string format template for one of the possible row counter formats.","AddView(view)","General Description: Adds a new view object.","CanInvokeMethod(name)","General Description: Verifies whether a given method can be invoked.","ClosePOPUP( )","General Description: Closes the active popup applet\/control.","CreateObj(jssObjName)","General Description: Creates a JavaScript object given a type name.","DispatchBCNotifications(returnPropSet)","General Description: Routes the notifications returned by the RPC to the SWE server to the appropriate BusComp instances.","EnumBusObjs(first)","General Description: Iterates through the business objects that registered with the application.","EnumServices(first)","General Description: Iterates through the services loaded by the client.","EnumViews(first)","General Description: Iterates through the views registered with the application.","GetBusObj(name)","General Description: Returns a business object by name.","GetBusObjZone(zone)","General Description: Returns the Web Engine (WE) \u201czone\u201d associated with a business object.","GetCommandMgr( )","General Description: Returns the top-level command manager that handles and dispatches UI commands for toolbars and menus.","GetEditCaption( )","General Description: Returns the caption for edit mode applets.","GetEditCtlType( )","General Description: Returns the control type for edit mode applets.","GetHtmlFrameMgr( )","General Description: Returns the object that manages frames for downloading new content.","GetJSSInfo(busObjZone,appletName,url)","General Description: Uses the HTML frame manager to load the URL specified.","GetLocalString(key)","General Description: Returns the translated string for the specified key. These translated strings are typically stored in the message table and downloaded to the client on startup.","GetLocale( )","General Description: Returns the locale object.","GetMainView( )","General Description: Returns the current view of the application.","GetPageURL( )","General Description: Returns the URL for the current top-level page.","GetProfileAttr(attrName)","General Description: Returns the value of the named profile attribute on the server.","GetRowCounterTemplate(key)","General Description: Return the string format template for one of the row counter formats.","GetService(name)","General Description: Loads a specified service object locally and on the server. If the specified service has already been loaded, just increment the reference count.","GetView(busObjZone)","General Description: Gets the view corresponding to a \u201czone\u201d of a business object.","InvokeMethod(name,inputPropSet)","General Description: Invokes the named method on the application.","ProcessClosePopup(returnPropSet)","General Description: Closes the popup as posted.","ProcessConfirmDialog(errObj,returnPropSet)","General Description: Handles a confirmation dialog as posted.","ProcessError(object)","General Description: Brings up an error dialog for the error registered on the given object.","ProcessNewPage(returnPropSet)","General Description: Invokes a new page generation as posted.","ProcessRPCErrors(errObj,returnPropSet)","General Description: Handles errors returned by a call to the Web Engine on the server.","ProcessRPCNotifications(errObj,returnPropSet)","General Description: Handles notifications returned in a call to the Web Engine.","ProcessRPCRetPropSetStr(errObj, returnPropSetStr)","General Description: Handles returned property set from a call to Web Engine.","ReleaseService(service)","General Description: Releases the service immediately regardless of the reference count.","RemoveBusObj(busObj)","General Description: Remove a business object from the list of active ones.","RemoveObjFromArray(obj,arrayObj)","General Description: Removes an object from an array of objects.","WEAppletCanInvoke(appletName,viewName,busObjZone,method)","General Description: Calls the Web Engine to determine whether a method can be invoked on an applet.","WEApplicationCanInvoke(method)","General Description: Calls the Web Engine to determine whether a method can be invoked on the application.","WEBusCompCanInvoke(busCompName,busObjZone,method)","General Description: Calls the Web Engine to determine whether a method can be invoked on a business component.","WECallApplet(appName,viewName,busObjZone,method,inputPropSet)","General Description: Calls the Web Engine to invoke a specified remote procedure call on an applet.","WECallApplication(method,inputPropSet)","General Description: Calls the Web Engine to invoke a specified remote procedure call on the application.","WECallBusComp (busCompName,busObiZone,method,inputPropSet)","General Description: Calls the Web Engine to invoke a specified remote procedure call on a business component.","WECallService(serviceName,method,inputPropSet)","General Description: Calls the Web Engine to invoke a specified remote procedure call on a service.","WELoadService(name)","General Description: Calls the Web Engine to load a new service.","WEServiceCanInvoke(serviceName,method)","General Description: Calls the Web Engine to determine whether a method can be invoked on a service.","SetEditCaption(editCaption)","General Description: Sets up the caption used for edit mode.","SetEditCtlType(editCtlType)","General Description: Sets up the control type used for edit mode.","SetHtmlFrameMgr(htmlFrameMgr)","General Description: Sets up the HTML frame manager instance.","SetMain View(view)","General Description: Defines the main view.","SetPageURL(pageUrl)","General Description: Sets up the base URL for the application.","SetProfileAttr(attrName,value)","General Description: Changes the named user profile attribute to the specified value.","SetWSFrame(wsFrameName)","General Description: Defines a special frame for the HTML frame manager.","ShowPopup(url,height,width)","General Description: Raises a popup applet or control.","In one embodiment, each browser-side business component object can typically support the following business component methods:","AddField(name, . . . )","General Description: Specifies the configuration information for the fields when initializing the business component.","AddPickList(fieldName,picklist)","General Description: Specifies the pick list configuration for fields when initializing the business component.","AddRecord(record)","General Description: Specifies initial record data when initializing the business component.","AddUserProp(propName,value)","General Description: Specifies the configured user properties for the business component during its initialization.","AddFieldUserProp(fieldName,propName,value)","General Description: Specifies the configured user properties for a field during initialization of the business component.","CallServerBC(method,inputProps)","General Description: Sends a method to the business component on the server.","CanDelete( )","General Description: Determines whether the user can delete the current record from the current business component.","CanInsert(dynamic)","General Description: Determines whether a new record can be inserted in the current business component.","CaninvokeMethod(method)","General Description: Determines whether the named method can be invoked on the current business component.","CanMergeRecords( )","General Description: Determines the user can merge records in the current business component.","CanQuery( )","General Description: Determines whether the current business component supports queries.","CanUpdate(dynamic)","General Description: Determines whether the current record can be updated.","CanUpdateField(fieldName)","General Description: Determines whether a specified field can be updated.","Cleanup( )","General Description: Performs a clean up before objects are destroyed.","ClearUpdates( )","General Description: Removes pending updates to the current record that have not been sent to the server.","CopyRecord(before)","General Description: Creates a new record and copies the values of the current record into the new record.","DeleteRecord( )","General Description: Deletes the current record.","DisableNotify( )","General Description: Suspends notification messages.","EnableNotify( )","General Description: Resumes sending of notification messages.","End( )","General Description: Moves the current record to the last record.","EnumPields(first)","General Description: Iterates through the fields defined on the business component.","EnumUserProps(start)","General Description: Iterates through the user properties defined on the business component.","EnumFieldUserProps(start,filedName)","General Description: Iterates through the user properties defined on the named field.","GetActiveFieldArray( )","General Description: Returns an array of names of currently active fields.","GetActiveRow( )","General Description: Returns the index into the working set of the current row.","GetBusObj( )","Descrption: Return the business object that owns the current business component.","GetFieldDef(fieldName)","General Description: Returns the field object for the named field.","GetFieldIndex(fieldName)","General Description: Returns the index into the field array and record arrays for the given field.","GetIdValue( )","General Description: Returns the row ID value for the current record.","GetFieldTotal(fieldName)","General Description: Returns the total for the named field.","GetFieldValue(fieldName)","General Description: Returns the value for the named field from the current row.","GetFormattedValue(fieldName,format)","General Description: Returns the value for the named field from the current row, formatted for the current locale settings and according to the field type.","GetLocale( )","General Description: Returns the locale object for the system.","GetName( )","General Description: Returns the name of the business component.","GetNotifyObj(ntfyId)","General Description: Returns the notification object for the given ID.","GetNumRows( )","General Description: Returns the count of the number of rows seen by the current business component.","GetParentBC( )","General Description: Returns the parent business component of the current business component, if available.","GetPickList(fieldName)","General Description: Returns the pick list object for the named field.","GetRowNum( )","General Description: Returns the row number.","GetSearchSpec( )","General Description: Returns the search specification effective for the current query.","GetFieldSearchSpec(fieldName)","General Description: Returns the search specification effective for the specified field.","GetSortSpec( )","General Description: Returns the sort specification effective for the current query.","GetUserProp(propname)","General Description: Returns the value of the named user property on the current business component.","GetFieldUserProp(fieldName,propName)","General Description: Returns the value of the named user property on the specified field.","HandleServerNotification(propSet)","General Description: Processes notification messages from the server for the current business component. This method collects additional information passed back from the server to update its internal state. It also propagates the notification messages as appropriate.","HasPickList(fieldName)","General Description: Determines whether the given field has a defined pick list.","HasFieldTotals( )","General Description: Determines whether the business component can calculates=totals for any fields.","Home( )","General Description: Sets the current row to the first row in the query.","Initialize( )","General Description: Sets up the state of the business component after it is fully loaded and before its first use.","InvokeMethod(name,inputPropSet)","General Description: Calls the named method on the current business component.","IsCurWSRecActive(ntfyId)","General Description: Determines whether the current record of this notification object is the current record in the working set of the business component.","IsCurWSRecSelected(ntfyId)","General Description: Determines whether the current record in this notification object has been selected in the business component.","IsNumRowsKnown( )","General Description: Determines whether the total number of records from the query is known.","NextRecord( )","General Description: Moves the current record in the business component to the next record in the query.","NextSet( )","General Description: Scrolls the working set down.","NewActiveRow(index)","General Description: Updates the internal state when the current row changes.","NewFieldData(fieldName,value)","General Description: Updates the internal state when a field value is changed on the server.","NewRecord(before)","General Description. Creates a new record in the business component with default field values.","PositionById(id)","General Description: Locates the record in the current query with the specified ROW-ID and make it the current record.","PriorRecord( )","General Description: Moves the current record back one row in the current query.","PriorSet( )","General Description: Scrolls the working set up.","RedoRecord( )","General Description: Re-applies changes previously removed.","RegNotifyObj(notify)","General Description: Registers a notification object with the business component.","SetActiveRow(row)","General Description: Sets the current row in the business component to the specified index into the working set.","SetBusObj(busObj)","General Description: Sets the business object that owns the current business component.","SetFieldValue(fieldName, value)","General Description: Changes the value of the specified field in the current record to the given value.","SetFormattedValue(fieldName,value,format)","General Description: Sets the value of the specified field in the current record to the given value.","SetName(name)","General Description: Sets the name of the business component.","SetParentBC(busComp)","General Description: Sets the parent business component for a child.","SetSearchSpec(spec)","General Description: Sets the search specification effective for the initial query.","SetFieldSearchSpec(fieldName,spec)","General Description: Sets the search specification effective for the specified field.","SetSortSpec(spec)","General Description: Sets the sort specification in effect for the initial query.","SetTotalsRecord(record)","General Description: Sets the record that contains the total values for the current query.","SetWorkSetSize(ntfyId, size)","General Description: Sets the number of records displayed in the working set for a specified notification object.","toString( )","General Description: Returns a string that includes the name of the business component.","UndoRecord( )","General Description: Undoes all changes since the last WriteRecord( ) was invoked.","UnRegNotifyObj(ntfyId)","General Description: Removes registration of the notification object specified by the ID.","UpdateRecord( )","General Description: Puts the current record into a mode where a SetFieldValue( ) may be called.","WriteRecord( )","General Description: Sends any pending changes to the server and writes them out to the database.","WSEnd(ntfyId)","General Description: Moves the current record for the specified notification object to the end of the query.","WSGetFieldValue(ntfyId,fieldName)","General Description: Returns the field value from current record of the specified notification object.","WSGetFormattedValue(ntfyId,fieldName,format)","General Description: Returns the field value from current record for the current notification object.","WSGetBegRow(ntfyId)","General Description: Returns the row number that corresponds to the first record in the working set of the specified notification object.","WSGetCurrRow(ntfyId)","General Description: Returns the index of the current record within the specified notification object.","WSHome(ntfyId)","General Description: Moves the current record for the specified notification object to the beginning of the query.","WSNextRecord(ntfyId)","General Description: Moves the current record to the next record for the specified notification object.","WSSelectRow(ntfyId,row)","General Description: Moves the current record for the specified notification object to index specified within this working set.","WSSelectRowById(ntfyId,id)","General Description: Finds the row within this notification object by row ID and call WSSelectRow( ).","WSSetCurrRow(ntfyId,currrow)","General Description: Moves the current record for the notification object record in the query identified by the row ID.","In one embodiment, each browser-side service object can typically support the following service methods:","AddRef( )","General Description: Adds a reference to a service so that it will not be automatically released.","CanInvokeMethod(name)","General Description: Determines whether the named method can be invoked on the current service?","FindApplet(name)","General Description: Finds the named applet with the main view.","GetApplication( )","General Description: Returns a pointer to the global application object.","GetBusComp( )","General Description: Return the business associated with the current service.","GetName( )","General Description: Return the name of the current service.","InvokeMethodAsString(name,argSting)","General Description: This method is generally a convenience interface to InvokeMethod( ) whenthestring is already a formatted property set. Calls InvokeMethod( ) for implementation.","Invokemethod(name,inputPropSet)","General Description: Invokes the method on the current service.","Release( )","General Description: Removes the reference created by AddRef( ) to allow the service to be released.","SetApplication(app)","General Description: Sets the application object pointer on the service.","SetBusComp(busComp)","General Description: Sets the business component with the current service.","SetName(name)","General Description: Set the name of the server during initialization. Called only by SWE.","StringToPropSet(string)","General Description: Converts the argument string into a property set.","In one embodiment, each browser-side applet can typically support the following applet methods:","AddConditional(spanID, . . . )","General Description: Sets up the conditional to be implemented by the applet.","AddControl(name, . . . )","General Description: Sets up the controls on the applet.","AddMenu(menu)","General Description: Sets up the menu associated with the applet.","AddUserProp(propName,value)","General Description: Sets up the user properties for the applet.","AddControlUserProp(controlName,propName,value)","General Description: Sets up the user properties for a control.","ButtonMethod(name,inputPropSet)","General Description: This method is generally an interface to InvokeMethod( ) that first makes sure the applet is the active applet.","CallServerApplet(method,inputProps)","General Description: Forwards messages to the WE frame that corresponds to the current applet.","CanInvokeMethod(name)","General Description: Determines whether the given method can be invoked on the current applet.","DeletePopup( )","General Description: Closes a popup that is active from the current applet.","Close( )","General Description: Removes the current applet from the view. For a popup applet, restores the state in the parent applet.","Cleanup( )","General Description: Cleans up any state before an object is destroyed.","EnumUserProps(start)","General Description: Iterates through the user properties defined on the current applet.","EnumControlUserProps(start,controlName)","General Description: Iterates through the user properties on the named control.","GetBusComp( )","General Description: Returns the business component on which the current applet is based.","GetControl(controlName)","General Description: Returns the control data structure for the named control.","GetFieldControl(fieldName)","General Description: Returns the control object that sits on top of the named field.","GetFieldSorting(fieldName)","General Description: Returns the sort state for the named field.","GetId( )","General Description: Returns the ID associated with the current applet.","GetInputValue(input)","General Description: Returns the value contained in the, given INPUT (control) element.","GetInputValueByName(name)","General Description: Returns the value from the input for the named control.","GetName( )","General Description: Returns the applet name.","GetNotifyObj( )","General Description: Returns the notification object registered by the applet during initialization.","GetTitle( )","General Description: Returns the title of the applet.","GetVariable( )","General Description: Returns the HTML name of the variable that points to the current applet.","GetUserProp(propName)","General Description: Returns the value of the named user property.","GetControlUserProp(controlName,propName)","General Description: Returns the value of the named user property for the given control.","GetView( )","General Description: Returns the parent view for the current applet.","GetPopupMethod( )","General Description: Returns the internal state of the popup applet.","GetPopupControl( )","General Description: Returns the control of the popup applet. Called by JavaScript framework.","GetPopupApplet( )","General Description: Returns the internal state of the popup applet.","GetPopupBookmark( )","General Description: Returns the internal state of the popup applet.","GetParentApplet( )","General Description: Returns the parent applet of a popup applet.","Initialize( )","General Description: Sets up the state on the applet after it has been created and before it is used.","InvokeMethod(name,inputPropSet)","General Description: Invokes the specialized method on this applet. This is the primary way that specialize applets register new methods.","IsActiveApplet( )","General Description: Determines whether the current applet is the one active within the view.","LeaveField(field)","General Description: This method is typically called when focus leaves an input element that corresponds to a control.","Populate( )","General Description: Sets up all UI elements on the applet with state from the business component.","ProcessError(object)","General Description: Brings up an error dialog for the error registered on the given object.","SetAppletActive(is Active,newActiveApplet)","General Description: Sets the specified applet active or inactive. If the first argument is true, the specified applet is being made active.","SetBusComp(busComp)","General Description: Set up the business component on which the current applet is based.","SetDocument(doc)","General Description: Sets up the HTUL document object for the current applet.","SetHighlightClasses(elementID,activeClass,inactiveClass)","General Description: Sets up the state for displaying the active applet highlight.","SetId(id)","General Description: Sets the ID for the current applet to distinguish it from other applets in the view.","SetInputValue(input,value)","General Description: Sets the current value of the input element current value to a specified value.","SetName(name)","General Description: Sets the name of the applet.","SetNotifyObj(notifyObj)","General Description: Sets the given notification object as the active one for this applet.","SetTitle(title)","General Description: Sets the title of the applet.","SetPopupMethod(popupMethod)","General Description: Sets the state of the popup applet.","SetPopupControl(popupControl)","General Description: Sets the state of the popup applet.","SetPopupApplet(popupApplet)","General Description: Sets the state of the popup applet.","SetPopupBookmark(popupbookmark)","General Description: Sets the state of the popup applet.","SetParentApplet(parentApplet)","General Description: Set the parent applet of a popup applet.","SetVariable(variable)","General Description: Sets the HTML variable that refers to the applet object.","SetView(view)","General Description: Sets the parent view for the current applet.","toString( )","General Description: Returns a string that includes the applet name.","TryCondition(service,method,args)","General Description: Determines whether the given condition returns true. TryCondition( ) invokes the service method and returns the state.","UpdateConditionals( )","General Description: Re-evaluates conditionals now that some significant state has changed.","UpdateRowCounter( )","General Description: Re-generates the row counter string and updates the displayed row counter.","Command Manager","In one embodiment, various user interface items or controls such as toolbars, menus, keyboard controls (also called keyboard shortcuts or keyboard accelerators herein), etc. are used to provide the means for the user to initiate various actions or commands. In one embodiment, toolbars may be designed and configured to appear in their own frame near the top of the application in the browser window, and the application menus (e.g., File, View and Help, etc.) may be designed and configured to appear beneath the primary tab (e.g., 1st level navigation) bar. In one embodiment, the applet-level menus can be invoked from the applet menu button, in the control banner at the top of an applet. , , and  illustrate examples of toolbars, application-level menus, and applet-level menus, respectively. In one embodiment, each user interface item or object in a toolbar, application-level menu, applet-level menu, or a particular keyboard shortcut or keyboard accelerator (e.g., CRTL+N) can be configure to be associated or mapped to a particular command to be executed in response to the user's selection or activation of the respective user interface item (e.g., clicking on a menu item, pressing a keyboard combination such as CTRL+N, etc.). In one embodiment, each command can be defined and configured to invoke one or more particular methods to perform one or more particular functions or actions requested by the user. In one embodiment, a data structure referred to herein as a command object can be defined and configured to represent a particular command the execution of which may result in the invocation of one or more particular methods associated with the respective command object. Command objects are described in more details below.","In one embodiment, a selection or activation of a toolbar icon or menu item (e.g., user's clicking on a toolbar icon or menu item, etc.) is normally translated into a call to an invoke method, which may reside in a service on the browser or server, or in classes in the browser application or server infrastructure (e.g., applet or business component classes, SWE frame manager, or model, etc.). In one embodiment, a user interface item such as a toolbar icon, a menu item, or a keyboard shortcut may be configured to target a method name, a method handler (from which it may be automatically re-targeted if not found), and optionally a service.","In one embodiment, application-level items (which may include both toolbar icons, application-level menus, and keyboard shortcuts, etc.) can be implemented through the use of command object definitions in Tools, which are then mapped to Toolbar Item or Menu Item object definitions. In one embodiment, applet-level menus do not utilize command object definitions, but the set of properties used for targeting and invoking the corresponding method are similar to those found in the command object type.","In one embodiment, in the web engine templates, the toolbar tag can be used to specify a named toolbar (where the name corresponds to the Name property in the Toolbar object definition in the repository), and the toolbaritem tag between the toolbar start and end tags recursively retrieves all of the toolbar items for that toolbar from the repository.","In one embodiment, a design-time menu activation\/suppression feature is provided for applet-level menus. This feature provides the capability to make a menu item available globally for applets of a given class and its subclasses, and then suppress it in particular applets where it is not desired. In one embodiment, the design-time menu activation\/suppression feature can be implemented using the Class Method Menu Item object type, which can be used to implement the menu item in the applet-level menu of all applets of the specified applet class, except where suppressed as defined by the Suppress Menu Item property. Applet method menu item, class method menu item, and the suppression of menu item are described in greater details below.",{"@attributes":{"id":"p-0396","num":"0458"},"figref":["FIG. 19","FIG. 19"],"b":"1900","ul":{"@attributes":{"id":"ul0019","list-style":"none"},"li":{"@attributes":{"id":"ul0019-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0020","list-style":"none"},"li":["Creating one or more command objects (at block )","Creating one or more toolbar objects (at block )","Creating one or more toolbar item objects (at block )","Creating one or more application-level menu objects (at block )","Creating one or more application-level menu item objects (at block )","Creating one or more applet method menu item objects (at block )","Creating one or more class method menu item objects (at block )","Creating one or more keyboard accelerator objects, also called keyboard shortcuts, shortcut keys herein (at block )."]}}}},{"@attributes":{"id":"p-0397","num":"0467"},"figref":"FIG. 20","b":["2000","2010","2020"]},{"@attributes":{"id":"p-0398","num":"0468"},"figref":"FIG. 21","b":["2110","2120","2130","2140","2150","2160","2170","2180"]},"In one embodiment, a command object definition is created and configured to specify which invoke method is called when a toolbar icon or application-level menu item associated with the command is executed. Furthermore, a command object definition may be used to specify which bitmap appears on the toolbar icon for toolbar items. In one embodiment, command object definitions are referenced by Toolbar Item or Menu Item object definitions. As illustrated in , a Command object definition generally has the following properties:\n\n","Method Argument property  generally is used to provide a mechanism to pass an argument to the invoke method specified in the Method property. For example, a command item that opens a new window and navigates to a URL in that window can specify the GotoURL method in Method property and the URL to navigate to in the Method Argument property.\n\n",{"@attributes":{"id":"p-0401","num":"0480"},"figref":"FIG. 22","b":["2200","2210","2220"]},{"@attributes":{"id":"p-0402","num":"0481"},"figref":"FIG. 23","b":["2310","2320","2330","2340"]},"In one embodiment, for each toolbar in the application, a Toolbar object definition can be created in the Object List Editor. This provides a named toolbar that the user can activate or deactivate in various applications, and to which toolbar icons (e.g., Toolbar Item object definitions) can be associated or removed. Toolbar functionality for applications can be implemented using HTML toolbars. In one embodiment, in an HTML toolbar, the buttons are static images, which may be dimmed to indicate unavailability, but otherwise are not manipulated by program logic on the browser. In contrast, CTI (computer telephony integration) applications may require toolbar icons that can be altered in response to events, such as blinking a particular toolbar icon when a call is incoming. In one embodiment, this may require the use of Java toolbars. In one embodiment, to specify that a toolbar is of the Java type, a class name is entered in the Class property. As shown in , a toolbar object may include the following properties:\n\n",{"@attributes":{"id":"p-0404","num":"0486"},"figref":"FIG. 24","b":["2400","2410","2420"]},{"@attributes":{"id":"p-0405","num":"0487"},"figref":"FIG. 25","b":["2510","2520","2530","2540","2550"]},"In one embodiment, a Toolbar Item object is defined and configured to associate a Command object definition (which is identified by name as a property in the Command property of the toolbar item object) with a Toolbar object definition (which is the parent of the Toolbar Item object). In one embodiment, this association places a toolbar icon whose bitmap image, invoke method and target are specified in the Command object definition, on the specified toolbar in a given location (e.g., a position relative to the other toolbar icons on that toolbar). In one embodiment, as illustrated in , a toolbar item object may be defined to include the following properties:\n\n","In one embodiment, a menu object can be defined and configured for each application-level menu. In one embodiment, a menu object is considered a parent of corresponding menu item objects. A menu item object is used to define an application main menu or menu item within the parent menu object definition.",{"@attributes":{"id":"p-0408","num":"0495"},"figref":"FIG. 26","b":["2600","2610","2620"]},{"@attributes":{"id":"p-0409","num":"0496"},"figref":"FIG. 27","b":["2710","2720","2730","2740"],"ul":{"@attributes":{"id":"ul0030","list-style":"none"},"li":{"@attributes":{"id":"ul0030-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0031","list-style":"none"},"li":["Name property . In one embodiment, this property is used to uniquely identify the menu or menu item.","Command property . In one embodiment, this property specifies the name of the corresponding Command object definition that is used to provide the method and target for the respective menu item.","Caption property . In one embodiment, this property specifies the text that is displayed in the menu or menu item.","Position property . In one embodiment, this property specifies the position of the menu or menu item in the menu tree. For example, the top-level positions, for menus (rather than items within them) can be single integers such as 1, 2, and 3 (or 10, 20 and 30). Position values for menu items (e.g., 2nd level and below in the menu tree) can be specified using a dot notation, where the value to the right of the rightmost dot specifies the order of the item on its level, and the value or values to the left of that dot specify the parent menu or menu item. For example, 3.1 can be defined as the first item in the submenu of the third item of the top-level menu. It should be noted that values on a level are not required to be consecutive\u2014for example, the values , ,  and  may be used to indicate four menu items on the same level and their sequence determines their order of display in the menu."]}}}},"In one embodiment, an applet method menu item object is used to define a menu item in the applet-level menu for the parent Applet object definition. In one embodiment, unlike application-level menus, applet menus are not based on Command objects. However, the set of properties used for targeting the method are similar to those found in the command object type.  shows a flow diagram of one embodiment of a process  for creating an applet method menu item object in accordance with the teachings of the present invention. Creating an applet method menu item object can generally include defining an applet method menu item object (at block ) and specifying the properties for the defined applet method menu item object (at block ).",{"@attributes":{"id":"p-0411","num":"0502"},"figref":"FIG. 29","b":["2910","2920","2930","2940","2950","2960"],"ul":{"@attributes":{"id":"ul0032","list-style":"none"},"li":{"@attributes":{"id":"ul0032-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0033","list-style":"none"},"li":["Menu Text property. In one embodiment, this property is used to specify the text displayed in the menu item.","Target property. In one embodiment, this property is used to specify which entity handles the invoke method specified in the Method property. In one embodiment, the following options are available:\n        \n        ","Method property. In one embodiment, this property is used to specify the method to be invoked when the corresponding menu item is selected.","Business Service property. If specified, this property identifies the service on which to invoke the specified method. If unspecified, the specified method is invoked on the applet class on the browser or server (as specified in the Target property) with subsequent retargeting if unhandled.","Suppress Menu Item property. In one embodiment, the default for this property is set to FALSE. If this property is set to TRUE, it causes the class-level menu item of the specified name to be removed from the applet-level menu in the applet where this property is specified.\n\nPosition property. In one embodiment, this property is used to specify the sequence of the menu item in the single-level list of menu items.\n"]}}}},{"@attributes":{"id":"p-0412","num":"0510"},"figref":"FIG. 30","b":["3000","3010","3020"]},{"@attributes":{"id":"p-0413","num":"0511"},"figref":"FIG. 31","b":["3110","3120","3130","3140","3150","3160"],"ul":{"@attributes":{"id":"ul0035","list-style":"none"},"li":{"@attributes":{"id":"ul0035-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0036","list-style":"none"},"li":["Target property. In one embodiment, this property is used to specify which entity handles the invoke method specified in the Method property. In one embodiment, the following options are available:\n        \n        ","Menu Text property. In one embodiment, this property is used to specify the text displayed in the menu item.\n\nMethod property. In one embodiment, this property is used to specify the method to be invoked when the corresponding menu item is selected.\n","Business Service property. If specified, this property identifies the service on which to invoke the specified method. If unspecified, the specified method is invoked on the applet class on the browser or server (as specified in the Target property) with subsequent retargeting if unhandled.","Suppress Menu Item property. In one embodiment, the default for this property is set to FALSE. If this property is set to TRUE, it causes the applet-level menu items of the specified name to be removed from the applet-level menu in all applets derived from this class and its subclasses.","Position property. In one embodiment, this property is used to specify the sequence of the menu item in the single-level list of menu items."]}}}},{"@attributes":{"id":"p-0414","num":"0519"},"figref":["FIG. 32","FIG. 32"]},{"@attributes":{"id":"p-0415","num":"0520"},"figref":["FIG. 33","FIG. 33"]},{"@attributes":{"id":"p-0416","num":"0521"},"figref":["FIG. 34","FIG. 34"]},"Menu Item and Toolbar Item Activation and Suppression","In one embodiment of the present invention, menu items (e.g., both application-level and applet-level) and toolbar items can be enabled or disabled at runtime, by using the CaninvokeMethod mechanism. In one embodiment, CaninvokeMethod (for the method specified in the Command, Applet Method Menu Item or Class Method Menu Item object, etc.) will be called automatically for each item prior to displaying the menu or toolbar. If CaninvokeMethod returns FALSE, the toolbar item or menu item disabled (e.g., is not displayed). The CaninvokeMethod logic generally is retargeted from the browser application to the applet class hierarchy on the server, and from there to the business component class hierarchy. The targeting sequence is described in more details below.","As described herein, in one embodiment, suppression and activation of individual applet-level menu items at design time is supported by using the Suppress Menu Item property in the Class Method Menu Item and Applet Method Menu Item object types. In one embodiment, this mechanism or feature is applicable to applet-level menus, not application-level menus or toolbars, in which the item is added or removed explicitly. Design-time menu activation\/suppression for applet-level menus provides the mechanism to make a menu item available globally for applets of a given class and its subclasses, and then suppress it in particular applets where it is not desired. For example, various applet-level menu items appear in virtually all applets (such as Copy, Edit and Delete, etc.), others appear in virtually all list applets (such as Columns Displayed), and so on, but there can be some cases in which a \u201cstandard\u201d menu item for the applets class needs to be suppressed for a specific applet.","In one embodiment, to add applet-class-level menu items, a Class Method Menu Item is added for a standard menu item for a given applet class. In one embodiment, this menu item would not need to be re-included as Applet Method Menu Item object definitions in applets in which the menu item is to appear. In one embodiment, Applet Method Menu Item object definitions are created in two circumstances: to add a menu item (not already provided by the applet's class) to the applet, or to suppress display of an applet-class-level item that the applet would normally inherit. In the latter case, an Applet Method Menu Item object definition is created with the same name as the applet-class-level menu item which is to be suppressed, and a value of FALSE is entered for the Suppress Menu Item property.","Invoke Method Targeting","According to one embodiment of the present invention as described herein, the Method, Business Service and Target properties are included in the Command object type (for use in toolbars and application-level menus) and in the Class Method Menu Item and Applet Method Menu Item object types (for use in applet-level menus). In one embodiment, two settings or options are available for the Target property, with the following behavior:\n\n","If a service is specified in the Service property, the method handler is the specified service. This targeting is also dependent on whether the calling menu item or toolbar icon is applet-level or application-level, as follows:\n\n","The following matrix or table illustrates the results of the possible settings of the Target and Business Service properties at the applet and application levels, in accordance with one embodiment of the present invention:",{"@attributes":{"id":"p-0423","num":"0536"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"133pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["Menu\/Toolbar Level","Target","Service","Result"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Application-","Server","specified","The method handler is the specified OM"]},{"entry":["level",{},{},"service. It does not retarget."]},{"entry":[{},{},"unspecified","The method handler is initially the SWE"]},{"entry":[{},{},{},"UDF loader on the server side, and"]},{"entry":[{},{},{},"secondarily the model."]},{"entry":[{},"Browser","specified","Targets to the method in the specified"]},{"entry":[{},{},{},"browser-side service. Does not retarget."]},{"entry":[{},{},"unspecified","Targets to the specified method in the"]},{"entry":[{},{},{},"JavaScript application. Does not retarget."]},{"entry":["Applet-level","Server","specified","The method handler performs a SetBC"]},{"entry":[{},{},{},"call to set the business component of"]},{"entry":[{},{},{},"the service to the business component"]},{"entry":[{},{},{},"of the applet, and then calls the"]},{"entry":[{},{},{},"specified OM service. It does not retarget."]},{"entry":[{},{},"unspecified","The method handler is initially the"]},{"entry":[{},{},{},"applet class to which the applet"]},{"entry":[{},{},{},"belongs, and is retargeted successively"]},{"entry":[{},{},{},"up through the applet class hierarchy to"]},{"entry":[{},{},{},"CSSSWEFrame. If still unhandled,"]},{"entry":[{},{},{},"handling is retargeted to the business"]},{"entry":[{},{},{},"component class of the applet's"]},{"entry":[{},{},{},"business component, and successively"]},{"entry":[{},{},{},"upwards through the business"]},{"entry":[{},{},{},"component class hierarchy to CSSBusComp."]},{"entry":[{},"Browser","specified","Targets to the method in the specified"]},{"entry":[{},{},{},"browser-side service. Does not retarget."]},{"entry":[{},{},"unspecified","Targets to the specified method in the"]},{"entry":[{},{},{},"JavaScript applet. If not handled,"]},{"entry":[{},{},{},"retargets to the specified method in the"]},{"entry":[{},{},{},"corresponding JavaScript business"]},{"entry":[{},{},{},"component. No inheritance or additional"]},{"entry":[{},{},{},"retargeting."]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}}}},{"@attributes":{"id":"p-0424","num":"0537"},"figref":["FIG. 35","FIG. 35"],"b":["3500","3500"]},{"@attributes":{"id":"p-0425","num":"0538"},"figref":"FIG. 36","b":["3600","3610","3620","3630","3640"]},{"@attributes":{"id":"p-0426","num":"0539"},"figref":"FIG. 37","b":["3700","3710","3720","3730","3740","3750","3760","3770","3780"]},"Immediate Post-When-Change",{"@attributes":{"id":"p-0427","num":"0540"},"figref":["FIG. 38","FIG. 38","FIG. 38"]},{"@attributes":{"id":"p-0428","num":"0541"},"figref":["FIG. 39","FIG. 39"]},"Typically, the value of a particular field may depend upon the value of another field. The dependency or inter-dependency between field values may exist in various ways. For example, assuming that a user wishes to enter an address which typically includes various fields, the value that the user enters for a particular field (e.g., State field) may determine the set of valid values that the user can enter in another field (e.g., City field). As another example, a particular field may become disabled or read-only when the value in another field changes. Furthermore, there may be cases where the type of user-interface control or format used to show a particular field may change based on the value entered in another field. For example, the user interface control for a particular field may be conFigured to change from a text box in which a user can enter any value into a combo-box where the user has to choose from a list of existing values.","Conventionally, in a client server environment, the client waits for the user to finish entering a set of changes, post the changes to the server for processing and then shows the user another page with the dependent information between field values. For example, in a convention application or system, the client waits for the user to finish entering all the address information such as STATE, CITY, etc. and then posts all the changes to the server. The server will then send a new page to the client for display to the user which may include the relevant dependent information between fields. This conventional method or conventional way of handling and processing dependency or inter-dependency between field values is not effective because changes due to the inter-dependency between field values are not seen by the user immediately, thus making the user interface environment much less interactive. For example, after the user has changed the value of a particular field (upon which the value and\/or layout of another field depends), the user will not recognize or see the effect of the change until after all the changes have been posted to the server and a new page is displayed.","To solve the problem described above, according to one aspect of the present invention, a method is provided in which a change in value of a field upon which the values, format, or functionality of other fields depend will be immediately posted to the server for processing (also referred to as the immediate post-when-change feature or immediate post-when-change mechanism herein).","According to one embodiment of the present invention, the fields upon which the other field(s) depend are marked for immediate post-when-change in the repository. This information is therefore available as part of the meta-data. In one embodiment, the client side framework uses this information to decide when to send changes to field values to the server for processing. The server will then respond using the notification mechanism described above to send back dependent changes as a result of the changes processed by the server. For example, upon detecting that the value of a particular field has changed (this particular field is marked for immediate post-when-change), the client will immediately submit the value of this particular field and the values of other client-side fields that have changed to the server for processing. The server will then respond using the notification mechanism to send back the dependent changes for the client to take appropriate actions based on the dependent changes. For example, if the change of value of a first field causes the value and\/or format of a second field to be changed, upon receiving the notifications from the server, the client will change the value and\/or the format of the second field accordingly. In one embodiment, the logic to perform the immediate post-when-change process is implemented as part of the Javascript code running on the client side.",{"@attributes":{"id":"p-0433","num":"0546"},"figref":"FIG. 40"},{"@attributes":{"id":"p-0434","num":"0547"},"figref":"FIG. 41","b":["4110","4120","4130","4140","4150"]},"Busy State Manager","One of the problems experienced in a traditional HTML or web-based application is that once a client (e.g., the browser) sends a request to a server for processing, it will time out if the server does not respond within a certain period of time. This time out condition occurs in spite of the fact that certain requests may take a long time to process depending upon various factors such as the type of the request, the available resources on the server, and the number of requests being processed or waiting to be processed by the server, etc. For example, a client in a traditional web-based or HTML application may submit a request that involves a very time-consuming query operation in a large database. This request may not be finished before the time out condition occurs.","According to one embodiment of the present invention, a mechanism is provided so that when a client submits a request to a server that involves long-running or time-consuming operations on the server side, the server can inform the client accordingly using the notifications mechanism described above. Based upon the information provided by the server regarding the request, the client can take appropriate actions to inform a user of the status of the request (e.g., by displaying a progress bac, showing how much of the task has been completed thus far, etc.). In one embodiment, the communications regarding the status and progress of the request can be managed as described in more details below.",{"@attributes":{"id":"p-0437","num":"0550"},"figref":["FIG. 42","FIG. 42"]},"In one embodiment, upon determining that the request received from the client may take a long time to process (e.g., the request involves long-running server operations, etc.), the server will notify the client accordingly. In one embodiment, once the client is informed by the server that the request may take a long time to process, the client can inform the user that the request processing has started and lock the user interface during the time the request is being processed by the server. In one embodiment, the server will continue to inform the client of the progress of the request and the client can take appropriate actions to inform the user accordingly, until the request processing is finished. For example, upon receiving the progress information from the server via the notifications, the client can update a progress bar to show the user how much of the task has been completed at that point in time. In one embodiment, the user interface will continue to be locked until the request processing is completed.",{"@attributes":{"id":"p-0439","num":"0552"},"figref":"FIG. 43","b":["4300","4310","4320","4330","4340","4350","4360","4370"]},"III. Caching","As stated above, objects on the browser and objects managed by the OM can be conFigured to reside and operate on one or multiple computing devices. As shown above,  illustrates an exemplary configuration  in which objects  on the browser and objects  managed by the OM reside and operate on multiple computing devices  and , including a client  and a server .  illustrates an exemplary configuration  in which objects  on the browser and objects  managed by the OM reside and operate on one computing device .",{"@attributes":{"id":"p-0441","num":"0554"},"figref":["FIG. 44","FIG. 6A","FIG. 6A","FIG. 44"],"b":["4400","600","4402","4404","4402","4406","4408","4410"]},"A view or JSSView object  and a plurality of applets or JSSApplet objects , , . . . , , where N is a positive integer are shown to be running on the browser . The JSSView object  generally represents a view. As stated above, a view is generally a display panel consisting of a particular arrangement of applets. As previously discussed, an applet is generally a visual application unit that appears on the screen as part of a view. Each applet or JSSApplet object , , . . . , represents an applet that is associated to the view represented by the view or JSSView object.","The client  includes a cache  to generally store views to improve performance. At times, the user can navigate or switch to new views causing the client  to submit corresponding requests to navigate to new views to the server . As previously discussed, when the client  submits a request to navigate to a view to the server , the server  would send a response or notification containing the view layout that is devoid of data. Accordingly, a round trip to the server  (including a request from the client  to the server  and a response or notification from the server  to the client ) would typically be needed to retrieve the view layout and the view custom options from the server . The view layout and the view custom options will be generally shown in  and generally described below in the text that accompanies . It should be noted that each round trip would take up valuable computing resources and would cause time delays. After sending the view layout and the view custom options to the client , the server  would then send a response containing data to populate the view.","To improve performance, one or more view layouts and view custom options can be stored in the cache. Once its layout and customer options are stored in the cache, the view can generally be referred to as a cached view. If the user navigates to a cached view, the client  can retrieve the view layout and view custom options from the cache instead of the server. By retrieving the view layout and the view custom options from the cache, a round trip to the server  can be eliminated, thereby improve system performance.",{"@attributes":{"id":"p-0445","num":"0558"},"figref":"FIG. 45","b":["4416","4416","4518","4518","4518","4518","4518","4518","4520","4524","4524","4524"],"sub":["1","2","M","1","2","M ","1","2","N "]},"In one embodiment, each cache entry , , . . . , can also be designed to customized options  associated with the view. In one embodiment, the view customized options  can include keyboard accelerators  and preferences . A keyboard accelerator  is generally a sequence of keys or keystrokes that is mapped to a command object. An exemplary command object is shown and generally described above. Preferences  are generally either default or user-selected display options. Exemplary preferences can include font, font size, font colors, width of columns and rows, etc.",{"@attributes":{"id":"p-0447","num":"0560"},"figref":["FIG. 46","FIG. 45"],"b":["4600","4605","4610","4615","4620","4625","4630","4635"]},{"@attributes":{"id":"p-0448","num":"0561"},"figref":["FIG. 47","FIG. 45"],"b":["4700","4705","4710","4715"]},"If the view is currently saved in the cache, the client retrieves the view layout and the view custom options from the cache (block ). It should be noted that the client would save a round trip to the server by retrieving the view layout and the view custom options from the cache, thereby improving system performance. After retrieving the view layout and the view custom options, the client displays the view using the view layout (block ) and applies the view custom options to the view (). After displaying the view, the client retrieves data for the view from the server (block ). After receiving the data from the server, the client populates fields in the view with the retrieved data (block ).",{"@attributes":{"id":"p-0450","num":"0563"},"figref":"FIG. 48","b":["4810","4820","4830","4840","4850","4860","4870","4880"]},{"@attributes":{"id":"p-0451","num":"0564"},"figref":["FIG. 49","FIG. 50"],"b":["4938","4900","4938","522","5030"]},"These and other embodiments of the present invention may be realized in accordance with these teachings and it should be evident that various modifications and changes may be made in these teachings without departing from the broader spirit and scope of the invention. The specification and drawings are, accordingly, to be regarded in an illustrative rather than restrictive sense and the invention measured only in terms of the claims.","In addition, the instructions to perform the methods as described above could alternatively be stored on other forms of computer-readable mediums. A machine-readable medium includes any mechanism that provides (e.g., stores and\/or transmits) information in a form readable by a machine (e.g., a computer). For example, a machine-readable medium includes read only memory (ROM); random access memory (RAM); magnetic disk storage media; optical storage media; flash memory devices; electrical, optical, acoustical or other form of propagated signals (e.g., carrier waves, infrared signals and digital signals)."],"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY","DETAILED DESCRIPTION"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The features and advantages of the present invention will be more fully understood by reference to the accompanying drawings, in which:",{"@attributes":{"id":"p-0011","num":"0014"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0015"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0016"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0017"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0015","num":"0018"},"figref":["FIG. 5A","FIG. 2"],"b":"500"},{"@attributes":{"id":"p-0016","num":"0019"},"figref":["FIG. 5B","FIG. 5A"]},{"@attributes":{"id":"p-0017","num":"0020"},"figref":"FIG. 5C"},{"@attributes":{"id":"p-0018","num":"0021"},"figref":"FIG. 6A"},{"@attributes":{"id":"p-0019","num":"0022"},"figref":"FIG. 6B"},{"@attributes":{"id":"p-0020","num":"0023"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0021","num":"0024"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0022","num":"0025"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0023","num":"0026"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0024","num":"0027"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0025","num":"0028"},"figref":"FIG. 12","b":"1200"},{"@attributes":{"id":"p-0026","num":"0029"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0027","num":"0030"},"figref":["FIG. 14","FIG. 6A"]},{"@attributes":{"id":"p-0028","num":"0031"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0029","num":"0032"},"figref":"FIGS. 16","b":["17","18"]},{"@attributes":{"id":"p-0030","num":"0033"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0031","num":"0034"},"figref":"FIG. 20"},{"@attributes":{"id":"p-0032","num":"0035"},"figref":"FIG. 21"},{"@attributes":{"id":"p-0033","num":"0036"},"figref":"FIG. 22"},{"@attributes":{"id":"p-0034","num":"0037"},"figref":"FIG. 23"},{"@attributes":{"id":"p-0035","num":"0038"},"figref":"FIG. 24"},{"@attributes":{"id":"p-0036","num":"0039"},"figref":"FIG. 25"},{"@attributes":{"id":"p-0037","num":"0040"},"figref":"FIG. 26"},{"@attributes":{"id":"p-0038","num":"0041"},"figref":"FIG. 27"},{"@attributes":{"id":"p-0039","num":"0042"},"figref":"FIG. 28"},{"@attributes":{"id":"p-0040","num":"0043"},"figref":"FIG. 29"},{"@attributes":{"id":"p-0041","num":"0044"},"figref":"FIG. 30"},{"@attributes":{"id":"p-0042","num":"0045"},"figref":"FIG. 31"},{"@attributes":{"id":"p-0043","num":"0046"},"figref":"FIG. 32"},{"@attributes":{"id":"p-0044","num":"0047"},"figref":"FIG. 33"},{"@attributes":{"id":"p-0045","num":"0048"},"figref":"FIG. 34"},{"@attributes":{"id":"p-0046","num":"0049"},"figref":"FIG. 35","b":"3500"},{"@attributes":{"id":"p-0047","num":"0050"},"figref":"FIG. 36"},{"@attributes":{"id":"p-0048","num":"0051"},"figref":"FIG. 37"},{"@attributes":{"id":"p-0049","num":"0052"},"figref":"FIG. 38"},{"@attributes":{"id":"p-0050","num":"0053"},"figref":"FIG. 39"},{"@attributes":{"id":"p-0051","num":"0054"},"figref":"FIG. 40"},{"@attributes":{"id":"p-0052","num":"0055"},"figref":"FIG. 41"},{"@attributes":{"id":"p-0053","num":"0056"},"figref":"FIG. 42"},{"@attributes":{"id":"p-0054","num":"0057"},"figref":"FIG. 43"},{"@attributes":{"id":"p-0055","num":"0058"},"figref":["FIG. 44","FIG. 6A","FIG. 6A"]},{"@attributes":{"id":"p-0056","num":"0059"},"figref":"FIG. 45"},{"@attributes":{"id":"p-0057","num":"0060"},"figref":"FIG. 46"},{"@attributes":{"id":"p-0058","num":"0061"},"figref":"FIG. 47"},{"@attributes":{"id":"p-0059","num":"0062"},"figref":"FIG. 48"},{"@attributes":{"id":"p-0060","num":"0063"},"figref":"FIG. 49"},{"@attributes":{"id":"p-0061","num":"0064"},"figref":"FIG. 50"}]},"DETDESC":[{},{}]}
