---
title: Browser emulator system
abstract: A browser emulator is provided. An example browser emulator system includes a communications module to receive requests for web pages from a browser application, a document object model (DOM) interceptor to intercept an initial document object model (DOM) provided by the web application, an activator to activate a browser emulator, and a DOM manipulator to generate a modified DOM. A marked-up document that corresponds to the modified DOM includes an event interceptor that replaces JavaScript code associated with the original DOM provided by the web application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08924943&OS=08924943&RS=08924943
owner: eBay Inc.
number: 08924943
owner_city: San Jose
owner_country: US
publication_date: 20090717
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","DETAILED DESCRIPTION"],"p":["This application relates to the technical fields of software and\/or hardware technology and, in one example embodiment, to a browser emulator system.","The approaches described in this section could be pursued, but are not necessarily approaches that have been previously conceived or pursued. Therefore, unless otherwise indicated herein, the approaches described in this section are not prior art to the claims in this application and are not admitted to be prior art by inclusion in this section.","JavaScript is a scripting language that is used for client-side web development to add interactivity to HTML pages. Despite its name, and while designed to look like Java\u2122, JavaScript\u2122 is unrelated to the Java\u2122 programming language. Rather, JavaScript\u2122 is a dynamic, weakly typed, prototype-based language intended to be easier for non-programmers as a tool with which to work. \u201cJavaScript\u00ae\u201d and \u201cJava\u00ae\u201d are registered trademarks of Sun Microsystems, Inc. of Santa Clara, Calif.","JavaScript may be thought of as a scripting add-on to HTML, where JavaScript code is added to HTML commands by use of the <SCRIPT> tag. JavaScript is an interpreted language, which means that scripts (JavaScript code) is executed without preliminary compilation. JavaScript code is executed in the client browser. JavaScript code is first parsed, and then it is executed if it is determined during the parsing that the JavaScript contains no errors, then the code is executed by the browser. For a while now, JavaScript\u2122 has been a de facto client-side scripting language for web pages.","In the following description, for purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of an embodiment of the present invention. It will be evident, however, to one skilled in the art that the present invention may be practiced without these specific details.","As used herein, the term \u201cor\u201d may be construed in either an inclusive or exclusive sense. Similarly, the term \u201cexemplary\u201d is construed merely to mean an example of something or an exemplar and not necessarily a preferred or ideal means of accomplishing a goal. Additionally, although various exemplary embodiments discussed below focus on administration of Java-based servers and related environments, the embodiments are given merely for clarity in disclosure. Thus, any type of server environment, including various system architectures, may employ various embodiments of the application-centric resources system and method described herein and is considered as being within a scope of the present invention.","A Document Object Model (DOM) is an application programming interface (API) that defines logical structure of documents (e.g., HTML documents and well-formed XML documents) and the way a document is accessed and manipulated. The DOM may be used to manage data presented as a document. For example, various elements found in an HTML or XML document can be accessed, changed, deleted, or added using the Document Object Model. The purpose of a browser application (also referred to as a web browser or merely browser) is to display resources to users. A browser application transmits requests content to a web server, which, in turn, obtains the requested content (e.g., an HTML document that includes JavaScript code). At the browser application, the HTML document is transformed from markup to an interactive document. Aside from HTML documents, web browsers can display other types of content that can be part of a web page, such as images, audio, video, and XML files. A browser renders HTML statements and executes JavaScript code if JavaScript code is embedded or referenced in the HTML document. For the purposes of this description, content that can be rendered by a browser or by any rendering engine configured to display marked up content (e.g., HTML, XML, etc.) is referred to as a web page.","A method and system is described to process marked-up content in a manner that relocates the execution of JavaScript to Java environment. In one example embodiment, a request for content is typically received by a web server that is responsible for accepting HTTP requests from clients (user agents such as web browsers), and serving them HTTP responses along with optional data contents, which usually are web pages such as HTML documents and linked objects (images, etc.). In one example embodiment, a web server includes an event interceptor module that intercepts a DOM received from a web application, extracts JavaScript, and replaces it with a communications client that establishes a communications channel with a so-called browser emulator instantiated on the server. For the purposes of this specification, in order to differentiate a browser application that is typically used for retrieving and presenting content on the World Wide Web from a browser emulator running in Java environment, a typical browser application will be referred to as a browser application or simply a browser. A browser emulator, in one example embodiment, may be implemented as a runtime module in Java environment that can execute JavaScript instructions. An example browser emulator may be configured such that it does not have rendering capability. Instead, a browser emulator may communicate with a rendering engine (e.g., a browser application) via a specialized communications channel such that the results of the JavaScript code execution performed at the browser emulator are reflected by the browser application.","The specialized communications channel, in one embodiment, is established between a browser bridge module provided with the browser emulator and an event interceptor module provided to the browser application by including the event interceptor with the requested web page. When the browser application encounters the event interceptor embedded in the web page, the event interceptor issues a request to the browser emulator via the specialized communications channel. The browser emulator receives the request and commences executing the JavaScript that was extracted by the web server. The browser emulator communicates every result of JavaScript execution to the browser application such that the browser reflects the execution of JavaScript as if the execution is taking place in the browser application.","An approach where a JavaScript can be executed in Java environment may be utilized beneficially, e.g., for debugging purposes. A browser emulator may be configured to communicate with a debugging module provided with the integrated development environment (IDE) to permit debugging of JavaScript code in Java environment. In some embodiments, a browser emulator may be utilized to make available functionality provided by JavaScript scripts outside of a browser application and also to enable execution and debugging of JavaScript in its authored form (whether it is Java or JavaScript).",{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 1","FIG. 1"],"b":["100","100","110","120","110","120","120","110","101","102","101","101","102"]},"As shown in , the server system  comprises, in one example embodiment, a web server  that receives and processes requests from the browser application  and a web application . The web server  receives a request for a web page from the browser application  and obtains, from the web application , a DOM that corresponds to the requested web page. The web application  generates the DOM utilizing a DOM generator . While  shows the web server  to receive and process requests from the browser application , a servlet may be used for this purpose instead.","In one example embodiment, the web server  is configured to intercept the DOM provided by the web application  and activate a browser emulator  in response to receiving the DOM. The browser emulator  modifies the DOM by replacing JavaScript code present in the DOM with an event interceptor. The event interceptor , which may be implemented in JavaScript, is loaded in the browser application . The event interceptor , in one embodiment, is configured to send events and corresponding DOM changes to the browser emulator . A web page that results from a DOM where JavaScript code is replaced by the event interceptor  causes the associated JavaScript code to be executed not in the browser application , but by the browser emulator . The event interceptor  may be implemented in Flash\u00ae and may be configured to communicate with the browser emulator  via the specialized communications channel  (e.g., Duplex communication channel implemented in Flash\u00ae and JavaScript on the client side) while a web page associated with the DOM is being rendered by the browser application . As shown in , the browser application  includes an activation module . The activation module  may be implemented as a client side library and may be configured to establish connection between the browser application  and the browser emulator , as well as to facilitate installation of the event interceptor .","As mentioned above, the browser emulator  does not have a rendering ability but is configured to propagate any results of the execution of the JavaScript code associated with the web page rendered by the browser application  to the browser application , the browser emulator  may be configured to parse HTML content into a full browser DOM, and then load and execute the associated JavaScript in its JavaScript engine.","The browser emulator  is configured to include a script engine and an associated threading model that emulates behavior of a browser application. The browser emulator , in one embodiment, supports complete browser DOM and may be configured to simulate behavior of vendor-specific browsers. The browser emulator  is also configured to provide binding and synchronization utilizing the specialized communications channel . For the purposes of this specification, the term binding refers to a technique where any user interaction with respect to a browser application is recognized by a browser application that communicates with the browser application via a specialized communications channel. User interaction with a browser application could trigger both generating of native browser\/DOM events and\/or DOM changes, such as, key typing in text field, mouse movement and click, window resizing, etc. The term synchronization refers to a technique where any changes to the DOM associated with the web page rendered by a browser application that result from a browser emulator executing JavaScript code user are propagated to the browser application via a specialized communications channel . The browser emulator , in one example embodiment, may also be configured to include capture and replay capability (a capture and replay module) that permits capturing events at a browser application and replaying the captured events at the browser emulator . In one embodiment, the a capture and replay module may be configured to capture all active user interactions with the associated browser application, as well as all Ajax request\/response events, and also enable simulating user interactions using programmatic replay based on captured data. This capability may be used for auto-generation of JUnit tests with window events, user interactions, and AJAX operations. The browser emulator , in one example embodiment, may also include an event handling module to support browser-specific event propagation model (such as capture and bubbling phase), a script execution module to support browser-specific threading model, a browser binding module to allow the browser emulator  to retrieve graphic rendering properties from a browser, a DOM synchronization module to enable auto-synchronization of DOM representations in the browser emulator  and the associated browser application. The browser emulator , in one example embodiment, may also include a browser communications module (that corresponds to a communications module  on the client side) that supports synchronous and asynchronous messaging as well as HTTP via socket communication. It will be noted, that a browser emulator  may be used in a Java application running inside a browser application via a plug-in architecture. With the synchronization between a browser emulator and the hosting browser application, the Java application can access and manipulate browser DOM via a pure Java API.","A plurality of modules that are used in conjunction with the server system , including the browser emulator , may be referred to as a browser emulator system. An example browser emulator system is described with reference to .  is block diagram of a browser emulator system , in accordance with one example embodiment. Various modules shown in  may reside on a server computer system and may be operating within an integrated development environment (IDE).","As shown in , the system  includes a communications module , a document object model (DOM) interceptor , an activator , and a DOM manipulator  included in a browser emulator . The communications module , in one example embodiment, corresponds to the web server  of . The communications module  is configured to receive requests for web pages from a browser application via a transport protocol link such as, e.g., HTTP. The document object model (DOM) interceptor  is configured to intercept an initial document object model (DOM) provided by the web application  of  in response to a request for a web page from a browser application. The activator  is configured to activate the browser emulator . As mentioned above, the browser emulator  is a Java runtime configured to execute JavaScript instructions. When the browser emulator  is activated by the activator , the browser emulator  accesses the DOM obtained by the communications module  from a web application and engages the DOM manipulator  to generate a modified DOM. A marked-up document (e.g., an HTML document) that corresponds to the modified DOM includes an event interceptor that replaces JavaScript code associated with the original DOM provided by the web application. In one embodiment, an event interceptor configured to run in a browser application (e.g., provided on a client computer system) may be implemented as a Flash\u00ae component and may be utilized to facilitate communications via the specialized communications channel  between a browser application that renders the web page and the browser emulator . Example operations performed by a browser emulator system are discussed with reference to .",{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 3","FIG. 1","FIG. 2"],"b":["300","120","200"]},"As shown in , the method  commences at operation , when the communications module  of  receives a request for a web page from a browser application. At operation , the communications module  obtains a DOM associated with the requested web page. The DOM obtained by the communications module  from a web application may be referred to as an original DOM. At operation , the DOM interceptor of  intercepts the original DOM. The activator  of  activates the browser emulator  of  at operation . At operation , the DOM manipulator that may be provided with the browser emulator  replaces JavaScript code in the original DOM with an event interceptor to produce generating a modified DOM corresponding to the requested web page. The event interceptor is configured to facilitate communications over a specialized communications channel between a browser that renders the web page and the browser emulator . The requested web page is generated based on the modified DOM and provided to the browser application at operation . Example operations performed in the process of client-side activation are described with reference to .",{"@attributes":{"id":"p-0028","num":"0027"},"figref":["FIG. 4","FIG. 1","FIG. 2"],"b":["400","400"]},"As shown in , at operation , the browser application  of  loads a web page associated with the modified DOM. At operation , the browser application  loads additional JavaScript and Flash modules provided by an embedded web server associated with the browser emulator . At operation , the activation module  of  establishes a two-way socket communication channel with the browser emulator . The two-way socket communication channel is illustrated in  as the specialized communications channel . At operation , the browser emulator  loads a web page corresponding to the unmodified DOM provided by the web application  and executes all on-load JavaScript present in the web page.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":["FIG. 5","FIG. 1","FIG. 2"],"b":["500","500"]},"As shown in , at operation , the browser application  of  receives an event associated with a user interaction (e.g., a mouse or a keyboard event). The event interceptor  of  generates a message in response to the user interaction at operation . At operation , the browser communications module  of  delivers the message to the browser emulator  of . The server-side DOM is synchronized with the DOM used at the browser application  if the user interaction event resulted in any changes to the client-side DOM, at operation . At operation , an event handling module provided at the server system  of  delivers a simulated browser event to the DOM elements of the browser emulator , based on the associated propagation model, and triggers the JavaScript execution if there are registered event listeners or event handlers. At operation , the script execution module provided with the browser emulator  provides runtime environment and context for the execution or debug of JavaScript in the browser emulator . In some situations, accessing a DOM property from JavaScript may require the browser binding module provided with the browser emulator  to retrieve value from the browser application . At operation , any DOM updates that occur due to JavaScript execution are propagated to the browser application  via the DOM synchronization module provided with the browser emulator .",{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 6","b":"600"},"The example computer system  includes a processor  (e.g., a central processing unit (CPU), a graphics processing unit (GPU) or both), a main memory  and a static memory , which communicate with each other via a bus . The computer system  may further include a video display unit  (e.g., a liquid crystal display (LCD) or a cathode ray tube (CRT)). The computer system  also includes an alpha-numeric input device  (e.g., a keyboard), a user interface (UI) navigation device  (e.g., a cursor control device), a disk drive unit , a signal generation device  (e.g., a speaker) and a network interface device .","The disk drive unit  includes a machine-readable medium  on which is stored one or more sets of instructions and data structures (e.g., software ) embodying or utilized by any one or more of the methodologies or functions described herein. The software  may also reside, completely or at least partially, within the main memory  and\/or within the processor  during execution thereof by the computer system , with the main memory  and the processor  also constituting machine-readable media.","The software  may further be transmitted or received over a network  via the network interface device  utilizing any one of a number of well-known transfer protocols (e.g., Hyper Text Transfer Protocol (HTTP)).","While the machine-readable medium  is shown in an example embodiment to be a single medium, the term \u201cmachine-readable medium\u201d should be taken to include a single medium or multiple media (e.g., a centralized or distributed database, and\/or associated caches and servers) that store the one or more sets of instructions. The term \u201cmachine-readable medium\u201d shall also be taken to include any medium that is capable of storing and encoding a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of embodiments of the present invention, or that is capable of storing and encoding data structures utilized by or associated with such a set of instructions. The term \u201cmachine-readable medium\u201d shall accordingly be taken to include, but not be limited to, solid-state memories, optical and magnetic media. Such media may also include, without limitation, hard disks, floppy disks, flash memory cards, digital video disks, random access memory (RAM), read only memory (ROM), and the like.","The embodiments described herein may be implemented in an operating environment comprising software installed on a computer, in hardware, or in a combination of software and hardware. Such embodiments of the inventive subject matter may be referred to herein, individually or collectively, by the term \u201cinvention\u201d merely for convenience and without intending to voluntarily limit the scope of this application to any single invention or inventive concept if more than one is, in fact, disclosed.","Thus, a browser emulator system has been described. Although a browser emulator system has been described with reference to specific example embodiments, it will be evident that various modifications and changes may be made to these embodiments without departing from the broader spirit and scope of the inventive subject matter. Although various exemplary embodiments discussed herein focus on implementation on Java\u00ae-based servers and related environments, the embodiments are given merely for clarity in disclosure. Thus, any type of server environment, based on an architecture-neutral-language, including various system architectures, may employ various embodiments described herein. Accordingly, the specification and drawings are to be regarded in an illustrative rather than a restrictive sense."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF DRAWINGS","p":["Embodiments of the present invention are illustrated by way of example and not limitation in the FIGs. of the accompanying drawings, in which like reference numbers indicate similar elements and in which:",{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
