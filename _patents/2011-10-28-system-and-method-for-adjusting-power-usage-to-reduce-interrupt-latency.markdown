---
title: System and method for adjusting power usage to reduce interrupt latency
abstract: A system and method are described for warming a processor from a low power state in anticipation of a time critical interrupt. For example, one embodiment of a method comprises: detecting that a time-critical interrupt will require processor resources at some point in the future; estimating a time at which the time-critical interrupt will be triggered; scheduling a timer interrupt to fire at a specified time prior to the estimated time that the time-critical interrupt will be triggered, the timer interrupt being scheduled with sufficient time to ensure that the processor is warmed to a level at which it is capable of handling the time-critical interrupt at the time that the time-critical interrupt is triggered; and responsively triggering the timer interrupt at the specified time prior to the time critical interrupt.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08812761&OS=08812761&RS=08812761
owner: Apple Inc.
number: 08812761
owner_city: Cupertino
owner_country: US
publication_date: 20111028
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION OF PREFERRED EMBODIMENTS","DISCLOSURE OF THE CO-PENDING APPLICATION","Embodiments of a System and Method for CPU Warming to Reduce Interrupt Latency","Embodiments of a System and Method for Incorporating Task Urgency Information in Power Management Decisions","Exemplary Data Processing Devices"],"p":["1. Field of the Invention","This invention relates generally to the field of computing systems. More particularly, the invention relates to an improved machine-readable medium and method for warming a CPU to reduce interrupt latency.","2. Description of Related Art","Power management on a data processing system often involves techniques for reducing the consumption of power by components in the data processing system. The data processing system may be a laptop or otherwise portable computer, such as a handheld general purpose computer, a cellular telephone, or a tablet such as iPad. The management of power consumption in a portable device which is powered by a battery is particularly important because better power management usually results in the ability to use the portable device for a longer period of time when it is powered by one or more batteries and for a given duty cycle, in smaller a physical design of the product.","Conventional systems typically utilize timers to indicate when a subsystem should be turned off after a period of inactivity. For example, the motors in a hard drive storage system are typically turned off after a predetermined period of inactivity of the hard drive system. Similarly, the backlight or other light source of a display system may be turned off in response to user inactivity which exceeds a predetermined period of time. In both cases, the power management technique is based on the use of a timer which determines when the period of inactivity exceeds a selected duration.","A typical technique for managing power consumption involves switching operation of a data processing system between different voltage and frequency pairs or \u201coperating points.\u201d In general, a first operating point defined by voltage V and operating frequency F will consume less power than a second operating point at voltage V and operating frequency F if V is less than V and F is less than F.","Certain systems provide the capability to switch power completely off (e.g. set the operating voltage at V=0) if no use is being made of a particular subsystem. For example, certain system-on-a-chip (SOC) systems provide a power gating feature which allows for particular subsystems to be turned off completely if they are not being used.","On some modern microarchitectures, a range of Central Processing Unit (\u201cCPU\u201d) \u201cidle\u201d states are defined to limit energy consumption. These idle states may come with a cost. For urgent tasks (such as real-time or deadline-driven tasks), running at reduced clock speed can cause responsiveness problems or incorrectness. For example, the latency to resume execution can be many microseconds, and its magnitude and unpredictability can pose great challenges to operating systems developers. One important difficulty occurs if the system is concerned with the exact moment that an interrupt is triggered with high precision. With long latencies to exit idle states, it may not be possible to take a timestamp until long after the triggering event.","Additionally, clock speeds may not be adjusted to an optimally low level using current implementations due to \u201cbackground\u201d tasks which run indefinitely but have no speed requirements. The variety of workloads and unpredictability of CPU load over time make it very difficult to craft a frequency-management algorithm which achieves both responsiveness for high-importance tasks and low power consumption under low-priority load.","Accordingly, what is needed is a more intelligent way to both reduce power consumption and improve responsiveness for certain tasks.","A system and method are described for warming a processor from a low power state in anticipation of a time critical interrupt. For example, one embodiment of a method comprises: detecting that a time-critical interrupt will require processor resources at some point in the future; estimating a time at which the time-critical interrupt will be triggered; scheduling a timer interrupt to fire at a specified time prior to the estimated time that the time-critical interrupt will be triggered, the timer interrupt being scheduled with sufficient time to ensure that the processor is warmed to a level at which it is capable of handling the time-critical interrupt at the time that the time-critical interrupt is triggered; and responsively triggering the timer interrupt at the specified time prior to the time critical interrupt.","Described below are embodiments of an apparatus, method, and machine-readable medium for incorporating task urgency information in frequency transition decisions. In the following description, for the purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of the embodiments of the invention described below. It will be apparent, however, to one skilled in the art that the embodiments of the invention may be practiced without some of these specific details. In other instances, well-known structures and devices are shown in block diagram form to avoid obscuring the underlying principles of the embodiments of the invention.","The co-pending patent application entitled \u201cImproved Timer Interrupt Latency,\u201d Ser. No. 13\/174,688, Filed Jun. 30, 2011 (hereinafter \u201cCo-pending Application\u201d), which is assigned to the assignee of the present patent application describes a variety of techniques improving timer interrupt latency. These techniques will first be described below to provide an overview, followed by a detailed description of new techniques for reducing interrupt latency and managing clock speed based on task urgency.","Various embodiments and aspects of the inventions will be described with reference to details discussed below, and the accompanying drawings will illustrate the various embodiments. The following description and drawings are illustrative of the invention and are not to be construed as limiting the invention. Numerous specific details are described to provide a thorough understanding of various embodiments of the present invention. However, in certain instances, well-known or conventional details are not described in order to provide a concise discussion of embodiments of the present inventions.","Exemplary embodiments of methods, apparatuses, and systems to reduce timer interrupt latency are described herein. The cost of exiting idle states to service timer interrupts for a data processing system is overcome while still allowing aggressive use of a variety of idle states, and while allowing higher levels of software abstraction to ignore those states. Moreover, the risk of interrupts firing earlier than they are needed is minimized by restoring original deadlines on exit from an idle state.","In at least some embodiments, an indication that a subsystem (e.g., a processor) is about to enter an idle state is received, and an original fire time for a next timer interrupt is determined. The original fire time indicates when the timer that is already present in the system has been scheduled to fire. An idle state for a subsystem can be selected from a plurality of idle states. A new fire time can be determined based on the selected idle state. The next timer interrupt is rescheduled to the new fire time, as described in further detail below.","In at least some embodiments, the timers that are already present in the system and that have already been requested can be rescheduled depending upon an idle state of the system and how far the timers are along a time line from a current time, as described in further detail below.","In at least some embodiments, a subsystem exits an idle state, and a latency of the subsystem in exiting the idle state is measured at a current time. The measured latency is added to a running average of latencies for that idle state. A previous latency is recomputed based on the running average. The latency is recomputed to adjust the original fire time for a next timer interrupt, as described in further detail below.","The present invention can relate to an apparatus for performing one or more of the operations described herein. This apparatus may be specially constructed for the required purposes, or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a machine (e.g. computer) readable storage medium, such as, but is not limited to, any type of disk including floppy disks, optical disks, CD-ROMs, and magnetic-optical disks, read-only memories (ROMs), random access memories (RAMs), erasable programmable ROMs (EPROMs), electrically erasable programmable ROMs (EEPROMs), magnetic or optical cards, or any type of media suitable for storing electronic instructions, and each coupled to a bus.","A machine-readable medium includes any mechanism for storing or transmitting information in a form readable by a machine (e.g., a computer). For example, a machine-readable medium includes read only memory (\u201cROM\u201d); random access memory (\u201cRAM\u201d); magnetic disk storage media; optical storage media; flash memory devices; electrical, optical, acoustical or other form of propagated signals (e.g., carrier waves, infrared signals, digital signals, etc.); etc.","At least certain embodiments of the inventions may be part of a digital media player, such as a portable music and\/or video media player, which may include a media processing system to present the media, a storage device to store the media and may further include a radio frequency (RF) transceiver (e.g., an RF transceiver for a cellular telephone) coupled with an antenna system and the media processing system. In certain embodiments, media stored on a remote storage device may be transmitted to the media player through the RF transceiver. The media may be, for example, one or more of music or other audio, still pictures, or motion pictures.","The portable media player may include a media selection device, such as a click wheel input device on an iPod\u00ae or iPod Nano\u00ae media player from Apple, Inc. of Cupertino, Calif., a touch screen input device, pushbutton device, movable pointing input device or other input device. The media selection device may be used to select the media stored on the storage device and\/or the remote storage device. The portable media player may, in at least certain embodiments, include a display device which is coupled to the media processing system to display titles or other indicators of media being selected through the input device and being presented, either through a speaker or earphone(s), or on the display device, or on both display device and a speaker or earphone(s).","Embodiments of the inventions described herein may be part of other types of data processing systems, such as, for example, entertainment systems or personal digital assistants (PDAs), or general purpose computer systems, or special purpose computer systems, or an embedded device within another device, or cellular telephones which do not include media players, or devices which combine aspects or functions of these devices (e.g., a media player, such as an iPod\u00ae, combined with a PDA, an entertainment system, and a cellular telephone in one portable device), or devices or consumer electronic products which include a multi-touch input device such as a multi-touch handheld device or a cell phone with a multi-touch input device.",{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 1","b":["100","102","102","106","110","108","104","120","122","124","126","128","130"]},"In at least some embodiments, the one or more subsystems include a microcontroller. In at least some embodiments, the one or more subsystems include a microprocessor, such as an Intel Pentium\u00ae microprocessor, Motorola Power PC\u00ae microprocessor, Intel Core\u2122 Duo processor, Intel Core i3, Intel Core i5, Intel Core i7, AMD Athlon\u2122 processor, AMD Turion\u2122 processor, AMD Sempron\u2122 processor, and\/or any other microprocessor. In one embodiment, the subsystem includes a CPU, a microcontroller, a digital signal processor, a microprocessor, a personal computer (\u201cPC\u201d), or any combination thereof. In one embodiment, the subsystem includes a general purpose computer system based on the PowerPC\u00ae, Intel Core\u2122 Duo, Intel Core i3, Intel Core i5, Intel Core i7, AMD Athlon\u2122, AMD Turion\u2122 processor, AMD Sempron\u2122, HP Pavilion\u2122 PC, HP Compaq\u2122 PC, and any other processor families.","Referring back to , each of the subsystems , , , , , and  are coupled to a corresponding power gate through which power is supplied to the subsystem. It will be appreciated that multiple power gates may be provided in parallel to provide additional current capacity if need for a particular subsystem. Each power gate, such as power gate A or B, has its drain electrode coupled to a power supply voltage rail  and its source coupled to the corresponding subsystem. The gate electrode of each power gate is coupled to a control signal provided by the always-alive module  which may be controlled, in at least certain embodiments, by the power management unit  which may be coupled to the microprocessor through one or more buses as described herein. Through this arrangement, it is possible for the microprocessor to selectively cause the various different subsystems to be turned on and off by causing the power management unit  to provide control signals to the always-alive module  which in turn provides the appropriate control signals to turn on or off one or more of the subsystems. For example, the microprocessor  may instruct the power management unit  to turn off the GPU  by providing a control signal to the always-alive module  which in turn sets a voltage on the gate electrode of the power gate B which in turn shuts off the voltage supply to the GPU  through the power line . Similarly, one or more of the other subsystems may also be selectively turned off by causing its supply voltage to be dropped to a value well below that necessary to operate the subsystem. The microprocessor  may even turn itself off by saving state and context information for the various application programs and operating system programs which are executing at the time the microprocessor decides to turn power off for itself. It will be understood that the system  may have additional subsystems, not shown, such as memory controllers, etc. (examples of additional subsystems are shown in ) or the system  may have fewer subsystems than shown in . It will also be understood that the system  may include one or more buses and one or more bus bridges which are used to interconnect the data and control signals between the various subsystems. The bus architecture shown in  is an example of one or more buses being used to couple the various components of a subsystem together.",{"@attributes":{"id":"p-0044","num":"0043"},"figref":["FIG. 2","FIG. 1","FIG. 3","FIG. 1","FIG. 2","FIG. 2","FIG. 2","FIG. 1","FIG. 2","FIG. 2"],"b":["200","102","302","201","205","203","203","207","205","213","211","211","205","211","209","205","205","209","124","207","211","205","209","215","213","217","219","217","121","207","209","217","121","209","217","233","217","207","217","231","207","201","203","227","229","227","229","223","225","203","126","128","203","106","110","108","203","209","207"]},{"@attributes":{"id":"p-0045","num":"0044"},"figref":["FIG. 3","FIG. 3","FIG. 2","FIG. 1","FIG. 3"],"b":["300","302","304","304","302","304","304","308","310","328","322","348","320","342","318","340","316","338","314","336","312","332","306","330","304","326","324","346","344","334","318","106","318","110","108","318","324","304","320","320","320","302"]},"It will be understood that the data processing system of  may be implemented in a variety of different form factors or enclosures which package and embody the data processing system. For example, the data processing system  may be implemented as a desktop computer, a laptop computer, or an embedded system, consumer product or a handheld computer or other handheld device. It may be implemented to operate off of AC power or a combination of AC power and battery power or merely battery power in at least certain modes. The data processing system may include a cellular telephone and may have the form factor of a cellular telephone, such as a candy-bar style cellular telephone or a flip phone or a phone with a sliding keyboard which slides out (e.g., from an enclosure) or swings out (e.g., from an enclosure) to expose the keys of the keyboard. In certain embodiments, the data processing system  may be implemented in a tablet format of a small handheld computer which includes wireless cellular telephony and WiFi and Bluetooth wireless capability.",{"@attributes":{"id":"p-0047","num":"0046"},"figref":["FIG. 4","FIG. 4","FIG. 4"],"b":["400","401","403","415","407","401","417","419","324","403","308","310","407","344","405","413","407","417","419"]},"The data path  allows the processing system  to store a count value or timer value or other time-related value into the timer . The interrupt controller  may be a conventional interrupt controller that provides two different types of interrupt signals, such as a fast interrupt signal and a normal interrupt signal in the case of microprocessors from ARM Ltd. of Cambridge, England. The first interrupt signal  may be the fast interrupt signal which typically will provide a higher priority of service to the source of the interrupt than the other type of interrupt signal, as described in U.S. Pat. No. 7,917,784 which is hereby incorporated herein by reference. As shown in , memory  stores a plurality of different application processes, such as application process , application process , and application process  which may be executing on the data processing system of  at any one point in time. Application process  may be, for example, an MPEG decoding operation being performed partly in software by the processing system  and partly by an MPEG decoding hardware subsystem such as the subsystem  shown in . The application process  may, for example, be an MP3 decoding operation which is performed in part by the processing system  and in part by a separate hardware subsystem such as another data decoder which is dedicated to audio data, etc. Application process  may be another software process being performed in part by the processing system and performed in part by yet another subsystem (e.g. the DSP  of ). Hence, the state of the memory  shows that multiple applications may be executing concurrently and multiple subsystems may be operating concurrently, with the OS kernel , which is an executing operating system software, overseeing the management of various tasks and processes in a conventional manner. In one exemplary embodiment, one subsystem may be the processing system itself (the microprocessor ) and the other subsystem currently in operation may be an MPEG decoding subsystem or the GPU. In any event, at least certain embodiments of the inventions allow different processes for different subsystems to either concurrently or sequentially utilize a fast interrupt signal to respond to a time-related event in order to keep time for those subsystems. The processing system , in conjunction with the OS kernel , typically maintains a data structure, such as a list of time-related events (\u201ctimers\u201d), such as the list  shown stored in the memory . This list may be an ordered list from almost now to a future time and the processing system may use this list to service events that were scheduled for operation in the future at the time they were scheduled, such that they may be performed at the time scheduled and requested by the particular subsystem or process. In at least some embodiments, timers in the list  are adjusted, as described herein. In at least some embodiments, the methods as described herein with respect to  are performed at OS kernel  level.","In at least some embodiments, reducing timer interrupt latency involves (1) determining an original fire time for a next timer interrupt, (2) selecting an idle state for a subsystem; and (3) determining a new fire time based on the selected idle state. An idle state is one of reduced power states (e.g., a sleep state) of the system. The original fire time can be determined in response to the subsystem deciding to enter the idle state. Outstanding timer interrupt requests can be reprogrammed when entering a CPU idle state to compensate for the cost of exiting that state.","Generally, CPU idle states, for example, Ci-states, where i can be any integer number from 1 to N, are the states when the CPU has reduced or turned off selected functions to reduce power consumption. Different processors may support different numbers of idle states in which various parts of the CPU are turned off or operate at a reduced power. Various idle states for a processor can be characterized by different power consumption levels. For example, deeper Ci states shut off more parts of the CPU, leading to significantly reduced power consumption than shallower Ci states. Typically, C is an operational state at which a CPU actively executes instructions to perform certain operations. C may be a first idle state at which a clock running to a processor may be gated, i.e. the clock is prevented from reaching the core, effectively shutting the processor down in an operational sense. C may be a second idle state. At the second idle state in addition to gating the clock, an external I\/O Controller Hub may block interrupts to the processor. Deeper C-states, such as C and C states have greater latencies and have higher energy entry\/exit costs than shallower C-states, such as C or C. The resulting performance (e.g., timing) and energy penalties become significant when the entry\/exit frequency of a deeper C-state is high. Typically, there's a trade-off between power consumption and time to resume from a sleep state\u2014the less power the system consumes, the longer it takes to the system to start running and also the slower the system may run when the system finally begins code execution.","In at least some embodiments, selecting an idle state for a subsystem involves determining exit latency data for each of the idle states of the subsystem, as described in further detail below.","In at least some embodiments, at the time when a data processing system decides to enter an idle state on a given processor, it takes a note of a next interrupt scheduled for that processor. The information about a next existing interrupt (\u201cnext original fire time\u201d) can be used to determine a choice of which idle state to enter for a given processor. In preparation for entering the idle state, the data processing system re-schedules the next timer interrupt to a new fire time based on an expected latency needed to exit the idle state, as described in further detail below.",{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 5","b":["500","502","502","504","506","504","506"]},"Typically, for a processor to exit an idle state and begin executing instructions a certain amount of work in the hardware needs to be done. Therefore, a certain amount of latency is paid to return to a state where the processor can execute instructions.","The variable and unpredictable latency to exit the lower power states may cause various problems for operation of the data processing system, for example for video and\/or audio processing. For example, in audio processing, when multiple timers in a loop get shifted by latency add up a user may experience a noticeable delay between pressing a keyboard and hearing a sound.","In at least some embodiments, an exit latency is compensated by requesting a wake up earlier than it was originally scheduled in an amount that corresponds to the exit latency as best as it can be predicted.",{"@attributes":{"id":"p-0057","num":"0056"},"figref":["FIG. 5","FIG. 5"],"b":["508","510","512","514","1","508","1","514","1"]},"In at least some embodiments, the next timer interrupt can be re-scheduled by subtracting from the original fire time the expected time needed to exit the idle state. So, if a processor needs to be up and executing instructions at time t and it is predicted that it may take X amount of time to exit the low power state, then as the system enters the low power state the processor is requested to wake up at time t\u2212X.","For example, if the original request fire time is t, and the idle state is C, then the timer is rescheduled for t\u2212XC; if the idle state is Ci, the timer is rescheduled for t\u2212XCi; if the idle state is Ci+1, the timer is rescheduled for t\u2212XCi+1; and if the idle state is CN, the timer is rescheduled for t\u2212XCN. The original fire time t is adjusted by a variable value determined based on characteristics of the idle state of the subsystem. That is, the value to which to adjust the fire time is not fixed.","In at least some embodiments, selecting of the idle state is performed based at least on the original fire time. For example, a difference between the original fire time, such as t, and a current time, such as t can be calculated, and an idle state, such as one of the C-CN states can be selected based on the difference between the original fire time and the current time, such as t\u2212t. In at least some embodiments, a subsystem enters the selected idle state to exit the selected idle state at the adjusted fire time to operate on an event.",{"@attributes":{"id":"p-0061","num":"0060"},"figref":"FIG. 6","b":["600","602","1","604"]},"For example, the exit latency can be determined experimentally by scheduling timers and measuring how long after the target deadline the interrupt handler is able to run. In at least some embodiments, the exit latency is measured for each of a plurality of CPUs and each of a plurality of idle states of the CPU. In at least some embodiments, measuring of the latency in exiting the idle state is done dynamically at runtime.","Method  continues with operation  involving dynamically calculating an average latency by adding the measured latency to a running average of latencies for the idle state. In at least some embodiments, a worst case latency in exiting the idle state is determined from the latencies measured over time, for example, before the current time. At operation  the worst case latency is recomputed based on the latency measured at a current time. At operation  a previous latency is recomputed for a next timer interrupt based on the running average and the recomputed worst case latency. In at least some embodiments, the latency is measured at a current time, and the previous latency is computed at a previous time before the current time.","At operation  the recomputed latency is used to adjust an existing (original) fire time for a next timer based wake up. That is, measuring the latency in exiting an idle state is performed dynamically at runtime, and adjusting an original fire time to a new fire time for a next timer interrupt is performed based on the runtime measurements. Method  continues at operation  involving waiting for a next exit of the subsystem from an idle state.",{"@attributes":{"id":"p-0065","num":"0064"},"figref":["FIG. 7","FIGS. 8 and 9"],"b":["700","701","702","1","0","1","0","1","1","0","2","1","0","3","1","0","2"]},"At operation  a timer is provided with a new fire time value determined based on a type of the selected idle state. In at least some embodiments, a time decrementer is programmed for t\u2212XCi, where t indicates a number time units in future corresponding to an original fire time, and XCi indicates a number of time units corresponding to an exit latency for the idle state. In at least some embodiments, the time decrementer includes one or more counters which are capable of asserting a timeout or other similar signal to an interrupt controller to generate an interrupt signal to the system. At operation  the selected idle state is entered. Operation  involves exiting the selected idle state at the new fire time to operate on an event. After operating the event, the method can return back to operation . In at least some embodiments, a record of the original requested fire time is kept, so that if the idle period ends before the timer fires (e.g. due to hardware interrupt or inter-processor interrupt), the interrupt can again be rescheduled for its original deadline (no idle exit time need now be compensated for).",{"@attributes":{"id":"p-0067","num":"0066"},"figref":["FIG. 8","FIG. 6"],"b":["800","800","801","802","0","205","308","301","403","423","803","1"]},"Method  continues with operation  that determines whether or not a current time is later than a difference between the original fire time and the smallest exit latency (t\u2212XCmin). Typically, a shallowest idle state in which power consumption is greatest among all other idle states, such as a C-state, has the smallest exit latency. If the current time is later than the difference t\u2212XCmin, the original fire time t is maintained, and the subsystem is prevented from entering an idle state at operation .","If the current time is not later than the difference t\u2212XCmin, a determination is made at operation  whether or not the current time is later than t\u2212XCi+1, where XCi+1 is an exit latency from Ci+1 state, and where i is any integer from 1 to N\u22121, where CN indicates a deepest idle state in which the power consumption is smaller than in other idle states. If the current time is later than the difference t\u2212XCi+1, at operation  the original fire time is adjusted to a dynamically computed latency value XCi. In one embodiment, latency value XCi is computed dynamically at runtime, as described with respect to . An idle state Ci is chosen at operation .","If the current time is not later than the difference t\u2212XCi+1, at operation  a determination is made whether or not a current time is later than t\u2212XCmax. Typically, a deepest idle state in which power consumption is smallest among all other idle states, such as a CN-state, has the largest exit latency. If the current time is later than the difference t\u2212XCmax, at operation  the original fire time is adjusted to a dynamically computed value XCmax\u22121. At operation  a Cmax\u22121 idle state is chosen.","If the current time is not later than the difference t\u2212XCmax, at operation  the original fire time is adjusted to a statistically derived exit latency (for example, a worst case exit latency XCmax). In at least some embodiments, the statistically derived exit latency is a worst case latency statistically derived from measured exit latencies data throughout a life time of a processor. At operation  a Cmax idle state is chosen. In at least some embodiments, the Cmax idle state is a deepest reduced power state in which the subsystem consumes smaller power than in any other idle state. At operation  an idle state chosen at operations , , or , is entered.",{"@attributes":{"id":"p-0072","num":"0071"},"figref":"FIG. 9","b":["900","900","801","803","900","901","1","0","612"]},"If the exit latency is smaller than the difference (t\u2212t), at operation  a determination is made whether or not the exit latency XCi is a maximum exit latency. Typically, the maximum exit latency corresponds to a deepest idle state in which the system consumes the smaller amount of power than in all other idle states. If the exit latency is a maximum exit latency, at operation  an original fire time is adjusted to a statistically derived latency, as described above.","At operation  a deepest idle state (e.g., Cmax state) is chosen. If the exit latency is not a maximum latency, at operation  it is determined whether there is a next exit latency to consider. If there is a next exit latency, method  returns to operation . If there is no next exit latency, at operation  the original fire time is adjusted to a dynamically computed latency value XCi. In at least one embodiment, latency value XCi is computed dynamically at runtime, as described with respect to .","At operation  a Ci idle state is selected. If the exit latency is not smaller than the difference (t\u2212t), at operation  a determination is made whether or not the exit latency is a minimum exit latency. Typically, the minimum exit latency corresponds to a shallowest idle state in which the system consumes greater amount of power than in all other idle states. If the exit latency is the minimum exit latency, at operation  the original fire time t is maintained, and the subsystem is prevented from entering an idle state. If the exit latency is not the minimum exit latency, at operation  it is determined whether there is a next exit latency to consider. If there is no exit latency to consider, method  goes to operation . If there is a next exit latency, method  returns to operation .","As discussed above, a range of CPU \u201cidle\u201d states may be defined on a computer system to limit energy consumption. These idle states come with a cost, however. For example, exiting an idle state in order to service interrupts or run threads can take an unpredictable length of time. The latency to resume execution can be many microseconds, and its magnitude and unpredictability can pose great challenges to operating systems developers. One important difficulty occurs if the system is concerned with the exact moment that an interrupt is triggered, with high precision. With long latencies to exit idle states, it may not be possible to take a timestamp until long after the triggering event.","Described below is a system and method which reduces latency for time-critical interrupts whose firing time can be estimated with reasonable accuracy, and does so without substantially impacting energy consumption. These embodiments allow allows aggressive use of processor idle states while ensuring that at the crucial moment that the interrupt is triggered, the relevant processor or core is \u201cwarmed\u201d to the point where it can receive an interrupt with low latency. In the embodiments described below, processor \u201cwarming\u201d means increasing the frequency and\/or voltage to a sufficient level so that the processor is capable of handling the interrupt.",{"@attributes":{"id":"p-0078","num":"0077"},"figref":"FIG. 10"},"At , a determination is made as to whether a time-critical interrupt is anticipated some time in the future. A software-generated interrupt may be identified as \u201ctime-critical,\u201d for example, by an application developer. If the interrupt is time-critical then, at , the time (t) at which the event triggering the interrupt will occur is estimated. In one embodiment, this information is provided by the application program code requiring the interrupt. At , a warming timer interrupt is scheduled to fire at a time (t*) prior to the estimated time that the event triggering the interrupt will occur.","As indicated in , in one embodiment, the timer interrupt is set according to the equation (t\u2212E)\u2266t*\u2266(t+l)\u2212E wherein E is the average exit latency of the selected idle state (i.e., the amount of time needed to fully exit the idle state); tis the estimated fire time of the time-critical interrupt; and l is the minimum latency required to \u201cwarm\u201d the CPU to a point at which it can handle the time-critical interrupt (i.e., the time required to achieve a minimum frequency and\/or voltage level sufficient to handle the interrupt). Setting the timer interrupt (t*) in this manner provides sufficient time for the CPU to be warmed (because t*\u2266(t+l)\u2212E) while at the same time ensuring that the CPU is not warmed too quickly, thereby wasting power (because (t\u2212E)\u2266t*)). Logically, in the above equations, l must inherently be <E (i.e., the average exit latency to fully exit the idle state must be greater than the latency to sufficiently warm the CPU so that it can handle the interrupt). In one embodiment, the value of E is continuously updated as described above and in the co-pending application, resulting in dynamically calculated values for (t\u2212E)\u2266t*\u2266(t+l)\u2212E.","In one embodiment of the invention, task urgency information is \u201cinjected\u201d into CPU power management decisions. In particular, in one implementation, the relative urgency characterizing one or more currently-executing threads may be exploited to determine an appropriate frequency and\/or voltage for the CPU. In accordance with this embodiment, frequency\/voltage decisions may still be made using an adaptive power management algorithm that is largely independent of scheduling, but the CPU may transition directly to high-speed states when critical (e.g., real time) tasks come online. In this way, both performance and real time correctness are preserved, and approximations used to identify \u201cbackground\u201d load can be made more precise. When critical tasks are distinguished from low-priority ones, it will be possible to make more aggressive use of low clock speeds without fear of harming those important tasks.",{"@attributes":{"id":"p-0082","num":"0081"},"figref":["FIG. 12","FIG. 13A","FIG. 13B","FIG. 13C"]},"As set forth in , at , the background power management state machine is initially selected. In one embodiment, the background state machine as shown in , has a single idle state representing a particular idle CPU frequency and\/or voltage level. By way of example, and not limitation, the idle frequency may be 1.6 GHz and the idle voltage may be any designated voltage associated with the idle state. For example, the voltage level for each of the power management states will be directly related to the semiconductor process technology employed in the CPU (e.g., 32 nanometer, 45 nanometer, etc). If no task with a normal or real time urgency is detected then the system may stay in this background idle state. If, however, a normal or real time thread is detected, determined at , then the system will transition to a normal or real time state machine at  or , respectively. When the real-time thread is complete, determined at , a determination is made as to whether the normal thread is waiting, determined at . If not, then the process returns to  and the background power state machine is executed. If so, then the process returns to  and the normal power management state machine is executed.",{"@attributes":{"id":"p-0084","num":"0083"},"figref":"FIG. 13B","b":["1","1","1","1","1","2","1","2","1","2","1","2"],"i":["d ","d ","d ","d "]},{"@attributes":{"id":"p-0085","num":"0084"},"figref":"FIG. 13C","b":["2","2","2","2"],"i":"d "},{"@attributes":{"id":"p-0086","num":"0085"},"figref":["FIG. 14","FIG. 12","FIGS. 13A-C"],"b":["1410","1413","1402","1405","1410","1413","1405","1401"]},{"@attributes":{"id":"p-0087","num":"0086"},"figref":["FIG. 15","FIG. 15"]},"As illustrated in , the computer system , which is a form of a data processing system, includes the bus(es)  which is coupled with the processing system , power supply , memory , and the nonvolatile memory  (e.g., a hard drive, flash memory, Phase-Change Memory (PCM), etc.). The bus(es)  may be connected to each other through various bridges, controllers, and\/or adapters as is well known in the art. The processing system  may retrieve instruction(s) from the memory  and\/or the nonvolatile memory , and execute the instructions to perform operations as described above. The bus  interconnects the above components together and also interconnects those components to the optional dock , the display controller & display device , Input\/Output devices  (e.g., NIC (Network Interface Card), a cursor control (e.g., mouse, touchscreen, touchpad, etc.), a keyboard, etc.), and the optional wireless transceiver(s)  (e.g., Bluetooth, WiFi, Infrared, etc.).",{"@attributes":{"id":"p-0089","num":"0088"},"figref":"FIG. 16","b":["2400","2400"]},"According to one embodiment of the invention, the exemplary architecture of the data processing system  may used for the mobile devices described above. The data processing system  includes the processing system , which may include one or more microprocessors and\/or a system on an integrated circuit. The processing system  is coupled with a memory , a power supply  (which includes one or more batteries) an audio input\/output , a display controller and display device , optional input\/output , input device(s) , and wireless transceiver(s) . It will be appreciated that additional components, not shown in , may also be a part of the data processing system  in certain embodiments of the invention, and in certain embodiments of the invention fewer components than shown in  may be used. In addition, it will be appreciated that one or more buses, not shown in , may be used to interconnect the various components as is well known in the art.","The memory  may store data and\/or programs for execution by the data processing system . The audio input\/output  may include a microphone and\/or a speaker to, for example, play music and\/or provide telephony functionality through the speaker and microphone. The display controller and display device  may include a graphical user interface (GUI). The wireless (e.g., RF) transceivers  (e.g., a WiFi transceiver, an infrared transceiver, a Bluetooth transceiver, a wireless cellular telephony transceiver, etc.) may be used to communicate with other data processing systems. The one or more input devices  allow a user to provide input to the system. These input devices may be a keypad, keyboard, touch panel, multi touch panel, etc. The optional other input\/output  may be a connector for a dock.","Embodiments of the invention may include various steps as set forth above. The steps may be embodied in machine-executable instructions which cause a general-purpose or special-purpose processor to perform certain steps. Alternatively, these steps may be performed by specific hardware components that contain hardwired logic for performing the steps, or by any combination of programmed computer components and custom hardware components.","Elements of the present invention may also be provided as a machine-readable medium for storing the machine-executable program code. The machine-readable medium may include, but is not limited to, floppy diskettes, optical disks, CD-ROMs, and magneto-optical disks, ROMs, RAMs, EPROMs, EEPROMs, magnetic or optical cards, or other type of media\/machine-readable medium suitable for storing electronic program code.","Throughout the foregoing description, for the purposes of explanation, numerous specific details were set forth in order to provide a thorough understanding of the invention. It will be apparent, however, to one skilled in the art that the invention may be practiced without some of these specific details. For example, it will be readily apparent to those of skill in the art that the functional modules and methods described herein may be implemented as software, hardware or any combination thereof. Moreover, although embodiments of the invention are described herein within the context of a mobile computing environment (i.e., using mobile devices -; -), the underlying principles of the invention are not limited to a mobile computing implementation. Virtually any type of client or peer data processing devices may be used in some embodiments including, for example, desktop or workstation computers. Accordingly, the scope and spirit of the invention should be judged in terms of the claims which follow."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["A better understanding of the present invention can be obtained from the following detailed description in conjunction with the following drawings, in which:",{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIGS. 13A-C"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 15"}]},"DETDESC":[{},{}]}
