---
title: Computing system using single operating system to provide normal security services and high security services, and methods thereof
abstract: A method of providing normal security services and high security services with a single operating system in a computing system is disclosed. A secure thread is only accessible while the computing system is in a high security environment, and relates to one of the high security services. A pseudo normal thread is to be executed while the computing system in a normal security environment, and it works as a temporary of the secure thread, and is forwarded to a thread ordering service to gain access to resources of the computing system. When the pseudo normal thread gains access to the computing system resources, the computing system is changed to the high security environment to execute the secure thread.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09207968&OS=09207968&RS=09207968
owner: MEDIATEK INC.
number: 09207968
owner_city: Hsinchu
owner_country: TW
publication_date: 20091103
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","BRIEF SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["1. Field of the Invention","The present invention relates to computing systems providing normal security services and high security services with a single operating system.","2. Description of the Related Art","Processors with 32-bit reduced instruction set computer (RISC) instruction set architecture (ISA) are relative simple compared to processor used in desktop personal computer, thus are suitable for consumer electronics such as mobile phones, PDAs, digital camera, digital media and music players, handheld game consoles, and computer peripherals such as hard drives and routers. These processors dominate in the mobile and embedded electronics market as they are relatively low cost and consume lower power. The ARM architecture is the most widely used 32-bit ISA, and ARM processors are the most popular embedded 32-bit RISC processors nowadays.","Applications executed by consumer electronics may require services of different security levels. Normal security services, such as making a phone call and playing java games may operate well in a normal security environment (Normal world). However, when high security services such as online credit card payment are requested, the normal security environment may not satisfy the security requirements. A separate high security environment (Secure world) is required to handle such high security services in order to prevent information leaking.","The TrustZone hardware architecture, developed by ARM, aims to execute code from both the Normal world and the Secure world with a single physical processor core. The single physical processor has the benefits of smaller silicon area, low cost, and low power consumption comparing to two dedicated processors. The application core switches between the Normal world and Secure world in a time-sliced fashion, and this world switch is generally orthogonal to all other capabilities of the process and so each world can operate independently of the other while using the same core.","Examples of software architectures implementing a Secure world stack on a TrustZone-enabled processor core include dedicated Secure world operating system (OS) and synchronous library. A dedicated Secure world OS is a complex yet powerful design. It can simulate concurrent execution of multiple independent Secure world applications, run-time download of new security applications, and Secure world tasks. On the other hand, the simple synchronous library of code placed in the Secure world handles only one task at a time, and the task is uninterruptible. Users may experience termination or disable of normal security applications such as music playback and phone call or message reception.","The invention discloses computing systems using a single operating system to provide normal security services and high security services, in particular, the high security services are interruptible and the computer systems support multiple thread computing in the Secure world. An exemplary embodiment of the computing system comprises a secure application programming interface (secure API), a driver layer, and a monitor (may be implemented by software applications). The secure API is invoked by a pseudo normal thread executed while the computing system is in a normal security environment. The driver layer is invoked by the secure API to operate a world switch instruction. The world switch instruction activates the monitor to save context of the pseudo normal thread, change the computing system to a high security environment, check a thread mapping table storing a relation between the pseudo normal thread and a secure thread to obtain the secure thread, create or restore context of the secure thread, and dispatch the secure thread to be executed by the computing system that has been changed to the high security environment. The secure thread relates to one of the high security services.","The invention further discloses methods for using a single operating system (OS) in a computing system to provide normal security services and high security services. In an exemplary embodiment of the method, a secure thread and a pseudo normal thread are provided. The secure thread is limited to be executed while the computing system is in a high security environment, and relates to the high security services. The pseudo normal thread is to be executed while the computing system is in a normal security environment, and it works as a temporary of the secure thread, and is forwarded to a thread ordering service to gain access to resources of the computing system. When the pseudo normal thread gains access to the resources of the computing system, the computing system is changed to the high security environment to execute the secure thread. Thus, the high security service of the secure thread can be safely performed.","A detailed description is given in the following embodiments with reference to the accompanying drawings.","The following description is of the best-contemplated mode of carrying out the invention. This description is made for the purpose of illustrating the general principles of the invention and should not be taken in a limiting sense. The scope of the invention is best determined by reference to the appended claims.",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1","b":["100","100","102","104","106","108","110","102","104","110","110","100","106","108","110","110","108","102","106","108","104","110","104","106","108","106","110","104"]},"To switch the operating core  between the normal state  and the secure state , a secure application program interface (secure API)  and a monitor  (may be implemented by a software application) are utilized, and some alterations are made in the design of the driver layer (drivers ) and the operating system (OS) of the computing system . In this embodiment, only one OS is applied in the computing system . Three kinds of threads, including normal threads NT . . . NTn, secure threads ST . . . STm and pseudo normal threads PNT . . . PNTm, are provided in the OS. Each of the threads refers to a context depicting an execution environment and condition of the computing system . When a particular service of a thread is complete or interrupted, the context of the thread will be stored. Once again it gains resource by scheduling, the context of the thread will be restored, means that the environment of the computing system will be restored to resume the execution. A context may contain a stack, a register set, a program counter (PC), a pointer, a virtual memory, and so on. Storing or restoring a context may contain storing the context into the process stack, such as storing register values (e.g. program counter, link register, or stack pointer) related to the context of the thread. The normal threads NT . . . NTn are used to execute normal security services when the operating core  is in the normal state  (the computing system  is in the normal security environment). The secure threads ST . . . STm are limited within the secure world (when the operating core  is in the secure state ) for executing high security services. The secure threads ST . . . STm are only operational in the high secure environment and are not accessible when the operating core  is in the normal state , hence the pseudo normal threads PNT . . . PNTm having a one-to-one relation with the secure threads ST . . . STm) are provided to be executed in the normal security environment to work as temporaries of the secure threads ST . . . STm. The pseudo normal thread is acting like a substitute of the corresponding secure thread, and the pseudo normal thread exists in the normal world to gain resources for the corresponding secure thread through scheduling. In the normal world (the operating core  is in the normal state ), the pseudo normal threads PNT . . . PNTm are treated as normal threads, and these pseudo normal threads are the substitute of their corresponding secure threads ST . . . STm to queue with the normal threads NT . . . NTn for the access of the resources of the computing system . As shown, the thread ordering service  of the OS takes charge of the resource allocation. When any of the pseudo normal thread gains access to the resources of the computing system , the operating core  is switched to the secure state  to execute the corresponding secure thread. Thus, the computing system  can provide both normal security services and high security services with a single OS, and the high security services are interruptible and with multi-tasking capabilities.","In some embodiments, the relationship of pseudo normal threads and the secure threads may be stored in a tread mapping table , and in some other embodiments, the secure thread ID can be derived by the pseudo normal thread ID or vise versa. An exemplary implementation of mapping a pseudo normal thread to a secure thread is letting the pseudo normal thread to be normal world thread identification (ID), such as the process ID in Linux system, and letting the secure thread to be a number derived by the corresponding pseudo normal thread ID. For example, the secure thread ID is the corresponding pseudo normal thread ID plus a predefined number.","The secure API  is designed for high security services. As shown in , the winning pseudo normal thread (one of the pseudo normal threads PNT . . . PNTm that gains access to the resources of the computing system  in the thread ordering service ) calls the secure API  to switch the state of the operating core  via the driver layer (drivers ). In the driver layer (), a world switch instruction such as a Secure Monitor Call (SMC) is called to activate the monitor . The activated monitor  saves context of the winning pseudo normal thread, for example, modifies registers and kernels of the computing system  to change the computing system  to the high secure environment, checks the thread mapping table  storing the relation between the pseudo normal threads PNT . . . PNTm and the secure threads ST . . . STm to obtain the corresponding secure thread, restores context of the obtained secure thread, and dispatches the obtained secure thread to be executed. The high security service of the secure thread is performed by the computing system  that has been changed to the high security environment. The forgoing \u2018context saving\u2019 and \u2018context restoring\u2019 store and restore information used in resuming the thread. When one thread is paused to switch to another thread, the context of the paused thread is saved in the stack of the current process (for example, the program counter, link register, or stack pointer about the context of the paused thread are stored to the stack of the current process). By restoring the information in the stack of the current process, the context of the paused thread is rebuilt and the paused thread is resumed.","The operational OS allows multi-tasking and interrupt for the secure threads ST . . . STm. The pseudo normal threads PNT . . . PNTm, representing the secure threads ST . . . STm to participate in the thread ordering service , allow the multi-tasking of the secure threads ST . . . STm. As for the interruptible capability, a secure interrupt handler is provided in the monitor , or, in other embodiments, a secure interrupt service routine (secure ISR)  is provided to substitute for the secure interrupt handler designed in the monitor . Furthermore, the monitor  provides another function, switching the computing system  from the high security environment to the normal security environment at the end of each secure thread.  show several flowcharts depicting different functions of the monitor .",{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 2","b":["100","200","202","204","100","100","206","114","120","114","120","208","114","200","100"]},"Referring to step S, the kernel modification of the computing system  may involve a supervisor mode switch while the computing system  uses an ARM architecture.","Referring to step S, it may not only check the thread mapping table  for the corresponding secure thread, it may further check the status of the corresponding secure thread. For example, the thread mapping table  may further show whether the obtained secure state has been interrupted and whether it has been resumed. The status of the secure threads may be stored in the thread mapping table .",{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 3","b":["300","114","106","110","302","304","306","308","100","100","100","120","304","306","122","300","122","114","122"]},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 4","b":["400","114","114","100","400","402","404","100","100","406","114","408","408","106","108","116","100"]},"The kernel modification of step S may involve a \u2018supervisor mode switch\u2019 while the computing system  uses an ARM architecture.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":["FIGS. 5 and 6","FIG. 5","FIG. 1"],"b":["106","106","108","502","1","100","112","116","504","114","114","200","200","100","506"]},{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 5","FIG. 3"],"b":["508","506","106","114","300","114","106","108","124","508","124","300","118","118","1","1","100","300","100","504","114","200","120","304","300","106","506","506","506","114","400","106","502","116"]},"Referring to the example of , the secure interrupt handler is realized by the secure ISR  rather than realized in the monitor . Thus, when the interrupt  occurs, the secure ISR  is performed by the operating core  to accomplish steps in flow . After the flow  is complete, the secure ISR  calls another SMC , and the operating core  returns to the monitor . Then, the monitor  calls the normal ISR  to handle the interrupt . The rest of  is similar to that in . In this case, because the secure interrupt handler (flow ) is accomplished by the secure ISR , the code size of the monitor  can be small.","While the invention has been described by way of example and in terms of the preferred embodiments, it is to be understood that the invention is not limited to the disclosed embodiments. To the contrary, it is intended to cover various modifications and similar arrangements (as would be apparent to those skilled in the art). Therefore, the scope of the appended claims should be accorded the broadest interpretation so as to encompass all such modifications and similar arrangements."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention can be more fully understood by reading the subsequent detailed description and examples with references made to the accompanying drawings, wherein:",{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1","b":"100"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIGS. 5 and 6","b":"106"}]},"DETDESC":[{},{}]}
