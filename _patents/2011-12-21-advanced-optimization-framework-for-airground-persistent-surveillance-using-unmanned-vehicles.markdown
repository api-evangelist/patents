---
title: Advanced optimization framework for air-ground persistent surveillance using unmanned vehicles
abstract: An optimization framework for air and ground based persistent surveillance using unmanned vehicles. The objective of the optimization framework is to maximize the coverage of a target area for given UVs, skeleton, and maintenance sites. The optimization framework is based on the generation of mini-cycles, and assigning them in a fractional manner to the given UVs. Subsequently, the optimization framework based on UV-Cross and UV-k-Swap transformations, followed by the cycle of fusion, integerization, and schedule synchronization.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08935035&OS=08935035&RS=08935035
owner: The United States of America as Represented by the Secretary of the Army
number: 08935035
owner_city: Washington
owner_country: US
publication_date: 20111221
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","GOVERNMENTAL INTEREST","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF PREFERRED EMBODIMENTS"],"p":["This application claims the benefit under 35 USC \u00a7119(e) of U.S. Provisional Patent Application No. 61\/470,017, filed on Mar. 31, 2011, which is incorporated by reference in its entirety.","The invention described herein may be manufactured and used by, or for the Government of the United States for governmental purposes without the payment of any royalties thereon.","The present invention relates in general to the field of persistent surveillance. Particularly, this invention relates to an advanced optimization framework for loitering, having military and commercial applications. More specifically, this invention relates to the optimization of air-ground persistent surveillance using unmanned vehicles.","Unmanned vehicles (UVs), including unmanned aerial vehicles (UAVs) and ground vehicles (UGVs) are increasingly becoming more sophisticated and reliable for various military operations. They are also becoming smaller and less costly to produce. While many missions were already carried out with UAVs and\/or UGVs, they were usually focused on a single UV at a time.","The affordability of concurrently deploying a fleet (e.g., tens or hundreds) of UVs is expected to be achieved in the near future. However, an important aspect of such realization relies heavily on the collaborative operation between the deployed UVs, particularly on the battlefields.","One such obvious collaborative operation of UVs is focused on persistent surveillance. It is projected that in the future, persistent surveillance by UVs will play a critical role in eliminating human casualties while simultaneously enhancing the quality of such operations.","As a result, it would be desirable to optimize the fleet of UVs for loitering patterns as well as for their maintenance scheduling, in order to maximize coverage of the given area of surveillance, by minimizing unnecessary overlaps. In other terms, for a given fleet of UVs with different mission payloads and characteristics, specified areas of interest, and a given set of maintenance sites, it would be desirable to find an optimum set of loitering routes along with the optimal maintenance schedule that maximizes coverage (i.e., minimizes the surveillance overlap).","UV maintenance also represents a concern for the operation. Typically, a UV needs to be recharged or refueled within a few hours, although there exists UVs that can operate for a much longer time. This means that typically after one or two hours of loitering, a given UV must land at a designated maintenance point to refuel or recharge. Although for a UGV, the refueling time might somewhat be greater on the average than that of an UAV, the underlying principle remains the same for these UVs.","What is therefore needed is an advanced optimization framework for air-ground persistent surveillance using unmanned vehicles. Prior to the advent of the present invention, the need for such an optimization framework has heretofore remained unsatisfied.","The present invention satisfies this need, and describes an advanced optimization framework for air and ground persistent surveillance (or loitering) using unmanned vehicles (UVs). The optimization framework has numerous military and commercial applications.","The optimization framework is based on mini-cycles (MCs) and includes the following main steps:","At the first step, the optimization framework generates mini-cycles (i.e., \u201cshortest\u201d cycles), which cover all the flying legs for a target coverage area.","At the second step, the optimization framework assigns portions of given or predetermined UVs (UAVs, UGVs, or a combination thereof) to mini-cycles.","At the third step, the optimization framework optimizes the loitering schedule by converting mini-cycles and \u201cderived\u201d cycles with assigned UVs into new \u201cderived\u201d cycles, with assigned UVs using the following two types of transformations of loitering pattern: UV-Cross transformation; and UV-k-Swap transformation.","As used herein, UV-Cross transformation implies the same type (or types) of UAVs or UGVs are being assigned to both cycles. The optimization framework applies cross to split derived cycles into more smaller cycles. UV-k-Swap transformation might involve two or more cycles crossing each other and different types of UAVs or UGVs. However, the UV-k-Swap transformation can be performed separately either on UAVs or UGVs. In other terms, preferably, the UV-k-Swap transformation is not performed on a combination of different UVs, such as UAVs and UGVs, because they are two different types of UVs.","At the fourth step, the optimization framework fuses the derived cycles.","At the fifth step, the optimization framework integerizes a practical, realistic solution.","At the sixth step, the optimization framework synchronizes the schedule of the UVs in order to maximize the coverage.","Similar numerals refer to similar elements in the drawings.",{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 1","b":"100"},"The optimization framework  generally includes the following main steps:","At step , the optimization framework  generates mini-cycles (MCs) from a given skeleton, as it will be explained later in connection with . Theses MCs cover all the flying legs (or links) for a target coverage area.","At step , the optimization framework  assigns portions of given UVs (UAVs, UGVs, or a combination thereof) to the MCs that are defined at step , as it will be explained later in connection with .","At step , and as it will be explained later in connection with , the optimization framework  optimizes the loitering schedule of the MCs that have been assigned at step , by converting the MCs and the \u201cderived\u201d cycles with assigned UVs, into new \u201cderived\u201d cycles with assigned UVs, using the following two types of transformations of loitering pattern: UV-Cross transformation; and UV-k-Swap transformation.","As used herein, UV-Cross transformation implies the same type (or types) of UAVs or UGVs are being assigned to both cycles. The optimization framework applies cross to split derived cycles into more smaller cycles. UV-k-Swap transformation might involve two or more cycles crossing each other and different types of UAVs or UGVs. However, the UV-k-Swap transformation has to be performed separately either on UAVs or UGVs. In other terms, preferably, the UV-k-Swap transformation is not performed on a combination of different UVs, such as UAVs and UGVs, because they are two different types of UVs.","At step , the optimization framework  fuses the derived cycles, resulting from step .","At step  and as it will be explained later in connection with , the optimization framework  integerizes a practical, realistic solution for the fuzed derived cycles (step ).","At step , the optimization framework  synchronizes the schedule of the UVs that are assigned to the fuzed derived cycles () in order to maximize the coverage of the target area of interest.","With reference to , it illustrates step  of the optimization framework , and represents the core input for the optimization framework . The core input includes: A skeleton and at least two UVs, where each UV is either a UAV or a UGV.","In this exemplary illustration, the skeleton is formed of five nodes (or waypoints) N1, N2, N3, N4, N5 that are interconnected by a plurality of links (or directed legs) L12, L21, L13, L31, etc., that characterize the loitering patterns of UVs (UAVs and\/or UGVs). In addition, the lengths of these links legs are predetermined, and correspond to the distances between the nodes.","In this illustration, each node is represented by a circle (e.g., N1). The number of input arrows (e.g., L21, L31, L41) to the node N1 equals the number of output arrows (e.g., L13, L12, L15) from the node N1. To each leg of the skeleton that interconnects two nodes, there corresponds a number, which determines a distance between the two nodes.","The skeleton can be modeled with a balanced multidigraph G=(V,A) with V(G) vertices and A(G) arcs, coupled with the distance matrix D. There are two types of vertices; (1) vertices corresponding to UAVs, and (2) vertices corresponding to UGVs. An arc connects two vertices only if both vertices are of the same type. Let d(G) be in-degree of vertex v\u03b5V(G). Similarly, let d(G) be out-degree of vertex v\u03b5 V(G). The multidigraph G is said to be balanced if d(G)=d(G) for every vertex vin G. A multidigraph that models a skeleton is a balanced multidigraph. It is also assumed that to every arc a\u03b5A(G) there corresponds a distance d\u03b5D.","For clarity of illustration, the cycles in the left skeleton will be illustrated with different lines in the right skeleton, wherein five mini-cycles (MC13, MC124, MC152, MC45, MC34)) are generated from the nodes and links. As an example, the first mini-cycle MC13 is illustrated with solid lines and includes two links L13, L31 and two nodes N1, N3. The second mini-cycle MC124 is illustrated with dashed lines and includes three links L12, L24, L41 and three nodes N1, N2, N4. The third mini-cycle MC152 is illustrated with dotted lines and includes three links L15, L52, L21 and three nodes N1, N5, N2. It should be clear that a different number of MCs can be generated.","This step  of the optimization framework  can be further described stated as follows. For given UVs, balanced multidigraph G, and the corresponding distance matrix D, it is desired to assign UVs to induced cycles by G in such a way that the given objective function is optimized. There are two exemplary, possible scenarios for consideration. In the first scenario the given UVs cannot cover the given area of interest due to its size. In this case the objective of optimization is focused on the maximizing the coverage of the given area of interest by UVs, or alternatively minimizing the overlap of assigned UVs.","In the second scenario the given UVs can cover the given area of interest. In this case the objective of optimization is focused on the minimization of the number of UVs needed to be assigned. This second scenario, however, can be easily translated into the first scenario. For example, it is possible to apply a greedy algorithm by decreasing the number of the UVs by one at a time, to check if the area of interest is completely covered by the new set of UVs, and to repeat these steps until the number of UVs becomes insufficient. The focus then shift on optimizing the first scenario.","The fact that surveillance is persistent implies that each UV will move over some directed cycle, and eventually return to its starting point, which can be assumed to correspond to a maintenance site. As a result, an important step of the optimization framework  involves the generations of mini-cycles from the given skeleton.","The mini-cycles induced by a given skeleton are the cycles of the shortest lengths, which cover all the legs of the skeleton. From the Graph Theory results it is known that for a given balanced multidigraph G such mini-cycles can be created. The challenge, however, lies in the generation of such mini-cycles.","One way to generate the MCs is based on a greedy algorithm by generating a shortest cycle in the current iteration through the shortest-path algorithm, such as Dijkstra's or Bellman-Ford. Reference is made to: R. Bellman, \u201cOn a routing problem,\u201d Quart. Appl. Math. 16(1) (1958), 87-90; M. A. Goodrich, et al., \u201cSupporting wilderness search and rescue using a camera-equipped mini UAV: research articles,\u201d Journal of Field Robotics 25(1-2) (2008), 89-110; and I. K. Nikolos, et al. \u201cEvolutionary algorithm based offline\/online path planner for UAV navigation,\u201d IEEE Transactions on Systems, Man, and Cybernetics-Part B: Cybernetics 33(6) (2003), 898-912.","It should be noted that the cycle generation is driven by the legs assigned to UAVs as opposed to UGVs. That is, in this example only, the optimization framework  does not generate a heterogeneous cycle consisting concurrently of links assigned to UAVs and UGVs.","With reference to , the optimization framework  assigns given UVs to the mini-cycles that have been generated at the previous step . Once the mini-cycles are generated another challenge lies in assigning the given UVs to these mini-cycles. Reference is made to R. Beard, et al., \u201cAutonomous vehicle technologies for small fixedwing UAVs,\u201d AIAA Journal of Aerospace Computing, Information, and Communication 2(1) (2005), 92-108; and E. W. Dijkstra, \u201cA note on two problems in connection with graphs,\u201d Numer. Math. 1 (1959), 269-271.","Typically, the number of mini-cycles for a complex loitering pattern is much larger than the number of UVs. So, real numbers, ris, (i.e., fractions) corresponding to UVs will be assigned to mini-cycles. The mathematical formulation will use the distance times, ri, to capture the maximum coverage. Consequently, the optimization based on the UV-k-Swaps (to be described later in connection with ) will also utilize ris.","Assuming for the sake of illustration only, that unmanned vehicle UV1 is assigned to mini-cycle MC13; unmanned vehicle UV2 is assigned to mini-cycle MC124; unmanned vehicle UV3 is assigned to mini-cycle MC152; unmanned vehicle UV4 is assigned to mini-cycle MC45; and unmanned vehicle UV5 is assigned to mini-cycle MC34. It should be clear that the same UVs can be used for different MCs. For example, UV1 can be the same unmanned vehicle as UV4.","Referring now to , it illustrates step  of the optimization framework , for optimizing the loitering pattern using UV-Cross and UV-k-Swap transformations. The basic operation that can, for example, be employed for optimization is based on the \u201ccross\u201d transformation, which is referred to herein as \u201cUV-Cross transformation\u201d.","With reference to , UV-Cross fission transformation implies that one directed derived cycle (e.g., MC1234) crosses itself at a cross point, which is referred to as Cross 1 (right diagram), and which is formed of 4 arrows A, A, B, B, can produce two mini-cycles by replacing arrows A\u2192>B, B\u2192Aassignments with A\u2192A, B\u2192Bassignments, in order to obtain two, smaller mini-cycles MC13 and MC124 (as shown in the left diagram). The UV-Cross transformation is also said to fuze the derived cycles (step  of the optimization framework ).","The UV-Cross transformation step continues iteratively on the larger cycle created after UV-k-Swap, until no more crosses on itself can be found.","A single Cross-transformation can be applied either to two unassigned MCs or to two assigned MCs to the same UV. However, two or more crosses applied simultaneously result in transformation of G called swap. Swap transformation can be applied to two or more UVs. There is restriction, however, that a Swap-transformation cannot apply to MCs simultaneously assigned to UVs of different types, such as UAVs and UGVs. That is, the cycles must be either unassigned or assigned to either UAVs or UGVs, but not to both. It should be noted that the directions of the arrows (or arcs) in G are preserved after the UV-Cross transformation ().","A UV-k-Swap transformation is obtained through the application of k simultaneous UV-Cross transformations, with k>1. The simplest exemplary swap, UV-2-Swap transformation, is illustrated in , and involves two crosses that are referred to as Cross 1 and Cross 2.","The left diagram of  illustrates two exemplary mini-cycles, MC1234 (in dashed line) and MC2431 (in solid line). These two mini-cycles, MC1234 and MC2431, are assigned for example to two different UVs, such as UV1 and UV3, respectively. These UVs may or may not be of the same kind. However, they have to be both either UAVs or UGVs.","As illustrated in the right diagram, after a UV-2-Swap transformation, the UV assignment distribution might be affected depending on the assignment strategy that has been chosen. In this example, UV1 has been reassigned to cycle#1, which is shown in a solid line, and which is formed in part of MC1234 and in part of MC2431. Similarly, UV3 has been reassigned to cycle#2, which is shown in a solid line, and which is formed of the remaining part of MC1234 and the remaining part of MC2431.","It should be noted that the reassignment of the MCs may or may not affect the assignment of the \u201cweight,\u201d which is referred to as a real number (e.g., fractional numbers 0.8 and 0.4 of the corresponding assigned UVs in ). In this example in , the UV-2-Swap transformation has preserved the assigned weights; 0.8 remains assigned to UV1 and 0.4 remains assigned to UV2.","A similar but more complicated UV-3-Swap transformation is illustrated in . The UV-3-Swap transformation involves three simultaneous crosses of two exemplary mini-cycles, MC1234 and MC4512. These crosses are referred to as Cross 1, Cross 2, and Cross 3. The left diagram of  illustrates two exemplary mini-cycles, MC1234 (in dashed line) and MC4512 (in solid line). These two mini-cycles, MC1234 and MC4512, are assigned for example to two different UVs, such as UV1 and UV5, respectively. These UVs may or may not be of the same kind. However, they have to be both either UAVs or UGVs.","It is important to note that the UV-3-Swap transformation provides a set of derived cycles in G that is not realized by any sequence of UV-2-Swaps\/UV-Crosses transformations. After the UV-3-Swap transformation, the UV assignment distribution might be affected depending on the assignment strategy that has been chosen. In particular, the assignment of a single UV, e.g., UV1 corresponding to the MC1234 in the left diagram will be affected. This was not an issue after a UV-2-Swap transformation.","As illustrated in the right diagram, after a UV-3-Swap transformation, UV1 has been reassigned to cycle#1, which is shown in a solid line, and which is formed in part of MC1234 and in part of MC4512. Similarly, UV5 has been reassigned to cycle#2, which is shown in a dotted line, and which is formed in part of MC1234 and in part of MC4512. UV2 has been assigned to cycle#3, which is formed of the remaining parts of MC1234 and MC4512.","The UV-3-Swap transformation has assigned the weight 0.8*UV1 to the derived cycle #1, the weight 0.3*UV5 to the derived cycle #2, and the weight 0.1*UV5 to the derived cycle #3. So, the total of weights before UV-3-Swap was 0.8*UV1 and 0.4*UV5, which equals 0.8*UV1 and (0.3+0.1)*UV5 after UV-3-Swap, which means that the sum of weights has been preserved.","The UV-k-Swap transformation is illustrated in , and involves k crosses. The left diagram of  illustrates two exemplary mini-cycles, Cycle #1 (shown in a solid line) and Cycle #2 (shown in a dashed line) that cross each other in k places (or crosses). These crosses are referred to as Cross 1, Cross 2, Cross 3, . . . , Cross k\u22121, and Cross k. In this illustration Cycle #1 is assigned to UV1 with a weight of 5.6*UV1, while Cycle #2 is assigned to UV2 with a weight of 6.4*UV2.","The UV-k-Swap transformation results in k derived cycles that are illustrated in the right diagram as Cycle #1, Cycle #2, Cycle #3, . . . , and Cycle #k. In this illustration, the derived Cycle #1 is illustrated in a solid line and is reassigned to UV1 with a weight of 1.1*UV1; the derived Cycle #2 is illustrated in a dashed line and is reassigned to UV2 with a weight of 1.9*UV2; the derived Cycle #3 is illustrated in a dotted line and is reassigned to UV4 with a weight of 2.1*UV4; and the derived Cycle #k is also illustrated in a dotted line and is reassigned to UV5 with a weight of 3.1*UV5.","It is important to note that these swaps or transformations may or may not affect the directions of the arcs the cycles. Even though a swap transformation cannot apply to cycles assigned to UAVs and UGVs at the same time, the consideration has to be given for UAVs as well as UGVs when the swaps are considered, in order to minimize the overlap of the given target area of interest.","The UV-k-Swap transformation algorithm takes as input the assigned cycles Cycle #1 (or C) and Cycle #2 (or C) from balanced G and integer k. Cycle Cof length |C| is scanned, one node at a time, for possible UV-Cross with cycle C. When a UV-Cross between cycles Cand Cis found then a corresponding node is saved in a candidate node list for UV-Cross, and an internal counter (initialized to 0) is incremented and compared against the given k. If the counter equals k then the UV-k-Swap transformation is executed by performing UV-Cross on cycles C, Cat every node from the candidate node list.","The executed UV-k-Swap transformation is considered to be successful if it does not introduce new violations (e.g., flying length violation) and either decreases the number of violations or increases the coverage. Otherwise, the UV-k-Swap transformation is unsuccessful and backtracking based on Depth-First Search is used to find the next candidate node list. The transformation algorithm terminates if either the UV-k-Swap transformation has been successfully executed, or if k nodes have been scanned and |C|\u2212k\u2032<k-counter.","The UV-k-Swap transformation step continues iteratively, until either all UV-k-Swaps have been exhausted, or the time to find next UV-k-Swap becomes too long.","With reference to step  of , the optimization framework  integerizes a practical, realistic solution for the fuzed derived cycles (step ). The optimization framework  integerizes the UV assignments of . In other terms, the optimization framework  replaces the real numbered assignments of the UVs to cycles with integral assignments.","In this illustration, the derived Cycle #1 that has been assigned a weight of 1.1*UV1 is reassigned an integer value 1.0*UV1. The derived Cycle #2 that has been assigned a weight of 1.9*UV2 is reassigned an integer value 2.0*UV2. The derived Cycle #3 that has been assigned a weight of 2.1*UV4 is reassigned an integer value 2.0*UV4. The derived Cycle #k that has been assigned a weight of 3.1*UV5 is reassigned an integer value 3.0*UV5.","As explained earlier, at step , the optimization framework  synchronizes the schedule of the UVs that are assigned to the fuzed derived cycles () in order to maximize the coverage of the target area of interest.","Having explained the general steps of the optimization framework , the following description will provide additional supporting details.","UVs require frequent recharging\/refueling, which means that the scheduling of periodic maintenance plays an important role in the optimization framework  of the present invention. It is assumed that the maintenance sites are a priori given along with the UVs, skeleton, and the distance matrix. Consequently, some cycles will have a maintenance node and some cycles will not. If a cycle contains at least one maintenance node then it is referred to as an \u201cm-cycle;\u201d otherwise, it is referred to as an \u201cnm-cycle.\u201d","One goal of the optimization framework  is to eliminate (or at least substantially reduce) the nm-cycles that will remain assigned to a UV in the proposed solution of .  illustrates that a cross transformation can eliminate an nm-cycle as shown in the following example of optimization with a UV-2-Swap transformation.","The purpose of the optimization engine that is based on UV-Cross and UV-k-Swap transformations is to maximize the coverage of the given area of interest by the given UVs that are currently assigned to the mini-cycles.  illustrates the increase of the coverage based on a UV-2-Swap transformations for two UVs assigned to two mini-cycles. It is assumed that the lengths from CROSS 1 to CROSS 2 on the left side (i.e., before UV-2-Swap) for solid and dashed cycles are 2 and 1 respectively, and the lengths from CROSS 2 to CROSS 1 on the left side (i.e., before UV-2-Swap) for solid and dashed cycles are 3 and 5 respectively. The fractional weights correspond to a fraction of the UV that is currently assigned to a given cycle in G. As a result, the initial coverage (shown in the left diagram) is 2*0.8+3*0.8+1*0.4+5*0.4=6.4. After UV-2-Swap transformation of G coverage increases to 2*0.8+5*0.8+1*0.4+3*0.4=7.2, which gives improved partial result. The result obtained in  would favor to retain a cycle that covers 7*0.8=5.6 (i.e., solid lines after UV-2-Swap). That consideration will take place during the integerization at the fifth step of the optimization framework.","The formulation of the optimization problem will now be described. Let Sbe a set of initially assigned mini-cycles in G, and \u03a9 is a collection of all such sets (i.e. s\u03b5\u03a9, 0\u2266h<|\u03a9|). Let S, i>0, be attainable set of assigned derived cycles from a given Safter ordered execution of i UV-k-Swap transformations, where each UV-k-Swap is followed by one or more UV-Cross transformation(s) on affected cycles.","The initial assignment problem can be formulated as follows. For given n types of UVs let integers m, m, . . . mrepresent the given numbers of UVs of given type respectively. So, mrepresents a number of UVs of type j, j\u2266n. Let C, C. . . Cbe given unassigned mini-cycles of a total length L in G, and let f(C) be a given length of C. Let Q(G) be a combination of t(i,j) mini-cycles C, C, . . . , Cin assignment i (i.e., s\u03b5\u03a9) of G assigned to UVs of type j, j\u2266n. Then:",{"@attributes":{"id":"p-0078","num":"0077"},"maths":{"@attributes":{"id":"MATH-US-00001","num":"00001"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mrow":[{"munder":{"mi":"max","mrow":{"msubsup":{"mi":["S","i"],"mn":"0"},"mo":"\u2208","mi":"\u03a9"}},"mo":"\u2062","mrow":{"munderover":{"mo":"\u2211","mrow":{"mi":"j","mo":"=","mn":"1"},"mi":"n"},"mo":"\u2062","mrow":{"munderover":{"mo":"\u2211","mrow":[{"mi":"q","mo":"=","mn":"1"},{"mi":"t","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mi":["i","j"],"mo":","}}}]},"mo":"\u2062","mrow":{"msubsup":{"mi":["r","i"],"mrow":{"mi":"j","mo":"\u2061","mrow":{"mo":["(",")"],"mi":"q"}}},"mo":["\u2062","\u2062","\u2062","\u2062","\u2062"],"mrow":{"mi":"f","mo":"\u2061","mrow":{"mo":["(",")"],"msubsup":{"mi":["C","i"],"mrow":{"mi":"j","mo":"\u2061","mrow":{"mo":["(",")"],"mi":"q"}}}}},"mstyle":[{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}],"mi":"for","mn":"0"}}}},{"mo":["\uf603","\uf604"],"mi":"\u03a9"}],"mo":["\u2264","<"],"mi":"i"}},{"mrow":{"mo":["(",")"],"mn":"1"}}]}}}},"br":[{},{}],"in-line-formulae":[{},{}],"i":["Q","G","Q","G","j\u2260k,"],"sub":["j","k"],"sup":["i","i"]},{"@attributes":{"id":"p-0079","num":"0078"},"maths":{"@attributes":{"id":"MATH-US-00002","num":"00002"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mrow":[{"msubsup":{"mi":["r","i"],"mrow":{"mi":"j","mo":"\u2061","mrow":{"mo":["(",")"],"mi":"q"}}},"mo":"=","mrow":{"mrow":{"mfrac":{"msub":{"mi":["m","j"]},"mrow":{"munderover":{"mo":"\u2211","mrow":[{"mi":"p","mo":"=","mn":"1"},{"mi":"t","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mi":["i","j"],"mo":","}}}]},"mo":"\u2062","mrow":{"mi":"f","mo":"\u2061","mrow":{"mo":["(",")"],"msubsup":{"mi":["C","i"],"mrow":{"mi":"j","mo":"\u2061","mrow":{"mo":["(",")"],"mi":"p"}}}}}}},"mo":["\u2062","\u2062","\u2062","\u2062","\u2062"],"mrow":[{"mi":"f","mo":"\u2061","mrow":{"mo":["(",")"],"msubsup":{"mi":["C","i"],"mrow":{"mi":"j","mo":"\u2061","mrow":{"mo":["(",")"],"mi":"q"}}}}},{"mi":"t","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mi":["i","j"],"mo":","}}}],"mstyle":[{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}],"mi":"for"},"mo":["\u2265","\u2265"],"mi":"q","mn":"1"}},{"mi":["n","j"],"mo":["\u2265","\u2265"],"mn":"1"}],"mo":[",",","]}},{"mrow":{"mo":["(",")"],"mn":"3"}}]}}}}},{"@attributes":{"id":"p-0080","num":"0079"},"maths":{"@attributes":{"id":"MATH-US-00003","num":"00003"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mrow":{"mrow":[{"munderover":{"mo":"\u2211","mrow":[{"mi":"p","mo":"=","mn":"1"},{"mi":"t","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mi":["i","j"],"mo":","}}}]},"mo":"\u2062","msubsup":{"mi":["r","i"],"mrow":{"mi":"j","mo":"\u2061","mrow":{"mo":["(",")"],"mi":"p"}}}},{"mrow":{"msub":{"mi":["m","j"]},"mo":["\u2062","\u2062","\u2062","\u2062"],"mstyle":[{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}],"mi":["for","n"]},"mo":["\u2265","\u2265"],"mi":"j","mn":"1"}],"mo":"="},"mo":","}},{"mrow":{"mo":["(",")"],"mn":"4"}}]}}}}},{"@attributes":{"id":"p-0081","num":"0080"},"maths":{"@attributes":{"id":"MATH-US-00004","num":"00004"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mrow":[{"munderover":{"mo":"\u2211","mrow":[{"mi":"j","mo":"=","mn":"1"},{"mo":["\uf603","\uf604"],"msub":{"mi":"S","mn":"0"}}]},"mo":"\u2062","mrow":{"mi":"f","mo":"\u2061","mrow":{"mo":["(",")"],"msubsup":{"mi":["C","j","i"]}}}},{"mi":"L","mo":"."}],"mo":"="}},{"mrow":{"mo":["(",")"],"mn":"5"}}]}}}}},"During the optimization based on UV-Cross and UV-k-Swap transformations the objective (1) remains the same, and constraints (2), (4), (5) are enforced. Constraints (2) and (5) are automatically preserved. To preserve constraint (4) during our optimization based on UV-Cross and UV-k-Swap transformations an appropriate reassignment of rs has to be done as follows. If two cycles are created from one cycle (i.e., cycle fission) based on UV-Cross then the redistribution according to f(C) has to be performed. If one cycle is created from two cycles (i.e., cycle fusion) based on UV-Cross then reassigned requals sum of rs assigned to original two cycles. The reassignment also has to be performed after UV-k-Swap for k\u22673 (for k=2 our assignment remains unchanged).","The optimization problem based on a given initial assignment Scan be now formulated. Let Q(G) be a combination of t(i,j) mini-cycles C, C, . . . , Cin assignment S(i>0) of G assigned to UVs of type j, j\u2266n. Then:",{"@attributes":{"id":"p-0084","num":"0083"},"maths":{"@attributes":{"id":"MATH-US-00005","num":"00005"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mrow":{"munder":{"mi":"max","msub":{"mi":["S","i"]}},"mo":"\u2062","mrow":{"munderover":{"mo":"\u2211","mrow":{"mi":"j","mo":"=","mn":"1"},"mi":"n"},"mo":"\u2062","mrow":{"munderover":{"mo":"\u2211","mrow":[{"mi":"q","mo":"=","mn":"1"},{"mi":"t","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mi":["i","j"],"mo":","}}}]},"mo":"\u2062","mrow":{"msubsup":{"mi":["r","i"],"mrow":{"mi":"j","mo":"\u2061","mrow":{"mo":["(",")"],"mi":"q"}}},"mo":["\u2062","\u2062","\u2062","\u2062","\u2062"],"mrow":{"mi":"f","mo":"\u2061","mrow":{"mo":["(",")"],"msubsup":{"mi":["C","i"],"mrow":{"mi":"j","mo":"\u2061","mrow":{"mo":["(",")"],"mi":"q"}}}}},"mstyle":[{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}],"mi":["for","i"]}}}},"mo":"\u2265","mn":"1"}},{"mrow":{"mo":["(",")"],"mn":"6"}}]}}}},"br":[{},{}],"in-line-formulae":[{},{}],"i":["Q","G","Q","G","j\u2260k,"],"sub":["j","k"],"sup":["i","i"]},{"@attributes":{"id":"p-0085","num":"0084"},"maths":{"@attributes":{"id":"MATH-US-00006","num":"00006"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mrow":{"mrow":[{"munderover":{"mo":"\u2211","mrow":[{"mi":"p","mo":"=","mn":"1"},{"mi":"t","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mi":["i","j"],"mo":","}}}]},"mo":"\u2062","msubsup":{"mi":["r","i"],"mrow":{"mi":"j","mo":"\u2061","mrow":{"mo":["(",")"],"mi":"p"}}}},{"mrow":{"msub":{"mi":["m","j"]},"mo":["\u2062","\u2062","\u2062","\u2062"],"mstyle":[{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}],"mi":["for","n"]},"mo":["\u2265","\u2265"],"mi":"j","mn":"1"}],"mo":"="},"mo":","}},{"mrow":{"mo":["(",")"],"mn":"8"}}]}}}}},{"@attributes":{"id":"p-0086","num":"0085"},"maths":{"@attributes":{"id":"MATH-US-00007","num":"00007"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mrow":[{"munderover":{"mo":"\u2211","mrow":[{"mi":"j","mo":"=","mn":"1"},{"mo":["\uf603","\uf604"],"msub":{"mi":"S","mn":"0"}}]},"mo":"\u2062","mrow":{"mi":"f","mo":"\u2061","mrow":{"mo":["(",")"],"msubsup":{"mi":["C","j","i"]}}}},{"mi":"L","mo":"."}],"mo":"="}},{"mrow":{"mo":["(",")"],"mn":"9"}}]}}}}},"The optimization is focused on objective function (6) and it is based on UV-Cross and UV-k-Swap transformations preserving constraints (7-9). If is at the core of optimization framework  described herein.","The optimization framework  assumes that UVs are given, balanced multidigraph G, distance matrix D corresponding to G, and maintenance vertices in G. By having UVs it is possible to also obtain attributes associated with each individual UAV or UGV such as maximum speed, time to refuel, payload, etc.","At step  of , the optimization framework  generates the mini-cycles by applying standard shortest path algorithm (e.g., Dijkstra, Bellman-Ford, Suurballe algorithm, etc.) to G iteratively. That is, in the current cycle-generation iteration G is taken into consideration G and excludes the mini-cycles that already have been generated, such as by using a greedy approach.","At step  of , the optimization framework  assigns UVs to the mini-cycles. Since the number of mini-cycles should greatly exceed the number of given UVs (based on the scenarios from the US airline industry) for a typical anticipated scenario, then a given UV will be assigned to k>>1 cycles. An important constraint is that each cycle must be assigned by exactly one type of UV. All k cycles would have to satisfy a loitering restrictions implied by given UV. For example, a cycle cannot contain d\u03b5D that exceeds the refueling requirement of our UV. There are number of strategies that we can take in order to determine what fraction of our UV is assigned to a particular cycle.","Let C, C, . . . , Cbe k cycles assigned to m UVs of the same type, where k>m. A simple approach would be to assign m\/k to each cycle, but it would violate the interest of community. So our approach is based the community of interest. Let f(C) be a length of C. Then to every cycle Cthere is assigned number r\u03b5R that satisfies:",{"@attributes":{"id":"p-0092","num":"0091"},"maths":{"@attributes":{"id":"MATH-US-00008","num":"00008"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mi":"r","mo":"=","mrow":{"mfrac":{"mi":"m","mrow":{"munderover":{"mo":"\u2211","mrow":{"mi":"q","mo":"=","mn":"1"},"mi":"k"},"mo":"\u2062","mrow":{"mi":"f","mo":"\u2061","mrow":{"mo":["(",")"],"msub":{"mi":"C","msub":{"mi":["i","q"]}}}}}},"mo":"\u2062","mrow":{"mrow":{"mi":"f","mo":"\u2061","mrow":{"mo":["(",")"],"msub":{"mi":"C","msub":{"mi":["i","j"]}}}},"mo":"."}}}}}},"So, initially UVs of the same type are assigned to k mini-cycles in such a way that the same portion r of our UVs is assigned per given unit of distance at each assigned mini-cycle. This means that r\u2267r\u2267 . . . \u2267rif the cycles are partially ordered f(C)\u2267f(C)\u2267 . . . \u2267f(C).","At step  of , the optimization framework  represents a core of multi-objective optimization that is based on the UV-k-Swap and UV-Cross transformations. The main component of step  is a basic iteration, which includes UV-k-Swap transformation followed by one or more UV-Cross transformations. Both types of transformations preserve the existence of all cycles for persistent loitering. Each UV-Cross is applied to one affected cycle at a time causing splitting of such a cycle into two cycles. So, a basic iteration consists of UV-k-Swap followed by fission of the affected cycles. Such fission of cycles is accomplished by scanning recursively each affected cycle after UV-k-Swap and applying UV-Cross transformation to one affected cycle at a time (if that is possible).","The underlying rules are as follows. First, the total number of violations (e.g., maintenance violation, flight violation) should not increase after a basic iteration. Second, the coverage can decrease only if the number of violations decreases. Otherwise, the coverage must increase. Initially, before the execution of step , all the cycles are mini-cycles. As the optimization progresses through basic iterations some of these mini-cycles are converted into derived cycles that serve as a basis for subsequent optimization.","During the optimization an appropriate balance between the numbers of cycles versus the sizes of the cycles should be maintained. If we have initially all mini-cycles in G then the likelihood of violating the loitering rules based on UV-k-Swap is minimum. The violation probability increases for a UV-k-Swap if the involved cycles become larger. For example, such a violation can happen if one long cycle is assigned to a long-lasting UV (i.e., UV that does not require frequent maintenance), and another short cycle is assigned to a short-lasting UV. A swap applied in this case could likely violate the maintenance requirement for a short-lasting UV.","As a result, maintaining as short cycles as possible by automatically applying UV-Crosses and splitting the affected cycles after each UV-k-Swap during the optimization increases probability that the number of maintenance violations will not increase after a basic iteration. Maintaining the shortest cycles during the optimization, however, might miss some UV-k-Swaps that would otherwise be feasible. One way of coping with this issue is through the controlled\/smart use of the UV-Cross transformations (i.e., controlled cycle fission). Another way is through combining steps  and  in an efficient way.","Step  of  can be performed once the optimization based on the basic iterations is completed, and the resulting cycles in G are ready to be fused. The fusion of cycles will rely on the UV-Cross applied to two crossing cycles being assigned to the same UV type at a time. Once the cycles are fused the assignment of corresponding UV has to be adjusted.","It should be noted that the fusion of cycles can reduce the number of maintenance violations (from 1 to 0 in ). That is, cycles MC13 without maintenance violation and MC124 with maintenance violation are fused together creating cycle MC1234 without maintenance violation.","Step  of  illustrates the integerization of the UV assignments by replacing the real numbered assignments of UVs to cycles with integral assignments. For the given m UVs of the same type i and their corresponding assignment distribution r, r, . . . , ramong k derived cycles, integerization is feasible because after Step  r+r+ . . . +r=m is satisfied. If all cycles are m-cycles then integerization in Step  ideally should resolve the remaining violation issues. So, integerization reassigns UVs to m-cycle originally assigned to 2.3 UV and to m-cycle originally assigned to 0.6 UV.","If some cycles remain as nm-cycles, however, then such cycles become unassigned after step , which is quite a realistic scenario. It should be noted that the reassignment of UVs to a dashed cycle is preferable over reassignment to a dotted cycle, but such reassignment would violate a maintenance requirement. In addition, step  also considers the relative coverage of the UAVs relative to the UGVs. That is, an appropriate lower weight is given to the cycles assigned (but not yet integerized) to UAVs (or UGVs) if there is an overlap with an integerized cycle assigned to UGV (or UAV).","At step  of , the scheduling of maintenance times will allow an assignment of the loitering pattern of each UV to a specific time interval in the general loitering schedule. This scheduling will be focused on the maximization of the coverage of the given area of interest based on additional features of UVs such as speed, sensor coverage range, cycle overlap, etc. In particular, two or more UVs assigned to a single m-cycle after completion of step  will be separated by the fixed distance or time interval (e.g., 2 UVs assigned to dotted line cycles in ).","The embodiments described herein are included for the purposes of illustration, and are not intended to be the exclusive; rather, they can be modified within the scope of the invention. Other modifications can be made when implementing the invention for particular applications, whether military of commercial."],"GOVINT":[{},{}],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The above and other features of the present invention and the manner of attaining them, will become apparent, and the invention itself will be best understood, by reference to the following description and the accompanying drawings, wherein:",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 4","FIGS. 4A","FIG. 1"],"b":["4","4","4"]},{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 5","FIG. 1"]},{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 6","FIG. 1"]}]},"DETDESC":[{},{}]}
