---
title: System and method for an in-server virtual switch
abstract: In accordance with an embodiment, a data processing system includes a processor, a memory, and an interface port configured to be coupled to a hardware network interface device. The processor is configured to run a process that maps network switching functions of each of a plurality of virtual machines to the hardware network interface device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08761187&OS=08761187&RS=08761187
owner: Futurewei Technologies, Inc.
number: 08761187
owner_city: Plano
owner_country: US
publication_date: 20110614
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF ILLUSTRATIVE EMBODIMENTS"],"p":["The present invention relates to computer servers, and, in particular embodiments, to a system and method for an in-server virtual switch.","Virtualization technology's emergence as a core Infrastructure as a Service (IaaS) backbone for variety of cloud deployments is well-known. Over the period of last 10 years, advances in x86 hardware assists have paved the way for performance and scalability focused virtualization solutions. Hypervisors, otherwise known as Virtual Machine Monitors (VMM), employ software instruction intercept mechanisms to emulate CPU, memory & I\/O resources to allow for operating systems (OS) to run as guests. Properly written VMM can provide reliable, secure & accurate virtual systemic view to the guest OS. This is used to leverage modern architectural features of recent operating systems running under a virtualized hardware view. Server virtualization can be further classified into compute, network and storage virtualizations.","Many advances in CPU and memory virtualization techniques have enabled guest operating systems to run efficiently on virtualized hardware. Innovations in compute virtualization techniques are mainly in the CPU and memory related hardware virtualization assists as well as in their software leverage points in Hypervisors. Network virtualization plays a major role in defining inter-VM network behavior. Virtualization based IaaS often mimics existing Datacenter inter-networking assumptions and defines new virtual inter-networking paradigms. Typical Virtual inter-networking involves three types of functional elements, namely virtual NICs, virtual network elements, such as L2 switches, and virtual to physical packet flow. Virtual NICs are presented as an emulated device or SR-IOV mapped PCI virtual function. Virtual Network elements and flow management are typically exposed as a \u201cVirtual Switch.\u201d","Traditionally, non-virtualized server-side switching has four layers. The first layer is a core layer that handles Layer-2 (L2) switching backplanes. This includes storage (through director switches) and server network switches. L2 switches are where a server network interface card (NIC) connects. The second layer is an aggregation layer that includes an aggregator switch that takes care of distinct L2 switch inter-connection. The third layer includes control functions for ACL, VLAN configuration, and the fourth layer includes Layer-4 through 7 switches for load balancing, address translation, firewall, BI\/DPI functions etc. In a nut-shell, each physical server and applications running on those servers are bonded to 1 or more NIC cards, NICs connect to L2 or L3 or L4-L7 switches for layered internetworking operations.","The virtualized switching plane plays a major role in the convergence of existing core physical inter-networking layers with new inter-VM networking abstractions. A smoother transition to virtualization based inter-networking warrants proper \u201cplumbing\u201d of physical inter-networking functions with a virtual machine layer. Ethernet switch networking vendors are providing external \u201cVirtualization-aware\u201d switching solutions. Most of these exist, however, as an external switch. On the other side, NIC card vendors are implementing in-hardware virtualization assists such as virtual machine device queues (VMD) or single-root I\/O virtualization (SR-IOV) for virtual machine (VM) assigned data flow and IEEE 801.2 layer-2 switching capabilities. Although few proposals have been made to make \u201cEdge Switching\u201d seem more attractive for next generation data centers including hints of leveraging NIC features for TSO (TCP Segmentation Offload), checksum\/GRE\/IPSec offloading, these proposals do not elaborate on techniques on just how to leverage these \u201coffloaded\u201d features.","In accordance with an embodiment, a data processing system includes a processor, a memory, and an interface port configured to be coupled to a hardware network interface device. The processor is configured to run a process that maps network switching functions of each of a plurality of virtual machines to the hardware network interface device.","The foregoing has outlined rather broadly the features of an embodiment of the present invention in order that the detailed description of the invention that follows may be better understood. Additional features and advantages of embodiments of the invention will be described hereinafter, which form the subject of the claims of the invention. It should be appreciated by those skilled in the art that the conception and specific embodiments disclosed may be readily utilized as a basis for modifying or designing other structures or processes for carrying out the same purposes of the present invention. It should also be realized by those skilled in the art that such equivalent constructions do not depart from the spirit and scope of the invention as set forth in the appended claims.","The making and using of the presently preferred embodiments are discussed in detail below. It should be appreciated, however, that the present invention provides many applicable inventive concepts that can be embodied in a wide variety of specific contexts. The specific embodiments discussed are merely illustrative of specific ways to make and use the invention, and do not limit the scope of the invention.","In a prior art nominal or non-virtualized machine, when an application sends out data, the data is sent through the kernel or user space of the operating system. A driver then performs an I\/O control operation that fills buffers into the NIC's queue, and the NIC's queue essentially takes those buffers, and the network processor running pushes them out to the network. On the other hand, in a virtualized scenario, a similar scenario exists, since one of the purposes of virtualization is to consolidate an operation, yet keep the sanctity of this operation in tact. When the DMA operation occurs in a prior art system, a parallel virtualization occurs, in which the driver is modified within the virtual machine to essentially map real memory used by the network process running on the NIC. A piece of that memory is exposed directly though a grant mechanism to manage the domain.","In an embodiment implementation, the grant mechanism is bypassed such that queues that are represented by these columns and rows are essentially the addresses associated with those, and are directly fixed up through this control plane set up mechanism. Therefore, when the network driver performs a TX\/RX activity, it directly goes to the network processor's view of the queue.","In an embodiment, a virtual switch approach creates a virtual switch abstraction within hypervisor layer by uniquely arranging hardware-based L2 offload functions and extends manageability for virtual machine (VM) inter-networking. Embodiments of the present invention include mapping networking hardware, such as network interface cards (NICs), to support switch functions as a virtual switch interface, as well as the ability to partition control and data plane activities in hypervisor and privilege guest OS running on top of systems including, but not limited to Huawei's Accelerated Netpath. In one exemplary embodiment, a Xen Hypervisor and a dom-0 Linux as privileged guest is used, however, it should be appreciated that many embodiment solution are hypervisor agnostic, hence other hypervisors could alternatively be used.",{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 1","b":["100","108","102","106"]},"Fast path  is kept simple and implemented in kernel space . It is responsible for simple packet forwarding as per MAC learning table. The data path is platform specific but implemented inside the control domain's kernel component. Open vSwitch primarily targets Linux based virtualization platform and hence, emulated Virtual Distributed Ethernet and Linux Bridge interface functions are implemented as easy \u201cdrop-in\u201d candidate for existing Linux Bridge or VDE implementations. Open vSwitch implementation remains flexible of leveraging Hardware Accelerated Forwarding in VMDQ capable NICs by offloading data path to HW, however no specific techniques are proposed to date. The block diagram of  shows Open vSwitch architecture in Xen configuration using Xen hypervisor . Here, the vSwitch replaces existing Xen bridge infrastructure in dom-0  with user space and kernel mode modules.","The slow path constitutes configuration and connectivity management. The configuration interface resides in the management domain part of hypervisor (Xen dom-0  for example). Switch control functionality such as: ACL, ports profile\/mirroring (SPAN\/RSPAN), application of QoS policy per virtual interface, MAC learning and load-balancing over bonded interfaces is included. In addition to basic virtual port to VIF binding and remote configuration management, Open vSwitch aggregates a switching plane for the overall virtual environment. Slow path control  also implements remote configuration for external flow management protocols such as OpenFlow, NetFlow, sFlow, as well as, remote manageability protocols such as SNMP.","Open vSwitch implements fast path data  forwarding in kernel-space  of the Xen dom-0 . This includes a flow table data structure used for per-packet lookup, modification to real world binding, and a forwarding function. It also maintains a counter for forwarding table entries. Fast path code is about 3000 lines of code and deliberately kept smaller, in some cases, to minimize overheads in packet forwarding. Some proposals, such as those described in Nicera, , ACM PRESTO 2010, Nov. 30, 2010, which is incorporated by reference, herein, stipulates pushing of fast path in the silicon. Such an approach would have slow path (in s\/w and in management domain) and would program data path forwarding silicon to directly perform packet TX\/RX activities with corresponding VMs. The Intel\u00ae DPDK (Data Plane Developer Kit) proposes such a move with Bearcreek platform, which integrates packet forwarding with network I\/O virtualization aware silicon.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 2","b":["150","150","150"]},"The hypervisor embedded vSwitch includes two sub-systems. One is a Cisco\u00ae VEM \u2014a data plane switch software component similar to Open vSwitch, and the other is Virtual Supervisory Module (VSM) . VEM  runs in the hypervisor context and enables switching and security features for directly hosted virtual machines. VEM  also provides an uplink to rest of the physical network. VEM  is responsible for internetworking between VMs. VSM module  is standalone software hosted either in an external virtual or physical appliance. Its responsibilities include switch VEM (data plane) management, monitoring, configuration and diagnostics. Virtual Interfaces (VIFs)  bonded to vNICs are exposed in a para-virtualized manner to the VMs  for faster TX\/RX packet transfers. VEM , however, is a software solution without explicit HW offload support from NIC.","Regarding the Nexus 1000V system, an edge switch implementation on a Para virtualized I\/O gets good throughput with small number of guests. With an emulated NIC to the VMs, end-I\/O latency is drastically reduced. In both cases, I\/O throughput decreases rapidly with the number of guests and I\/O latency becomes worse affecting core fast-path packet forwarding, and does not scale with incremental guest count.",{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 3","b":["200","202","204","206","210","102"]},"In an embodiment, each user VM  has NIC driver  coupled to VM packet queues  in virtual L2 switching plane . Domain-0 has a NIC driver  and IVSD control plane operation block  which are coupled to VM packet queue . Hypervisor  serves as an interface between VM packet queues  and  and packet queues  present in physical L2 switching plane . Hypervisor  has extended page table (EPT) , fast path data driver , fast path device access block  and IVDS data path instance . Physical L2 switching plane  also has queue select functionality , pool select functionality , MNG filter , VLAN filter , and L2 filter . Physical L2 switching plane  further contains switching function . In an embodiment, virtual L2 switching plane  is implemented on a server and physical L2 switching plane is implemented in hardware interfaced to the server. This hardware can be implemented, for example in a NIC. In one embodiment the NIC is an Intel 82599, however, in alternative embodiments, other NIC hardware can be used.","In an embodiment, control operations for physical NIC views include a virtual NIC mapping PCI configuration space registers setting, an interrupt configuration, and MMIO\/DMA activity. Control plane  for the switch controller includes programming packet switching registers as per controller capability. These include setting registers for packet switching, L2 filtering, L3-L4 five-tuple filters, packet pool selection. In one embodiment, an Intel\u00ae 82599 GBE controller with HW offload features for L2 packet switching is used. Packet switching programming is done following the manufacturers instructions.","In an embodiment, the following hardware specific instructions are made:\n\n","In an embodiment, control plane  is represented as a driver function in management domain (dom-0) 208. Furthermore, control plane  implements the creation and manageability of:\n\n",{"@attributes":{"id":"p-0039","num":"0048"},"figref":"FIG. 4","b":["300","300","302"]},"Stack  further has virtual switch access level , which includes V.VLAN Access. Included in this is tagging per host VLAN, vMAC per vNIC, vMAC function generation per physical MAC, and vNIC to vPort mapping. Level  also includes access and rules for data plane ACL, flow table, vPort pool, and vPort minoring. Lastly, API access level  includes API Access for V.VLAN parameters, IVDS instance life cycle, vPort to vNIC assignments, vNIC and Physical NIC line-speed, status and error, ACL, vPort mirroring, and SPAN\/RSPAN\/ERSPAN for port monitoring.","Regarding virtual VLAN considerations, in an embodiment, a one host Virtual VLAN is under complete ownership of a host control plane. A NIC feature of double VLAN, specifically, inner-VLAN tagging is used to take ownership of inner VLAN and use it as V.VLAN tag. The control plane is responsible for inserting this value in the packets. Peer V.VLANs hosted by external IVDS instances are registered for establishing packet forwarding and flow control between VMs belonging to an external V.VLAN. Hence, additional IVDS Control plane configuration functionality is developed to maintain V.VLAN configurations and trunking.","In an embedment, V.VLAN to VLAN operates in two modes. One mode is a piggy-back mode, which allows for a separation between physical and virtual VLANs, thereby keeping existing VLAN trunking largely unchanged. For example, one VLAN could service one or more V.VLANs such that V.VLAN manageability is seamlessly integrated into existing switch management backplanes. A second mode is an independent mode, which allows V.VLANs to operate independently of physical VLAN configuration and management. Such an embodiment allows the IVDS to use only one aggregator switch and its VLAN to control all V.VLAN trunks within a network. Details of V.VLAN to physical VLAN packet flow mapping is described hereinbelow.","Regarding virtual port considerations, in a manner similar to V.VLAN definition, virtual Port (vPorts) definition and management is another core responsibility of the control plane for some embodiments. This entails setting up vPort profiles, mirroring, and mapping vPort to physical port or to another vNIC. In some embodiments, vPorts can be added or deleted as connected component (physical port or virtual interface) fails or leaves the network. Some embodiment solutions assume that a physical NIC has offloading support for port mirroring for replicating network traffic per VLAN, or physical port. In some cases, NICs do not have a concept of V.VLAN and Virtual Ports, so mirroring of a virtual port or the entire V.VLAN traffic is implemented in the software and hardware, so offloading is not employed in some cases. In one embodiment, an addendum to the IEEE 802.1Q is used to accommodate in-server bridge\/switch V.VLAN behavior to accommodate real-life VM switching.","In one embedment, in-hardware switch and VM Queue assist functions are mapped. Here, the IVDS control plane is responsible for not only setting up and programming standard I\/O PCI configuration, interrupt vector assignments, MMIO\/DMA memory region setup functions for TX\/RX queue filters, but also IVDS instance creation, programming of registers for VLAN properties such as double-VLAN, VLAN groups, and an L2 filter, for example. Furthermore, the IVDS control plane can be responsible for RX switching including packet forwarding to pools and packet mirroring, as well as TX switching including VM to VM per V.VLAN packet forwarding.",{"@attributes":{"id":"p-0045","num":"0054"},"figref":"FIG. 5","b":["330","332"]},{"@attributes":{"id":"p-0046","num":"0055"},"figref":"FIG. 5","b":["334","336","338","340","342"]},"In an embodiment, a control plane API fa\u00e7ade is responsible for exposing remote manageability and distributed V.VLAN configurability, for example, a mechanism for programming inner VLAN feature for setting up V.VLAN affinity (i.e. how many number of peer V.VLAN can be registered with each host IVDS instance), getting IVDS instance information per physical NIC, getting and setting of vPort configuration information such as vPort to vNIC bindings, vPort rules, vPort Pools shared across peer IVDS, O&M access for statistical information about RX\/TX counters, maximum transmission units (MTU), error counters, and adding and removing of vPorts, vNIC vMAC configurations.  illustrates an embodiment IVDS API responsibility stack . In embodiment, APIs can be script  or application  compatible.","The distributed property of IVDS to include remote VM to V.VLAN is shown in . In some embodiments, a distributed IVDS configuration is used. This property of an IVDS instance is configured during a VM specific V.VLAN allocation. By default, all IVDS instances bear physical server and VLAN locale. This means that IVDS can be configured to inter-network VMs on same machine and with its own V.VLAN context. In a more advanced scenario, the IVDS can be configured across physical machines and include VMs in its V.VLAN context. In one embodiment, registration of pair {VM, vNIC} is performed as a part of VM commissioning enforced during VM boot or externally managed V.LAN allocations using VM Control Center application . In an embodiment, the IVDS control plane software maintains a table where {V.VLAN_ID, vMac, vPort, physical server MAC} bindings are retained. This information is used during packet forwarding and VM live migration scenarios. Note that there are {V.VLAN\u2192VLAN, Host} per VM possibilities in a distributed IVDS configuration. One embodiment approach suggests that all combinations could converge to single V.VLAN for ease of VM inter-networking. This embodiment case is described below.","In one embodiment, a single V.VLAN  is a part of multiple IVDS instances and spans multiple underlying VLANs  and , as illustrated in . Furthermore, IVDS on a host include VM from separate host (V.VLAN). Packets from VMs from a remote host have their own {V.VLAN, VLAN and physical MAC} values. To simplify deployments, VM control center  normalizes V.VLAN configurations to single VLAN per VM set and register V.VLAN value for a remote VM in the flow table. The IVDS then issues an add V.VLAN request so this becomes a number one configuration\u2014a single VLAN across physical VLANs and hosts.","In an embodiment, the IVDS data plane is responsible for all L2 packet switching: bridge packet ingress, forwarding, egress, and switch learning activities. In one embodiment, a logical plane to data plane is classified into a virtual (logical) networking plane and physical L2 networking plane, such that most of the data plane packet switching and V.VLAN packing responsibility is delegated to the hardware.","Regarding IVDS V.VLAN tagging, trunk, and switching behavior, an IVDS instance is created with affinity to a single IEEE 802.1Q compliant physical VLAN. This affinity includes a concept of Virtual VLAN or V.VLAN. In an embodiment, IVDS assumes hardware support for tagging VM-based virtual networks, also known as V.VLAN, instead of requiring external L2 network equipment to enforce virtual bridging (such as VEB). In some embodiments, IVDS data plane software is responsible for maintaining appropriate feature sets needed for V.VLAN programming and subsequent trunking between V.VLANs and V.VLAN to VLAN.","In one specific embedment, the IVDS data plane software uses inner VLAN tagging that is available on the 82599 NIC. The 82599 NIC supports a packet transmit\/receive mode where all packets have one additional VLAN tag in addition to regular tagging. The IVDS data plane software assigns a unique V.VLAN 12-bit tag value to per each IVDS instance. This value is packed along with packet Rx\/TX activity as a HW offload. In some embodiments, the IVDS explicitly handles RX packets with no V.VLAN tag even if the NIC is enabled to receive packets in such a mode. Such cases include, for example, flow\/priority control packets, and IVDS data plane takes appropriate measures to handle them gracefully.","Embodiment packet header  having V.VLAN packing on a TX frame is illustrated in . Header  has MAC address , outer VLAN designator , V.VLAN designator , L2 payload tuple  and CRC . In an embodiment, L2 payload tuple  includes variables vMAC, Protocol, src_addres, dst_address, src_port, and dest_port. This frame format can be used, for example, by the Intel 82599 NIC, or by NICs from other vendors. Alternatively, other formats and or L2 payload tuple variables can be used.","In an embodiment, V.VLAN trunking is ability for providing switch functionality across VMs within a V.VLAN and work in conjunction with V.VLAN to physical VLAN as well as physical VLAN to V.VLAN forwarding plane. One embodiment IVDS data plane implementation provides appropriate software handlers to channel above transitions. V.VLAN trunking can co-exist on top existing bridging facilitated by IEEE 802.1Q shown in . In an embodiment, a V.VLAN topology layer and a relay (egress, ingress and forwarding) layer is used on top of the existing an IEEE 802.1Q VLAN bridging function to support Virtual VLANs. Given that flow table formats are network vendor proprietary in many cases, in one embodiment, a Huawei specific flow-table format is used along with associated packet forwarding with addition of network virtualization considerations. Alternatively, other flow-table formats can be used, for example, pre-defined flow-table data structures used to store flow table entries exposed by specific NIC vendor implementation, such as additional per queue-filtering rules, number of rules per TX\/RX, active vs. passive flow division (in-HW flow-table entries and in-SW flow-table entries support) etc. More, specifically, a tuple identified as IVDS VLAN ID+{extended L2 payload} is used. In one embodiment, an extended L2 payload has six tuple bits for packet switching to the virtual network plane. The flow identification involves ability to forward physical ingress\/egress packets to or from appropriate VLAN to V.VLAN. In an embodiment, a two-step process is used.","In the first step, ingress packet (RX) switching from physical VLAN topology has a conventional frame format with V.VLAN payload information as part of L2 payload. Physical NIC L2 VLAN filter offload function strips the VLAN and present V.VLAN based frame to IVDS data plane instance. In some embodiments, the IVDS control plane software instance already establishes appropriate VLAN filter rules by programming 82599 NIC registers based on {V.VLAN\u2192VLAN} flow classification. This way, unintended {VLAN\u2192V.VLAN} is dropped from moving up the HW filter chain.  illustrates filter support within the 82599 NIC.","In the second step, Egress (TX) packets switching follow two possible paths. One path is vNIC\u2192vPort\u2192V.VLAN\u2192VLAN\/vPort based packet replication via physical NIC pools. The other path is vNIC\u2192vPort\u2192V.VLAN\u2192Loop back.","In embodiments, IVDS virtual packet to physical packet forwarding within an edge switch may involve the mapping of the following stages:\n\n","In an embodiment, packet forwarding is performed using IVDS virtual to physical forwarding  as shown in . First, VLAN lookup and filtering is performed by the physical switching plane in step . Next, in step , the virtual switching plane performs VLAN to V.VLAN L2 tuple logical lookup. Dotted line  represents the virtual to physical boundary. Next, VM tuple packet mapping and physical forwarding is performed in steps  and , respectively in the physical switching plane. In embodiments, the physical switching plane can be implemented by a NIC and the virtual switching plane is implemented by a program running on a server.","Regarding packet TX\/RX queues and network flow, fast path queue memory mappings are handled within a hypervisor driver in one embodiment. Both drivers see the device register set, control structures etc. In one embodiment, up to three context switches are used for RX\/TX DMA transfer, including, for example, hypervisor, kernel0 & user copy. In some embodiments, this behavior is consistent with what is described in ",{"@attributes":{"id":"p-0060","num":"0073"},"figref":"FIG. 11","b":["600","602","602","604"]},"In one embodiment, the processor can be used to implement various some or all of the units shown in . For example, the processor can serve as a specific functional unit at different times to implement the subtasks involved in performing the techniques of the present invention. Alternatively, different hardware blocks (e.g., the same as or different than the processor) can be used to perform different functions. In other embodiments, some subtasks are performed by the processor while others are performed using a separate circuitry.",{"@attributes":{"id":"p-0062","num":"0075"},"figref":"FIG. 11","b":["606","608"]},"Embodiment systems and methods can be used, for example, in VM Live Migration and network context preservation. For example, the workload balancing and some HA scenarios in Cloud IaaS environment imply hypervisors employing VM live migrations across physical networks. In a typical Live Migration, VM specific CPU, memory and some I\/O device \u201cslicing\u201d of the physical resources are carefully transitioned to maintain correct kernel and user space operational contexts and consistency. In some cases, however, network connections are reset due to live migration process. This includes resetting of vNIC to VLAN bindings. Embodiment IVDS implementations, however, cause minimal disruption to network forwarding connection state as VM network dependence (through vNICs and vMacs\/vPorts) is per V.VLAN context, and not physical VLAN, which could span physical servers even physical networks. Here, the V.VLAN context is preserved for a specific migrating VM similar to preservation of compute resource contexts. This is because, an IVDS instance on a source physical server (where VM is hosted) can ensure vMac, which gets appropriately transferred to target physical server slave-IVDS instances that ensure the V.VLAN context across physical networks. As such, an IVDS port to vNIC connection is re-established before the VM compute context is restored. This prior restoration of IVDS vMAC context will cause the VM network stack to re-establish a network link as it happens with a physical machine when a network cable is removed and plugged in. Such an embodiment use case leverages \u2018single V.VLAN\u2019 normalization performed as part of VM network planning activity.","Furthermore, embodiment systems and methods can be used in distributed, Virtualization-aware Network Architectures. Limitations with current VLAN considerations will be exposed as scaling of VMs per physical host pushes to the limit and VM inter-networking becomes more real-life than just additional requirement on top of existing VLAN. Embodiment IVDS systems and methods and the concept of V.VLAN extends the number of virtual VLANs by (2), which produces a very large tagging limit. Some embodiment IVDS V.VLAN schemes not only facilitate physical locale-independent inter-VM switching, but also extend current \u201cnetwork groups\u201d multi-tenancy supported by VLANs through IEEE 802.1Q and 802.1QinQ.","With regard to analytics & security platform for virtualized environments, embodiment IVDS systems and methods through the exposed API's can be a platform for hosting security as well as analytics mechanisms such as DPI\/BI within virtualized environments. Here, physical network plane security features such as intrusion detection, packet inspection are extended and are moved-up the stack in the virtualized environments. Furthermore, cloud analytics is another area requiring platform presence for virtualized networking plane created by Cloud IaaS.","Embodiment IVDS systems and methods can be used to extend the power of consolidation and isolation popularized by Server Virtualization to physical L2 switching plane. Some embodiment IVDS Scheme is simple enough to run on an existing IP network and is less intrusive to physical network site planning. Embodiment IVDS systems and methods enable a packet switching architecture for VM enabled environments on top of existing HW virtualization offloads for networking features provided by Intel\u00ae NICs or Intel\u00ae DPDK or Intel's next generation Bearcreek\/Forestcreek data plane platforms or other platforms. Furthermore, an embodiment modification to the IEEE 802.1Q VLAN standard to allow for the inclusion of Virtualized VLANs can facilitate the extending the reach of a VLAN reach into a Virtualized Network.","In an embodiment, Virtual VLANs (V.VLAN) methods and techniques are used to isolate Virtual Machines at network layer-2, maintaining this isolation regardless of physical hardware and the locale of the Virtual Machines. In some embodiments, these V.VLANs use a Ethernet frame tagging technique that embodies a distributed V.VLAN interface using inner-VLAN tagging support by NIC such as Intel 82576\/82599. In some embodiments, modified Ethernet frame Egress\/Ingress operation is used on-top of existing IEEE 802.1Q standard for VLAN. Furthermore, some embodiment V.VLAN create an L2 fabric between Virtual and Physical network boundaries using a flattened view of Layer-2 network without modification of existing layer-2 switches, for example, in a datacenter.",{"@attributes":{"id":"p-0068","num":"0081"},"figref":"FIG. 12","b":["700","702","704","706","708","710","712","714","716","718","700","700"]},"In an embodiment, a data processing system a data processing system includes a processor, a memory coupled to the processor, and an interface port configured to be coupled to a hardware network interface device, wherein the processor is configured to run a process that maps network switching functions of each of a plurality of virtual machines to the hardware network interface device. In an embodiment, the processor is further configured to run the plurality of virtual machines. In some embodiments, the process that maps network switching functions is a hypervisor that, for example, can transfer data between packet queues associated with each of the plurality of virtual machines, and packet queues within the hardware network interface via the interface port. The hypervisor may include a fast-path data driver coupled to an in-server distributed virtual switch (IVDS), and the fast-path data driver may be coupled to the packet queues associated with each of the plurality of virtual machines. In some embodiments, the IVDS is configured to input and output data to the packet queues within the hardware network interface via the interface port. In some embodiments, the system further includes the hardware network interface device, which can be implemented using, for example, a hardware network interface device is a network interface card (NIC). In embodiments, switching functions of the virtual machines are offloaded from a processor of the server, and network traffic of the virtual machines are isolated from one another.","In some embodiments, the processor is further configured to run a control plane operation for the hardware network interface device. The control plane may be configured to set registers that control functionality of at least one of packet switching, level 2 filtering, and packet pool selection on the hardware network interface device. In some cases the processor is further configured to tag data packets with a virtual VLAN tag.","In an embodiment, a hardware network interface device includes a first interface configured to be coupled to a sever via a server interface, and a plurality of transmit and receive queues configured to exchange data with a data plane running on the server a computer interface via the server interface. The hardware network interface device can be configured to perform a plurality of network switching functions that are controlled by the server via the server interface. In some embodiments, the plurality of network switching functions is controlled a control plane running on the server. The switching functions may include at least one of, TX\/RX packet switching, L2 packet filtering, L3-L4 tuple filtering, and packet pool selection. In some embodiments the hardware network interface device may be implemented by a network interface card (NIC). Some embodiment hardware network interface device may also include a L2 filter circuit, and a VLAN filter circuit.","In some embodiments, the hardware network interface device is further configured to perform a plurality of network virtualization functions including at least one of virtual machine TX\/RX direct memory access queue and MSI per queue support, single root I\/O virtualization\/VF PCI Virtual Functions support, and virtual local area network (VLAN) tagging and validation per virtual machine.","In an embodiment, a method of operating a server includes running a process on a processor that maps network switching functions of each of a plurality of virtual machines to a hardware network interface device via an interface port. The method may also include running the plurality of virtual machines on the processor. The process that that maps network switching functions may include running a hypervisor. In some embodiments, the method also includes transferring data between packet queues associated with each of the plurality of virtual machines, and packet queues within the hardware network interface device via the interface port.","In an embodiment, the method also includes running a fast-path data driver transmitting and receiving data to and from the packet queues associated with each of the plurality of virtual machines, and transmitting and receiving data to and from the packet queues within the hardware network interface via the interface port. In some embodiments, the transmitting and receiving data to and from the packet queues associated with each of the plurality of virtual machines may be performed by a fast path data driver operating on the processor, and the transmitting and receiving data to and from the packet queues within the hardware network interface via the interface port may be performed by an in-server distributed virtual switch (IVDS) operating on the processor in communication with the fast path data driver.","In an embodiment, the method also includes running a control plane to control parameters on the hardware network interface device via the interface port. Running the control plane may also include controlling functionality of at least one of packet switching, level 2 filtering, and packet pool selection on the hardware network interface device. In some embodiments, the method further includes running a process on the processor that tags data packets with a virtual VLAN tag.","In an embodiment, a method of operating a server system includes loading a control plane process, instantiating a plurality of virtual machines, creating a virtual port configuration for each of the plurality of virtual machines, and mapping network switching functions of each of a plurality of virtual machines to the hardware network interface device via the interface port. In some embodiments, the server includes at least one processor, a memory, and an interface port configured to be coupled to a hardware network interface device.","In an embodiment, the method also includes creating a virtual MAC pool, which may includes creating random MAC addresses for the plurality of virtual machines. In some embodiments, the method further includes the control plane running an API that receives virtual port (vPort) configuration information from a VM switch control center. The vPort configuration information may include at least one of vPort to vNIC bindings, vPort rules, vPort Pools shared across peer in-server distributed virtual switches (IVDS), operations and maintenance (O&M) access for statistical information about RX\/TX counters, maximum transmission units (MTU), error counters, information pertaining to adding and removing of vPorts, and vNIC vMAC configurations. The control plane may further register peer virtual VLANs (V.VLANs) hosted by an external in-server distributed virtual switch (IVDS). In some embodiments, the V.LAN operates in a piggy-back mode maintaining separation between physical and virtual networks, while in other embodiments, the V.LAN operates in an independent mode in which the V.VLAN operates independently of physical VLAN configuration and management.","In some embodiments, the V.LAN isolates the plurality of virtual machines at network layer-2. The isolation of the plurality of virtual may be maintained regardless of physical hardware and local of the plurality of virtual machines. In an embodiment, the processor tags data packets with a virtual VLAN tag. The virtual VLAN tag may be implemented as an extension to an IEEE 802.1Q packet.","In an embodiment, a method of operating a hardware network interface device for offloading network switching functions of a plurality of virtual machines running on a server includes receiving configuration data from the server, exchanging network data of the plurality of virtual machine with a data plane of the server, performing network switching functions on the network for the plurality of virtual machines based on the received configuration data, and performing a network virtualization functions. In embodiments, network traffic of the plurality of virtual machines is isolated from each other.","Advantages of embodiments that offload processing functions related to switching include the ability to save CPU resources. Offloading processing functions can lead to lower power consumption, or to having more computing resources available, for example, to virtual machines. A further advantage includes the ability for embodiment systems to scale with incremental guest count because VM scalability is directly proportional to underlying scalability of compute and network hardware, and the ability of embodiment proposed techniques to map guest to HW functions without management domain's (dom-0) interference. Furthermore, some embodiment systems are able to leverage in hardware switch\/packet processing capabilities such as multiple HW TX\/RX Queues with reduced context switches in edge switch architecture thus improving I\/O scalability and maintain latency promise of Virtualized Infrastructure.","A further advantage of embodiments that allow for hardware offloading for L2 packet filtering, sorting, and\/or port mirroring is that the physical CPU is not required to consume extra power by running virtual switch code due to switch data plane code execution. Furthermore, embodiment systems that use L2 switch offload features scales with incremental guest count.","Further advantages of embodiments include the ability to offer industry grade switching capability and consolidate need of physical L2 switches for virtualized environments such as cloud IaaS, the ability to leverage network visualization assets in the physical NIC HW for switch data forwarding plane implementation, and the ability to partition hardware assets plane network TX\/RX activity and L2 switch offload features for virtualized infrastructures. Further advantages include the ability to create an edge-switch with unique distributed VM inter-networking concept of Virtual VLAN (V.VLAN) and reduce physical L2 switching dependency for the same. Furthermore, embodiments of the present invention can facilitate VM live migration as far as virtual networking is concerned by making it transparent to physical network dependencies.","While this invention has been described with reference to illustrative embodiments, this description is not intended to be construed in a limiting sense. Various modifications and combinations of the illustrative embodiments, as well as other embodiments of the invention, will be apparent to persons skilled in the art upon reference to the description. It is therefore intended that the appended claims encompass any such modifications or embodiments."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["For a more complete understanding of the present invention, and the advantages thereof, reference is now made to the following descriptions taken in conjunction with the accompanying drawing, in which:",{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 12"}]},"DETDESC":[{},{}]}
