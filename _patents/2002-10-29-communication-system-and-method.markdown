---
title: Communication system and method
abstract: The present invention relates to a communication system and method and, more particularly, to a fault tolerant network element for providing fault tolerant call connections in the event of a failure of, for example, a Gatekeeper or other part of a network. Calls set up across a network consume large amounts of resources both throughout the network and at the devices which form the end points of the network. Therefore, even though a call connection may be supported, in the event of the failure of a network element, it is often the case that there is an ungraceful failure or use of resources throughout the network. Accordingly, an aspect of the present invention provides a method for preserving a connection context at a first layer of a communication protocol; the communication protocol comprising a second, higher, signalling layer in which, in response to a switch-over from an active host to a standby host in the event of failure of the former, the connection is terminated in response to receipt of a signalling layer signal other than a disconnect or terminate signal.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07085960&OS=07085960&RS=07085960
owner: Hewlett-Packard Development Company, L.P.
number: 07085960
owner_city: Houston
owner_country: US
publication_date: 20021029
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND TO THE INVENTION","SUMMARY OF INVENTION","DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["The present invention relates to a communication system and method and, more particularly, to a high availability or fault tolerant network element.","With the ubiquitous nature and ever increasing popularity of the Internet and with the use of the Internet to support, for example, telephony services, known, as IP telephony services or voice over IP (VOIP), there is a need to provide high availability network equipment to support such voice services. A high availability service aims to provide service continuity in that the telephony service is available both before and after a system failure. A break in the support of the voice service of, for example, 300 milliseconds will be perceivable by a human and will degrade the quality of the service of the link. These high availability systems are implemented using gatekeepers, as is known within the art.","In the case of failure of the gatekeeper typically all calls are torn down. This results in all parties being unable to communicate without prior notice. Clearly such an abrupt disruption is undesirable","Suitably, it is known within the art to provide fault tolerant H.323 gatekeepers in which a gatekeeper function is supported using active and stand-by hosts. The active gatekeeper manages the call set-up, tear-down and other telephony functions for all associated calls. The stand-by gatekeeper is ready to assume the role of active gatekeeper in the event of a fault with the current active gatekeeper.","To implement call preservation using a connection-oriented protocol would require providing a highly available protocol stack. Conventional wisdom directs one skilled in the art, when contemplating implementing a highly available system, to design and develop software that preserves a protocol stack. Providing such a highly available protocol stack, which includes connection layer information, such as IP and TCP layers, and signalling layers such as H.323 or Q.931 and other application layers represents an enormous design and development overhead during the production of the system. Additionally, the amount of system resources required to preserve such a protocol stack would reduce the performance of the system since a significant amount of memory, data processing and CPU power would be consumed during any such protocol stack preservation.","It is an object of the present invention at least to mitigate some of the problems of the prior art.","Accordingly, a first aspect of the present invention provides a method of processing a data connection for exchanging data between two communication devices within a fault tolerant apparatus having an active host and a stand-by host; the active host being arranged to support a communication protocol stack comprising at least a first protocol layer, providing connection management signals, for establishing and managing the data connection between the two communication devices, including a disconnect signal for terminating the connection, and a second protocol layer having an associated connection context; the first protocol layer being at a higher level within the communication protocol stack relative to the second protocol layer; the method comprising the steps of","establishing a data connection between the two communication devices using at least the connection management signals of the first protocol layer and establishing a connection context for the second protocol layer;","replicating the connection context of the second protocol layer to the stand-by host;","implementing the communication stack protocol on the standby host in response to detection of an event associated with the active host;","receiving, at the standby host, from one of the two communication devices, an associated connection management signal other than a disconnect signal; and","issuing to at least one of the two communication devices a disconnect signal in response to receipt of the associated call management signal.","Advantageously, since the call traffic, which is maintained using a transport mechanism such as TCP\/IP, and the call set-up, tear-down and other signalling etc. are carried by different channels or connections, having established a call connection, the next signal expected to be received by the fault tolerant apparatus or network element is very likely to be a tear-down signal. Therefore, the likelihood of inadvertently tearing down a call which should have remained established, outweighs the additional processing burden that is ordinarily required to preserve a call.","Still further advantages of the present invention reside in the reduced system resources that are required to provide protocol stack preservation and, in particular, in preferred embodiments, H.323 high availability.","Since only a portion of the protocol stack is preserved, that is the connection layer data is preserved, while the signalling layer information is not preserved, the system resources are not consumed by attempting to preserve the siganlling data following a failure of a host. Accordingly, the performance of the system is improved in terms of, for example, the number of calls per second that can be made or the number of simultaneous calls that can be supported.","Terminating the calls, following a switch-over from an active host to a standby host, upon receipt of the next call management signal, allows one skilled in the art to provide a system having a highly available protocol stack. Still further, since each of the end-points are informed of the termination, the network resources and system resources are freed in an orderly manner, without the need to rely upon time out processes.","It will be appreciated that typically an ungraceful call or connection termination results in network and end-point resources being consumed for longer than they are needed. This excessive use or tying up of network resources leads to a decrease in performance of the network and the connection management apparatus.","Hence, preferred embodiments of the present invention provide a method further comprising the step of terminating the data connection at at least one of the two communication devices in response to receiving the disconnect signal issued by the fault tolerant apparatus.","The receipt of a disconnect signal causes the end-points to free the resources that were used to support the data connection. Furthermore, the resources at the fault tolerant apparatus can also be released. This allows the performance of the fault tolerant apparatus to be improved.","Preferably, an embodiment provides a method in which the step of establishing a connection context comprises storing data relating to at least one of a signalling connection between the apparatus and at least one of the two communication devices and the data connection between the two communication devices.","It will be appreciated that, in the event of the failure of a network element which carries both the connection data and the signalling data, the call and the means of establishing and maintaining the call are lost. Accordingly, preferred embodiments provide a method in which the data connection between the two communication devices is supported using a network element other than the fault tolerant apparatus.","The present invention finds particular application in connection-oriented protocols. Suitably, an embodiment provides a method in which the first protocol layer is an H.323 layer. Furthermore, an embodiment provides a method in which the second protocol layer is a packet-based protocol layer such as, for example, a TCP layer.","A second aspect of the present invention provides a fault tolerant apparatus for supporting a data connection for exchanging data between two communication devices; the apparatus comprising","an active host and a stand-by host; the active host being arranged to support a communication protocol stack comprising at least a first protocol layer, providing connection management signals, for establishing and managing the data connection between the two communication devices, including a disconnect signal for terminating the connection, and a second protocol layer having an associated connection context; the first protocol layer being at a higher level within the communication protocol stack relative to the second protocol layer;","a first signal manager for establishing a data connection between the two communication devices using at least the connection management signals of the first protocol layer and establishing the associated connection context for the second protocol layer;","a connection data replication module for replicating the connection context of the second protocol layer to the stand-by host;","a second signal manager for implementing the communication stack protocol on the standby host in response to detection of an event associated with the active host;","a receiver for receiving, at the standby host, from one of the two communication devices, an associated connection management signal other than a disconnect signal; and","a transmitter for issuing to at least one of the two communication devices a disconnect signal in response to receipt of the associated call management signal.","A further aspect of the present invention provides a computer program element comprising computer program code for implementing a method or system as described herein. A still further aspect of the present invention provide a computer program product having a computer readable storage medium having stored thereon the above-described computer program element.","Referring to  there is shown a communication system  comprising first  and second  H.323 terminals or end points. The end points  and  may be, for example, IP-telephones or computers, that is, the H.323 terminals can either be a PC or a stand-alone device running an H.323 stack or application. The end points  and  are connected to an IP network . The IP network  comprises at least two gatekeeper hosts  and  for supporting a gatekeeper. The gatekeeper hosts are operated in active and stand-by modes. Preferably, the gatekeeper is an H.323 Gatekeeper that is used to establish an IP call or connection  between the end points  and .","Each of the end points  and  has an application  and  that controls the IP telephony functions of the end points  and , that is, each have an H.323 application.","An end point or H.323 terminal provides real-time, two-way communication with another H.323 terminal, Gateway or Multipoint Control Unit (MCU). Any such communication consists of control, indications, audio, video pictures, and\/or data between the terminals.","As is known within the art, the call control functions that set-up, tear-down and otherwise manage the call connection  are routed and processed by the gatekeeper using the active gatekeeper host . In the event of failure, for whatever reason, hardware or software, of the active gatekeeper host , the stand-by gatekeeper host  assumes responsibility for call connection management by providing supporting gatekeeper functionality. However, as is known within the art, all calls that are currently in progress, that is, all calls that were currently managed by the gatekeeper running on the active gatekeeper host , at the point of failure, are lost. Any further established calls are handled by the gatekeeper running on the stand-by gatekeeper host  which, in effect, becomes the active gatekeeper host.","The end points interact with the gatekeeper and each other via respective communication stacks  and . The communications stacks comprise Q.931 layers  and , TCP layers  and  and IP layers  and . The operation of the various layers  to  of the respective communication stacks  and  are well known within the art.","It will be appreciated that the call management signalling and the data exchanged between the end points  and  are conveyed via separate connections. The call management signalling is conveyed by links or connections , ,  and  with the active and stand-by gatekeeper hosts  and  whereas the data packets exchanged between the end points  and  are carried by a separate connection . Essentially, the gatekeepers of a network are used to admit an end point to the network and to then establish or at least assist in establishing a connection between the end points. It will be appreciated that a gatekeeper is an H.323 entity within the network  that provides address translation and controls access to the network for the end points. The end points are also known within the art as H.323 terminals. Additionally, the end points may include Gateways and MCUs. The gatekeepers may also provide other services to the end points etc such as bandwidth management and the location of Gateways.","Referring to  there is shown schematically a signalling diagram  of the signals that are exchanged between the end points  and  and the active  and stand-by  Gatekeepers to set-up and tear-down a call.","To establish a call or connection the first end point  issues an admission request signal  to the gatekeeper running on the active gatekeeper host . The gatekeeper of the active gatekeeper host  replies with an admission confirm command signal . The admission request and admission confirm signals are exchanged using RAS channels. In response to receipt of the admission confirm signal , the end point issues a Q.931 set-up signal  and \u2032. that is routed via the gatekeeper running on the active gatekeeper host  to the second end point . It will be appreciated that H.225 contains a subset of Q.931. The second end point  replies with a Q.931 call proceeding signal . Also, the second end point  issues an admission request signal (ARQ)  to the gatekeeper running on the active gatekeeper host. The gatekeeper running on the active gatekeeper host  responds with an ACF signal . In response to receiving the ACF signal , the second end point  issues a Q.931 connect signal  to the gatekeeper running on the active gatekeeper host , which forwards a corresponding connect signal \u2032 to the first end point .","Either end point may terminate a connection with the other end point by issuing a disengage request or disconnect signal . It can be seen in the example shown that the first end point  has issued a disconnect signal . The disconnect signal is received via the gatekeeper running on the active gatekeeper host , which then forwards a corresponding signal  to the second end point.","It will be appreciated by those skilled in the art that the signalling which takes place between the first and second end points  and , via the gatekeeper running on the active gatekeeper host , is to establish a VOIP or other data connection between the end points via some other transport mechanism such as TCP\/IP or RTP.","Still referring to  assume that the gatekeeper running on the active gatekeeper host  fails at some point in time. The failure may be attributed to failure of the gatekeeper software or a software or hardware failure of the active host on which the gatekeeper is running. At that point in time a hand-over process  is instigated such that the current gatekeeper running on the active gatekeeper host , as a consequence of some form of failure, no longer functions as such. The stand-by gatekeeper host , in the event of any such failure of the active gatekeeper host , becomes the current active gatekeeper host by running a gatekeeper function. Within the prior art, in the absence of any IP address migration, described in greater detail hereafter, all calls that were currently supported by the gatekeeper running on the gatekeeper host  are lost.","Referring to  there is shown a communication system or fault tolerant apparatus  in accordance with a first embodiment of the present invention which can be used to realise the gatekeeper function using active  and stand-by  gatekeeper hosts as shown in . The network element  comprises an active H.323 gatekeeper host  providing gatekeeper functionality, that is, running a gatekeeper, and a stand-by H.323 gatekeeper host . Each of the active  and stand-by  gatekeeper hosts have an H.323 stack for supporting call set-up, call tear-down and implementing other call management functionality with the end points (not shown) and for exchanging data between the gatekeeper hosts. Each of the H.323 stacks  and  comprise a Q.931 layer  and , a call controller layer  and  and packet transport layers which, in the preferred embodiment, are a TCP layer  and  and an IP layer  and . The active gatekeeper host  maintains connection details  that relate to pending call connection. Similarly, should the stand-by H.323 gatekeeper host  need to support the gatekeeper functionality by becoming the active gatekeeper host, the standby gatekeeper host  also maintains a list of pending call connections  for all calls that were set-up or established before a switch-over between the active  and stand-by  gatekeeper hosts.","Furthermore, the active gatekeeper host  ensures that all data  related to the pending connections for which the active gatekeeper host  has responsibility are replicated and transferred to the stand-by gatekeeper host  so that the management of those pending calls can be assumed by a gatekeeper launched on the stand-by gatekeeper host  in the event of switch-over.","It will be appreciated that the H.323 terminals should, preferably, support the following functionality:","H.245 for exchanging terminal capabilities and the creation of media channels;","H.225 for call signalling and call set-up;","RAS for registration and other admission control with a Gatekeeper; and","RTP\/RTCP and\/or TCP\/IP for sequencing audio and\/or video packets.","To the extent that audio and\/or video packets are exchanged via the end points  and , those end points should preferably support the G.711 audio CODEC. Optional components include an appropriate video codec, T.120 data-conferencing protocols and MSU capabilities.","With further reference to , it will be appreciated that the gatekeeper, preferably, performs a call-signalling routing function in which the end points  and  send call-signalling messages to the gatekeeper, which the Gatekeeper then routes to an appropriate destination end point. It will be appreciated that routing calls via a gatekeeper improves the performance of the network  as a whole, as the gatekeeper can make routing decisions based on a variety of factors such as load balancing among Gateways etc.","A preferred embodiment of the present invention preferably uses IP address migration  and TCP\/IP context preservation between the active gatekeeper host  and the stand-by gatekeeper host, that is, to ensure that the context is replicated at the stand-by gatekeeper host  to support call preservation. The IP address migration  and the TCP\/IP context preservation manifests itself in the pending connections data  and .","The replicated call pending data  is stored in an identifiable manner within a predetermined region or file  of the stand-by gatekeeper host. It will be appreciated that the replicated data includes at least call information for two sockets, that is, one for each call leg or connection to the end points.","In the event of failure of the active gatekeeper host , since the IP addresses were migrated, to the stand-by gatekeeper host , any further call signalling such as RAS, H.225 or H.245, received from an end point will be directed to and processed by the gatekeeper launched on the recently promoted stand-by gatekeeper host , in effect, the stand-by gatekeeper host  becomes the active gatekeeper host.","If the recently promoted stand-by gatekeeper host  receives call set-up signals to establish a new connection between identified end points, the call processing continues in the conventional manner and a connection is negotiated between the end points (not shown) using H.245. The call controller , upon receiving a request for a new connection, adds to the pending connections data  an appropriate file descriptor that is mapped to an available IP socket. The pending connections data  allows the call controller  to determine, in the event of receipt of further call signals from the end points, an appropriate course of action.","Upon receiving a further call signal for a call connection that has a corresponding file descriptor stored within the pending connections data , that call signal, whatever it may be, is processed in the conventional manner according to the nature of the call signal. It will be appreciated that any such new call signal may be, for example, a call forward signal or a tear-down signal.","However, if a call signal is received from an end point for which the currently active H.323 gatekeeper host  does not have a corresponding identifier stored within the pending connections data , the call controller  determines whether or not the recently received call signal relates to a call that was pending at the time of failure of the old active H.323 gatekeeper host  by examining the replicated pending connections data . If the call controller  determines that there is a match between a identifier contained within the replicated pending connections data  and the identifier associated with the most recently received call signal, then, notwithstanding the type of call signal, the call connection associated with that identifier is terminated. In effect, the gatekeeper running on the active gatekeeper host  issues disconnect signals to the end points associated with the call determined by the identifier that was contained within the replicated pending connections data . It will be appreciated that this will terminate the call connection between the two end points.","Referring to  there is shown a flow chart  of the processing undertaken by a currently active H.323 gatekeeper following a switch-over. At step  the currently active gatekeeper receives from an end-point a call control signal having an identifier. It is determined at step  whether or not the call control signal identifier corresponds to a pending call identifier or file descriptor stored in the pending connections data . If the call signal identifier matches one of the pending connections identifiers or file descriptors, effect is given to the received call control signal at step  via the gatekeeper issuing appropriate call control signals.","However, if it is determined at step  that the identifier does not match one of the pending connections contained within the pending connections data , it is determined at step  whether or not the call signal identifier matches one of the replicated pending connections stored within the replicated pending connections data . If there is no such match, the received call signal must be a new admission request or call set-up request and control passes to step  where effect is given to that received call control signal by the gatekeeper issuing appropriate call control signals.","If it is determined at step  that the call control signal identifier matches one of the replicated pending connections identifiers stored within the replicated pending connections data , the H.323 terminals associated with the connection to which the received call control signal relates are identified at step  and, at step , the gatekeeper running on the active gatekeeper host  issues call disconnect signals to at least one of and preferably all of the identified H.323 terminals that are party to the call. This will have the effect of all of the H.323 terminals terminating the connection to which the received call control signal relates. Having terminated a call connection, the replicated pending call connection identifier sstored within the old pending connections data  to which the received call signal relates are removed from that data .","Referring to  there is shown a signalling diagram  that illustrates the exchange between the H.323 end points  and  and the active and stand-by gatekeeper hosts  and . The first H.323 end point  transmits, using an RAS channel, an admission request signal  to the active gatekeeper . Assuming that the resources and bandwidth available at the active gatekeeper are sufficient, the active gatekeeper  replies with an admission confirm signal .","Upon receipt of the admission confirm signal at the H.323 end point , that end point transmits a set-up signal  to the active gatekeeper which forwards a corresponding set-up signal \u2032 to the second H.323 end point . In response to receiving the set-up signal \u2032, the second H.323 end point  transmits, using H.225 signalling, a call proceeding message  to the active gatekeeper. The gatekeeper running on the active gatekeeper host  forwards an appropriate call proceeding message \u2032 to the first H.323 end point . The second H.323 end point  then transmits an admission request signal  to the gatekeeper running on the active gatekeeper host . Again, assuming that sufficient resources are available, the gatekeeper running on that host  responds with an admission confirm signal . Having received the admission confirm signal , the second H.323 end point  transmits alerting and connect signals , in sequence, to the active gatekeeper . In response to receiving the alerting and connect signals , the gatekeeper running on the active gatekeeper host  transmits corresponding alerting and connect signals \u2032 to the first H.323 end point . After having set-up their H.245 logical channels the first  and second  end points can exchange data. Assuming that hand-over occurs at some point , it will be appreciated that the stand-by gatekeeper host  effectively becomes the new active gatekeeper host. Since the TCP context of the old active gatekeeper host  has been preserved and due to IP address migration, the connections between the first  and second  end points and the gatekeeper will not have been terminated. Therefore, the newly active or old stand-by gatekeeper host  can expect to receive further call control signals from either of the first  or second  H.323 end points.","Assuming that the newly active gatekeeper host  receives a further call control signal  from the first H.323 end point , in response to receiving that signal, no matter what type of call control signal it represents, the gatekeeper running on the newly active gatekeeper host  issues disconnect signals  and \u2032 to both the first  and second  H.323 end points. In response to receiving the disconnect signals  and \u2032, the first  and second  H.323 end points close their connections.","It can be appreciated that the signal received by the gatekeeper running at the newly active gatekeeper host  following the hand-over  or switch-over may be any type of signal such as a call forward signal or some other call control signal which is not a disconnect signal. However, the connection to which the received call control signal relates is terminated irrespective of the type of received call control signal . This course of action will on balance be acceptable to the end users since it is very probable that the next call control signal to be received by the gatekeeper would be a call tear-down or disconnect signal.","It will be appreciated that during the operation of the active and standby gatekeepers hosts only the TCP\/IP connections of one of those systems will be active at any one time, that is, only one of the gatekeeper hosts will be able to receive and issue call control signals. The TCP\/IP connections of the standby host are arranged so that they neither receive nor send call control signals.","A technique for preserving established TCP connections during switch-over from the active H.323 gatekeeper hosts  to the standby H.323 gatekeeper host  will now be described. As indicated above the call controllers  and  have a replication mechanism to exchange pending call connection data and status information between the active  and standby  gatekeeper hosts. In effect, the TCP context of the active gatekeeper host  is preserved and reflected at the standby gatekeeper host . It will be appreciated that the TCP context will vary dynamically as will the replication process to maintain a reflection of that TCP context at the standby gatekeeper host .","In the following, a TCP connection is considered to be preserved if the end point does not have to reopen that connection after a switch-over between the currently active gatekeeper host  and the standby gatekeeper host . The term \u201cactive TCP connections\u201d will be used to refer to gatekeeper connections that can send and receive packets, that is, they will refer to the connections of a currently active gatekeeper host. The term \u201cstandby TCP connections\u201d will refer to connections that can neither receive nor send TCP\/IP packets until activated, that is, until switch-over has been effected. Each call controller  and , in a preferred embodiment, performs both connection management and replication functions by means of a replication manager module  and  and a connection module  and .","The connection manager modules  and  each present an interface used by a corresponding call controller  and  to open, configure, retrieve and update the state of the TCP\/IP connections. The connection manager modules  and  shield the call controllers  and  from the details of the connection management functions. The connection manager modules  and  are also the preferred means of managing all preserved connections.","The replication manager modules  and  provide a replication service to enable the pending connections data  of the active gatekeeper host  to be replicated within the standby gatekeeper host .","Referring to  there is shown a state diagram  illustrating the states that can be adopted by the call controllers  and . Some of the illustrated states; namely the booting state , the synchronising state , the activating state  and the stopping state  are transient states. A process passes through those transient states only as an intermediary step before reaching a final stable state. The stable states are the active state , the hot standby state  and the cold standby state . It will be appreciated by those skilled in the art that a call or process can go down in any state. However, for the sake of clarity, state transitions to the down state are not shown in .","Referring to  there is shown a state diagram  that illustrates the different states a connection can have and the possible state transitions within both the active  and standby  gatekeeper hosts of those connections. The states and the transitions shown in  represent the states of the TCP connections from the point of view of the call controllers  and .","Each state of the connections can have the following properties attached to it:","P: when present in a state, indicates that the connection is a preserved connection (as opposed to a normal TCP connection, which does not support any TCP connection preservation extensions). All three states shown in  are preserved states.","A: when present in a state, indicates that the state is an active connection. An active state can carry out data transfer and has a special behaviour during a close operation as indicated by an F\/NF flag.","S: when present in a state, indicates that the state is a standby connection. No packets are sent over such connections even when the connections are closed.","F: when present in a state, indicates that the TCP connection is terminated on the network with a peer TCP connection whenever it is locally closed. When combined with the A indicator as in state , the connection acts like a normal TCP connection.","NF: when present in a state, indicates that the TCP connection is not terminated with a peer TCP connection whenever it is locally closed upon explicit request or upon the death of a process. The appropriate local socket is merely purged. This option has no effect if the remote TCP peer initiates the termination of the connection. In such a case, the connection is effectively closed whatever the current option value. When combined with the A indicator as in state , the connection is an active connection that has a corresponding standby connection with which it is synchronised.","On top of the Q.931 layer  and  are the active and standby gatekeeper applications. The active and standby gatekeeper host applications may have corresponding applications or processes such as, for example, billing applications. The applications are known as the active application  and the standby application  according to whether they are executing or resident upon the active  or standby  gatekeeper hosts respectively.","When the active application  starts and before the standby application  has started and is synchronised, all the preserved connections opened by that active application  are in the active state . If the active application  dies, the TCP layer  will close any connections established with the standby gatekeeper host  since there is no standby application to assume or takeover connection processing.","During the synchronisation phase (to be described in greater detail below) the standby gatekeeper host  creates preserved standby connections and replicates the connection state information from the active gatekeeper host . When the synchronisation phase has been completed, the active gatekeeper host moves all of its preserved connections to the state  to ensure that the preserved TCP connections are not closed upon failure or death of a process. This allows the standby call controller to assume responsibility for processing connections after switchover. If an application desires to close a connection, the state of that application reverts to state . It will be appreciated that each application which runs above the Q.931 level follows these transitions. The call controller, which is situated between the TCP\/IP level and the Q.931 level also follows these state transitions.","All standby connections are in state . When the standby connections are activated they are moved to state . Once a new standby system is restarted and synchronised, the standby connections can then be moved to state .","At the active gatekeeper, sockets are created using conventional socket calls including sockets( ), connect( ), bind( ), listen( ) and accept( ) calls. This is illustrated in ) which shows the interaction between the active application and the active TCP layer . The active call controller  manages the active connections . The majority of the information that needs to be replicated between the active  and the standby  gatekeeper hosts is maintained within the TCP layers  and .","Throughout the pendancy of a call connection, or the operation of the active gatekeeper host , any changes at the IP  and TCP  levels are dynamically replicated to the stand-by gatekeeper. However, the replication need not take place immediately upon the transmission or receipt of a packet. It may be preferable to replicate the TCP context at judiciously selected moments when a connection or the active gatekeeper host  is in a stable state. A connection state is deemed to be stable when no traffic is being processed by the connection (i.e. the connection is idle). A TCP connection  is considered to be idle by the application  or call controller  if there is no pending outbound data and no received data waiting to be read by the application  or the call controller . Such an idle connection can be preserved using the techniques described herein.","When the application  determines that the connection is stable (i.e. the connection is idle), the data reflecting the TCP context may be replicated to the corresponding standby host by retrieving the state of each connection from the TCP layer  and sending that state information to the standby application . The replication manager module  creates a socket, configures that socket to be a standby socket and updates the newly created socket with the connection state information received from the active application .","The standby application  (or call controller ) sends an acknowledgement to the active call controller  that the data has been received and replicated. The replicated data is stored in the replicated pending connections data . It can be seen that the above process is illustrated in ).","It will be appreciated by one skilled in the art that the connection state data is obtained from the TCP layer  via the call controller  and transmitted to the corresponding layer, that is, call controller , of the standby gatekeeper host  via a local LAN connection .","While awaiting receipt of a replication acknowledgement signal, the connection, at the active call controller , remains in state . Once the replication acknowledgement signal has been received from the standby call controller, the active call controller  configures the socket so that the connection is never closed by placing it in state  as shown in .","It will be appreciated that if the connection replication to the standby call controller fails, this will not affect adversely the active connections  at the active gatekeeper host . This has the advantage of increasing the speed of execution of the replication process since the active application  is not suspended while awaiting the replication acknowledgement from the standby application . However, in other circumstances, it may be preferable to await receipt of the replication acknowledgement signal  to ensure that the established connections  are only used by the application  when they are or have been preserved by the standby application .","When the active application  or call controller  needs to close an active connection , that connection must firstly be configured by setting the connection state to . It is only after such configuration that the active connection  can be terminated. The termination operation is then replicated to the standby application  or standby call controller  which also closes its corresponding standby connection . It can be seen that this process is illustrated in ).","If an active connection  is to be closed by one of the H.323 terminals or end points  or , the TCP layer processing proceeds as normal. The active application  replicates the close operation to the standby application . This process is illustrated in ).","If the active application  unexpectedly terminates, the IP address assigned to it is migrated by the call controller  and, more particularly, by the replication manager module , to the standby gatekeeper host  before the standby application becomes active.","While, in some embodiments, the active gatekeeper host  may have only one IP address, in preferred embodiments, the active gatekeeper host may run a number of active applications (not shown) each of which will have a corresponding or dedicated IP address that is used by the processes of those applications. It will be appreciated that the IP address of an application is only active on the active gatekeeper host  which has the corresponding active application . During switch-over, the IP address is migrated from one gatekeeper host  to the new active gatekeeper host . Hence, the IP address is deactivated on the old gatekeeper host  and activated on the new or active gatekeeper host . The IP address is only active on one of the gatekeeper hosts at any one time.","Techniques for transferring an IP address from one MAC address to another are well known to those skilled in the art. A description of such a technique can be found in, for example, U.S. Pat. No. 6,049,825, the contents of which are incorporated herein for all purposes.","It will be appreciated that the states at the newly active gatekeeper are synchronised with the IP address migration such that, during switch-over, the stand-by processes become active only after the appropriate IP addresses are active. Conversely, the active processes only become stand-by processes after the IP address has been deactivated on the other gatekeeper.","The same can be achieved either by appropriate communication between the call controllers and the applications or by arranging for the applications to check the IP address status before activating any stand-by connection. It will be appreciated that standard API calls are available to check the status of an IP address.","Upon the death of a process, all file descriptors associated with that process will be closed. As the replicated active connections were not set to terminate the connection with a peer in accordance with state , the TCP layer  will not signal to the end points that the connection has been closed.","A monitoring process is provided which monitors the state of all highly available processes. The monitoring process detects the failure of the active host and provides an indication of that failure to the stand-by gatekeeper host. Therefore, concurrently, the stand-by gatekeeper host , which has been notified of the failure of the currently active gatekeeper host  by the monitoring process waits until the replicated IP address has been activated. Once a replicated IP address has been activated, the corresponding stand-by connections are activated as listening connections. After activation, the connections will remain in state  until a new stand-by system is restarted and synchronised. The new stand-by system may be a new process running on the old gatekeeper host  or may represent a re-boot of the old gatekeeper host . This process is illustrated in ). In a preferred embodiment the processes shown in ) take place while the gatekeeper host  or the newly active application  is in the activating state  as shown in .","When a stand-by socket goes active, the TCP layer  determines whether or not it is still in synchronisation with its TCP peer . If the old active TCP connection, prior to switch-over, had received data since the last synchronisation point, the stand-by TCP layer  will be out of synchronisation. Synchronisation is undertaken as part of the TCP stack and is a part of the TCP protocol. A determination of whether or not data has been received since the last synchronisation point is made every time a new message is received. In such a case, the current TCP connection is lost as are the associated calls, which, in practice, amounts to a mere 1% of all calls.","In the case of a manual switch-over, that is, a switch-over that was not provoked by the death of a process, for example, in the case of preventative maintenance or to allow hardware and\/or software upgrades, the active application  or active call controller  deactivates all of its connections and assumes a stand-by status, while the stand-by application  and stand-by call controller  activate all associated connections and assume the roll of the active gatekeeper. Such a manual switch-over is schematically illustrated in ). In the preferred embodiment, this process takes place during the stopping state  as shown in .","It will be appreciated by one skilled in the art that sockets which are required to perform a listening function do not need to be preserved as they do not form part of an active connection. To accommodate listening sockets established by the active application  or the active call controller , the stand-by process application  can adopt at least one of two strategies. Firstly, the stand-by application  can re-create the listening socket when it switches to an active process state. This re-creation can be achieved by executing the socket function sequence: sockets( ), bind( ), listen( ) and accept( ). Generally, this approach is considered to be the safest and simplest. Alternatively, however, the stand-by process could create a listen socket and bind the newly created listen socket to any IP address (IP address=INADDR_ANY) and a specified port number. It will be appreciated that this approach would save the steps of re-creating the listening socket. However, the stand-by process would then have to handle the possibility of connection requests when it is still in stand-by mode for an IP address active on the other Gatekeeper .","If a TCP connection  is not idle at the time a switch-over occurs, the TCP connection  will be terminated and it will need to be re-established or re-created by one of the end points. Any such newly established connection will be processed as such by the gatekeeper running on the newly active gatekeeper host.","In a preferred embodiment an extended socket Application Programming Interface (API) is provided to allow the applications  and  and the call controllers  and  to control the connection properties, retrieve any connection states from the active gatekeeper host  and to replicate those connection states and properties at the stand-by gatekeeper host . This API may be conveniently implemented in the form of the connection manager modules  and  and the replication manager modules  and  of the call controllers  and .","Preferred embodiments consist of the additions to a standard HP-UX socket and related calls. In particular, the getsockopt( ) is extended to return the TCP state information required to build a similar connected\/established socket. This call can be invoked on an active or stand-by socket and is a read only operation that does not effect the socket or the connection. The same call is used to effect a transition from state  to  and visa versa.","The nature of the state information will vary according to the platform from which the gatekeeper hosts  and  are formed. The state information is selected to enable a stand-by socket to be up-dated with the state information to be used by the stand-by call controller  and\/or application , when activated, without a connection needing to be re-opened over the network .","The setsockopt( ) call is extended to enable resynchronisation of a stand-by socket with the TCP state information obtained from an active socket. This method should only be invoked on a stand-by socket and it effects all TCP layers. The setsockopt( ) call is performed after a socket( ) call to create a stand-by socket connection. It is invoked on an active connection to cause it to transition to a de-active state. Conversely, the setsockopt( ) can be invoked on a stand-by connection to cause it to transition to an active state.","Referring back to , in a preferred embodiment, the connection manager modules  and  maintain a record of all open connections  and their associated state information in a convenient place. The connection manager modules  and  can perform operations on multiple connections simultaneously, that is, they are able to close all connections, replicate all connections and activate\/deactivate all connections substantially simultaneously. The connection manager modules  and  can set a special flag within the connections to indicate whether or not that connection has been replicated. It will be appreciated that a simple traversal over the pending connections data  is then sufficient to change the replicated status of a connection. Preferably, the connection manager modules  and  execute on different threads to the applications  and  to avoid suspending execution of the latter for long periods while replicating, activating or retrieving the state of connections used by the applications  and . The active application triggers the replication process so that the call controller  retrieves the TCP connection states and transmits them to the stand-by gatekeeper host.","Although the above embodiments have been described with reference to an IP telephony service, it will be appreciated by those skilled in the art that the end points may equally well be Gateways or Multipoint Control Units. As is appreciated by those skilled in the art, a Gateway provides connectivity between an H.323 network and a non-H.323 network. For example, a Gateway can connect and support communication between an H.323 terminal and an SCN network, which includes all switched telephony networks such as a public switch telephone network (PSTN). The connectivity between any such dissimilar networks is achieved by translating protocols for call set-up and release, converting media formats between different networks and transferring information between networks connected by the Gateway. However, it will be appreciated that a Gateway is not essential for communication between two terminals on an H.323 network. An MCU is used to support conferences between three or more H.323 terminals. All terminals participating in the conference establish a connection with the MCU. The MCU manages conference resources, negotiates between terminals to determine the audio and video codecs needed to support the conference and may also handle the media stream. While the Gatekeepers, Gateways and MCUs are logically separate components of the H.323 standard they can be implemented as a single physical device.","It will be appreciated that although the above embodiments have been described with reference to physically separate active and stand-by H.323 gatekeepers hosts, that the present invention is not limited to such arrangements. Embodiments can equally well be realised in which the invention is applied to other signalling protocols providing that the underlying networking layers do not tear-down the call upon failure or hand-over. For example, embodiments can be realised in which SS7's ISUP protocol is used. It will be appreciated that call models of the form \u201ccall set-up\u201d, \u201ccall active\u201d and \u201ccall tear-down\u201d, that is, models in which the next signal in the call active state is most likely to be a call tear-down signal, can benefit from the present invention. In essence, embodiments of the present invention enable one to preserve a significant percentage of established calls without the need to preserve call contexts at the signalling protocol level upon failure. Such preservation is only required for network layers below the signalling protocol.","The reader's attention is directed to all papers and documents which are filed concurrently with or previous to this specification in connection with this application and which are open to public inspection with this specification, and the contents of all such papers and documents are incorporated herein by reference.","All of the features disclosed in this specification (including any accompanying claims, abstract and drawings), and\/or all of the steps of any method or process so disclosed, may be combined in any combination, except combinations where at least some of such features and\/or steps are mutually exclusive.","Each feature disclosed in this specification (including any accompanying claims, abstract and drawings), may be replaced by alternative features serving the same, equivalent or similar purpose, unless expressly stated otherwise. Thus, unless expressly stated otherwise, each feature disclosed is one example only of a generic series of equivalent or similar features.","The invention is not restricted to the details of any foregoing embodiments. The invention extends to any novel one, or any novel combination, of the features disclosed in this specification (including any accompanying claims, abstract and drawings), or to any novel one, or any novel combination, of the steps of any method or process so disclosed."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Embodiments of the present invention will now be described, by way of example only, with reference to the following accompanying drawings in which:",{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIGS. 8(","i":["a","d"],"b":"8"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIGS. 9(","i":["a","b"],"b":"9"}]},"DETDESC":[{},{}]}
