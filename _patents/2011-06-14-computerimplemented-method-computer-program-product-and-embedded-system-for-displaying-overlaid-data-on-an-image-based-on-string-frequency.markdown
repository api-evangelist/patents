---
title: Computer-implemented method, computer program product and embedded system for displaying overlaid data on an image based on string frequency
abstract: The present description relates to a computer-implemented method, a computer program product and an embedded system for displaying data more efficiently, wherein the embedded system comprises an integrated circuit and a convertor, and the integrated circuit includes an image codec. The method comprises receiving a string at the embedded system; generating a converted image using the string; producing, by means of the image codec, a decoded image by decoding the converted image; and sending the decoded image to a display device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09113198&OS=09113198&RS=09113198
owner: ACCENTURE GLOBAL SERVICES LIMITED
number: 09113198
owner_city: Dublin
owner_country: IE
publication_date: 20110614
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["PRIORITY","SUMMARY","TECHNICAL DEFINITIONS","DETAILED DESCRIPTION"],"p":["This application claims priority to European patent application serial number 10 425 198.8, filed on Jun. 15, 2010, and entitled \u201cA Computer-Implemented Method, A Computer Program Product and an Embedded System for Displaying Data More Efficiently\u201d, which is incorporated by reference in its entirety.","The present application relates to a computer-implemented method, a computer program product and an embedded system for displaying data more efficiently.","According to an aspect, a computer-implemented method for displaying data more efficiently using an embedded system is provided. The embedded system may comprise an integrated circuit and a convertor, and the integrated circuit may include an image codec. The method may comprise receiving at least one string at the embedded system. The method may also comprise generating, by means of the convertor, a converted image using the string. The method may further comprise producing, by means of the image codec, a decoded image by decoding the converted image. Moreover, the method may comprise sending the decoded image to a display device.","In some cases, the string is frequently modified. In other words, the converted image generated using the string must be frequently updated or changed (i.e. generated using a different string). Also, it is possible that a less frequently modified string will not be converted using the convertor.","The method may further comprise receiving an original image at the embedded system. Generating the converted image using the string may comprise overlaying the string on the original image.","Also, the embedded system may include a client separate from the convertor. Thus, the method may further comprise implementing the convertor as an extension of the client.","In some cases, the client does not include functionality to generate the converted image using the string.","The method may comprise determining at least one format parameter corresponding to the string, and generating the converted image based on the format parameter.","Furthermore, the method may comprise sending the format parameter to a TCP\/IP interface of a server on the embedded system. Accordingly, generating the converted image may be performed by the server.","Moreover, the method may comprise passing the format parameter to a library function on the embedded system. Accordingly, generating the converted image may be performed by the library function.","In some embodiments, the integrated circuit is a processor. Also, the integrated circuit may be a system on a chip including a Digital Signal Processor. In addition, the integrated circuit may be a Digital Media Processor.","The method may also comprise receiving a video signal at the embedded system. Moreover, the method may comprise decoding the video signal, and sending the decoded video signal from the embedded system to the display device.","In some cases, the image codec is a JPEG codec or a PNG codec.","Also, the embedded system may be a set top box.","According to another aspect, a computer program product comprising computer-readable instructions is provided. The computer readable instructions, when loaded and executed on an embedded system, may cause the system to perform operations according to the method described above.","According to yet another aspect, an embedded system is provided. The system may comprise a client operable to receive a string. The system may also comprise convertor operable to generate a converted image using the string, wherein the convertor is separate from the client. Moreover, the system may comprise an integrated circuit operable to use an image codec to produce at least one decoded image from the converted image. In addition, the system may be operable to send the decoded image to a display device.","The subject matter described in this specification can be implemented as a method or on an embedded system, possibly in the form of one or more computer program products. The subject matter described in the specification can be implemented in a data signal or on a machine readable medium, where the medium is embodied in one or more information carriers, such as a semiconductor memory or a hard disk. Such computer program products may cause a data processing apparatus to perform one or more operations described in the specification.","In addition, subject matter described in the specification can also be implemented as a system including a processor, and a memory coupled to the processor. The memory may encode one or more programs to cause the processor to perform one or more of the methods described in the specification. Further subject matter described in the specification can be implemented using various machines.","Details of one or more implementations are set forth in the exemplary drawings and description below. Other features will be apparent from the description, the drawings, and from the claims.","An \u201cembedded system\u201d may be understood as a computer system or a device designed to perform one or a few dedicated functions. The embedded system may be contrasted with a general purpose computer system, e.g. a desktop PC.","A \u201cset-top box\u201d (STB) may refer to an example of the embedded system. The STB may be operable to connect to a display device (e.g. a television or a computer) and an external signal source. The STB may be operable to convert a signal received from the external signal source into content which is then displayed on the display device.","An \u201cintegrated circuit\u201d (also known as a microcircuit, microchip, or chip) may refer to a miniaturized electronic circuit that has been manufactured in the surface of a thin substrate of semiconductor material.","A \u201cdigital signal processor\u201d (DSP) may be understood as a specialized microprocessor optimized for certain operations, possibly including the processing (e.g. conversion) of signals. In comparison to a general purpose microprocessor, a DSP may have reduced hardware complexity, reduced functionality, lower cost, better performance, and reduced power consumption.","A \u201csystem on a chip\u201d (SoC) may refer to the integration of the components of a computer system on a single integrated circuit. Extra memory and\/or peripherals may be needed in order for the SoC to achieve full functionality. The SoC may include the DSP.","A \u201cDigital Media Processor\u201d (DMP), also referred to as a media processor, may be understood as an SoC which is designed to process a stream of data (e.g. media such as video or audio) in real time (or near real time). The DMP may include one or more DSPs, a memory interface, a media interface, and audio\/video accelerators. The DMP may be capable of decoding, transcoding (converting from one format to another), encoding, and transrating (scaling from a higher to a lower bit rate) various types of media (e.g. images) and media streams.","A \u201ccodec\u201d may refer to functionality capable of encoding and\/or decoding a digital data stream or signal. Encoding may involve compression, encryption, and\/or removal of data based on certain criteria. Decoding may involve reversing the process of encoding.","An \u201cimage\u201d may be understood as an artifact that has a similar appearance to a subject. In the following text, the term image refers to a still or static image. The image may be rasterized and\/or encoded. A moving image will be referred to as video.","A \u201cservlet\u201d may be implemented as an object that receives a request and generates a response (possibly by contacting other objects) based on the request. The servlet may be used to generate dynamic content, such as Hypertext Markup Language (HTML) or Extensible Markup Language (XML). The servlet may be realized using Java.","A \u201cstring\u201d may be understood as a finite sequence of characters, where each character is a unit of information such as a symbol. \u201cText\u201d may include one or more strings.","In the following, a detailed description of examples will be given with reference to the drawings. It should be understood that various modifications to the examples may be made. In particular, elements of one example may be combined and used in other examples to form new examples.","A simple way to display data using an embedded system would be to send all text and image data to be displayed to the embedded system. The embedded system could be provided with sufficient resources to ensure the data can be processed and displayed quickly.","However, in order to minimize costs, embedded systems are sometimes manufactured with limited resources. For example, a typical STB may include a 300 MHz CPU, 64 MB RAM, and 32 MB flash. Moreover, it may not be feasible to use modern software to provide a user interface on the embedded system. Accordingly, a client (the client may include a user interface) of the embedded system may be implemented using a web browser that is 4 to 10 years old and does not include certain functionality. For example, the client may provide limited control over the arrangement and manipulation of images. More specifically, the client may be unable to dynamically overlay a text string onto an image. Also, the client may be unable to support Java Applets, Java Xlets, ActiveX controls, or similar technologies.","One possible way to display data more efficiently using the embedded system is to use an external server to convert the text data to be displayed into image data. Accordingly, instead of receiving text and image data to display, the embedded system simply receives a set of images. The image data can be efficiently decoded using image codecs on the embedded system. Moreover, the image codecs of the embedded system may make it possible to display images faster than text. There may also be other reasons that images can be displayed faster than text using the embedded system, such as characteristics of the client (e.g. a web browser) on the embedded system.","This solution has the advantage that the external server generally has more resources than the embedded system. Thus, the text to image conversion on the external server may not be very performance sensitive and can be quickly implemented using a high level language such as Java, or even a scripting language such as Perl or PHP (PHP: Hypertext Preprocessor). Moreover, it may be relatively easy to recover from errors in a particular program on the external server, particularly in comparison to the embedded system. For example, memory leaks in a program may have less of an impact on the external server than on the embedded system. Therefore, extensive debugging and testing of the text to image conversion on the external server may not be necessary.","However, an alternative way to display data more efficiently using the embedded system may also be desirable.",{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 1","b":"100"},"The embedded system  may include an integrated circuit. The integrated circuit may be implemented as a processor, preferably an SoC, more preferably a DMP. The embedded system  may also include one or more of the following: a volatile memory (e.g. RAM), a non-volatile memory (e.g. flash), a hard drive (possibly external and connectable via a USB port), a network port (e.g. Ethernet), an audio port, and a video port. Further hardware functionality can also be included on the embedded system .","The embedded system  may be implemented as an STB.","The functional components of the embedded system  may include an Hypertext Transfer Protocol (HTTP) core Application Programming Interface (API) , image codecs , a client , a graphics library , and a convertor .","An operating system, e.g. Linux or Windows CE, may be stored on the embedded system . The operating system may include a file system and various drivers, such as a network driver. The operating system may also include an application programming interface (API) for hypertext transfer protocol (HTTP), referred to as the HTTP core API .","The integrated circuit may include various media codecs, such as image codecs . The image codecs  may accelerate processing of images (e.g. encoding, decoding, transcoding) in a number of formats including joint photographic experts group (JPEG), portable network graphics (PNG), and graphics interchange format (GIF).","The client  may be operable to receive data, e.g. text and images. The data received by the client  may be sent from a backend server (see ). The backend server may be implemented separately from the embedded system  and may be capable of sending data to the embedded system  and responding to requests from the embedded system .","The client  may be implemented as a web browser, e.g. Opera or Firefox, or as a custom program. Due to resource constraints on the embedded system , the functionality of the client  may be limited. For example, when the client  is implemented as a web browser, the client  may provide limited control over the arrangement and manipulation of images. More specifically, the client  may be unable to dynamically overlay a text string onto an image. Also, the client  may be unable to support Java Applets, Java Xlets, ActiveX controls, or similar technologies.","In particular, due to the limited functionality, the client  may be relatively slow or inefficient in replacing certain text data with new text data. More specifically, the client  may be relatively slow in replacing existing text displayed over a background image with new text displayed over the background image. By comparison, the client  may be relatively fast in replacing a first image with a second image.","The graphics library  may include data structures for storing and manipulating images. Functionality to create an image from a file, handle colors, manage alpha channel information, and draw text on an image may also be included in the graphics library . The graphics library  may be written in a relatively low level programming language such as C for performance reasons. Also, the graphics library  may be capable of using the image codecs . In a specific example, the graphics library  may be implemented using the GD library.","The convertor  may be operable to convert text, e.g. a string, into an image, possibly using the graphics library . For example, the convertor  may receive a request from the client  to generate a converted image using the string. In some cases, generating the converted image using the string may involve overlaying the string on an original image, e.g. a background image. In other words, the converted image may be generated by drawing the string on the background image. The convertor  may also be written in a relatively low level programming language such as C or C++, e.g. for performance reasons.","The embedded system  may also include a collector (not depicted) that receives signals from other programs. For example, the collector may act as an event manager, and all other programs on the embedded system  may generate events and send event information as signals to the collector. The signals received by the collector can contain information about an execution status of programs on the embedded system . The signals may also contain information about the usage of physical resources (e.g. CPU, volatile memory, non-volatile memory).","The convertor  may be configured to receive information from the collector about the status of other programs on the embedded system  and about the usage of physical resources on the embedded system . In some cases, the convertor  checks the information received from the collector before converting text to an image. For example, if the information received from the collector indicates that the load on the CPU is heavy (e.g. the processor is intensively executing instructions for other applications), the convertor  may perform a text to image conversion at a low priority in order to keep the performance of the embedded system  at an acceptable level. In other words, the convertor  can use information received from the collector to deal with a situation in which other applications are using many of the resources on the embedded system  (i.e. there are not many resources available for the convertor ).","In some cases, the convertor  includes at least one interface.","For example, the convertor  may include a native interface . The native interface  may receive input by means of a call to one or more functions. The input may include a string, and possibly format parameters (e.g. font, size, color). Output images may be generated as files or a byte buffer stored in the RAM of the embedded system . In particular, the convertor  may return a pointer to a first cell of the area of memory containing the byte buffer. Other forms of input and output are also possible.","The convertor may also include a TCP\/IP interface, e.g. an HTTP interface . The TCP\/IP interface may provide access to a server on the embedded system . For example, the HTTP interface  may provide access to a web server on the embedded system . In this case, the server (or web server) may be implemented as part of the convertor .","The HTTP interface  may receive input such as a string, and optionally, format parameters. The input to the HTTP interface  may be provided as part of an HTTP request. The output generated by the HTTP interface  may be provided as a response to the HTTP request. In a specific example, the HTTP interface  may be implemented using the sys\/socket API from the C standard library.","Use of the native interface  may result in improved performance in comparison to the HTTP interface . However, use of the HTTP interface  may enable a simpler implementation of the client  in comparison to the native interface . The simpler implementation of the client  may result in improved stability of the embedded system . Individual processes, such as the convertor  in the client , may affect the stability of the embedded system  more than similar processes would affect the stability of a general purpose computer.","In addition, the convertor  may be separate from (i.e. external to) the client . In some cases, the convertor  is implemented as an extension of the client . In particular, client  may be implemented as a browser and the convertor  may be implemented as a browser plugin. In this case, the convertor  may be a shared library accessible by the client  via the native interface . The convertor  may include pre-defined functions that can be called by the client .","The client  may use the convertor  to obtain a converted image representing a string according to the at least one format parameter (e.g. font, size, color).","The process of generating a converted image by means of the convertor  may be a real-time process that is started upon a request of the client . The converted image may be sent from the embedded system  to a display device, e.g. a television.",{"@attributes":{"id":"p-0064","num":"0063"},"figref":"FIG. 2","b":"200"},"A backend server  may include request processing functionality, e.g. a servlet , an image repository , and a database . The request processing functionality may be implemented using Java, common Gateway interface (CGI), Active Server Pages (ASP) or a similar technology.","The servlet  may respond to requests from the embedded system . In particular, the servlet  may respond to requests from the client .","An image repository  may be operable to store images, e.g. background images. The images may be used by the client  to provide the user interface of the embedded system .","A database  may be operable to store text, e.g. strings to be displayed by the client . For example, the database  may store of film or video categories, electronic program guide (EPG) data, or other text to be displayed by the client . The database  may be implemented as a single database with a plurality of tables, or as multiple databases stored on one or more computers. Other implementations may also be suitable.","In an alternative implementation, the image repository  and the database  may be combined in a single unit.",{"@attributes":{"id":"p-0070","num":"0069"},"figref":["FIG. 3","FIG. 3"],"b":["100","100"]},"The film categories may be less frequently modified then other data displayed using the embedded system . In particular, a string corresponding to a film category may be less frequently modified in comparison to other text displayed using the embedded system . For example, the film categories may be modified less than twice per month, less than once per month, less than four times per year, or even less frequently.","At step S, the client  requests the list of film categories from the servlet . The request may be sent using http and the client  may request a web page including HTML.","According to the example depicted in , at step S, the servlet  queries the database  in order to obtain the list of film categories. The list of film categories may be in the form of text.","At step S, the servlet  may store the list of film categories as an array of strings, in a memory of the backend server .","At step S, the servlet  may retrieve an original image, e.g. a background image, from the image repository  for each text string in the array of strings.","At step S, the servlet  may generate a first converted image from a first string in the array of strings by overlaying the first string on a first background image retrieved in step S. In other words, the servlet  may generate the first converted image by drawing the first string on the first background image retrieved. Accordingly, the servlet  may convert each subsequent string from the array of strings into a converted image by drawing the string on the corresponding background image. Step S may also be implemented as a scheduled process, e.g. strings received from the database  are converted into images once a day and the images are stored as files on the backend server . In some cases, text to image conversion on the backend server  is implemented using the Java 2D API.","Alternatively, steps S and S may be implemented by retrieving a single background image at step S. Accordingly, step S may be implemented by overlaying each string from the array of strings on the background image.","In yet another alternative, Step S may also be implemented by retrieving a quantity of background images, where the quantity is less than the number of strings in the array of strings. Accordingly, step S may be implemented by overlaying a plurality of strings on one or more of the background images.","At step S, the servlet  may generate HTML code including one or more links to the array of images. The HTML code may be sent from the servlet  to the client  in step S. The HTML code may be sent using HTTP.","At step S, the client  parses the HTML code. According to the example, for each image in the array of images, the client performs a separate HTTP request to download the image. Other protocols, e.g. file transfer protocol (FTP), could also be used.","Alternatively, step S may be implemented such that the client parses the HTML code and performs a single HTTP request for all the images.",{"@attributes":{"id":"p-0082","num":"0081"},"figref":["FIG. 4","FIG. 4"],"b":"100"},"The EPG may be understood as a means of determining the video content that can be watched using the embedded system . The EPG may consist of text and images, where the text is stored in the database  and the images are stored in the image repository . The text of the EPG may comprise one or more strings.","In some cases, the EPG is displayed using a single image, including a background image (displayed as part of the single image), a header displayed at the top of the background image (the header may include title information), a body including EPG events, and a footer displayed at the bottom of the screen (the footer may include a legend, advertising, popular selections, etc.).","The EPG may be frequently modified. In particular, the text of the EPG may be understood as being frequently modified by means of a relative comparison, e.g. the text of the EPG is modified more frequently than other text that can be displayed using the embedded system  (e.g. film categories). The text of the EPG could also be understood as being frequently modified by means of an absolute comparison. For example, the text of the EPG is modified more frequently than once every two weeks, or the text of the EPG is modified more frequently than once every week.","A string from the text of the EPG may be understood as an example of a frequently modified string displayed using the embedded system . Other strings are also possible.","Steps S to S may be similar to steps S to S.","At step S, the client  requests the EPG from the servlet . The client  may send the request using HTTP and the client  may request a web page including HTML.","According to the example depicted in , at step S, the servlet  queries the database  in order to obtain EPG data.","At step S, the servlet  may store the EPG data as an array of strings in a memory of the backend server . Other data structures (e.g. a linked list of strings) could also be used.","In the example of , at step S, the servlet  generates HTML code including the EPG data and a link to an original image, e.g. a background image. The EPG data may be represented as a list of EPG events, e.g. an array of strings where each EPG event is represented by a string in the array of strings. The background image or background images may be retrieved as described in step S. Also, the background image may be considered as an example of the original image since the background image is not generated by the convertor . In some cases, the HTML code may include one or more links to a plurality of background images, e.g. a background image for each event.","The HTML code is then sent by the servlet  to the client  at step S.","At step S, the client  parses the HTML code sent by the servlet . For each EPG event, the client  may perform a separate HTTP request to the convertor . More specifically, the client  may access the HTTP interface , and request the convertor  to generate a converted image for each EPG event. The HTTP interface  may be a loopback (also referred to as localhost) interface of the embedded system . In other words, the convertor  may use each EPG event to generate a converted image corresponding to the EPG event.","In an exemplary implementation, a first HTTP request is performed for a first EPG event, a first converted image is generated using the first EPG event, and the first converted image is sent from the convertor  to the client  as a response to the first HTTP request. Sending the first converted image may involve sending a path to a file on the embedded system  storing the first converted image. The client  may include one or more format parameters in the HTTP request, e.g. in the HTML code. The format parameters may correspond to the EPG event. For example, the format parameters may correspond to the font, size, and color of the EPG event.","Similar HTTP requests and responses may be made for each subsequent EPG event. In addition, the first EPG event may be represented as a string. Each subsequent EPG event may also be represented as a string.","In one example, the client  retrieves an original image, e.g. a background image, from the backend server  corresponding to each EPG event. Accordingly, step S may be implemented by performing a request, e.g. an HTTP request, to the convertor  for each EPG event including each background image corresponding to the EPG event. In some cases, a background image may be provided to the convertor  by means of a path to a file storing the background image.","In another example, the client  retrieves a background image from the backend server  corresponding to all EPG events. Thus, the client  retrieves a single background image and each request to the convertor  is sent using the single background image.","In yet another example, the client  does not retrieve a background image from the backend server . Thus, each request to the convertor  does not include the background image.","At step S, the convertor  generates a converted image in response to each request from the client . Each converted image may be generated based on the format parameters included with the corresponding HTTP request. The convertor  may respond to the client via HTTP. In some cases, each converted image created in step S is generated by overlaying an EPG event on the corresponding background image. In other words, each converted image generated in step S is a result of drawing an EPG event on the background image corresponding to the EPG event.","For example, the first converted image is generated using a first EPG event by overlaying the first EPG event on the first background image. Subsequent converted images are generated using the corresponding EPG events and background images. There may be a different background image for each EPG event and resulting converted image. Alternatively, each converted image may be generated using the same background image. Other combinations are also possible, for example, a plurality of converted images may be generated by overlaying EPG events on a first background image, whereas other converted images are generated by overlaying further EPG events on a second background image.","In another example, the first converted image is generated using the first EPG event without using a background image. Subsequent converted images are generated using the corresponding EPG events.","Continuing with the example depicted in , at step S, the client  renders the HTML code parsed in step S along with the images generated by the convertor  in step S. Step S may include producing decoded images from the converted images by means of the image codecs .",{"@attributes":{"id":"p-0103","num":"0102"},"figref":"FIG. 5","b":"100"},"Steps S to S may be identical to steps S to S. Also, the EPG may be implemented as described with respect to .","At step S, the client  parses the HTML code sent from the servlet  in step S (as described in step S). For each EPG event in the HTML code, the client  may access the native interface . More specifically, the client  may call a library function (i.e. subroutine) accessible through the native interface  for each EPG event. The library function may be implemented as part of a shared library. Furthermore, the client  may access one or more functions to the native interface .","In an exemplary implementation, a first call to the library function is performed for a first EPG event, a first converted image is generated by the convertor  using the first EPG event, and the first converted image is sent as a return value from the convertor  to the client  in response to the first call to the library function.","The client  may include one or more format parameters in the first call to the library function. The format parameters may correspond to the EPG event. For example, the format parameters may correspond to the font, size, and color of the EPG event.","At step S, the convertor  may generate a converted image in response to each call to the library function. The convertor  may respond to the client  by means of the native interface .","Similar calls to the library function may be made for each subsequent EPG event.","In one example, the client  retrieves an original image, e.g. a background image, from the backend server  corresponding to each EPG event. Accordingly, step S may be implemented accessing the convertor , e.g. via the library function, for each EPG event. An EPG event and the corresponding background image may be provided to the convertor  for each call to the library function. In some cases, a background image may be provided to the convertor  by means of a path to a file storing the background image.","In another example, the client  retrieves a background image from the backend server  corresponding to all EPG events. Thus, the client  retrieves a single background image and each call to the library function via the native interface  of the convertor  is sent using the single background image.","In yet another example, the client  does not retrieve a background image from the backend server . Thus, each call to the library function does not include the background image.","At step S, the convertor  generates a converted image in response to each function call from the client . The converted image may be returned to the client  via the native interface , e.g. a path to a file storing the converted image may be returned from the library function.","Step S may be carried out identically to step S.","As a result of converting strings to images using the convertor , e.g. according to the steps described with respect to  or , the performance of the embedded system  may be enhanced, particularly in comparison to another embedded system where all text and images are processed on the embedded system itself. This may be because images can be processed using the image codecs , whereas text cannot be processed using the image codecs .","The use of the convertor  may also result in enhanced performance of the embedded system  in comparison to yet another embedded system, where the other embedded system processes images which have been converted from text on a backend server. This may be because of reduced bandwidth requirements when sending text from the backend server  to the embedded system  in comparison with the bandwidth requirements for sending images from the backend server  to the embedded system . In other words, it may be possible to download text from the backend server  to the embedded system  faster than an image can be downloaded from the backend server  to the embedded system , because the text can generally be represented using less space (i.e. fewer bytes) than the image.","The difference in bandwidth requirements may be particularly significant for text that changes frequently (e.g. the text of the EPG), i.e. when new text must be frequently sent from the backend server  to the embedded system  in order to update\/replace text stored on the embedded system .","Advantageously, the client , capable of performing the steps according to  does not need an upgrade in order to perform the steps according to either  or . In other words, no changes to the code of the client  are required in order for the client  to use the convertor .",{"@attributes":{"id":"p-0119","num":"0118"},"figref":"FIG. 6","b":["600","112","412"]},"A benefit of accessing the HTTP interface  from the client  may be simplicity. Specifically, the client  may be simpler to implement when using the HTTP interface  rather than the native interface  to access the convertor . However, use of the native interface  may result in improved performance in comparison to the HTTP interface .","The HTML code  includes an img src tag  including a query string. The query string may be part of a uniform resource locator (URL) in an HTTP request.","In the example depicted, the query string includes an HTTP interface name , in this example \u201cedtic\u201d. Also, the query string includes a string , in this example \u201cfoo\u201d, to be converted into a converted image. Following the string  is a font path , in this case \u201c\/tmp\/font.ttf\u201d. The font path  may refer to a location of a file containing a font In the file system of the embedded system . Optionally, the font path  may include a font name.","A master path  may refer to a location in the file system of the embedded system  of a file containing a background image. In this example, the convertor  sends the string  drawn on the background image referred to by the master path  as a response to the request from the client . In , the master  as a value of \u201c\/tmp\/master.png\u201d.","An x-coordinate  may define a margin in pixels measured from the left side of the background image to begin drawing the string .","A y-coordinate  may define a margin in pixels measured from the top of the background image to begin drawing the string .","A font color  may define a color in which the string  will appear on the background image when drawn.","A font size  may refer to a size of the string , when the string  is drawn on the background image.","The query string may also include a width of the converted image containing the string  and the background image referred to by the master path . If the width provided in the query string is different from the width of the background image, the background image may be scaled.","In addition, the query string may include a height of the converted image contain the string  in the background image referred to by the master path . If the height provided in the query string is different from the height of the background image, the background image may be scaled.","The font path , a master path , the x-coordinate , the y-coordinate , the font color , the font size , the width, and the height can be considered format parameters."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE FIGURES","p":[{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
