---
title: Computer file system
abstract: A file system that does not conflate item lifetime with the item's inclusion in an organizational structure of the file system is described herein. In addition, the file system's organizational structure is not limited to directory trees, but instead may use any directed acyclic graph (DAG). Items, once stored into the file system, may be maintained until affirmatively deleted by a client of the file system, regardless of whether the item is part of a DAG or not. Items may be placed in file regions, which are conceptual workspaces for a client to control item lifetime and to organize items into any DAG structure of the user's choosing. Items may be concurrently stored in multiple DAGs, and each file region may have one or more independent DAGs. An item's placement in a DAG may also be used to govern file properties such as namespace, security, privacy, and read/write attributes.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07730114&OS=07730114&RS=07730114
owner: Microsoft Corporation
number: 07730114
owner_city: Redmond
owner_country: US
publication_date: 20041112
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"p":["A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure, as it appears in the Patent and Trademark Office patent file or records, but otherwise reserves all copyright rights whatsoever.","The invention relates generally to file systems for computer systems. More specifically, the invention provides a file system that does not conflate the lifetime of items stored in the file system with the underlying organizational structure used by the file system, thus allowing the items stored in the file system to each have zero, one, or more parents in the organizational structure without risk of deletion.","Computers store files on storage devices such as disk drives. The disk drive only provides a place to store data, similar to an empty file cabinet. Just as an empty filing cabinet does not come with any predefined filing system for files (i.e., users of the filing cabinet must create the filing system or organizational structure themselves, e.g., by alphabetizing files), a hard drive is also, by default, just an empty storage space. By itself, the only way to access data on a hard drive is by either specifying the data's physical location (e.g., by specifying the cylinder, head, and sector of the hard drive where a file is stored), or by its logical location (e.g., the 21,671st block) on the disk. Once the hard disk drive is installed on a computer, the computer uses a file system to keep track of files stored on the hard disk drive in an easily-accessible manner.","Known file systems unduly limit how the operating system and user of the file system can organize files in the file system. That is, known file systems typically require users to organize items in a tree of files and directories, where directories are in fact a special kind of file identified by the file system. Even if a file system supports additional data structures, this capability is typically not exposed to the file system's clients (i.e., end-users and applications).  illustrates a brief example of a typical organizational structure  of present file systems. As illustrated in , known file systems use a tree to organize directories (illustrated with rounded ends) and files (illustrated with squared off ends). In a tree structure, an item's location and organization are conflated; every item must be in one and in exactly one directory. This is how the user must organize his or her files, and the user is unable to place an item in multiple organizations without creating a new copy of the item.","Typical file systems use two tables or databases in conjunction with each other to organize files. The first table or database is a lookup table that identifies the physical location at which a file is stored on a storage device such as a hard drive. The second table defines the organizational structure of the files. These tables are generically referred to herein as the location table (LOC) and organizational table (ORG), respectively. The organizational table stores information regarding holding links, i.e., that one item is the parent of another item. Some file systems may combine the location table and the organizational table into a single table or structure, but still require that elements of both tables be present in order for the file system to operate properly. For example, in the NT brand file system marketed by Microsoft Corporation, or NTFS, a Master File Table acts as both the location table and as the organizational table. Similarly, the Unix file system, UFS, uses a table of i-nodes that acts as both the location table and the organizational table for files. Directories are stored as a special kind of file, where the directory \u201cfile\u201d stores a list of filenames within the directory and their respective i-nodes.","In these and other known file systems, the file system keeps a file stored on the physical storage device as long as the file is located in at least one location as defined by holding links in the organizational table, i.e., there is at least one holding link pointing to the file. That is, if a holding link for a file is deleted from the organizational table, and there are no more holding links pointing to that file, then the file system removes the file's entry in the location table (regardless of whether the file is physically overwritten on the storage device). The storage device may then use the storage space to write new data. For example, if a user were to \u201cdelete\u201d the file C:\\PROGRAMS\\MICROSOFT\\OFFICE\\WORD\\FILE.DOC depicted in , the file system first removes the file's entry from the organizational table. If the file has no other entries in the location table, i.e., the file is not also stored somewhere else, then the file system removes the file's entry in the location table, thus freeing the space for other data. Typically, the file system maintains a reference count of the number of ancestors (called \u201cholding links\u201d) any given item has. When the last holding link on an item is removed, the item is \u201cdeleted\u201d By removing the file's reference in the location table. However, this is undesirable from an end-user perspective, as it limits the organizational structures that a file system can use.","Due to the above restrictions and limitations (e.g., deletion as a by-product of removing a file from the tree), file systems do not allow clients to organize data in data structures other than tree-like hierarchies of directories and files. Users want to be able to organize and de-organize items, in a variety of organizational data structures, without concern that a given item will be deleted. It would be an advancement in the art if the lifetime of an item were separate from its organization in the file system. That is, it would be an advancement to provide a file system that does not conflate item lifetime with organizational structure, where an act of organizing or de-organizing the item does not affect its lifetime. Thus, it would be an advancement in the art to provide a file system that does not limit the types of data structures in which the operating system and\/or user can organize files, and also that does not delete a file simply because it is removed from all organizational structures within the file system or has no holding links pointing to the file.","The following presents a simplified summary of the invention in order to provide a basic understanding of some aspects of the invention. This summary is not an extensive overview of the invention. It is not intended to identify key or critical elements of the invention or to delineate the scope of the invention. The following summary merely presents some concepts of the invention in a simplified form as a prelude to the more detailed description provided below.","To overcome one or more limitations in the prior art described above, and\/or to overcome other limitations that will be apparent upon reading and understanding the present specification, the present invention is generally directed to a file system embodied as data items and computer executable instructions stored on a computer readable medium. Data items generally refer to any data that can be stored in a file system, including but not limited to files, folders, data, music, etc. The file system uses a first data table storing item location information for at least first, second and third data items stored within the file system, and uses a second data table storing organizational information for the first and second data items but not storing organizational information for the third data item.","A file system manager software module of the file system may be embodied as computer executable instructions stored on a computer readable medium. The file system manager manages data items stored in the file system based on item location data and item organizational data. The file system manager uses a first subroutine for deleting items from the file system, and uses a second subroutine for removing items from the file system.","The file system manager performs a method for managing items stored in the file system, including receiving a first request to delete a first item from the file system, and responsive to the first request, deletes references to the first item from location information associated with the file system and from organization information associated with the file system. The file system manager receives a second request to remove a second item from the file system, and responsive to the second request, deletes references to the second item from the organization information associated with the file system, but does not delete references to the second item from the location information associated with the file system.","Another aspect of the invention provides a file system for storing data items, where the file system is embodied as computer executable instructions stored on a computer readable medium. In the file system, data item lifetime is independent of a location of the data item within any conceptual organization of data items in the file system.","In the following description of the various embodiments, reference is made to the accompanying drawings, which form a part hereof, and in which is shown by way of illustration various embodiments in which the invention may be practiced. It is to be understood that other embodiments may be utilized and structural and functional modifications may be made without departing from the scope of the present invention.","Illustrative Computing Environment",{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 1","b":["100","100","100","100"]},"The invention is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems, environments, and\/or configurations that may be suitable for use with the invention include, but are not limited to, personal computers, server computers, hand-held or laptop devices, multiprocessor systems, microprocessor-based systems, set top boxes, programmable consumer electronics, network PCs, minicomputers, mainframe computers, distributed computing environments that include any of the above systems or devices, and the like.","The invention may be described in the general context of computer-executable instructions, such as program modules, being executed by a computer. Generally, program modules include routines, programs, objects, components, data structures, etc. that perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote computer storage media including memory storage devices.","With reference to , an illustrative system for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer  may include, but are not limited to, a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnect (PCI) bus, also known as Mezzanine bus.","Computer  typically includes a variety of computer readable media. Computer readable media may be any available media that can be accessed by computer  and includes both volatile and nonvolatile media, removable and non-removable media. By way of example, and not limitation, computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium or combination of media that can be used to store information and that can accessed by computer . Communication media typically embodies computer readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media.","The system memory  includes computer storage media in the form of volatile and\/or nonvolatile memory such as read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within computer , such as during start-up, is typically stored in ROM . RAM  typically contains data and\/or program modules that are immediately accessible to and\/or presently being operated on by processing unit . By way of example, and not limitation,  illustrates operating system , application programs , other program modules , program data , and file system .","The computer  may also include other removable\/non-removable, volatile\/nonvolatile computer storage media. By way of example only,  illustrates a hard disk drive  that reads from or writes to non-removable, nonvolatile magnetic media, a magnetic disk drive  that reads from or writes to a removable, nonvolatile magnetic disk , and an optical disk drive  that reads from or writes to a removable, nonvolatile optical disk  such as a CD ROM or other optical media. Other removable\/non-removable, volatile\/nonvolatile computer storage media that can be used in the illustrative operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM, and the like. The hard disk drive  is typically connected to the system bus  through an non-removable memory interface such as interface , and magnetic disk drive  and optical disk drive  are typically connected to the system bus  by a removable memory interface, such as interface .","The drives and their associated computer storage media discussed above and illustrated in , provide storage of computer readable instructions, data structures, program modules and other data for the computer . In , for example, hard disk drive  is illustrated as storing operating system , application programs , other program modules , program data , and file system . Note that these components can either be the same as or different from operating system , application programs , other program modules , program data , and file system . Operating system , application programs , other program modules , program data , and file system  are given different numbers in  to illustrate that, e.g., they are different copies. A user may enter commands and information into the computer  through input devices such as a keyboard  and pointing device , commonly referred to as a mouse, trackball or touch pad. Other input devices may include a remote control , microphone, joystick, game pad, satellite dish, scanner, or the like (not all shown). These and other input devices are often connected to the processing unit  through a user input interface  that is coupled to the system bus, but may be connected by other interface and bus structures, such as a parallel port, game port or a universal serial bus (USB). A monitor  or other type of display device (e.g., a TV) is also connected to the system bus  via an interface, such as a video interface . In addition to the monitor, computers may also include other peripheral output devices such as speakers  and printer , which may be connected through an output peripheral interface .","In some aspects, a pen digitizer  and accompanying pen or stylus  are provided in order to digitally capture freehand input. Although a direct connection between the pen digitizer  and the user input interface  is shown, in practice, the pen digitizer  may be coupled to the processing unit  directly, parallel port or other interface and the system bus  by any technique including wirelessly. Also, the pen  may have a camera associated with it and a transceiver for wirelessly transmitting image information captured by the camera to an interface interacting with bus . Further, the pen may have other sensing systems in addition to or in place of the camera for determining strokes of electronic ink including accelerometers, magnetometers, and gyroscopes.","The computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be a personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer , although only a memory storage device  has been illustrated in . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) , but may also include other networks. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet. Further, the system may include wired and\/or wireless capabilities. For example, network interface  may include Bluetooth, SWLan, and\/or IEEE 802.11 class of combination abilities. It is appreciated that other wireless communication protocols may be used in conjunction with these protocols or in place of these protocols.","When used in a LAN networking environment, the computer  is connected to the LAN  through a network interface or adapter . When used in a WAN networking environment, the computer  typically includes a modem  or other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external, may be connected to the system bus  via the user input interface , or other appropriate mechanism. In a networked environment, program modules depicted relative to the computer , or portions thereof, may be stored in the remote memory storage device. By way of example, and not limitation,  illustrates remote application programs  as residing on memory device . It will be appreciated that the network connections shown are illustrative and other means of establishing a communications link between the computers may be used.","It will be appreciated that the network connections shown are illustrative and other techniques for establishing a communications link between the computers can be used. The existence of any of various well-known protocols such as TCP\/IP, Ethernet, FTP, HTTP and the like is presumed, and the system can be operated in a client-server configuration to permit a user to retrieve web pages from a web-based server. Any of various conventional web browsers can be used to display and manipulate data on web pages.","One or more aspects of the invention may be embodied in computer-executable instructions, such as in one or more program modules, executed by one or more computers or other devices such as computer . Generally, program modules include routines, programs, objects, components, data structures, etc. that perform particular tasks or implement particular abstract data types when executed by a processor in a computer or other device. The computer executable instructions may be stored on a computer readable medium such as a hard disk, optical disk, removable storage media, solid state memory, RAM, etc. As will be appreciated by one of skill in the art, the functionality of the program modules may be combined or distributed as desired in various embodiments. In addition, the functionality may be embodied in whole or in part in firmware or hardware equivalents such as integrated circuits, field programmable gate arrays (FPGA), and the like.","According to an illustrative aspect of the invention, a file system is described herein that does not conflate item lifetime with the item's placement within the file system's organizational structure, thus allowing an item to participate in multiple organizations or none at all, such as through both property based queries and through lists, which form one or more Directed Acyclic Graphs (DAG). A DAG is an organization where an item may have multiple parents. In a DAG, an item may not parent one of its ancestors, which would form a cycle.","The file system described herein may be embodied as computer executable instructions stored on a computer readable medium, for example, as file system  and\/or file system  (). In addition, other computer readable media or memory in  may also include a file system the same as or different from the presently described file system. For example, media  and  may also include a file system. For purposes of explanation, the file system will be described herein with reference to file system .","With reference to  and , file system  primarily relies on two tables, location table (LOC)  and organizational table (ORG) . Location table , also referred to as the LOC table, stores information regarding physical and\/or logical storage locations of each item stored in the file system, including, for example, a file identifier (ID) , file name , storage volume , location , and file size . File ID  is the primary key or reference used to refer to each item, and is unique for each item stored in the file system . File ID may include a number, alphabet text, symbols, or any combination, so long as each file ID uniquely identifies a single item stored in file system .","File name  may include a short descriptive filename of the item provided by a user of the file system . File name  is preferably the user's primary conceptual reference to each file, and may be designated by the user in a descriptive format such that the file is easily recognizable to the user based on the file name. File name  may be of restricted length, e.g., 8.3 format, max length of 256 characters, or some other maximum. Preferably, there are no restrictions on whether file names may be duplicative of each other, or even whether a file name is required or has been assigned. That is, multiple files may each be named \u201cREADME.TXT\u201d or \u201cRead this first,\u201d even within the same directory, folder, or list, so long as each file has a unique file ID . This is unlike previous file systems, which require that each file have a unique name within the context of its parent.","Volume , location , and size  may be used to retrieve an item from a physical or logical storage location. Volume  may refer to a physical or logical storage device, e.g., a physical or logical hard disk drive, optical storage, storage media card, solid-state storage device, and the like. Location  may refer to the actual starting location of the item on the identified physical or logical volume, and size  may refer to a quantitative measure of the amount of space in which the item is stored on the identified volume starting at the identified location. Additional or alternative information may be included in location table , so long as the included information is usable to retrieve each stored item from its respective identified storage location.","Organizational table , also referred to as the ORG table, stores hierarchical relationships between items stored in file system . As discussed briefly above, the ORG table  may define one or more directed acyclic graphs (DAGs), which can include one or more trees, for conceptually arranging items in the file system . ORG table  may include, for each relationship, a parent  and a child .  illustrates an example of a DAG  as defined by portions of LOC table  and as defined by ORG table . DAG  is not a tree because item  is parented by (also referred to as being \u201cin\u201d) both \u201cTo Do List\u201d and \u201cItems For My Trip,\u201d and item  is parented by both \u201cItems For My Trip\u201d and \u201cKey Slide Decks.\u201d Each item stored in file system  may have no parent, one parent, or two or more parents, so long as the organization structure remains a DAG.",{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 6","b":["148","148","601","148","601","611","301","401","601","148","603","605","607","609"]},"Add_Item API  may be called by the operating system or other higher level program or application when a new item is to be stored in the file system . Add_Item API  may accept as input a pointer to the new item's current temporary storage location, along with a file name, and optionally with an intended storage volume and\/or parent ID. Add_Item API may optionally return a file ID for the newly added item.","Update_Item API  may be called to update an existing item already stored in file system , and may accept as input a File ID and one or more optionally included pieces of information selected from a pointer to the updated version of the item, an updated relationship for inclusion in ORG table , and\/or an updated file name.","Delete_Item API  may be called to remove an item from file system , by passing to the Delete_Item API a file ID to delete. Only when Delete_Item API  is explicitly called is an item deleted from file system .","Query_Item API  may be called when an item needs to be retrieved from the file system for use by the OS or an application. Query_Item accepts as input a file ID, and returns the requested item. The above listed APIs are representative of the type of APIs that are preferably included in an illustrative embodiment of the invention. File system  may include additional or alternative APIs based on system needs or design.","Because file system  allows each item to have zero or more parents, there may be multiple independent data structures (i.e., multiple DAGs) within a single volume or file system. This is unlike known file systems, which typically limit a client (user or application) to storing items in a single tree per volume. Thus, the conceptual space in which items are stored in a file system as described here is referred to as a File Region (FR). A file region refers to a high-level user concept of an organizational area to used to control lifetime of an item. As long as an item remains within the file region, the item will not be deleted, regardless of whether the item is subject to any parent-child relationships defined in ORG table .","A file region can be conceptually thought of as a box into which items may be placed, irrespective of whether the items are conceptually related. If an item is placed in a file region, the item remains in the file region until the user deletes the item. While the item is in the file region, the item can be organized in any of one or more DAGs within the file region without having an impact on whether the item is within the file region and without an impact on the item's lifetime. That is, the file is not deleted until the user affirmatively instructs the file system to delete the file. The file region may encompass any arbitrarily defined storage area, regardless of whether all the included data stores are physically proximate to each other within the same computer, network, etc., so long as the data stores are managed as a single file region to ensure item lifetime. For example, a file region might encompass all internal hard drives on a computer, a portion of a single hard drive on a computer, networked storage alone or in combination with local storage, or any other defined storage space.",{"@attributes":{"id":"p-0055","num":"0054"},"figref":["FIGS. 7 and 8","FIG. 8","FIG. 7","FIG. 7","FIG. 8","FIG. 7"],"b":["701","501","703","705","501","703","705","801","701","701","701","148","1","7","7","3"]},"File system  distinguishes between when a user or application (collectively referred to as clients) desires to remove an item from its underlying organizational structure versus when a client desires to delete the item from the file system entirely.  illustrate file region  after a user or application removes item i from the Key Slide Decks list. That is, manager  removes the holding link in ORG table  identifying Key Slide Decks (file ID 000007) as a parent of item i (file ID 000006), based on a request via Update_Item API . Item i is no longer part of a multi-item organizational structure, because all holding links related to item i have been removed from ORG table . However, because item i remains in file region , item i is not deleted from file system  or LOC table . Stated another way, because the client did not request to delete item i, but rather requested to remove item i, item i is not deleted from data store  and LOC table . Only upon a client affirmatively selecting item i and requesting a delete operation via Delete_Item API  will manager  remove item i (file ID 000006) from data store  and LOC table .","With reference to , file system  may be used to mimic organizational structures familiar to users, based on organizational structures used in previously known file systems, e.g., directory trees. With reference back to LOC table  (), items with file IDs 000301-000312 represent holding links for lists stored in file system . Each unordered list represents a directory in the directory tree  conceptually represented in file region  () and ORG table  (). The principal difference between directory tree  and previously known directory trees is that the subdirectory \u201cShared\u201d is accessible via either of the two \u201cUser Data\u201d unordered lists, thus taking advantage of the multiple parent capability of the file system . In this manner, directories can easily be shared between users while still providing users an organizational structure with which they are familiar.","According to this illustrative embodiment of the invention, file system  provides a private workspace for each individual user of the computer system or network on which file system  is implemented, and also provides a common shared workspace available for all of the users of that computer system or network. The namespace is formed as it is with Private and Shared File Regions both under User Data. This allows a user's queries against the system to be rooted at the item domain formed by User Data, and thus will return both private and shared items in all typical queries. Using the namespace of , when interacting with items in the file system (acquiring new photos or music, creating documents, etc.) the user needs only to conceptually consider the question \u201cIs this private or shared?\u201d and place the item in the appropriate workspace. All users of the Shared workspace then have common visibility into the Shared workspace. Additionally, there may be a shared recycle bin per workspace so that if one user deletes an item that another user still wanted, the second user can retrieve it.","The scenarios for common shared workspaces are not limited to home users. On a corporate domain, a knowledge worker may set up a shared workspace for colleagues to collaborate on a project. The flexibility of the workspace will provide each user of the workspace the ability to organize the items, to query for items within the workspace, and provides common overall visibility of these items.",{"@attributes":{"id":"p-0060","num":"0059"},"figref":"FIG. 13","b":["148","1301","1303","148","1303","1305"]},"If the client selects \u201cdelete\u201d in step , then in step  the file system manager , for each ORG table entry where the item's file ID is present in the parent column, adds an entry in the ORG table where the child is child and ITEM's parent(s) is parent, if not already in the ORG table. Pseudocode that may be used is as follows:","For each ORG table entry X where X=file_ID(ITEM)\n\n","After updating the ORG table accordingly, the file system manager in step  deletes any entry from the ORG table that references the item's file ID as either parent or child. Finally, in step , file system manager  deletes the entry from the LOC table that indicates where the item is stored. File system manager  may further perform a safe erase operation and overwrite the data stored at item's location with garbage data such that an undelete operation cannot be performed.","Alternatively, the file system manager may skip step  and simply remove any entries from the ORG table in step  where the item is either the parent or the child. A side effect of this alternative is that each child of the deleted item becomes removed from the organizational structure of the file system , unless a child is parented by a second item that remains in the organizational structure of the file system .","The above method is illustrated such that the selected item and any items pointed to by the item are removed from the underlying organizational structure. However, those of skill in the art will appreciate that alternative methods may be used where, when an item is removed from the organizational structure, that item's children are not also removed from the organizational structure. How the removal method is performed is secondary to the fact that removal and deletion are two distinct processes: the delete process deletes an item from storage altogether, whereas the removal process removes an item from the underlying organizational structure without affecting the item's lifetime (i.e., does not delete the item from storage or from the file system).","Traditional file system navigation tools, e.g., Windows EXPLORER brand system navigation tool by Microsoft Corporation of Redmond, Wash., typically only show files in the file system's organizational structure. Thus, if a client removes an item from the organizational structure of file system , i.e., the item is not present in the ORG table, then that item would not appear in the file system navigation display. Using aspects of the present invention, however, the client may query the file system manager  for all floating or top-level items (i.e., un-parented items) in order to find any items not presently within the organization structure.","File system  may provide additional features, such as query domains and security, based on the organizational structure defined by ORG table . That is, in addition to defining organizational structures, holding links in the ORG table may also be used to form queryable item domains, or also referred to as namespaces. A client can query any item involved in at least one holding link for which that item is the parent. For example, with reference to , a query on \u201cItems For My Trip\u201d returns items i, i, i, and i, as well as Key Slide Decks. Duplicative items are preferably returned only once. For example, i, also parented by Key Slide Decks, is preferably returned only once.","The organizational structure of file system  may also be used to propagate a namespace for use by legacy applications, and also to provide new users with a conceptually recognizable user interface to interact with file system . For example, with reference to , the item \u201cUser Data\u201d under \u201cU\u201d can be referred to by clients as \\Users\\U\\User Data, thus providing end-users and legacy applications with a conceptually familiar interface.","The organizational structures defined by ORG  may also be used to propagate security information in file system . That is, a security table (not shown) might provide security information for an item. By default, if a user has access to a given item, the user by default also has access to all other items pointed to by the given item, whether directly or indirectly.","For example, security for item U () might indicate that only the user with username=Ross can access the files in U. Unless differing security information is provided for items App Data and User Data parented by U, then only Ross can view those items as well. The same would hold true for Private (parented by User Data parented by U), and Shared. Security for item U might indicate that only the user with username=Jordan can access the files in U. Unless differing security information is provided for items App Data and User Data parented by U, then only Jordan can view those items as well. The same would hold true for Private (parented by User Data parented by U), and Shared. While it appears that the item Shared has conflicting security information, security information is preferably additive. Thus, item Shared will receive security information from both U and U to permit \u201conly Ross and Jordan.\u201d Alternatively, suppose item U had permissions equivalent to \u201conly Ross, not Tom.\u201d Item Shared would then receive security permissions equivalent to \u201conly Ross and Jordan, and not Tom.\u201d","When an item is removed from ORG, security stops propagating to the removed item. For example, if item i is removed from \u201cKey Slide Decks\u201d as illustrated in , then the user no longer will have access to i unless the user is given permission to access i. File system  might specify, however, that by default a client can access all items unless the client is specifically prohibited from accessing an item.","Because lists also form a namespace as described above, if a user from a Windows XP or other legacy machine (which might not be equipped to work with file regions, DAGs or lists as described herein) connects to file system , that user may see the lists visible as folders that can be navigated. Similarly, when a user double-clicks on a given item within the context of a list (on either a legacy operating system or on a system enabled with file system ), the file system provides to the requesting application the namespace formed by the current list. This provides the application with necessary context. For example, if the user attempts to open item i through the list \u201cTo do List,\u201d the file system returns to the application the path that is formed through the \u201cTo do list,\u201d i.e., \\To Do List\\i. Thus, if the user chooses to use the command \u201cFile|Save As . . . \u201d within the application (to create a new copy of the item, for instance), the application will have the correct context to present to the user.","While the invention has been described with respect to specific examples including presently preferred modes of carrying out the invention, those skilled in the art will appreciate that there are numerous variations and permutations of the above described systems and techniques. Thus, the spirit and scope of the invention should be construed broadly as set forth in the appended claims."],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","BRIEF SUMMARY OF THE INVENTION","DETAILED DESCRIPTION","Illustrative Embodiments of the Invention"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["A more complete understanding of the present invention and the advantages thereof may be acquired by referring to the following description in consideration of the accompanying drawings, in which like reference numbers indicate like features, and wherein:",{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 5","FIG. 4"]},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 8","FIG. 7"]},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 10","FIG. 9"]},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 12","FIG. 11"]},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 13"}]},"DETDESC":[{},{}]}
