---
title: Method and apparatus for accelerated post-silicon testing and random number generation
abstract: A method of providing accelerated post-silicon testing for a silicon hardware includes computing a simulation cumulative record of state using a plurality of test instructions and a cycle breakpoint, performing a simulation of an instrumented logic design using the plurality of test instructions and the cycle breakpoint, manufacturing the silicon hardware using the instrumented logic design, computing a silicon cumulative record of state by executing the plurality of instructions using the silicon hardware; and comparing the simulation cumulative record of state to the silicon cumulative record of state.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07133818&OS=07133818&RS=07133818
owner: Sun Microsystems, Inc.
number: 07133818
owner_city: Santa Clara
owner_country: US
publication_date: 20030417
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF INVENTION","SUMMARY OF INVENTION","DETAILED DESCRIPTION"],"p":["Computing devices include silicon hardware, e.g., a Central Processing Unit (CPU), an Arithmetic Logic Unit (ALU), Integrated Circuits (ICs), an Application Specific Integrated Circuit (ASIC), a memory controller, etc. The manufacturing of the silicon hardware is often based on highly complex logic designs. The manufacture of silicon hardware typically requires verification of the logic design through testing in order to verify that the circuits within the silicon hardware are designed properly. Also, once the verified logic design is used to build the silicon hardware, the newly manufactured silicon hardware is validated through one or more tests in order to enhance manufacturing quality. Thus, the silicon hardware undergoes both pre-silicon and post-silicon testing.",{"@attributes":{"id":"p-0003","num":"0002"},"figref":"FIG. 1","b":["20","22"]},"Then, the instrumented logic design is verified through testing (Step ). For example, two versions of the instrumented logic design may be simulated on two different simulators, where one version of the instrumented logic design has already been verified as correct. Simulations may be cycle-by-cycle, or may be event-driven. In a cycle-by-cycle simulation, values of state elements may vary from cycle to cycle, depending on the stimuli used during the test. For example, in the span of 5 cycles, the value of a particular AND gate output may alternate between \u201c1\u201d and \u201c0.\u201d Thus, if the AND gate is instrumented, the values of the AND gate output for the 5 cycles may be the following sequence of numbers: \u201c01010.\u201d","Then, once the instrumented logic design is verified through testing, the silicon hardware is manufactured using the instrumented logic design (Step ). Manufacture of the silicon hardware may take place some time after, and\/or at a different location from when and where the instrumented logic design was tested. Once the silicon hardware has been manufactured, the silicon hardware is validated through testing (discussed in more detail below) (Step ), and then shipped to various customers (Step ).","Validation of the newly manufactured silicon hardware may be implemented via multiple mechanisms. For example, the silicon hardware may execute a program that includes test instructions designed to \u201cmore or less\u201d exhaustively exercise each functional unit of the silicon hardware. However, instrumenting enough of the state elements of the silicon hardware in order to read enough values of state elements may be a challenge in complex silicon hardware. Scan chaining is one technique used to obtain values of state elements that may be hidden during testing.",{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 2","b":["50","52","54","56"]},"A varying period of time may be required in order to shift out the contents of the scan chain, depending on implementation. For example, it may require 1 millisecond to shift out 5000 state element values at 100 MHZ. Thus, if there are 50 shifts, 5 seconds may be required. Furthermore, testing using scan chains may require coordination between control of a clock for the silicon hardware, and control of a clock for the scan chain.","Once the contents of the scan chain(s) are shifted out, the bit values (i.e., \u201c1\u201d or \u201c0\u201d of the state elements) are examined (Step ). Testing is then completed (Step ). Those skilled in the art will appreciate that validation of silicon hardware through testing is generally an iterative process, and that the process shown in  may be performed multiple times, with, or without additional steps.","Even after the silicon hardware has been shipped to customers, testing may not be complete. Many computing devices that include the silicon hardware requires execution of diagnostic tests during initial boot up. The diagnostic tests typically check silicon hardware components, such as checking memory circuits for faults. Often, even powerful computer systems are \u201cresource poor\u201d during the early phases of booting up.","To conserve resources during boot up, most diagnostic tests are self-checking. During the self-checking tests, diagnostic test results are typically computed using two different implementations, and then a test result is determined from comparing results from the two different implementations. Often, one of the implementations is significantly slower than the other implementation. In any case, the self-checking diagnostic test takes at least twice the time of the shorter implementation. It should be noted that under test conditions, computing environments may not only be resource poor, but also, time limited (i.e., only a short amount of time is allocated to running diagnostics before allowing a user access to the computer system).","In general, in one aspect, the invention relates to a method of providing accelerated post-silicon testing for a silicon hardware. The method comprises computing a simulation cumulative record of state using a plurality of test instructions and a cycle breakpoint, performing a simulation of an instrumented logic design using the plurality of test instructions and the cycle breakpoint, manufacturing the silicon hardware using the instrumented logic design, computing a silicon cumulative record of state by executing the plurality of instructions using the silicon hardware; and comparing the simulation cumulative record of state to the silicon cumulative record of state.","In general, in one aspect, the invention relates to a system for providing accelerated post-silicon testing for a silicon hardware. The system comprises a simulator configured to generate a simulation state value by performing a simulation of an instrumented logic design using a plurality of test instructions and a cycle breakpoint, a checksum unit configured to compute a simulation cumulative record of state using the simulation state value, a silicon hardware configured to generate a silicon cumulative record of state using the set of test instructions and the cycle breakpoint, and a silicon checksum unit configured to compute a silicon cumulative record of state using the silicon cumulative record of state.","In general, in one aspect, the invention relates to a computer system providing accelerated post-silicon testing for a silicon hardware. The computer system comprises a processor, a memory, a storage device, and software instructions stored in the memory for enabling the computer system to perform computing a simulation cumulative record of state using a plurality of test instructions and a cycle breakpoint, performing a simulation of an instrumented logic design using the plurality of test instructions and the cycle breakpoint, manufacturing the silicon hardware using the instrumented logic design, computing a silicon cumulative record of state by executing the plurality of instructions using the silicon hardware, and comparing the simulation cumulative record of state to the silicon cumulative record of state.","In general, in one aspect, the invention relates to an apparatus for providing accelerated post-silicon testing of a silicon hardware. The apparatus comprises means for computing a simulation cumulative record of state of a first value of a state element by performing a simulation of an instrumented logic design using a set of test instructions, means for manufacturing the silicon hardware using the instrumented logic design, means for generating a second value of the state element by executing the set of test instructions using the silicon hardware, means for computing a silicon cumulative record of state using the second value of the state element, and means for comparing the simulation cumulative record of state to the silicon cumulative record of state.","Other aspects and advantages of the invention will be apparent from the following description and the appended claims.","Specific embodiments of the invention will now be described in detail with reference to the accompanying figures. Like elements in the various figures are denoted by like reference numerals for consistency.","In the following detailed description of the invention, numerous specific details are set forth in order to provide a more thorough understanding of the invention. However, it will be apparent to one of ordinary skill in the art that the invention may be practiced without these specific details. In other instances, well-known features have not been described in detail to avoid obscuring the invention.","The invention may be implemented on virtually any type computer regardless of the platform being used. For example, as shown in , a general purpose computer () includes a processor (), an associated memory (), a storage device (), and numerous other elements and functionalities typical of today's computers (not shown). The computer () may also include input means, such as a keyboard () and a mouse (), and an output device, such as a monitor (). In accordance with an embodiment of the invention, the computer () is networked. Those skilled in the art will appreciate that these input and output means may take other forms.","One or more aspects of the invention relate to providing accelerated post-silicon testing of silicon hardware of a computing device and random number generation. In accordance with an embodiment of the invention, components included in a system for providing accelerated post-silicon testing for the silicon hardware and random number generation are shown as a flow diagram in . The components shown in  are grouped in two groups: pre-silicon components () and post-silicon components ().","As shown in , the pre-silicon components () include cycle breakpoints (), a logic design (), instrumentation instructions (), an instrumented logic design (), a simulation image (), a simulator (), a set of test instructions (), simulation state values (), a checksum unit (), and a simulation cumulative record of state (). The post-silicon components () include a computing device (), which includes silicon hardware (), silicon hardware state values (), a silicon checksum unit (), a silicon cumulative record of state (), a comparator (), and a random number generator ().","The pre-silicon components () and post-silicon components () are not necessarily located in close conjunction to each other. For example, the pre-silicon components () may be located in a research lab, and the post-silicon components () may be located in a semiconductor manufacturing facility.","The logic design () and instrumentation instructions (), along with the cycle breakpoints (), are combined to create the instrumented logic design (). The instrumented logic design () is compiled to create the simulation image (), which is an input into the simulator (). In accordance with an embodiment of the invention, the simulator is a cycle-accurate simulator, which is capable of modeling each aspect of a target CPU, including pipeline, cache, memory-management unit, etc.","The simulator () simulates the instrumented logic design () by executing the simulation image () controlled by the set of test instructions (). Simulation state values () are an output of the simulator (). For example, if an AND gate is a state element of the logic design (), and the AND gate output is instrumented, then the value of the AND gate output at a particular point during simulation is included as output in the simulation state values (). The simulation state values () are input into the checksum unit (). At this point, a checksum operation is performed on the simulation state values () within the checksum unit () (as is further described below). The simulation cumulative record of state () is output from the checksum unit ().","The post-silicon components () includes the computing device () and all necessary components and functionality to allow the computing device to operate (not shown). The computing device () includes the silicon hardware (), which has been manufactured based on the instrumented logic design (). The set of test instructions () and the cycle breakpoints () are transferred to the silicon hardware (). In accordance with an embodiment of the invention, the set of test instructions () and the cycle breakpoints () are transferred to an appropriate form of intermediate storage, and later transferred to the silicon hardware () or elsewhere in the computing device (), or otherwise made available to the silicon hardware ().","The silicon hardware () outputs the silicon hardware state values (), which is an input to the silicon checksum unit (). The silicon checksum unit () performs a checksum operation on the silicon hardware state values () and outputs the silicon cumulative record of state (). The silicon cumulative record of state () is then input to the comparator () and the random number generator ().","The comparator () also takes input from the simulation cumulative record of state (). In accordance with an embodiment of the invention, the simulation cumulative record of state () is transferred to an appropriate form of intermediate storage for later input to the comparator (). The comparator () is any functional device or software program with the capability to determine whether the simulation cumulative record of state () equals the silicon cumulative record of state (), and output a result of the comparison.","In accordance with an embodiment of the invention, the random number generator () takes as input a subset of the silicon cumulative record of state (). The random number generator () includes functionality sufficient to generate a random number using the silicon cumulative record of state (). For example, the random number generator () may generate random number by invoking software application programming interfaces (APIs) or system method calls(such as rand( ) and srand( )) and providing the silicon cumulative record of state () as seed for the API or system method.","Referring back to the pre-silicon components, in accordance with an embodiment of the invention, the simulator () may be a software application executing on a computer, such as the general purpose computer shown in . Alternatively, the simulator () may be special purpose hardware, such as shown in . Referring to , the simulator () may include one or more host computers (, ) managing the simulation(s) executing on one or more system boards (, , ). Each system board contains one or more Application Specific Integrated Circuits (ASICs) (not shown). Each ASIC contains multiple execution processors (not shown). The host computers (, ) may communicate with the system boards (, , ) using one of several pathways. The host computers (, ) include interface hardware and software as needed to manage simulation of a logic design or an instrumented logic design.","A high-speed switch () connects the host computers (, ) to the system boards (, , ). The high-speed switch () is used for loading and retrieval of state information from execution processors located on ASICs on each of the system boards (, , ). The connection between the host computers (, ) and system boards (, , ) may include an Ethernet connection (). The Ethernet connection () is used for service functions, such as loading a logic design and debugging. The system also includes a backplane (). The backplane () allows the ASICs on one system board to communicate with the ASICs of another system board (, , ) without having to communicate with an embedded controller located on each system board. Additional system boards may be added to the system by connecting more system boards to the backplane ().","Design and manufacture of the silicon hardware proceeds in two separate phases: a pre-silicon phase and a post-silicon phase. The post-silicon phase is not necessarily performed soon after the pre-silicon phase. Days, weeks, months, or even years may separate performance of the pre-silicon and post-silicon phases. Further, as previously discussed, components of the pre-silicon and post-silicon phases may exist in different locations.",{"@attributes":{"id":"p-0039","num":"0038"},"figref":["FIG. 6","FIG. 7","FIG. 6"],"b":"160"},"Next, the instrumented logic design is generated by instrumenting the logic design (Step ). In accordance with an embodiment of the invention, instrumenting is accomplished by accessing data structures of the simulation using a programming language, e.g., by use of function or method invocations. Via instrumentation, values of the simulation state elements may be obtained. For example, if the simulation of the silicon hardware includes the previously mentioned AND gate, then the output of the AND gate may be of interest to a designer of the silicon hardware. Using the instrumentation, the value of a simulation state element such as the AND gate may be obtained. Although the simulation has a total state that includes each value of each simulation state element, in accordance with an embodiment of the invention, a subset of the total state of the simulation is instrumented.","Once the logic design has been instrumented, then, for a current simulation cycle, the instrumented logic design is simulated on the simulator using the set of test instructions and the cycle breakpoints (Step ). In accordance with an embodiment of the invention, the set of test instructions are a program executed by the simulator using the instrumented logic design. For example, referring to the previous example, if the instrumented logic design includes an AND gate, which has two inputs, and the output of the AND gate is a simulation state element that is instrumented, the set of test instructions may cause two inputs of value \u201c1\u201d to be placed on the two inputs of the AND gate. Thus, for a particular cycle, a \u201c1\u201d value may be measured via instrumentation for the simulation state element, namely, the output of the AND gate. Thus, the functionality of the AND gate is simulated by the simulator.","Once the current simulation cycle has been simulated, a determination is made as to whether the current simulation cycle is a cycle breakpoint (Step ). If the current simulation cycle is a cycle breakpoint, then a simulation cumulative record of state is computed (Step ). In accordance with an embodiment of the invention, the simulation cumulative record of state is a form of hash function, such as a checksum, which is often used for cryptographic applications, and also in many other applications used on computer systems.","A checksum, when implemented with an appropriate algorithm, may be used to determine whether one number that represents a message is different from another number, which represents another message. For example, the sequence of numbers \u201c12345\u201d may represent a first message, and the sequence of numbers \u201c21345\u201d may represent a second message. When a checksum algorithm takes as input both sequences of numbers, two different resulting checksums are computed because of the reversal of the \u201c1\u201d and the \u201c2\u201d in \u201c12345\u201d and \u201c21345.\u201d","The checksum unit computes the simulation cumulative record of state using values of state elements that have been instrumented. For example, if the AND gate output is instrumented, then the value of the AND output may change over a span of cycles. For example, from cycle 1 to cycle 5, the value of the AND gate output may alternate between \u201c0\u201d and \u201c1,\u201d thereby generating a sequence of numbers, such as \u201c01010.\u201d Thus, a checksum of the sequence of numbers (\u201c01010\u201d) may be computed using the checksum unit. Those skilled in the art will appreciate that more than one state element may be used to compute the simulation cumulative record of state. For example, there may be hundreds, or even thousands, of state elements used to compute the simulation cumulative record of state.","Moreover, with use of an appropriate checksum algorithm (similar to the many already widely used in industry today), differing sequences of values of simulation state elements provide different values of checksums. The simulation cumulative record of state is computed using sequences of numbers, which are measurements of values of state elements. For example, over the span of 5 simulation cycles (i.e., cycle 1 to cycle 5), the output of the previously-mentioned AND gate, if instrumented and measured, may produce a sequence equal to \u201c10101.\u201d A checksum is computed using \u201c10101\u201d as input, may equal a particular value, e.g., \u201c43533.\u201d However, if the output of the AND gate over the span of the 5 cycles instead equals \u201c00100,\u201d instead of \u201c10101,\u201d then the checksum, if using an appropriate algorithm, will produce a value different from \u201c43533.\u201d Because differing sequences of values of simulation state elements produce different values of checksums, different values of simulation cumulative records of state indicate different simulation states over a span of simulation cycles.","The simulation cumulative record of state is \u201ccumulative\u201d because each successive computation of the simulation cumulative record of state takes as input not only values of state elements for the current simulation cycle, but also the value of the previously computed simulation cumulative record of state (from the previous cycle breakpoint). Referring to the previous example, the sequence of measured AND outputs of \u201c10101\u201d may represent 5 measurements of the output of the AND gate at five sequential simulation cycles, where each of the 5 simulation cycles is a cycle breakpoint. Alternatively, the 5 measurements may have been taken over a span of 5000 cycles, where each 1000cycle is a cycle breakpoint. Thus, the simulation cumulative record of state is cumulative over whatever span of cycles is used for measuring state elements values.","Once the cumulative simulation record of state has been computed, the simulation cumulative record of state is transferred (or stored) (Step ). For example, the simulation cumulative record of state may be transferred to Random Access Memory (RAM), or transferred to secondary storage (e.g., as a file on a hard drive disk).","Then, a determination is made as to whether the simulation has ended (Step ). If the simulation has not ended, then Steps \u2013 are repeated until the simulation has ended.","Once the pre-silicon phase as shown in  is complete, then the post-silicon phase of the flowchart in  may be performed. The post-silicon phase of testing need not be performed immediately after the pre-silicon phase of testing. Often, the post-silicon phase is performed months after the pre-silicon phase, and often in a different location.","Referring to , a first step for the post-silicon phase includes manufacturing the silicon hardware using the instrumented logic design (Step ). The silicon hardware of the computing device is based on the instrumented logic design. For example, the instrumented logic design may include a particular circuit module that includes a series of AND gates, OR gates, etc. Thus, the silicon hardware will also include the series of AND gates, OR gates, etc.","Next, the simulation cumulative record of state, the set of test instructions, and the cycle breakpoints are transferred to an area on, or accessible to, the silicon hardware of the computing device (Step ). For example, the silicon hardware or the computing device may include RAM, Read Only Memory (ROM), or Programmable Read Only Memory (PROM), etc., on which the simulation cumulative record of state, the set of test instructions, and the cycle breakpoints are located.","Next, testing of the silicon hardware is initiated by selecting and executing an instruction of the set of test instructions by the silicon hardware (Step ). In accordance with an embodiment of the invention, the silicon checksum unit is set to zero when the test begins.","A determination is then made as to whether a cycle breakpoint is set for the current instruction (Step ). The cycle breakpoints are used to determine whether a cycle breakpoint is set for the current instruction. If a cycle breakpoint is set for the current instruction, a silicon cumulative record of state is computed and stored (Step ).","In accordance with an embodiment of the invention, the silicon cumulative record of state is computed in the same manner as the simulation cumulative record of state is computed using a hash function (e.g., a checksum), which takes as input, values of silicon state elements (i.e., state elements of the silicon hardware). In accordance with an embodiment of the invention, the silicon state elements that are instrumented are a subset of a total state of the silicon hardware.","Then, after computing and storing (and\/or displaying) the silicon cumulative record of state, or, if no cycle breakpoint is set for the current instruction, a determination is made as to whether the test has completed execution (Step ). If the test has not completed execution, then Step \u2013 are performed until the test has completed execution. Otherwise, if the test has completed, then the simulation cumulative record of state stored on (or accessible to) the computing device is compared to the silicon cumulative record of state using a comparator (Step ). The comparator determines whether a mismatch exists between a value of the simulation cumulative record of state and a value of the silicon cumulative record of state (Step ).","If no mismatch exists between the value of the simulation cumulative record of state and the value of the silicon cumulative record of state, then, in accordance with an embodiment of the invention, a positive outcome action is taken (Step ). For example, a display device accessible to the computing device may display a message indicating that post-silicon testing has been performed with a positive outcome. Otherwise, a mismatch does exist, and, in accordance with an embodiment of the invention, a negative outcome action is taken (Step ). For example, a display device accessible to the computing device may display a message indicating that post-silicon testing has been performed with a negative outcome.","In accordance with an embodiment of the invention, the test shown in  may be performed at a semiconductor manufacturing facility, and upon satisfactory completion of the test (and possibly other testing), the computing device may be shipped to customers. Also, because the set of test instructions, the cycle breakpoints, and the simulation cumulative record of state are stored in, on, or accessible to, the computing device, the test may be performed by the customer when needed or desired. For example, the test shown in  may be performed on boot-up of the computing device, or by service technicians diagnosing problems with the silicon hardware.","In the software industry, approaches to generate random numbers vary. For example, some operating systems, such as Linux, store data from external events, such as mouse movements and keystrokes, and extract information from these events. The extracted information is stored in an entropy pool. The entropy pool includes bit values that are random. Other random number generators based on hardware are also available. For example, an alpha particle emitter may be used to generate random numbers.","In accordance with an embodiment of the invention, the random number generator is a software application executing on the computing device, and under programmatic control by the computing device (or by software executing on the computing device). In accordance with an embodiment of the invention, the random number generator reads a value of the silicon cumulative record of state from the silicon checksum unit, and uses the value of the silicon cumulative record of state to generate a random number. For example, the value of the silicon cumulative record of state may be passed as a seed value to an executing software program via a method or an API, which generates the random number.","Advantages of various embodiments of the present invention may include one or more of the following. Post-silicon testing of silicon hardware of the computing device may be enhanced with respect to time and quality because the silicon cumulative record of state and the simulation cumulative record of state represent, with a sufficiently high degree of confidence, the internal states of the simulator and the silicon hardware. The probability of the silicon cumulative record of state and the simulation cumulative record of state checksums being equal, but still being the result of different state history, is sufficiently low as to yield the high degree of confidence. Thus, quality and reliability of the silicon hardware of the computing device may be tested.","Further, the present invention provides random number generation using computing functionality of the computing device. Thus, extraneous, additional functionality (e.g., alpha particle generators, etc.) or hardware not essential to the computing device itself is not required in order to generate random numbers.","While the invention has been described with respect to a limited number of embodiments, those skilled in the art, having benefit of this disclosure, will appreciate that other embodiments can be devised which do not depart from the scope of the invention as disclosed herein. Accordingly, the scope of the invention should be limited only by the attached claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF DRAWINGS","p":[{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
