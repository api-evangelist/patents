---
title: System and method for increasing data throughput using thread scheduling
abstract: A system and method for delivering data from a device driver to an application increases the usage of synchronous processing (fast I/O mode) of data requests from the application by utilizing thread scheduling to enhance the likelihood that the requested data are available for immediate delivery to the application. If the amount of data in a data queue for storing data ready for delivery is low, the thread scheduling of the system is modified to promote the thread of the device driver to give it the opportunity to place more data in the data queue for consumption by the application. The promotion of the thread of the device driver may be done by switching from the application thread to another thread (not necessarily the device driver thread), boosting the device driver's priority, and/or lowering the priority of the application, etc.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07690003&OS=07690003&RS=07690003
owner: 
number: 07690003
owner_city: 
owner_country: 
publication_date: 20030829
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["This invention relates generally to computer data processing, and more particularly to the operation of providing data for processing by an application.","Data input\/out (I\/O), which involves passing data from one computer component to another, is often a limiting factor or bottleneck in digital processing. For instance, an application running on a computer typically relies upon a device driver on a lower level (e.g., in the kernel mode) to feed data to it for processing. The performance of the application thus depends on how efficiently the driver can provide the data it needs for performing its task.","Conventionally, the application may receive data from the device driver in two modes. In the first mode, the application posts a request to receive data from the device driver if the requested data is currently unavailable. This request is handled asynchronously in that the application does not wait for the device driver to provide the requested data, and the requested data are delivered to the application at a late time when the data become available. In the second mode, the request for data is synchronously processed. In this case, the requested data are already placed in a queue and can be delivered immediately in response to the request. The asynchronous method of data delivery is generally less preferred because it incurs substantial processing and memory overhead, due to the need to allocate and initialize data structures for tracking the data request, as well as the overhead of asynchronous completion. The synchronous mode, in contrast, has no such overhead, but requires that the driver already has data queued for pickup in response to a system call by the application. Since there is no delay in delivering the requested data, the synchronous mode is also called \u201cfast I\/O\u201d on the Microsoft Windows platform, although other platforms may use different terminology. Since the synchronous method has the advantages of significantly reduced overhead and immediate data delivery, it is desirable to increase its usage over that of the asynchronous method.","In view of the foregoing, the present invention provides a system and method for delivering data from a device driver to an application that increases the usage of the synchronous processing (i.e., the fast I\/O mode) of data delivery to the application by utilizing thread scheduling to enhance the likelihood that the requested data are available for immediate delivery. When the application needs data for processing, a data queue used by the device driver to store data ready for delivery to the application is checked. If the amount of data in the data queue is low, the thread scheduling of the system is modified to promote the thread of the device driver, thereby giving the device driver the opportunity to place more data in the data queue for consumption by the application. The promotion of the thread of the device driver may be done in different ways, including switching from the application thread to another thread (not necessarily the device driver thread), boosting the device driver thread's priority, and\/or lowering the priority of the application thread, etc.","Turning to the drawings, wherein like reference numerals refer to like elements, the invention is illustrated as being implemented in a suitable computing environment. Although not required, the invention will be described in the general context of computer-executable instructions, such as program modules, being executed by a personal computer. Generally, program modules include routines, programs, objects, components, data structures, etc. that perform particular tasks or implement particular abstract data types. Moreover, those skilled in the art will appreciate that the invention may be practiced with other computer system configurations, including hand-held devices, multi-processor systems, microprocessor-based or programmable consumer electronics, network PCs, minicomputers, mainframe computers, and the like. The invention may be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote memory storage devices.","The following description begins with a description of a general-purpose computing device that may be used for implementing the invention, and the system and method of the invention for promoting fast data I\/O by means of thread scheduling will be described in greater detail with reference to . Turning now to , a general purpose computing device is shown in the form of a conventional personal computer , including a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. The system memory includes read only memory (ROM)  and random access memory (RAM) . A basic input\/output system (BIOS) , containing the basic routines that help to transfer information between elements within the personal computer , such as during start-up, is stored in ROM . The personal computer  further includes a hard disk drive  for reading from and writing to a hard disk , a magnetic disk drive  for reading from or writing to a removable magnetic disk , and an optical disk drive  for reading from or writing to a removable optical disk  such as a CD ROM or other optical media.","The hard disk drive , magnetic disk drive , and optical disk drive  are connected to the system bus  by a hard disk drive interface , a magnetic disk drive interface , and an optical disk drive interface , respectively. The drives and their associated computer-readable media provide nonvolatile storage of computer readable instructions, data structures, program modules and other data for the personal computer . Although the exemplary environment described herein employs a hard disk , a removable magnetic disk , and a removable optical disk , it will be appreciated by those skilled in the art that other types of computer readable media which can store data that is accessible by a computer, such as magnetic cassettes, flash memory cards, digital video disks, Bernoulli cartridges, random access memories, read only memories, storage area networks, and the like may also be used in the exemplary operating environment.","A number of program modules may be stored on the hard disk , magnetic disk , optical disk , ROM  or RAM , including an operating system , one or more applications programs , other program modules , and program data . A user may enter commands and information into the personal computer  through input devices such as a keyboard  and a pointing device . Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a serial port interface  that is coupled to the system bus, but may be connected by other interfaces, such as a parallel port, game port or a universal serial bus (USB) or a network interface card. A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video adapter . In addition to the monitor, personal computers typically include other peripheral output devices, not shown, such as speakers and printers.","The personal computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be another personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the personal computer , although only a memory storage device  has been illustrated in . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) . Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet.","When used in a LAN networking environment, the personal computer  is connected to the local network  through a network interface or adapter . When used in a WAN networking environment, the personal computer  typically includes a modem  or other means for establishing communications over the WAN . The modem , which may be internal or external, is connected to the system bus  via the serial port interface . In a networked environment, program modules depicted relative to the personal computer , or portions thereof, may be stored in the remote memory storage device. It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","In the description that follows, the invention will be described with reference to acts and symbolic representations of operations that are performed by one or more computers, unless indicated otherwise. As such, it will be understood that such acts and operations, which are at times referred to as being computer-executed, include the manipulation by the processing unit of the computer of electrical signals representing data in a structured form. This manipulation transforms the data or maintains it at locations in the memory system of the computer, which reconfigures or otherwise alters the operation of the computer in a manner well understood by those skilled in the art. The data structures where data is maintained are physical locations of the memory that have particular properties defined by the format of the data. However, while the invention is being described in the foregoing context, it is not meant to be limiting as those of skill in the art will appreciate that various acts and operations described hereinafter may also be implemented in hardware.","Referring to , the present invention is directed to a system and method for improving the throughput of data from a device driver  to an application . The device driver feeds the data required by the application to perform its functionality. To enhance the efficiency of data delivery to the application , the device driver maintains a data queue  that stores data ready for immediate delivery to the application. As illustrated in , the device driver  is typically on a lower level of the computer architecture than the application . For instance, the device driver  may be in a kernel mode of the operating system, while the application  runs in the user mode of the operating system. The device driver  may receive the data from a data source, which may be another driver  on a lower level. The data source may in turn receive the data from another source. For instance, in the embodiment illustrated in , the driver  may receive the data from a network , such as the Internet.","There are two modes for delivering data from the device driver  to the application , depending on whether there is sufficient data in the data queue  for consumption by the application. In a \u201cslow I\/O\u201d mode, there is not enough data in the data queue , and the application  makes a request for asynchronous data delivery. The data are delivered to the application  later when the data become available to the device driver . Besides being slow, this mode of data delivery also has the disadvantage of high overhead in memory and processing, because data structures have to be allocated and initialized to track the asynchronous data requests. In contrast, in a \u201cfast I\/O\u201d mode, the application  posts synchronous data requests, and the requested data are delivered to the application immediately. This mode of data delivery does not incur the types of overhead of the asynchronous mode. Moreover, the data need by the application is immediately made available to the application. Since the application can perform its functions only when it has the data it needs, the performance of the application depends on how quickly it can have the data delivered to it when it need them. Thus, the performance of the application may be significantly improved if the data delivery is carried out most of the time in the fast I\/O mode. The necessary condition for the fast I\/O mode is, of course, that the data requested by the application  are already in the data queue  for consumption by the application.","In accordance with a feature of the invention, the likelihood of having sufficient data in the data queue  for fast I\/O is increased by giving the device driver  more opportunities to populate the data queue with new data, which is achieved by means of thread scheduling. Referring to , to ensure that the data queue  contains sufficient data to allow data delivery in the fast I\/O mode, the amount of data in the data queue  is checked from time to time (step ). This checking can be done, for instance, each time the application  needs more data but before it issues a data request. Alternatively, the checking may be done each time the data source (e.g., the driver ) has more data for the device driver. If it is determined (step ) that the amount of data in the data queue  is too low (e.g., lower than a pre-selected threshold), the thread scheduling of components running on the computer system is modified (step ) to promote the thread of the device driver to give the device driver a chance of putting more data into the data queue. As used herein, \u201cpromoting\u201d the device driver thread means that making it quicker for the device driver thread to get its turn to be run. When the thread of the device driver is run, the device driver  can put more data into the data queue  (step ) if such data are available from the source. Later, when the application thread is run, the application can retrieve the data in the data queue via fast I\/O (step ).","Referring back to , how thread scheduling may be modified depends on the implementation of the operating system. For instance, application programming interface (API) functions  may be provided for components of the computer to call to change their priorities in thread scheduling or to switch to other threads. In one embodiment, the application  checks whether there is sufficient data in the data queue  before it requests for data. If the amount of data is deemed low, the application thread yield the processor to another thread by calling the appropriate function of the API  to inform the thread manager  its intent to yield. It should be noted that the next thread to be switched in may not be the device driver thread. Nevertheless, by simply yielding its thread to another one, the application has accelerated the time for the device driver thread to be switched in, and gives the device driver a chance to queue more data before posting a data request.","As mentioned earlier, besides switching from the application thread to another thread, the promotion of the device driver thread may also be achieved by boosting the priority of the device driver thread, or lowering the priority of the application thread. The boosting or lowering of the priority of a thread may be done by calling of the API functions. In one embodiment, either the application  or the device driver  can call the API  to boost the priority of the device driver thread. Alternatively or additionally, the data source for device driver, which is the driver  in the embodiment of , may call the API to boost the priority of the device driver thread.","To illustrate the effects of promoting fast I\/O utilizing thread scheduling, an example of the conventional synchronous processing and an example of fast I\/O promotion are provided in , respectively. In these two examples, the application is called \u201cApp Pool,\u201d which is for serving Web requests received from the Internet. In this case, the data to be processed by the App Pool are in the form of Web requests. The device driver that is responsible for feeding the Web requests to the App Pool is an Http.sys driver . The Http.sys driver  in turn receives the Web requests from a Transport Driver Interface (TDI) driver , which receives the request from the Internet. The TDI driver  has a buffer  for storing Web requests it receives from the network to be picked up by the Http.sys driver. Similarly, the Http.sys driver  has a queue  for storing requests to be picked up by the App Pool .","In the example illustrated in , the fast I\/O promotion of the invention is not implemented, and the App Pool  posts conventional asynchronous data requests when there is no data (Web requests) in the queue  for it to process. Five consecutive states of the queue  and the buffer , labeled A-E, are shown in . The arrow  is used to indicate which of the App Pool , Http.sys driver , or the TDI driver  has the processor, i.e., has its thread running. Thus, in state A, the App Pool thread is running. When the App Pool  tries to receive Web requests, it discovers that that the queue  is empty. As is conventional, the App Pool  posts two \u201creceive IRPs\u201d in the queue . An IRP (\u201cI\/O request packet\u201d) is a data structure used for asynchronous delivery of data. In state B, it is the turn of the Http.sys thread to run. The Http.sys completes the two posted receive IRPs using Web requests it retrieves from the buffer . In state C, the Http.sys moves the remaining Web request in the buffer  to the queue . In state D, the App Pool thread returns. At this time, there is one Web request in the queue . While the App Pool is processing, the TDI driver , which is interrupt driven, may place more Web requests into the buffer . In state E, the App Pool consumes the only Web request in the queue  through fast I\/O, and becomes starved for data again. In the meantime, the TDI continues adding Web requests to the buffer.","In the example illustrated in , the fast I\/O promotion has been implemented.  shows three states labeled A-C. Preferably, the App Pool will always find a data item in the queue  when doing a receive call. When a Web request is present in the queue , the receive call is completed immediately through fast I\/O. This can happen more frequently is an Http.sys thread is promoted when the App Pool is close to depleting the data in the queue . As shown in state A, the App Pool  checks the queue  and sees little data remaining in the queue. In response, the App Pool  yields its thread and boosts the priority of the Http.sys thread to make the Http.sys more likely to run. In state B, the Http.sys thread runs, and the Http.sys driver moves Web requests from the buffer  to the queue . When the App-Pool thread returns in state C, there are sufficient Web requests in the queue  for it to retrieve via fast I\/O. When the number of requests in the queue  becomes low again, the App Pool thread yields to another thread.","In view of the many possible embodiments to which the principles of this invention may be applied, it should be recognized that the embodiments described herein with respect to the drawing figures are meant to be illustrative only and should not be taken as limiting the scope of the invention. Therefore, the invention as described herein contemplates all such embodiments as may come within the scope of the following claims and equivalents thereof."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
