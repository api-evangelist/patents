---
title: Secure virtualization system software
abstract: Systems and methods for protecting a virtualization environment against malware. The methods involve intercepting an event in a kernel mode of the virtualization environment, suspending execution of the event, and transmitting the event to a user mode security module that determines whether the event should be blocked, allowed, or redirected. Events may be intercepted from any level of the virtualization environment, including an interrupt request table, device driver, OS object manager, OS service dispatch table, Portable Execution (P/E) import/export table, or binary code, among others. In one embodiment, an event may trigger a chain of related events, such that interception of an event without first intercepting an expected antecedent event is one indication of malware. The method also involves securing a virtual storage device against unauthorized access and providing for secure communication between guest OS and virtualization environment security modules.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09235705&OS=09235705&RS=09235705
owner: Wontok, Inc.
number: 09235705
owner_city: Palm Beach Gardens
owner_country: US
publication_date: 20090519
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["This non-provisional U.S. Patent Application claims the benefit of U.S. Provisional Patent Application No. 61\/054,321 entitled \u201cSYSTEM AND METHOD FOR PROVIDING A SECURE ENVIRONMENT FOR SOFTWARE VIRTUALIZATION SYSTEMS\u201d filed on May 19, 2008 by inventors Helmuth Freericks and Oleg Kouznetsov.","1. Statement of the Technical Field","The present invention relates to computing systems. More particularly, the present invention relates to systems and methods for providing secure virtualization system software.","2. Description of the Related Art","Virtualization software is transforming the way many companies provision and manage their computer systems and applications. Server and workstation virtualization software enables multiple operating systems and applications to execute on a single physical platform by sharing hardware resources. A virtualization environment, also known as a host operating system, master control system, or hypervisor, creates at least one virtual machine upon which a virtualized operating system (or \u201cguest operating system\u201d) executes. The virtualization environment manages resources including, but are not limited to, processing units, storage devices, graphics devices, and the like. The virtualized operating system is executed on a virtual machine through the use of hardware abstraction provided by the virtualization environment.","Despite the advantages of virtualization technology, there are certain drawbacks. For example, the virtualization environment does not protect data accessed, updated and transferred in a virtual machine against hackers and malware. The phrase \u201cmalware\u201d, as used herein, refers to software executing on a user device that performs operations solely to the benefit of an unauthorized third party or otherwise harmful to the user device. The virtualization environment also does not protect virtualized operating systems against hackers and malware.","As such, there is a need for systems and methods for protecting data accessed, updated and transferred in a virtualization environment. There is also a need for systems and methods for protecting virtualized operating systems against hackers and malware.","This summary is provided to comply with the requirements in 37 C.F.R. \u00a71.73, for presenting a summary of the invention briefly indicating the nature and substance of the invention. It is submitted with the understanding that it will not be used to interpret or limit the scope or meaning of the claims.","The invention concerns systems and methods for protecting a virtualization environment against malware. The methods involve intercepting an event in a kernel mode of the virtualization environment, suspending execution of the event, and transmitting the event to a user mode security module that determines whether the event should be blocked, allowed, or redirected. Events may be intercepted from any level of the virtualization environment, including an interrupt request table, device driver, OS object manager, OS service dispatch table, Portable Execution (P\/E) import\/export table, or binary code, among others. In one embodiment, an event may trigger a chain of related events, such that interception of an event without first intercepting an expected antecedent event is one indication of malware. The method also involves securing a virtual storage device against unauthorized access, and providing for secure communication between guest OS and virtualization environment security modules.","According to one aspect of the invention, a virtualization environment is protected against tampering by securely monitoring events with a System Monitor Toolkit (SMT) client. The SMT client may be a user mode application in communication with one or more SMT providers. In one embodiment, an SMT client manager operates with an SMT provider manager to manage communication between multiple SMT clients and multiple SMT providers. In one embodiment, SMT providers are kernel mode modules that hook into event sources throughout the hypervisor, typically at the request of an SMT client. Different SMT providers may hook into different hardware devices at different levels of the virtualization environment. Once an event is detected, an SMT provider may intercept and suspend the event. The SMT provider may then transmit the suspended event through the SMT provider manager and the SMT client manager to one or more SMT clients for processing, although the transmission may or may not include the SMT provider manager and\/or the SMT client manager. In one embodiment, an SMT client provides a security analysis, determining whether to bock, allow, or redirect the event.","In one embodiment, the SMT client determines whether the intercepted event constitutes a malware attack on the virtualization environment, in which case the event is typically blocked. To block an event, the SMT client may send an indication through the SMT client manager and the SMT provider manager to the SMT provider that intercepted the event, instructing the SMT provider to block the event from execution. Similarly, when the SMT client determines the event is not malicious, the SMT client typically instructs the intercepting SMT provider to resume execution of the suspended event. However, it is also considered that a non-intercepting SMT provider may block or resume the suspended event. When the SMT client determines the event is to be redirected, another module may be invoked to perform processing on the event before the event is blocked or allowed to continue. One example of redirection is to encrypt or decrypt data written to a storage device such as a hard disk drive.","Additionally or alternatively, an SMT client may receive an intercepted event from an SMT provider, and based on the type of event, perform some action in addition to or instead of blocking\/allowing\/redirecting the event. In one embodiment, the SMT client may deliver the event to the event's target, thereby redirecting the event from the virtualization environment directly to the event's target over a secure path.","SMT providers may be installed at various levels of the virtualization environment, enabling fine grained and low level event monitoring and analysis. For instance, SMT providers may be installed in the IRQ table of the virtualization environment, or at one or more levels within a device driver (either a hardware device driver, a kernel mode device driver, a filter driver, or the like). Additionally or alternatively, a high level monitoring and analysis also may be achieved by installing one or more SMT providers at higher levels in the virtualization environment, such as an OS executive layer. By allowing access to events at virtually all levels of the virtualization environment, an SMT client executing in user mode may be given a virtually complete picture of events, as well as control over these events, as they are being processed in the virtualization environment.","For instance, a user mode anti-virus software program may perform a security analysis, typically without executing kernel mode functions, utilizing virtually complete information and control of kernel mode events. This technique avoids the unique challenges of writing kernel level code such as kernel mode memory management, thereby expanding the number of potential developers capable of developing software applications that benefit from the knowledge of and\/or control of kernel mode events. Also, this technique enables development of richer applications by enabling developers to use the vast array of third party libraries and technologies available for user mode code. The following are examples of the typical software applications that may use the techniques described within this application: anti-spyware, anti-virus, on-the-fly encryption of data, firewall, and any other process, network, file, or registry related software functions.","According to another aspect of the invention, the SMT client manager may distribute a single event to more than one SMT client, each client having the ability to modify and\/or allow\/block\/redirect the event. For example, one SMT client may intercept storage device access events for the purpose of securing the virtualization environment. A second SMT client may also intercept storage device access events for the purpose of collecting and aggregating system data. The SMT client manager facilitates securely passing a single event to multiple SMT clients.","According to another aspect of the invention, the SMT client may install a persistent security system that protects the virtualization environment after a restart or reboot. Persistent security benefits the overall security of the system because user mode applications, such as an SMT client, generally start later in the boot process than the kernel mode SMT provider manager and SMT providers. Without persistent security, waiting for the user mode SMT client to initialize the security system may leave a potential window of vulnerability to malware. In one embodiment, installing a persistent security system includes storing a security policy on a shared database. Then, upon restarting the virtualization environment and the initialization of the SMT provider manager and\/or SMT provider, the SMT provider manager and\/or SMT provider may read these policies and implement the security features on behalf of the SMT client.","According to another aspect of the invention, the SMT client and\/or SMT provider may detect code that has been injected into the virtualization environment by scanning all of addressable memory for memory that is inaccessible. Inaccessible memory may then be traced to an image on disk, and analyzed for indications of malware. In one instance, when the image on disk is digitally signed, the image is presumed to not be malware, whereas an image that is not digitally signed may be suspected of being malware.","In one embodiment, the SMT client may verify the security of an intercepted event. For example, the SMT client may determine the source of the event based on: information in the event, a stack walk, or by inspecting the owner of associated virtualization environment objects such as threads, processes, semaphores, and the like. The source of the event may include an in memory image. The SMT client may locate an image stored on a storage device that is associated with the in memory image. If image stored on the storage device contains a digital signature or other indication of non-malware, the SMT client may determine that resuming the intercepted event is secure. If the image stored on the storage device is determined to be malware, the SMT client may block execution of the intercepted event.","According to another aspect of the invention, events in the virtualization environment may occur in one or more expected sequences. In this aspect, the SMT client may request that one or more SMT providers intercept and redirect multiple events in the same expected sequence. By monitoring events in an expected sequence\u2014typically generated at multiple levels in the virtualization environment\u2014the SMT client may be able to determine when an event is expected and therefore secure. Likewise, if the SMT client receives an event that is unexpected, and therefore potentially malware, the SMT client may block executing of the event.","According to another aspect of the invention, the SMT client may be authenticated against a digital certificate. Additionally or alternatively, the in-memory image of the SMT client may be compared against an on-disk image of the SMT client, where any differences may indicate the SMT has been patched in memory. If an SMT client does not match a digital certificate, or has been patched in memory, the SMT client may be terminated.","According to another aspect of the invention, A virtualized storage device image is protected from unauthorized access, updates, or transfers to another medium. One example virtualized storage device image is a virtualized hard drive image containing a guest OS and associated data. Traditional security systems, including traditional anti-virus programs, may be unaware that they are executing on a virtual machine. On a virtual machine, the \u201chard drive\u201d may appear to the guest OS and any other applications as a real, physical hard drive, but is in fact a virtual hard drive provided by the virtualization environment. This additional layer of virtualization provides a potential vulnerability, as malware may attempt to modify data in a virtual hard drive while outside the control of the guest OS. For instance, malware may attempt to monitor guest OS hard drive traffic while data is transferred from the virtual hard drive driver to the virtualization environment, as data is transferred from the virtualization environment to the real hard driver device driver, and\/or as data is transferred from the real hard drive device driver to the physical hard drive, among others. In one embodiment, SMT providers are hooked into these events. In this way, the SMT provider displaces and prevents any other attempts to hook into the system.","Malware may also attempt to read, write, and\/or modify data stored on the virtual hard drive by accessing the physical hard drive directly. In one embodiment, SMT providers intercept functions and events that may be used by malware to read, write, and\/or modify the contents of the virtual hard drive. Upon detecting that a hard drive access event is attempting to modify the virtualized hard driver, and the event does not originate from the virtual hard drive drivers of the guest OS, the hard drive access event is typically blocked.","In one embodiment, data stored to the virtual hard drive may be automatically encrypted, independent of any encryption operation performed by the guest OS or any application running thereon. Automatic encryption of data stored in the virtual hard drive further enhances security of the virtualization system. Similarly, an SMT provider and SMT client may redirect an event that reads encrypted data from the virtual hard drive to a decryption module, thereby enabling seamless encryption and decryption for the guest OS.","According to another aspect of the invention, security of the virtualization system is enhanced by facilitating communication between an SMT client in the virtualization environment and a security component executing on one or more guest OSs. In one embodiment, a guest OS may also be executing a system of SMT clients, SMT client managers, SMT provider managers, and SMT providers, to protect the guest OS from malware. In this case, there may be events intercepted on the guest OS that are unexpected or otherwise deemed to be malicious. In addition to the option of blocking these malicious events, the guest OS SMT client may communicate the existence and nature of the event to a virtualization environment SMT client. The virtualization environment SMT client, through a more complete view of the computing system, may seek to understand the cause of the event, inform SMT clients executing on other guest OSs of a potential vulnerability, and\/or terminate the guest OS.","Embodiments of the present invention also concern computer systems implementing the above described methods. The computer systems include a computer readable medium having instructions stored thereon and a processing device communicatively coupled to the computer readable medium. The processing device is configured for executing the instructions that cause the computer system to execute the trusted secure desktop simultaneously with an unsecure desktop, execute the first end user application on the trusted secure desktop, and performing one or more security service operations to protect the first end user application against malware.","The present invention is described with reference to the attached figures, wherein like reference numbers are used throughout the figures to designate similar or equivalent elements. The figures are not drawn to scale and they are provided merely to illustrate the instant invention. Several aspects of the invention are described below with reference to example applications for illustration. It should be understood that numerous specific details, relationships, and methods are set forth to provide a full understanding of the invention. One having ordinary skill in the relevant art, however, will readily recognize that the invention can be practiced without one or more of the specific details or with other methods. In other instances, well-known structures or operation are not shown in detail to avoid obscuring the invention. The present invention is not limited by the illustrated ordering of acts or events, as some acts may occur in different orders and\/or concurrently with other acts or events. Furthermore, not all illustrated acts or events are required to implement a methodology in accordance with the present invention.","The word \u201cexemplary\u201d is used herein to mean serving as an example, instance, or illustration. Any aspect or design described herein as \u201cexemplary\u201d is not necessarily to be construed as preferred or advantageous over other aspects or designs. Rather, use of the word exemplary is intended to present concepts in a concrete fashion. As used in this application, the term \u201cor\u201d is intended to mean an inclusive \u201cor\u201d rather than an exclusive \u201cor\u201d. That is, unless specified otherwise, or clear from context, \u201cX employs A or B\u201d is intended to mean any of the natural inclusive permutations. That is if, X employs A; X employs B; or X employs both A and B, then \u201cX employs A or B\u201d is satisfied under any of the foregoing instances.","Illustrative Operating Environment",{"@attributes":{"id":"p-0039","num":"0038"},"figref":["FIG. 1","FIG. 1"],"b":["100","100"]},"As shown in the figure, system  includes computing device , network , and malicious code (or malware) . Computing device  further includes computing device hardware , including storage device  which contains virtual storage device . Computing device  further includes virtualization environment security module  for protecting virtualization environment . Virtualization environment  multiplexes, or virtualizes, the computing device hardware , enabling multiple guest operating systems, such as guest operating system  and guest operating system , to execute in parallel on a single physical computer. Further, guest operating system  and  may be protected by guest operating system security module  and guest operating system security module , respectively.","Generally, computing device  may include virtually any computing device. In one embodiment, computing device  may include a server computer, workstation computer, personal computer, multiprocessor system, microprocessor-based or programmable consumer electronic, network device, and the like. As such, computing device  may range widely in terms of capabilities and features. For example, a computing device may be configured to execute high throughput applications in a commercial web server, or a computing device may be a home computer for running desktop applications.","Network  is configured to couple one computing device with another computing device. Network  may be enabled to employ any form of computer readable media for communicating information from one electronic device to another. Also, network  can include the Internet in addition to local area networks (LANs), wide area networks (WANs), direct connections, such as through a universal serial bus (USB) port, other forms of computer-based media, or any combination thereof. On an interconnected set of LANs, including those based on differing architectures and protocols, a router acts as a link between LANs, enabling messages to be sent from one to another. Also, communication links within LANs typically include twisted wire pair or coaxial cable, while communication links between networks may utilize analog telephone lines, full or fractional dedicated digital lines including T1, T2, T3, and T4, Integrated Services Digital Networks (ISDNs), Digital Subscriber Lines (DSLs), wireless links including satellite links, or other communications links known to those skilled in the art. Furthermore, remote computers and other related electronic devices could be remotely connected to either LANs or WANs via a modem and temporary telephone link.","Computing device  may request and\/or receive data, video, applications, or the like over the network . Computing device may also be exposed to malicious code  via network . Malicious code may attempt to gain access to the computing device  in a variety of ways, including a Trojan horse, cross site scripting vulnerability, or remote exploit. Malicious code  may be introduced to the computing device  by means other than the network . For example, physical media, such as a compact disc, DVD-ROM, flash memory drive, removable hard driver, may act as a vector to introduce malicious code  to the computing device .","Computing device hardware  generally includes the tangible components of computing device , and are described in greater detail with relation to . Storage device  may include a hard drive, flash memory drive, removable media such as a CD-ROM or DVD-ROM drive, among others. In a non-virtualized environment, an operating system controls physical hardware devices, such as storage device , directly. In a virtualized environment, however, each guest operating system typically requires a separate virtual storage device, such as virtual storage device . Guest operating system , for instance, may be presented with virtual storage device  as if virtual storage device  were a physical hard drive. In fact, guest operating system  shares storage device  with other guest operating systems, as well as the virtualization environment . Given this shared access, malware installed in the virtualization environment may attempt to access or modify data stored on virtual storage device  through storage device . Typically, access is not granted by the virtualization environment security module ","Virtualization environment , also known as a host operating system, hypervisor, master control system, or the like, controls the computing device hardware , and exposes the available hardware resources to one or more guest operating systems, so that it appears to each guest operating system that it is running on a dedicated computing device. The virtualization environment  may completely emulate a computing device, such that a guest operating system typically would not directly access the physical computing device hardware . In another embodiment, the virtualization environment  may embody a \u201cbare metal\u201d hypervisor, providing a thin virtualization layer that enables a greater amount of direct hardware access by guest operating systems, and a minimum of indirection and emulation. Also, the virtualization environment  may embody a stand-alone operating system that has been modified to enable virtualization of hardware resources, or the virtualization environment may embody a hypervisor that primarily virtualizes hardware resources, but is not itself a traditional operating system.","Virtualization environment security module  enhances the security of the virtualization environment  and the guest operating systems  and . In one embodiment, the virtualization environment security module  intercepts kernel and user mode events received in or originating in the virtualization environment . These intercepted events may be suspended and evaluated for evidence of malware or other malicious code. In one embodiment, kernel and user mode events are exposed through an API to the user mode of the virtualization environment , enabling a wide range of security software to access a fine grained, low level of access to the intercepted events. Event interception, suspension, and security analysis is discussed in more detail with respect to .","In another embodiment, the virtualization environment security module  secures access to the virtual storage device , preventing malware from monitoring or modifying data as it is copied from a guest operating system to the virtual storage device. Alternatively or additionally, the virtualization environment security module  denies access to data stored on the virtual storage device  by limiting access to the corresponding guest operating system. Protection of the virtual storage device  is discussed in more detail with respect to .","In another embodiment, the virtualization environment security module  enhances security by communicating security information between itself and the guest operating system security modules  and . In one embodiment, guest operating system security modules  and  employ methods to identify malware executing in the guest operating systems  and , respectively. Once malware or potential malware has been identified, the guest operating system security modules  and  may communicate the existence or potential existence of malware to the virtualization environment security module . Upon receiving this communication, the virtualization environment security module  may alert other guest operating system security modules of the presence of malware in another guest OS, attempt to discover the source of the malware, or terminate the guest OS executing the malware. Enhancing security by enabling communication between security modules in the virtualization environment and guest operating systems is discussed in more detail with respect to .",{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 2","b":"102"},"Computing device  includes at least one central processing unit (CPU) , video display adapter , and a mass memory, all in communication with each other via bus . The mass memory generally includes memory (RAM) , ROM , and one or more permanent mass storage devices, such as storage device , hard drive, tape drive, optical drive, and\/or floppy disk drive. The mass memory stores virtualization environment  for controlling, in combination with guest OS  and guest OS , the operation of computing device .","As illustrated in , computing device  also can communicate with the Internet, or some other communications network via network interface unit , which is constructed for use with various communication protocols including the IP protocol. Network interface unit  is sometimes known as a transceiver, transceiving device, or network interface card (NIC).","The mass memory , , , and  described herein and shown in  illustrates another type of computer-readable media, namely computer readable, machine readable storage media, or processor readable storage media. Computer readable storage media may include volatile, nonvolatile, removable, and non-removable media implemented in any method or technology for storage of information, such as computer readable instructions, or machine-readable instructions, data structures, program modules, or other data, which may be obtained and\/or executed by at least one central processing unit  to perform one or more portions of the processes described below in more detail in conjunction with FIGS.  and -. Examples of computer readable storage media include RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information, including data and\/or computer executable instructions, and which can be accessed by a computing device.","The mass memory may also store other types of program code and data such as virtualization environment security module , which may be loaded into mass memory and run on virtualization environment . The mass memory may also store guest operating system security modules  and , which may be are loaded into mass memory and run on guest operating systems  and , respectively. Examples of virtualization environment security module  includes VirtProt\u00ae by Authenitum\u00ae corporation. Each of the virtualization environment  and the guest operating systems  and  may also execute email client\/server programs, routing programs, schedulers, web servers, calendars, database programs, word processing programs, HTTP programs, RTSP programs, additional security programs, and any other type of application program.","Computing device  may also include input\/output interface  for communicating with external devices, such as a mouse, keyboard, scanner, or other input\/output devices not shown in . Likewise, computing device  may further include additional mass storage facilities such as cd-rom\/dvd-rom optical disk drive . Storage device  may be utilized to store virtual storage device , among other things, including application programs, databases, and the like in the same manner as the other mass memory components described above.","Referring now to , there is provided an exemplary software architecture for the computing device , including the virtualization environment  and guest operating systems. As shown in , the software architecture can include levels of software programs. The software architecture includes device drivers , , , , an Input\/Output (I\/O) Driver Stack software , virtualization environment security module (not shown, but composed in part of kernel mode core security software  and user mode core security software ), virtualization platform software , applications  and guest OS software , . . . , . The software components , , , , ,  of the software architecture are well known to persons having ordinary skill in the art. Thus, the software components , , , , ,  will not be described in detail herein. However, a brief description of the software architecture is provided to assist a reader in understanding the present invention.","Each of the device drivers , , ,  is software used to facilitate communications between the virtualization environment and hardware components (e.g., hardware components , , , ,  and\/or  described above in relation to ). The device drivers , , ,  can include code for managing access to hardware components, setting hardware component parameters and transmitting data between hardware components.","The keyboard filter driver  is a device driver software program that the virtualization environment uses to facilitate communications between keyboard hardware . The keyboard filter driver  connects to the keyboard hardware  via a respective connection . The display driver  is a device driver software program that the virtualization environment uses to facilitate communications between display hardware . The display driver  connects to the display hardware  via a respective connection . The storage device driver  is a device driver software program that the virtualization environment uses to facilitate communications between storage device . The storage device driver  connects to the storage device  via a respective connection . The memory driver  is a device driver software program that the virtualization environment uses to facilitate communications between memory . The memory driver  connects to the memory  via a respective connection . The device drivers , , ,  facilitate communication between the virtualization environment and hardware devices via the I\/O driver stack software  and the kernel mode core security software . The kernel mode core security software  generally protects the virtualization environment and applications ,  against hackers and malware.","The virtualization environment is system software responsible for the direct control and management of the computing device  hardware (e.g., hardware components , , , ,  and\/or  described above in relation to ). The virtualization environment may be a host OS, a hypervisor, or a master control system. Typically, the virtualization environment manages basic computing device  operations, such as loading and running software applications , . The virtualization environment is also system software responsible for enabling a user to control hardware coupled to the computing device . The virtualization environment can also include instructions to install, launch and manage applications  and . The virtualization environment is typically stored in memory (e.g., memory  described above in relation to ) which may be a ROM, hard drive or other storage device.","As shown in , the software architecture includes core security software  and . The core security software ,  include includes kernel mode core security software  and user mode core security software . The core security software  is generally operative to perform kernel mode event monitoring operations and kernel mode event interception operations. Similarly, the core security software  is generally operative to perform user event mode monitoring operations and user mode event interception operations. The core security software  includes System Monitor Toolkit (SMT) provider manager software  and SMT provider software , . . . , that executes in kernel mode. The core security software  includes SMT client manager software  that executes in user mode. The phrase \u201cuser mode\u201d, as used herein, refers to a state in which a process runs application code (e.g., end-user application code) rather than kernel code (e.g., device driver code and platform service code). The phrase \u201ckernel mode\u201d, as used herein, refers to a state in which a process runs kernel code (e.g., device driver code, platform service code, and other kernel code that allows full access to the client computer  system).","The SMT providers , . . . , can generally be standalone software modules which execute in kernel mode while providing interception of specific kernel mode events. Each of the SMT providers , . . . , respectively intercept kernel mode events that belong to the same or similar class. For example, the SMT provider software is classified as File System SMT provider software that can intercept Network Input\/Output (I\/O) requests. Embodiments of the present invention are not limited in this regard. The SMT provider software , . . . , can include C Libraries of Binary Interception and Instrumentation (not shown) and C Run-Time Libraries (not shown). C Libraries of Binary Interception and Instrumentation (not shown) are well known to those having ordinary skill in the art, and therefore will not be described herein. Similarly, C Run-Time Libraries (not shown) are well known to those having ordinary skill in the art, and therefore will not be described herein.","The SMT provider manager software  is a driver or other software component that executes in kernel mode while performing registration operations for registration of the SMT provider software , . . . , and un-registration operations for un-registration of the SMT provider software , . . . , . The SMT provider manager software  supplies the SMT provider software , . . . , with a unified interface for intercepting kernel mode events, accessing a Common Information Model (CIM) library, accessing a CIM repository, delivering intercepted kernel mode events to SMT clients and other applications, and receiving processed data about the intercepted kernel mode events from the SMT clients and other applications. The phrase \u201cCommon Information Model\u201d, as used herein, refers to an object oriented information model that provides a conceptual framework for describing management data, as specified by the Distributed Management Task Force, Inc.'s (DMTF) Common Information Model (CIM) Standard. The DMTF CIM Standard is well known to those having ordinary skill in the art, and therefore will not be described herein.","The SMT client manager software  is a service or other software component that executes in user mode while managing various the applications . The SMT client manager software  communicates with the applications  via predefined protocols, such as Local Procedure Calls (LPCs), Remote Procedure Calls (RPCs), CPU hypervisor instruction manipulation, Transmission Control Protocols\/Internet (TCP\/IP) protocols, memory mapping, and file I\/O. These protocols are well known to those having ordinary skill in the art, and therefore will not be described herein.","The applications  can directly interface the core security software  using an Application Programming Interface (API) using predefined protocols. The predefined protocols can include, but are not limited to, LPCs, RPCs, and TCP\/IP protocols, memory mapping, file I\/O, and CPU hypervisor instructions. APIs are well known to those having ordinary skill in the art, and therefore will not be described herein. The applications  can provide a variety of functionalities to the end-user, such as data input functions, spreadsheet functions and word processor functions. The phrase \u201cend-user\u201d, as used herein, refers to a person or persons using a device the enables him or them to use the present invention. The applications  can be validated against a required digital signature before being allowed to interface with the core security software .","The virtualization platform software (or hypervisor)  is generally operative to communicate with the core security software , . The virtualization platform software (or hypervisor)  is also generally operative to allow multiple guest operating systems to concurrently run on the host computing device . In this regard, the virtualization platform software (or hypervisor)  is operative to intercept some, or all, guest operating system calls to hardware. The virtualization platform software (or hypervisor)  virtualizes at least one hardware component of the computing device . For example, the virtualization platform software (or hypervisor)  virtualizes the CPU  and the memory  shown in . Embodiments of the present invention are not limited in this regard. The virtualization platform software (or hypervisor)  is also operative to create, manage and destroy virtual machines, also known as partitions. The term \u201cpartition\u201d, as used herein, refers to an abstract container that consists of isolated processor and memory resources.","The guest operating system software components , . . . , run on top of virtual machines created by the virtualization platform software (or hypervisor) . The guest operating system software components , . . . , are protected from each other such that software errors on one virtual machine cannot affect the correct operation of any of the other virtual machines. Each of the guest operating system software components , . . . , includes virtualized I\/O driver(s) , guest operating system security module (not shown, but including kernel mode core security software , user mode SMT manager , and SMT client ) and applications . The software components  and  are well known to those having ordinary skill in the art, and therefore will not be described herein.","The kernel mode core security software  is the same as or substantially similar to the kernel mode core security software  described above. As such, the above description of the kernel mode core security software  is sufficient for understanding the kernel mode core security software . Similarly, the user mode SMT client manager  and SMT client  are the same as or substantially similar to the user mode core security software  described above. As such, the above description of the user mode core security software  is sufficient for understanding the user mode SMT client manager  and the SMT client . However, the SMT provider manager of the kernel mode security software  further supplies the SMT providers (not shown) with a unified interface for delivering intercepted kernel mode events in the guest OS to the security software , and receiving processed data about the intercepted kernel mode events from the security software . Also, the SMT client manager  of the user mode security software is configured to communicate with the SMT client manager  running on the virtualization environment.","The user mode SMT client  is operative to use information provided by the guest OS in real-time while having the ability to employ a wide range of functionality. The wide range of functionality includes, but is not limited to, monitoring File I\/O kernel mode requests, granting File I\/O kernel mode requests, denying File I\/O kernel mode requests, and accessing registries. If the guest OS is a Windows operating system, then the user mode SMT client  can be standard WIN32 or WIN64 applications. WIN32 and WIN64 applications are well known to those having ordinary skill in the art, and therefore will not be described herein. The SMT client  can directly interface the user mode core security software using an API using predefined protocols. The predefined protocols can include, but are not limited to, LPCs, RPCs, and TCP\/IP protocols, memory mapping, file I\/O, and CPU hypervisor instructions. The SMT client  can provide a range of functionalities to an end-user, such as data input functions, spreadsheet functions, and\/or word processor functions. The SMT client  can be validated against a required digital signature before being allowed to interface with the user mode SMT manager .","Referring now to , there is provided a more detailed example embodiment of virtualization environment . In one embodiment, events propagate from event sources, such as memory , storage device , network , and keyboard , and the like, through different levels of the virtualization environment. In one embodiment, an illustrative sequence of events is triggered in an Interrupt Request (IRQ) table , typically in response to some action being taken on a hardware device, although other sources of events such as software applications are similarly considered. The event may then be passed to a device driver , such as a Hardware Abstraction Layer (HAL) device driver, a kernel mode device driver, a filter driver, or the like. In one embodiment, multiple device drivers may process the event, or there may be multiple stages of execution within a single device driver such that the event may be intercepted at more than one point in the device driver . Additionally or alternatively, the event may be passed to an object manager , a service dispatch table , a Portable Executable (P\/E) import or export table , and a binary code . As the sequence of events occurs, SMT providers , . . . may intercept and suspend execution of the event, passing the event through the SMT provider manager  to the SMT Client manager  and SMT clients (not shown) for processing.","In one embodiment, SMT providers , . . . and\/or SMT provider manager  may block the execution of explicitly malicious events. For example, any event that attempts to inject code into the virtualization environment , such as by loading a library into a process, will be blocked. SMT providers , . . . may block code injection with or without the cooperation of an SMT client.","Referring now to , there is provided a more detailed example embodiment  of protecting the virtual storage device  stored on the storage device . In one embodiment, SMT providers , . . . are hooked directly into the levels  . . .  of the I\/O driver stack software . In this way, the SMT provider displaces and prevents any other attempts to hook into the system. The SMT providers , . . . communicate intercepted events through SMT provider manager  to SMT client manager to SMT clients (not shown) for processing as discussed above.","Malware may also attempt to read, write, and\/or modify data stored on the virtual storage device  by accessing the physical storage device  directly. In one embodiment, SMT providers intercept functions and events that may be used by malware to read, write, and\/or modify the contents of the virtual storage device . In one embodiment, access to the virtual storage device  is only allowed to the hypervisor  executing on behalf of a virtual storage device driver  and application .","Referring now to , According to another aspect  of the invention, security of the virtualization environment  is enhanced by facilitating communication between an SMT client , . . . on the virtualization environment  and a security component such as SMT client manager  and SMT clients (not shown) on guest OS . In one embodiment, applications  access hardware resources through virtual display driver , virtual storage device driver , and virtual memory driver . SMT providers\/clients executing on the guest OS  may intercept events that are unexpected or otherwise deemed to be malicious. In addition to the option of blocking these malicious events, the guest OS SMT client manager  or SMT clients (not shown) may communicate the existence and nature of the malicious event to the SMT client manager . The SMT client manager  and SMT clients , . . . , through a more complete view of the computing system, may seek to understand the cause of the event, inform SMT clients executing on other guest OSs of a potential vulnerability, and\/or terminate the guest OS.","Generalized Operation","The operation of certain aspects of the invention will now be described with respect to .  illustrates a logical flow diagram generally showing one embodiment of a process for determining whether to execute an event. Process  of  and process  of  may be implemented within virtualization environment security module  of .","Process  begins, after a start block, at block , where a kernel mode event is suspended by an SMT provider in kernel mode. Processing continues next to block , where the event is made available to a security module. In one embodiment, the security module is an SMT client executing in user mode of the virtualization environment. In one embodiment, the suspended event includes a user mode event.","At block , it is determined whether the event originates from code that is secure to execute, and should be allowed to execute, or if the event is the execution of malware, and should be blocked.","At block , if it was determined that the event originated from code that is secure, then the SMT provider may resume execution of the event.","At block , if it was determined that the event originated from code that is the execution of malware, then the SMT provider may block execution of the event.","Process  begins, after a start block, at block , where a kernel mode event associated with storage device access is received. At block  the received event is suspended by an SMT provider. Processing continues next to block , where the event is made available to a security module. In one embodiment, the security module is an SMT client executing in user mode of the virtualization environment.","At block , it is determined whether the event originates from code that is secure to execute, and should be allowed to execute, or if the event is the execution of malware, and should be blocked.","At block , if it was determined that the event originated from code that is secure, then the SMT provider may resume execution of the event.","At block , if it was determined that the event originated from code that is the execution of malware, then the SMT provider may block execution of the event.","In light of the forgoing description of the invention, it should be recognized that the present invention can be realized in hardware, software, or a combination of hardware and software. A method for providing a trusted secure desktop according to the present invention can be realized in a centralized fashion in one processing system, or in a distributed fashion where different elements are spread across several interconnected processing systems. Any kind of computer system, or other apparatus adapted for carrying out the methods described herein, is suited. A typical combination of hardware and software could be a general purpose computer processor, with a computer program that, when being loaded and executed, controls the computer processor such that it carries out the methods described herein. Of course, an application specific integrated circuit (ASIC), and\/or a field programmable gate array (FPGA) could also be used to achieve a similar result.","Applicants present certain theoretical aspects above that are believed to be accurate that appear to explain observations made regarding embodiments of the invention. However, embodiments of the invention may be practiced without the theoretical aspects presented. Moreover, the theoretical aspects are presented with the understanding that Applicants do not seek to be bound by the theory presented.","While various embodiments of the present invention have been described above, it should be understood that they have been presented by way of example only, and not limitation. Numerous changes to the disclosed embodiments can be made in accordance with the disclosure herein without departing from the spirit or scope of the invention. Thus, the breadth and scope of the present invention should not be limited by any of the above described embodiments. Rather, the scope of the invention should be defined in accordance with the following claims and their equivalents.","Although the invention has been illustrated and described with respect to one or more implementations, equivalent alterations and modifications will occur to others skilled in the art upon the reading and understanding of this specification and the annexed drawings. In addition, while a particular feature of the invention may have been disclosed with respect to only one of several implementations, such feature may be combined with one or more other features of the other implementations as may be desired and advantageous for any given or particular application.","The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein, the singular forms \u201ca\u201d, \u201can\u201d and \u201cthe\u201d are intended to include the plural forms as well, unless the context clearly indicates otherwise. Furthermore, to the extent that the terms \u201cincluding\u201d, \u201cincludes\u201d, \u201chaving\u201d, \u201chas\u201d, \u201cwith\u201d, or variants thereof are used in either the detailed description and\/or the claims, such terms are intended to be inclusive in a manner similar to the term \u201ccomprising.\u201d","Unless otherwise defined, all terms (including technical and scientific terms) used herein have the same meaning as commonly understood by one of ordinary skill in the art to which this invention belongs. It will be further understood that terms, such as those defined in commonly used dictionaries, should be interpreted as having a meaning that is consistent with their meaning in the context of the relevant art and will not be interpreted in an idealized or overly formal sense unless expressly so defined herein."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Embodiments will be described with reference to the following drawing figures, in which like numerals represent like items throughout the figures, and in which:",{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
