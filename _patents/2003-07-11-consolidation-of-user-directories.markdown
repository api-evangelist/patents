---
title: Consolidation of user directories
abstract: A method for automatic user authentication is described. In response to a coupling of a separate hardware security device to a data processing system, credential information for each of a plurality of applications that the user uses is received from the separate hardware security device into an authentication credential container associated with the user. A plurality of applications accessible by a user are identified by examining authentication credential container of the user. A view of the plurality of applications accessible by the user is generated. The view is a consolidated user directory that contains user authentication information across the plurality of applications. The view may then be displayed to an administrator.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08051470&OS=08051470&RS=08051470
owner: International Business Machines Corporation
number: 08051470
owner_city: Armonk
owner_country: US
publication_date: 20030711
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"p":["This application is a Continuation-in-part of U.S. patent application Ser. No. 10\/383,419, filed Mar. 6, 2003 now abandoned and hereby claims the foreign priority benefit under 35 U.S.C. 365(b) of corresponding Singapore Patent Application Serial No. 200207526-5, filed Dec. 12, 2002 and corresponding PCT Application PCT\/SG03\/00114, filed May 16, 2003.","The present invention pertains to the field of secure networks and computing devices. More particularly, the present invention relates to automatic user authentication.","With rapid growth of Internet and networks, the popularity of Internet technology rises among users of network services. In order to provide secure access to network services, user names and passwords are utilized to authenticate the user logging into a system providing particular network services. Users may accesses several applications, each with its own separate authentication mechanism causing the user to remember multiple user names and passwords. Due to this inconvenience users usually utilize the same user name and password for multiple applications that they access. In addition, users choose easy to remember passwords, which usually are easy to crack by hackers. Cracking of one password for an account breaches other accounts with the same user name and password. Network setups such as wireless Local Area Networks, remote access features, and weak intrusion protection increase vulnerability of passwords to technical attacks by hackers.","Many hackers are able to trick users by posing as system administrators causing the users to voluntarily provide the hackers with their passwords and user names.","Due to multiple accounts and multiple passwords that users maintain, password management for system administrators becomes a tedious and sometimes burdensome task. Resetting forgotten and compromised passwords, disabling all accounts of a departing employee are examples of tasks that system administrators need to perform in order to manage passwords of existing accounts in the system. Inaccurate password management may lead to security breaches, such as failing to delete a password of a fired employee may allow that employee to access network areas that that employee should not be accessing anymore.","Further, even if passwords are correctly managed, using passwords correctly for authenticating users is fundamentally vulnerable to various attacks from anywhere on the Internet. One of the best ways to lower the population of potential attackers is to use a certificate-based authentication mechanism with private keys stored on physical tokens. The process of transitioning from password-based authentication to token\/certificate-based authentication is a complex process. However, it is a transition process that all enterprises serious about digital security need to undertake.","What is needed, therefore, is a solution that overcomes these and other shortcomings of the prior art.","A method and apparatus for automatic user authentication are described. The method may include identifying a plurality of applications accessible by a user by examining authentication credential container of the user. The method may also include generating a view of the plurality of applications accessible by the user.","A method and apparatus for user authentication is described. Note that in this description, references to \u201cone embodiment\u201d or \u201can embodiment\u201d mean that the feature being referred to is included in at least one embodiment of the present invention. Further, separate references to \u201cone embodiment\u201d in this description do not necessarily refer to the same embodiment; however, neither are such embodiments mutually exclusive, unless so stated and except as will be readily apparent to those skilled in the art. Thus, the present invention can include any variety of combinations and\/or integrations of the embodiments described herein.","The present invention discloses a method and system for authenticating user via physicalization of user credentials. Passwords and usernames of a user are stored in a device and automatically provided to corresponding applications that the user is attempting to access.","It will be appreciated that the term \u201cplayback\u201d, as used herein, means automatically inserting stored user authentication information into appropriate applications. The term \u201cclient machine\u201d, as used herein, means a processing system hosting a Secure Object for Convenient Identification.[LBK1]","Related Technology","Introduction to related technology may be helpful in understanding some embodiments of the invention.","One embodiment of the invention utilizes Simple Object Access Protocol (SOAP). SOAP is a message-based protocol based on Extensible Markup Language (XML) for accessing services on the Web. SOAP employs XML syntax to send text commands using HTTP.","One embodiment of the invention utilizes HyperText Transfer Protocol Secure (HTTPS). HTTPS is a protocol for accessing secure Web servers. Using HTTPS in a Uniform Resource Locator (URL) instead of HTTP directs the message to a secure port number rather than to a default port number.","Exemplary Architecture",{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 1","FIG. 2"],"b":["100","110","100","120","100","200","205","200","200","210","200","215","200","220","200","225","200","200","230","235","200","200","240","240","260","265","270","275","260","265","270","275","200","245","250","255"]},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 3","b":["300","300","300","310","300","315","320","315","300"]},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 4","b":["400","410","415","420","425","400","426","410","430","430"]},"The synchronization services module  includes synchronization module , update module  and escrow module . The synchronization module  synchronizes data on SOCIs with a copy on the IMS in order to maintain consistency between the data. The update module  updates software and data on the SOCI by downloading it to the SOCIs via the client machine hosting the SOCIs. For example, the update module  may download software upgrades, access scripts for common applications, administrator-maintained client configuration, etc. The escrow module  stores sensitive information on behalf of users for future recovery. The escrow module  stores the Common Symmetric Key (CSK) in an encrypted form. In a situation where all SOCIs are lost and data is not recoverable from any of these devices, the encrypted data stored in IMS can be recovered by restoring CSK from the escrow module . The escrow module  may keep the CSK of the SOCI in an encrypted form that is recoverable when IMS's private key is provided to the escrow module  and the user presents a predetermined password phrase. CSK is an encryption key used to encrypt user's authentication information such as user's passwords. Every SOCI device that belongs to the same user has the same CSK so that information encrypted by on SOCI can be decrypted by another SOCI belonging to the same user.","The backend services module  includes certificate management module  and data module . Certificate management module  issues new certificates, revokes certificates and maintains Certificate Revocation Lists (CRLs) for certificate validity verification. The data module  provides other IMS modules with access to the data stored in IMS databases. IMS database may reside in Relations Database Management System (RDBMS), directory server or a simple file system. The databases contain information about SOCI devices that the user owns, such as serial number and issued certificate. The databases may also include information about the user, such as applications that the user accesses, encrypted passwords and configuration data.","The administration services module  includes user administration module . The user administration module  allows the administrator of the system to create new user accounts, delete existing accounts, assign roles to users, i.e. specify users with administration authorization, bind users to accounts, i.e. email accounts. In addition, the administration module  allows the administrators to configure SOCIs before distribution, create new key pairs, i.e. public and private keys, revoke existing certificates and keys. Generation of public and private key pairs may be performed in SOCIs. Public keys can then be stored in a certificate issued by IMS. Theses certificates, together with private keys stored in SOCI can be used to authenticate SOCI to IMS in order to retrieve data. In addition, certificates along with private keys may also be used to authenticate user to applications that utilize certificate-based authentication mechanisms.","The physical processing platforms that embody the Access Agent and IMS may include processing systems such as conventional personal computers (PCs) and\/or server-class computer systems according to various embodiments of the invention.  illustrates an example of such a processing system at a high level. The processing system of  includes one or more processors , read-only memory (ROM) , random access memory (RAM) , and a mass storage device  coupled to each other on a bus system . The bus system  includes one or more buses, which may be connected to each other through various bridges, controllers and\/or adapters, which are well known in the art. For example, the bus system  may include a \u2018system bus\u2019, which may be connected through an adapter to one or more expansion, such as a peripheral component interconnect (PCI) bus or an extended industry standard architecture (EISA) bus. Also coupled to the bus system  are a the mass storage device , one or more input\/output (I\/O) devices  and one or more data communication devices  to communicate with remote processing systems via one or more communication links  and , respectively. The I\/O devices  may include, for example, any one or more of a display device, a keyboard, a pointing device (e.g., mouse, touchpad, trackball), an audio speaker.","The processor(s)  may include one or more conventional general-purpose or special-purpose programmable microprocessors, digital signal processors (DSPs), application specific integrated circuits (ASICs), or programmable logic devices (PLD), or a combination of such devices. The mass storage device  may include any one or more devices suitable for storing large volumes of data in a non-volatile manner, such as magnetic disk or tape, magneto-optical storage device, or any of various types of Digital Video Disk (DVD) or Compact Disk (CD) based storage or a combination of such devices.","The data communication device(s)  each may be any devices suitable for enabling the processing system to communicate data with a remote processing system over a data communication link, such as a wireless transceiver or a conventional telephone modem, a wireless modem, an Integrated Services Digital Network (ISDN) adapter, a Digital Subscriber Line (DSL) modem, a cable modem, a satellite transceiver, an Ethernet adapter, or the like.","Methodology","With theses concepts in mind embodiments of the invention can be further explored.","Startup Procedure","In order for a user to be automatically authenticated for each application that the user attempts to access, the Access Agent  can be executing on the user's machine, i.e. client machine. The startup procedure will be described with reference to . At  the session management module  is executed upon the boot up of the client machine. The session management module  interacts with a logon procedure of the operating system to handle initialization procedures. The initialization procedures are the following. The session management module invokes the AA controller . Upon initialization, the AA controller  at  directs the session management module  to start a thread, which may poll USB ports of the client machine. The polling thread identifies whether an SOCI is present in any of the USB ports. If the polling thread does not identify the SOCI, the session management module  at  prompts the user to insert the SOCI and awaits for the insertion of the SOCI by periodically polling the USB ports. If the polling thread identifies that SOCI is already connected to the USB port or if the new SOCI has been inserted, the session management module  displays a dialogue box prompting the user for a personal identification number (PIN). Upon the user entering the PIN, the session management module  at  invokes the SOCI management module  to verify the entered PIN. If the PIN is successfully verified the SOCI management module  provides the session management module  with the operating system login and password information of the user at . For example, if the client machine is running Windows Operating System, the SOCI management module  provides the session management module  with Windows Login ID and Windows Password. In one embodiment the operating system login identification and password data are encrypted and stored in the SOCI and retrieved by the SOCI management module  via SOCI APIs. The user may have several operating system login identifications and passwords and in this case the user may be presented with a pull down menu to select the login ID and password for the current session. At  upon determining and decrypting the login ID and password, the session management module  inserts the ID and password into the operating system logon procedure.","After successful logon, the session management module  invokes the user interface module , invokes the sniffer module  and the synchronization module .","SOCI Initialization","In one embodiment upon insertion of the SOCI, a setup program located in the flash memory of the SOCI is executed to determine whether the Access Agent  is installed on the client machine. If the Access Agent is not installed on the client machine, the setup program locates the download server to download the access agent installer module. The setup program may contain a default location of the installer module. If the setup program fails to locate the installer for download, the setup program prompts the user for location of the installer or for an insertion of a diskette or CD-ROM including the installer module. Upon installation of the installer, the user is prompted to enter an SOCI personal identification number (PIN) and password. PIN of the SOCI is distributed with the SOCI. User can change the PIN after obtaining access to the SOCI upon entering the original PIN. Upon the user entering the PIN and password, the installer transmits the PIN and password data to the IMS. In one embodiment data transmitted to the IMS includes SOCI identification number retrieved from the SOCI device, SOCI properties, SOCI public keys, encrypted Common Symmetric Key (CSK). Upon receiving the data, the IMS creates a new user account and registers the SOCI with the account. The IMS generates a new certificate and transmits the certificate to the Access Agent which stores the certificate in the SOCI. The IMS may also encrypt the CSK with a key derived from the SOCI password and further encrypt the CSK with the IMS's public key. In one embodiment, the server's public key is stored on a separate secure server, or stored in a hardware key device.","Automated Authentication","In one embodiment the sniffer module  of the Access Agent  executes in the background at the client machine and identifies user's login, logout, change of password activities and records the procedures in a form of an access script. The access scripts are encrypted and stored in the SOCI and the IMS server. The sniffer module  captures operating system messages for various applications and identifies whether any of the captured messages comprise user authentication data. If the sniffer module  identifies the user authentication application data for a particular application, the sniffer module  stores the information in the SOCI. Upon identifying the user authentication application, the sniffer module  generates access scripts to be played back when the user attempts to access an application requiring authentication information. When the user attempts to access the application, the sniffer module  determines whether an access script exists for the application. If the access script exists, the sniffer module  injects the authentication information into the login procedure of the application. If the access script does not exist, the sniffer module  captures the logon information entered by the user and stores the encrypted information in the SOCI and IMS. An access script is an xml-based script that contains information on how to playback authentication information, such as the location of the application in the computer, the name of the application, the buttons to click, etc. An example of an access script is provided below:",{"@attributes":{"id":"p-0038","num":"0037"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<AccessScript ASPoint=\u201cexplorer.exe\u201d>"]},{"entry":[{},"<ASMethod MethodName=\u201cexplorer.exe-1\u201d"]},{"entry":[{},"MethodType=\u201clogin\u201d><ASStep"]},{"entry":[{},"ID=\u201c1\u201d><ASResult>"]},{"entry":[{},"<WebSignature><PageURL><\/PageURL>"]},{"entry":[{},"<UserFieldName><\/UserFieldName>"]},{"entry":[{},"<PwdFieldName>"]},{"entry":[{},"<\/PwdFieldName>"]},{"entry":[{},"<ActionFieldName><\/ActionFieldName><\/WebSignature>"]},{"entry":[{},"<WndSignature><WndID\/>"]},{"entry":[{},"<WndTitle>Connect"]},{"entry":[{},"to<\/WndTitle><ServerLabel><\/ServerLabel><UserNameLabel>User"]},{"entry":[{},"name:<\/UserNameLabel><PasswordLabel>Password:"]},{"entry":[{},"<\/PasswordLabel><New"]},{"entry":[{},"PasswordLabel><\/NewPasswordLabel><VerifyPasswordLabel>"]},{"entry":[{},"<\/VerifyPasswordLabel><LeftStr>Connect"]},{"entry":[{},"to<\/LeftStr><RightStr><\/RightStr><ServerDlgID\/>"]},{"entry":[{},"<UserNameDlgID\/><New"]},{"entry":[{},"PasswordDlgID\/><OkButtonID\/><\/WndSignature>"]},{"entry":[{},"<ASEvent><Message><\/Message>"]},{"entry":[{},"<\/ASEvent><\/ASResult><\/ASStep><\/ASMethod><\/AccessScript>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"In addition, the access script contains information allowing the sniffer module to recognize access points of an application, the class identification of the application, password policies associated with the application, etc.","The sniffer module  may also perform a client-side single sign-on, by acting as a single sign on service upon the user inserting the SOCI and entering the PIN to unlock the information stored in the SOCI. The sniffer module  plays back credentials to a plurality of applications that the user accesses.","In one embodiment upon identification of user's authentication data, the sniffer module  converts the user's authentication data into a stronger form of authentication data to be then presented to the applications that user attempts to access. The conversion of the authentication data may be performed without the user being aware the change. The sniffer module  can generate a longer password by adding alpha-numeric characters into the password, for example to the end of the user's password. The sniffer module  can also generate a random password to be utilized for user authentication purposes instead of the user's chosen password to ensure higher security levels. The new password is generated base on configurable criteria such as the minimal length, or the inclusion of special characters. In addition, the stronger form of authentication data can be digital certificates, private keys, etc. The request for change of passwords to the application can be performed by either Access Agent or IMS. This is done by supplying both the old password and the new password to the application. Once the application accepts the change and is aware of the new password, Access Agent will store the new password in the form of configuration data encrypted by the CSK. The sniffer [LBK4] module  may also request IMS for a digital certificate using a private key stored in the SOCI, This stronger form can be used for user authentication purposes instead of user's password if the application is converted to used public key authentication mechanism. Once again, the procedure of conversion of user's password into a stronger form of authentication credentials may be performed without knowledge of the user. By configuring the Access Agent to periodically and automatically perform the above procedures, user credentials will be more [LBK5]secured, hence they are fortified.","Data Synchronization","In one embodiment the user authentication data and access scripts are stored on SOCI and on the IMS server for a backup. The data on the SOCI and IMS server is identical, unless during one of the update sessions by the sniffer module , the server was not accessible due for example, to lack of network connection between the client machine and the IMS server. Also, the data on the server may be updated when the user utilizes a duplicate SOCI, causing the original SOCI not to have the latest copy of the user authentication data. In one embodiment, all the records stored in the SOCI and IMS server are time stamped allowing the synchronization module  to determine whether SOCI or IMS server includes the latest data. Upon determining the location of the latest user authentication data, the synchronization module  updates the data to ensure identical copies of user authentication data on SOCI and IMS server.","In one embodiment, the user authentication data may be stored on the client machine as software. If an SOCI device is not available, the user may request the stored authentication data from the IMS server. Upon downloading the user authentication information to the client machine, the downloaded data may be used by the Access Agent in a manner described above.","In addition, the data stored at the IMS server may be downloaded to a new SOCI acquired by the user. The information stored in the SOCI to be replaced by the new one is encrypted and uploaded to a server, which may be the IMS server. The original SOCI exports the CSK encrypted using the new SOCI's public key. The new SOCI downloads the encrypted CKS. Once the encryption key is acquired by the new SOCI, the encrypted authentication data is downloaded from IMS to the new SOCI to be decrypted utilizing the encryption key. The new SOCI is therefore able to access the same information as the original SOCI, and is said to host a cloned credential container.","Public\/Private Key Authentication","In one embodiment of the invention, SOCIs include public-private key pairs to be registered with a Certificate Authority of IMS. The issued certificate and key pair are stored in the SOCI. When the Access Agent detects an application that has been configured to employ public keys for user authentication, the Access Agent directs the SOCI to perform crypto function to automatically cause the application to provide the user with the access. The private key is stored in the SOCI and is not provided to any application or any user. The SOCI has physical tamper-proof features to ensure that private keys are not released. In one embodiment the private key may be burned into the chip of SOCIs during manufacturing.","In one embodiment administrators of IMS may cause the authentication system to utilize private-public key method without the system users being aware of the change. Due to automatic user authentication, the users need not be aware of the authentication method employed as long as they are provided with the desired application access.","Manual Creation of SOCI Contents","In one embodiment the user authentication data is downloaded to SOCIs from a database manually created by system administrators. System administrators create user name and password data pairs for each user of the system and store the authentication data in a database that may be stored at a server or at a corresponding computer of each user. Upon the user connecting an SOCI to the user's computer, the authentication information from the database stored in the usr's computer is downloaded to the SOCI. Alternatively, system administrators download the created authentication data from the database stored at the server to corresponding SOCIs prior to distributing SOCIs to the users. and upload the created authentication data to a corresponding SOCI for each user.","Single Administrative View","In one embodiment, the synchronization module of the Access Agent uploads credentials of all applications that the user uses from the user's SOCI to the IMS to ensure that the IMS includes the latest user authentication data. The identifier module of IMS (not shown) identifies applications that user accesses and the view generator module of the IMS (not shown) organizes the uploaded information and presents information about each application to an administrator of user's system upon request. Therefore, a single consolidated user directory can be created that contains user authentication information across a plurality of applications.  illustrates a consolidated directory view as presented to the administrator according to one embodiment of the invention. Directories of each individual application may no longer be necessary because the administrator is able to manage all the applications utilizing the consolidated directory of all the applications accessible by a single user. In one embodiment, the administrator can remove individual user directories and effectively consolidate them into a single user directory.","Utilizing the consolidated directory the administrator is able to remove access to some or all applications that the user is accessing. For example, when an employees leaves an organization, the system administrator may view the consolidated directory of applications of the employee, which shows applications to which the employee had access. The system administrator, using the consolidated directory, may revoke all accounts of the employee by directing the IMS to automatically access each application to which the employee had access to and revoke the accounts.","The administrator is also able to create user accounts in applications and direct the IMS to create accounts in applications and inject authentication information of the newly created accounts into the user's credential container stored on the server. Once the information is stored in the credential container, the Access Agent downloads the information storing it in the user's SOCI and instructs the playback module of the Access Agent to utilize the downloaded information to access the newly created accounts.","The deletion and addition of user accounts may be performed automatically through an interface provided to the administrator. The interface may prompt the administrator for user or users and application or applications identification and direct the system to remove or add the specified user accounts. In addition, the interface may prompt the administrator for new user authentication information to be inserted into user's directory upon its creation.","Session Challenge\/Response","In one embodiment, the sniffer module  of the Access Agent detects that a web page that a user is attempting to access contains embedded XML tags indicating that the application requires strong authentication through Session Challenge response. The sniffer module  contacts the application server to present a certificate. The application issues a challenge to the Access Agent, requiring the Access Agent to digitally sign a random datum with the private key. The Access Agent signs the datum using the information stored in SOCI. The applications returns a session identification to the sniffer module  allowing the user to access the application.","It will be appreciated that user authentication information does not have to be stored in a hardware token, such as SOCI, but maybe stored in a database located at a server. In addition, it will be appreciated that user authentication information does not need to be converted into a stronger form of authentication and original user authentication information can be played back by the sniffer module .","Thus, a method and apparatus for user authentication have been described. Although the present invention has been described with reference to specific exemplary embodiments, it will be evident that various modifications and changes may be made to these embodiments without departing from the broader spirit and scope of the invention as set forth in the claims. Accordingly, the specification and drawings are to be regarded in an illustrative sense rather than a restrictive sense."],"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention is illustrated by way of example and not limitation in the figures of the accompanying drawings, in which like references indicate similar elements.",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
