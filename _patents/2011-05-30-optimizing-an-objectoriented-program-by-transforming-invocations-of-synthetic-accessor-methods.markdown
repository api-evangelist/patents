---
title: Optimizing an object-oriented program by transforming invocations of synthetic accessor methods
abstract: A method, system and computer program product for optimizing an object-oriented program, which comprises identifying synthetic accessor methods added to the program during a compilation to allow access to the members of the inner classes and replacing the synthetic accessor methods with direct accesses to the members of the inner classes.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08650537&OS=08650537&RS=08650537
owner: International Business Machines Corporation
number: 08650537
owner_city: Armonk
owner_country: US
publication_date: 20110530
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"p":["The invention relates generally to computer software, and more particularly, to optimizing an object-oriented program for which the source code might not be available by identifying and transforming invocations of synthetic accessor methods to access private class members.","Objected-oriented programs commonly operate in computers and computer-embedded devices to provide a variety of functions. These programs may be created using object-oriented programming languages such as Java\u2122, C++, and many others. (Java and all Java-based trademarks and logos are trademarks or registered trademarks of Oracle and\/or its affiliates.) An object-oriented program operates by manipulating data in the form of objects. An object refers to a real-world object or concept, for example, a bicycle or a bank account. An object-oriented program may be viewed as a collection of cooperating objects.","In object-oriented programming, an object is created when a \u201cclass\u201d that defines a particular type of objects is instantiated. An object is thus a particular instance of a class. A class provides the characteristics of its objects, their behavior and abilities. In terms of object characteristics, the class includes the object's attributes, fields or properties, e.g., the bicycles in the class are racing bicycles. In terms of behavior and abilities, the class includes the functions or methods that the objects in the class may perform or behave. For example, a class about bicycles may include methods related to their speed and braking abilities.","A class can have one or more inner classes, which are also known as non-static nested classes. The inner classes have access to private members of the enclosing class and the enclosing class has access to private members of the inner class at compile time. Because the inner classes are compiled into separate class files when a Java program is compiled, a Java virtual machine will enforce the visibility rules for the inner classes just like for any other class. As a result, an inner class cannot access a private member in the enclosing class, and vice versa, at runtime.","To circumvent the above problem, a compiler may insert synthetic accessor methods into the compiled class files to enable an inner class to access the private members of the enclosing class, and vice versa. The synthetic accessor methods that were added by the compiler have the default visibility of \u201cpackage-private\u201d. The package-private visibility allows all classes within the same package (e.g., com.ibm.internal) to access the private methods at runtime. As a result, the synthetic accessor methods enable indirect access by an inner class to the private members of the enclosing class, and vice versa.","The added synthetic accessor methods, however, increase the size of the Java classes and require more memory to run on a Java virtual machine. The amount of memory consumed can add up with a large number of classes and synthetic accessor methods (e.g., this can be up to 2 MB for some Java applications). Furthermore, the addition of the synthetic accessor methods has a negative impact on the performance of the Java program because of the extra invocations of the synthetic accessor methods. For example, there are two invocations when an accessed private class member is a private method: one invocation for a synthetic accessor method and another invocation for the private method.","The invention provides computer-implemented methods, systems and computer program products for optimizing an object-oriented program that includes a plurality of classes and inner classes, each having a plurality of members, by identifying synthetic accessor methods added to the program during a compilation to allow access to the members of the inner classes by the classes and members outside the inner classes and replacing the synthetic accessor methods with direct accesses to the members of the inner classes.","The details of the preferred embodiments of the invention, both as to its structure and operation, are described below in the Detailed Description section in reference to the accompanying drawings, in which like reference numerals refer to like parts. The Summary is intended to identify key features of the claimed subject matter, but it is not intended to be used to limit the scope of the claimed subject matter.","The invention relates generally to computer programming. More particularly, the invention concerns a method, system and computer program product for optimizing object-oriented programs by reducing memory usage due to the synthetic accessor methods. These synthetic accessor methods may be added to a Java program by a compiler to allow the program's inner classes to access private members of an enclosing class, and vice versa, at runtime. The optimization may be performed on the executable code of the program where the program source code may not be available.","Referring now to , a block diagram of a computer is illustrated in accordance with an exemplary embodiment of the invention. Computer  includes a processor , a memory , a persistent storage , a communications unit , an input\/output unit , a display , and system bus . As an example, processor unit  may include one or more processing cores and computer memory  may comprise EEPROM memory modules. Communications unit  may include network interface adapters, modems and support software. Input\/output unit  may include a keyboard, mouse, and printer. Persistent storage  may comprise a hard disk drive or an optical disk drive.","Computer programs are typically stored in persistent storage  until they are needed for execution, at which time the programs are brought into memory unit  so that they can be directly accessed by processor unit . Processor  selects a part of memory  to read or write based on an address in memory  provided along with a read or write request. Usually, the reading and interpretation of an encoded instruction at an address causes processor  to fetch a subsequent instruction, either at a subsequent address or some other address.","An operating system runs on processor unit  to coordinate and control various components within computer  and to perform system tasks required by applications running on the computer . The operating system may be a commercially available or open source operating system, as are well known in the art. An object-oriented programming system, such as the Java programming system, may run in conjunction with the operating system and provides calls to the operating system from Java programs or applications executing on computer.","Instructions for the operating system, the object-oriented programming system, and applications or programs are located on storage devices, such as a hard disk drive . These instructions and may be loaded into main memory  for execution by processor . The processes of the illustrative embodiments may be performed by processor  using computer implemented instructions, which may be located in memory .","The system components shown in  can be varied from the illustrative examples shown. In some illustrative examples, computer system  may be a personal digital assistant (PDA) configured with flash memory to provide a non-volatile memory for storing operating system files and\/or user-generated data. Additionally, computer system  can be a tablet computer, laptop computer, or a computer-embedded communication device.",{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 2","b":["200","201","200","202"]},"Java virtual machine  is a computer application that may execute in conjunction with the operating system . Java virtual machine  includes logic components to provide a Java runtime environment with the ability to execute Java application or applet . Java application or applet  is a program or software component written in the Java programming language. The computer system in which Java virtual machine  operates may be similar to computer  described in . However, Java virtual machine  may be implemented in software or partially in hardware such as a Java chip, Java-on-silicon, or Java processor with an embedded picoJava core.","The Java virtual machine  supports a Java runtime environment including architecture, security features, mobility across networks and platform independence. Java virtual machine  is a virtual computer, i.e., a computer that is abstractly defined and implemented. This flexibility allows different Java virtual machines  to be designed for different types of computer systems, e.g., mainframe computers and PDAs. Java virtual machine  allows a program to be executed on different platforms as opposed to only the one platform for which the code was compiled. Programs are compiled for the Java virtual machine  before execution. In this manner, applications for many types of computers may be supported, which may contain a variety of central processing units and operating system architectures.",{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 3","b":["300","300","302","300","309","302","309"]},"Java virtual machine  further contains runtime data areas , execution engine  and method interface . Execution engine  is a mechanism for executing instructions contained in the methods of classes loaded by class loader subsystem . Interpreter  interprets the Java bytecodes at runtime. Method interface  allows access to resources in the underlying operating system  such as method libraries. Runtime data areas  contain program counter (PC) registers , Java heap , Java stack , method stack , and method area . Method area  would include any synthetic accessor methods added to a Java bytecode by a compiler. These different data areas represent the organization of memory needed by Java virtual machine  to execute a program.","Java stack  may or may not reside within Java heap  depending on the implementation of the Java virtual machine  at runtime. If the Java stack  is in the Java heap , then it is represented as a single object for heap management purposes. Whether the Java stack  is in the Java heap  or not, the Java stack  contains meta information indicating frame boundaries for the call stack, method (function) parameters, and also serves as a location for temporary (local) variable and storage for intermediate results. Program counter registers  indicate the next instruction to be executed. Method stack  stores the state of invocations of native methods. Method area  contains class data, while Java heap  contains all instantiated objects. Each time a class instance or array is created, the memory for the new object is allocated from Java heap . Java virtual machine  includes an instruction that allocates memory space within the memory for Java heap , but includes no instruction for freeing that space within the memory.","To enable an application to execute on different types of computers, a compiler typically generates an architecture-neutral file format that is executable on many processors with the presence of a runtime system. In the case of a Java program, the compiler generates bytecode instructions that are nonspecific to a particular computer architecture. Java bytecode is a platform-independent format that is either interpreted or compiled using a Java virtual machine (JVM) at runtime in order to run on a particular platform. A platform refers to a particular combination of computer and operating system. An interpreter is part of the Java virtual machine that decodes and interprets bytecode.",{"@attributes":{"id":"p-0033","num":"0032"},"figref":["FIG. 4","FIG. 1"],"b":["401","402","403","100","401","401","401","402"]},"Compiler  is a computer program that translates a series of statements written in a first computer language, such as source code , into a second computer language, such as executable code . The second computer language, such as executable code , is generally in a desired computer-usable format and is ready for use in a computer.","Typically, compiler  generates objects that contain machine code augmented by information about the name and location of entry points and external calls to functions not contained in the object. A set of object files, which need not have come from a single compiler provided that the compilers used share a common output format, may then be linked together to create the final executable code. The executable code can then be run directly by a user.","In object-oriented programming, each object is capable of receiving messages, processing data, and sending messages to other objects. An object is created when a \u201cclass\u201d that defines a particular type of data objects is instantiated. A class defines the characteristics of a data object (or field) which include, for example, the object's attributes or properties. The class further defines an object's behavior, i.e., what an object in the class can do. These operations are referred to as methods, functions, or functional members.","Each class may contain many methods and data members. Methods contain the instructions to run the program. Each object instantiated by the class includes its own set of data as specified by the data members of the class, and the functional members of any given object are capable of acting on the data members of the object.",{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 5","b":["501","502","504","501","505","508","505","508"]},{"@attributes":{"id":"p-0039","num":"0038"},"figref":["FIG. 6","FIG. 6"],"b":["601","602","603","604","603","604","602","602","603","604","601","605","607"]},"Java programming defines visibility rules that restrict the access to classes and its members from other classes. There are currently four visibility rules for Java classes: public, protected, private, and public-private. All classes, subclasses and their members can access a public class. A class member that is declared as \u201cprivate\u201d is only accessible from within the class itself, i.e., the owning class. Access from other classes will result in a runtime exception. For a \u201cprotected\u201d class, only classes, subclasses and class members in the same package can access it. A class member that is declared as \u201cpackage-private\u201d is only accessible from within the class itself, i.e., the owning class, and the classes that belong to the same package (e.g., a file folder or directory). For example, if the class is \u201ccom.ibm.MyClass\u201d, then all classes in the \u201ccom.ibm.\u201d package (or folder) are allowed access to the class member declared as \u201cpackage-private\u201d.",{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 7","b":["701","702","707","708","702","703","706","703","704","705","704","705","703","703","703","706","704","705","707","708","704","705","703"]},"In object-oriented programs, the inner classes have access to private members of the enclosing class and the enclosing class has access to private members of the inner class. Because the inner classes are compiled into separate class files at compilation, a Java virtual machine will enforce the visibility rules. As a result, the inner class would not be able to access a private member in the enclosing class, and vice versa, at runtime. In order to allow the inner class to access a private member at runtime, the compiler  may add synthetic accessor methods to the output bytecode.","Alternatively, a Java developer may declare certain class members as \u201cpackage-private\u201d as described above. However, this option is not available when an application is assembled from many components and the developer does not have access to their source files or there are restrictions to modify the source. Embodiments of the invention identify the synthetic accessor methods added to a compiled program and replacing them with direct accesses to the private members of the class, as an optimization following the program compilation.","The program optimization may be implemented in a compiler or transformation tool, such as those described with respect to , and run in a computer such as computer  shown in . An example of an optimization tool for the Java programming language is the IBM Java Optimizer tool \u201cJapt\u201d. The program optimization reduces the amount of system memory used by the program as the memory that synthetic accessor methods require is no longer needed. Besides the performance improvements, the modification to the compiled program does not any effect on the program at runtime.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 8"},"In the example illustrated in , an originally compiled program structure may comprise an outer class  which includes two class members: a method M  and an inner class A . The inner class A  comprises a method MA  and a synthetic accessor method M . The method MA  and synthetic accessor method M  are both \u201cpackage-private\u201d to the inner class A  in a typical compilation. As a result, they are only accessible to the members within the inner class A . However, as described with reference to , a compiler  may add the synthetic accessor method M  to the inner class A  to allow classes and class members outside the inner class A  to access the private members of the inner class A , and vice versa. The synthetic accessor method M  thus calls the private method MA and returns result when the bytecode is executed. In addition, since the method M  is outside the inner class A , it also needs to call the synthetic accessor method M  in order to invoke the method MA , which is a private method in the inner class A .",{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 8","b":["811","801"]},"The program transformation includes changing a private method invoked by a synthetic accessor method, such as method MA , to a package-private method MA . The program optimizer further identifies the added synthetic accessor methods by examining a \u201csynthetic\u201d flag bit in each method declaration to determine whether the method is a synthetic accessor method. The compiler  sets a \u201csynthetic\u201d flag bit in a method declaration when it generates the method. If the examined method is a method M , which obtains the result of a private method MA by calling a synthetic accessor method M , then the optimizer replaces the examined method invocation with a direct invocation of the private method MA, as shown by box . The optimizer may remove the synthetic accessor method M  (that was added by the compiler ) from the transformed program , as shown in box .",{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 8","b":["2","824","2","825","2","834","1","822","2","825","2","824","2","825","2","834","2","825","402","831","835"]},{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 9","b":["901","902","903","904"]},"For each class C in set S, the optimizer examines each method M in class C (step ) and determines whether the method M is a synthetic accessor method (step ). This determination may include examining whether the compiler  has set a \u201csynthetic\u201d flag bit in the declaration of a method to indicate that the method is a synthetic accessor method If the method M is not a synthetic accessor method, then the optimizer examines another method in class C, per step , until all the methods in the class C are processed. If an examined method M is a synthetic accessor method, then the optimizer replaces the invocations of the synthetic accessor method with a direct access, depending on the type of the invocation, at step . The replacement of the invocations of a synthetic accessor method is described in more detail with reference to . The optimizer may write the resulting class files in set S to an output folder at step .",{"@attributes":{"id":"p-0052","num":"0051"},"figref":["FIG. 10","FIG. 9"],"b":["908","1001","1002","1003","1004","1005","1006","1011"]},"In the illustrated embodiment, if the synthetic accessor method M is invoked to read a private data field F, then the optimizer replaces the invocation of method M by a direct read access to private data field F, at step . This replacement may be logged in an output file if the user has selected a logging option, at step . If the synthetic accessor method M is invoked to write a private field, then the optimizer replaces the invocation of method M by a direct write access to private data field F, at step . This replacement may be logged in an output file if the user has selected a logging option, at step . If the synthetic accessor method M is used to call a private method P, then the optimizer replaces the invocation of method M by a direct invocation of the private method P, at step . This replacement may be logged in an output file if the user has selected a logging option, at step .","The illustrative embodiments have been performed on existing Java programs. In the case of many programs, including those in small electronic devices, such as cell phones, these space savings are quite significant.","The subject matter described above is provided by way of illustration only and should not be construed as limiting. Various modifications and substitutions of the described components and operations can be made by those skilled in the art without departing from the spirit and scope of the present invention defined in the following claims, the scope of which is to be accorded the broadest interpretation so as to encompass such modifications and equivalent structures. As will be appreciated by those skilled in the art, the systems, methods, and procedures described herein can be embodied in a programmable computer, computer executable software, or digital circuitry. The software can be stored on computer readable media. For example, computer readable media can include a floppy disk, RAM, ROM, hard disk, removable media, flash memory, a \u201cmemory stick\u201d, optical media, magneto-optical media, CD-ROM, etc.","Aspects of the present disclosure may take the form of an entirely hardware embodiment, an entirely software embodiment (including firmware, resident software, micro-code, etc.) or an embodiment combining software and hardware aspects that may all generally be referred to herein as a \u201ccircuit,\u201d \u201cmodule\u201d or \u201csystem.\u201d Furthermore, aspects of the present disclosure may take the form of a computer program product embodied in one or more computer readable medium(s) having computer readable program code embodied thereon.","Any combination of one or more computer readable medium(s) may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be, for example, but not limited to, an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system, apparatus, or device, or any suitable combination of the foregoing. More specific examples (a non-exhaustive list) of the computer readable storage medium would include the following: an electrical connection having one or more wires, a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), an optical fiber, a portable compact disc read-only memory (CD-ROM), an optical storage device, a magnetic storage device, or any suitable combination of the foregoing. In the context of this document, a computer readable storage medium may be any tangible medium that can contain, or store a program for use by or in connection with an instruction execution system, apparatus, or device.","A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein, for example, in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms, including, but not limited to, electro-magnetic, optical, or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate, propagate, or transport a program for use by or in connection with an instruction execution system, apparatus, or device.","Program code embodied on a computer readable medium may be transmitted using any appropriate medium, including but not limited to wireless, wireline, optical fiber cable, RF, etc., or any suitable combination of the foregoing.","Computer program code for carrying out operations for aspects of the present disclosure may be written in any combination of one or more programming languages, including an object-oriented programming language such as Java, Smalltalk, C++ or the like and conventional procedural programming languages, such as the \u201cC\u201d programming language or similar programming languages. The program code may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN), a wide area network (WAN), Ethernet, or the connection may be made to an external computer, for example, through the Internet using an Internet Service Provider.","Aspects of the present disclosure are described above with reference to flowchart illustrations and\/or block diagrams of methods, apparatus (systems) and computer program products according to embodiments of the disclosure. It will be understood that each block of the flowchart illustrations and\/or block diagrams, and combinations of blocks in the flowchart illustrations and\/or block diagrams, can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","These computer program instructions may also be stored in a computer readable medium that can direct a computer, other programmable data processing apparatus, or other devices to function in a particular manner, such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function\/act specified in the flowchart and\/or block diagram block or blocks.","The computer program instructions may also be loaded onto a computer, other programmable data processing apparatus, or other devices to cause a series of operational steps to be performed on the computer, other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","The flowchart and block diagrams in the figures described above illustrate the architecture, functionality, and operation of possible implementations of systems, methods and computer program products according to various embodiments of the present disclosure. In this regard, each block in the flowchart or block diagrams may represent a module, segment, or portion of code, which comprises one or more executable instructions for implementing the specified logical function(s). It should also be noted that, in some alternative implementations, the functions noted in the block may occur out of the order noted in the figures. For example, two blocks shown in succession may, in fact, be executed substantially concurrently, or the blocks may sometimes be executed in the reverse order, depending upon the functionality involved. It will also be noted that each block of the block diagrams and\/or flowchart illustration, and combinations of blocks in the block diagrams and\/or flowchart illustration, can be implemented by special purpose hardware-based systems that perform the specified functions or acts, or combinations of special purpose hardware and computer instructions."],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION OF THE INVENTION"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 10","FIG. 9"],"b":"908"}]},"DETDESC":[{},{}]}
