---
title: Scene graph based display for desktop applications
abstract: A method and apparatus for rapidly displaying air traffic control (ATC) information on an ATC display provides a two-dimensional (2D) scene graph and associated 2D scene graph display commands in conjunction with a thee-dimensional graphic card. In other embodiments, any desktop application software can make use of a 2D scene graph and associated 2D scene graph display commands in order to rapidly render a 2D display.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07436406&OS=07436406&RS=07436406
owner: Raytheon Company
number: 07436406
owner_city: Waltham
owner_country: US
publication_date: 20030711
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","STATEMENTS REGARDING FEDERALLY SPONSORED RESEARCH","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["This application claims the benefit under 35 U.S.C. \u00a7119(e) of U.S. Provisional Patent Application No. 60\/395,643 filed Jul. 12, 2002, which application is hereby incorporated herein by reference in its entirety.","Not applicable.","This invention relates generally to graphical display method and systems and more particularly to a method and system for rapidly displaying two-dimensional (2D) information.","As is known in the art, air traffic control (ATC) is a service that promotes the safe, orderly, and expeditious flow of air traffic. ATC services can assist in promoting safe air travel by providing information which assists in safety, preventing collisions with other aircraft, obstructions, and the ground; assisting aircraft in avoiding hazardous weather; assuring that aircraft do not operate in an airspace where operations are prohibited; and assisting aircraft in distress. ATC services can also assist in the orderly and expeditious flow of aircraft, which helps the efficiency of aircraft operations along the routes selected by the operator.","As is also known, air traffic control services are provided by air traffic control (ATC) systems. An air traffic control system typically includes a computer and display system that processes data received from air surveillance radar systems for the detection and tracking of aircraft. Air traffic control systems are used for both civilian and military applications to determine the identity and locations of aircraft in a particular geographic area.","When an aircraft is detected by an ATC radar system, information concerning the aircraft is provided to a display such that a user can look at the display and observe the position of the aircraft with respect to other aircraft as well as with respect to other moveable and non-moveable ground and air-based objects (e.g., an ATC tower, a passenger terminal, moving vehicles etc.)","Techniques for displaying the locations of aircraft and other objects on a display system are known. Such display systems, however, must be able to rapidly display a relatively large amount of information (e.g., information in maps). Furthermore, such display systems should allow a user to manipulate the information (e.g., by panning or zooming). When the information is manipulated, however, it is desirable for the display system to have a rapid real-time response.","The problem of providing rapid real-time displays of manipulated information (e.g., zoomed-in map information) is exacerbated when so-called \u201cfill maps\u201d (i.e., a map with fill inside a map boundary) must be shown on the display, since it is relatively difficult to rapidly fill a map boundary during a zoom or a pan operation. To address this problem, so-called \u201coutline maps,\u201d also known as \u201cstroked maps,\u201d have been used. Also, many applications, including ATC applications, have displays which include a relatively large number of images, including buttons, aircraft icons, vector displays, windows, etc., and the large number of images is difficult to rapidly display.","There is also a need to be able to rapidly display an image (e.g., a map or an aircraft image) having a relatively large amount of interactive feedback. For example, when an aircraft icon is selected, information related to that aircraft can also be displayed to the user.","Prior art display systems typically utilize stroked maps and do not generally allow rapid real-time display of maps and other display information (e.g., targets, vectors, etc.). For prior art ATC systems, it is difficult to rapidly render a display without impacting the real-time system operation of the ATC system.","Prior art attempts to provide rapid real-time display systems include systems that only partially render or re-render the display. For example, when a section of a map is selected, only that section of the display is rendered. While this approach works well when selecting only a portion of the map, it does not work well when the entire map is selected and must be re-rendered, for example when the user performs a zoom or a pan operation.","Another prior art solution that provides a real-time display uses so-called \u201cmultiple buffers\u201d or \u201cmultiple layers.\u201d In this approach, the display is divided into different layers (e.g., buttons are on one layer, a map background is on another layer, targets are on yet another layer, etc.). This approach works well if moving an object (i.e., an image) on only one layer because it is not necessary to re-render the other layers. This approach does not work well for pan or zoom operations, however, since in those operations, it is necessary to re-render multiple layers.","It would, therefore, be desirable to provide a display system and technique to overcome the aforesaid and other disadvantages.","A technique for displaying two-dimensional (2D) information on an air traffic control (ATC) system display is provided by representing the information to be displayed as a 2D scene graph having corresponding 2D scene graph display commands, and uploading the 2D scene graph to a three-dimension graphics card (3DGC), which is adapted to generate 2D images on the graphical display in response to the 2D scene graph. By using a 2D scene graph with a 3DGC, only a relatively small number of commands are needed to draw or render corresponding 2D images on a graphical display. Therefore, the 2D images can be rapidly drawn on the graphical display.","In accordance with the present invention, a method of providing a graphical display includes generating scene graph data having at least one two-dimensional object and storing the scene graph in a graphics module capable of generating a graphical display. The method also includes generating a scene graph display command associated with the two-dimensional object, wherein the scene graph display command is adapted to be interpreted by the graphics module, resulting in a two-dimensional image on the graphical display associated with the two-dimensional object. In one particular embodiment, the graphics module is a three-dimensional graphics circuit card.","In accordance with another aspect of the present invention, a computer program medium having computer readable code thereon provides instructions for generating scene graph data having at least one two-dimensional object and for storing the scene graph in a graphics module capable of generating a graphical display. The computer program medium also provides instructions for generating a scene graph display command associated with the two-dimensional object, wherein the scene graph display command is adapted to be interpreted by the graphics module, resulting in a two-dimensional image on the graphical display associated with the two-dimensional object. In one particular embodiment, the graphics module is a three-dimensional graphics circuit card (3DGC).","In accordance with another aspect of the present invention, a system for providing a graphical display includes a scene graph display command generator for generating a scene graph display command associated with a two-dimensional object. The scene graph display command is adapted to be interpreted by a graphics module, resulting in a two-dimensional image on the graphical display, and the two-dimensional image is associated with the two-dimensional object.","With the 2D scene graph display commands of the present invention, images can be rendered on a graphical display more rapidly than the same images can be rendered using prior art techniques.","Before describing a scene graph based display for desktop applications, some introductory terms are described. A scene graph will be understood to be a particular representation containing information about the geometry and appearance of all objects appearing on a graphical display. The scene graph is a dynamic data structure within a computer program. The scene graph can be saved as a file. The scene graph includes data that describes shape objects (geometry and appearance), geometric structure relationships (geometric transformations, ordering, and grouping), global objects (how all shape objects are viewed, e.g., viewpoints, lights, backgrounds), and behaviors (procedures for modifying information stored in a scene graph).","In one embodiment, the scene graph is implemented using object-oriented computer programming techniques. Thus, the scene graph objects can be provided as object-oriented software objects, which describe the shape objects. Scene graph commands can also perform the behaviors upon the shape objects. For example, a scene graph can include a software object associated with an aircraft image, and a scene graph display command can operate on the aircraft object to render the aircraft image on a graphical display.","The objects of a scene graph are generated using software commands, for example a \u201ccreate\u201d command. The objects of a scene graph are operated upon using other commands, for example a \u201crender\u201d command, which causes an object to appear as an image on a video screen. Therefore, the scene graph, including the objects, is associated with a set of scene graph display commands.","A scene graph can be represented diagrammatically as a tree structure having \u201cnodes\u201d and interconnecting lines or \u201carcs.\u201d The scene graph data structure described above underlies the tree structure representation. The scene graph can also be associated with a sequence of display commands, which can be used to generate the underlying data structure of the scene graph.","Thus, as used herein, the term \u201cscene graph\u201d is used to describe the underlying data structure and commands associated with a scene graph, as opposed to solely the set of scene graph display commands or the scene graph tree structure.","It should be understood that a scene graph can be associated with more scene graph display commands than actually are used to generate images on a graphical display. For example, a scene graph can be associated with a set of \u201ccreate\u201d commands that represent scene graph objects, and not every object necessarily has a corresponding \u201crender\u201d command that generates an image on the graphical display.","Various high-level software application programming interfaces (APIs) have been established to create a scene graph when presented with the scene graph display commands. For example Java3D and VRML provide high-level software to generate a scene graph. Lower level APIs have also been provided, including Open GL, and Direct 3D. Application software, for example computer games, has been developed to provide the scene graph display command to the API.","Scene graph techniques are conventionally used to provide a scene graph associated with three-dimensional images on a graphical display, for example in computer games. To this end, software manufacturers have provided the three-dimensional (3D) applications and APIs described above. Also, hardware manufacturers have provided 3D graphics circuit boards, having local processing capability on the graphical circuit board, and having the ability to interpret scene graph data and rapidly provide a corresponding graphical display on a monitor.","The scene graph programming techniques, in conjunction with the 3D graphic circuit board, provide the ability to rapidly render a 3D image on a graphical display with minimal impact on a central computer processor. Images on the graphical display can also be rapidly updated with one or more display commands, provided by the application software, interpreted by the API, and sent to the 3D graphics circuit board.","While existing scene graph application software and APIs provide three-dimensional (3D) graphical objects and corresponding 3D images on a graphical display, a conventional air traffic control (ATC) display provides two-dimensional (2D) images. It should be appreciated that in ATC systems as well as other 2D imaging applications, two-dimensional images are conventionally provided without use of scene graphs and without taking advantage of the local processing capability of the 3D graphics circuit board.","That is, in those systems and application, such as ATC systems, which require only two-dimensional imaging, 2D images are conventionally generated with APIs that can interpret a primitive \u201cpaint\u201d command. A single paint command is able to render only a simple shape, for example a line or a rectangle. Therefore, in order to render more complex shapes on an ATC display, such as aircraft and geographic features, numerous paint commands are conventionally generated, which are then interpreted by a low level API in conjunction with an ATC central processor. Therefore, the conventional ATC display requires substantial processing time provided by the ATC central processor, in order to process the large number of primitive \u201cpaint\u201d commands.","Also, existing scene graph APIs provide three-dimensional (3D) graphical objects and corresponding 3D images on a graphical display in particular software environments, for example, in computer games. However, scene graphs have not been applied to other software environments, for example, two-dimensional (2D) desktop applications having combinations of 2D windows, 2D text, and 2D graphics.","Referring now to , an example of a prior art system  for placing a button  (including associated text) on a monitor includes a software application portion , which characterizes the button in terms of primitive \u201cpaint\u201d display commands -. The software application  sends display commands -to the hardware , e.g., to a low-level application programming interface (API) . A central processing unit (CPU) , draws or \u201cpaints\u201d the button  on the monitor . In the example of , the button  is painted on the monitor using three primitive \u201cpaint\u201d display commands -(i.e., paint (rectangle), paint (text), and paint (line)). Using these three primitive \u201cpaint\u201d display commands -, the software application  is able to cause the hardware  to display an image of the desired button .","The hardware  can include a personal computer (PC) or a workstation, and the \u201cpaint\u201d display commands -can be received and interpreted by an API, for example the API within the PC or workstation.","Referring now to , in accordance with the present invention, a system  that utilizes two-dimensional (2D) scene graph display commands -provided by a software application  is shown. In this example, a button  (including associated text) is represented by scene graph display commands , . One or more \u201ccreate\u201d commands generate a scene graph data object corresponding to the button . The one or more \u201ccreate\u201d commands are received by hardware . The hardware  includes an API which, in conjunction with CPU , transforms the one or more \u201ccreate\u201d commands to scene graph data corresponding to a button object, and stores the button object to a scene graph . Once the button object is stored to the scene graph , the button object can be invoked by a single render display command . The button object can be invoked any number of times by respective \u201crender\u201d commands in order to display any number of respective button images on the monitor . This is in contrast to the prior art approach of  in which multiple primitive \u201cpaint\u201d commands are required to display each button.","It should be appreciated that the \u201ccreate\u201d and \u201crender\u201d commands described above are but two exemplary scene graph display commands. Other command words can provide the same function as the \u201ccreate\u201d and \u201crender\u201d display commands , . Also there can be other scene graph display commands that perform other functions. Thus, it should be appreciated that although specific commands are sometimes referenced herein, such references are not intended to be limiting but rather are merely used to promote clarity in describing the invention.","The 3DGC uses the scene graph , which contains scene graph data corresponding to a button object, to render an image of the button  on a monitor . The 3DGC has local processing (not shown), and is therefore able to offload processing from the CPU for display image generation.","It should be appreciated that the software application  must be able to generate 2D scene graph display commands in accordance with the present invention. It should still further be appreciated that the API must be able to receive and transform the 2D scene graph display commands into 2D scene graph data that can be interpreted by the 3DGC to provide 2D images on the monitor.","Referring briefly to , tree diagram  is a diagrammatic representation of the scene graph , and diagrammatically represents the data underlying the scene graph. A \u201cbutton\u201d group includes a button portion , a border portion , and a text portion . Arcs , , and couple the diagrammatic objects. While only a simple button object (including associated text) is shown, it should be realized that complex objects can similarly be diagrammatically represented and can similarly be associated with one or more \u201ccreate\u201d display commands.","Referring again to , the system  provides a rendering of the button  on the monitor , wherein the button  has a two-dimensional (2D) image. By using the scene graph system , 2D display images can be rapidly rendered. A 2D display rendering speed improvement of an order of magnitude can be realized compared to the system  of , which uses primitive \u201cpaint\u201d display commands. That is, by having the scene graph stored directly on the 3DGC and by limiting the software commands to occasional \u201crender\u201d display commands, (and other display commands corresponding to scene graph updates), a performance increase on the order of an order of magnitude can be realized.","The exemplary system  has the ability to greatly accelerate 2D desktop software applications. A 2D desktop software application will be recognized to have a variety of characteristic features, including, but not limited to, re-sizeable windows, buttons, panels, dropdown menus, text, etc.","Besides improved display rendering speed, the approach of the present invention has the following advantages: (1) scene graph rendering time can be easily predicted, which allows for synchronous or asynchronous updates of the display images; and (2) scene graph rendering is performed by hardware, leaving the primary CPU free to carry on others time-critical tasks (e.g., input\/output).","Referring now to , an exemplary image  illustrates what a user views on a graphical display. The image  includes a background  having disposed thereon a tool bar  comprised of a panel  having three buttons , , , and a patch . Though shown in exploded form for clarity, the buttons -are in the plane of the background . All objects on the image  are, therefore, 2D images.","Referring now to , a component scene graph  diagrammatically representing the image  of  is shown. The component scene graph  includes a background component  connected to panel and patch components ,  respectively. Three button components , , are coupled to panel component . It should be appreciated that the component scene graph  can be provided in a software graphical user interface.","Referring now to , a graphics scene graph  associated with one of the buttons of  includes as variety of components -, of which components , , and  are group components. The group component  is connected to area and text components ,  respectively. The area and text components ,  are associated with a single button image. The scene graph, which is comprised of scene graph data, underlies the component scene graph  of  and the graphics scene graph  of . The scene graph is stored in the 3DGC, for example the 3DGC of . Thus,  illustrate diagrammatic representations of a scene graph used to provide the 2D image  of .","In another embodiment, this approach (i.e., using a 2D graphics scene graph and a 3DGC) allows a user to mix 2D images (e.g., button images) with 3D images. For example, in another embodiment, the 2D scene graph display commands can be intermixed with 3D scene graph display commands.","Referring now to , an air traffic control system  includes a radar system  coupled to a display system . In some cases, multiple radar systems are provided and each of the radar systems may be located at different physical locations to provide substantially continuous radar coverage over a geographic area larger than that which could be covered by any single radar system.","In operation, the radar system  emits radio frequency (RF) signals into a predetermined spatial region through an antenna as is generally known. Portions of the emitted RF signals intercept targets, which may correspond, for example, to aircraft traveling in the predetermined spatial region. Those portions of the emitted RF signals, which intercept the targets, are reflected from the targets as return or target signals, which are received by the radar.","In some cases, targets (e.g., aircraft) include a transponder, and the RF signal emitted by the radar system  includes a so-called interrogation signal. The interrogation signal interrogates the transponder on the target and in response to an appropriate interrogation signal, the transponder transmits a response signal from the target to the radar system .","For a given target, the radar system  provides a radar signal  including radar data having an associated radar-data identifier (ID) , which identifies the particular target. Either by way of the above mentioned transponder, or by way of a variety of known tracking algorithms provided by the radar system , the radar data , (i.e., range, elevation, and azimuth position) is associated with the particular target, as indicated by the radar-data ID ","Regardless of the manner in which the radar  detects the target and identifies the target with the radar-data ID , the radar  provides the radar signals  to the display system , which includes a display system processor . The display system processor  receives the radar signals , and an association processor  therein associates the radar data having the radar-data ID with scene-graph-display-command data having a scene-graph-display-command-data ID . The association processor  also associates the radar data having the radar-data ID with particular scene graph data having a scene-graph-data ID . Particular scene graph data having a scene-graph-data ID , is associated with a particular image on an ATC display. In this way, the radar signals  are correctly associated with respective images on an ATC display .","Display commands , including the scene-graph-display-command-data having the scene-graph-display-command-data ID , are provided by the display command generator  to a graphics module  upon receiving the radar signals . In one embodiment, the graphics module  is a 3D graphics card (3DGC), which can be the same as or similar to the 3DGC of . The scene graph commands  are interpreted by an application programming interface (API) , which updates a scene graph in response to the scene graph display commands . The scene graph, including updates, is stored in the scene graph storage module .","As described above, the scene graph, including updates, stored in the scene graph storage module , represents all images presented on the ATC display . A graphic engine  causes the images to be displayed on the ATC display .","Referring now to , a flow diagram  shows the processing performed to update a scene graph based display image. The rectangular elements are herein denoted \u201cprocessing blocks,\u201d and represent computer software instructions or groups of instructions.","Alternatively, the processing blocks represent steps performed by functionally equivalent circuits such as a digital signal processor circuit or an application specific integrated circuit (ASIC). The flow diagram does not depict the syntax of any particular programming language. Rather, the flow diagrams illustrate the functional information one of ordinary skill in the art requires to fabricate circuits or to generate computer software to perform the processing required of the particular apparatus. It should be noted that many routine program elements, such as initialization of loops and variables and the use of temporary variables are not shown. It will be appreciated by those of ordinary skill in the art that unless otherwise indicated herein, the particular sequence of steps described is illustrative only and can be varied without departing from the spirit of the invention.","Processing begins at step  by acquiring a target in a radar and providing radar data (e.g., , ) having a radar-data ID (e.g., , ). The radar data and the radar-data ID are associated at step  with scene-graph-display-command data (e.g., , ) and a scene-graph-display-command-data ID (e.g., , ).","At step , a scene graph display command (e.g., , ) is generated having the scene-graph-display-command data and the scene-graph-display-command-data ID. The scene graph display command is sent at step  to a graphics module (e.g., , ). The graphics module can be the same as or similar to the graphics module  of ","At step , the scene graph display command is interpreted, for example with an API which can be the same as or similar to the API  of , resulting at step  in an updated scene graph stored within a scene graph storage module. The scene graph storage module can be the same as or similar to the scene graph storage module  of .","Once the scene graph is updated, at step  a graphic engine (e.g., , ) causes an update to display images presented on an ATC display (e.g., , ), associated with the updated scene graph.","Referring now to , an exemplary ATC graphical display  in accordance with the present invention is generated using a 2D scene graph and associated 2D scene graph display commands. The exemplary ATC graphical display  includes a variety of desktop images, including a menu having buttons with associated text, of which a button  is but one example, aircraft images -, text  associated with the aircraft images, runway images  indicating an airport, and window images -which can be zoomed and\/or panned.","For the reasons described above, the ATC graphical display  images provided using 2D scene graph display commands can be rendered on a monitor much faster than the same images can be rendered on the monitor using primitive prior art \u201cpaint\u201d display commands.","While only 2D images are shown on the ATC display , in another embodiment, 3D images, can also be shown in combination with 2D images. Also, while particular numbers of aircraft, windows, etc. are shown, any number of particular types of images can be shown in accordance with the present invention. In other embodiments, other types of images can be shown in place of, or in addition to the images shown on the ATC display , for example, images of people and images of ground vehicles, such as trucks.","While the scene graph based display for desktop applications is described above in conjunction with an ATC display, it should be appreciated that the 2D scene graph techniques, including 2D application software (e.g., , ) and 2D API software (e.g., , ) can be associated with other applications, including, but not limited to, desktop applications having combinations of 2D windows, 2D text, and 2D graphics. For example, in one exemplary system, the 2D application software can include a word processor program adapted to provide 2D scene graph display commands corresponding to 2D letters and fonts, and the 2D API software can be adapted to interpret the 2D scene graph display commands and provide a 2D scene graph associated with the 2D letters and fonts. The 2D letters and fonts can be invoked as 2D images on a graphical display by other 2D display commands, for example \u201crender\u201d commands.","In yet another system, the 2D application can include map software adapted to provide 2D scene graph display commands representative of 2D map objects, such as 2D land features. The 2D API can be adapted to interpret the 2D map objects and provide 2D scene graph data associated with 2D map objects. The 2D map objects can be invoked as 2D images on a graphical display with other 2D display commands, for example \u201crender\u201d commands.","In yet another example, the 2D application can include schematic capture software used to generate circuit schematics. The schematic capture software can be adapted to provide 2D scene graph display commands representative of 2D schematic objects, such as 2D electrical components and interconnecting copper traces. The 2D API can be adapted to interpret the 2D schematic objects and provide 2D scene graph data associated with the 2D schematic objects. The 2D schematic objects can be invoked as 2D images on a graphical display with other 2D display commands, for example \u201crender\u201d commands.","Having described preferred embodiments of the invention it will now become apparent to those of ordinary skill in the art that other embodiments incorporating these concepts may be used. Additionally, the software included as part of the invention may be embodied in a computer program product that includes a computer useable medium. For example, such a computer usable medium can include a readable memory device, such as a hard drive device, a CD-ROM, a DVD-ROM, or a computer diskette, having computer readable program code segments stored thereon. The computer readable medium can also include a communications link, either optical, wired, or wireless, having program code segments carried thereon as digital or analog signals. Accordingly, it is submitted that that the invention should not be limited to the described embodiments but rather should be limited only by the spirit and scope of the appended claims. All publications and references cited herein are expressly incorporated herein by reference in their entirety."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing features of this invention, as well as the invention itself, may be more fully understood from the following description of the drawings in which:",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 2A","FIG. 2"]},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 3A","FIG. 3"]},{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 3B","FIG. 3A"]},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
