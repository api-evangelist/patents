---
title: Caching output from an object in an application server environment
abstract: A method and system of streaming a page of data are described. In one embodiment, an object corresponding to the page of data is allocated. The object is executed. If the object is a proxy, then the proxy is executed. If the object is a component, then the component is executed. If the object is a container, then the container is executed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06964052&OS=06964052&RS=06964052
owner: Eâ˜…Trade
number: 06964052
owner_city: Menlo Park
owner_country: US
publication_date: 20000118
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["The present invention relates to data caching and more particular to data caching for streamed output from component objects in an application server environment.","A request sent from a web client (such as a web browser) is received by a web server. The web server then passes the request to an application server which processes the request, calculates the results, and streams the results back to the web server for display. Web\/application servers cache output as a function of the input (parameters in the request). These servers typically cache an entire page of data.","Data is cached so that the processing does not have to be repeated for every request for the same page of data. When caching is implemented, some processing is performed and the results are cached for some period of time. Any subsequent requests that match some criteria for the cached data result in the web server streaming the output that has been stored in the cache rather than to re-calculate it. In large applications, it is sometimes necessary to cache components contained within the page rather than the entire page. This allows a page to have components that expire at different times, such that only these components are recalculated for the next request for that page.","The Netscape Application Server, NAS, (also called KIVA Enterprise Server), of Netscape Corporation of Mountain View, Calif., has been used here to compute stream out the dynamic components of a Web page. In Kiva, component objects to stream data have been written using Kiva's AppLogic class. Kiva provides an application programming interface (API) that provides a set of programming instructions that accomplish a well-defined, modular task within the application. In order to process multiple components within a page of data, each component makes a new request to the application server. Each new request requires a new thread and generates all the objects to execute, which consumes valuable system resources. KIVA provides a caching technique to cache each request.","A disadvantage of using the Kiva Enterprise Server caching technique is that every new request needs to be sent to the application server. This results in a greater amount of overhead as there is a high cost associated with starting out a new request. Thus, if a given page contains five different components, the server will process this as six separate and full requests (the page plus the first components) and each request would carry with it the high cost of starting out a new request. Also in this solution, the new request which is being cached needs to be specially programmed to activate the caching. This becomes a maintenance problem as every object that uses caching must be examined, in order to modify it.","A method and system of streaming a page of data are described. In one embodiment, an object corresponding to the page of data is allocated. The object is executed. If the object is a proxy, then the proxy is executed. If the object is a component, then the component is executed. If the object is a container, then the container is executed.","In one embodiment, objects within a page of data may be written as Java objects. Objects may be components, proxies, or containers of objects. If the page of data has multiple components, the processing costs associated with each start-up are eliminated by processing the caching of the objects in a single request for the page as a whole. A given request is associated with only one start-up expense and all objects are processed during the execution of the request. In one embodiment, a proxy is created in place of the object which executes like the object. At the time the object is to process and stream out its data, the proxy checks input parameters against a cache criteria for the object. If the cache criteria is satisfied and the data is in the cache, the data in the cache is streamed out to the base agent associated with the proxy without creating or processing the object component.","If the cache criteria is satisfied and the data is not in the cache, the proxy creates the object and executes it via a caching base agent. The caching base agent captures all the output from the object associated with the proxy into a buffer. When the object finishes streaming data to the buffer, the caching base agent saves the data to the cache. The proxy then streams out the cache to the associated base agent for the proxy, which in turn streams it out to the requesting web client. In one embodiment, an object may contain any number of nested sub-objects to any number of levels of nesting. The objects and nested sub-objects may be components, proxies, or containers.","In one embodiment, each component is a generic class and not a Kiva Enterprise Server specific AppLogic. The components are not coded in any special manner in order that they may be implementation independent. The component caching may be actuated externally to the component without changes to the component objects.","A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure, as it appears in the Patent and Trademark Office patent file or records, but otherwise reserves all copyright rights whatsoever.","In the following detailed description, numerous specific details are set forth in order to provide a thorough understanding of the present invention. However, it will be apparent to one skilled in the art that the present invention may be practiced without these specific details. In some instances, well-known structures and devices are shown in block diagram form, rather than in detail, in order to avoid obscuring the present invention.","Some portions of the detailed descriptions which follow are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here, and generally, conceived to be a self-consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually, though not necessarily, these quantities take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared, and otherwise manipulated. It has proven convenient at times, principally for reasons of common usage, to refer to these signals as bits, values, elements, symbols, characters, terms, numbers, or the like.","It should be borne in mind, however, that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion, it is appreciated that throughout the description, discussions utilizing terms such as \u201cprocessing\u201d or \u201ccomputing\u201d or \u201ccalculating\u201d or \u201cdetermining\u201d or \u201cdisplaying\u201d or the like, refer to the action and processes of a computer system, or similar electronic computing device, that manipulates and transforms data represented it as physical (electronic) quantities within the computer system's registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage, transmission or display devices.","The present invention also relates to apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes, or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium, such as, but is not limited to, any type of disk including floppy disks, optical disks, CD-ROMs, and magnetic-optical disks, read-only memories (ROMs), random access memories (RAMs), EPROMs, EEPROMs, magnetic or optical cards, or any type of media suitable for storing electronic instructions, and each coupled to a computer system bus.","The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein, or it may prove convenient to construct more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will appear from the description below. In addition, the present invention is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the invention as described herein.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 1","FIG. 1"],"b":["100","102","104","102","104","112","106","108","112","106","108"]},"In one embodiment, a user at client  requests a page of data represented by a universal resource locator (URL) from server . The request is transmitted via WAN  to server . Server  creates an occurrence of a base agent associated with the page of data and processes the execute method of the occurrence of the base class. The execute method of the base class allocates an object, which may be a component, a proxy, or a container. The execute method of the object is then called. If the object is a component, then it calculates the result and streams out the result to the associated base agent. If the object is a proxy, then it checks the cache to see if the request meets the cache criteria. If the criteria is met, and if the result exists in cache, then the proxy streams out the cache entry to the associated base agent. If entry is not in the cache, then the underlying object associated with the proxy is executed, using a caching base agent. The caching base agent captures all the output of the underlying object and saves the output into the cache. The cache entry is then streamed out to the associated base agent by the proxy which in turn streams it out to the web client. If the object is a container it generates all the objects contained within the container in which each object may be a component, container, or a proxy.","In one embodiment, the output of each object may be cached in mass storage . If caching is not required for the class or type of object, then the process is as described above. However, if caching is required for the class of object, the stored data for the object is retrieved from the cache and streamed out. If the data is not in the cache, the object creates a cache entry for the data and streams the output to a buffer within mass storage . Once the object completes streaming the output to the buffer, the output is saved into the cache and streamed out.",{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIG. 2","FIG. 2","FIG. 2"],"b":["200","202","215","210","204","206","208","202","215","212","212","200","102","108","212","112","106","108","102"]},{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIG. 3","FIG. 3"],"b":["300","300","104","102","102","305","310","320","305","310","320","102","320","325","325","104","325"]},"A Uniform Request Locator (URL) request for a page of data is received via the web server  at application server . In one embodiment, application server  transfers control to object application  by creating an occurrence of a base agent associated with the URL page and processes the execute method of the occurrence of the base agent. The execute method of the base agent determines which object is associated with the URL page and allocates an instance of the object. The execute method of the base agent passes input parameters to the object. In one embodiment, if the object is a container, the instance of the container determines all of the objects contained within the container and allocates an instance of each object.","The execute method of the object is processed in order to calculate and stream output. The container calls the execute method of each of its objects in order that each object calculates and streams out its own data. If the object is a component, its output is streamed to the base agent. If the object being processed is a proxy, the proxy is processed in place of the component. The proxy determines whether the input parameters for the underlying object match specified cache criteria for the type of the object. If the input parameters match the cache criteria, component cache  is checked to see if there is an entry within component cache  corresponding to the input request. If a non-empty cached entry is found, the data of the entry is streamed out by the proxy to the base agent for the page. Thus, a previous entry matching cache criteria for the object and current arguments is found in the component cache  and is streamed out by the proxy without creating or executing the underlying object. If an empty entry is found (another thread is calculating data for this entry) \u201cData unavailable\u201d is streamed out by the proxy and its execution ends.","If no valid entry was found within component cache , an entry may be created. In one embodiment, a cache entry is created if the object class is tagged as allowing data to be cached. The proxy reserves an entry within component cache  corresponding to the input parameters and object. The proxy requests object application  to initiate an embedded execution of a caching base agent for the target of the object to be cached and object application  creates an instance of the caching base agent. The instance of the caching base agent executes the object which streams its output to a buffer. When the object's execution completes, the proxy saves the buffer containing the accumulated output of the object into the reserved entry in component cache . After the buffer is saved in component cache , data in the entry is streamed to the caching base agent which streams the output to the browser.",{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 4","i":"a ","b":["310","310","405","410","305","405","410","320","410","320","305"]},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 4","i":"b ","b":["320","320","450","452","454","460","320","455","465","310","450","452","450","452","310","305"]},"An object's output may be cached as an independent cache entry within component cache . If an object is to be cached, the container inserts a proxy in place of the object within the processing stream. For any object that may be a candidate for caching, a proxy is created in place of the object. When the execute method of a container is processed, the execute method of each of the objects is processed to stream out its data. When the object that is being represented as a proxy is executed, the execute method of the proxy is processed by proxy processing unit . When the proxy's execute method is processed, it first determines if the object's input parameters match cache criteria for the object. If the cache criteria is met, the proxy determines whether an entry already exists in component cache  for the object. If a non-empty entry already exists, the proxy streams the data from component cache  to the base agent processing unit . If an empty entry is already reserved for the object, an error message is sent as output notifying the user that the data for the object is unavailable. However, if the entry does not exist, a new entry is created in the component cache  by the proxy.","The proxy then creates an embedded execution of a caching base agent. The instance of the caching base agent creates an entry in caching buffer  to receive the output from the object represented by the proxy. Caching base agent creates and executes the object represented by the proxy. As the object streams data to its caching base agent, caching agent processing unit  captures the output from the object and appends it to caching buffer . After the execution of the object is complete, caching agent processing unit  transfers the information in caching buffer  to the previously created entry in component cache . Control then returns to proxy processing unit  which retrieves the just-created entry in component cache  and streams the data to base agent processing unit . As the container and all its components stream data to base agent processing unit , base agent processing unit  streams the data to application server  which streams the data to web server .",{"@attributes":{"id":"p-0043","num":"0042"},"figref":["FIG. 5","FIG. 5"],"b":["455","320","455","502","504","506","508","502","450","504","310","305","506","508","508","465","465","325"]},{"@attributes":{"id":"p-0044","num":"0043"},"figref":["FIG. 6","FIG. 6"],"b":["325","325","605","605","610","615","610","605","610","615"]},"Keys  are created by a concatenation of the cache criteria, which specifies the conditions under which caching is performed for an object, and the object name. Cache criteria may be developed for each type or class of object that is susceptible to caching. In one embodiment, in order to activate the object class, information is entered as to the length of time the information is to be maintained in the cache  and under what conditions the caching is to take place. An entry may be maintained in the cache for a specific period of time or may be maintained indefinitely. For example, an object may be cached for a set period of time such as 60 seconds. When the object is first executed, the execute method of the object will be processed and its output will be saved in the cache. The key value created for the cached entry will be removed from the cache by a separately running program 60 seconds after the entry has been created. Prior to removal, any other request that matches a specific object and satisfies the cache criteria will stream the cache value from the cache  directly. After the cached entry has been removed, the first request matching the cache criteria will result in a new entry being created in cache .","In one embodiment, the following conditions may be specified for a given class object. First, the condition that no special conditions should be satisfied in order for the object to be cached. This results in the object being cached regardless of any values of the input parameters. Second, the argument value condition indicating a parameter and a value for the parameter which specifies that caching is to be performed only when the specified parameter exists in the set of input parameters and its value matches the value specified. If the value specified is a star (*) or any other symbol designated for this purpose, then any input value matches the parameter. Otherwise, the value must be specified and it must match the value of the parameter exactly. For example, if the conditions specified is \u201cinput-param,def\u201d, then caching would be performed if the set of input parameters contains the parameter whose name is \u201cinput-param\u201d and the value of this parameter is \u201cdef\u201d. In this example, the output will be cached with the key representing the name of the object concatenated with the matching value \u201cdef\u201d. If the cache criteria used is \u201cparam1,*\u201d then caching is performed if the parameter \u201cparam1\u201d exists in the set of input parameters. Since this parameter may have different values for different invocations, each invocation looks up the key made by the concatenation of the name of the object and the current value of the parameter \u201cparam1\u201d with special symbol such as \u201c;\u201d used as separator. For example, if the first invocation of this object named \u201csub\u201d specifies \u201cparam1=A\u201d, this matches the criteria \u201cparam1=*\u201d and an entry matching the key \u201csub;A\u201d is created in the cache, \u201csub\u201d is executed and its output is saved to the entry whose key is \u201csub;A\u201d. During the \u201clifetime\u201d of this entry, if other requests are made for component \u201csub\u201d, one which specifies \u201cparam1=B\u201d and the second specifies \u201cparam1=A\u201d, the first request will result in executing the object and the output saved in an entry whose key is \u201csub;B\u201d and the second request will result in the output streamed from the entry which is already in the cache whose key is \u201csub;A\u201d.","Another type of condition may specify that caching should be performed if a parameter exists in the set of input parameters whose name is \u201cargument\u201d and contains a value which is one of several possibilities such as \u201cvalue 1\u201d, \u201cvalue 2\u201d, \u201cvalue 3\u201d. Any of the values specified in the condition may match the criteria. Thus, this condition may specify, for example, \u201cshape, triangle, circle\u201d, which means that caching will occur when the value of the \u201cshape\u201d parameter is either \u201ctriangle\u201d or \u201ccircle\u201d. If an invocation of this object contains the parameter \u201cshape\u201d with the value of \u201csquare\u201d, no match is made for this criteria and output will not be cached. In addition, any of the conditions described above may be combined to form a variety of cache criteria.",{"@attributes":{"id":"p-0048","num":"0047"},"figref":["FIG. 7","FIG. 7"],"b":"700"},{"@attributes":{"id":"p-0049","num":"0048"},"figref":["FIG. 8","FIG. 8"],"b":["800","800"]},{"@attributes":{"id":"p-0050","num":"0049"},"figref":["FIG. 9","FIG. 9"],"b":["900","900"]},{"@attributes":{"id":"p-0051","num":"0050"},"figref":["FIG. 10","FIG. 10"],"b":["1000","1000","1000","1010","1010","1010","1020"]},{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 11","b":["1105","502","502","502"]},"At processing block , an instance of an object associated with the page of data is allocated for base agent . In addition, the object obtains a reference to the base agent which allocated the object. In one embodiment, the object may be a component, a proxy, or a container. The execute method of the instance of the base agent  determines which object is associated with the page of data and creates the appropriate object. If a proxy is created, the proxy receives the name of the underlying object for which it acts as a proxy.","At processing block , the execute method of the instance of the object is processed. The object execute method determines the output data to be streamed out to the base agent . If the object is a component, the processing blocks of  are processed. If the object is a container, the processing blocks of  are processed. If the object is a proxy, the processing blocks of  are processed.",{"@attributes":{"id":"p-0055","num":"0054"},"figref":["FIG. 12","FIG. 12","FIG. 11"],"b":["1120","1205"]},"At processing block , the component streams its output data to its associated base agent. Each instance of the component contains a reference to the associated base agent created in processing block  of . To stream its output, the component calls a stream result method of that base agent. A stream result method in the base agent streams the output data to the web browser. A stream result method in the caching base agent, on the other hand, captures this output data in a buffer as described in reference to .",{"@attributes":{"id":"p-0057","num":"0056"},"figref":["FIG. 13","FIG. 13","FIG. 11"],"b":["1120","1305"]},"At processing block , after creating all the instances for the objects, the container processes the execute method for each of the objects created. The objects may be components, proxies, or containers. If the object generated is a component, the processing blocks of  are processed. If the object generated is a container, the processing blocks of  are processed. If the object generated is a proxy, the processing blocks of  are processed.",{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIG. 14","b":["1405","1410","1420"]},"If the cache criteria is not satisfied at processing block , at processing block , the underlying object for the proxy is allocated. In one embodiment, the object may be a component, a proxy, or a container. The execute method of the proxy determines which object is allocated based on the name passed to it in processing block  of .","At processing block , the execute method of the underlying object is processed. The object execute method determines the output data and streams it out to the associated base agent for the object. If the object is a component, the processing blocks of  are processed. If the object is a container, the processing blocks of  are processed. If the object is a proxy, the processing blocks of  are processed.","If the cache criteria is satisfied at processing block , at processing block , a cache key is constructed from the underlying object name and current parameter values that matched the cache criteria.","At processing block , it is determined if an entry exists for the cache key within component cache . If the cache entry exists, processing continues at processing block . If the cache entry does not exist, processing continues at processing block .","At processing block , an entry corresponding to the cache key is created in the component cache . In one embodiment, proxy  adds a parameter to the current parameters of the current request. This parameter's value contains the key for which an entry has just been created in the cache and reserves an entry in the cache .","At processing block , proxy  creates an instance of the caching base agent . At processing block , the instance of caching base agent  is executed for the object associated with the proxy. Processing blocks  through  of  are processed to execute the base agent which creates the output data of the object within the component cache .","At processing block , the cache value of the entry associated with the object is streamed from component cache  to the associated base agent which streams out the data and processing of the flow diagram of  ends.","If at processing block  it is determined that a cache entry already exits for the cache key constructed in processing block , at processing block  it is determined if the cache entry is empty. If the entry is empty, processing continues at processing block . If the entry is not empty, processing continues at processing block .","At processing block , if a blank entry already exits in component cache  for the object, the object output is being cached by another thread. In this case, the object streams out \u201cdata unavailable\u201d to the associated base agent for the object.",{"@attributes":{"id":"p-0069","num":"0068"},"figref":"FIG. 15","b":"1505"},"At processing block , an occurrence of the associated object is allocated. In one embodiment, the object may be a component, a proxy, or a container. The execute method of the instance of the base agent  associated with the associated object determines which object is allocated. The object is given a reference to this caching base agent.","At processing block , the execute method of the associated object is executed. The object's execute method determines the output data to be streamed out to the associated base agent for the object. As the object streams out its output data to its associated caching base agent, all output for the associated object is captured by the caching base agent and streamed out to the buffer.","At processing block , after the execution of the associated object completes, the contents of the buffer  is transferred to the component cache  into the entry whose key is represented by one of the parameters. After the transfer of the data from buffer  to component cache  is complete, processing continues at processing block  of .","Several embodiments in the implementation of the streaming of a page of data have been described. The specific arrangements and methods described here are merely illustrative of the principles of this invention. Numerous modifications in form and detail may be made by those skilled in the art without departing from the true spirit and scope of the invention. Although this invention has been shown in relation to a particular embodiment, it should not be considered so limited. Rather it is limited only by the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention is illustrated by way of example, and not by way of limitation in the figures of the accompanying drawings in which like reference numerals refer to similar elements.",{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1","b":"100"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 4","i":"a "},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4","i":"b "},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 5","FIG. 4"],"i":"b; "},{"@attributes":{"id":"p-0015","num":"0014"},"figref":["FIG. 6","FIG. 3"]},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIGS. 7\u201310"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 15"}]},"DETDESC":[{},{}]}
